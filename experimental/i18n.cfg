# Plone 5 uses Chameleon for templates. We need at least i18ndude 3.4.5
# to support the unnamed attributes functionality.
# (There is this constraint in the i18ndude install below.)
#
# To see if there is any new message in any domain:
# bin/i18n-update-all |grep -v "0 added, 0 removed"
#
# To find untranslated messages from the plone domain packages (silent mode, good for a cron job)
# bin/i18n-find-untranslated
# With details:
# bin/i18n-find-untranslated details
#
# To extract messages and merge po for the plone domain:
# bin/i18n plone
#
# Some documentation how to add a new package or move locales from a package
# to plone.app.locales can be found here:
# https://github.com/plone/Products.CMFPlone/issues/983#issue-106606074

[domain]
atcontenttypes =
    Products.ATContentTypes
atreferencebrowserwidget =
    archetypes.referencebrowserwidget
cmfplacefulworkflow =
    Products.CMFPlacefulWorkflow
cmfeditions =
    Products.CMFEditions
plone =
    Products.CMFPlone
    Products.PlonePAS
    plone.batching
    plone.contentrules
    plone.i18n
    plone.locking
    plone.memoize
    plone.portlets
    plone.portlet.collection
    plone.portlet.static
    plone.session
    plone.intelligenttext
    plone.app.contentmenu
    plone.app.content
    plone.app.contenttypes
    plone.app.contentrules
    plone.app.controlpanel
    plone.app.customerize
    plone.app.dexterity
    plone.app.discussion
    plone.app.i18n
    plone.app.imaging
    plone.app.iterate
    plone.app.layout
    plone.app.linkintegrity
    plone.app.lockingbehavior
    plone.app.portlets
    plone.app.redirector
    plone.app.textfield
    plone.app.users
    plone.app.versioningbehavior
    plone.app.viewletmanager
    plone.app.vocabularies
    plone.app.widgets
    plone.app.workflow
    plone.app.z3cform
    plone.cachepurging
    plone.directives.form
    plone.formwidget.recurrence
    plone.formwidget.namedfile
#    plone.formwidget.datetime
#    plone.formwidget.contenttree
    plone.namedfile
    plone.stringinterp
    Products.Archetypes
    Products.CMFDiffTool
    Products.validation
    plone.app.referenceablebehavior
    plone.app.registry
    plone.app.collection
    plone.app.theming
    plone.app.querystring
    plone.protect
    plone.schema
    plone.schemaeditor
    plone.resource
plone.app.event =
    plone.app.event
plone.app.caching =
    plone.app.caching
plone.app.ldap =
    plone.app.ldap

[buildout]
extends =
    ../plips/plipbase.cfg
parts +=
    i18n
    i18n-update-all
    i18n-find-untranslated
    i18n-find-untranslated-diff-from-previous
    i18ndude

eggs +=
    Pillow

auto-checkout +=
    plone.app.locales
    ${domain:atcontenttypes}
    ${domain:atreferencebrowserwidget}
    ${domain:cmfplacefulworkflow}
    ${domain:cmfeditions}
    ${domain:plone}
    ${domain:plone.app.event}
    ${domain:plone.app.caching}
    ${domain:plone.app.ldap}

[instance]
eggs +=
    plone.app.caching

[i18n]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    domain=$1
    localesdirectory="${buildout:directory}/../src/plone.app.locales/plone/app/locales/locales"
    src="${buildout:directory}/../src/"
    options=""
    exclude=""
    atcontenttypes="${domain:atcontenttypes}"
    atreferencebrowserwidget="${domain:atreferencebrowserwidget}"
    cmfplacefulworkflow="${domain:cmfplacefulworkflow}"
    cmfeditions="${domain:cmfeditions}"
    plone="${domain:plone}"
    ploneappevent="${domain:plone.app.event}"
    ploneappcaching="${domain:plone.app.caching}"
    ploneappldap="${domain:plone.app.ldap}"
    if [ "$domain" == "atcontenttypes" ]; then
        packages=$atcontenttypes
    fi
    if [ "$domain" == "atreferencebrowserwidget" ]; then
        packages=$atreferencebrowserwidget
    fi
    if [ "$domain" == "cmfplacefulworkflow" ]; then
        packages=$cmfplacefulworkflow
    fi
    if [ "$domain" == "cmfeditions" ]; then
        packages=$cmfeditions
    fi
    if [ "$domain" == "plone" ]; then
        packages=$plone
        options="--merge2 $localesdirectory/plone-generated.pot"
        exclude="rss.xml.pt search-rss.pt itunes.xml.pt RSS.pt rss.pt index.html metadirectives.py"
    fi
    if [ "$domain" == "plone.app.event" ]; then
        packages=$ploneappevent
        localesdirectory="${buildout:directory}/../src/plone.app.event/plone/app/event/locales"
    fi
    if [ "$domain" == "plone.app.caching" ]; then
        packages=$ploneappcaching
        localesdirectory="${buildout:directory}/../src/plone.app.locales/plone/app/locales/locales-addons"
    fi
    if [ "$domain" == "plone.app.ldap" ]; then
        packages=$ploneappldap
        localesdirectory="${buildout:directory}/../src/plone.app.locales/plone/app/locales/locales-addons"
    fi
    potfile=$localesdirectory/$domain.pot
    potmanualfile=$localesdirectory/$domain-manual.pot
    cd $src
    if [ "$domain" != "widgets" ]; then
      ${buildout:bin-directory}/i18ndude rebuild-pot --pot $potfile --create $domain \
      --merge $potmanualfile $options --exclude="$exclude" $packages
    fi
    ${buildout:bin-directory}/i18ndude sync --pot $potfile $localesdirectory/*/LC_MESSAGES/$domain.po
output = ${buildout:bin-directory}/i18n
mode = 755

[i18n-update-all]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    domains="atcontenttypes
    atreferencebrowserwidget
    cmfplacefulworkflow
    cmfeditions
    plone
    plone.app.event
    plone.app.caching
    plone.app.ldap
    widgets"
    for domain in $domains; do bin/i18n $domain; done
output = ${buildout:bin-directory}/i18n-update-all
mode = 755

[i18n-find-untranslated]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    packages="${domain:plone}"
    cd ${buildout:directory}/../src
    if [[ "$1" == "details" ]]; then
      ${buildout:bin-directory}/i18ndude find-untranslated -n $packages
    else
      ${buildout:bin-directory}/i18ndude find-untranslated -s $packages|sort -u|grep -v .git|grep -v Products.CMFPlone/Products/CMFPlone/www/
    fi
output = ${buildout:bin-directory}/i18n-find-untranslated
mode = 755

[i18n-find-untranslated-diff-from-previous]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    if [ -f /tmp/i18n-find-untranslated-new ]; then
      mv /tmp/i18n-find-untranslated-new /tmp/i18n-find-untranslated-previous
    fi
    ${buildout:bin-directory}/i18n-find-untranslated > /tmp/i18n-find-untranslated-new
    if [ -f /tmp/i18n-find-untranslated-previous ]; then
      diff -u /tmp/i18n-find-untranslated-previous /tmp/i18n-find-untranslated-new|grep -v '^@'|grep -v '^ '
    else
      cat /tmp/i18n-find-untranslated-new
    fi
output = ${buildout:bin-directory}/i18n-find-untranslated-diff-from-previous
mode = 755

[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude >= 3.4.5
