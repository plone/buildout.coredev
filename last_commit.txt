Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T20:17:12+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/3376ab10defc01c45f8ec7c798e5fe9065551ebc

feat: report if a permission does not exist

If the user does not have a permission, it might be because the
permission name is actually wrong.

Files changed:
M src/plone/api/user.py

b'diff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 1ac97d16..ad6eca6f 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -327,7 +327,18 @@ def has_permission(permission, username=None, user=None, obj=None):\n         context = env.adopt_user(username, user)\n \n     with context:\n-        return bool(getSecurityManager().checkPermission(permission, obj))\n+        return_value = bool(getSecurityManager().checkPermission(permission, obj))\n+        if not return_value:\n+            names = [x[0] for x in getPermissions()]\n+            if permission not in names:\n+                raise InvalidParameterError(\n+                    "Cannot find a permission with name \'{permission}\'\\n"\n+                    "Available permissions are:\\n"\n+                    "{names}".format(\n+                        permission=permission, names="\\n".join(sorted(names))\n+                    )\n+                )\n+        return return_value\n \n \n @required_parameters("roles")\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T20:17:21+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/e34240885389ef20c4480a2afc255c14fd67e4b8

fix(tests): use an existing permission

Files changed:
M src/plone/api/tests/test_env.py

b'diff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex e56161ba..c82e4af5 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -530,14 +530,15 @@ def test_adopt_user_different_username(self):\n \n     def test_roles_restored_after_exception(self):\n         """Tests that roles are restored after an exception."""\n-        self.assertFalse(api.user.has_permission("Manage portal content"))\n+        permission = "Manage properties"\n+        self.assertFalse(api.user.has_permission(permission))\n         try:\n             with api.env.adopt_roles(["Manager"]):\n-                self.assertTrue(api.user.has_permission("Manage portal content"))\n+                self.assertTrue(api.user.has_permission(permission))\n                 raise TestException("Test exception")\n         except TestException:\n             pass\n-        self.assertFalse(api.user.has_permission("Manage portal content"))\n+        self.assertFalse(api.user.has_permission(permission))\n \n     def test_user_restored_after_exception(self):\n         """Tests that roles are restored after an exception."""\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T20:17:27+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/ce188593ba01fcb515044095a9a2e561d878e6b2

Add news entry

Files changed:
A news/515.feature

b'diff --git a/news/515.feature b/news/515.feature\nnew file mode 100644\nindex 00000000..4fcdd219\n--- /dev/null\n+++ b/news/515.feature\n@@ -0,0 +1,3 @@\n+Report if a permission does not exist\n+when calling `api.user.has_permission`.\n+[gforcada]\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-29T20:02:32+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/f2ac29ae8fe9509f877a01a3f12898792f2864cf

Merge pull request #526 from plone/report-non-existing-permissions

Report non existing permissions

Files changed:
A news/515.feature
M src/plone/api/tests/test_env.py
M src/plone/api/user.py

b'diff --git a/news/515.feature b/news/515.feature\nnew file mode 100644\nindex 00000000..4fcdd219\n--- /dev/null\n+++ b/news/515.feature\n@@ -0,0 +1,3 @@\n+Report if a permission does not exist\n+when calling `api.user.has_permission`.\n+[gforcada]\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex e56161ba..c82e4af5 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -530,14 +530,15 @@ def test_adopt_user_different_username(self):\n \n     def test_roles_restored_after_exception(self):\n         """Tests that roles are restored after an exception."""\n-        self.assertFalse(api.user.has_permission("Manage portal content"))\n+        permission = "Manage properties"\n+        self.assertFalse(api.user.has_permission(permission))\n         try:\n             with api.env.adopt_roles(["Manager"]):\n-                self.assertTrue(api.user.has_permission("Manage portal content"))\n+                self.assertTrue(api.user.has_permission(permission))\n                 raise TestException("Test exception")\n         except TestException:\n             pass\n-        self.assertFalse(api.user.has_permission("Manage portal content"))\n+        self.assertFalse(api.user.has_permission(permission))\n \n     def test_user_restored_after_exception(self):\n         """Tests that roles are restored after an exception."""\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 1ac97d16..ad6eca6f 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -327,7 +327,18 @@ def has_permission(permission, username=None, user=None, obj=None):\n         context = env.adopt_user(username, user)\n \n     with context:\n-        return bool(getSecurityManager().checkPermission(permission, obj))\n+        return_value = bool(getSecurityManager().checkPermission(permission, obj))\n+        if not return_value:\n+            names = [x[0] for x in getPermissions()]\n+            if permission not in names:\n+                raise InvalidParameterError(\n+                    "Cannot find a permission with name \'{permission}\'\\n"\n+                    "Available permissions are:\\n"\n+                    "{names}".format(\n+                        permission=permission, names="\\n".join(sorted(names))\n+                    )\n+                )\n+        return return_value\n \n \n @required_parameters("roles")\n'

