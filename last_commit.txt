Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-11-16T12:09:33+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/9c96af6827165c8f1c019fbacf20c6352ab37436

incorporate plone.synchronize

Files changed:
A news/157.bugfix
A plone/dexterity/synchronize.py
A plone/dexterity/tests/test_synchronize.py
M plone/dexterity/schema.py
M setup.py

b'diff --git a/news/157.bugfix b/news/157.bugfix\nnew file mode 100644\nindex 0000000..71ffad6\n--- /dev/null\n+++ b/news/157.bugfix\n@@ -0,0 +1,4 @@\n+Incorporate ``plone.synchronize`` its one and only simple ``synchronized`` function into ``plone.dexterity``, which were the only consumer.\n+Also moves the test. Removes a dependency and a package to look after.\n+[jensens]\n+\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 7a0ef35..182e755 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -1,15 +1,15 @@\n # -*- coding: utf-8 -*-\n+from .interfaces import IContentType\n+from .interfaces import IDexterityFTI\n+from .interfaces import IDexteritySchema\n+from .interfaces import ISchemaInvalidatedEvent\n+from .synchronize import synchronized\n from plone.alterego import dynamic\n from plone.alterego.interfaces import IDynamicObjectFactory\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.registration import BehaviorRegistration\n-from plone.dexterity.interfaces import IContentType\n-from plone.dexterity.interfaces import IDexterityFTI\n-from plone.dexterity.interfaces import IDexteritySchema\n-from plone.dexterity.interfaces import ISchemaInvalidatedEvent\n from plone.supermodel.parser import ISchemaPolicy\n from plone.supermodel.utils import syncSchema\n-from plone.synchronize import synchronized\n from Products.CMFCore.interfaces import ISiteRoot\n from threading import RLock\n from zope.component import adapter\ndiff --git a/plone/dexterity/synchronize.py b/plone/dexterity/synchronize.py\nnew file mode 100644\nindex 0000000..5bc8de3\n--- /dev/null\n+++ b/plone/dexterity/synchronize.py\n@@ -0,0 +1,16 @@\n+def synchronized(lock):\n+    """Decorate a method with this and pass in a threading.Lock object to\n+    ensure that a method is synchronised over the given lock.\n+    """\n+\n+    def wrap(f):\n+        def synchronized_function(*args, **kw):\n+            lock.acquire()\n+            try:\n+                return f(*args, **kw)\n+            finally:\n+                lock.release()\n+\n+        return synchronized_function\n+\n+    return wrap\ndiff --git a/plone/dexterity/tests/test_synchronize.py b/plone/dexterity/tests/test_synchronize.py\nnew file mode 100644\nindex 0000000..48f946b\n--- /dev/null\n+++ b/plone/dexterity/tests/test_synchronize.py\n@@ -0,0 +1,68 @@\n+from plone.dexterity.synchronize import synchronized\n+from threading import Lock\n+\n+import unittest\n+\n+\n+class StupidStack(object):\n+\n+    _elements = []  # not thread safe\n+    _lock = Lock()\n+\n+    @synchronized(_lock)\n+    def push(self, item):\n+        self._elements.append(item)\n+\n+    @synchronized(_lock)\n+    def pop(self):\n+        last = self._elements[-1]\n+        del self._elements[-1]\n+        return last\n+\n+\n+_global_lock = Lock()\n+_global_list = []\n+\n+\n+@synchronized(_global_lock)\n+def reverse_global_list():\n+    global _global_list\n+    _global_list.reverse()\n+\n+\n+class Test(unittest.TestCase):\n+    def test_instance_method(self):\n+\n+        shared_stack = StupidStack()\n+        shared_stack.push("one")\n+        item = shared_stack.pop()\n+\n+        self.assertEqual("one", item)\n+\n+        with self.assertRaises(IndexError):\n+            shared_stack.pop()\n+\n+        # should not be dead-locked even after an exception\n+\n+        shared_stack.push("two")\n+        item = shared_stack.pop()\n+\n+        self.assertEqual("two", item)\n+\n+    def test_function(self):\n+        global _global_list\n+        _global_list.extend([1, 2, 3])\n+\n+        reverse_global_list()\n+        reverse_global_list()\n+        reverse_global_list()\n+\n+        self.assertEqual([3, 2, 1], _global_list)\n+\n+\n+def test_suite():\n+    return unittest.defaultTestLoader.loadTestsFromName(__name__)\n+\n+\n+if __name__ == "__main__":\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/setup.py b/setup.py\nindex 3edc505..c41f545 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -67,7 +67,6 @@ def read(filename):\n         "plone.memoize",\n         "plone.rfc822",\n         "plone.supermodel>=1.0b2",\n-        "plone.synchronize",\n         "plone.uuid",\n         "plone.z3cform>=0.6.0",\n         "Products.CMFCore",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-11-16T12:10:10+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/9f861bf0407d94b7e0d5671030a5d08aa55a368c

Merge pull request #157 from plone/include-synchronize

incorporate plone.synchronize

Files changed:
A news/157.bugfix
A plone/dexterity/synchronize.py
A plone/dexterity/tests/test_synchronize.py
M plone/dexterity/schema.py
M setup.py

b'diff --git a/news/157.bugfix b/news/157.bugfix\nnew file mode 100644\nindex 0000000..71ffad6\n--- /dev/null\n+++ b/news/157.bugfix\n@@ -0,0 +1,4 @@\n+Incorporate ``plone.synchronize`` its one and only simple ``synchronized`` function into ``plone.dexterity``, which were the only consumer.\n+Also moves the test. Removes a dependency and a package to look after.\n+[jensens]\n+\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 7a0ef35..182e755 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -1,15 +1,15 @@\n # -*- coding: utf-8 -*-\n+from .interfaces import IContentType\n+from .interfaces import IDexterityFTI\n+from .interfaces import IDexteritySchema\n+from .interfaces import ISchemaInvalidatedEvent\n+from .synchronize import synchronized\n from plone.alterego import dynamic\n from plone.alterego.interfaces import IDynamicObjectFactory\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.registration import BehaviorRegistration\n-from plone.dexterity.interfaces import IContentType\n-from plone.dexterity.interfaces import IDexterityFTI\n-from plone.dexterity.interfaces import IDexteritySchema\n-from plone.dexterity.interfaces import ISchemaInvalidatedEvent\n from plone.supermodel.parser import ISchemaPolicy\n from plone.supermodel.utils import syncSchema\n-from plone.synchronize import synchronized\n from Products.CMFCore.interfaces import ISiteRoot\n from threading import RLock\n from zope.component import adapter\ndiff --git a/plone/dexterity/synchronize.py b/plone/dexterity/synchronize.py\nnew file mode 100644\nindex 0000000..5bc8de3\n--- /dev/null\n+++ b/plone/dexterity/synchronize.py\n@@ -0,0 +1,16 @@\n+def synchronized(lock):\n+    """Decorate a method with this and pass in a threading.Lock object to\n+    ensure that a method is synchronised over the given lock.\n+    """\n+\n+    def wrap(f):\n+        def synchronized_function(*args, **kw):\n+            lock.acquire()\n+            try:\n+                return f(*args, **kw)\n+            finally:\n+                lock.release()\n+\n+        return synchronized_function\n+\n+    return wrap\ndiff --git a/plone/dexterity/tests/test_synchronize.py b/plone/dexterity/tests/test_synchronize.py\nnew file mode 100644\nindex 0000000..48f946b\n--- /dev/null\n+++ b/plone/dexterity/tests/test_synchronize.py\n@@ -0,0 +1,68 @@\n+from plone.dexterity.synchronize import synchronized\n+from threading import Lock\n+\n+import unittest\n+\n+\n+class StupidStack(object):\n+\n+    _elements = []  # not thread safe\n+    _lock = Lock()\n+\n+    @synchronized(_lock)\n+    def push(self, item):\n+        self._elements.append(item)\n+\n+    @synchronized(_lock)\n+    def pop(self):\n+        last = self._elements[-1]\n+        del self._elements[-1]\n+        return last\n+\n+\n+_global_lock = Lock()\n+_global_list = []\n+\n+\n+@synchronized(_global_lock)\n+def reverse_global_list():\n+    global _global_list\n+    _global_list.reverse()\n+\n+\n+class Test(unittest.TestCase):\n+    def test_instance_method(self):\n+\n+        shared_stack = StupidStack()\n+        shared_stack.push("one")\n+        item = shared_stack.pop()\n+\n+        self.assertEqual("one", item)\n+\n+        with self.assertRaises(IndexError):\n+            shared_stack.pop()\n+\n+        # should not be dead-locked even after an exception\n+\n+        shared_stack.push("two")\n+        item = shared_stack.pop()\n+\n+        self.assertEqual("two", item)\n+\n+    def test_function(self):\n+        global _global_list\n+        _global_list.extend([1, 2, 3])\n+\n+        reverse_global_list()\n+        reverse_global_list()\n+        reverse_global_list()\n+\n+        self.assertEqual([3, 2, 1], _global_list)\n+\n+\n+def test_suite():\n+    return unittest.defaultTestLoader.loadTestsFromName(__name__)\n+\n+\n+if __name__ == "__main__":\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/setup.py b/setup.py\nindex 3edc505..c41f545 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -67,7 +67,6 @@ def read(filename):\n         "plone.memoize",\n         "plone.rfc822",\n         "plone.supermodel>=1.0b2",\n-        "plone.synchronize",\n         "plone.uuid",\n         "plone.z3cform>=0.6.0",\n         "Products.CMFCore",\n'

