Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-10T23:10:38+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/1cd3860b7b8010c69d37ac7dfda186447fefcda6

Migrate the plone.site_logo field from ASCII (native string) to Bytes.

Otherwise saving the site-controlpanel can fail with a WrongType error
Fixes https://github.com/plone/Products.CMFPlone/issues/3172.

Files changed:
A news/3172.bugfix
M plone/app/upgrade/v52/configure.zcml
M plone/app/upgrade/v52/final.py

b'diff --git a/news/3172.bugfix b/news/3172.bugfix\nnew file mode 100644\nindex 00000000..b0a857a9\n--- /dev/null\n+++ b/news/3172.bugfix\n@@ -0,0 +1,4 @@\n+Migrate the ``plone.site_logo`` field from ASCII (native string) to Bytes.\n+Otherwise saving the site-controlpanel can fail with a WrongType error\n+Fixes `issue 3172 <https://github.com/plone/Products.CMFPlone/issues/3172>`_.\n+[maurits]\ndiff --git a/plone/app/upgrade/v52/configure.zcml b/plone/app/upgrade/v52/configure.zcml\nindex 4193c233..110465df 100644\n--- a/plone/app/upgrade/v52/configure.zcml\n+++ b/plone/app/upgrade/v52/configure.zcml\n@@ -162,9 +162,9 @@\n         profile="Products.CMFPlone:plone">\n \n         <gs:upgradeStep\n-            title="Miscellaneous"\n+            title="Migrate site logo from native string to bytes"\n             description=""\n-            handler="..utils.null_upgrade_step"\n+            handler=".final.migrate_site_logo_from_ascii_to_bytes"\n             />\n \n     </gs:upgradeSteps>\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex c5bbf979..f5d2045e 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -3,10 +3,12 @@\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IMarkupSchema\n+from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.utils import safe_unicode\n from zope.component import getUtility\n \n import logging\n+import six\n \n \n logger = logging.getLogger(\'plone.app.upgrade\')\n@@ -151,3 +153,48 @@ def move_markdown_transform_settings_to_registry(context):\n     extensions = pt.markdown_to_html._config.get(\'enabled_extensions\') or []\n     extensions = [safe_unicode(ext) for ext in extensions]\n     settings.markdown_extensions = extensions\n+\n+\n+def migrate_site_logo_from_ascii_to_bytes(context):\n+    """Site logo was ASCII field in 5.1, and Bytes field in 5.2.\n+\n+    zope.schema.ASCII inherits from NativeString.\n+    With Python 2 this is the same as Bytes, but with Python 3 not:\n+    you get a WrongType error when saving the site-controlpanel.\n+    """\n+    from plone.registry import field\n+    from plone.registry import Record\n+\n+    registry = getUtility(IRegistry)\n+    record = registry.records[\'plone.site_logo\']\n+    if not isinstance(record.field, field.ASCII):\n+        # All is well.\n+        # Actually, we might as well register the interface again for good measure.\n+        # I have seen a missing site_title field.\n+        registry.registerInterface(ISiteSchema, prefix="plone")\n+        return\n+    # Keep the original value so we can restore it.\n+    original_value = record.value\n+    # Delete the bad record.\n+    del registry.records[\'plone.site_logo\']\n+    # Make sure the site schema is fully registered again.\n+    # This should recreate the field correctly.\n+    # Note: if you do this when the site logo is still an ASCII field,\n+    # the record will get replaced and the logo is gone!\n+    registry.registerInterface(ISiteSchema, prefix="plone")\n+    if original_value is None:\n+        # Nothing left to do.\n+        return\n+    new_record = registry.records[\'plone.site_logo\']\n+    if isinstance(original_value, six.text_type):\n+        # fromUnicode could be called from Text in Python 3.\n+        new_value = new_record.field.fromUnicode(original_value)\n+    elif isinstance(original_value, bytes):\n+        # Unlikely, but let\'s be careful.\n+        new_value = original_value\n+    else:\n+        # Anything else is broken.\n+        return\n+    # Save the new value.\n+    new_record.value = new_value\n+    logger.info("Replaced site_logo ASCII (native string) field with Bytes field.")\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-11T11:37:41+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/1b47621f24bac5a394f17825ba6e2b7fb5a8b600

Added first tests for migration site logo to bytes.

Files changed:
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py

b'diff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex f5d2045e..47887208 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -163,10 +163,13 @@ def migrate_site_logo_from_ascii_to_bytes(context):\n     you get a WrongType error when saving the site-controlpanel.\n     """\n     from plone.registry import field\n-    from plone.registry import Record\n \n     registry = getUtility(IRegistry)\n-    record = registry.records[\'plone.site_logo\']\n+    record = registry.records.get(\'plone.site_logo\', None)\n+    if record is None:\n+        # Unexpected.  Registering the interface fixes this.\n+        registry.registerInterface(ISiteSchema, prefix="plone")\n+        return\n     if not isinstance(record.field, field.ASCII):\n         # All is well.\n         # Actually, we might as well register the interface again for good measure.\ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 3f49dde4..0b99384e 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -8,6 +8,7 @@\n from Products.CMFPlone.interfaces import IMarkupSchema\n from zope.component import getUtility\n \n+import six\n import unittest\n \n \n@@ -67,6 +68,89 @@ def test_rebuild_redirections(self):\n         self.assertTupleEqual(storage.get_full(old), redirect)\n \n \n+from plone.registry import field\n+from plone.registry import Record\n+from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+from zope.schema.interfaces import WrongType\n+\n+\n+class SiteLogoTest(unittest.TestCase):\n+    """Site logo was ASCII field in 5.1, and is Bytes field in 5.2.\n+\n+    zope.schema.ASCII inherits from NativeString.\n+    With Python 2 this is the same as Bytes, but with Python 3 not:\n+    you get a WrongType error when saving the site-controlpanel.\n+\n+    We have several situations that should result in the fix being applied:\n+\n+    1. Migration from Plone 5.1 to 5.2 on Python 2.7.\n+    2. Migration from Plone 5.2.2 to 5.2.3 (which contains this upgrade step) on Python 2.7.\n+    3. Migration from Plone 5.2.2 to 5.2.3 (which contains this upgrade step) on Python 3.\n+\n+    On Python 3 there is a definite difference between the two types of field.\n+    Tricky here may be that we should make sure that the fix is also applied on Python 2,\n+    where ASCII and Bytes are still the same.\n+\n+    Let\'s duplicate some tests and adapt them slightly to Python 2 and 3,\n+    and skip them if the current Python version is different.\n+    """\n+    layer = PLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.registry = getUtility(IRegistry)\n+\n+    def test_current_site_logo(self):\n+        # Check that we understand the current situation correctly.\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertIsNone(record.value)\n+        with self.assertRaises(WrongType):\n+            record.value = u"abc"\n+        record.value = b"ABC"\n+        self.assertEqual(record.value, b"ABC")\n+        # Migrating does nothing.\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"ABC")\n+\n+    def test_missing_site_logo_record(self):\n+        # Test that the migration adds the record if for some reason it is missing.\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+\n+        del self.registry.records[\'plone.site_logo\']\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertIsNone(record.value)\n+\n+    @unittest.skipIf(six.PY2, "Only test on Python 3")\n+    def test_site_logo_empty(self):\n+        del self.registry.records[\'plone.site_logo\']\n+        record_51 = Record(field.ASCII())\n+        self.registry.records[\'plone.site_logo\'] = record_51\n+        # Migrate.\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertIsNone(record.value)\n+\n+    @unittest.skipIf(six.PY2, "Only test on Python 3")\n+    def test_site_logo_text(self):\n+        del self.registry.records[\'plone.site_logo\']\n+        record_51 = Record(field.ASCII())\n+        record_51.value = "native string"\n+        self.registry.records[\'plone.site_logo\'] = record_51\n+        # Migrate.\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"native string")\n+\n+\n class UpgradePortalTransforms521to522Test(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n@@ -106,5 +190,6 @@ def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(UpgradeMemberData51to52Test))\n     suite.addTest(unittest.makeSuite(Various52Test))\n+    suite.addTest(unittest.makeSuite(SiteLogoTest))\n     suite.addTest(unittest.makeSuite(UpgradePortalTransforms521to522Test))\n     return suite\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-11T13:05:12+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/2053a185ccf8a1b43e02c9240697968f9eb18d14

The site logo migration tests can be the same on Py 2 and 3.

Files changed:
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py

b'diff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex 47887208..ce712498 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -190,13 +190,14 @@ def migrate_site_logo_from_ascii_to_bytes(context):\n         return\n     new_record = registry.records[\'plone.site_logo\']\n     if isinstance(original_value, six.text_type):\n-        # fromUnicode could be called from Text in Python 3.\n+        # This is what we expect in Python 3.\n+        # fromUnicode could be called fromText in Python 3.\n         new_value = new_record.field.fromUnicode(original_value)\n     elif isinstance(original_value, bytes):\n-        # Unlikely, but let\'s be careful.\n+        # This is what we expect in Python 2.\n         new_value = original_value\n     else:\n-        # Anything else is broken.\n+        # Seems impossible, but I like to be careful.\n         return\n     # Save the new value.\n     new_record.value = new_value\ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 0b99384e..738bc16f 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -84,15 +84,17 @@ class SiteLogoTest(unittest.TestCase):\n     We have several situations that should result in the fix being applied:\n \n     1. Migration from Plone 5.1 to 5.2 on Python 2.7.\n-    2. Migration from Plone 5.2.2 to 5.2.3 (which contains this upgrade step) on Python 2.7.\n-    3. Migration from Plone 5.2.2 to 5.2.3 (which contains this upgrade step) on Python 3.\n+    2. Migration from Plone 5.2.2 on Python 2.7 (where the logo is technically broken, but still works)\n+       to 5.2.3 (which contains this upgrade step) on Python 2.7.\n+       This is in fact the same as situation 1.\n+    3. Migration from Plone 5.2.2 on Python 3 (where the logo is really broken, at least for writing)\n+       to 5.2.3 (which contains this upgrade step).\n \n     On Python 3 there is a definite difference between the two types of field.\n     Tricky here may be that we should make sure that the fix is also applied on Python 2,\n     where ASCII and Bytes are still the same.\n-\n-    Let\'s duplicate some tests and adapt them slightly to Python 2 and 3,\n-    and skip them if the current Python version is different.\n+    Ah, no problem after all: zope.schema.ASCII/Bytes may be the same,\n+    but plone.registry.fields.ASCII/Bytes are always different.\n     """\n     layer = PLONE_INTEGRATION_TESTING\n \n@@ -127,7 +129,6 @@ def test_missing_site_logo_record(self):\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n \n-    @unittest.skipIf(six.PY2, "Only test on Python 3")\n     def test_site_logo_empty(self):\n         del self.registry.records[\'plone.site_logo\']\n         record_51 = Record(field.ASCII())\n@@ -138,7 +139,6 @@ def test_site_logo_empty(self):\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertIsNone(record.value)\n \n-    @unittest.skipIf(six.PY2, "Only test on Python 3")\n     def test_site_logo_text(self):\n         del self.registry.records[\'plone.site_logo\']\n         record_51 = Record(field.ASCII())\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-11T13:29:29+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/6bd06028e48fde5614331b992f22a6010822ab2e

Split off a more general migrate_record_from_ascii_to_bytes.

This may be useful for third-party code.

Files changed:
M plone/app/upgrade/v52/final.py

b'diff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex ce712498..f3915020 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.registry import field\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IMarkupSchema\n@@ -155,40 +156,45 @@ def move_markdown_transform_settings_to_registry(context):\n     settings.markdown_extensions = extensions\n \n \n-def migrate_site_logo_from_ascii_to_bytes(context):\n-    """Site logo was ASCII field in 5.1, and Bytes field in 5.2.\n+def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n+    """Migrate a configuration registry record from ASCII to Bytes.\n \n-    zope.schema.ASCII inherits from NativeString.\n-    With Python 2 this is the same as Bytes, but with Python 3 not:\n-    you get a WrongType error when saving the site-controlpanel.\n-    """\n-    from plone.registry import field\n+    Note: this is intended as a utility method that third party code can use.\n+\n+    Sample use:\n \n+    from Products.CMFPlone.interfaces import ISiteSchema\n+    migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, prefix="plone")\n+\n+    The interface is reregistered to get the new field definition.\n+    Note: this only works well if you have only *one* field that needs fixing.\n+    """\n     registry = getUtility(IRegistry)\n-    record = registry.records.get(\'plone.site_logo\', None)\n+    record = registry.records.get(field_name, None)\n     if record is None:\n         # Unexpected.  Registering the interface fixes this.\n-        registry.registerInterface(ISiteSchema, prefix="plone")\n+        registry.registerInterface(iface, prefix=prefix)\n         return\n     if not isinstance(record.field, field.ASCII):\n         # All is well.\n         # Actually, we might as well register the interface again for good measure.\n-        # I have seen a missing site_title field.\n-        registry.registerInterface(ISiteSchema, prefix="plone")\n+        # For ISiteSchema I have seen a missing site_title field.\n+        registry.registerInterface(iface, prefix=prefix)\n         return\n     # Keep the original value so we can restore it.\n     original_value = record.value\n     # Delete the bad record.\n-    del registry.records[\'plone.site_logo\']\n-    # Make sure the site schema is fully registered again.\n+    del registry.records[field_name]\n+    # Make sure the interface is fully registered again.\n     # This should recreate the field correctly.\n     # Note: if you do this when the site logo is still an ASCII field,\n     # the record will get replaced and the logo is gone!\n-    registry.registerInterface(ISiteSchema, prefix="plone")\n+    registry.registerInterface(iface, prefix=prefix)\n     if original_value is None:\n         # Nothing left to do.\n+        logger.info("Replaced empty %s ASCII (native string) field with Bytes field.", field_name)\n         return\n-    new_record = registry.records[\'plone.site_logo\']\n+    new_record = registry.records[field_name]\n     if isinstance(original_value, six.text_type):\n         # This is what we expect in Python 3.\n         # fromUnicode could be called fromText in Python 3.\n@@ -201,4 +207,14 @@ def migrate_site_logo_from_ascii_to_bytes(context):\n         return\n     # Save the new value.\n     new_record.value = new_value\n-    logger.info("Replaced site_logo ASCII (native string) field with Bytes field.")\n+    logger.info("Replaced %s ASCII (native string) field with Bytes field.", field_name)\n+\n+\n+def migrate_site_logo_from_ascii_to_bytes(context):\n+    """Site logo was ASCII field in 5.1, and Bytes field in 5.2.\n+\n+    zope.schema.ASCII inherits from NativeString.\n+    With Python 2 this is the same as Bytes, but with Python 3 not:\n+    you get a WrongType error when saving the site-controlpanel.\n+    """\n+    migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, "plone")\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-11T13:32:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/1dd62c09730feb2bc3a063e31d773456d25ffecb

Fixed imports in tests

Files changed:
M plone/app/upgrade/v52/tests.py

b'diff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 738bc16f..31cbd62f 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -3,6 +3,8 @@\n from pkg_resources import get_distribution\n from pkg_resources import parse_version\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n+from plone.registry import field\n+from plone.registry import Record\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IMarkupSchema\n@@ -68,12 +70,6 @@ def test_rebuild_redirections(self):\n         self.assertTupleEqual(storage.get_full(old), redirect)\n \n \n-from plone.registry import field\n-from plone.registry import Record\n-from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n-from zope.schema.interfaces import WrongType\n-\n-\n class SiteLogoTest(unittest.TestCase):\n     """Site logo was ASCII field in 5.1, and is Bytes field in 5.2.\n \n@@ -105,6 +101,7 @@ def setUp(self):\n     def test_current_site_logo(self):\n         # Check that we understand the current situation correctly.\n         from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+        from zope.schema.interfaces import WrongType\n \n         record = self.registry.records[\'plone.site_logo\']\n         self.assertIsInstance(record.field, field.Bytes)\n@@ -130,6 +127,8 @@ def test_missing_site_logo_record(self):\n         self.assertIsNone(record.value)\n \n     def test_site_logo_empty(self):\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+\n         del self.registry.records[\'plone.site_logo\']\n         record_51 = Record(field.ASCII())\n         self.registry.records[\'plone.site_logo\'] = record_51\n@@ -140,6 +139,8 @@ def test_site_logo_empty(self):\n         self.assertIsNone(record.value)\n \n     def test_site_logo_text(self):\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+\n         del self.registry.records[\'plone.site_logo\']\n         record_51 = Record(field.ASCII())\n         record_51.value = "native string"\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-11T13:57:11+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/b61d32a7e28584b1cef389a5a2d69b8d945ce0a8

Added tests for migrate_record_from_ascii_to_bytes.

Files changed:
M plone/app/upgrade/v52/tests.py

b'diff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 31cbd62f..8fc82f47 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -151,6 +151,65 @@ def test_site_logo_text(self):\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertEqual(record.value, b"native string")\n \n+    def test_migrate_record_from_ascii_to_bytes_with_prefix(self):\n+        # This is the more general fixer from ASCII to Bytes.\n+        from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n+        from zope.interface import Interface\n+        from zope import schema\n+\n+        class ITest(Interface):\n+            testfield = schema.ASCII()\n+\n+        self.registry.registerInterface(ITest, prefix="testing")\n+        record = self.registry.records["testing.testfield"]\n+        record.value = "native string"\n+        self.assertIsInstance(record.field, field.ASCII)\n+\n+        # Now change the field definition to Bytes.\n+        # It is not enough to override the field, we must recreate the interface.\n+        # ITest.testfield = schema.Bytes()\n+\n+        class ITest(Interface):\n+            testfield = schema.Bytes()\n+\n+        # These variations all seem to work:\n+        migrate_record_from_ascii_to_bytes("testing.testfield", ITest, prefix="testing")\n+        # migrate_record_from_ascii_to_bytes("testfield", ITest, prefix="testing")\n+        record = self.registry.records["testing.testfield"]\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"native string")\n+\n+    def test_migrate_record_from_ascii_to_bytes_without_prefix(self):\n+        # This is the more general fixer from ASCII to Bytes.\n+        from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n+        from zope.interface import Interface\n+        from zope import schema\n+\n+        class ITest(Interface):\n+            testfield = schema.ASCII()\n+\n+        self.registry.registerInterface(ITest)\n+        record_name = "{}.testfield".format(ITest.__identifier__)\n+        record = self.registry.records[record_name]\n+        record.value = "native string"\n+        self.assertIsInstance(record.field, field.ASCII)\n+\n+        # Now change the field definition to Bytes.\n+        # It is not enough to override the field, we must recreate the interface.\n+        # ITest.testfield = schema.Bytes()\n+\n+        class ITest(Interface):\n+            testfield = schema.Bytes()\n+\n+        # These variations all seem to work:\n+        migrate_record_from_ascii_to_bytes("testfield", ITest)\n+        # migrate_record_from_ascii_to_bytes(record_name, ITest)\n+        # migrate_record_from_ascii_to_bytes(record_name, ITest, prefix=ITest.__identifier__)\n+        # migrate_record_from_ascii_to_bytes("testfield", ITest, prefix=ITest.__identifier__)\n+        record = self.registry.records[record_name]\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"native string")\n+\n \n class UpgradePortalTransforms521to522Test(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-11T14:12:46+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/c67d3141291d7eb6c115bbb1b570a158379d3912

Fix test failure on Py 3: we must use the full record name.

Files changed:
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py

b'diff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex f3915020..1ce88773 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -168,6 +168,14 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n \n     The interface is reregistered to get the new field definition.\n     Note: this only works well if you have only *one* field that needs fixing.\n+\n+    For the field name, using the full name including prefix is recommended.\n+    On Python 2 the full name is less needed, but on Python 3 it is.\n+    If you are not using a prefix when registering your interface,\n+    then automatically the identifier of your interface is used as prefix.\n+    In that case, use:\n+\n+    migrate_record_from_ascii_to_bytes(IMy.__identifier__ + ".field_name", IMy)\n     """\n     registry = getUtility(IRegistry)\n     record = registry.records.get(field_name, None)\n@@ -217,4 +225,6 @@ def migrate_site_logo_from_ascii_to_bytes(context):\n     With Python 2 this is the same as Bytes, but with Python 3 not:\n     you get a WrongType error when saving the site-controlpanel.\n     """\n-    migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, "plone")\n+    # Note: on Python 2 passing "site_logo" as field name is enough,\n+    # but on Python 3 the full "plone.site_logo" is needed.\n+    migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, prefix="plone")\ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 8fc82f47..7d0bea8e 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -201,11 +201,12 @@ class ITest(Interface):\n         class ITest(Interface):\n             testfield = schema.Bytes()\n \n-        # These variations all seem to work:\n-        migrate_record_from_ascii_to_bytes("testfield", ITest)\n-        # migrate_record_from_ascii_to_bytes(record_name, ITest)\n-        # migrate_record_from_ascii_to_bytes(record_name, ITest, prefix=ITest.__identifier__)\n+        # These variations all seem to work on Python 2, but the first two fail on Python 3,\n+        # leading to a record.value of None.\n+        # migrate_record_from_ascii_to_bytes("testfield", ITest)\n         # migrate_record_from_ascii_to_bytes("testfield", ITest, prefix=ITest.__identifier__)\n+        migrate_record_from_ascii_to_bytes(record_name, ITest)\n+        # migrate_record_from_ascii_to_bytes(record_name, ITest, prefix=ITest.__identifier__)\n         record = self.registry.records[record_name]\n         self.assertIsInstance(record.field, field.Bytes)\n         self.assertEqual(record.value, b"native string")\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-11T14:19:02+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.upgrade/commit/d49166477dd50f28ec380fd3fa5d1cd1422b9c96

Actually: let migrate_record_from_ascii_to_bytes determine and use the prefix where needed.

Files changed:
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py

b'diff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex 1ce88773..76f64fc8 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -165,6 +165,8 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n \n     from Products.CMFPlone.interfaces import ISiteSchema\n     migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, prefix="plone")\n+    or:\n+    migrate_record_from_ascii_to_bytes("site_logo", ISiteSchema, prefix="plone")\n \n     The interface is reregistered to get the new field definition.\n     Note: this only works well if you have only *one* field that needs fixing.\n@@ -173,10 +175,17 @@ def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n     On Python 2 the full name is less needed, but on Python 3 it is.\n     If you are not using a prefix when registering your interface,\n     then automatically the identifier of your interface is used as prefix.\n-    In that case, use:\n+    In that case, you can use both of these:\n \n+    migrate_record_from_ascii_to_bytes("field_name", IMy)\n     migrate_record_from_ascii_to_bytes(IMy.__identifier__ + ".field_name", IMy)\n     """\n+    if prefix is None:\n+        prefix = iface.__identifier__\n+    if not prefix.endswith("."):\n+        prefix += \'.\'\n+    if not field_name.startswith(prefix):\n+        field_name = prefix + field_name\n     registry = getUtility(IRegistry)\n     record = registry.records.get(field_name, None)\n     if record is None:\n@@ -225,6 +234,4 @@ def migrate_site_logo_from_ascii_to_bytes(context):\n     With Python 2 this is the same as Bytes, but with Python 3 not:\n     you get a WrongType error when saving the site-controlpanel.\n     """\n-    # Note: on Python 2 passing "site_logo" as field name is enough,\n-    # but on Python 3 the full "plone.site_logo" is needed.\n     migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, prefix="plone")\ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 7d0bea8e..c88623ee 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -201,11 +201,10 @@ class ITest(Interface):\n         class ITest(Interface):\n             testfield = schema.Bytes()\n \n-        # These variations all seem to work on Python 2, but the first two fail on Python 3,\n-        # leading to a record.value of None.\n-        # migrate_record_from_ascii_to_bytes("testfield", ITest)\n+        # These variations all seem to work, so choose the easiest one:\n+        migrate_record_from_ascii_to_bytes("testfield", ITest)\n         # migrate_record_from_ascii_to_bytes("testfield", ITest, prefix=ITest.__identifier__)\n-        migrate_record_from_ascii_to_bytes(record_name, ITest)\n+        # migrate_record_from_ascii_to_bytes(record_name, ITest)\n         # migrate_record_from_ascii_to_bytes(record_name, ITest, prefix=ITest.__identifier__)\n         record = self.registry.records[record_name]\n         self.assertIsInstance(record.field, field.Bytes)\n'

Repository: plone.app.upgrade


Branch: refs/heads/master
Date: 2020-09-12T19:57:11+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.app.upgrade/commit/b87bb173207ea2888eb5b0c9f120f3a233ad754e

Merge pull request #240 from plone/maurits/issue-3172-site-logo-ascii-bytes

Migrate the plone.site_logo field from ASCII (native string) to Bytes.

Files changed:
A news/3172.bugfix
M plone/app/upgrade/v52/configure.zcml
M plone/app/upgrade/v52/final.py
M plone/app/upgrade/v52/tests.py

b'diff --git a/news/3172.bugfix b/news/3172.bugfix\nnew file mode 100644\nindex 00000000..b0a857a9\n--- /dev/null\n+++ b/news/3172.bugfix\n@@ -0,0 +1,4 @@\n+Migrate the ``plone.site_logo`` field from ASCII (native string) to Bytes.\n+Otherwise saving the site-controlpanel can fail with a WrongType error\n+Fixes `issue 3172 <https://github.com/plone/Products.CMFPlone/issues/3172>`_.\n+[maurits]\ndiff --git a/plone/app/upgrade/v52/configure.zcml b/plone/app/upgrade/v52/configure.zcml\nindex 4193c233..110465df 100644\n--- a/plone/app/upgrade/v52/configure.zcml\n+++ b/plone/app/upgrade/v52/configure.zcml\n@@ -162,9 +162,9 @@\n         profile="Products.CMFPlone:plone">\n \n         <gs:upgradeStep\n-            title="Miscellaneous"\n+            title="Migrate site logo from native string to bytes"\n             description=""\n-            handler="..utils.null_upgrade_step"\n+            handler=".final.migrate_site_logo_from_ascii_to_bytes"\n             />\n \n     </gs:upgradeSteps>\ndiff --git a/plone/app/upgrade/v52/final.py b/plone/app/upgrade/v52/final.py\nindex c5bbf979..76f64fc8 100644\n--- a/plone/app/upgrade/v52/final.py\n+++ b/plone/app/upgrade/v52/final.py\n@@ -1,12 +1,15 @@\n # -*- coding: utf-8 -*-\n from plone.app.upgrade.utils import loadMigrationProfile\n+from plone.registry import field\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IMarkupSchema\n+from Products.CMFPlone.interfaces import ISiteSchema\n from Products.CMFPlone.utils import safe_unicode\n from zope.component import getUtility\n \n import logging\n+import six\n \n \n logger = logging.getLogger(\'plone.app.upgrade\')\n@@ -151,3 +154,84 @@ def move_markdown_transform_settings_to_registry(context):\n     extensions = pt.markdown_to_html._config.get(\'enabled_extensions\') or []\n     extensions = [safe_unicode(ext) for ext in extensions]\n     settings.markdown_extensions = extensions\n+\n+\n+def migrate_record_from_ascii_to_bytes(field_name, iface, prefix=None):\n+    """Migrate a configuration registry record from ASCII to Bytes.\n+\n+    Note: this is intended as a utility method that third party code can use.\n+\n+    Sample use:\n+\n+    from Products.CMFPlone.interfaces import ISiteSchema\n+    migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, prefix="plone")\n+    or:\n+    migrate_record_from_ascii_to_bytes("site_logo", ISiteSchema, prefix="plone")\n+\n+    The interface is reregistered to get the new field definition.\n+    Note: this only works well if you have only *one* field that needs fixing.\n+\n+    For the field name, using the full name including prefix is recommended.\n+    On Python 2 the full name is less needed, but on Python 3 it is.\n+    If you are not using a prefix when registering your interface,\n+    then automatically the identifier of your interface is used as prefix.\n+    In that case, you can use both of these:\n+\n+    migrate_record_from_ascii_to_bytes("field_name", IMy)\n+    migrate_record_from_ascii_to_bytes(IMy.__identifier__ + ".field_name", IMy)\n+    """\n+    if prefix is None:\n+        prefix = iface.__identifier__\n+    if not prefix.endswith("."):\n+        prefix += \'.\'\n+    if not field_name.startswith(prefix):\n+        field_name = prefix + field_name\n+    registry = getUtility(IRegistry)\n+    record = registry.records.get(field_name, None)\n+    if record is None:\n+        # Unexpected.  Registering the interface fixes this.\n+        registry.registerInterface(iface, prefix=prefix)\n+        return\n+    if not isinstance(record.field, field.ASCII):\n+        # All is well.\n+        # Actually, we might as well register the interface again for good measure.\n+        # For ISiteSchema I have seen a missing site_title field.\n+        registry.registerInterface(iface, prefix=prefix)\n+        return\n+    # Keep the original value so we can restore it.\n+    original_value = record.value\n+    # Delete the bad record.\n+    del registry.records[field_name]\n+    # Make sure the interface is fully registered again.\n+    # This should recreate the field correctly.\n+    # Note: if you do this when the site logo is still an ASCII field,\n+    # the record will get replaced and the logo is gone!\n+    registry.registerInterface(iface, prefix=prefix)\n+    if original_value is None:\n+        # Nothing left to do.\n+        logger.info("Replaced empty %s ASCII (native string) field with Bytes field.", field_name)\n+        return\n+    new_record = registry.records[field_name]\n+    if isinstance(original_value, six.text_type):\n+        # This is what we expect in Python 3.\n+        # fromUnicode could be called fromText in Python 3.\n+        new_value = new_record.field.fromUnicode(original_value)\n+    elif isinstance(original_value, bytes):\n+        # This is what we expect in Python 2.\n+        new_value = original_value\n+    else:\n+        # Seems impossible, but I like to be careful.\n+        return\n+    # Save the new value.\n+    new_record.value = new_value\n+    logger.info("Replaced %s ASCII (native string) field with Bytes field.", field_name)\n+\n+\n+def migrate_site_logo_from_ascii_to_bytes(context):\n+    """Site logo was ASCII field in 5.1, and Bytes field in 5.2.\n+\n+    zope.schema.ASCII inherits from NativeString.\n+    With Python 2 this is the same as Bytes, but with Python 3 not:\n+    you get a WrongType error when saving the site-controlpanel.\n+    """\n+    migrate_record_from_ascii_to_bytes("plone.site_logo", ISiteSchema, prefix="plone")\ndiff --git a/plone/app/upgrade/v52/tests.py b/plone/app/upgrade/v52/tests.py\nindex 3f49dde4..c88623ee 100644\n--- a/plone/app/upgrade/v52/tests.py\n+++ b/plone/app/upgrade/v52/tests.py\n@@ -3,11 +3,14 @@\n from pkg_resources import get_distribution\n from pkg_resources import parse_version\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n+from plone.registry import field\n+from plone.registry import Record\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.interfaces import IMarkupSchema\n from zope.component import getUtility\n \n+import six\n import unittest\n \n \n@@ -67,6 +70,147 @@ def test_rebuild_redirections(self):\n         self.assertTupleEqual(storage.get_full(old), redirect)\n \n \n+class SiteLogoTest(unittest.TestCase):\n+    """Site logo was ASCII field in 5.1, and is Bytes field in 5.2.\n+\n+    zope.schema.ASCII inherits from NativeString.\n+    With Python 2 this is the same as Bytes, but with Python 3 not:\n+    you get a WrongType error when saving the site-controlpanel.\n+\n+    We have several situations that should result in the fix being applied:\n+\n+    1. Migration from Plone 5.1 to 5.2 on Python 2.7.\n+    2. Migration from Plone 5.2.2 on Python 2.7 (where the logo is technically broken, but still works)\n+       to 5.2.3 (which contains this upgrade step) on Python 2.7.\n+       This is in fact the same as situation 1.\n+    3. Migration from Plone 5.2.2 on Python 3 (where the logo is really broken, at least for writing)\n+       to 5.2.3 (which contains this upgrade step).\n+\n+    On Python 3 there is a definite difference between the two types of field.\n+    Tricky here may be that we should make sure that the fix is also applied on Python 2,\n+    where ASCII and Bytes are still the same.\n+    Ah, no problem after all: zope.schema.ASCII/Bytes may be the same,\n+    but plone.registry.fields.ASCII/Bytes are always different.\n+    """\n+    layer = PLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.registry = getUtility(IRegistry)\n+\n+    def test_current_site_logo(self):\n+        # Check that we understand the current situation correctly.\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+        from zope.schema.interfaces import WrongType\n+\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertIsNone(record.value)\n+        with self.assertRaises(WrongType):\n+            record.value = u"abc"\n+        record.value = b"ABC"\n+        self.assertEqual(record.value, b"ABC")\n+        # Migrating does nothing.\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"ABC")\n+\n+    def test_missing_site_logo_record(self):\n+        # Test that the migration adds the record if for some reason it is missing.\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+\n+        del self.registry.records[\'plone.site_logo\']\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertIsNone(record.value)\n+\n+    def test_site_logo_empty(self):\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+\n+        del self.registry.records[\'plone.site_logo\']\n+        record_51 = Record(field.ASCII())\n+        self.registry.records[\'plone.site_logo\'] = record_51\n+        # Migrate.\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertIsNone(record.value)\n+\n+    def test_site_logo_text(self):\n+        from plone.app.upgrade.v52.final import migrate_site_logo_from_ascii_to_bytes\n+\n+        del self.registry.records[\'plone.site_logo\']\n+        record_51 = Record(field.ASCII())\n+        record_51.value = "native string"\n+        self.registry.records[\'plone.site_logo\'] = record_51\n+        # Migrate.\n+        migrate_site_logo_from_ascii_to_bytes(self.portal)\n+        record = self.registry.records[\'plone.site_logo\']\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"native string")\n+\n+    def test_migrate_record_from_ascii_to_bytes_with_prefix(self):\n+        # This is the more general fixer from ASCII to Bytes.\n+        from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n+        from zope.interface import Interface\n+        from zope import schema\n+\n+        class ITest(Interface):\n+            testfield = schema.ASCII()\n+\n+        self.registry.registerInterface(ITest, prefix="testing")\n+        record = self.registry.records["testing.testfield"]\n+        record.value = "native string"\n+        self.assertIsInstance(record.field, field.ASCII)\n+\n+        # Now change the field definition to Bytes.\n+        # It is not enough to override the field, we must recreate the interface.\n+        # ITest.testfield = schema.Bytes()\n+\n+        class ITest(Interface):\n+            testfield = schema.Bytes()\n+\n+        # These variations all seem to work:\n+        migrate_record_from_ascii_to_bytes("testing.testfield", ITest, prefix="testing")\n+        # migrate_record_from_ascii_to_bytes("testfield", ITest, prefix="testing")\n+        record = self.registry.records["testing.testfield"]\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"native string")\n+\n+    def test_migrate_record_from_ascii_to_bytes_without_prefix(self):\n+        # This is the more general fixer from ASCII to Bytes.\n+        from plone.app.upgrade.v52.final import migrate_record_from_ascii_to_bytes\n+        from zope.interface import Interface\n+        from zope import schema\n+\n+        class ITest(Interface):\n+            testfield = schema.ASCII()\n+\n+        self.registry.registerInterface(ITest)\n+        record_name = "{}.testfield".format(ITest.__identifier__)\n+        record = self.registry.records[record_name]\n+        record.value = "native string"\n+        self.assertIsInstance(record.field, field.ASCII)\n+\n+        # Now change the field definition to Bytes.\n+        # It is not enough to override the field, we must recreate the interface.\n+        # ITest.testfield = schema.Bytes()\n+\n+        class ITest(Interface):\n+            testfield = schema.Bytes()\n+\n+        # These variations all seem to work, so choose the easiest one:\n+        migrate_record_from_ascii_to_bytes("testfield", ITest)\n+        # migrate_record_from_ascii_to_bytes("testfield", ITest, prefix=ITest.__identifier__)\n+        # migrate_record_from_ascii_to_bytes(record_name, ITest)\n+        # migrate_record_from_ascii_to_bytes(record_name, ITest, prefix=ITest.__identifier__)\n+        record = self.registry.records[record_name]\n+        self.assertIsInstance(record.field, field.Bytes)\n+        self.assertEqual(record.value, b"native string")\n+\n+\n class UpgradePortalTransforms521to522Test(unittest.TestCase):\n     layer = PLONE_INTEGRATION_TESTING\n \n@@ -106,5 +250,6 @@ def test_suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(UpgradeMemberData51to52Test))\n     suite.addTest(unittest.makeSuite(Various52Test))\n+    suite.addTest(unittest.makeSuite(SiteLogoTest))\n     suite.addTest(unittest.makeSuite(UpgradePortalTransforms521to522Test))\n     return suite\n'

