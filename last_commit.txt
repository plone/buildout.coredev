Repository: plone.releaser


Branch: refs/heads/master
Date: 2020-06-24T01:21:01+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/30bd7bf8015fc9856227031fff79a72314a9f0bc

Fixed detecting changes in packages that are missing from checkouts.

Files changed:
A news/35.bugfix
M plone/releaser/package.py

b'diff --git a/news/35.bugfix b/news/35.bugfix\nnew file mode 100644\nindex 0000000..843fc12\n--- /dev/null\n+++ b/news/35.bugfix\n@@ -0,0 +1,2 @@\n+Fixed detecting changes in packages that are missing from checkouts.\n+[maurits]\ndiff --git a/plone/releaser/package.py b/plone/releaser/package.py\nindex 705228a..49046ab 100644\n--- a/plone/releaser/package.py\n+++ b/plone/releaser/package.py\n@@ -111,8 +111,26 @@ def __call__(self, action=ACTION_INTERACTIVE):\n             self.update_version(latest_tag_in_branch)\n \n             commits_since_release = self.latest_commits(repo)\n+            if not commits_since_release:\n+                # There are no changes since the last release (i.e. last tag)\n+                # so we are done.\n+                self.remove()\n+                return\n+            # The latest commit is number zero.\n+            latest_commit_message = commits_since_release[0].message\n+            if (\n+                "Back to development" in latest_commit_message\n+                or latest_commit_message.startswith("vb")\n+            ):\n+                # Only the regular version bump, so we are done.\n+                self.remove()\n+                return\n+\n+            # Maybe there are more commits but we have previously seen them\n+            # and decided they are not interesting.  We only want to show\n+            # interesting commits.\n+            interesting_commits = commits_since_release\n             latest_ignored_commit = self.commit_ignores.get(self.name)\n-            commits_since_ignore = None\n             if latest_ignored_commit is not None:\n                 try:\n                     commits_since_ignore = self._commits_between(\n@@ -121,40 +139,38 @@ def __call__(self, action=ACTION_INTERACTIVE):\n                 except git.exc.GitCommandError:\n                     print("\\nCould not read commits for package {0}".format(self.name))\n                     return\n+                if not commits_since_ignore:\n+                    # Okay, nothing interesting.\n+                    self.remove()\n+                    return\n+                # I guess we could have ignored something last month\n+                # and have released since.  Check which commits are still interesting:\n+                # the commits since release or since ignore.\n+                if len(commits_since_ignore) < len(commits_since_release):\n+                    interesting_commits = commits_since_ignore\n+\n+            # Check for checkout\n+            if self.name not in self.buildout.checkouts:\n+                msg = (\n+                    "\\nWARNING: No auto-checkout exists for {0}\\n Changes in {0}:"\n+                )  # noqa\n+                self.print_commits(\n+                    commits_since_release, message=msg.format(self.name)\n+                )\n \n-            # if there are no changes since the last release (i.e. last tag)\n-            if (\n-                not commits_since_release\n-                or "Back to development" in commits_since_release[0].message\n-                or commits_since_release[0].message.startswith("vb")\n-            ):\n-\n-                self.remove()\n-\n-            elif commits_since_ignore is None:\n-                # Check for checkout\n-                if self.name not in self.buildout.checkouts:\n-                    msg = (\n-                        "\\nWARNING: No auto-checkout exists for {0}\\n Changes in {0}:"\n-                    )  # noqa\n-                    self.print_commits(\n-                        commits_since_release, message=msg.format(self.name)\n-                    )\n-\n-                    if self.name in THIRD_PARTY_PACKAGES:\n-                        msg = "NOTE: {0} is a third-party package."\n-                        print(msg.format(self.name))\n+                if self.name in THIRD_PARTY_PACKAGES:\n+                    msg = "NOTE: {0} is a third-party package."\n+                    print(msg.format(self.name))\n \n-                    self.add(commits_since_release)\n+                self.add(commits_since_release)\n \n-                else:\n-                    if not self.interactive:\n-                        msg = "\\nChanges in {0}:".format(self.name)\n-                        self.print_commits(commits_since_release, message=msg)\n+            elif not self.interactive:\n+                msg = "\\nChanges in {0}:".format(self.name)\n+                self.print_commits(commits_since_release, message=msg)\n \n-                        if self.name in THIRD_PARTY_PACKAGES:\n-                            msg = "NOTE: {0} is a third-party package."\n-                            print(msg.format(self.name))\n+                if self.name in THIRD_PARTY_PACKAGES:\n+                    msg = "NOTE: {0} is a third-party package."\n+                    print(msg.format(self.name))\n \n     def set_interaction_and_report(self, action):\n         if action == ACTION_REPORT:\n'

Repository: plone.releaser


Branch: refs/heads/master
Date: 2020-06-24T09:01:15+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.releaser/commit/f412fba4c14d8d0062b4baaa7d989de3f7df29aa

Merge pull request #36 from plone/maurits/issue-35-detect-changes

Fixed detecting changes in packages that are missing from checkouts.

Files changed:
A news/35.bugfix
M plone/releaser/package.py

b'diff --git a/news/35.bugfix b/news/35.bugfix\nnew file mode 100644\nindex 0000000..843fc12\n--- /dev/null\n+++ b/news/35.bugfix\n@@ -0,0 +1,2 @@\n+Fixed detecting changes in packages that are missing from checkouts.\n+[maurits]\ndiff --git a/plone/releaser/package.py b/plone/releaser/package.py\nindex 705228a..49046ab 100644\n--- a/plone/releaser/package.py\n+++ b/plone/releaser/package.py\n@@ -111,8 +111,26 @@ def __call__(self, action=ACTION_INTERACTIVE):\n             self.update_version(latest_tag_in_branch)\n \n             commits_since_release = self.latest_commits(repo)\n+            if not commits_since_release:\n+                # There are no changes since the last release (i.e. last tag)\n+                # so we are done.\n+                self.remove()\n+                return\n+            # The latest commit is number zero.\n+            latest_commit_message = commits_since_release[0].message\n+            if (\n+                "Back to development" in latest_commit_message\n+                or latest_commit_message.startswith("vb")\n+            ):\n+                # Only the regular version bump, so we are done.\n+                self.remove()\n+                return\n+\n+            # Maybe there are more commits but we have previously seen them\n+            # and decided they are not interesting.  We only want to show\n+            # interesting commits.\n+            interesting_commits = commits_since_release\n             latest_ignored_commit = self.commit_ignores.get(self.name)\n-            commits_since_ignore = None\n             if latest_ignored_commit is not None:\n                 try:\n                     commits_since_ignore = self._commits_between(\n@@ -121,40 +139,38 @@ def __call__(self, action=ACTION_INTERACTIVE):\n                 except git.exc.GitCommandError:\n                     print("\\nCould not read commits for package {0}".format(self.name))\n                     return\n+                if not commits_since_ignore:\n+                    # Okay, nothing interesting.\n+                    self.remove()\n+                    return\n+                # I guess we could have ignored something last month\n+                # and have released since.  Check which commits are still interesting:\n+                # the commits since release or since ignore.\n+                if len(commits_since_ignore) < len(commits_since_release):\n+                    interesting_commits = commits_since_ignore\n+\n+            # Check for checkout\n+            if self.name not in self.buildout.checkouts:\n+                msg = (\n+                    "\\nWARNING: No auto-checkout exists for {0}\\n Changes in {0}:"\n+                )  # noqa\n+                self.print_commits(\n+                    commits_since_release, message=msg.format(self.name)\n+                )\n \n-            # if there are no changes since the last release (i.e. last tag)\n-            if (\n-                not commits_since_release\n-                or "Back to development" in commits_since_release[0].message\n-                or commits_since_release[0].message.startswith("vb")\n-            ):\n-\n-                self.remove()\n-\n-            elif commits_since_ignore is None:\n-                # Check for checkout\n-                if self.name not in self.buildout.checkouts:\n-                    msg = (\n-                        "\\nWARNING: No auto-checkout exists for {0}\\n Changes in {0}:"\n-                    )  # noqa\n-                    self.print_commits(\n-                        commits_since_release, message=msg.format(self.name)\n-                    )\n-\n-                    if self.name in THIRD_PARTY_PACKAGES:\n-                        msg = "NOTE: {0} is a third-party package."\n-                        print(msg.format(self.name))\n+                if self.name in THIRD_PARTY_PACKAGES:\n+                    msg = "NOTE: {0} is a third-party package."\n+                    print(msg.format(self.name))\n \n-                    self.add(commits_since_release)\n+                self.add(commits_since_release)\n \n-                else:\n-                    if not self.interactive:\n-                        msg = "\\nChanges in {0}:".format(self.name)\n-                        self.print_commits(commits_since_release, message=msg)\n+            elif not self.interactive:\n+                msg = "\\nChanges in {0}:".format(self.name)\n+                self.print_commits(commits_since_release, message=msg)\n \n-                        if self.name in THIRD_PARTY_PACKAGES:\n-                            msg = "NOTE: {0} is a third-party package."\n-                            print(msg.format(self.name))\n+                if self.name in THIRD_PARTY_PACKAGES:\n+                    msg = "NOTE: {0} is a third-party package."\n+                    print(msg.format(self.name))\n \n     def set_interaction_and_report(self, action):\n         if action == ACTION_REPORT:\n'

