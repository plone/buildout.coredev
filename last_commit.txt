Repository: plone.restapi


Branch: refs/heads/main
Date: 2023-10-28T22:15:39+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.restapi/commit/f37cd9cbbe1d84d592e36ed71fd345140bf97991

Be more strict when checking if mimetype is allowed inline. (#1724)

* Be more strict when checking if mimetype is allowed to be displayed inline.

This takes over some code from https://github.com/zopefoundation/Zope/pull/1167.
See also https://github.com/plone/plone.namedfile/pull/154

* Copy a test for extract_media_type from Zope.

* Rename extract_media_type to _extract_media_type to signal it as private.

Files changed:
A news/1167.bugfix
M src/plone/restapi/services/users/get.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/news/1167.bugfix b/news/1167.bugfix\nnew file mode 100644\nindex 0000000000..3d8ef86055\n--- /dev/null\n+++ b/news/1167.bugfix\n@@ -0,0 +1,2 @@\n+Be more strict when checking if mimetype is allowed to be displayed inline.\n+[maurits]\ndiff --git a/src/plone/restapi/services/users/get.py b/src/plone/restapi/services/users/get.py\nindex bef0c3ef0e..393237f740 100644\n--- a/src/plone/restapi/services/users/get.py\n+++ b/src/plone/restapi/services/users/get.py\n@@ -27,6 +27,31 @@\n \n DEFAULT_SEARCH_RESULTS_LIMIT = 25\n \n+try:\n+    # Zope 5.8.4+\n+    from OFS.Image import extract_media_type as _extract_media_type\n+except ImportError:\n+    try:\n+        from plone.namedfile.utils import extract_media_type as _extract_media_type\n+    except ImportError:\n+        # Note that we start the method with an underscore, to signal that this\n+        # is a private implementation detail and no one should be importing this.\n+\n+        def _extract_media_type(content_type):\n+            """extract the proper media type from *content_type*.\n+\n+            Ignore parameters and whitespace and normalize to lower case.\n+            See https://github.com/zopefoundation/Zope/pull/1167\n+            """\n+            if not content_type:\n+                return content_type\n+            # ignore parameters\n+            content_type = content_type.split(";", 1)[0]\n+            # ignore whitespace\n+            content_type = "".join(content_type.split())\n+            # normalize to lowercase\n+            return content_type.lower()\n+\n \n def getPortraitUrl(user):\n     if not user:\n@@ -84,7 +109,6 @@ def _sort_users(users: Iterable[MemberData]) -> Sequence[MemberData]:\n     def _principal_search_results(\n         self, search_for_principal, get_principal_by_id, principal_type, id_key\n     ):\n-\n         hunter = getMultiAdapter((self.context, self.request), name="pas_search")\n \n         principals = []\n@@ -209,7 +233,6 @@ def reply(self):\n         if self.has_permission_to_access_user_info() or (\n             current_user_id and current_user_id == self._get_user_id\n         ):\n-\n             # we retrieve the user on the user id not the username\n             user = self._get_user(self._get_user_id)\n             if not user:\n@@ -251,7 +274,7 @@ def _get_user_id(self):\n \n     def _should_force_download(self, portrait):\n         # If this returns True, the caller should set the Content-Disposition header.\n-        mimetype = portrait.content_type\n+        mimetype = _extract_media_type(portrait.content_type)\n         if not mimetype:\n             return False\n         if self.use_denylist:\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 6de014a8cb..59cdd97d4e 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -23,6 +23,17 @@\n import unittest\n \n \n+class TestUnit(unittest.TestCase):\n+    def test_extract_media_type(self):\n+        from plone.restapi.services.users.get import _extract_media_type as extract\n+\n+        self.assertIsNone(extract(None))\n+        self.assertEqual(extract("text/plain"), "text/plain")\n+        self.assertEqual(extract("TEXT/PLAIN"), "text/plain")\n+        self.assertEqual(extract("text / plain"), "text/plain")\n+        self.assertEqual(extract(" text/plain ; charset=utf-8"), "text/plain")\n+\n+\n class TestUsersEndpoint(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n'

