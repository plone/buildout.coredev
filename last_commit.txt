Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:38:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/9fa2b526d9c2a6d12b3324023acb979ed03553f1

Remove hopelessly outdated proxy config examples

Files changed:
M docs/caching-profiles.rst
M docs/caching-proxies.rst
M docs/split-views.rst
D plone/app/caching/proxy-configs/squid/README.txt
D plone/app/caching/proxy-configs/squid/buildout.cfg
D plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in
D plone/app/caching/proxy-configs/squid/templates/squid.conf.in
D plone/app/caching/proxy-configs/squid/templates/squid.in
D plone/app/caching/proxy-configs/varnish/README.txt
D plone/app/caching/proxy-configs/varnish/buildout.cfg
D plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in
D plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in
D plone/app/caching/proxy-configs/varnish/templates/varnishd.in

b'diff --git a/docs/caching-profiles.rst b/docs/caching-profiles.rst\nindex 016f677..c5e8c16 100644\n--- a/docs/caching-profiles.rst\n+++ b/docs/caching-profiles.rst\n@@ -31,7 +31,6 @@ The three default caching profiles:\n * **With caching proxy (and split-view caching)**\n       An example profile for a caching proxy setup with split-view\n       caching enabled.  This example requires a special proxy setup.\n-      See the proxy examples in the "proxy-configs" directory.\n \n \n Custom caching profiles\ndiff --git a/docs/caching-proxies.rst b/docs/caching-proxies.rst\nindex 46abad8..adb3780 100644\n--- a/docs/caching-proxies.rst\n+++ b/docs/caching-proxies.rst\n@@ -103,25 +103,8 @@ before he had a new haircut.\n Installing and configuring a caching proxy\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-The ``plone.app.caching`` package includes some example buildout\n-configurations in the ``proxy-configs`` directory. Two versions are included:\n-one demonstrating a Squid-behind-Apache proxy setup and another demonstrating\n-a Varnish-behind-Apache proxy setup. Both examples also demonstrate how to\n-properly configure split-view caching.\n-\n-These configurations are provided for instructional purposes but with a little\n-modification they can also be used in production. To use in a real production\n-instance, you will need to adjust the configuration to match your setup. For a\n-simple standard setup, you might only need to change the ``hostname`` value in\n-the buildout.cfg. Read the README.txt files in each example for more\n-instructions.\n-\n-There are also some alternative buildout recipes for building and configuring\n-proxy configs: `plone.recipe.squid`_ and `plone.recipe.varnish`_. The examples\n-in this package do not use these recipes in favor of using a more explicit,\n-and hopefully more educational, template-based approach. Even if you decide to\n-use one of the automated recipes, it will probably be worth your while to\n-study the examples included in this package to get a few pointers.\n+There are buildout recipes for building and configuring proxy configs: `plone.recipe.squid`_ and `plone.recipe.varnish`_.\n+\n \n Running Plone behind Apache 2.2 with mod_cache\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndiff --git a/docs/split-views.rst b/docs/split-views.rst\nindex e405ec5..fe70321 100644\n--- a/docs/split-views.rst\n+++ b/docs/split-views.rst\n@@ -29,7 +29,4 @@ responses.\n Yet another solution involves intercepting the request and dynamically adding\n a special ``X-Anonymous`` header to the anonymous request and then adding\n ``Vary:X-Anonymous`` to the split view response so that this header will added\n-to the cache key.  Examples of this last solution for both Squid and Varnish\n-are included in the ``proxy-configs`` directory of this package, which are\n-intended to be used in concert with something like the split-view caching\n-profile of ``plone.app.caching``.\n+to the cache key.\ndiff --git a/plone/app/caching/proxy-configs/squid/README.txt b/plone/app/caching/proxy-configs/squid/README.txt\ndeleted file mode 100644\nindex 39653ca..0000000\n--- a/plone/app/caching/proxy-configs/squid/README.txt\n+++ /dev/null\n@@ -1,22 +0,0 @@\n-\n-This is an example buildout demonstrating a Squid-behind-Apache proxy configuration optimized for a Plone site using plone.app.caching.\n-\n-This example also demonstrates one way to configure split-view caching (see the plone.app.caching readme) although it\'s also perfectly useable for the non-split-view caching case.  Split-view caching is enabled by setting a "Vary: X-Anonymous" header and "s-maxage" value on the split-views to be cached, via the plone.app.caching control panel.\n-\n-To install, you first need to have buildout installed.  See http://www.buildout.org/install.html\n-\n-Copy the entire contents of this directory to a new project directory and run buildout in that directory (for this example, let\'s assume a system-wide buildout is already installed).\n-\n-% cp -R * /path/to/project/\n-% cd /path/to/project\n-% buildout\n-\n-This will initialize the project directory and run all the \'parts\' as defined in buildout.cfg.\n-\n-- An Apache vhost configuration will be generated at "./etc/httpd-vhost.conf"\n-\n-- A Squid configuration file will be generated at "./etc/squid.conf"\n-\n-- A wrapper script to start up Squid will be generated at "./bin/squid"\n-\n-For more detail, see the comments in the configuration files.  In particular, you may wish to study the Apache vhost configuration as much of the "magic" is encapsulated therein.\n\\ No newline at end of file\ndiff --git a/plone/app/caching/proxy-configs/squid/buildout.cfg b/plone/app/caching/proxy-configs/squid/buildout.cfg\ndeleted file mode 100644\nindex a0cc332..0000000\n--- a/plone/app/caching/proxy-configs/squid/buildout.cfg\n+++ /dev/null\n@@ -1,59 +0,0 @@\n-# Example Squid buildout for use with plone.app.caching\n-\n-[buildout]\n-parts =\n-    squid\n-    squid-config\n-    squid-runner\n-    apache-vhost\n-    chmod\n-\n-\n-[squid]\n-recipe = zc.recipe.cmmi\n-url = http://www.squid-cache.org/Versions/v2/2.7/squid-2.7.STABLE9.tar.gz\n-\n-\n-[squid-config]\n-recipe = collective.recipe.template\n-input = templates/squid.conf.in\n-output = ${buildout:directory}/etc/squid.conf\n-\n-# misc template variables\n-hostname = example.com\n-bind = 127.0.0.1:3128\n-pid = ${buildout:directory}/var/squid.pid\n-log = ${buildout:directory}/var/squid-cache.log\n-cache-dir = ${buildout:directory}/var/squidstorage\n-cache-size = 2000\n-backend-host = 127.0.0.1\n-backend-port = 8080\n-\n-\n-[squid-runner]\n-recipe = collective.recipe.template\n-input = templates/squid.in\n-output = ${buildout:directory}/bin/squid\n-\n-# misc template variables\n-daemon = ${squid:location}/sbin/squid\n-config = ${squid-config:output}\n-\n-\n-[apache-vhost]\n-recipe = collective.recipe.template\n-input = templates/httpd-vhost.conf.in\n-output = ${buildout:directory}/etc/httpd-vhost.conf\n-\n-# misc template variables\n-hostname = ${squid-config:hostname}\n-backend = ${squid-config:bind}\n-zope-path = Plone\n-\n-\n-[chmod]\n-recipe = plone.recipe.command\n-command = chmod 755 ${squid-runner:output}\n-update-command = ${chmod:command}\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in b/plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in\ndeleted file mode 100644\nindex 5187839..0000000\n--- a/plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in\n+++ /dev/null\n@@ -1,68 +0,0 @@\n-# Apache configuration example for Squid-behind-Apache setup\n-\n-# Include the following in the Apache config like so:\n-#\n-#   Include ${buildout:directory}/etc/httpd-vhost.conf\n-#\n-# Or copy/paste into the relevant VirtualHost block\n-# or into the default host if not using VirtualHosts.\n-\n-\n-# The main domain\n-<VirtualHost *:80>\n-  ServerName ${apache-vhost:hostname}\n-  RewriteEngine On\n-\n-  # Split-view caching: Add "X-Anonymous" to request\n-  # to segregate authenticated/anonymous responses\n-  SetEnvIf Authorization .+ is_authenticated\n-  SetEnvIf Cookie "(^|.*; )__ac=" is_authenticated\n-  RequestHeader set X-Anonymous True env=!is_authenticated\n-\n-  # Split-view caching: Rewrite s-maxage in response\n-  # to exclude from intermediary caching proxies\n-  Header edit Cache-Control "^(.*)s-maxage=[0-9]+(.*)$" "$1s-maxage=0$2"\n-\n-  # Normalize Accept-Encoding header to optimize variant caching\n-  # 1) if gzip is allowed, rewrite Accept-Encoding to just "gzip"\n-  # 2) if gzip is not allowed, unset Accept-Encoding header\n-  # 3) also unset Accept-Encoding for images and other common binaries\n-  SetEnvIfNoCase Request_URI "\\.(jpe?g|png|gif|swf|pdf|gz|tgz|bz2|tbz|zip)$" unset_accept_encoding\n-  SetEnvIf Request_URI "/image_[^/]*$" unset_accept_encoding\n-  SetEnvIf Accept-Encoding ".*gzip.*" set_accept_encoding !env=unset_accept_encoding\n-  RequestHeader unset Accept-Encoding\n-  RequestHeader set Accept-Encoding gzip env=set_accept_encoding\n-\n-  # Remove trailing slash to avoid duplicates in caching proxy,\n-  # 1) for search engines, redirect to normalized version\n-  # 2) for everyone else, just strip the trailing slash\n-  RewriteCond  %{HTTP_USER_AGENT}  ^Yahoo.* [NC,OR]\n-  RewriteCond  %{HTTP_USER_AGENT}  ^Googlebot.* [NC,OR]\n-  RewriteCond  %{HTTP_USER_AGENT}  ^msnbot.* [NC]\n-  RewriteRule ^/(.*)/$ /$1 [R=301]\n-  RewriteRule ^/(.*)/$ /$1\n-\n-  # And finally, pass the request to the backend\n-  RewriteRule ^/(.*)$ http://${apache-vhost:backend}/VirtualHostBase/http/${apache-vhost:hostname}:80/${apache-vhost:zope-path}/VirtualHostRoot/$1 [P]\n-\n-</VirtualHost>\n-\n-\n-# Additional domains:\n-# Avoid the use of the ServerAlias directive in the main domain VirtualHost\n-# container as this tends to undermine the ability of external search engines\n-# to accurately assess page uniqueness. Instead perform a 301 redirect like so.\n-<VirtualHost *:80>\n-  ServerName www.${apache-vhost:hostname}\n-  ServerAlias *.${apache-vhost:hostname}\n-  RedirectPermanent / http://${apache-vhost:hostname}/\n-</VirtualHost>\n-\n-\n-# References\n-# http://plone.org/documentation/kb/plone-apache/vhm\n-# http://httpd.apache.org/docs/2.2/rewrite\n-# http://httpd.apache.org/docs/2.2/mod/mod_setenvif.html\n-# http://httpd.apache.org/docs/2.2/mod/mod_headers.html\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/squid/templates/squid.conf.in b/plone/app/caching/proxy-configs/squid/templates/squid.conf.in\ndeleted file mode 100644\nindex 6fadb2b..0000000\n--- a/plone/app/caching/proxy-configs/squid/templates/squid.conf.in\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-# Configuration file optimized for squid 2.7+.  It is untested with squid 3.x.\n-# See http://www.squid-cache.org/Doc/config/ for details\n-\n-# Assumes a single backend behind Squid (which could be a single\n-# zope instance or a load balancer serving multiple zeo clients).\n-# To change this to support multiple backends, see the docs linked above\n-\n-\n-visible_hostname ${squid-config:hostname}\n-http_port ${squid-config:bind} vhost defaultsite=${squid-config:hostname}\n-pid_filename ${squid-config:pid}\n-\n-# You may need to set the following if you need to start Squid as root.\n-# This might be the case if you need to bind to port 80.\n-#cache_effective_user zope\n-#cache_effective_group zope\n-\n-## Log files (http://wiki.squid-cache.org/SquidFaq/SquidLogs)\n-cache_log ${squid-config:log}\n-cache_store_log none\n-access_log none\n-\n-# Cache storage\n-# (for a faster cache storage option see,\n-#  http://wiki.squid-cache.org/Features/CyclicObjectStorageSystem)\n-cache_dir ufs ${squid-config:cache-dir} ${squid-config:cache-size} 16 256\n-cache_mem 256 MB\n-maximum_object_size 5 MB\n-maximum_object_size_in_memory 1 MB\n-\n-# Purge access - zope servers can purge but nobody else\n-# (works best if Zope and Apache are on different IPs\n-# or if Apache is configured to reject PURGE requests)\n-acl zope_servers src ${squid-config:backend-host}\n-acl purge method PURGE\n-http_access allow zope_servers purge\n-http_access deny purge\n-\n-# Deny caching of POST requests\n-acl post_requests method POST\n-cache deny post_requests\n-\n-# Cache Peers\n-cache_peer ${squid-config:backend-host} parent ${squid-config:backend-port} 0 no-query originserver login=PASS name=peer_0\n-\n-# Cache Peer Access\n-acl all src all\n-acl path_0 urlpath_regex /VirtualHostBase\n-http_access allow path_0\n-cache_peer_access peer_0 allow path_0\n-cache_peer_access peer_0 deny all\n-\ndiff --git a/plone/app/caching/proxy-configs/squid/templates/squid.in b/plone/app/caching/proxy-configs/squid/templates/squid.in\ndeleted file mode 100644\nindex fb319c4..0000000\n--- a/plone/app/caching/proxy-configs/squid/templates/squid.in\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-#!/bin/sh\n-\n-if [ $# -ge 1 ]; then\n-\n-  ${squid-runner:daemon} \\\n-    -f "${squid-runner:config}" \\\n-    "$@"\n-\n-else\n-\n-  ${squid-runner:daemon} -z \\\n-    -f "${squid-runner:config}"\n-\n-  ${squid-runner:daemon} \\\n-    -f "${squid-runner:config}"\n-\n-fi\ndiff --git a/plone/app/caching/proxy-configs/varnish/README.txt b/plone/app/caching/proxy-configs/varnish/README.txt\ndeleted file mode 100644\nindex a1e06b3..0000000\n--- a/plone/app/caching/proxy-configs/varnish/README.txt\n+++ /dev/null\n@@ -1,22 +0,0 @@\n-\n-This is an example buildout demonstrating a Varnish-behind-Apache proxy configuration optimized for a Plone site using plone.app.caching.\n-\n-This example also demonstrates one way to configure split-view caching (see the plone.app.caching readme) although it\'s also perfectly useable for the non-split-view caching case.  Split-view caching is enabled by setting a "Vary: X-Anonymous" header and "s-maxage" value on the split-views to be cached, via the plone.app.caching control panel.\n-\n-To install, you first need to have buildout installed.  See http://www.buildout.org/install.html\n-\n-Copy the entire contents of this directory to a new project directory and run buildout in that directory (for this example, let\'s assume a system-wide buildout is already installed).\n-\n-% cp -R * /path/to/project/\n-% cd /path/to/project\n-% buildout\n-\n-This will initialize the project directory and run all the \'parts\' as defined in buildout.cfg.\n-\n-- An Apache vhost configuration will be generated at "./etc/httpd-vhost.conf"\n-\n-- A Varnish vcl file will be generated at "./etc/varnish.vcl"\n-\n-- A wrapper script to start up Varnish will be generated at "./bin/varnishd"\n-\n-For more detail, see the comments in the configuration files.  In particular, you may wish to study the \'varnish.vcl\' file as much of the "magic" is encapsulated therein.\ndiff --git a/plone/app/caching/proxy-configs/varnish/buildout.cfg b/plone/app/caching/proxy-configs/varnish/buildout.cfg\ndeleted file mode 100644\nindex c85283b..0000000\n--- a/plone/app/caching/proxy-configs/varnish/buildout.cfg\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-# Example Varnish buildout for use with plone.app.caching\n-\n-[buildout]\n-parts =\n-    varnish\n-    varnish-config\n-    varnish-runner\n-    apache-vhost\n-    chmod\n-\n-\n-[varnish]\n-recipe = zc.recipe.cmmi\n-url = http://downloads.sourceforge.net/project/varnish/varnish/2.1.0/varnish-2.1.tar.gz\n-\n-\n-[varnish-config]\n-recipe = collective.recipe.template\n-input = templates/varnish.vcl.in\n-output = ${buildout:directory}/etc/varnish.vcl\n-\n-# misc template variables\n-backend-host = 127.0.0.1\n-backend-port = 8080\n-\n-\n-[varnish-runner]\n-recipe = collective.recipe.template\n-input = templates/varnishd.in\n-output = ${buildout:directory}/bin/varnishd\n-\n-# misc template variables\n-daemon = ${varnish:location}/sbin/varnishd\n-config = ${varnish-config:output}\n-pid = ${buildout:directory}/var/varnish.pid\n-bind = 127.0.0.1:3128\n-storage = ${buildout:directory}/var/storage\n-cache-size = 1G\n-\n-\n-[apache-vhost]\n-recipe = collective.recipe.template\n-input = templates/httpd-vhost.conf.in\n-output = ${buildout:directory}/etc/httpd-vhost.conf\n-\n-# misc template variables\n-hostname = example.com\n-backend = ${varnish-runner:bind}\n-zope-path = Plone\n-\n-\n-[chmod]\n-recipe = plone.recipe.command\n-command = chmod 755 ${varnish-runner:output}\n-update-command = ${chmod:command}\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in b/plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in\ndeleted file mode 100644\nindex e663450..0000000\n--- a/plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in\n+++ /dev/null\n@@ -1,45 +0,0 @@\n-# Apache configuration example for Varnish-behind-Apache setup\n-\n-# Include the following in the Apache config like so:\n-#\n-#   Include ${buildout:directory}/etc/httpd-vhost.conf\n-#\n-# Or copy/paste into the relevant VirtualHost block\n-# or into the default host if not using VirtualHosts.\n-\n-\n-# The main domain\n-<VirtualHost *:80>\n-  ServerName ${apache-vhost:hostname}\n-  RewriteEngine On\n-\n-  # Remove trailing slash to avoid duplicates in caching proxy,\n-  # 1) for search engines, redirect to normalized version\n-  # 2) for everyone else, just strip the trailing slash\n-  RewriteCond %{HTTP_USER_AGENT} ^Yahoo.* [NC,OR]\n-  RewriteCond %{HTTP_USER_AGENT} ^Googlebot.* [NC,OR]\n-  RewriteCond %{HTTP_USER_AGENT} ^msnbot.* [NC]\n-  RewriteRule ^/(.*)/$ /$1 [R=301]\n-  RewriteRule ^/(.*)/$ /$1\n-\n-  RewriteRule ^/(.*) http://${apache-vhost:backend}/VirtualHostBase/http/${apache-vhost:hostname}:80/${apache-vhost:zope-path}/VirtualHostRoot/$1 [P]\n-\n-</VirtualHost>\n-\n-\n-# Additional domains:\n-# Avoid the use of the ServerAlias directive in the main domain VirtualHost\n-# container as this tends to undermine the ability of external search engines\n-# to accurately assess page uniqueness. Instead perform a 301 redirect like so.\n-<VirtualHost *:80>\n-  ServerName www.${apache-vhost:hostname}\n-  ServerAlias *.${apache-vhost:hostname}\n-  RedirectPermanent / http://${apache-vhost:hostname}/\n-</VirtualHost>\n-\n-\n-# References\n-# http://plone.org/documentation/kb/plone-apache/vhm\n-# http://httpd.apache.org/docs/2.2/rewrite\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in b/plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in\ndeleted file mode 100644\nindex 9067d67..0000000\n--- a/plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in\n+++ /dev/null\n@@ -1,115 +0,0 @@\n-# VCL file optimized for plone.app.caching.  See vcl(7) for details\n-\n-# This is an example of a split view caching setup with another proxy\n-# like Apache in front of Varnish to rewrite urls into the VHM style.\n-\n-# Also assumes a single backend behind Varnish (which could be a single\n-# zope instance or a load balancer serving multiple zeo clients).\n-# To change this to support multiple backends, see the vcl man pages\n-# for instructions.\n-\n-\n-backend default {\n-    .host = "${varnish-config:backend-host}";\n-    .port = "${varnish-config:backend-port}";\n-    .connect_timeout = 0.4s;\n-    .first_byte_timeout = 300s;\n-    .between_bytes_timeout = 60s;\n-}\n-\n-acl purge {\n-    "localhost";\n-    "127.0.0.1";\n-    "${varnish-config:backend-host}";\n-}\n-\n-sub vcl_recv {\n-    set req.grace = 120s;\n-    set req.backend = default;\n-\n-    if (req.request == "PURGE") {\n-        if (!client.ip ~ purge) {\n-                error 405 "Not allowed.";\n-        }\n-        purge_url(req.url);\n-        error 200 "Purged";\n-    }\n-    if (req.request != "GET" && req.request != "HEAD") {\n-        # We only deal with GET and HEAD by default\n-        return(pass);\n-    }\n-    call normalize_accept_encoding;\n-    call annotate_request;\n-    return(lookup);\n-}\n-\n-sub vcl_fetch {\n-    if (!beresp.cacheable) {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";\n-        return(pass);\n-    }\n-    if (beresp.http.Set-Cookie) {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets cookie)";\n-        return(pass);\n-    }\n-    if (!beresp.http.Cache-Control ~ "s-maxage=[1-9]" && beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets private/no-cache/no-store token)";\n-        return(pass);\n-    }\n-    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";\n-        return(pass);\n-    }\n-    if (req.http.X-Anonymous && !beresp.http.Cache-Control) {\n-        set beresp.ttl = 600s;\n-        set beresp.http.X-Varnish-Action = "FETCH (override - backend not setting cache control)";\n-    }\n-    call rewrite_s_maxage;\n-    return(deliver);\n-}\n-\n-sub vcl_deliver {\n-    call rewrite_age;\n-}\n-\n-\n-##########################\n-#  Helper Subroutines\n-##########################\n-\n-# Optimize the Accept-Encoding variant caching\n-sub normalize_accept_encoding {\n-    if (req.http.Accept-Encoding) {\n-        if (req.url ~ "\\.(jpe?g|png|gif|swf|pdf|gz|tgz|bz2|tbz|zip)$" || req.url ~ "/image_[^/]*$") {\n-            remove req.http.Accept-Encoding;\n-        } elsif (req.http.Accept-Encoding ~ "gzip") {\n-            set req.http.Accept-Encoding = "gzip";\n-        } else {\n-            remove req.http.Accept-Encoding;\n-        }\n-    }\n-}\n-\n-# Keep auth/anon variants apart if "Vary: X-Anonymous" is in the response\n-sub annotate_request {\n-    if (!(req.http.Authorization || req.http.cookie ~ "(^|.*; )__ac=")) {\n-        set req.http.X-Anonymous = "True";\n-    }\n-}\n-\n-# The varnish response should always declare itself to be fresh\n-sub rewrite_age {\n-    if (resp.http.Age) {\n-        set resp.http.X-Varnish-Age = resp.http.Age;\n-        set resp.http.Age = "0";\n-    }\n-}\n-\n-# Rewrite s-maxage to exclude from intermediary proxies\n-# (to cache *everywhere*, just use \'max-age\' token in the response to avoid this override)\n-sub rewrite_s_maxage {\n-    if (beresp.http.Cache-Control ~ "s-maxage") {\n-        set beresp.http.Cache-Control = regsub(beresp.http.Cache-Control, "s-maxage=[0-9]+", "s-maxage=0");\n-    }\n-}\n-\ndiff --git a/plone/app/caching/proxy-configs/varnish/templates/varnishd.in b/plone/app/caching/proxy-configs/varnish/templates/varnishd.in\ndeleted file mode 100644\nindex 636f080..0000000\n--- a/plone/app/caching/proxy-configs/varnish/templates/varnishd.in\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-#!/bin/sh\n-\n-exec ${varnish-runner:daemon} \\\n-    -f "${varnish-runner:config}" \\\n-    -P "${varnish-runner:pid}" \\\n-    -a ${varnish-runner:bind} \\\n-    -s file,"${varnish-runner:storage}",${varnish-runner:cache-size} \\\n-    "$@"\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:47:11+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/f9525a57242a179e761980dcb9cfdb81a0632d81

state we're supporting Plone 6

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 14e5aa2..8de361d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -16,6 +16,7 @@\n         'Environment :: Web Environment',\n         'Framework :: Plone',\n         'Framework :: Plone :: 5.2',\n+        'Framework :: Plone :: 6.0',\n         'Framework :: Plone :: Core',\n         'Framework :: Zope2',\n         'Framework :: Zope :: 4',\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:50:23+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/c3b5830850b132076ef4968106364bfbc4971a4f

state we're supporting Zope 5 (no Zope2)

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 8de361d..b6ece89 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -18,8 +18,8 @@\n         'Framework :: Plone :: 5.2',\n         'Framework :: Plone :: 6.0',\n         'Framework :: Plone :: Core',\n-        'Framework :: Zope2',\n         'Framework :: Zope :: 4',\n+        'Framework :: Zope :: 5',\n         'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:51:06+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/62e92a21801a7e0d539c0407a820f0fee99cd4b2

document changes

Files changed:
A news/64.doc

b'diff --git a/news/64.doc b/news/64.doc\nnew file mode 100644\nindex 0000000..39c6ac8\n--- /dev/null\n+++ b/news/64.doc\n@@ -0,0 +1,4 @@\n+Remove hopelessly outdated proxy config examples.\n+Look at plone.recipe.varnish for excellent examples!\n+[jensens]\n+\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:51:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/ee56eaa41f646e7c453dd525ff91a52088605097

Merge pull request #64 from plone/remove-outdated-examples

Remove hopelessly outdated proxy config examples

Files changed:
A news/64.doc
M docs/caching-profiles.rst
M docs/caching-proxies.rst
M docs/split-views.rst
M setup.py
D plone/app/caching/proxy-configs/squid/README.txt
D plone/app/caching/proxy-configs/squid/buildout.cfg
D plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in
D plone/app/caching/proxy-configs/squid/templates/squid.conf.in
D plone/app/caching/proxy-configs/squid/templates/squid.in
D plone/app/caching/proxy-configs/varnish/README.txt
D plone/app/caching/proxy-configs/varnish/buildout.cfg
D plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in
D plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in
D plone/app/caching/proxy-configs/varnish/templates/varnishd.in

b'diff --git a/docs/caching-profiles.rst b/docs/caching-profiles.rst\nindex 016f677..c5e8c16 100644\n--- a/docs/caching-profiles.rst\n+++ b/docs/caching-profiles.rst\n@@ -31,7 +31,6 @@ The three default caching profiles:\n * **With caching proxy (and split-view caching)**\n       An example profile for a caching proxy setup with split-view\n       caching enabled.  This example requires a special proxy setup.\n-      See the proxy examples in the "proxy-configs" directory.\n \n \n Custom caching profiles\ndiff --git a/docs/caching-proxies.rst b/docs/caching-proxies.rst\nindex 46abad8..adb3780 100644\n--- a/docs/caching-proxies.rst\n+++ b/docs/caching-proxies.rst\n@@ -103,25 +103,8 @@ before he had a new haircut.\n Installing and configuring a caching proxy\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-The ``plone.app.caching`` package includes some example buildout\n-configurations in the ``proxy-configs`` directory. Two versions are included:\n-one demonstrating a Squid-behind-Apache proxy setup and another demonstrating\n-a Varnish-behind-Apache proxy setup. Both examples also demonstrate how to\n-properly configure split-view caching.\n-\n-These configurations are provided for instructional purposes but with a little\n-modification they can also be used in production. To use in a real production\n-instance, you will need to adjust the configuration to match your setup. For a\n-simple standard setup, you might only need to change the ``hostname`` value in\n-the buildout.cfg. Read the README.txt files in each example for more\n-instructions.\n-\n-There are also some alternative buildout recipes for building and configuring\n-proxy configs: `plone.recipe.squid`_ and `plone.recipe.varnish`_. The examples\n-in this package do not use these recipes in favor of using a more explicit,\n-and hopefully more educational, template-based approach. Even if you decide to\n-use one of the automated recipes, it will probably be worth your while to\n-study the examples included in this package to get a few pointers.\n+There are buildout recipes for building and configuring proxy configs: `plone.recipe.squid`_ and `plone.recipe.varnish`_.\n+\n \n Running Plone behind Apache 2.2 with mod_cache\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\ndiff --git a/docs/split-views.rst b/docs/split-views.rst\nindex e405ec5..fe70321 100644\n--- a/docs/split-views.rst\n+++ b/docs/split-views.rst\n@@ -29,7 +29,4 @@ responses.\n Yet another solution involves intercepting the request and dynamically adding\n a special ``X-Anonymous`` header to the anonymous request and then adding\n ``Vary:X-Anonymous`` to the split view response so that this header will added\n-to the cache key.  Examples of this last solution for both Squid and Varnish\n-are included in the ``proxy-configs`` directory of this package, which are\n-intended to be used in concert with something like the split-view caching\n-profile of ``plone.app.caching``.\n+to the cache key.\ndiff --git a/news/64.doc b/news/64.doc\nnew file mode 100644\nindex 0000000..39c6ac8\n--- /dev/null\n+++ b/news/64.doc\n@@ -0,0 +1,4 @@\n+Remove hopelessly outdated proxy config examples.\n+Look at plone.recipe.varnish for excellent examples!\n+[jensens]\n+\ndiff --git a/plone/app/caching/proxy-configs/squid/README.txt b/plone/app/caching/proxy-configs/squid/README.txt\ndeleted file mode 100644\nindex 39653ca..0000000\n--- a/plone/app/caching/proxy-configs/squid/README.txt\n+++ /dev/null\n@@ -1,22 +0,0 @@\n-\n-This is an example buildout demonstrating a Squid-behind-Apache proxy configuration optimized for a Plone site using plone.app.caching.\n-\n-This example also demonstrates one way to configure split-view caching (see the plone.app.caching readme) although it\'s also perfectly useable for the non-split-view caching case.  Split-view caching is enabled by setting a "Vary: X-Anonymous" header and "s-maxage" value on the split-views to be cached, via the plone.app.caching control panel.\n-\n-To install, you first need to have buildout installed.  See http://www.buildout.org/install.html\n-\n-Copy the entire contents of this directory to a new project directory and run buildout in that directory (for this example, let\'s assume a system-wide buildout is already installed).\n-\n-% cp -R * /path/to/project/\n-% cd /path/to/project\n-% buildout\n-\n-This will initialize the project directory and run all the \'parts\' as defined in buildout.cfg.\n-\n-- An Apache vhost configuration will be generated at "./etc/httpd-vhost.conf"\n-\n-- A Squid configuration file will be generated at "./etc/squid.conf"\n-\n-- A wrapper script to start up Squid will be generated at "./bin/squid"\n-\n-For more detail, see the comments in the configuration files.  In particular, you may wish to study the Apache vhost configuration as much of the "magic" is encapsulated therein.\n\\ No newline at end of file\ndiff --git a/plone/app/caching/proxy-configs/squid/buildout.cfg b/plone/app/caching/proxy-configs/squid/buildout.cfg\ndeleted file mode 100644\nindex a0cc332..0000000\n--- a/plone/app/caching/proxy-configs/squid/buildout.cfg\n+++ /dev/null\n@@ -1,59 +0,0 @@\n-# Example Squid buildout for use with plone.app.caching\n-\n-[buildout]\n-parts =\n-    squid\n-    squid-config\n-    squid-runner\n-    apache-vhost\n-    chmod\n-\n-\n-[squid]\n-recipe = zc.recipe.cmmi\n-url = http://www.squid-cache.org/Versions/v2/2.7/squid-2.7.STABLE9.tar.gz\n-\n-\n-[squid-config]\n-recipe = collective.recipe.template\n-input = templates/squid.conf.in\n-output = ${buildout:directory}/etc/squid.conf\n-\n-# misc template variables\n-hostname = example.com\n-bind = 127.0.0.1:3128\n-pid = ${buildout:directory}/var/squid.pid\n-log = ${buildout:directory}/var/squid-cache.log\n-cache-dir = ${buildout:directory}/var/squidstorage\n-cache-size = 2000\n-backend-host = 127.0.0.1\n-backend-port = 8080\n-\n-\n-[squid-runner]\n-recipe = collective.recipe.template\n-input = templates/squid.in\n-output = ${buildout:directory}/bin/squid\n-\n-# misc template variables\n-daemon = ${squid:location}/sbin/squid\n-config = ${squid-config:output}\n-\n-\n-[apache-vhost]\n-recipe = collective.recipe.template\n-input = templates/httpd-vhost.conf.in\n-output = ${buildout:directory}/etc/httpd-vhost.conf\n-\n-# misc template variables\n-hostname = ${squid-config:hostname}\n-backend = ${squid-config:bind}\n-zope-path = Plone\n-\n-\n-[chmod]\n-recipe = plone.recipe.command\n-command = chmod 755 ${squid-runner:output}\n-update-command = ${chmod:command}\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in b/plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in\ndeleted file mode 100644\nindex 5187839..0000000\n--- a/plone/app/caching/proxy-configs/squid/templates/httpd-vhost.conf.in\n+++ /dev/null\n@@ -1,68 +0,0 @@\n-# Apache configuration example for Squid-behind-Apache setup\n-\n-# Include the following in the Apache config like so:\n-#\n-#   Include ${buildout:directory}/etc/httpd-vhost.conf\n-#\n-# Or copy/paste into the relevant VirtualHost block\n-# or into the default host if not using VirtualHosts.\n-\n-\n-# The main domain\n-<VirtualHost *:80>\n-  ServerName ${apache-vhost:hostname}\n-  RewriteEngine On\n-\n-  # Split-view caching: Add "X-Anonymous" to request\n-  # to segregate authenticated/anonymous responses\n-  SetEnvIf Authorization .+ is_authenticated\n-  SetEnvIf Cookie "(^|.*; )__ac=" is_authenticated\n-  RequestHeader set X-Anonymous True env=!is_authenticated\n-\n-  # Split-view caching: Rewrite s-maxage in response\n-  # to exclude from intermediary caching proxies\n-  Header edit Cache-Control "^(.*)s-maxage=[0-9]+(.*)$" "$1s-maxage=0$2"\n-\n-  # Normalize Accept-Encoding header to optimize variant caching\n-  # 1) if gzip is allowed, rewrite Accept-Encoding to just "gzip"\n-  # 2) if gzip is not allowed, unset Accept-Encoding header\n-  # 3) also unset Accept-Encoding for images and other common binaries\n-  SetEnvIfNoCase Request_URI "\\.(jpe?g|png|gif|swf|pdf|gz|tgz|bz2|tbz|zip)$" unset_accept_encoding\n-  SetEnvIf Request_URI "/image_[^/]*$" unset_accept_encoding\n-  SetEnvIf Accept-Encoding ".*gzip.*" set_accept_encoding !env=unset_accept_encoding\n-  RequestHeader unset Accept-Encoding\n-  RequestHeader set Accept-Encoding gzip env=set_accept_encoding\n-\n-  # Remove trailing slash to avoid duplicates in caching proxy,\n-  # 1) for search engines, redirect to normalized version\n-  # 2) for everyone else, just strip the trailing slash\n-  RewriteCond  %{HTTP_USER_AGENT}  ^Yahoo.* [NC,OR]\n-  RewriteCond  %{HTTP_USER_AGENT}  ^Googlebot.* [NC,OR]\n-  RewriteCond  %{HTTP_USER_AGENT}  ^msnbot.* [NC]\n-  RewriteRule ^/(.*)/$ /$1 [R=301]\n-  RewriteRule ^/(.*)/$ /$1\n-\n-  # And finally, pass the request to the backend\n-  RewriteRule ^/(.*)$ http://${apache-vhost:backend}/VirtualHostBase/http/${apache-vhost:hostname}:80/${apache-vhost:zope-path}/VirtualHostRoot/$1 [P]\n-\n-</VirtualHost>\n-\n-\n-# Additional domains:\n-# Avoid the use of the ServerAlias directive in the main domain VirtualHost\n-# container as this tends to undermine the ability of external search engines\n-# to accurately assess page uniqueness. Instead perform a 301 redirect like so.\n-<VirtualHost *:80>\n-  ServerName www.${apache-vhost:hostname}\n-  ServerAlias *.${apache-vhost:hostname}\n-  RedirectPermanent / http://${apache-vhost:hostname}/\n-</VirtualHost>\n-\n-\n-# References\n-# http://plone.org/documentation/kb/plone-apache/vhm\n-# http://httpd.apache.org/docs/2.2/rewrite\n-# http://httpd.apache.org/docs/2.2/mod/mod_setenvif.html\n-# http://httpd.apache.org/docs/2.2/mod/mod_headers.html\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/squid/templates/squid.conf.in b/plone/app/caching/proxy-configs/squid/templates/squid.conf.in\ndeleted file mode 100644\nindex 6fadb2b..0000000\n--- a/plone/app/caching/proxy-configs/squid/templates/squid.conf.in\n+++ /dev/null\n@@ -1,52 +0,0 @@\n-# Configuration file optimized for squid 2.7+.  It is untested with squid 3.x.\n-# See http://www.squid-cache.org/Doc/config/ for details\n-\n-# Assumes a single backend behind Squid (which could be a single\n-# zope instance or a load balancer serving multiple zeo clients).\n-# To change this to support multiple backends, see the docs linked above\n-\n-\n-visible_hostname ${squid-config:hostname}\n-http_port ${squid-config:bind} vhost defaultsite=${squid-config:hostname}\n-pid_filename ${squid-config:pid}\n-\n-# You may need to set the following if you need to start Squid as root.\n-# This might be the case if you need to bind to port 80.\n-#cache_effective_user zope\n-#cache_effective_group zope\n-\n-## Log files (http://wiki.squid-cache.org/SquidFaq/SquidLogs)\n-cache_log ${squid-config:log}\n-cache_store_log none\n-access_log none\n-\n-# Cache storage\n-# (for a faster cache storage option see,\n-#  http://wiki.squid-cache.org/Features/CyclicObjectStorageSystem)\n-cache_dir ufs ${squid-config:cache-dir} ${squid-config:cache-size} 16 256\n-cache_mem 256 MB\n-maximum_object_size 5 MB\n-maximum_object_size_in_memory 1 MB\n-\n-# Purge access - zope servers can purge but nobody else\n-# (works best if Zope and Apache are on different IPs\n-# or if Apache is configured to reject PURGE requests)\n-acl zope_servers src ${squid-config:backend-host}\n-acl purge method PURGE\n-http_access allow zope_servers purge\n-http_access deny purge\n-\n-# Deny caching of POST requests\n-acl post_requests method POST\n-cache deny post_requests\n-\n-# Cache Peers\n-cache_peer ${squid-config:backend-host} parent ${squid-config:backend-port} 0 no-query originserver login=PASS name=peer_0\n-\n-# Cache Peer Access\n-acl all src all\n-acl path_0 urlpath_regex /VirtualHostBase\n-http_access allow path_0\n-cache_peer_access peer_0 allow path_0\n-cache_peer_access peer_0 deny all\n-\ndiff --git a/plone/app/caching/proxy-configs/squid/templates/squid.in b/plone/app/caching/proxy-configs/squid/templates/squid.in\ndeleted file mode 100644\nindex fb319c4..0000000\n--- a/plone/app/caching/proxy-configs/squid/templates/squid.in\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-#!/bin/sh\n-\n-if [ $# -ge 1 ]; then\n-\n-  ${squid-runner:daemon} \\\n-    -f "${squid-runner:config}" \\\n-    "$@"\n-\n-else\n-\n-  ${squid-runner:daemon} -z \\\n-    -f "${squid-runner:config}"\n-\n-  ${squid-runner:daemon} \\\n-    -f "${squid-runner:config}"\n-\n-fi\ndiff --git a/plone/app/caching/proxy-configs/varnish/README.txt b/plone/app/caching/proxy-configs/varnish/README.txt\ndeleted file mode 100644\nindex a1e06b3..0000000\n--- a/plone/app/caching/proxy-configs/varnish/README.txt\n+++ /dev/null\n@@ -1,22 +0,0 @@\n-\n-This is an example buildout demonstrating a Varnish-behind-Apache proxy configuration optimized for a Plone site using plone.app.caching.\n-\n-This example also demonstrates one way to configure split-view caching (see the plone.app.caching readme) although it\'s also perfectly useable for the non-split-view caching case.  Split-view caching is enabled by setting a "Vary: X-Anonymous" header and "s-maxage" value on the split-views to be cached, via the plone.app.caching control panel.\n-\n-To install, you first need to have buildout installed.  See http://www.buildout.org/install.html\n-\n-Copy the entire contents of this directory to a new project directory and run buildout in that directory (for this example, let\'s assume a system-wide buildout is already installed).\n-\n-% cp -R * /path/to/project/\n-% cd /path/to/project\n-% buildout\n-\n-This will initialize the project directory and run all the \'parts\' as defined in buildout.cfg.\n-\n-- An Apache vhost configuration will be generated at "./etc/httpd-vhost.conf"\n-\n-- A Varnish vcl file will be generated at "./etc/varnish.vcl"\n-\n-- A wrapper script to start up Varnish will be generated at "./bin/varnishd"\n-\n-For more detail, see the comments in the configuration files.  In particular, you may wish to study the \'varnish.vcl\' file as much of the "magic" is encapsulated therein.\ndiff --git a/plone/app/caching/proxy-configs/varnish/buildout.cfg b/plone/app/caching/proxy-configs/varnish/buildout.cfg\ndeleted file mode 100644\nindex c85283b..0000000\n--- a/plone/app/caching/proxy-configs/varnish/buildout.cfg\n+++ /dev/null\n@@ -1,57 +0,0 @@\n-# Example Varnish buildout for use with plone.app.caching\n-\n-[buildout]\n-parts =\n-    varnish\n-    varnish-config\n-    varnish-runner\n-    apache-vhost\n-    chmod\n-\n-\n-[varnish]\n-recipe = zc.recipe.cmmi\n-url = http://downloads.sourceforge.net/project/varnish/varnish/2.1.0/varnish-2.1.tar.gz\n-\n-\n-[varnish-config]\n-recipe = collective.recipe.template\n-input = templates/varnish.vcl.in\n-output = ${buildout:directory}/etc/varnish.vcl\n-\n-# misc template variables\n-backend-host = 127.0.0.1\n-backend-port = 8080\n-\n-\n-[varnish-runner]\n-recipe = collective.recipe.template\n-input = templates/varnishd.in\n-output = ${buildout:directory}/bin/varnishd\n-\n-# misc template variables\n-daemon = ${varnish:location}/sbin/varnishd\n-config = ${varnish-config:output}\n-pid = ${buildout:directory}/var/varnish.pid\n-bind = 127.0.0.1:3128\n-storage = ${buildout:directory}/var/storage\n-cache-size = 1G\n-\n-\n-[apache-vhost]\n-recipe = collective.recipe.template\n-input = templates/httpd-vhost.conf.in\n-output = ${buildout:directory}/etc/httpd-vhost.conf\n-\n-# misc template variables\n-hostname = example.com\n-backend = ${varnish-runner:bind}\n-zope-path = Plone\n-\n-\n-[chmod]\n-recipe = plone.recipe.command\n-command = chmod 755 ${varnish-runner:output}\n-update-command = ${chmod:command}\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in b/plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in\ndeleted file mode 100644\nindex e663450..0000000\n--- a/plone/app/caching/proxy-configs/varnish/templates/httpd-vhost.conf.in\n+++ /dev/null\n@@ -1,45 +0,0 @@\n-# Apache configuration example for Varnish-behind-Apache setup\n-\n-# Include the following in the Apache config like so:\n-#\n-#   Include ${buildout:directory}/etc/httpd-vhost.conf\n-#\n-# Or copy/paste into the relevant VirtualHost block\n-# or into the default host if not using VirtualHosts.\n-\n-\n-# The main domain\n-<VirtualHost *:80>\n-  ServerName ${apache-vhost:hostname}\n-  RewriteEngine On\n-\n-  # Remove trailing slash to avoid duplicates in caching proxy,\n-  # 1) for search engines, redirect to normalized version\n-  # 2) for everyone else, just strip the trailing slash\n-  RewriteCond %{HTTP_USER_AGENT} ^Yahoo.* [NC,OR]\n-  RewriteCond %{HTTP_USER_AGENT} ^Googlebot.* [NC,OR]\n-  RewriteCond %{HTTP_USER_AGENT} ^msnbot.* [NC]\n-  RewriteRule ^/(.*)/$ /$1 [R=301]\n-  RewriteRule ^/(.*)/$ /$1\n-\n-  RewriteRule ^/(.*) http://${apache-vhost:backend}/VirtualHostBase/http/${apache-vhost:hostname}:80/${apache-vhost:zope-path}/VirtualHostRoot/$1 [P]\n-\n-</VirtualHost>\n-\n-\n-# Additional domains:\n-# Avoid the use of the ServerAlias directive in the main domain VirtualHost\n-# container as this tends to undermine the ability of external search engines\n-# to accurately assess page uniqueness. Instead perform a 301 redirect like so.\n-<VirtualHost *:80>\n-  ServerName www.${apache-vhost:hostname}\n-  ServerAlias *.${apache-vhost:hostname}\n-  RedirectPermanent / http://${apache-vhost:hostname}/\n-</VirtualHost>\n-\n-\n-# References\n-# http://plone.org/documentation/kb/plone-apache/vhm\n-# http://httpd.apache.org/docs/2.2/rewrite\n-\n-\ndiff --git a/plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in b/plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in\ndeleted file mode 100644\nindex 9067d67..0000000\n--- a/plone/app/caching/proxy-configs/varnish/templates/varnish.vcl.in\n+++ /dev/null\n@@ -1,115 +0,0 @@\n-# VCL file optimized for plone.app.caching.  See vcl(7) for details\n-\n-# This is an example of a split view caching setup with another proxy\n-# like Apache in front of Varnish to rewrite urls into the VHM style.\n-\n-# Also assumes a single backend behind Varnish (which could be a single\n-# zope instance or a load balancer serving multiple zeo clients).\n-# To change this to support multiple backends, see the vcl man pages\n-# for instructions.\n-\n-\n-backend default {\n-    .host = "${varnish-config:backend-host}";\n-    .port = "${varnish-config:backend-port}";\n-    .connect_timeout = 0.4s;\n-    .first_byte_timeout = 300s;\n-    .between_bytes_timeout = 60s;\n-}\n-\n-acl purge {\n-    "localhost";\n-    "127.0.0.1";\n-    "${varnish-config:backend-host}";\n-}\n-\n-sub vcl_recv {\n-    set req.grace = 120s;\n-    set req.backend = default;\n-\n-    if (req.request == "PURGE") {\n-        if (!client.ip ~ purge) {\n-                error 405 "Not allowed.";\n-        }\n-        purge_url(req.url);\n-        error 200 "Purged";\n-    }\n-    if (req.request != "GET" && req.request != "HEAD") {\n-        # We only deal with GET and HEAD by default\n-        return(pass);\n-    }\n-    call normalize_accept_encoding;\n-    call annotate_request;\n-    return(lookup);\n-}\n-\n-sub vcl_fetch {\n-    if (!beresp.cacheable) {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";\n-        return(pass);\n-    }\n-    if (beresp.http.Set-Cookie) {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets cookie)";\n-        return(pass);\n-    }\n-    if (!beresp.http.Cache-Control ~ "s-maxage=[1-9]" && beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets private/no-cache/no-store token)";\n-        return(pass);\n-    }\n-    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {\n-        set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";\n-        return(pass);\n-    }\n-    if (req.http.X-Anonymous && !beresp.http.Cache-Control) {\n-        set beresp.ttl = 600s;\n-        set beresp.http.X-Varnish-Action = "FETCH (override - backend not setting cache control)";\n-    }\n-    call rewrite_s_maxage;\n-    return(deliver);\n-}\n-\n-sub vcl_deliver {\n-    call rewrite_age;\n-}\n-\n-\n-##########################\n-#  Helper Subroutines\n-##########################\n-\n-# Optimize the Accept-Encoding variant caching\n-sub normalize_accept_encoding {\n-    if (req.http.Accept-Encoding) {\n-        if (req.url ~ "\\.(jpe?g|png|gif|swf|pdf|gz|tgz|bz2|tbz|zip)$" || req.url ~ "/image_[^/]*$") {\n-            remove req.http.Accept-Encoding;\n-        } elsif (req.http.Accept-Encoding ~ "gzip") {\n-            set req.http.Accept-Encoding = "gzip";\n-        } else {\n-            remove req.http.Accept-Encoding;\n-        }\n-    }\n-}\n-\n-# Keep auth/anon variants apart if "Vary: X-Anonymous" is in the response\n-sub annotate_request {\n-    if (!(req.http.Authorization || req.http.cookie ~ "(^|.*; )__ac=")) {\n-        set req.http.X-Anonymous = "True";\n-    }\n-}\n-\n-# The varnish response should always declare itself to be fresh\n-sub rewrite_age {\n-    if (resp.http.Age) {\n-        set resp.http.X-Varnish-Age = resp.http.Age;\n-        set resp.http.Age = "0";\n-    }\n-}\n-\n-# Rewrite s-maxage to exclude from intermediary proxies\n-# (to cache *everywhere*, just use \'max-age\' token in the response to avoid this override)\n-sub rewrite_s_maxage {\n-    if (beresp.http.Cache-Control ~ "s-maxage") {\n-        set beresp.http.Cache-Control = regsub(beresp.http.Cache-Control, "s-maxage=[0-9]+", "s-maxage=0");\n-    }\n-}\n-\ndiff --git a/plone/app/caching/proxy-configs/varnish/templates/varnishd.in b/plone/app/caching/proxy-configs/varnish/templates/varnishd.in\ndeleted file mode 100644\nindex 636f080..0000000\n--- a/plone/app/caching/proxy-configs/varnish/templates/varnishd.in\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-#!/bin/sh\n-\n-exec ${varnish-runner:daemon} \\\n-    -f "${varnish-runner:config}" \\\n-    -P "${varnish-runner:pid}" \\\n-    -a ${varnish-runner:bind} \\\n-    -s file,"${varnish-runner:storage}",${varnish-runner:cache-size} \\\n-    "$@"\ndiff --git a/setup.py b/setup.py\nindex 14e5aa2..b6ece89 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -16,9 +16,10 @@\n         \'Environment :: Web Environment\',\n         \'Framework :: Plone\',\n         \'Framework :: Plone :: 5.2\',\n+        \'Framework :: Plone :: 6.0\',\n         \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope2\',\n         \'Framework :: Zope :: 4\',\n+        \'Framework :: Zope :: 5\',\n         \'License :: OSI Approved :: GNU General Public License v2 (GPLv2)\',\n         \'Operating System :: OS Independent\',\n         \'Programming Language :: Python\',\n'

