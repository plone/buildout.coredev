Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-05-19T11:43:57+02:00
Author: Fred van Dijk (fredvd) <fredvd@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c71a3bfbf93ddd743dd4c944240082a7cf9c09bf

Catch more errors in generating scripts listing when bundle resources cannot be found.
Test is not complete, it tests if the bundle is still working, but the KeyError in Bundle realpath is not tested and I cannot get the ResourceRegistry in development mode.

Files changed:
A news/3096.bugfix
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/bundle.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex c6ecd84c72..aa410eb3c7 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -49,7 +49,7 @@ def get_resource(context, path):\n \n     try:\n         resource = context.unrestrictedTraverse(path)\n-    except NotFound:\n+    except (NotFound, AttributeError):\n         logger.warning(u\'Could not find resource {0}. You may have to create it first.\'.format(path))  # noqa\n         return\n \ndiff --git a/Products/CMFPlone/resources/bundle.py b/Products/CMFPlone/resources/bundle.py\nindex 3aa62475b5..9515b20f1c 100644\n--- a/Products/CMFPlone/resources/bundle.py\n+++ b/Products/CMFPlone/resources/bundle.py\n@@ -34,7 +34,7 @@ def _real_path(self, ctx):\n             resource_path = self.data.csscompilation\n         try:\n             resource = getSite().restrictedTraverse(resource_path)\n-        except NotFound:\n+        except (NotFound, KeyError):\n             return None, None\n         if resource.__module__ == \'Products.Five.metaclass\':\n             try:\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex c13c0a7973..21e7c707f5 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -172,6 +172,30 @@ def test_cooking_missing(self):\n         )\n         self.assertIn(b\'Could not find resource\', resp.getBody())\n \n+    def test_cooking_missing_browserresource(self):\n+        registry = getUtility(IRegistry)\n+        registry[\'plone.resources.development\'] = True\n+        bundles = registry.collectionOfInterface(IBundleRegistry,\n+                                                 prefix="plone.bundles")\n+        bundle = bundles.add(\'barbar\')\n+        bundle.jscompilation = \'++resource++notfound/barbar-compiled.js\'\n+        bundle.csscompilation = \'++resource++notfound/barbar-compiled.css\'\n+        bundle.compile = False\n+        bundle.merge_with = \'default\'\n+\n+        bundle = Bundle(bundle)\n+\n+        # cookWhenChangingSettings(self.portal, bundle)\n+        scripts = ScriptsView(\n+            self.layer[\'portal\'],\n+            self.layer[\'request\'],\n+            None\n+        )\n+        scripts.update()\n+        results = scripts.scripts()\n+        # at least have jquery.min.js, config.js, require.js, etc.\n+        self.assertTrue(len(results)>2)\n+\n     def test_error(self):\n         registry = getUtility(IRegistry)\n         bundles = registry.collectionOfInterface(IBundleRegistry,\ndiff --git a/news/3096.bugfix b/news/3096.bugfix\nnew file mode 100644\nindex 0000000000..6426c11170\n--- /dev/null\n+++ b/news/3096.bugfix\n@@ -0,0 +1,4 @@\n+Make the resource registry scripts output more robust when a bundle resource is missing. This prevents\n+breaking your whole Plone site and access to the resource registry control panel after inserting\n+one missing resource. \n+[fredvd]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-06-27T13:44:26+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/Products.CMFPlone/commit/0527ec2cd7b289a89ffe561a0d1af1f7e90b638f

Merge branch '5.2.x' into fredvd-3096-bundle-jscompilation

Files changed:
A news/2482.bugfix
A news/3086.feature
A news/3105.bugfix
A news/3115.bugfix
A news/721.bugfix
M Products/CMFPlone/PloneControlPanel.py
M Products/CMFPlone/interfaces/controlpanel.py
M Products/CMFPlone/resources/browser/styles.py
M Products/CMFPlone/skins/plone_prefs/prefs_error_log_setProperties.py
M Products/CMFPlone/tests/robot/test_linkintegrity.robot

b'diff --git a/Products/CMFPlone/PloneControlPanel.py b/Products/CMFPlone/PloneControlPanel.py\nindex b749d2d51f..9e97d7c58b 100644\n--- a/Products/CMFPlone/PloneControlPanel.py\n+++ b/Products/CMFPlone/PloneControlPanel.py\n@@ -143,9 +143,10 @@ def enumConfiglets(self, group=None):\n                 a[\'title\'] = translate(title,\n                                        context=self.REQUEST)\n \n-        def _id(v):\n-            return v[\'id\']\n-        res.sort(key=_id)\n+        def _title(v):\n+            return v[\'title\']\n+\n+        res.sort(key=_title)\n         return res\n \n     security.declareProtected(ManagePortal, \'unregisterConfiglet\')\ndiff --git a/Products/CMFPlone/interfaces/controlpanel.py b/Products/CMFPlone/interfaces/controlpanel.py\nindex 88a5496a6b..729858a84a 100644\n--- a/Products/CMFPlone/interfaces/controlpanel.py\n+++ b/Products/CMFPlone/interfaces/controlpanel.py\n@@ -246,6 +246,7 @@ class IFilterSchema(Interface):\n             u\'head\',\n             u\'header\',\n             u\'hgroup\',\n+            u\'hr\',\n             u\'html\',\n             u\'i\',\n             u\'iframe\',\n@@ -297,7 +298,7 @@ class IFilterSchema(Interface):\n     custom_attributes = schema.List(\n         title=_(u\'Custom attributes\'),\n         description=_(u\'These attributes are additionally allowed.\'),\n-        default=[],\n+        default=[u\'style\'],\n         value_type=schema.TextLine(),\n         missing_value=[],\n         required=False)\ndiff --git a/Products/CMFPlone/resources/browser/styles.py b/Products/CMFPlone/resources/browser/styles.py\nindex 2c34ceed0e..7e4c9e815a 100644\n--- a/Products/CMFPlone/resources/browser/styles.py\n+++ b/Products/CMFPlone/resources/browser/styles.py\n@@ -1,9 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.app.layout.viewlets.common import ViewletBase\n+from plone.app.theming.interfaces import IThemeSettings\n+from plone.registry.interfaces import IRegistry\n from Products.CMFPlone.resources.browser.cook import cookWhenChangingSettings\n from Products.CMFPlone.resources.browser.resource import ResourceBase\n from Products.CMFPlone.utils import get_top_request\n from six.moves.urllib import parse\n+from zope.component import getUtility\n \n \n class StylesBase(ResourceBase):\n@@ -81,6 +84,19 @@ def get_data(self, bundle, result):\n                     \'src\': css_location\n                 })\n \n+    @property\n+    def _theme_settings(self):\n+        registry = getUtility(IRegistry)\n+        return registry.forInterface(IThemeSettings, False)\n+\n+    @property\n+    def custom_css(self):\n+        return self._theme_settings.custom_css\n+\n+    @property\n+    def custom_css_timestamp(self):\n+        return self._theme_settings.custom_css_timestamp\n+\n     def styles(self):\n         """\n         Get all the styles\n@@ -143,6 +159,19 @@ def styles(self):\n                     \'bundle\': \'diazo\'}\n \n             result.append(data)\n+\n+        # custom.css\n+        if self.custom_css:\n+            custom_css = {\n+                \'rel\': \'stylesheet\',\n+                \'conditionalcomment\': \'\',\n+                \'src\': "{0}/custom.css?timestamp={1}".format(\n+                    self.site_url,\n+                    self.custom_css_timestamp,\n+                ),\n+                \'bundle\': \'custom-css\'\n+            }\n+            result.append(custom_css)\n         return result\n \n \ndiff --git a/Products/CMFPlone/skins/plone_prefs/prefs_error_log_setProperties.py b/Products/CMFPlone/skins/plone_prefs/prefs_error_log_setProperties.py\nindex ab5cbf4ac4..b321accd8e 100644\n--- a/Products/CMFPlone/skins/plone_prefs/prefs_error_log_setProperties.py\n+++ b/Products/CMFPlone/skins/plone_prefs/prefs_error_log_setProperties.py\n@@ -8,9 +8,11 @@\n ##title=\n \n from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.utils import safe_nativestring\n \n request = context.REQUEST\n \n+ignored_exceptions = map(safe_nativestring, ignored_exceptions)\n context.error_log.setProperties(keep_entries, copy_to_zlog, ignored_exceptions)\n context.plone_utils.addPortalMessage(_(u\'Changes made.\'))\n \ndiff --git a/Products/CMFPlone/tests/robot/test_linkintegrity.robot b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\nindex 4450d31070..348211668b 100644\n--- a/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n+++ b/Products/CMFPlone/tests/robot/test_linkintegrity.robot\n@@ -143,5 +143,5 @@ remove link to page\n   Input text  css=.mce-content-body  foo\n   Execute Javascript    function selectElementContents(el) {var range = document.createRange(); range.selectNodeContents(el); var sel = window.getSelection(); sel.removeAllRanges(); sel.addRange(range);} var el = document.getElementById("tinymce"); selectElementContents(el);\n   UnSelect Frame\n-  Click Button  css=div[aria-label="Remove link(s)"] button\n+  Click Button  css=div[aria-label="Remove link"] button\n   Click Button  css=#form-buttons-save\ndiff --git a/news/2482.bugfix b/news/2482.bugfix\nnew file mode 100644\nindex 0000000000..f207ddeee7\n--- /dev/null\n+++ b/news/2482.bugfix\n@@ -0,0 +1,2 @@\n+Update HTMLFilter settings to enable TinyMCE styling features. See #2329, #2482, #2535\n+[petschki]\ndiff --git a/news/3086.feature b/news/3086.feature\nnew file mode 100644\nindex 0000000000..e3668f60b6\n--- /dev/null\n+++ b/news/3086.feature\n@@ -0,0 +1,3 @@\n+Insert virtual custom.css bundle into the header after diazo bundle.\n+Only add this when custom css is set in the theming control panel.\n+[MrTango]\ndiff --git a/news/3105.bugfix b/news/3105.bugfix\nnew file mode 100644\nindex 0000000000..87eb6e03f4\n--- /dev/null\n+++ b/news/3105.bugfix\n@@ -0,0 +1,2 @@\n+Bugfix for #3103\n+[petschki]\ndiff --git a/news/3115.bugfix b/news/3115.bugfix\nnew file mode 100644\nindex 0000000000..db971854f2\n--- /dev/null\n+++ b/news/3115.bugfix\n@@ -0,0 +1 @@\n+Fixed saving ignored exception types in Python 3.  [maurits]\ndiff --git a/news/721.bugfix b/news/721.bugfix\nnew file mode 100644\nindex 0000000000..d6b094302b\n--- /dev/null\n+++ b/news/721.bugfix\n@@ -0,0 +1,2 @@\n+Change control panel item sorting and sort them by title\n+[erral]\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-06-28T00:15:31+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/Products.CMFPlone/commit/733a99a9dc2224787c0ae4e025edf85017696410

Merge pull request #3097 from plone/fredvd-3096-bundle-jscompilation

Catch more errors in generating scripts listing when bundle resources…

Files changed:
A news/3096.bugfix
M Products/CMFPlone/resources/browser/combine.py
M Products/CMFPlone/resources/bundle.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/combine.py b/Products/CMFPlone/resources/browser/combine.py\nindex c6ecd84c72..aa410eb3c7 100644\n--- a/Products/CMFPlone/resources/browser/combine.py\n+++ b/Products/CMFPlone/resources/browser/combine.py\n@@ -49,7 +49,7 @@ def get_resource(context, path):\n \n     try:\n         resource = context.unrestrictedTraverse(path)\n-    except NotFound:\n+    except (NotFound, AttributeError):\n         logger.warning(u\'Could not find resource {0}. You may have to create it first.\'.format(path))  # noqa\n         return\n \ndiff --git a/Products/CMFPlone/resources/bundle.py b/Products/CMFPlone/resources/bundle.py\nindex 3aa62475b5..9515b20f1c 100644\n--- a/Products/CMFPlone/resources/bundle.py\n+++ b/Products/CMFPlone/resources/bundle.py\n@@ -34,7 +34,7 @@ def _real_path(self, ctx):\n             resource_path = self.data.csscompilation\n         try:\n             resource = getSite().restrictedTraverse(resource_path)\n-        except NotFound:\n+        except (NotFound, KeyError):\n             return None, None\n         if resource.__module__ == \'Products.Five.metaclass\':\n             try:\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex c13c0a7973..21e7c707f5 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -172,6 +172,30 @@ def test_cooking_missing(self):\n         )\n         self.assertIn(b\'Could not find resource\', resp.getBody())\n \n+    def test_cooking_missing_browserresource(self):\n+        registry = getUtility(IRegistry)\n+        registry[\'plone.resources.development\'] = True\n+        bundles = registry.collectionOfInterface(IBundleRegistry,\n+                                                 prefix="plone.bundles")\n+        bundle = bundles.add(\'barbar\')\n+        bundle.jscompilation = \'++resource++notfound/barbar-compiled.js\'\n+        bundle.csscompilation = \'++resource++notfound/barbar-compiled.css\'\n+        bundle.compile = False\n+        bundle.merge_with = \'default\'\n+\n+        bundle = Bundle(bundle)\n+\n+        # cookWhenChangingSettings(self.portal, bundle)\n+        scripts = ScriptsView(\n+            self.layer[\'portal\'],\n+            self.layer[\'request\'],\n+            None\n+        )\n+        scripts.update()\n+        results = scripts.scripts()\n+        # at least have jquery.min.js, config.js, require.js, etc.\n+        self.assertTrue(len(results)>2)\n+\n     def test_error(self):\n         registry = getUtility(IRegistry)\n         bundles = registry.collectionOfInterface(IBundleRegistry,\ndiff --git a/news/3096.bugfix b/news/3096.bugfix\nnew file mode 100644\nindex 0000000000..6426c11170\n--- /dev/null\n+++ b/news/3096.bugfix\n@@ -0,0 +1,4 @@\n+Make the resource registry scripts output more robust when a bundle resource is missing. This prevents\n+breaking your whole Plone site and access to the resource registry control panel after inserting\n+one missing resource. \n+[fredvd]\n\\ No newline at end of file\n'

