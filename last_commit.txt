Repository: plone.app.z3cform


Branch: refs/heads/3.2.x
Date: 2021-10-18T15:38:46+02:00
Author: Antoine Duchêne (duchenean) <antoine.duchene@imio.be>
Commit: https://github.com/plone/plone.app.z3cform/commit/2e52c1571a1a60e9f7a32cf4239453e0f7ea0c4d

Update buildout

Use plone.app.textfield branch

Files changed:
A requirements.txt
M .gitignore
M buildout.cfg

b'diff --git a/.gitignore b/.gitignore\nindex abbc9b1..5bdc3fe 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -12,3 +12,4 @@ dist\n /lib*\n .*.swp\n pip-selfcheck.json\n+pyvenv.cfg\ndiff --git a/buildout.cfg b/buildout.cfg\nindex 92412b5..94bbeb6 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,7 +1,14 @@\n [buildout]\n-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.1.x.cfg\n+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n+extensions = mr.developer\n package-name = plone.app.z3cform\n package-extras = [tests]\n+auto-checkout = plone.app.textfield\n+sources-dir = devel\n \n [versions]\n plone.app.z3cform =\n+zc.buildout = 3.0.0b3\n+\n+[sources]\n+plone.app.textfield = git git@github.com:gotcha/plone.app.textfield.git branch=ckeditor_1.2\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..eed285a\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1 @@\n+zc.buildout==3.0.0b3\n'

Repository: plone.app.z3cform


Branch: refs/heads/3.2.x
Date: 2021-10-18T15:59:25+02:00
Author: Antoine Duchêne (duchenean) <antoine.duchene@imio.be>
Commit: https://github.com/plone/plone.app.z3cform/commit/77996f4eeb69d2d0a3e6d54893fd6b890fa9eb61

Enable multiple wysiwyg editors

Use default editor registry setting

Files changed:
A news/multiple_editors.feature
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/tests/example.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/tests/testing.zcml
M plone/app/z3cform/widget.py

b'diff --git a/news/multiple_editors.feature b/news/multiple_editors.feature\nnew file mode 100644\nindex 0000000..c766dea\n--- /dev/null\n+++ b/news/multiple_editors.feature\n@@ -0,0 +1 @@\n+Enable multiple wysiwyg editors (use default editor registry setting) [duchenean, gotcha]\n\\ No newline at end of file\ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 7e2d547..f7f92fb 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -234,4 +234,10 @@\n     factory=".factories.Zope2FileUploadStorable"\n   />\n \n+  <utility\n+       component=".widget.tinymce_richtextwidget_render"\n+       provides=".interfaces.IRichTextWidgetInputModeRenderer"\n+       name="tinymce"\n+       />\n+\n </configure>\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex b4e52d9..07c9ad9 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -68,3 +68,7 @@ class ILinkWidget(ITextWidget):\n \n class ISingleCheckBoxBoolWidget(ISingleCheckBoxWidget):\n     """Marker interface for the SingleCheckboxBoolWidget."""\n+\n+\n+class IRichTextWidgetInputModeRenderer(Interface):\n+    """Marker interface to render multiple wysiwyg editors"""\ndiff --git a/plone/app/z3cform/tests/example.py b/plone/app/z3cform/tests/example.py\nindex 3365f40..325ed4b 100644\n--- a/plone/app/z3cform/tests/example.py\n+++ b/plone/app/z3cform/tests/example.py\n@@ -84,3 +84,7 @@ def handleApply(self, action):\n \n class MyMultiFormWrapper(FormWrapper):\n     form = MyMultiForm\n+\n+\n+def dummy_richtextwidget_render(widget):\n+    return "<p>dummy</p>"\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 8591543..35f97e1 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1671,6 +1671,30 @@ def test_dx_tinymcewidget_multiple_mimetypes_edit(self):\n             )\n             self.assertTrue(\'pat-tinymce\' not in rendered)\n \n+    def test_use_default_editor_value(self):\n+        """ Use dummy utility registered in testing.zcml """\n+        if IMarkupSchema:\n+            # if not, don\'t run this test\n+            self._set_mimetypes(allowed=(\'text/html\',))\n+            registry = getUtility(IRegistry)\n+            from Products.CMFPlone.interfaces import IEditingSchema\n+            proxy = registry.forInterface(IEditingSchema, check=False,\n+                                            prefix=\'plone\')\n+            proxy.available_editors = [u\'dummy\', u\'TinyMCE\']\n+            proxy.default_editor = u\'dummy\'\n+            from plone.app.z3cform.widget import RichTextWidget\n+            widget = FieldWidget(self.field, RichTextWidget(self.request))\n+            widget.context = self.portal\n+            rendered = widget.render()\n+            self.assertTrue(\'<p>dummy</p>\' in rendered)\n+\n+            proxy.default_editor = u\'TinyMCE\'\n+            from plone.app.z3cform.widget import RichTextWidget\n+            widget = FieldWidget(self.field, RichTextWidget(self.request))\n+            widget.context = self.portal\n+            rendered = widget.render()\n+            self.assertTrue(\'pat-tinymce\' in rendered)\n+\n \n class LinkWidgetIntegrationTests(unittest.TestCase):\n \ndiff --git a/plone/app/z3cform/tests/testing.zcml b/plone/app/z3cform/tests/testing.zcml\nindex 0a630ef..22c27be 100644\n--- a/plone/app/z3cform/tests/testing.zcml\n+++ b/plone/app/z3cform/tests/testing.zcml\n@@ -22,4 +22,10 @@\n         class=".example.MyMultiFormWrapper"\n         permission="zope.Public" />\n \n+    <utility\n+       component=".example.dummy_richtextwidget_render"\n+       provides="..interfaces.IRichTextWidgetInputModeRenderer"\n+       name="dummy"\n+       />\n+\n </configure>\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 18d1bdd..bfda74f 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -30,13 +30,13 @@\n from plone.app.z3cform.interfaces import IQueryStringWidget\n from plone.app.z3cform.interfaces import IRelatedItemsWidget\n from plone.app.z3cform.interfaces import IRichTextWidget\n+from plone.app.z3cform.interfaces import IRichTextWidgetInputModeRenderer\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n from plone.app.z3cform.utils import call_callables\n from plone.app.z3cform.utils import closest_content\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IEditingSchema\n from Products.CMFPlone.utils import safe_unicode\n from six.moves import UserDict\n from z3c.form import interfaces as form_ifaces\n@@ -706,23 +706,7 @@ def pattern(self):\n         """dynamically grab the actual pattern name so it will\n            work with custom visual editors"""\n         if self._pattern is None:\n-            registry = getUtility(IRegistry)\n-            try:\n-                records = registry.forInterface(IEditingSchema, check=False,\n-                                                prefix=\'plone\')\n-                default = records.default_editor.lower()\n-                available = records.available_editors\n-            except AttributeError:\n-                default = \'tinymce\'\n-                available = [\'TinyMCE\']\n-            tool = getToolByName(self.wrapped_context(), \'portal_membership\')\n-            member = tool.getAuthenticatedMember()\n-            editor = member.getProperty(\'wysiwyg_editor\')\n-            if editor in available:\n-                self._pattern = editor.lower()\n-            elif editor in (\'None\', None):\n-                self._pattern = \'plaintexteditor\'\n-            return default\n+            self._pattern = self.getWysiwygEditor()\n         return self._pattern\n \n     def _base_args(self):\n@@ -752,6 +736,22 @@ def render(self):\n         :rtype: string\n         """\n         if self.mode != \'display\':\n+            renderer = queryUtility(\n+                IRichTextWidgetInputModeRenderer,\n+                name=self.getWysiwygEditor(),\n+                default=tinymce_richtextwidget_render\n+            )\n+            return renderer(self)\n+\n+        if not self.value:\n+            return \'\'\n+\n+        if isinstance(self.value, RichTextValue):\n+            return self.value.output_relative_to(self.context)\n+\n+        return super(RichTextWidget, self).render()\n+\n+    def render_input_mode(self):\n             # MODE "INPUT"\n             rendered = \'\'\n             allowed_mime_types = self.allowedMimeTypes()\n@@ -814,13 +814,9 @@ def render(self):\n                 )\n             return rendered\n \n-        if not self.value:\n-            return \'\'\n-\n-        if isinstance(self.value, RichTextValue):\n-            return self.value.output_relative_to(self.context)\n \n-        return super(RichTextWidget, self).render()\n+def tinymce_richtextwidget_render(widget):\n+    return RichTextWidget.render_input_mode(widget)\n \n \n @implementer_only(ILinkWidget)\n'

Repository: plone.app.z3cform


Branch: refs/heads/3.2.x
Date: 2021-11-17T16:47:41+01:00
Author: Antoine Duchêne (duchenean) <antoine.duchene@imio.be>
Commit: https://github.com/plone/plone.app.z3cform/commit/561b4715886e29510a45e43c0dae296a2b210a67

Use correct branch for plone.app.textfield in buildout

Files changed:
M buildout.cfg

b'diff --git a/buildout.cfg b/buildout.cfg\nindex 94bbeb6..72a9cb8 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -11,4 +11,4 @@ plone.app.z3cform =\n zc.buildout = 3.0.0b3\n \n [sources]\n-plone.app.textfield = git git@github.com:gotcha/plone.app.textfield.git branch=ckeditor_1.2\n+plone.app.textfield = git git@github.com:gotcha/plone.app.textfield.git branch=ckeditor\n'

Repository: plone.app.z3cform


Branch: refs/heads/3.2.x
Date: 2021-11-26T00:06:31+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.z3cform/commit/f7a80145805d1009e4867a7d33e3b5b48bc2a879

Problem: bootstrap-buildout is not maintained anymore

Solution: delete it

Files changed:
D bootstrap-buildout.py

b'diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap-buildout.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\n'

Repository: plone.app.z3cform


Branch: refs/heads/3.2.x
Date: 2021-11-26T00:06:47+01:00
Author: Godefroid Chapelle (gotcha) <gotcha@bubblenet.be>
Commit: https://github.com/plone/plone.app.z3cform/commit/c403ace34311e152bc4814becbe77e8e368c67d1

plone.app.textfield 1.3.6 has been released

Files changed:
M buildout.cfg
M requirements.txt
M setup.py

b"diff --git a/buildout.cfg b/buildout.cfg\nindex 72a9cb8..c16b1dc 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,14 +1,9 @@\n [buildout]\n extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n-extensions = mr.developer\n package-name = plone.app.z3cform\n package-extras = [tests]\n-auto-checkout = plone.app.textfield\n-sources-dir = devel\n \n [versions]\n plone.app.z3cform =\n-zc.buildout = 3.0.0b3\n-\n-[sources]\n-plone.app.textfield = git git@github.com:gotcha/plone.app.textfield.git branch=ckeditor\n+zc.buildout =\n+plone.app.textfield = 1.3.6\ndiff --git a/requirements.txt b/requirements.txt\nindex eed285a..2cf3ea6 100644\n--- a/requirements.txt\n+++ b/requirements.txt\n@@ -1 +1 @@\n-zc.buildout==3.0.0b3\n+zc.buildout==3.0.0b4\ndiff --git a/setup.py b/setup.py\nindex 650556d..37a2537 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,7 +51,7 @@ def read(*rnames):\n     zip_safe=False,\n     install_requires=[\n         'Acquisition',\n-        'plone.app.textfield',\n+        'plone.app.textfield>=1.3.6',\n         'plone.app.widgets>=2.4.2.dev0',\n         'plone.protect',\n         'plone.z3cform>=0.5.11dev',\n"

Repository: plone.app.z3cform


Branch: refs/heads/3.2.x
Date: 2021-11-26T09:29:29+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.z3cform/commit/07c3bcc621ec08bdca976ccb48a87beb53abde13

Merge pull request #132 from gotcha/ckeditor_3.2

Enable multiple editors - Plone 5.2

Files changed:
A news/multiple_editors.feature
A requirements.txt
M .gitignore
M buildout.cfg
M plone/app/z3cform/configure.zcml
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/tests/example.py
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/tests/testing.zcml
M plone/app/z3cform/widget.py
M setup.py
D bootstrap-buildout.py

b'diff --git a/.gitignore b/.gitignore\nindex abbc9b1..5bdc3fe 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -12,3 +12,4 @@ dist\n /lib*\n .*.swp\n pip-selfcheck.json\n+pyvenv.cfg\ndiff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\ndeleted file mode 100644\nindex a459921..0000000\n--- a/bootstrap-buildout.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --version, the "\n-                        "bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\nindex 92412b5..c16b1dc 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,7 +1,9 @@\n [buildout]\n-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.1.x.cfg\n+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n package-name = plone.app.z3cform\n package-extras = [tests]\n \n [versions]\n plone.app.z3cform =\n+zc.buildout =\n+plone.app.textfield = 1.3.6\ndiff --git a/news/multiple_editors.feature b/news/multiple_editors.feature\nnew file mode 100644\nindex 0000000..c766dea\n--- /dev/null\n+++ b/news/multiple_editors.feature\n@@ -0,0 +1 @@\n+Enable multiple wysiwyg editors (use default editor registry setting) [duchenean, gotcha]\n\\ No newline at end of file\ndiff --git a/plone/app/z3cform/configure.zcml b/plone/app/z3cform/configure.zcml\nindex 7e2d547..f7f92fb 100644\n--- a/plone/app/z3cform/configure.zcml\n+++ b/plone/app/z3cform/configure.zcml\n@@ -234,4 +234,10 @@\n     factory=".factories.Zope2FileUploadStorable"\n   />\n \n+  <utility\n+       component=".widget.tinymce_richtextwidget_render"\n+       provides=".interfaces.IRichTextWidgetInputModeRenderer"\n+       name="tinymce"\n+       />\n+\n </configure>\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex b4e52d9..07c9ad9 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -68,3 +68,7 @@ class ILinkWidget(ITextWidget):\n \n class ISingleCheckBoxBoolWidget(ISingleCheckBoxWidget):\n     """Marker interface for the SingleCheckboxBoolWidget."""\n+\n+\n+class IRichTextWidgetInputModeRenderer(Interface):\n+    """Marker interface to render multiple wysiwyg editors"""\ndiff --git a/plone/app/z3cform/tests/example.py b/plone/app/z3cform/tests/example.py\nindex 3365f40..325ed4b 100644\n--- a/plone/app/z3cform/tests/example.py\n+++ b/plone/app/z3cform/tests/example.py\n@@ -84,3 +84,7 @@ def handleApply(self, action):\n \n class MyMultiFormWrapper(FormWrapper):\n     form = MyMultiForm\n+\n+\n+def dummy_richtextwidget_render(widget):\n+    return "<p>dummy</p>"\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 8591543..35f97e1 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -1671,6 +1671,30 @@ def test_dx_tinymcewidget_multiple_mimetypes_edit(self):\n             )\n             self.assertTrue(\'pat-tinymce\' not in rendered)\n \n+    def test_use_default_editor_value(self):\n+        """ Use dummy utility registered in testing.zcml """\n+        if IMarkupSchema:\n+            # if not, don\'t run this test\n+            self._set_mimetypes(allowed=(\'text/html\',))\n+            registry = getUtility(IRegistry)\n+            from Products.CMFPlone.interfaces import IEditingSchema\n+            proxy = registry.forInterface(IEditingSchema, check=False,\n+                                            prefix=\'plone\')\n+            proxy.available_editors = [u\'dummy\', u\'TinyMCE\']\n+            proxy.default_editor = u\'dummy\'\n+            from plone.app.z3cform.widget import RichTextWidget\n+            widget = FieldWidget(self.field, RichTextWidget(self.request))\n+            widget.context = self.portal\n+            rendered = widget.render()\n+            self.assertTrue(\'<p>dummy</p>\' in rendered)\n+\n+            proxy.default_editor = u\'TinyMCE\'\n+            from plone.app.z3cform.widget import RichTextWidget\n+            widget = FieldWidget(self.field, RichTextWidget(self.request))\n+            widget.context = self.portal\n+            rendered = widget.render()\n+            self.assertTrue(\'pat-tinymce\' in rendered)\n+\n \n class LinkWidgetIntegrationTests(unittest.TestCase):\n \ndiff --git a/plone/app/z3cform/tests/testing.zcml b/plone/app/z3cform/tests/testing.zcml\nindex 0a630ef..22c27be 100644\n--- a/plone/app/z3cform/tests/testing.zcml\n+++ b/plone/app/z3cform/tests/testing.zcml\n@@ -22,4 +22,10 @@\n         class=".example.MyMultiFormWrapper"\n         permission="zope.Public" />\n \n+    <utility\n+       component=".example.dummy_richtextwidget_render"\n+       provides="..interfaces.IRichTextWidgetInputModeRenderer"\n+       name="dummy"\n+       />\n+\n </configure>\ndiff --git a/plone/app/z3cform/widget.py b/plone/app/z3cform/widget.py\nindex 18d1bdd..bfda74f 100644\n--- a/plone/app/z3cform/widget.py\n+++ b/plone/app/z3cform/widget.py\n@@ -30,13 +30,13 @@\n from plone.app.z3cform.interfaces import IQueryStringWidget\n from plone.app.z3cform.interfaces import IRelatedItemsWidget\n from plone.app.z3cform.interfaces import IRichTextWidget\n+from plone.app.z3cform.interfaces import IRichTextWidgetInputModeRenderer\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n from plone.app.z3cform.utils import call_callables\n from plone.app.z3cform.utils import closest_content\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces import IEditingSchema\n from Products.CMFPlone.utils import safe_unicode\n from six.moves import UserDict\n from z3c.form import interfaces as form_ifaces\n@@ -706,23 +706,7 @@ def pattern(self):\n         """dynamically grab the actual pattern name so it will\n            work with custom visual editors"""\n         if self._pattern is None:\n-            registry = getUtility(IRegistry)\n-            try:\n-                records = registry.forInterface(IEditingSchema, check=False,\n-                                                prefix=\'plone\')\n-                default = records.default_editor.lower()\n-                available = records.available_editors\n-            except AttributeError:\n-                default = \'tinymce\'\n-                available = [\'TinyMCE\']\n-            tool = getToolByName(self.wrapped_context(), \'portal_membership\')\n-            member = tool.getAuthenticatedMember()\n-            editor = member.getProperty(\'wysiwyg_editor\')\n-            if editor in available:\n-                self._pattern = editor.lower()\n-            elif editor in (\'None\', None):\n-                self._pattern = \'plaintexteditor\'\n-            return default\n+            self._pattern = self.getWysiwygEditor()\n         return self._pattern\n \n     def _base_args(self):\n@@ -752,6 +736,22 @@ def render(self):\n         :rtype: string\n         """\n         if self.mode != \'display\':\n+            renderer = queryUtility(\n+                IRichTextWidgetInputModeRenderer,\n+                name=self.getWysiwygEditor(),\n+                default=tinymce_richtextwidget_render\n+            )\n+            return renderer(self)\n+\n+        if not self.value:\n+            return \'\'\n+\n+        if isinstance(self.value, RichTextValue):\n+            return self.value.output_relative_to(self.context)\n+\n+        return super(RichTextWidget, self).render()\n+\n+    def render_input_mode(self):\n             # MODE "INPUT"\n             rendered = \'\'\n             allowed_mime_types = self.allowedMimeTypes()\n@@ -814,13 +814,9 @@ def render(self):\n                 )\n             return rendered\n \n-        if not self.value:\n-            return \'\'\n-\n-        if isinstance(self.value, RichTextValue):\n-            return self.value.output_relative_to(self.context)\n \n-        return super(RichTextWidget, self).render()\n+def tinymce_richtextwidget_render(widget):\n+    return RichTextWidget.render_input_mode(widget)\n \n \n @implementer_only(ILinkWidget)\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..2cf3ea6\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1 @@\n+zc.buildout==3.0.0b4\ndiff --git a/setup.py b/setup.py\nindex 650556d..37a2537 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -51,7 +51,7 @@ def read(*rnames):\n     zip_safe=False,\n     install_requires=[\n         \'Acquisition\',\n-        \'plone.app.textfield\',\n+        \'plone.app.textfield>=1.3.6\',\n         \'plone.app.widgets>=2.4.2.dev0\',\n         \'plone.protect\',\n         \'plone.z3cform>=0.5.11dev\',\n'

