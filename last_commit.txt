Repository: plone.volto


Branch: refs/heads/main
Date: 2023-05-19T16:50:19+02:00
Author: Margarida Paixao (margaridasp) <margarida.paixao@freitag.de>
Commit: https://github.com/plone/plone.volto/commit/bfab77436734f59936ad2f435c12305c6283b206

Add block_types index

Files changed:
A src/plone/volto/tests/test_indexers.py
M src/plone/volto/configure.zcml
M src/plone/volto/indexers.py
M src/plone/volto/profiles/default/catalog.xml

b'diff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex 84dec901..669e9b7f 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -53,6 +53,10 @@\n       factory=".indexers.image_field_indexer"\n       name="image_field"\n       />\n+  <adapter\n+      factory=".indexers.block_types_indexer"\n+      name="block_types"\n+      />\n \n   <utility\n       factory=".summary.JSONSummarySerializerMetadata"\ndiff --git a/src/plone/volto/indexers.py b/src/plone/volto/indexers.py\nindex b8e92ff3..cc877de8 100644\n--- a/src/plone/volto/indexers.py\n+++ b/src/plone/volto/indexers.py\n@@ -33,3 +33,11 @@ def image_field_indexer(obj):\n     elif getattr(base_obj, "image", False):\n         image_field = "image"\n     return image_field\n+\n+\n+@indexer(IDexterityContent)\n+def block_types_indexer(obj):\n+    """Indexer for block_types."""\n+    # TODO(margaridasp): crawl to get nested blocks\n+    block_types = [block.get("@type") for block in obj.blocks.values()]\n+    return set(block_types)\ndiff --git a/src/plone/volto/profiles/default/catalog.xml b/src/plone/volto/profiles/default/catalog.xml\nindex 4c0e0094..d8289451 100644\n--- a/src/plone/volto/profiles/default/catalog.xml\n+++ b/src/plone/volto/profiles/default/catalog.xml\n@@ -4,4 +4,9 @@\n   <column value="head_title" />\n   <column value="hasPreviewImage" />\n   <column value="image_field" />\n+  <index meta_type="KeywordIndex"\n+         name="block_types"\n+  >\n+    <indexed_attr value="block_types" />\n+  </index>\n </object>\ndiff --git a/src/plone/volto/tests/test_indexers.py b/src/plone/volto/tests/test_indexers.py\nnew file mode 100644\nindex 00000000..78010ad5\n--- /dev/null\n+++ b/src/plone/volto/tests/test_indexers.py\n@@ -0,0 +1,69 @@\n+# -*- coding: utf-8 -*-\n+from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+from unittest import TestCase\n+\n+\n+class TestBlockTypesIndexer(TestCase):\n+    layer = PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Document", id="doc1", title="Document with Blocks"\n+            )\n+        ]\n+        self.catalog = self.portal.portal_catalog\n+\n+    def test_block_types_are_indexed(self):\n+        """Ensure that when blocks are updated, the block_types index is updated."""\n+        blocks = {\n+            "1": {"@type": "image", "url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="image")\n+        self.assertEqual(len(brains), 1)\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 1)\n+\n+    def test_mixed_blocks(self):\n+        """Check that when some blocks have type and others don\'t, it doesn\'t fail."""\n+        blocks = {\n+            "1": {"url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="image")\n+        self.assertEqual(len(brains), 0)\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 1)\n+\n+    def test_removed_blocks(self):\n+        """Ensure that when blocks are removed, the block_types index is updated."""\n+        blocks = {\n+            "1": {"@type": "image", "url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        self.portal.doc1.blocks = {}\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 0)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 0)\n+\n+    def test_nested_blocks(self):\n+        """Ensure that nested block types are also included on block_types."""\n+        # TODO(margaridasp): first implement the functionality on the indexer\n+        pass\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-05-19T16:50:25+02:00
Author: Margarida Paixao (margaridasp) <margarida.paixao@freitag.de>
Commit: https://github.com/plone/plone.volto/commit/70ec49900bcf828627d1b73eb902ab653a90bff9

Upgrade steps: add index and reindex all block objects

Files changed:
M src/plone/volto/profiles/default/metadata.xml
M src/plone/volto/upgrades.py
M src/plone/volto/upgrades.zcml

b'diff --git a/src/plone/volto/profiles/default/metadata.xml b/src/plone/volto/profiles/default/metadata.xml\nindex f746bae..2fe0e76 100644\n--- a/src/plone/volto/profiles/default/metadata.xml\n+++ b/src/plone/volto/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <?xml version="1.0" encoding="UTF-8"?>\n <metadata>\n-  <version>1016</version>\n+  <version>1018</version>\n   <dependencies>\n     <dependency>profile-plone.restapi:blocks</dependency>\n   </dependencies>\ndiff --git a/src/plone/volto/upgrades.py b/src/plone/volto/upgrades.py\nindex ba6ea09..a22c4cf 100644\n--- a/src/plone/volto/upgrades.py\n+++ b/src/plone/volto/upgrades.py\n@@ -9,8 +9,11 @@\n from plone.volto import logger\n from plone.volto.setuphandlers import NO_RICHTEXT_BEHAVIOR_CONTENT_TYPES\n from plone.volto.setuphandlers import remove_behavior\n+from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n \n+import transaction\n+\n \n MIGRATION = {\n     "Document": content.FolderishDocument,\n@@ -123,3 +126,27 @@ def add_control_panel_classic_icon(context):\n         field.TextLine(title="Plone Icon Volto Control Panel"),\n     )\n     registry["plone.icon.volto-settings"] = "++plone++plone.volto/volto.svg"\n+\n+\n+def add_new_catalog_indexes(context):\n+    catalog = getToolByName(context, "portal_catalog")\n+    indexes = catalog.indexes()\n+\n+    wanted = (("block_types", "KeywordIndex"),)\n+    for name, meta_type in wanted:\n+        if name not in indexes:\n+            catalog.addIndex(name, meta_type)\n+            logger.info("Added %s for field %s.", meta_type, name)\n+\n+\n+def reindex_block_objects(context):\n+    catalog = getToolByName(context, "portal_catalog")\n+    brains = catalog(object_provides="plone.restapi.behaviors.IBlocks")\n+    total = len(brains)\n+    for index, brain in enumerate(brains):\n+        obj = brain.getObject()\n+        obj.reindexObject(idxs=["block_types"], update_metadata=0)\n+        logger.info("Reindexing object %s.", brain.getPath())\n+        if index % 250 == 0:\n+            logger.info("Reindexed %i/%i objects so far", index, total)\n+            transaction.commit()\ndiff --git a/src/plone/volto/upgrades.zcml b/src/plone/volto/upgrades.zcml\nindex 99f92d9..7d2e712 100644\n--- a/src/plone/volto/upgrades.zcml\n+++ b/src/plone/volto/upgrades.zcml\n@@ -75,4 +75,19 @@\n         />\n   </genericsetup:upgradeSteps>\n \n+  <genericsetup:upgradeSteps\n+      profile="plone.volto:default"\n+      source="1017"\n+      destination="1018"\n+      >\n+    <genericsetup:upgradeStep\n+        title="Update catalog indexes"\n+        handler=".upgrades.add_new_catalog_indexes"\n+        />\n+    <genericsetup:upgradeStep\n+        title="Reindex all block objects to update the block_types index"\n+        handler=".upgrades.reindex_block_objects"\n+        />\n+  </genericsetup:upgradeSteps>\n+\n </configure>\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-05-19T16:50:25+02:00
Author: Margarida Paixao (margaridasp) <margarida.paixao@freitag.de>
Commit: https://github.com/plone/plone.volto/commit/41b0285149ef3d1a792f51c141d9a75311a0a34b

Add news entry

Files changed:
A news/4778.feature

b'diff --git a/news/4778.feature b/news/4778.feature\nnew file mode 100644\nindex 00000000..f614bc31\n--- /dev/null\n+++ b/news/4778.feature\n@@ -0,0 +1,2 @@\n+Add block_types index to zcatalog.\n+[margaridasp]\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-06-28T22:47:43-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/537ac1af1b4ef9350ad031c63065240c03fa07e3

find nested blocks

Files changed:
M news/4778.feature
M setup.py
M src/plone/volto/indexers.py
M src/plone/volto/profiles/default/metadata.xml
M src/plone/volto/tests/test_indexers.py
M src/plone/volto/upgrades.py
M src/plone/volto/upgrades.zcml

b'diff --git a/news/4778.feature b/news/4778.feature\nindex f614bc3..626d466 100644\n--- a/news/4778.feature\n+++ b/news/4778.feature\n@@ -1,2 +1,3 @@\n-Add block_types index to zcatalog.\n-[margaridasp]\n+Add `block_types` index to zcatalog. By default it is only added for new Plone sites.\n+To add it to an existing site, run `plone.volto.upgrades.add_block_types_index` manually.\n+[margaridasp, davisagli]\ndiff --git a/setup.py b/setup.py\nindex 25b2c9a..48a3d73 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -59,7 +59,7 @@ def readfile(name):\n         "plone.api",\n         "Products.GenericSetup",\n         "setuptools",\n-        "plone.restapi>=8.13.0",\n+        "plone.restapi>=8.40.1.dev0",\n         "plone.app.vocabularies>=4.3.0",\n         "collective.monkeypatcher",\n     ],\ndiff --git a/src/plone/volto/indexers.py b/src/plone/volto/indexers.py\nindex cc877de..8ee37aa 100644\n--- a/src/plone/volto/indexers.py\n+++ b/src/plone/volto/indexers.py\n@@ -1,6 +1,7 @@\n from Acquisition import aq_base\n from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer.decorator import indexer\n+from plone.restapi.blocks import visit_blocks\n from plone.volto.behaviors.preview import IPreview\n \n \n@@ -37,7 +38,10 @@ def image_field_indexer(obj):\n \n @indexer(IDexterityContent)\n def block_types_indexer(obj):\n-    """Indexer for block_types."""\n-    # TODO(margaridasp): crawl to get nested blocks\n-    block_types = [block.get("@type") for block in obj.blocks.values()]\n-    return set(block_types)\n+    """Indexer for all block types included in a page."""\n+    block_types = set()\n+    for block in visit_blocks(obj, obj.blocks):\n+        block_type = block.get("@type")\n+        if block_type:\n+            block_types.add(block_type)\n+    return block_types\ndiff --git a/src/plone/volto/profiles/default/metadata.xml b/src/plone/volto/profiles/default/metadata.xml\nindex 2fe0e76..f32183b 100644\n--- a/src/plone/volto/profiles/default/metadata.xml\n+++ b/src/plone/volto/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <?xml version="1.0" encoding="UTF-8"?>\n <metadata>\n-  <version>1018</version>\n+  <version>1017</version>\n   <dependencies>\n     <dependency>profile-plone.restapi:blocks</dependency>\n   </dependencies>\ndiff --git a/src/plone/volto/tests/test_indexers.py b/src/plone/volto/tests/test_indexers.py\nindex 78010ad..c004159 100644\n--- a/src/plone/volto/tests/test_indexers.py\n+++ b/src/plone/volto/tests/test_indexers.py\n@@ -64,6 +64,16 @@ def test_removed_blocks(self):\n         self.assertEqual(block_types_index.numObjects(), 0)\n \n     def test_nested_blocks(self):\n-        """Ensure that nested block types are also included on block_types."""\n-        # TODO(margaridasp): first implement the functionality on the indexer\n-        pass\n+        """Ensure that nested block types are also included in block_types."""\n+        blocks = {\n+            "1": {\n+                "@type": "gridBlock",\n+                "blocks": {\n+                    "2": {"@type": "teaser"},\n+                },\n+            },\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\ndiff --git a/src/plone/volto/upgrades.py b/src/plone/volto/upgrades.py\nindex a22c4cf..96dd269 100644\n--- a/src/plone/volto/upgrades.py\n+++ b/src/plone/volto/upgrades.py\n@@ -128,19 +128,12 @@ def add_control_panel_classic_icon(context):\n     registry["plone.icon.volto-settings"] = "++plone++plone.volto/volto.svg"\n \n \n-def add_new_catalog_indexes(context):\n+def add_block_types_index(context):\n     catalog = getToolByName(context, "portal_catalog")\n     indexes = catalog.indexes()\n-\n-    wanted = (("block_types", "KeywordIndex"),)\n-    for name, meta_type in wanted:\n-        if name not in indexes:\n-            catalog.addIndex(name, meta_type)\n-            logger.info("Added %s for field %s.", meta_type, name)\n-\n-\n-def reindex_block_objects(context):\n-    catalog = getToolByName(context, "portal_catalog")\n+    if "block_types" not in indexes:\n+        catalog.addIndex("block_types", "KeywordIndex")\n+        logger.info("Added block_types index.")\n     brains = catalog(object_provides="plone.restapi.behaviors.IBlocks")\n     total = len(brains)\n     for index, brain in enumerate(brains):\n@@ -148,5 +141,5 @@ def reindex_block_objects(context):\n         obj.reindexObject(idxs=["block_types"], update_metadata=0)\n         logger.info("Reindexing object %s.", brain.getPath())\n         if index % 250 == 0:\n-            logger.info("Reindexed %i/%i objects so far", index, total)\n+            logger.info(f"Reindexed {index}/{total} objects")\n             transaction.commit()\ndiff --git a/src/plone/volto/upgrades.zcml b/src/plone/volto/upgrades.zcml\nindex 7d2e712..99f92d9 100644\n--- a/src/plone/volto/upgrades.zcml\n+++ b/src/plone/volto/upgrades.zcml\n@@ -75,19 +75,4 @@\n         />\n   </genericsetup:upgradeSteps>\n \n-  <genericsetup:upgradeSteps\n-      profile="plone.volto:default"\n-      source="1017"\n-      destination="1018"\n-      >\n-    <genericsetup:upgradeStep\n-        title="Update catalog indexes"\n-        handler=".upgrades.add_new_catalog_indexes"\n-        />\n-    <genericsetup:upgradeStep\n-        title="Reindex all block objects to update the block_types index"\n-        handler=".upgrades.reindex_block_objects"\n-        />\n-  </genericsetup:upgradeSteps>\n-\n </configure>\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-06-28T22:48:22-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/a7e659f6327d7cbf77088f29f674b42c81e66fb7

Merge branch 'main' into add-block-types-index-zcatalog

Files changed:
M CHANGES.rst
M setup.py
M src/plone/volto/browser/migrate_to_volto.pt
M src/plone/volto/browser/migrate_to_volto.py
M src/plone/volto/tests/test_migrate_to_volto.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 846ac5a..5c0fb46 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,18 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.9 (2023-06-22)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Let the migration-form @@migrate_to_volto transform richtext to slate-blocks by default.\n+  [pbauer] (#122)\n+- Fix value of unchecked checkboxes in migrate_to_volto.\n+  [pbauer] (#124)\n+\n+\n 4.0.8 (2023-03-23)\n ------------------\n \ndiff --git a/setup.py b/setup.py\nindex 48a3d73..8e341ad 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,7 +25,7 @@ def readfile(name):\n \n setup(\n     name="plone.volto",\n-    version="4.0.9.dev0",\n+    version="4.0.10.dev0",\n     description="Volto integration add-on for Plone",\n     long_description=long_description,\n     # Get more from https://pypi.org/classifiers/\ndiff --git a/src/plone/volto/browser/migrate_to_volto.pt b/src/plone/volto/browser/migrate_to_volto.pt\nindex fe14a21..684298b 100644\n--- a/src/plone/volto/browser/migrate_to_volto.pt\n+++ b/src/plone/volto/browser/migrate_to_volto.pt\n@@ -55,6 +55,7 @@\n         </p>\n \n         <div class="form-check mb-3">\n+            <input name="migrate_folders:boolean:default" type="hidden" value="" />\n             <input\n                 class="form-check-input"\n                 type="checkbox"\n@@ -68,6 +69,7 @@\n         </div>\n \n         <div class="form-check mb-3 ms-4">\n+            <input name="migrate_default_pages:boolean:default" type="hidden" value="" />\n             <input\n                 class="form-check-input"\n                 type="checkbox"\n@@ -86,6 +88,7 @@\n         </div>\n \n         <div class="form-check mb-3">\n+            <input name="purge_richtext:boolean:default" type="hidden" value="" />\n             <input\n                 class="form-check-input"\n                 type="checkbox"\ndiff --git a/src/plone/volto/browser/migrate_to_volto.py b/src/plone/volto/browser/migrate_to_volto.py\nindex e356816..8eba43b 100644\n--- a/src/plone/volto/browser/migrate_to_volto.py\n+++ b/src/plone/volto/browser/migrate_to_volto.py\n@@ -40,8 +40,8 @@ def __call__(self):\n         self.migrate_folders = request.get("migrate_folders", True)\n         self.migrate_default_pages = request.get("migrate_default_pages", True)\n         self.purge_richtext = request.get("purge_richtext", True)\n-        # We still use draftjs at the moment\n-        self.slate = request.get("slate", False)\n+        # We can still use outdated draftjs by setting slate to False on the request\n+        self.slate = request.get("slate", True)\n \n         if not self.request.form.get("form.submitted", False):\n             return self.index()\ndiff --git a/src/plone/volto/tests/test_migrate_to_volto.py b/src/plone/volto/tests/test_migrate_to_volto.py\nindex e72af5a..0fe7fe5 100644\n--- a/src/plone/volto/tests/test_migrate_to_volto.py\n+++ b/src/plone/volto/tests/test_migrate_to_volto.py\n@@ -330,7 +330,6 @@ def test_richtext_is_migrated(self):\n \n         view = self.portal.restrictedTraverse("@@migrate_to_volto")\n         self.request.form["form.submitted"] = True\n-        self.request.form["slate"] = True\n         view()\n \n         doc = self.portal["doc"]\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-07-18T22:01:58-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/79f0122369bdf2bd042ad1dc08a78640e424b9f3

Merge branch 'main' into add-block-types-index-zcatalog

Files changed:
M CHANGES.rst
M setup.py
M src/plone/volto/profiles.zcml
M src/plone/volto/setuphandlers.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5c0fb46..b8af2ae 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,16 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.10 (2023-07-14)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Use the plone.app.multilingual conditionally so as is not an explicit dependency\n+  [@foxtrot-01] (#119)\n+\n+\n 4.0.9 (2023-06-22)\n ------------------\n \ndiff --git a/setup.py b/setup.py\nindex 8e341ad..4a3166b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,7 +25,7 @@ def readfile(name):\n \n setup(\n     name="plone.volto",\n-    version="4.0.10.dev0",\n+    version="4.0.11.dev0",\n     description="Volto integration add-on for Plone",\n     long_description=long_description,\n     # Get more from https://pypi.org/classifiers/\ndiff --git a/src/plone/volto/profiles.zcml b/src/plone/volto/profiles.zcml\nindex 60e759f..83cffdb 100644\n--- a/src/plone/volto/profiles.zcml\n+++ b/src/plone/volto/profiles.zcml\n@@ -2,6 +2,7 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     i18n_domain="plone.volto"\n     >\n \n@@ -77,6 +78,7 @@\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       directory="profiles/multilingual"\n       post_handler=".setuphandlers.post_install_multilingual"\n+      zcml:condition="installed plone.app.multilingual"\n       />\n \n   <genericsetup:registerProfile\ndiff --git a/src/plone/volto/setuphandlers.py b/src/plone/volto/setuphandlers.py\nindex 314d9d4..3aa3072 100644\n--- a/src/plone/volto/setuphandlers.py\n+++ b/src/plone/volto/setuphandlers.py\n@@ -1,8 +1,6 @@\n # -*- coding: utf-8 -*-\n from importlib import import_module\n from plone import api\n-from plone.app.multilingual.browser.setup import SetupMultilingualSite\n-from plone.app.multilingual.setuphandlers import enable_translatable_behavior\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.volto.default_homepage.default import default_home\n from plone.volto.default_homepage.demo import demo_home_page\n@@ -15,9 +13,19 @@\n \n import json\n import logging\n+import pkg_resources\n import transaction\n \n \n+try:\n+    pkg_resources.get_distribution("plone.app.multilingual")\n+    from plone.app.multilingual.browser.setup import SetupMultilingualSite\n+    from plone.app.multilingual.setuphandlers import enable_translatable_behavior\n+\n+    HAS_MULTILINGUAL = True\n+except pkg_resources.DistributionNotFound:\n+    HAS_MULTILINGUAL = False\n+\n PLONE_6 = getattr(import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False)\n \n logger = logging.getLogger("plone.volto")\n@@ -68,12 +76,13 @@ def post_install_multilingual(context):\n \n \n def enable_pam(portal):\n-    # Ensure that portal is portal\n-    portal = api.portal.get()\n-    # Setup the plone.app.multilingual data\n-    sms = SetupMultilingualSite(portal)\n-    sms.setupSite(portal)\n-    enable_translatable_behavior(portal)\n+    if HAS_MULTILINGUAL:\n+        # Ensure that portal is portal\n+        portal = api.portal.get()\n+        # Setup the plone.app.multilingual data\n+        sms = SetupMultilingualSite(portal)\n+        sms.setupSite(portal)\n+        enable_translatable_behavior(portal)\n \n \n def ensure_pam_consistency(portal):\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-07-18T22:03:02-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/d7db688419c30a8213b6d29d300a76ba9f439057

Merge pull request #121 from plone/add-block-types-index-zcatalog

Add block types index to zcatalog

Files changed:
A news/4778.feature
A src/plone/volto/tests/test_indexers.py
M setup.py
M src/plone/volto/configure.zcml
M src/plone/volto/indexers.py
M src/plone/volto/profiles/default/catalog.xml
M src/plone/volto/profiles/default/metadata.xml
M src/plone/volto/upgrades.py

b'diff --git a/news/4778.feature b/news/4778.feature\nnew file mode 100644\nindex 00000000..626d4668\n--- /dev/null\n+++ b/news/4778.feature\n@@ -0,0 +1,3 @@\n+Add `block_types` index to zcatalog. By default it is only added for new Plone sites.\n+To add it to an existing site, run `plone.volto.upgrades.add_block_types_index` manually.\n+[margaridasp, davisagli]\ndiff --git a/setup.py b/setup.py\nindex 28bb3014..4a3166b4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -59,7 +59,7 @@ def readfile(name):\n         "plone.api",\n         "Products.GenericSetup",\n         "setuptools",\n-        "plone.restapi>=8.13.0",\n+        "plone.restapi>=8.40.1.dev0",\n         "plone.app.vocabularies>=4.3.0",\n         "collective.monkeypatcher",\n     ],\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex 84dec901..669e9b7f 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -53,6 +53,10 @@\n       factory=".indexers.image_field_indexer"\n       name="image_field"\n       />\n+  <adapter\n+      factory=".indexers.block_types_indexer"\n+      name="block_types"\n+      />\n \n   <utility\n       factory=".summary.JSONSummarySerializerMetadata"\ndiff --git a/src/plone/volto/indexers.py b/src/plone/volto/indexers.py\nindex b8e92ff3..8ee37aa9 100644\n--- a/src/plone/volto/indexers.py\n+++ b/src/plone/volto/indexers.py\n@@ -1,6 +1,7 @@\n from Acquisition import aq_base\n from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer.decorator import indexer\n+from plone.restapi.blocks import visit_blocks\n from plone.volto.behaviors.preview import IPreview\n \n \n@@ -33,3 +34,14 @@ def image_field_indexer(obj):\n     elif getattr(base_obj, "image", False):\n         image_field = "image"\n     return image_field\n+\n+\n+@indexer(IDexterityContent)\n+def block_types_indexer(obj):\n+    """Indexer for all block types included in a page."""\n+    block_types = set()\n+    for block in visit_blocks(obj, obj.blocks):\n+        block_type = block.get("@type")\n+        if block_type:\n+            block_types.add(block_type)\n+    return block_types\ndiff --git a/src/plone/volto/profiles/default/catalog.xml b/src/plone/volto/profiles/default/catalog.xml\nindex 4c0e0094..d8289451 100644\n--- a/src/plone/volto/profiles/default/catalog.xml\n+++ b/src/plone/volto/profiles/default/catalog.xml\n@@ -4,4 +4,9 @@\n   <column value="head_title" />\n   <column value="hasPreviewImage" />\n   <column value="image_field" />\n+  <index meta_type="KeywordIndex"\n+         name="block_types"\n+  >\n+    <indexed_attr value="block_types" />\n+  </index>\n </object>\ndiff --git a/src/plone/volto/profiles/default/metadata.xml b/src/plone/volto/profiles/default/metadata.xml\nindex f746bae4..f32183b5 100644\n--- a/src/plone/volto/profiles/default/metadata.xml\n+++ b/src/plone/volto/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <?xml version="1.0" encoding="UTF-8"?>\n <metadata>\n-  <version>1016</version>\n+  <version>1017</version>\n   <dependencies>\n     <dependency>profile-plone.restapi:blocks</dependency>\n   </dependencies>\ndiff --git a/src/plone/volto/tests/test_indexers.py b/src/plone/volto/tests/test_indexers.py\nnew file mode 100644\nindex 00000000..c004159e\n--- /dev/null\n+++ b/src/plone/volto/tests/test_indexers.py\n@@ -0,0 +1,79 @@\n+# -*- coding: utf-8 -*-\n+from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+from unittest import TestCase\n+\n+\n+class TestBlockTypesIndexer(TestCase):\n+    layer = PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Document", id="doc1", title="Document with Blocks"\n+            )\n+        ]\n+        self.catalog = self.portal.portal_catalog\n+\n+    def test_block_types_are_indexed(self):\n+        """Ensure that when blocks are updated, the block_types index is updated."""\n+        blocks = {\n+            "1": {"@type": "image", "url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="image")\n+        self.assertEqual(len(brains), 1)\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 1)\n+\n+    def test_mixed_blocks(self):\n+        """Check that when some blocks have type and others don\'t, it doesn\'t fail."""\n+        blocks = {\n+            "1": {"url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="image")\n+        self.assertEqual(len(brains), 0)\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 1)\n+\n+    def test_removed_blocks(self):\n+        """Ensure that when blocks are removed, the block_types index is updated."""\n+        blocks = {\n+            "1": {"@type": "image", "url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        self.portal.doc1.blocks = {}\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 0)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 0)\n+\n+    def test_nested_blocks(self):\n+        """Ensure that nested block types are also included in block_types."""\n+        blocks = {\n+            "1": {\n+                "@type": "gridBlock",\n+                "blocks": {\n+                    "2": {"@type": "teaser"},\n+                },\n+            },\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\ndiff --git a/src/plone/volto/upgrades.py b/src/plone/volto/upgrades.py\nindex ba6ea096..96dd2692 100644\n--- a/src/plone/volto/upgrades.py\n+++ b/src/plone/volto/upgrades.py\n@@ -9,8 +9,11 @@\n from plone.volto import logger\n from plone.volto.setuphandlers import NO_RICHTEXT_BEHAVIOR_CONTENT_TYPES\n from plone.volto.setuphandlers import remove_behavior\n+from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n \n+import transaction\n+\n \n MIGRATION = {\n     "Document": content.FolderishDocument,\n@@ -123,3 +126,20 @@ def add_control_panel_classic_icon(context):\n         field.TextLine(title="Plone Icon Volto Control Panel"),\n     )\n     registry["plone.icon.volto-settings"] = "++plone++plone.volto/volto.svg"\n+\n+\n+def add_block_types_index(context):\n+    catalog = getToolByName(context, "portal_catalog")\n+    indexes = catalog.indexes()\n+    if "block_types" not in indexes:\n+        catalog.addIndex("block_types", "KeywordIndex")\n+        logger.info("Added block_types index.")\n+    brains = catalog(object_provides="plone.restapi.behaviors.IBlocks")\n+    total = len(brains)\n+    for index, brain in enumerate(brains):\n+        obj = brain.getObject()\n+        obj.reindexObject(idxs=["block_types"], update_metadata=0)\n+        logger.info("Reindexing object %s.", brain.getPath())\n+        if index % 250 == 0:\n+            logger.info(f"Reindexed {index}/{total} objects")\n+            transaction.commit()\n'

