Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2020-12-11T17:48:03+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.contentrules/commit/2390cc0669fa614a349e2cd5ff7c3b407dbd43a2

Simplify test setup by using the MOCK_MAILHOST_FIXTURE

Fixes #59

Files changed:
A news/59.fixed
M plone/app/contentrules/testing.py
M plone/app/contentrules/tests/test_action_mail.py

b'diff --git a/news/59.fixed b/news/59.fixed\nnew file mode 100644\nindex 0000000..b48820a\n--- /dev/null\n+++ b/news/59.fixed\n@@ -0,0 +1 @@\n+Simplify test setup by using the MOCK_MAILHOST_FIXTURE\ndiff --git a/plone/app/contentrules/testing.py b/plone/app/contentrules/testing.py\nindex 196ccab..30ebfca 100644\n--- a/plone/app/contentrules/testing.py\n+++ b/plone/app/contentrules/testing.py\n@@ -2,6 +2,7 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n+from plone.app.testing import MOCK_MAILHOST_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n \n import plone.app.contentrules\n@@ -19,7 +20,7 @@ def setUpZope(self, app, configurationContext):\n \n \n PLONE_APP_CONTENTRULES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTRULES_FIXTURE,),\n+    bases=(PLONE_APP_CONTENTRULES_FIXTURE, MOCK_MAILHOST_FIXTURE),\n     name=\'PloneAppContentrulesLayer:IntegrationTesting\',\n )\n \ndiff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py\nindex 6d4b8f3..b67acb1 100644\n--- a/plone/app/contentrules/tests/test_action_mail.py\n+++ b/plone/app/contentrules/tests/test_action_mail.py\n@@ -56,22 +56,6 @@ def setUp(self):\n         # XXX: remove the manager role that was set in the base class\n         setRoles(self.portal, TEST_USER_ID, [])\n \n-    def _setup_mockmail(self):\n-        sm = getSiteManager(self.portal)\n-        sm.unregisterUtility(provided=IMailHost)\n-        dummyMailHost = MockMailHost(\'MailHost\')\n-        sm.registerUtility(dummyMailHost, IMailHost)\n-        self.portal._original_MailHost = self.portal.MailHost\n-        self.portal.MailHost = dummyMailHost\n-        return dummyMailHost\n-\n-    def _teardown_mockmail(self):\n-        self.portal.MailHost = self.portal._original_MailHost\n-        sm = getSiteManager(context=self.portal)\n-        sm.unregisterUtility(provided=IMailHost)\n-        sm.registerUtility(aq_base(self.portal._original_MailHost),\n-                           provided=IMailHost)\n-\n     def testRegistered(self):\n         element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n         self.assertEqual(\'plone.actions.Mail\', element.addview)\n@@ -120,7 +104,6 @@ def testExecute(self):\n         # this avoids sending mail as currentuser@foobar.com\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n             email=\'currentuser@foobar.com\')\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.source = \'$user_email\'\n         e.recipients = \'bar@foo.be, bar@foo.be, $reviewer_emails, \' \\\n@@ -130,7 +113,7 @@ def testExecute(self):\n                              IExecutable)\n         ex()\n         sent_mails = {}\n-        for mail_sent in dummyMailHost.messages:\n+        for mail_sent in self.portal.MailHost.messages:\n             mail_sent_msg = message_from_bytes(mail_sent)\n             sent_mails[mail_sent_msg.get(\'To\')] = mail_sent_msg\n \n@@ -160,10 +143,8 @@ def testExecute(self):\n         self.assertEqual(\n             set(emails),\n             set(sent_mails.keys()))\n-        self._teardown_mockmail()\n \n     def testExecuteNoSource(self):\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.recipients = \'bar@foo.be,foo@bar.be\'\n         e.message = \'Document created !\'\n@@ -172,15 +153,18 @@ def testExecuteNoSource(self):\n         # this no longer errors since it breaks usability\n         self.assertTrue(ex)\n         # and will return False for the unsent message\n-        self.assertEqual(ex(), False)\n-        # if we provide a site mail address the message sends correctly\n+        # (happens when no sender address can be computed)\n         registry = getUtility(IRegistry)\n         mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings.email_from_address = ""\n+        self.assertEqual(ex(), False)\n+\n+        # if we provide a site mail address the message sends correctly\n         mail_settings.email_from_address = \'manager@portal.be\'\n         mail_settings.email_from_name = u\'plone@rulez\'\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 2)\n-        mailSent = message_from_bytes(dummyMailHost.messages[0])\n+        self.assertEqual(len(self.portal.MailHost.messages), 2)\n+        mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n         self.assertEqual(\'text/plain; charset="utf-8"\',\n                          mailSent.get(\'Content-Type\'))\n         self.assertIn(mailSent.get(\'To\'), [\'bar@foo.be\', \'foo@bar.be\'])\n@@ -188,10 +172,8 @@ def testExecuteNoSource(self):\n                          mailSent.get(\'From\'))\n         self.assertEqual(\'Document created !\',\n                          mailSent.get_payload())\n-        self._teardown_mockmail()\n \n     def testExecuteMultiRecipients(self):\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.source = \'foo@bar.be\'\n         e.recipients = \'bar@foo.be,foo@bar.be\'\n@@ -199,10 +181,10 @@ def testExecuteMultiRecipients(self):\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n                              IExecutable)\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 2)\n+        self.assertEqual(len(self.portal.MailHost.messages), 2)\n         # in py3 the order of mails is non-determininistic\n         # because sending iterates over a set of recipients\n-        for msg in dummyMailHost.messages:\n+        for msg in self.portal.MailHost.messages:\n             if b\'bar@foo.be\' in msg:\n                 mailSent1 = message_from_bytes(msg)\n             else:\n@@ -219,10 +201,8 @@ def testExecuteMultiRecipients(self):\n         self.assertEqual(\'foo@bar.be\', mailSent2.get(\'From\'))\n         self.assertEqual(\'Document created !\',\n                          mailSent2.get_payload())\n-        self._teardown_mockmail()\n \n     def testExecuteExcludeActor(self):\n-        dummyMailHost = self._setup_mockmail()\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n             email=\'currentuser@foobar.com\')\n         e = MailAction()\n@@ -233,15 +213,13 @@ def testExecuteExcludeActor(self):\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n                              IExecutable)\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 1)\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n \n-        mailSent = message_from_bytes(dummyMailHost.messages[0])\n+        mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n         self.assertEqual(\'bar@foo.be\', mailSent.get(\'To\'))\n-        self._teardown_mockmail()\n \n     def testExecuteNoRecipients(self):\n         # no recipient\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.source = \'foo@bar.be\'\n         e.recipients = \'\'\n@@ -249,8 +227,7 @@ def testExecuteNoRecipients(self):\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n                              IExecutable)\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 0)\n-        self._teardown_mockmail()\n+        self.assertEqual(len(self.portal.MailHost.messages), 0)\n \n     @unittest.skip(\n         \'Monkey patching does not work well with mocking. Needs fixing.\'\n'

Repository: plone.app.contentrules


Branch: refs/heads/master
Date: 2020-12-11T23:41:23+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.contentrules/commit/94edd29e0c0d3b6dfcd9a1c00d1d380a2a184ef1

Merge pull request #60 from plone/59.fixed

Simplify test setup by using the MOCK_MAILHOST_FIXTURE

Files changed:
A news/59.fixed
M plone/app/contentrules/testing.py
M plone/app/contentrules/tests/test_action_mail.py

b'diff --git a/news/59.fixed b/news/59.fixed\nnew file mode 100644\nindex 0000000..b48820a\n--- /dev/null\n+++ b/news/59.fixed\n@@ -0,0 +1 @@\n+Simplify test setup by using the MOCK_MAILHOST_FIXTURE\ndiff --git a/plone/app/contentrules/testing.py b/plone/app/contentrules/testing.py\nindex 196ccab..30ebfca 100644\n--- a/plone/app/contentrules/testing.py\n+++ b/plone/app/contentrules/testing.py\n@@ -2,6 +2,7 @@\n from plone.app.contenttypes.testing import PLONE_APP_CONTENTTYPES_FIXTURE\n from plone.app.testing import FunctionalTesting\n from plone.app.testing import IntegrationTesting\n+from plone.app.testing import MOCK_MAILHOST_FIXTURE\n from plone.app.testing import PloneSandboxLayer\n \n import plone.app.contentrules\n@@ -19,7 +20,7 @@ def setUpZope(self, app, configurationContext):\n \n \n PLONE_APP_CONTENTRULES_INTEGRATION_TESTING = IntegrationTesting(\n-    bases=(PLONE_APP_CONTENTRULES_FIXTURE,),\n+    bases=(PLONE_APP_CONTENTRULES_FIXTURE, MOCK_MAILHOST_FIXTURE),\n     name=\'PloneAppContentrulesLayer:IntegrationTesting\',\n )\n \ndiff --git a/plone/app/contentrules/tests/test_action_mail.py b/plone/app/contentrules/tests/test_action_mail.py\nindex 6d4b8f3..b67acb1 100644\n--- a/plone/app/contentrules/tests/test_action_mail.py\n+++ b/plone/app/contentrules/tests/test_action_mail.py\n@@ -56,22 +56,6 @@ def setUp(self):\n         # XXX: remove the manager role that was set in the base class\n         setRoles(self.portal, TEST_USER_ID, [])\n \n-    def _setup_mockmail(self):\n-        sm = getSiteManager(self.portal)\n-        sm.unregisterUtility(provided=IMailHost)\n-        dummyMailHost = MockMailHost(\'MailHost\')\n-        sm.registerUtility(dummyMailHost, IMailHost)\n-        self.portal._original_MailHost = self.portal.MailHost\n-        self.portal.MailHost = dummyMailHost\n-        return dummyMailHost\n-\n-    def _teardown_mockmail(self):\n-        self.portal.MailHost = self.portal._original_MailHost\n-        sm = getSiteManager(context=self.portal)\n-        sm.unregisterUtility(provided=IMailHost)\n-        sm.registerUtility(aq_base(self.portal._original_MailHost),\n-                           provided=IMailHost)\n-\n     def testRegistered(self):\n         element = getUtility(IRuleAction, name=\'plone.actions.Mail\')\n         self.assertEqual(\'plone.actions.Mail\', element.addview)\n@@ -120,7 +104,6 @@ def testExecute(self):\n         # this avoids sending mail as currentuser@foobar.com\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n             email=\'currentuser@foobar.com\')\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.source = \'$user_email\'\n         e.recipients = \'bar@foo.be, bar@foo.be, $reviewer_emails, \' \\\n@@ -130,7 +113,7 @@ def testExecute(self):\n                              IExecutable)\n         ex()\n         sent_mails = {}\n-        for mail_sent in dummyMailHost.messages:\n+        for mail_sent in self.portal.MailHost.messages:\n             mail_sent_msg = message_from_bytes(mail_sent)\n             sent_mails[mail_sent_msg.get(\'To\')] = mail_sent_msg\n \n@@ -160,10 +143,8 @@ def testExecute(self):\n         self.assertEqual(\n             set(emails),\n             set(sent_mails.keys()))\n-        self._teardown_mockmail()\n \n     def testExecuteNoSource(self):\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.recipients = \'bar@foo.be,foo@bar.be\'\n         e.message = \'Document created !\'\n@@ -172,15 +153,18 @@ def testExecuteNoSource(self):\n         # this no longer errors since it breaks usability\n         self.assertTrue(ex)\n         # and will return False for the unsent message\n-        self.assertEqual(ex(), False)\n-        # if we provide a site mail address the message sends correctly\n+        # (happens when no sender address can be computed)\n         registry = getUtility(IRegistry)\n         mail_settings = registry.forInterface(IMailSchema, prefix=\'plone\')\n+        mail_settings.email_from_address = ""\n+        self.assertEqual(ex(), False)\n+\n+        # if we provide a site mail address the message sends correctly\n         mail_settings.email_from_address = \'manager@portal.be\'\n         mail_settings.email_from_name = u\'plone@rulez\'\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 2)\n-        mailSent = message_from_bytes(dummyMailHost.messages[0])\n+        self.assertEqual(len(self.portal.MailHost.messages), 2)\n+        mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n         self.assertEqual(\'text/plain; charset="utf-8"\',\n                          mailSent.get(\'Content-Type\'))\n         self.assertIn(mailSent.get(\'To\'), [\'bar@foo.be\', \'foo@bar.be\'])\n@@ -188,10 +172,8 @@ def testExecuteNoSource(self):\n                          mailSent.get(\'From\'))\n         self.assertEqual(\'Document created !\',\n                          mailSent.get_payload())\n-        self._teardown_mockmail()\n \n     def testExecuteMultiRecipients(self):\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.source = \'foo@bar.be\'\n         e.recipients = \'bar@foo.be,foo@bar.be\'\n@@ -199,10 +181,10 @@ def testExecuteMultiRecipients(self):\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n                              IExecutable)\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 2)\n+        self.assertEqual(len(self.portal.MailHost.messages), 2)\n         # in py3 the order of mails is non-determininistic\n         # because sending iterates over a set of recipients\n-        for msg in dummyMailHost.messages:\n+        for msg in self.portal.MailHost.messages:\n             if b\'bar@foo.be\' in msg:\n                 mailSent1 = message_from_bytes(msg)\n             else:\n@@ -219,10 +201,8 @@ def testExecuteMultiRecipients(self):\n         self.assertEqual(\'foo@bar.be\', mailSent2.get(\'From\'))\n         self.assertEqual(\'Document created !\',\n                          mailSent2.get_payload())\n-        self._teardown_mockmail()\n \n     def testExecuteExcludeActor(self):\n-        dummyMailHost = self._setup_mockmail()\n         self.portal.portal_membership.getAuthenticatedMember().setProperties(\n             email=\'currentuser@foobar.com\')\n         e = MailAction()\n@@ -233,15 +213,13 @@ def testExecuteExcludeActor(self):\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n                              IExecutable)\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 1)\n+        self.assertEqual(len(self.portal.MailHost.messages), 1)\n \n-        mailSent = message_from_bytes(dummyMailHost.messages[0])\n+        mailSent = message_from_bytes(self.portal.MailHost.messages[0])\n         self.assertEqual(\'bar@foo.be\', mailSent.get(\'To\'))\n-        self._teardown_mockmail()\n \n     def testExecuteNoRecipients(self):\n         # no recipient\n-        dummyMailHost = self._setup_mockmail()\n         e = MailAction()\n         e.source = \'foo@bar.be\'\n         e.recipients = \'\'\n@@ -249,8 +227,7 @@ def testExecuteNoRecipients(self):\n         ex = getMultiAdapter((self.folder, e, DummyEvent(self.folder.d1)),\n                              IExecutable)\n         ex()\n-        self.assertEqual(len(dummyMailHost.messages), 0)\n-        self._teardown_mockmail()\n+        self.assertEqual(len(self.portal.MailHost.messages), 0)\n \n     @unittest.skip(\n         \'Monkey patching does not work well with mocking. Needs fixing.\'\n'

