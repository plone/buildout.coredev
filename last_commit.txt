Repository: plone.event


Branch: refs/heads/master
Date: 2024-05-04T15:32:35+02:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.event/commit/2d28d03cf2f01d047d159abe745de4ac558f340f

fix exdate (#30)

* Keep the rrule UNTIL property UTC specifier, if defined.

* Set the rrule's EXDATE to the same time as the event's start time.

In our implementation we want the rrule's EXDATE property to have the same time
as the event's start time. Otherwise recurrence dates might be included where
they should not due to an user-undefined EXDATE time.

* Rephrase the recurrence rule time fixing rules.

---------

Co-authored-by: Johannes Raggam &lt;thetetet@gmail.com&gt;

Files changed:
A news/30-2.bugfix
A news/30.bugfix
M plone/event/recurrence.py
M plone/event/tests/test_recurrence_sequence_ical.py

b'diff --git a/news/30-2.bugfix b/news/30-2.bugfix\nnew file mode 100644\nindex 0000000..6f51c20\n--- /dev/null\n+++ b/news/30-2.bugfix\n@@ -0,0 +1,2 @@\n+Keep the rrule UNTIL property UTC specifier, if defined.\n+[mamico]\ndiff --git a/news/30.bugfix b/news/30.bugfix\nnew file mode 100644\nindex 0000000..e55873f\n--- /dev/null\n+++ b/news/30.bugfix\n@@ -0,0 +1,4 @@\n+Set the rrule\'s EXDATE to the same time as the event\'s start time.\n+In our implementation we want the rrule\'s EXDATE property to have the same time as the event\'s start time.\n+Otherwise recurrence dates might be included where they should not due to an user-undefined EXDATE time.\n+[mamico]\ndiff --git a/plone/event/recurrence.py b/plone/event/recurrence.py\nindex 34a6ffe..d8355b2 100644\n--- a/plone/event/recurrence.py\n+++ b/plone/event/recurrence.py\n@@ -72,39 +72,40 @@ def recurrence_sequence_ical(\n         duration = datetime.timedelta(0)\n \n     if recrule:\n-        # We want the recurrence be calculated ignoring the DTSTART,\n-        # which is defined by the event\'s own start.\n-        # \xe2\x80\x8c Also set the UNTIL time to the end of the day to include the last\n-        # occurrence for sure.\n-        #\n-        # start is a mandatory parameter for this function, remove DTSTART\n-        # from recrule\n-        recrule = re.sub(r"DTSTART:[^;\\n]*[;\\n]", "", recrule, re.MULTILINE)\n-        # TODO BUGFIX WRONG TIME DEFINITIONS\n-        # THIS HACK ensures, that UNTIL, RDATE and EXDATE definitions with\n-        # incorrect time (currently always set to 0:00 by the recurrence\n-        # widget) are handled correctly.\n-        #\n-        # Following fixes are made:\n-        # - The UNTIL date should be included in the recurrence set, as defined\n-        #   by RFC5545 (fix sets it to the end of the day)\n-        # - RDATE definitions should have the same time as the start date.\n-        # - EXDATE definitions should exclude occurrences on the specific date\n-        #   only the same time as the start date.\n-        # In the long term ,the recurrence widget should be able to set the\n-        # time for UNTIL, RDATE and EXDATE.\n-        t0 = start.time()  # set initial time information.\n-        # First, replace all times in the recurring rule with starttime\n+        # The event\'s start time.\n+        t0 = start.time()\n+        # The event\'s start time as RFC8601 string\n         t0str = f"T{t0.hour:02d}{t0.minute:02d}{t0.second:02d}"\n-        # Replace any times set to 000000 with start time, not all\n-        # rrules are set by a specific broken widget.  Don\'t waste time\n-        # subbing if the start time is already 000000.\n+\n+        # 1) Remove DTSTART from the recurrence rule\n+        # The start date is always included and therefore removed from the\n+        # recurrence rule.\n+        recrule = re.sub(r"DTSTART:[^;\\n]*[;\\n]", "", recrule, re.MULTILINE)\n+\n+        # 2) Set all RDATE (actually any) time definitions to the start date of\n+        # the event, except for those explicitly set to 00:00:00 which might\n+        # come from recurrence rule widgets which explicitly set it to that\n+        # time.\n         if t0str != "T000000":\n             recrule = re.sub(r"T000000", t0str, recrule)\n-        # Then, replace each until times with the end of the day\n+\n+        # 3) Set the UNTIL times to the end of the day to make sure to include\n+        # any possible occurrence on that date.\n+        recrule = re.sub(\n+            r"(UNTIL[^T]*[0-9]{8})T([0-9]{6})(Z?)",\n+            r"\\1T235959\\3",\n+            recrule,\n+        )\n+\n+        # 4) Set the EXDATE properties to the same start time as the event\'s\n+        # start time to make sure to really exclude those occurrences.\n         recrule = re.sub(\n-            r"(UNTIL[^T]*[0-9]{8})T([0-9]{6}Z?)",\n-            r"\\1T235959",\n+            r"EXDATE:([^\\n\\s]+)",\n+            lambda m: re.sub(\n+                r"T[0-9]{6}(Z?)",\n+                rf"{t0str}\\1",\n+                m.group(0),\n+            ),\n             recrule,\n         )\n \ndiff --git a/plone/event/tests/test_recurrence_sequence_ical.py b/plone/event/tests/test_recurrence_sequence_ical.py\nindex 6dbe2cf..2a3a6e1 100644\n--- a/plone/event/tests/test_recurrence_sequence_ical.py\n+++ b/plone/event/tests/test_recurrence_sequence_ical.py\n@@ -195,3 +195,25 @@ def test_recrule_with_dtstart(self):\n         self.assertEqual(len(seq), 2)\n         self.assertEqual(seq[0], at.localize(datetime(2023, 9, 4, 1, 0)))\n         self.assertEqual(seq[1], at.localize(datetime(2023, 9, 5, 1, 0)))\n+\n+    def test_recrule_with_exclude(self):\n+        from datetime import datetime\n+        from plone.event.recurrence import recurrence_sequence_ical\n+\n+        import pytz\n+\n+        at = pytz.timezone("UTC")\n+        recrule = (\n+            "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20240428T100000Z\\n"\n+            "EXDATE:20240423T100000Z,20240425T100000Z"\n+        )\n+\n+        # EXDATE with same time as start date should be excluded\n+        start = at.localize(datetime(2024, 4, 22, 10, 0))\n+        seq = list(recurrence_sequence_ical(start, recrule=recrule))\n+        self.assertEqual(len(seq), 5)\n+\n+        # even EXDATE with different time as start date should be excluded\n+        start = at.localize(datetime(2024, 4, 22, 14, 0))\n+        seq = list(recurrence_sequence_ical(start, recrule=recrule))\n+        self.assertEqual(len(seq), 5)\n'

