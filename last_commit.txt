Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2021-04-30T21:01:13+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/bc70464c4ab23207299e73cdc6fd2abf9f8e47f3

Add failing test for #57

Files changed:
M plone/app/versioningbehavior/tests/test_modifiers.py

b'diff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py\nindex 56c27dd..0bf815f 100644\n--- a/plone/app/versioningbehavior/tests/test_modifiers.py\n+++ b/plone/app/versioningbehavior/tests/test_modifiers.py\n@@ -5,9 +5,11 @@\n from plone.app.testing import TEST_USER_ROLES\n from plone.app.versioningbehavior.modifiers import CloneNamedFileBlobs\n from plone.app.versioningbehavior.modifiers import SkipRelations\n+from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.dexterity.fti import DexterityFTI\n+from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.utils import createContent\n from plone.dexterity.utils import createContentInContainer\n from plone.namedfile import field\n@@ -24,6 +26,7 @@\n from zope.interface import Interface\n from zope.intid.interfaces import IIntIds\n \n+import transaction\n import unittest\n \n \n@@ -352,3 +355,54 @@ class Dummy(object):\n \n         self.assertFalse(hasattr(repo_clone, \'single\'))\n         self.assertFalse(hasattr(repo_clone, \'multiple\'))\n+\n+\n+class TestModifiersFunctional(unittest.TestCase):\n+\n+    layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        # we need to have the Manager role to be able to add things\n+        # to the portal root\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+    def testCloneNamedFileBlobsInUpdatedSchema(self):\n+        file_fti = DexterityFTI(\n+            \'BlobFile\',\n+            model_source="""\n+            <model xmlns="http://namespaces.plone.org/supermodel/schema">\n+                <schema>\n+                    <field name="file"\n+                           type="plone.namedfile.field.NamedBlobFile">\n+                        <title>File</title>\n+                        <required>True</required>\n+                    </field>\n+                </schema>\n+            </model>\n+        """)\n+        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+\n+        # Sets _p_mtime on FTI used in schema suffix in p.dexterity >= 2.10.0\n+        transaction.commit()\n+\n+        file1 = createContentInContainer(self.portal, \'BlobFile\')\n+        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        attrs_dict = modifier.getReferencedAttributes(file1)\n+        schema_name = portalTypeToSchemaName(\n+            \'BlobFile\',\n+            suffix=str(self.portal.portal_types.BlobFile._p_mtime)\n+        )\n+        attr = "plone.dexterity.schema.generated." + schema_name + ".file"\n+        self.assertTrue(attr in attrs_dict)\n+        blob = list(attrs_dict.values())[0]\n+        self.assertTrue(IBlob.providedBy(blob))\n+\n+        # Update _p_mtime on FTI\n+        self.portal.portal_types.BlobFile._p_changed = True\n+        transaction.commit()\n+\n+        # Test that modifier can attach after schema suffix has changed\n+        modifier.reattachReferencedAttributes(file1, attrs_dict)\n'

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2021-04-30T21:21:55+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/770ed1eb4d8b3ef7e11cee19f8b50cc75a392b42

Fix issue where versioning dynamic content types with blob fields broke after a schema update due to change in dynamic schema identifiers since plone.dexterity &gt;= 2.10.0

Files changed:
A news/57.bugfix
M plone/app/versioningbehavior/modifiers.py

b"diff --git a/news/57.bugfix b/news/57.bugfix\nnew file mode 100644\nindex 0000000..139acc4\n--- /dev/null\n+++ b/news/57.bugfix\n@@ -0,0 +1,2 @@\n+Fix issue where versioning dynamic content types with blob fields broke after a schema update due to change in dynamic schema identifiers since plone.dexterity >= 2.10.0\n+[datakurre]\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 7313b58..d295899 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -4,6 +4,8 @@\n from plone.behavior.registration import BehaviorRegistrationNotFound\n from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.schema import SCHEMA_CACHE\n+from plone.dexterity.schema import schemaNameToPortalType\n from plone.dexterity.utils import iterSchemata\n from plone.dexterity.utils import resolveDottedName\n from plone.namedfile.interfaces import INamedBlobFileField\n@@ -170,6 +172,7 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in six.iteritems(attrs_dict):\n             iface_name, f_name = name.rsplit('.', 1)\n+            generated_prefix = 'plone.dexterity.schema.generated.'\n             # In case the field is provided via a behavior:\n             # Look up the behavior via dotted name.\n             # If the behavior's dotted name was changed, we might still have\n@@ -182,7 +185,11 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n                 iface = behavior.interface\n             except BehaviorRegistrationNotFound:\n                 # Not a behavior - fetch the interface directly\n-                iface = resolveDottedName(iface_name)\n+                if iface_name.startswith(generated_prefix):\n+                    portal_type = schemaNameToPortalType(iface_name)\n+                    iface = SCHEMA_CACHE.get(portal_type)\n+                else:\n+                    iface = resolveDottedName(iface_name)\n             field = iface.get(f_name)\n             if field is not None:  # Field may have been removed from schema\n                 adapted_field = field.get(iface(obj))\n"

Repository: plone.app.versioningbehavior


Branch: refs/heads/master
Date: 2021-05-03T08:46:24+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.versioningbehavior/commit/30bd3c69772bf5ccc6b707a4c656d76cd16b4849

Merge pull request #58 from plone/fix-issue-with-schma-suffix

 Fix issue where versioning dynamic content types with blob fields broke after a schema update

Files changed:
A news/57.bugfix
M plone/app/versioningbehavior/modifiers.py
M plone/app/versioningbehavior/tests/test_modifiers.py

b'diff --git a/news/57.bugfix b/news/57.bugfix\nnew file mode 100644\nindex 0000000..139acc4\n--- /dev/null\n+++ b/news/57.bugfix\n@@ -0,0 +1,2 @@\n+Fix issue where versioning dynamic content types with blob fields broke after a schema update due to change in dynamic schema identifiers since plone.dexterity >= 2.10.0\n+[datakurre]\ndiff --git a/plone/app/versioningbehavior/modifiers.py b/plone/app/versioningbehavior/modifiers.py\nindex 7313b58..d295899 100644\n--- a/plone/app/versioningbehavior/modifiers.py\n+++ b/plone/app/versioningbehavior/modifiers.py\n@@ -4,6 +4,8 @@\n from plone.behavior.registration import BehaviorRegistrationNotFound\n from plone.behavior.registration import lookup_behavior_registration\n from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.schema import SCHEMA_CACHE\n+from plone.dexterity.schema import schemaNameToPortalType\n from plone.dexterity.utils import iterSchemata\n from plone.dexterity.utils import resolveDottedName\n from plone.namedfile.interfaces import INamedBlobFileField\n@@ -170,6 +172,7 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n         obj = aq_base(obj)\n         for name, blob in six.iteritems(attrs_dict):\n             iface_name, f_name = name.rsplit(\'.\', 1)\n+            generated_prefix = \'plone.dexterity.schema.generated.\'\n             # In case the field is provided via a behavior:\n             # Look up the behavior via dotted name.\n             # If the behavior\'s dotted name was changed, we might still have\n@@ -182,7 +185,11 @@ def reattachReferencedAttributes(self, obj, attrs_dict):\n                 iface = behavior.interface\n             except BehaviorRegistrationNotFound:\n                 # Not a behavior - fetch the interface directly\n-                iface = resolveDottedName(iface_name)\n+                if iface_name.startswith(generated_prefix):\n+                    portal_type = schemaNameToPortalType(iface_name)\n+                    iface = SCHEMA_CACHE.get(portal_type)\n+                else:\n+                    iface = resolveDottedName(iface_name)\n             field = iface.get(f_name)\n             if field is not None:  # Field may have been removed from schema\n                 adapted_field = field.get(iface(obj))\ndiff --git a/plone/app/versioningbehavior/tests/test_modifiers.py b/plone/app/versioningbehavior/tests/test_modifiers.py\nindex 56c27dd..0bf815f 100644\n--- a/plone/app/versioningbehavior/tests/test_modifiers.py\n+++ b/plone/app/versioningbehavior/tests/test_modifiers.py\n@@ -5,9 +5,11 @@\n from plone.app.testing import TEST_USER_ROLES\n from plone.app.versioningbehavior.modifiers import CloneNamedFileBlobs\n from plone.app.versioningbehavior.modifiers import SkipRelations\n+from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n from plone.app.versioningbehavior.testing import PLONE_APP_VERSIONINGBEHAVIOR_INTEGRATION_TESTING\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.dexterity.fti import DexterityFTI\n+from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.utils import createContent\n from plone.dexterity.utils import createContentInContainer\n from plone.namedfile import field\n@@ -24,6 +26,7 @@\n from zope.interface import Interface\n from zope.intid.interfaces import IIntIds\n \n+import transaction\n import unittest\n \n \n@@ -352,3 +355,54 @@ class Dummy(object):\n \n         self.assertFalse(hasattr(repo_clone, \'single\'))\n         self.assertFalse(hasattr(repo_clone, \'multiple\'))\n+\n+\n+class TestModifiersFunctional(unittest.TestCase):\n+\n+    layer = PLONE_APP_VERSIONINGBEHAVIOR_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer[\'portal\']\n+        self.request = self.layer[\'request\']\n+        # we need to have the Manager role to be able to add things\n+        # to the portal root\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+\n+    def testCloneNamedFileBlobsInUpdatedSchema(self):\n+        file_fti = DexterityFTI(\n+            \'BlobFile\',\n+            model_source="""\n+            <model xmlns="http://namespaces.plone.org/supermodel/schema">\n+                <schema>\n+                    <field name="file"\n+                           type="plone.namedfile.field.NamedBlobFile">\n+                        <title>File</title>\n+                        <required>True</required>\n+                    </field>\n+                </schema>\n+            </model>\n+        """)\n+        self.portal.portal_types._setObject(\'BlobFile\', file_fti)\n+\n+        # Sets _p_mtime on FTI used in schema suffix in p.dexterity >= 2.10.0\n+        transaction.commit()\n+\n+        file1 = createContentInContainer(self.portal, \'BlobFile\')\n+        file1.file = NamedBlobFile(\'dummy test data\', filename=u\'test.txt\')\n+        modifier = CloneNamedFileBlobs(\'modifier\', \'Modifier\')\n+        attrs_dict = modifier.getReferencedAttributes(file1)\n+        schema_name = portalTypeToSchemaName(\n+            \'BlobFile\',\n+            suffix=str(self.portal.portal_types.BlobFile._p_mtime)\n+        )\n+        attr = "plone.dexterity.schema.generated." + schema_name + ".file"\n+        self.assertTrue(attr in attrs_dict)\n+        blob = list(attrs_dict.values())[0]\n+        self.assertTrue(IBlob.providedBy(blob))\n+\n+        # Update _p_mtime on FTI\n+        self.portal.portal_types.BlobFile._p_changed = True\n+        transaction.commit()\n+\n+        # Test that modifier can attach after schema suffix has changed\n+        modifier.reattachReferencedAttributes(file1, attrs_dict)\n'

