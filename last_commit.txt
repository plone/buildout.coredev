Repository: plone.app.layout


Branch: refs/heads/3.4.x
Date: 2021-12-05T15:08:29+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/b9e696d51046a64a301531b8f23e6575658fb265

Global section viewlet: Catalog based navigation.

Show the global sections also if navigation contains items but tabs are empty.
This allows for disabling portal tabs rendering and constructing the navigation only from the catalog query.

Files changed:
A news/273-1.feature
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/sections.pt
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/273-1.feature b/news/273-1.feature\nnew file mode 100644\nindex 00000000..8439c2aa\n--- /dev/null\n+++ b/news/273-1.feature\n@@ -0,0 +1,4 @@\n+Global section viewlet: Catalog based navigation.\n+Show the global sections also if navigation contains items but tabs are empty.\n+This allows for disabling portal tabs rendering and constructing the navigation only from the catalog query.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 1fb80952..0fe7a6fa 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -276,7 +276,8 @@ def current_language(self):\n     def navtree(self):\n         ret = defaultdict(list)\n         navtree_path = self.navtree_path\n-        for tab in self.portal_tabs:\n+        portal_tabs = self.portal_tabs\n+        for tab in portal_tabs:\n             entry = tab.copy()\n             entry.update(\n                 {"path": "/".join((navtree_path, tab["id"])), "uid": tab["id"],}\n@@ -328,7 +329,7 @@ def navtree(self):\n         for brain in brains:\n             brain_path = brain.getPath()\n             brain_parent_path = brain_path.rpartition("/")[0]\n-            if brain_parent_path == navtree_path:\n+            if portal_tabs and brain_parent_path == navtree_path:\n                 # This should be already provided by the portal_tabs_view\n                 continue\n             if brain.exclude_from_nav and not context_path.startswith(brain_path):\ndiff --git a/plone/app/layout/viewlets/sections.pt b/plone/app/layout/viewlets/sections.pt\nindex db3fd688..0df7024e 100644\n--- a/plone/app/layout/viewlets/sections.pt\n+++ b/plone/app/layout/viewlets/sections.pt\n@@ -2,8 +2,7 @@\n      xmlns:tal="http://xml.zope.org/namespaces/tal"\n      xmlns:metal="http://xml.zope.org/namespaces/metal"\n      xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-     tal:define="portal_tabs view/portal_tabs"\n-     tal:condition="portal_tabs"\n+     tal:condition="python:view.navtree"\n      i18n:domain="plone">\n \n   <nav class="plone-navbar pat-navigationmarker" id="portal-globalnav-wrapper">\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 7e25ca5e..aa53f3bc 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -510,6 +510,21 @@ def test_generate_tabs_exclude_from_nav(self):\n             ["/plone/excluded-folder/sub-folder"],\n         )\n \n+    def test_generate_tabs__no_portal_tabs(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(navtree["/plone"][0]["id"], "Members")\n+        self.assertEqual(navtree["/plone"][1]["id"], "folder1")\n+\n \n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n'

Repository: plone.app.layout


Branch: refs/heads/3.4.x
Date: 2021-12-05T15:08:29+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/5800966cee98f8b6649aa41440465ee40c560d31

Global sections viewlet: Customize entries and query

Also allow customizing the tabs entries and the navigation query along with the other navigation entries.

Files changed:
A news/273-2.feature
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/273-2.feature b/news/273-2.feature\nnew file mode 100644\nindex 00000000..0453b4f0\n--- /dev/null\n+++ b/news/273-2.feature\n@@ -0,0 +1,3 @@\n+Global sections viewlet: Customize entries and query.\n+Also allow customizing the tabs entries and the navigation query along with the other navigation entries.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 0fe7a6fa..73cbc862 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -294,6 +294,7 @@ def navtree(self):\n                 )\n \n             entry["title"] = safe_unicode(entry["title"])\n+            self.customize_tab(entry, tab)\n             ret[navtree_path].append(entry)\n \n         if not self.settings.generate_tabs:\n@@ -320,6 +321,7 @@ def navtree(self):\n             query["exclude_from_nav"] = False\n \n         context_path = "/".join(self.context.getPhysicalPath())\n+        self.customize_query(query)\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n@@ -348,10 +350,19 @@ def navtree(self):\n             }\n             self.customize_entry(entry, brain)\n             ret[brain_parent_path].append(entry)\n+\n         return ret\n \n+    def customize_query(self, query):\n+        """Helper to customize the catalog query."""\n+        pass\n+\n+    def customize_tab(self, entry, tab):\n+        """Helper to add custom entry keys/values."""\n+        pass\n+\n     def customize_entry(self, entry, brain):\n-        """a little helper to add custom entry keys/values."""\n+        """Helper to add custom entry keys/values."""\n         pass\n \n     def render_item(self, item, path):\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex aa53f3bc..56d2a7e4 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -525,6 +525,62 @@ class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n         self.assertEqual(navtree["/plone"][0]["id"], "Members")\n         self.assertEqual(navtree["/plone"][1]["id"], "folder1")\n \n+    def test_customize_tabs(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+        self.registry["plone.generate_tabs"] = False\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            def customize_tab(self, entry, tab):\n+                entry["title"] = "Homepage"\n+                return entry\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(navtree["/plone"][0]["title"], "Homepage")\n+\n+    def test_customize_entry(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+\n+            def customize_entry(self, entry, brain):\n+                entry["title"] = "OKAY"\n+                return entry\n+\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(navtree["/plone"][0]["title"], "OKAY")\n+        self.assertEqual(navtree["/plone"][1]["title"], "OKAY")\n+\n+    def test_customize_query(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+\n+            def customize_query(self, query):\n+                query["id"] = "folder1"\n+                return query\n+\n+        self.portal.invokeFactory(\n+            "Folder", id="folder1", title="Folder 1", language="sl"\n+        )\n+        self.portal.invokeFactory("Folder", id="folder2", title="Folder 2")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertEqual(len(navtree["/plone"]), 1)\n+        self.assertEqual(navtree["/plone"][0]["title"], "Folder 1")\n+\n \n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n'

Repository: plone.app.layout


Branch: refs/heads/3.4.x
Date: 2021-12-05T15:08:29+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.layout/commit/742650630df93471f273d6818393f5fe651da994

Global sections viewlet: Factor out types_using_view

Factor out types_using_view so that this method can be re-used, e.g. in a subclass with a customize_entry method.

Files changed:
A news/273-3.feature
M plone/app/layout/viewlets/common.py
M plone/app/layout/viewlets/tests/test_common.py

b'diff --git a/news/273-3.feature b/news/273-3.feature\nnew file mode 100644\nindex 00000000..ce4b019f\n--- /dev/null\n+++ b/news/273-3.feature\n@@ -0,0 +1,3 @@\n+Global sections viewlet: Factor out types_using_view.\n+Factor out types_using_view so that this method can be re-used, e.g. in a subclass with a customize_entry method.\n+[thet]\ndiff --git a/plone/app/layout/viewlets/common.py b/plone/app/layout/viewlets/common.py\nindex 73cbc862..ded67d1b 100644\n--- a/plone/app/layout/viewlets/common.py\n+++ b/plone/app/layout/viewlets/common.py\n@@ -271,6 +271,13 @@ def current_language(self):\n             or self.language_settings.default_language\n         )\n \n+    @property\n+    @memoize_contextless\n+    def types_using_view(self):\n+        registry = getUtility(IRegistry)\n+        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n+        return types_using_view\n+\n     @property\n     @memoize\n     def navtree(self):\n@@ -325,9 +332,7 @@ def navtree(self):\n         portal_catalog = getToolByName(self.context, "portal_catalog")\n         brains = portal_catalog.searchResults(**query)\n \n-        registry = getUtility(IRegistry)\n-        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n-\n+        types_using_view = self.types_using_view\n         for brain in brains:\n             brain_path = brain.getPath()\n             brain_parent_path = brain_path.rpartition("/")[0]\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 56d2a7e4..0d001080 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -581,6 +581,27 @@ def customize_query(self, query):\n         self.assertEqual(len(navtree["/plone"]), 1)\n         self.assertEqual(navtree["/plone"][0]["title"], "Folder 1")\n \n+    def test_types_using_view(self):\n+        """Test for constructing the navigation purely out of a catalog query\n+        and not using portal tabs at all."""\n+\n+        class CustomGlobalSectionsViewlet(GlobalSectionsViewlet):\n+            portal_tabs = []\n+            types_using_view = ["Folder"]\n+\n+        self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n+\n+        nav = CustomGlobalSectionsViewlet(self.portal, self.request.clone(), None)\n+        navtree = nav.navtree\n+\n+        self.assertListEqual(nav.types_using_view, ["Folder"])\n+        self.assertEqual(\n+            navtree["/plone"][0]["url"], "http://nohost/plone/Members/view"\n+        )\n+        self.assertEqual(\n+            navtree["/plone"][1]["url"], "http://nohost/plone/folder1/view"\n+        )\n+\n \n class TestTitleEscape(ViewletsFunctionalTestCase):\n     """Test that the title in the global sections viewlet is escaped.\n'

