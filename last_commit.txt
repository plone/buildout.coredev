Repository: plone.app.theming


Branch: refs/heads/4.1.x
Date: 2021-07-07T01:34:25+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/dcbc5dc810da98481a711f3de5a8518e9d900ee5

Avoid Server Side Request Forgery via lxml parser.

Taken over from [`PloneHotfix20210518`](https://plone.org/security/hotfix/20210518/server-side-request-forgery-via-lxml-parser).

Strangely, several tests in `test_transforms` fail, seemingly because we try to load a theme html from the tile system.
This may depend on the `absolutePrefix` setting.
Commenting out the new FailingFileSystemResolver, helps.  But that is one of the parts that brings extra security.

In practice with the hotfix, I have not seen it fail.  Also, I would expect a big cry out if this part was broken.
But these failures are definitely  suspect.

Files changed:
A news/3274.bugfix
A src/plone/app/theming/tests/package_theme.txt
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

b'diff --git a/news/3274.bugfix b/news/3274.bugfix\nnew file mode 100644\nindex 0000000..07ebee6\n--- /dev/null\n+++ b/news/3274.bugfix\n@@ -0,0 +1,3 @@\n+Avoid Server Side Request Forgery via lxml parser.\n+Taken over from `PloneHotfix20210518 <https://plone.org/security/hotfix/20210518/server-side-request-forgery-via-lxml-parser>`_.\n+[maurits]\ndiff --git a/src/plone/app/theming/tests/package_theme.txt b/src/plone/app/theming/tests/package_theme.txt\nnew file mode 100644\nindex 0000000..d1efbd4\n--- /dev/null\n+++ b/src/plone/app/theming/tests/package_theme.txt\n@@ -0,0 +1 @@\n+This can be loaded with the python package resolver.\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 4ab1d88..4629d41 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,12 +1,39 @@\n # -*- coding: utf-8 -*-\n+from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n+from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import extractThemeInfo\n+from plone.app.theming.utils import getTheme\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.testing.zope import Browser\n \n import os.path\n+import tempfile\n+import transaction\n import unittest\n import zipfile\n \n \n+# We will try to let the rules file point to a theme on the file system.\n+# For security reasons, this should not work.\n+# This is one of the fixes from PloneHotFix20210518.\n+RULES = """<?xml version="1.0" encoding="UTF-8"?>\n+<rules\n+    xmlns="http://namespaces.plone.org/diazo"\n+    xmlns:css="http://namespaces.plone.org/diazo/css"\n+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+        <theme href="{0}" />\n+</rules>\n+"""\n+# The theme will contain a message:\n+MESSAGE = u"Hello from a temporary directory."\n+# We have a sample theme file here:\n+HERE = os.path.dirname(__file__)\n+PACKAGE_THEME_FILENAME = "package_theme.txt"\n+PACKAGE_THEME = os.path.join(HERE, PACKAGE_THEME_FILENAME)\n+\n+\n class TestIntegration(unittest.TestCase):\n \n     layer = THEMING_INTEGRATION_TESTING\n@@ -420,3 +447,146 @@ def test_extractThemeInfo_with_subdirectories(self):\n                 u\'/++theme++subdirectories/rules.xml\'\n             )\n             self.assertEqual(theme.absolutePrefix, \'/++theme++subdirectories\')\n+\n+\n+class TestAttackVector(unittest.TestCase):\n+    layer = THEMING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        rules_fd, self.rules_file = tempfile.mkstemp(\n+            suffix=".xml", prefix="rules", text=True\n+        )\n+        with open(self.rules_file, "w") as myfile:\n+            myfile.write(MESSAGE)\n+\n+    def tearDown(self):\n+        os.remove(self.rules_file)\n+\n+    def get_admin_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        browser.addHeader(\n+            "Authorization",\n+            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        return browser\n+\n+    def get_anon_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        return browser\n+\n+    def test_failing_file_protocol_resolver(self):\n+        from plone.app.theming.utils import FailingFileProtocolResolver\n+\n+        resolver = FailingFileProtocolResolver()\n+        with self.assertRaises(ValueError):\n+            resolver.resolve("file:///etc/passwd", "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(\n+                "file:" + os.path.relpath("/etc/passwd"), "public_id", "context"\n+            )\n+        with self.assertRaises(ValueError):\n+            resolver.resolve("file://" + self.rules_file, "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(\n+                "file:" + os.path.relpath(self.rules_file), "public_id", "context"\n+            )\n+\n+    def test_failing_file_system_resolver(self):\n+        from plone.app.theming.utils import FailingFileSystemResolver\n+\n+        resolver = FailingFileSystemResolver()\n+        with self.assertRaises(ValueError):\n+            resolver.resolve("/etc/passwd", "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(os.path.relpath("/etc/passwd"), "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(self.rules_file, "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(os.path.relpath(self.rules_file), "public_id", "context")\n+\n+    def new_theme(self, theme_path):\n+        from plone.app.theming.utils import createThemeFromTemplate\n+        from plone.resource.directory import PersistentResourceDirectory\n+\n+        # Start with an empty theme.\n+        # Pass title and description\n+        theme_name = createThemeFromTemplate("Security", "")\n+        theme = getTheme(theme_name)\n+        directory = PersistentResourceDirectory()\n+        directory.writeFile(\n+            "/".join(["theme", theme_name, "rules.xml"]), RULES.format(theme_path)\n+        )\n+        applyTheme(theme)\n+        transaction.commit()\n+\n+    def test_theme_file_system_absolute(self):\n+        self.new_theme(self.rules_file)\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_file_system_relative(self):\n+        self.new_theme(os.path.relpath(self.rules_file))\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_file_protocol_absolute(self):\n+        self.new_theme("file://" + self.rules_file)\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_file_protocol_relative(self):\n+        # This is actually handled by the InternalResolver.\n+        # Well, in fact it gives an error because it cannot resolve it in the Plone Site:\n+        # AttributeError: \'PersistentResourceDirectory\' object has no attribute \'getPhysicalPath\'\n+        # This can be seen when previewing the theme in the theme editor.\n+        self.new_theme("file:" + os.path.relpath(self.rules_file))\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_python_protocol(self):\n+        # Since our example rules file is in a Python package,\n+        # we can use the python resolver to access it.\n+        # I don\'t think we can avoid this.\n+        self.new_theme(\n+            "python://plone.app.theming/tests/" + PACKAGE_THEME_FILENAME\n+        )\n+        with open(PACKAGE_THEME) as myfile:\n+            contents = myfile.read()\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertIn(contents, browser.contents)\n+\n+    def test_available_themes(self):\n+        """Test that all available themes render properly.\n+\n+        Our security fixes should not break them.\n+        """\n+        from plone.app.theming.utils import getAvailableThemes\n+\n+        for theme in getAvailableThemes():\n+            applyTheme(theme)\n+            transaction.commit()\n+            # Can you view the portal anonymously?\n+            browser = self.get_anon_browser()\n+            browser.open(self.portal.absolute_url())\n+            # Can you see the preview as admin?\n+            # This can give errors that are otherwise swallowed by the\n+            # diazo/theming transform, effectively disabling the theme.\n+            if theme.__name__ in ("another-theme", "secondary-theme"):\n+                # Some of the test themes give problems.\n+                # We are only interested in the Sunburst and other official themes.\n+                continue\n+            browser = self.get_admin_browser()\n+            browser.open(\n+                self.portal.absolute_url()\n+                + theme.absolutePrefix\n+                + "/@@theming-controlpanel-mapper-getframe?path=/&theme=apply"\n+                + "&forms=disable&links=replace&title=Preview"\n+            )\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex f2cf3d8..f3ca223 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -33,6 +33,7 @@\n from zope.interface import implementer\n \n import logging\n+import os\n import pkg_resources\n import six\n \n@@ -67,15 +68,57 @@ def theming_policy(request=None):\n \n \n class FailingFileProtocolResolver(etree.Resolver):\n-    """Resolver that fails for security when file:/// urls are tried.\n+    """Resolver that fails for security when file: urls are tried.\n+\n+    Note: an earlier version only checked for "file://", not "file:",\n+    and did not catch relative paths.\n     """\n     def resolve(self, system_url, public_id, context):\n-        if system_url.startswith(\'file://\') and system_url != \'file:///__diazo__\':\n+        if system_url.startswith(\'file:\') and system_url != \'file:///__diazo__\':\n             # The error will be caught by lxml and we only see this in the traceback:\n             # XIncludeError: could not load <system_url>, and no fallback was found\n             raise ValueError("File protocol access not allowed: \'%s\'" % system_url)\n \n \n+class FailingFileSystemResolver(etree.Resolver):\n+    """Resolver that fails for security when accessing the file system.\n+\n+    Problem 1: none of the current plone.app.theming resolvers\n+    resolve file system paths, and yet they get resolved.\n+    So somewhere in etree there is a fallback.\n+\n+    Problem 2: the InternalResolver of plone.app.theming can resolve paths\n+    internal in the Plone Site.  If that happens, then our failing resolver\n+    should not be called.  But the order in which resolvers are called,\n+    seems random, so we cannot rely on the InternalResolver being called first.\n+\n+    So what do we do?\n+\n+    Situation:\n+    - The Plone Site has a theme.html in the site root.\n+    - On the file system there is a file theme.html in the root.\n+\n+    Possibilities when resolving /theme.html:\n+\n+    A. The InternalResolver is called first, and resolves it correctly.\n+    B. Our FailingFileSystemResolver is called first,\n+       sees that the file exists, and raises an error.\n+\n+    In this situation, the resolving would randomly work and not work.\n+    This seems unavoidable, but also seems a corner case\n+    which will not happen very often.\n+\n+    In case the file does not exist on the file system,\n+    our resolver should return nothing.\n+    Then the InternalResolver or other resolvers can have a go.\n+    """\n+    def resolve(self, system_url, public_id, context):\n+        if system_url and os.path.exists(system_url):\n+            # The error will be caught by lxml and we only see this in the traceback:\n+            # XIncludeError: could not load <system_url>, and no fallback was found\n+            raise ValueError("File system access not allowed: \'%s\'" % system_url)\n+\n+\n class NetworkResolver(etree.Resolver):\n     """Resolver for network urls\n     """\n@@ -633,11 +676,14 @@ def getParser(type, readNetwork):\n         parser = etree.HTMLParser()\n     elif type == \'compiler\':\n         parser = etree.XMLParser(resolve_entities=False, remove_pis=True)\n+    # Note: the order in which resolvers are called, seems random.\n+    # They end up in a set.\n     parser.resolvers.add(InternalResolver())\n     parser.resolvers.add(PythonResolver())\n     if readNetwork:\n         parser.resolvers.add(NetworkResolver())\n     parser.resolvers.add(FailingFileProtocolResolver())\n+    parser.resolvers.add(FailingFileSystemResolver())\n     return parser\n \n \n'

Repository: plone.app.theming


Branch: refs/heads/4.1.x
Date: 2021-07-07T16:25:16+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/f7b173b9a92d2c96737c503eee18abe4c918eabd

Fixed test_transform.py after merging the hotfix.

Problem is that `test_transforms.setUp` sets `settings.rules` to `python://plone.app.theming/tests/rules.xml`.
The PythonResolver translates this to an absolute file system path like `/Users/maurits/.../src/plone/app/theming/tests/rules.xml`.
The rules file has `&lt;theme href="theme.html" /&gt;`.
This becomes an absolute file system path like `/Users/maurits/.../src/plone/app/theming/tests/theme.html`.
And then the FailingFileSystemResolver of the hotfix kicks in and throws an error:

  File system access not allowed: '/Users/maurits/.../src/plone/app/theming/tests/theme.html'

At this point in the diazo code, the absolute prefix is not used, so you cannot fix it with that.

The main fix in this commit is letting `rules.xml` reference the theme as `python://plone.app.theming/tests/theme.html`.
Then it works again.

This was a problem in the tests, but it may happen for real.
But I found this hard to reproduce.
I tried using `python://plonetheme.barceloneta/theme/rules.xml` in the theming controlpanel,
but even without the hotfix this meant the theme could not be displayed.
I have not heard anyone complain that theming fails with the hotfix, so maybe no one is using the `python://` path for the rules.

This commit removes test_internal_resolver, because this did not actually test the internal resolver.
It created an XMLParser with an InternalResolver, but this was not needed:
neither the rules nor the theme contained anything that needed to be resolved internally (traversed within the Plone Site).
The internal resolver is already tested in the test_includes method.

Files changed:
M src/plone/app/theming/tests/paramrules.xml
M src/plone/app/theming/tests/rules.xml
M src/plone/app/theming/tests/test_transform.py

b'diff --git a/src/plone/app/theming/tests/paramrules.xml b/src/plone/app/theming/tests/paramrules.xml\nindex e9e5df5..d4cbfc5 100644\n--- a/src/plone/app/theming/tests/paramrules.xml\n+++ b/src/plone/app/theming/tests/paramrules.xml\n@@ -4,8 +4,8 @@\n     xmlns:css="http://namespaces.plone.org/diazo/css"\n     xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n \n-    <theme href="theme.html" />\n-    <theme href="othertheme.html" if-path="news"/>\n+    <theme href="python://plone.app.theming/tests/theme.html" />\n+    <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n \n     <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n     <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\ndiff --git a/src/plone/app/theming/tests/rules.xml b/src/plone/app/theming/tests/rules.xml\nindex e6ffca4..641c15a 100644\n--- a/src/plone/app/theming/tests/rules.xml\n+++ b/src/plone/app/theming/tests/rules.xml\n@@ -6,8 +6,8 @@\n \n     <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="othertheme.html" if-path="news"/>\n-        <theme href="theme.html" />\n+        <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n+        <theme href="python://plone.app.theming/tests/theme.html" />\n \n         <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n         <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 92330a7..aafd71b 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -212,25 +212,15 @@ def test_theme_enabled_header_off(self):\n         # The theme\n         self.assertFalse("This is the theme" in browser.contents)\n \n-    def test_internal_resolver(self):\n-        compiler_parser = etree.XMLParser()\n-        compiler_parser.resolvers.add(InternalResolver())\n-        # We can use a sub-package or a directory since tests is a python\n-        # package\n-        theme = resolvePythonURL(\n-            u\'python://plone.app.theming.tests/theme.html\'\n-        )\n-        rules = resolvePythonURL(u\'python://plone.app.theming/tests/rules.xml\')\n-        compile_theme(rules, theme, compiler_parser=compiler_parser)\n-\n     def test_python_resolver(self):\n-        compiler_parser = etree.XMLParser()\n-        compiler_parser.resolvers.add(PythonResolver())\n+        # The rules contain a python:// link, so we need a python resolver.\n+        parser = etree.HTMLParser()\n+        parser.resolvers.add(PythonResolver())\n         theme = resolvePythonURL(\n             u\'python://plone.app.theming.tests/theme.html\'\n         )\n         rules = resolvePythonURL(u\'python://plone.app.theming/tests/rules.xml\')\n-        compile_theme(rules, theme, compiler_parser=compiler_parser)\n+        compile_theme(rules, theme, parser=parser)\n \n     def test_theme_stored_in_plone_site(self):\n         app = self.layer[\'app\']\n'

Repository: plone.app.theming


Branch: refs/heads/4.1.x
Date: 2021-07-08T08:23:36+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.theming/commit/bd84ded22935a53053bc66c3428d326725daf33d

Merge pull request #197 from plone/hotfix-20210518-41x

Hotfix 20210518 [4.1.x]

Files changed:
A news/3274.bugfix
A src/plone/app/theming/tests/package_theme.txt
M src/plone/app/theming/tests/paramrules.xml
M src/plone/app/theming/tests/rules.xml
M src/plone/app/theming/tests/test_transform.py
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

b'diff --git a/news/3274.bugfix b/news/3274.bugfix\nnew file mode 100644\nindex 0000000..07ebee6\n--- /dev/null\n+++ b/news/3274.bugfix\n@@ -0,0 +1,3 @@\n+Avoid Server Side Request Forgery via lxml parser.\n+Taken over from `PloneHotfix20210518 <https://plone.org/security/hotfix/20210518/server-side-request-forgery-via-lxml-parser>`_.\n+[maurits]\ndiff --git a/src/plone/app/theming/tests/package_theme.txt b/src/plone/app/theming/tests/package_theme.txt\nnew file mode 100644\nindex 0000000..d1efbd4\n--- /dev/null\n+++ b/src/plone/app/theming/tests/package_theme.txt\n@@ -0,0 +1 @@\n+This can be loaded with the python package resolver.\ndiff --git a/src/plone/app/theming/tests/paramrules.xml b/src/plone/app/theming/tests/paramrules.xml\nindex e9e5df5..d4cbfc5 100644\n--- a/src/plone/app/theming/tests/paramrules.xml\n+++ b/src/plone/app/theming/tests/paramrules.xml\n@@ -4,8 +4,8 @@\n     xmlns:css="http://namespaces.plone.org/diazo/css"\n     xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n \n-    <theme href="theme.html" />\n-    <theme href="othertheme.html" if-path="news"/>\n+    <theme href="python://plone.app.theming/tests/theme.html" />\n+    <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n \n     <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n     <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\ndiff --git a/src/plone/app/theming/tests/rules.xml b/src/plone/app/theming/tests/rules.xml\nindex e6ffca4..641c15a 100644\n--- a/src/plone/app/theming/tests/rules.xml\n+++ b/src/plone/app/theming/tests/rules.xml\n@@ -6,8 +6,8 @@\n \n     <rules css:if-content="#visual-portal-wrapper">\n \n-        <theme href="othertheme.html" if-path="news"/>\n-        <theme href="theme.html" />\n+        <theme href="python://plone.app.theming/tests/othertheme.html" if-path="news"/>\n+        <theme href="python://plone.app.theming/tests/theme.html" />\n \n         <replace content=\'/html/head/title\' theme=\'/html/head/title\' />\n         <replace content=\'//h1[class=documentFirstHeading]\' theme=\'/html/body/h1\' />\ndiff --git a/src/plone/app/theming/tests/test_transform.py b/src/plone/app/theming/tests/test_transform.py\nindex 92330a7..aafd71b 100644\n--- a/src/plone/app/theming/tests/test_transform.py\n+++ b/src/plone/app/theming/tests/test_transform.py\n@@ -212,25 +212,15 @@ def test_theme_enabled_header_off(self):\n         # The theme\n         self.assertFalse("This is the theme" in browser.contents)\n \n-    def test_internal_resolver(self):\n-        compiler_parser = etree.XMLParser()\n-        compiler_parser.resolvers.add(InternalResolver())\n-        # We can use a sub-package or a directory since tests is a python\n-        # package\n-        theme = resolvePythonURL(\n-            u\'python://plone.app.theming.tests/theme.html\'\n-        )\n-        rules = resolvePythonURL(u\'python://plone.app.theming/tests/rules.xml\')\n-        compile_theme(rules, theme, compiler_parser=compiler_parser)\n-\n     def test_python_resolver(self):\n-        compiler_parser = etree.XMLParser()\n-        compiler_parser.resolvers.add(PythonResolver())\n+        # The rules contain a python:// link, so we need a python resolver.\n+        parser = etree.HTMLParser()\n+        parser.resolvers.add(PythonResolver())\n         theme = resolvePythonURL(\n             u\'python://plone.app.theming.tests/theme.html\'\n         )\n         rules = resolvePythonURL(u\'python://plone.app.theming/tests/rules.xml\')\n-        compile_theme(rules, theme, compiler_parser=compiler_parser)\n+        compile_theme(rules, theme, parser=parser)\n \n     def test_theme_stored_in_plone_site(self):\n         app = self.layer[\'app\']\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 4ab1d88..4629d41 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,12 +1,39 @@\n # -*- coding: utf-8 -*-\n+from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n+from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import extractThemeInfo\n+from plone.app.theming.utils import getTheme\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.testing.zope import Browser\n \n import os.path\n+import tempfile\n+import transaction\n import unittest\n import zipfile\n \n \n+# We will try to let the rules file point to a theme on the file system.\n+# For security reasons, this should not work.\n+# This is one of the fixes from PloneHotFix20210518.\n+RULES = """<?xml version="1.0" encoding="UTF-8"?>\n+<rules\n+    xmlns="http://namespaces.plone.org/diazo"\n+    xmlns:css="http://namespaces.plone.org/diazo/css"\n+    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">\n+        <theme href="{0}" />\n+</rules>\n+"""\n+# The theme will contain a message:\n+MESSAGE = u"Hello from a temporary directory."\n+# We have a sample theme file here:\n+HERE = os.path.dirname(__file__)\n+PACKAGE_THEME_FILENAME = "package_theme.txt"\n+PACKAGE_THEME = os.path.join(HERE, PACKAGE_THEME_FILENAME)\n+\n+\n class TestIntegration(unittest.TestCase):\n \n     layer = THEMING_INTEGRATION_TESTING\n@@ -420,3 +447,146 @@ def test_extractThemeInfo_with_subdirectories(self):\n                 u\'/++theme++subdirectories/rules.xml\'\n             )\n             self.assertEqual(theme.absolutePrefix, \'/++theme++subdirectories\')\n+\n+\n+class TestAttackVector(unittest.TestCase):\n+    layer = THEMING_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        rules_fd, self.rules_file = tempfile.mkstemp(\n+            suffix=".xml", prefix="rules", text=True\n+        )\n+        with open(self.rules_file, "w") as myfile:\n+            myfile.write(MESSAGE)\n+\n+    def tearDown(self):\n+        os.remove(self.rules_file)\n+\n+    def get_admin_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        browser.addHeader(\n+            "Authorization",\n+            "Basic {0}:{1}".format(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        return browser\n+\n+    def get_anon_browser(self):\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        return browser\n+\n+    def test_failing_file_protocol_resolver(self):\n+        from plone.app.theming.utils import FailingFileProtocolResolver\n+\n+        resolver = FailingFileProtocolResolver()\n+        with self.assertRaises(ValueError):\n+            resolver.resolve("file:///etc/passwd", "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(\n+                "file:" + os.path.relpath("/etc/passwd"), "public_id", "context"\n+            )\n+        with self.assertRaises(ValueError):\n+            resolver.resolve("file://" + self.rules_file, "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(\n+                "file:" + os.path.relpath(self.rules_file), "public_id", "context"\n+            )\n+\n+    def test_failing_file_system_resolver(self):\n+        from plone.app.theming.utils import FailingFileSystemResolver\n+\n+        resolver = FailingFileSystemResolver()\n+        with self.assertRaises(ValueError):\n+            resolver.resolve("/etc/passwd", "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(os.path.relpath("/etc/passwd"), "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(self.rules_file, "public_id", "context")\n+        with self.assertRaises(ValueError):\n+            resolver.resolve(os.path.relpath(self.rules_file), "public_id", "context")\n+\n+    def new_theme(self, theme_path):\n+        from plone.app.theming.utils import createThemeFromTemplate\n+        from plone.resource.directory import PersistentResourceDirectory\n+\n+        # Start with an empty theme.\n+        # Pass title and description\n+        theme_name = createThemeFromTemplate("Security", "")\n+        theme = getTheme(theme_name)\n+        directory = PersistentResourceDirectory()\n+        directory.writeFile(\n+            "/".join(["theme", theme_name, "rules.xml"]), RULES.format(theme_path)\n+        )\n+        applyTheme(theme)\n+        transaction.commit()\n+\n+    def test_theme_file_system_absolute(self):\n+        self.new_theme(self.rules_file)\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_file_system_relative(self):\n+        self.new_theme(os.path.relpath(self.rules_file))\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_file_protocol_absolute(self):\n+        self.new_theme("file://" + self.rules_file)\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_file_protocol_relative(self):\n+        # This is actually handled by the InternalResolver.\n+        # Well, in fact it gives an error because it cannot resolve it in the Plone Site:\n+        # AttributeError: \'PersistentResourceDirectory\' object has no attribute \'getPhysicalPath\'\n+        # This can be seen when previewing the theme in the theme editor.\n+        self.new_theme("file:" + os.path.relpath(self.rules_file))\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertNotIn(MESSAGE, browser.contents)\n+\n+    def test_theme_python_protocol(self):\n+        # Since our example rules file is in a Python package,\n+        # we can use the python resolver to access it.\n+        # I don\'t think we can avoid this.\n+        self.new_theme(\n+            "python://plone.app.theming/tests/" + PACKAGE_THEME_FILENAME\n+        )\n+        with open(PACKAGE_THEME) as myfile:\n+            contents = myfile.read()\n+        browser = self.get_anon_browser()\n+        browser.open(self.portal.absolute_url())\n+        self.assertIn(contents, browser.contents)\n+\n+    def test_available_themes(self):\n+        """Test that all available themes render properly.\n+\n+        Our security fixes should not break them.\n+        """\n+        from plone.app.theming.utils import getAvailableThemes\n+\n+        for theme in getAvailableThemes():\n+            applyTheme(theme)\n+            transaction.commit()\n+            # Can you view the portal anonymously?\n+            browser = self.get_anon_browser()\n+            browser.open(self.portal.absolute_url())\n+            # Can you see the preview as admin?\n+            # This can give errors that are otherwise swallowed by the\n+            # diazo/theming transform, effectively disabling the theme.\n+            if theme.__name__ in ("another-theme", "secondary-theme"):\n+                # Some of the test themes give problems.\n+                # We are only interested in the Sunburst and other official themes.\n+                continue\n+            browser = self.get_admin_browser()\n+            browser.open(\n+                self.portal.absolute_url()\n+                + theme.absolutePrefix\n+                + "/@@theming-controlpanel-mapper-getframe?path=/&theme=apply"\n+                + "&forms=disable&links=replace&title=Preview"\n+            )\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex f2cf3d8..f3ca223 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -33,6 +33,7 @@\n from zope.interface import implementer\n \n import logging\n+import os\n import pkg_resources\n import six\n \n@@ -67,15 +68,57 @@ def theming_policy(request=None):\n \n \n class FailingFileProtocolResolver(etree.Resolver):\n-    """Resolver that fails for security when file:/// urls are tried.\n+    """Resolver that fails for security when file: urls are tried.\n+\n+    Note: an earlier version only checked for "file://", not "file:",\n+    and did not catch relative paths.\n     """\n     def resolve(self, system_url, public_id, context):\n-        if system_url.startswith(\'file://\') and system_url != \'file:///__diazo__\':\n+        if system_url.startswith(\'file:\') and system_url != \'file:///__diazo__\':\n             # The error will be caught by lxml and we only see this in the traceback:\n             # XIncludeError: could not load <system_url>, and no fallback was found\n             raise ValueError("File protocol access not allowed: \'%s\'" % system_url)\n \n \n+class FailingFileSystemResolver(etree.Resolver):\n+    """Resolver that fails for security when accessing the file system.\n+\n+    Problem 1: none of the current plone.app.theming resolvers\n+    resolve file system paths, and yet they get resolved.\n+    So somewhere in etree there is a fallback.\n+\n+    Problem 2: the InternalResolver of plone.app.theming can resolve paths\n+    internal in the Plone Site.  If that happens, then our failing resolver\n+    should not be called.  But the order in which resolvers are called,\n+    seems random, so we cannot rely on the InternalResolver being called first.\n+\n+    So what do we do?\n+\n+    Situation:\n+    - The Plone Site has a theme.html in the site root.\n+    - On the file system there is a file theme.html in the root.\n+\n+    Possibilities when resolving /theme.html:\n+\n+    A. The InternalResolver is called first, and resolves it correctly.\n+    B. Our FailingFileSystemResolver is called first,\n+       sees that the file exists, and raises an error.\n+\n+    In this situation, the resolving would randomly work and not work.\n+    This seems unavoidable, but also seems a corner case\n+    which will not happen very often.\n+\n+    In case the file does not exist on the file system,\n+    our resolver should return nothing.\n+    Then the InternalResolver or other resolvers can have a go.\n+    """\n+    def resolve(self, system_url, public_id, context):\n+        if system_url and os.path.exists(system_url):\n+            # The error will be caught by lxml and we only see this in the traceback:\n+            # XIncludeError: could not load <system_url>, and no fallback was found\n+            raise ValueError("File system access not allowed: \'%s\'" % system_url)\n+\n+\n class NetworkResolver(etree.Resolver):\n     """Resolver for network urls\n     """\n@@ -633,11 +676,14 @@ def getParser(type, readNetwork):\n         parser = etree.HTMLParser()\n     elif type == \'compiler\':\n         parser = etree.XMLParser(resolve_entities=False, remove_pis=True)\n+    # Note: the order in which resolvers are called, seems random.\n+    # They end up in a set.\n     parser.resolvers.add(InternalResolver())\n     parser.resolvers.add(PythonResolver())\n     if readNetwork:\n         parser.resolvers.add(NetworkResolver())\n     parser.resolvers.add(FailingFileProtocolResolver())\n+    parser.resolvers.add(FailingFileSystemResolver())\n     return parser\n \n \n'

