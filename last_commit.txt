Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:34+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/e63aab21d59c964e62bc375c9dba63479edab6a3

Configuring with plone/meta

Files changed:
A .flake8
A .github/workflows/meta.yml
A .meta.toml
A .pre-commit-config.yaml
A dependabot.yml
A news/cfffba8c.internal
M .editorconfig
M .gitignore
M pyproject.toml
M tox.ini

b'diff --git a/.editorconfig b/.editorconfig\nindex c85c9bc4..5b3c112c 100644\n--- a/.editorconfig\n+++ b/.editorconfig\n@@ -1,4 +1,8 @@\n-# EditorConfig Configurtaion file, for more details see:\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+#\n+# EditorConfig Configuration file, for more details see:\n # http://EditorConfig.org\n # EditorConfig is a convention description, that could be interpreted\n # by multiple editors to enforce common coding conventions for specific\n@@ -8,7 +12,9 @@\n # Will ignore other EditorConfig files in Home directory or upper tree level.\n root = true\n \n-[*]  # For All Files\n+\n+[*]\n+# Default settings for all files.\n # Unix-style newlines with a newline ending every file\n end_of_line = lf\n insert_final_newline = true\n@@ -24,19 +30,27 @@ max_line_length = off\n # 4 space indentation\n indent_size = 4\n \n-[*.{yml}]\n+[*.{yml,zpt,pt,dtml,zcml,html,xml}]\n # 2 space indentation\n indent_size = 2\n \n+[*.{json,jsonl,js,jsx,ts,tsx,css,less,scss}]\n+# Frontend development\n+# 2 space indentation\n+indent_size = 2\n+max_line_length = 80\n+\n [{Makefile,.gitmodules}]\n # Tab indentation (no size specified, but view as 4 spaces)\n indent_style = tab\n indent_size = unset\n tab_width = unset\n \n-[*.bat]\n-indent_style = tab\n-end_of_line = crlf\n \n-[LICENSE]\n-insert_final_newline = false\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [editorconfig]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 00000000..38918f42\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,22 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [flake8]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.github/workflows/meta.yml b/.github/workflows/meta.yml\nnew file mode 100644\nindex 00000000..064618d8\n--- /dev/null\n+++ b/.github/workflows/meta.yml\n@@ -0,0 +1,66 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+name: Meta\n+on:\n+  push:\n+    branches:\n+      - master\n+      - main\n+  pull_request:\n+    branches:\n+      - master\n+      - main\n+  workflow_dispatch:\n+\n+##\n+# To set environment variables for all jobs, add in .meta.toml:\n+# [github]\n+# env = """\n+#     debug: 1\n+#     image-name: \'org/image\'\n+#     image-tag: \'latest\'\n+# """\n+##\n+\n+jobs:\n+  qa:\n+    uses: plone/meta/.github/workflows/qa.yml@main\n+  test:\n+    uses: plone/meta/.github/workflows/test.yml@main\n+  coverage:\n+    uses: plone/meta/.github/workflows/coverage.yml@main\n+  dependencies:\n+    uses: plone/meta/.github/workflows/dependencies.yml@main\n+  release_ready:\n+    uses: plone/meta/.github/workflows/release_ready.yml@main\n+\n+##\n+# To modify the list of default jobs being created add in .meta.toml:\n+# [github]\n+# jobs = [\n+#    "qa",\n+#    "test",\n+#    "coverage",\n+#    "dependencies",\n+#    "release_ready",\n+#    "circular",\n+#    ]\n+##\n+\n+##\n+# To request that some OS level dependencies get installed\n+# when running tests/coverage jobs, add in .meta.toml:\n+# [github]\n+# os_dependencies = "git libxml2 libxslt"\n+##\n+\n+\n+##\n+# Specify additional jobs in .meta.toml:\n+#  [github]\n+#  extra_lines = """\n+#  another:\n+#    uses: org/repo/.github/workflows/file.yml@main\n+#  """\n+##\ndiff --git a/.gitignore b/.gitignore\nindex 6cb56eb9..486392f6 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,28 +1,56 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+# python related\n+*.egg-info\n+*.pyc\n+*.pyo\n+\n+# translation related\n *.mo\n-*.py[cod]\n-*~\n-/.Python\n-/.coverage*\n-/.installed.cfg\n-/bin/\n-/build/\n-/coverage*\n-/develop-eggs/\n-/dist/\n-/docs/Makefile\n-/docs/html/\n-/eggs/\n-/htmlcov\n-/include/\n-/lib/\n-/local.cfg\n-/local/\n-/parts/\n-/share/\n-/src/plone.api.egg-info/\n-/var/\n-/reports/\n-/pip-selfcheck.json\n-/_build/\n-/.tox/\n+\n+# tools related\n+build/\n+.coverage\n+.*project\n+coverage.xml\n+dist/\n+docs/_build\n+__pycache__/\n+.tox\n+.vscode/\n+node_modules/\n+\n+# venv / buildout related\n+bin/\n+develop-eggs/\n+eggs/\n+.eggs/\n+etc/\n+.installed.cfg\n+include/\n+lib/\n+lib64\n+.mr.developer.cfg\n+parts/\n pyvenv.cfg\n+var/\n+local.cfg\n+\n+# mxdev\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\n+.installed.txt\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [gitignore]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..d0ae1c53\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,141 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[meta]\n+template = "default"\n+commit-id = "1c2155e4"\n+\n+[pre_commit]\n+codespell_extra_lines = """\n+        exclude: docs/locale/.*.pot\n+"""\n+\n+[pyproject]\n+check_manifest_ignores = """\n+    ".editorconfig",\n+    "*.cfg",\n+    "constraints_plone52.txt",\n+    "constraints_plone60.txt",\n+    "constraints.txt",\n+    "fix-converted-myst.py",\n+    "Makefile",\n+    "netlify.toml",\n+    "requirements-docs.txt",\n+    "requirements.txt",\n+"""\n+dependencies_ignores = "[\'Products.PrintingMailHost\', \'plone.app.iterate\',]"\n+codespell_ignores = "manuel"\n+\n+[tox]\n+envlist_lines = """\n+    py{38,39,310,311}-plone{60}\n+    linkcheck\n+    plone6docs\n+    docs\n+"""\n+config_lines = """\n+skip_missing_interpreters = True\n+\n+[gh-actions]\n+python =\n+    3.8: py38\n+    3.9: py39\n+    3.10: py310\n+    3.11: py311\n+\n+[gh-actions:env]\n+PLONE =\n+    60: plone60\n+"""\n+extra_lines = """\n+[testenv:py{38,39,310,311}-plone{60}]\n+skip_install = True\n+\n+commands =\n+    python -VV\n+    pip install -r requirements.txt\n+    pip list\n+    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} install test\n+    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n+    {envbindir}/test\n+\n+setenv =\n+    BUILDOUT_FILE=test_plone-60.cfg\n+\n+deps =\n+    pdbpp\n+    manuel\n+\n+# tox < 4.0.0\n+whitelist_externals =\n+    mkdir\n+    echo\n+\n+# tox >= 4.0.0\n+allowlist_externals =\n+    mkdir\n+    echo\n+\n+[testenv:plone6docs]\n+# New docs with sphinx-book-theme\n+# See [testenv:docs] for classic documentation\n+basepython = python3.9\n+skip_install = False\n+usedevelop = True\n+allowlist_externals =\n+    mkdir\n+extras =\n+    tests\n+\n+deps =\n+    -r requirements-docs.txt\n+\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n+\n+[testenv:docs]\n+basepython = python3.9\n+skip_install = False\n+usedevelop = True\n+allowlist_externals =\n+    mkdir\n+extras =\n+    tests\n+\n+deps =\n+    -r requirements-docs.txt\n+\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/docs\n+    sphinx-build -b html -D html_theme=alabaster -d _build/docs/doctrees docs _build/docs/html\n+\n+whitelist_externals =\n+    mkdir\n+\n+[testenv:linkcheck]\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+allowlist_externals =\n+    mkdir\n+extras =\n+    {[testenv:plone6docs]extras}\n+deps =\n+    {[testenv:plone6docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n+"""\n+\n+[github]\n+jobs = [\n+    "qa",\n+    "test",\n+    "coverage",\n+    "dependencies",\n+    "release_ready",\n+    ]\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..5c2addd6\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,95 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.15.2\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.13.2\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 24.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.1.0\n+    hooks:\n+    -   id: zpretty\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  zpretty_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 7.0.0\n+    hooks:\n+    -   id: flake8\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  flake8_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.6\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+        exclude: docs/locale/.*.pot\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  codespell_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\n+-   repo: https://github.com/mgedmin/check-python-versions\n+    rev: "0.22.0"\n+    hooks:\n+    -   id: check-python-versions\n+        args: [\'--only\', \'setup.py,pyproject.toml\']\n+-   repo: https://github.com/collective/i18ndude\n+    rev: "6.1.0"\n+    hooks:\n+    -   id: i18ndude\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  i18ndude_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/dependabot.yml b/dependabot.yml\nnew file mode 100644\nindex 00000000..bbd3ab05\n--- /dev/null\n+++ b/dependabot.yml\n@@ -0,0 +1,11 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+version: 2\n+updates:\n+\n+  - package-ecosystem: "github-actions"\n+    directory: "/"\n+    schedule:\n+      # Check for updates to GitHub Actions every week\n+      interval: "weekly"\ndiff --git a/news/cfffba8c.internal b/news/cfffba8c.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/cfffba8c.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 057abc23..2066aabf 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,6 +1,12 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[build-system]\n+requires = ["setuptools>=68.2"]\n+\n [tool.towncrier]\n-filename = "CHANGES.rst"\n directory = "news/"\n+filename = "CHANGES.rst"\n title_format = "{version} ({project_date})"\n underlines = ["-", ""]\n \n@@ -27,4 +33,145 @@ showcontent = true\n [[tool.towncrier.type]]\n directory = "documentation"\n name = "Documentation:"\n-showcontent = true\n\\ No newline at end of file\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  towncrier_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.isort]\n+profile = "plone"\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  isort_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  black_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.codespell]\n+ignore-words-list = "discreet,manuel"\n+skip = "*.po,"\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  codespell_ignores = "foo,bar"\n+#  codespell_skip = "*.po,*.map,package-lock.json"\n+##\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'Products.PrintingMailHost\', \'plone.app.iterate\',]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  dependencies_ignores = "[\'zestreleaser.towncrier\']"\n+#  dependencies_mappings = [\n+#    "gitpython = [\'git\']",\n+#    "pygithub = [\'github\']",\n+#  ]\n+##\n+\n+[tool.check-manifest]\n+ignore = [\n+    ".editorconfig",\n+    ".flake8",\n+    ".meta.toml",\n+    ".pre-commit-config.yaml",\n+    "dependabot.yml",\n+    "mx.ini",\n+    "tox.ini",\n+    ".editorconfig",\n+    "*.cfg",\n+    "constraints_plone52.txt",\n+    "constraints_plone60.txt",\n+    "constraints.txt",\n+    "fix-converted-myst.py",\n+    "Makefile",\n+    "netlify.toml",\n+    "requirements-docs.txt",\n+    "requirements.txt",\n+\n+]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  check_manifest_ignores = """\n+#      "*.map.js",\n+#      "*.pyc",\n+#  """\n+#  check_manifest_extra_lines = """\n+#  ignore-bad-ideas = [\n+#      "some/test/file/PKG-INFO",\n+#  ]\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/tox.ini b/tox.ini\nindex 4ec548d9..701ba2af 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,13 +1,14 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py{38,39,310,311}-plone{60}\n-    # towncrier\n-    # black-enforce\n-    black-check\n-    # isort-apply\n-    isort\n     lint\n-#    coverage-report\n+    test\n+    dependencies\n+    py{38,39,310,311}-plone{60}\n     linkcheck\n     plone6docs\n     docs\n@@ -25,126 +26,233 @@ python =\n PLONE =\n     60: plone60\n \n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  envlist_lines = """\n+#      my_other_environment\n+#  """\n+#  config_lines = """\n+#  my_extra_top_level_tox_configuration_lines\n+#  """\n+##\n \n [testenv]\n-skip_install = True\n-\n-commands =\n-    python -VV\n-    pip install -r requirements.txt\n-    pip list\n-    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} install test\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n-    {envbindir}/test\n-\n-setenv =\n-    BUILDOUT_FILE=test_plone-60.cfg\n-\n-deps =\n-    pdbpp\n-    manuel\n-\n-# tox < 4.0.0\n-whitelist_externals =\n-    mkdir\n-    echo\n-\n-# tox >= 4.0.0\n+skip_install = true\n allowlist_externals =\n-    mkdir\n     echo\n+    false\n+# Make sure typos like `tox -e formaat` are caught instead of silently doing nothing.\n+# See https://github.com/tox-dev/tox/issues/2858.\n+commands =\n+    echo "Unrecognized environment name {envname}"\n+    false\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  testenv_options = """\n+#  basepython = /usr/bin/python3.8\n+#  """\n+##\n+\n+[testenv:init]\n+description = Prepare environment\n+skip_install = true\n+commands =\n+    echo "Initial setup complete"\n \n-[testenv:coverage-report]\n-basepython = python3.9\n-deps = coverage\n-\n-setenv =\n-    COVERAGE_FILE=.coverage\n-\n-skip_install = True\n \n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n commands =\n-    python -VV\n-    coverage erase\n-    coverage combine\n-    coverage report\n-    coverage html\n-    coverage xml\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n \n-[testenv:black-check]\n-basepython = python3.9\n-skip_install = True\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n deps =\n-    black\n-\n+    pre-commit\n commands =\n-    python -VV\n-    black --check --diff -v src setup.py\n+    pre-commit run -a\n \n-[testenv:black-enforce]\n-basepython = python3.9\n-skip_install = True\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n deps =\n-    black\n-\n+    build\n+    z3c.dependencychecker==2.14.3\n commands =\n-    python -VV\n-    black -v src setup.py\n+    python -m build --sdist\n+    dependencychecker\n \n-[testenv:isort]\n-basepython = python3.9\n-skip_install = True\n+[testenv:dependencies-graph]\n+description = generate a graph out of the dependencies of the package\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the distribution tests\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+#\n+# Set constrain_package_deps .meta.toml:\n+#  [tox]\n+#  constrain_package_deps = "false"\n+##\n deps =\n-    isort\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+\n+##\n+# Specify additional deps in .meta.toml:\n+#  [tox]\n+#  test_deps_additional = "-esources/plonegovbr.portal_base[test]"\n+#\n+# Specify a custom constraints file in .meta.toml:\n+#  [tox]\n+#  constraints_file = "https://my-server.com/constraints.txt"\n+##\n+commands =\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.api {posargs}\n+extras =\n+    test\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  test_extras = """\n+#      tests\n+#      widgets\n+#  """\n+##\n+\n+[testenv:coverage]\n+description = get a test coverage report\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n \n commands =\n-    python -VV\n-    isort --check-only --diff src setup.py\n+    coverage run --branch --source plone.api {envbindir}/zope-testrunner --quiet --all --test-path={toxinidir}/src -s plone.api {posargs}\n+    coverage report -m --format markdown\n+    coverage xml\n+    coverage html\n+extras =\n+    test\n \n-[testenv:isort-apply]\n-basepython = python3.9\n-skip_install = True\n \n+[testenv:release-check]\n+description = ensure that the distribution is ready to release\n+skip_install = true\n deps =\n-    isort\n+    twine\n+    build\n+    towncrier\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n \n commands =\n-    python -VV\n-    isort src setup.py {posargs}\n+    # fake version to not have to install the package\n+    # we build the change log as news entries might break\n+    # the README that is displayed on PyPI\n+    towncrier build --version=100.0.0 --yes\n+    python -m build --sdist\n+    twine check dist/*\n+\n+[testenv:circular]\n+description = ensure there are no cyclic dependencies\n+use_develop = true\n+skip_install = false\n+# Here we must always constrain the package deps to what is already installed,\n+# otherwise we simply get the latest from PyPI, which may not work.\n+constrain_package_deps = true\n+set_env =\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree\n+    pipforester\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n \n-[testenv:lint]\n-basepython = python3.9\n+commands =\n+    # Generate the full dependency tree\n+    sh -c \'pipdeptree -j > forest.json\'\n+    # Generate a DOT graph with the circular dependencies, if any\n+    pipforester -i forest.json -o forest.dot --cycles\n+    # Report if there are any circular dependencies, i.e. error if there are any\n+    pipforester -i forest.json --check-cycles -o /dev/null\n+\n+[testenv:py{38,39,310,311}-plone{60}]\n skip_install = True\n \n-deps =\n-    Jinja2<=3.0.3\n-    isort\n-    flake8\n-    # helper to generate HTML reports:\n-    flake8-html\n-    flake8-blind-except\n-    flake8-coding\n-    # flake8-commas\n-    flake8-debugger\n-    flake8-deprecated\n-    # flake8-docstrings\n-    flake8-isort\n-    flake8-pep3101\n-    flake8-plone-hasattr\n-    flake8-print\n-    # flake8-quotes\n-    flake8-string-format\n-    flake8-todo\n-\n commands =\n     python -VV\n-    mkdir -p {toxinidir}/_build/flake8\n-    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 --ignore=C101 src setup.py\n-    flake8 --ignore=C101,P101,Q000 src setup.py\n+    pip install -r requirements.txt\n+    pip list\n+    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} install test\n+    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n+    {envbindir}/test\n+\n+setenv =\n+    BUILDOUT_FILE=test_plone-60.cfg\n \n+deps =\n+    pdbpp\n+    manuel\n+\n+# tox < 4.0.0\n whitelist_externals =\n     mkdir\n+    echo\n \n+# tox >= 4.0.0\n+allowlist_externals =\n+    mkdir\n+    echo\n \n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n@@ -152,6 +260,8 @@ whitelist_externals =\n basepython = python3.9\n skip_install = False\n usedevelop = True\n+allowlist_externals =\n+    mkdir\n extras =\n     tests\n \n@@ -163,11 +273,12 @@ commands =\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n \n-\n [testenv:docs]\n basepython = python3.9\n skip_install = False\n usedevelop = True\n+allowlist_externals =\n+    mkdir\n extras =\n     tests\n \n@@ -182,11 +293,12 @@ commands =\n whitelist_externals =\n     mkdir\n \n-\n [testenv:linkcheck]\n basepython = python\n skip_install = False\n usedevelop = True\n+allowlist_externals =\n+    mkdir\n extras =\n     {[testenv:plone6docs]extras}\n deps =\n@@ -196,13 +308,10 @@ commands =\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n-\n-[testenv:towncrier]\n-basepython = python\n-skip_install = True\n-\n-deps=\n-    towncrier\n-\n-commands =\n-    towncrier --draft\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:34+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/1948ac03fc2265d32b886fe956c556327f738965

cleanup(gha): remove now duplicated actions

Files changed:
D .github/workflows/black.yml
D .github/workflows/isort.yml

b"diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\ndeleted file mode 100644\nindex fc5371c7..00000000\n--- a/.github/workflows/black.yml\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-name: Black\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.9]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v4\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v4\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-      - name: Install dependencies\n-        run: |\n-          python -m pip install --upgrade pip\n-          pip install tox tox-gh-actions\n-\n-      # python cache\n-      - uses: actions/cache@v3\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n-\n-      - name: Test with tox\n-        run: tox -e black-check\ndiff --git a/.github/workflows/isort.yml b/.github/workflows/isort.yml\ndeleted file mode 100644\nindex 3176e03f..00000000\n--- a/.github/workflows/isort.yml\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-name: Isort\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: true\n-      matrix:\n-        python-version: [3.9]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v4\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v4\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-      - name: Install dependencies\n-        run: |\n-          python -m pip install --upgrade pip\n-          pip install tox tox-gh-actions\n-\n-      # python cache\n-      - uses: actions/cache@v3\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}\n-\n-      - name: Test with tox\n-        run: tox -e isort\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:34+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/af85bd29397f30f450293c87c6affaf8b877e25f

chore: remove not needed sections

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex 84355524..c11c22e5 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,26 +1,3 @@\n-[check-manifest]\n-ignore =\n-    .editorconfig\n-    *.cfg\n-    constraints_plone52.txt\n-    constraints_plone60.txt\n-    constraints.txt\n-    fix-converted-myst.py\n-    Makefile\n-    netlify.toml\n-    requirements-docs.txt\n-    requirements.txt\n-\n-[flake8]\n-max-line-length = 88\n-extend-ignore = E203, W503\n-\n-[isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n-\n [coverage:run]\n branch = True\n source =\n@@ -41,6 +18,3 @@ omit =\n \n [coverage:html]\n directory = _build/coverage\n-\n-[bdist_wheel]\n-universal = 0\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:34+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/dcd0260819e5ebd8def8a320023714a8b1642f61

chore: run pyupgrade

Files changed:
M src/plone/api/content.py
M src/plone/api/portal.py
M src/plone/api/relation.py
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_doctests.py

b'diff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 6be66dec..19865baf 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -127,7 +127,7 @@ def get(path=None, UID=None):\n     if path:\n         site = portal.get()\n         site_absolute_path = "/".join(site.getPhysicalPath())\n-        if not path.startswith("{path}".format(path=site_absolute_path)):\n+        if not path.startswith(f"{site_absolute_path}"):\n             path = "{site_path}{relative_path}".format(\n                 site_path=site_absolute_path,\n                 relative_path=path,\n@@ -297,7 +297,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n             raise LinkIntegrityNotificationException(\n-                "Linkintegrity-breaches: {}".format(breaches),\n+                f"Linkintegrity-breaches: {breaches}",\n             )\n \n     for obj_ in objects:\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 1aec4997..6080093f 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -280,7 +280,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = registry.forInterface(interface, check=False)\n         _marker = object()\n         if getattr(records, name, _marker) != _marker:\n-            return registry["{}.{}".format(interface.__identifier__, name)]\n+            return registry[f"{interface.__identifier__}.{name}"]\n \n         if default is not MISSING:\n             return default\n@@ -307,7 +307,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     # Show all records that \'look like\' name.\n     # We don\'t dump the whole list, because it 1500+ items.\n-    msg = "Cannot find a record with name \'{name}\'".format(name=name)\n+    msg = f"Cannot find a record with name \'{name}\'"\n     records = [key for key in registry.records.keys() if name in key]\n     if records:\n         msg = (\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 5540d4ca..bf39a8aa 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -76,16 +76,16 @@ def get(\n     :Example: :ref:`relation-get-example`\n     """\n     if source is not None and not base_hasattr(source, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(source))\n+        raise InvalidParameterError(f"{source} has no portal_type")\n \n     if target is not None and not base_hasattr(target, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(target))\n+        raise InvalidParameterError(f"{target} has no portal_type")\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError("{} is no string".format(relationship))\n+        raise InvalidParameterError(f"{relationship} is no string")\n \n     intids = getUtility(IIntIds)\n     relation_catalog = getUtility(ICatalog)\n@@ -150,13 +150,13 @@ def create(source=None, target=None, relationship=None):\n     :Example: :ref:`relation-create-example`\n     """\n     if source is not None and not base_hasattr(source, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(source))\n+        raise InvalidParameterError(f"{source} has no portal_type")\n \n     if target is not None and not base_hasattr(target, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(target))\n+        raise InvalidParameterError(f"{target} has no portal_type")\n \n     if not isinstance(relationship, str):\n-        raise InvalidParameterError("{} is no string".format(relationship))\n+        raise InvalidParameterError(f"{relationship} is no string")\n \n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n@@ -267,16 +267,16 @@ def delete(source=None, target=None, relationship=None):\n     :Example: :ref:`relation-delete-example`\n     """\n     if source is not None and not base_hasattr(source, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(source))\n+        raise InvalidParameterError(f"{source} has no portal_type")\n \n     if target is not None and not base_hasattr(target, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(target))\n+        raise InvalidParameterError(f"{target} has no portal_type")\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError("{} is no string".format(relationship))\n+        raise InvalidParameterError(f"{relationship} is no string")\n \n     query = {}\n     relation_catalog = getUtility(ICatalog)\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 637b1c64..41caebc0 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -461,7 +461,7 @@ def test_get(self):\n \n         # Test getting the team document by path that has portal id included\n         team_by_path = api.content.get(\n-            "/{}/about/team".format(self.portal.getId()),\n+            f"/{self.portal.getId()}/about/team",\n         )\n         self.assertEqual(self.team, team_by_path)\n \ndiff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex 26a2fb18..53f9b1d4 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -125,7 +125,7 @@ def test_suite():\n             doctests.append(DocFileSuite(os.path.join(path, filename)))\n         except OSError:\n             logger.warning(\n-                "test_doctest.py skipping {file}".format(file=filename),\n+                f"test_doctest.py skipping {filename}",\n             )\n \n     return unittest.TestSuite(doctests)\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/e5ba4eb550a624220e81e7785ebbc23d2320683f

chore: run isort

Files changed:
M docs/conf.py
M fix-converted-myst.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 788a5059..d5270674 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -2,6 +2,7 @@\n \n import sys\n \n+\n project = \'plone.api\'\n copyright = \'2012, Plone Foundation\'\n \ndiff --git a/fix-converted-myst.py b/fix-converted-myst.py\nindex e5053e69..62f3ca2f 100644\n--- a/fix-converted-myst.py\n+++ b/fix-converted-myst.py\n@@ -2,6 +2,7 @@\n import os\n import re\n \n+\n logging.basicConfig()\n logger = logging.getLogger("fix converted MyST documentation")\n logger.setLevel(logging.INFO)\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/d39f27a3bbe5d6160c768ff4a53642e6a176e749

chore: run black

Files changed:
M docs/conf.py
M fix-converted-myst.py
M src/plone/api/content.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex d5270674..9492f0a8 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -3,8 +3,8 @@\n import sys\n \n \n-project = \'plone.api\'\n-copyright = \'2012, Plone Foundation\'\n+project = "plone.api"\n+copyright = "2012, Plone Foundation"\n \n version = release = get_distribution(project).version\n \n@@ -16,29 +16,31 @@\n }\n \n extensions = [\n-    \'sphinx.ext.doctest\',\n-    \'sphinx.ext.coverage\',\n-    \'sphinx.ext.autodoc\',\n-    \'sphinx.ext.viewcode\',\n-    \'sphinx.ext.autosummary\',\n+    "sphinx.ext.doctest",\n+    "sphinx.ext.coverage",\n+    "sphinx.ext.autodoc",\n+    "sphinx.ext.viewcode",\n+    "sphinx.ext.autosummary",\n     "myst_parser",\n     "sphinx.ext.todo",\n ]\n-master_doc = \'index\'\n+master_doc = "index"\n \n-locale_dirs = [\'translated/\']\n-language = \'en\'\n+locale_dirs = ["translated/"]\n+language = "en"\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual])\n # This enables PDF generation.\n-latex_documents = [(\n-    \'index\',\n-    \'ploneapi.tex\',\n-    \'plone.api Documentation\',\n-    \'\',\n-    \'manual\',\n-)]\n+latex_documents = [\n+    (\n+        "index",\n+        "ploneapi.tex",\n+        "plone.api Documentation",\n+        "",\n+        "manual",\n+    )\n+]\n \n \n class Mock:\n@@ -50,8 +52,8 @@ def __call__(self, *args, **kwargs):\n \n     @classmethod\n     def __getattr__(cls, name):\n-        if name in (\'__file__\', \'__path__\'):\n-            return \'/dev/null\'\n+        if name in ("__file__", "__path__"):\n+            return "/dev/null"\n         elif name[0] == name[0].upper():\n             mockType = type(name, (), {})\n             mockType.__module__ = __name__\n@@ -60,7 +62,7 @@ def __getattr__(cls, name):\n             return Mock()\n \n \n-MOCK_MODULES = [\'lxml\']\n+MOCK_MODULES = ["lxml"]\n for mod_name in MOCK_MODULES:\n     sys.modules[mod_name] = Mock()\n \ndiff --git a/fix-converted-myst.py b/fix-converted-myst.py\nindex 62f3ca2f..3091a14c 100644\n--- a/fix-converted-myst.py\n+++ b/fix-converted-myst.py\n@@ -21,28 +21,27 @@ def replace_label_underscore(data):\n     ->\n     :Example: :ref:`portal-get-tool-example`\n     """\n-    regex_label_underscore = \'(?<=:ref:`)(.*)(?=`)\'\n+    regex_label_underscore = "(?<=:ref:`)(.*)(?=`)"\n \n     def _replace(mobj):\n-        return mobj.group(0).replace(\'_\', \'-\')\n+        return mobj.group(0).replace("_", "-")\n \n-    data = re.sub(\n-        regex_label_underscore, _replace, data)\n+    data = re.sub(regex_label_underscore, _replace, data)\n     return data\n \n \n def remove_github_warning(data):\n     """Remove \'GitHub-only\' warning"""\n-    regex_github_warning = r\':::{admonition} GitHub-only([\\S\\s]*?):::\\n\\n\'\n-    data = re.sub(regex_github_warning, \'\', data, flags=re.DOTALL)\n+    regex_github_warning = r":::{admonition} GitHub-only([\\S\\s]*?):::\\n\\n"\n+    data = re.sub(regex_github_warning, "", data, flags=re.DOTALL)\n     return data\n \n \n-for root, dirs, files in (*os.walk(\'./src\'), *os.walk(\'./docs\')):\n+for root, dirs, files in (*os.walk("./src"), *os.walk("./docs")):\n     for name in files:\n         if name.endswith(".py") or name.endswith(".md"):\n             filename = os.path.join(root, name)\n-            with open(filename, \'r+\') as f:\n+            with open(filename, "r+") as f:\n                 data = f.read()\n                 data = replace_label_underscore(data)\n                 data = remove_github_warning(data)\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 19865baf..95515de9 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -34,7 +34,7 @@ def create(\n     id=None,\n     title=None,\n     safe_id=False,\n-    **kwargs  # NOQA: C816, S101\n+    **kwargs,  # NOQA: C816, S101\n ):\n     """Create a new content item.\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/9b304665a7fa9f2cf9a7cdd8ceb16614ce796499

chore: run zpretty

Files changed:
M src/plone/api/configure.zcml
M src/plone/api/profiles/testfixture/metadata.xml
M src/plone/api/profiles/testfixture/types.xml
M src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml
M src/plone/api/profiles/testfixture/types/Dexterity_Item.xml
M src/plone/api/testing.zcml
M src/plone/api/tests/Dexterity_Folder.xml
M src/plone/api/tests/Dexterity_Item.xml

b'diff --git a/src/plone/api/configure.zcml b/src/plone/api/configure.zcml\nindex c25eee7b..fe29cba6 100644\n--- a/src/plone/api/configure.zcml\n+++ b/src/plone/api/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.api">\n+    i18n_domain="plone.api"\n+    >\n \n </configure>\ndiff --git a/src/plone/api/profiles/testfixture/metadata.xml b/src/plone/api/profiles/testfixture/metadata.xml\nindex 9f02b5ec..db49627f 100644\n--- a/src/plone/api/profiles/testfixture/metadata.xml\n+++ b/src/plone/api/profiles/testfixture/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n   <dependencies>\ndiff --git a/src/plone/api/profiles/testfixture/types.xml b/src/plone/api/profiles/testfixture/types.xml\nindex 9a3e48aa..a70943b1 100644\n--- a/src/plone/api/profiles/testfixture/types.xml\n+++ b/src/plone/api/profiles/testfixture/types.xml\n@@ -1,5 +1,11 @@\n-<?xml version="1.0"?>\n-<object name="portal_types" meta_type="Plone Types Tool">\n- <object name="Dexterity Item" meta_type="Dexterity FTI"/>\n- <object name="Dexterity Folder" meta_type="Dexterity FTI"/>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object meta_type="Plone Types Tool"\n+        name="portal_types"\n+>\n+  <object meta_type="Dexterity FTI"\n+          name="Dexterity Item"\n+  />\n+  <object meta_type="Dexterity FTI"\n+          name="Dexterity Folder"\n+  />\n </object>\ndiff --git a/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml b/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml\nindex 40dd5203..9c61671e 100644\n--- a/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml\n+++ b/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml\n@@ -1,40 +1,62 @@\n-<?xml version="1.0"?>\n-<object name="Dexterity Folder" meta_type="Dexterity FTI"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">Dexterity Folder</property>\n- <property name="description"></property>\n- <property name="content_icon"></property>\n- <property name="link_target"></property>\n- <property name="immediate_view">view</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">False</property>\n- <property name="allowed_content_types"/>\n- <property name="allow_discussion">False</property>\n- <property name="default_view">view</property>\n- <property name="view_methods">\n-  <element value="view"/>\n- </property>\n- <property name="default_view_fallback">False</property>\n- <property name="add_permission">cmf.AddPortalContent</property>\n- <property name="klass">plone.dexterity.content.Container</property>\n- <property name="behaviors">\n-  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>\n- </property>\n- <property name="schema"></property>\n- <property name="model_source"></property>\n- <property name="model_file">plone.api.tests:Dexterity_Folder.xml</property>\n- <alias from="(Default)" to="(dynamic view)"/>\n- <alias from="edit" to="@@edit"/>\n- <alias from="sharing" to="@@sharing"/>\n- <alias from="view" to="(selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}"\n-    visible="True">\n-  <permission value="View"/>\n- </action>\n- <action title="Edit" action_id="edit" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}/edit"\n-    visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Dexterity Folder"\n+>\n+  <property name="title">Dexterity Folder</property>\n+  <property name="description" />\n+  <property name="content_icon" />\n+  <property name="link_target" />\n+  <property name="immediate_view">view</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">False</property>\n+  <property name="allowed_content_types" />\n+  <property name="allow_discussion">False</property>\n+  <property name="default_view">view</property>\n+  <property name="view_methods">\n+    <element value="view" />\n+  </property>\n+  <property name="default_view_fallback">False</property>\n+  <property name="add_permission">cmf.AddPortalContent</property>\n+  <property name="klass">plone.dexterity.content.Container</property>\n+  <property name="behaviors">\n+    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n+  </property>\n+  <property name="schema" />\n+  <property name="model_source" />\n+  <property name="model_file">plone.api.tests:Dexterity_Folder.xml</property>\n+  <alias from="(Default)"\n+         to="(dynamic view)"\n+  />\n+  <alias from="edit"\n+         to="@@edit"\n+  />\n+  <alias from="sharing"\n+         to="@@sharing"\n+  />\n+  <alias from="view"\n+         to="(selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="View"\n+          url_expr="string:${object_url}"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n+  <action action_id="edit"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="Edit"\n+          url_expr="string:${object_url}/edit"\n+          visible="True"\n+  >\n+    <permission value="Modify portal content" />\n+  </action>\n </object>\ndiff --git a/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml b/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml\nindex 3c31f131..74ef9bc0 100644\n--- a/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml\n+++ b/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml\n@@ -1,40 +1,62 @@\n-<?xml version="1.0"?>\n-<object name="Dexterity Item" meta_type="Dexterity FTI"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">Dexterity Item</property>\n- <property name="description"></property>\n- <property name="content_icon"></property>\n- <property name="link_target"></property>\n- <property name="immediate_view">view</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">True</property>\n- <property name="allowed_content_types"/>\n- <property name="allow_discussion">False</property>\n- <property name="default_view">view</property>\n- <property name="view_methods">\n-  <element value="view"/>\n- </property>\n- <property name="default_view_fallback">False</property>\n- <property name="add_permission">cmf.AddPortalContent</property>\n- <property name="klass">plone.dexterity.content.Item</property>\n- <property name="behaviors">\n-  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>\n- </property>\n- <property name="schema"></property>\n- <property name="model_source"></property>\n- <property name="model_file">plone.api.tests:Dexterity_Item.xml</property>\n- <alias from="(Default)" to="(dynamic view)"/>\n- <alias from="edit" to="@@edit"/>\n- <alias from="sharing" to="@@sharing"/>\n- <alias from="view" to="(selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}"\n-    visible="True">\n-  <permission value="View"/>\n- </action>\n- <action title="Edit" action_id="edit" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}/edit"\n-    visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Dexterity Item"\n+>\n+  <property name="title">Dexterity Item</property>\n+  <property name="description" />\n+  <property name="content_icon" />\n+  <property name="link_target" />\n+  <property name="immediate_view">view</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">True</property>\n+  <property name="allowed_content_types" />\n+  <property name="allow_discussion">False</property>\n+  <property name="default_view">view</property>\n+  <property name="view_methods">\n+    <element value="view" />\n+  </property>\n+  <property name="default_view_fallback">False</property>\n+  <property name="add_permission">cmf.AddPortalContent</property>\n+  <property name="klass">plone.dexterity.content.Item</property>\n+  <property name="behaviors">\n+    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n+  </property>\n+  <property name="schema" />\n+  <property name="model_source" />\n+  <property name="model_file">plone.api.tests:Dexterity_Item.xml</property>\n+  <alias from="(Default)"\n+         to="(dynamic view)"\n+  />\n+  <alias from="edit"\n+         to="@@edit"\n+  />\n+  <alias from="sharing"\n+         to="@@sharing"\n+  />\n+  <alias from="view"\n+         to="(selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="View"\n+          url_expr="string:${object_url}"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n+  <action action_id="edit"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="Edit"\n+          url_expr="string:${object_url}/edit"\n+          visible="True"\n+  >\n+    <permission value="Modify portal content" />\n+  </action>\n </object>\ndiff --git a/src/plone/api/testing.zcml b/src/plone/api/testing.zcml\nindex 26d9ce41..1a9fbf15 100644\n--- a/src/plone/api/testing.zcml\n+++ b/src/plone/api/testing.zcml\n@@ -1,17 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.api">\n+    i18n_domain="plone.api"\n+    >\n \n-    <include package="Products.GenericSetup" file="meta.zcml"/>\n+  <include\n+      package="Products.GenericSetup"\n+      file="meta.zcml"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="testfixture"\n-        title="plone.api: Test fixture"\n-        directory="profiles/testfixture"\n-        description="Extension profile to configure a test fixture"\n-        for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="testfixture"\n+      title="plone.api: Test fixture"\n+      description="Extension profile to configure a test fixture"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"\n+      directory="profiles/testfixture"\n+      />\n \n </configure>\ndiff --git a/src/plone/api/tests/Dexterity_Folder.xml b/src/plone/api/tests/Dexterity_Folder.xml\nindex d93a4890..b1bc2ab7 100644\n--- a/src/plone/api/tests/Dexterity_Folder.xml\n+++ b/src/plone/api/tests/Dexterity_Folder.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" ?>\n+<?xml version="1.0" encoding="utf-8"?>\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n- <schema />\n+  <schema />\n </model>\ndiff --git a/src/plone/api/tests/Dexterity_Item.xml b/src/plone/api/tests/Dexterity_Item.xml\nindex d93a4890..b1bc2ab7 100644\n--- a/src/plone/api/tests/Dexterity_Item.xml\n+++ b/src/plone/api/tests/Dexterity_Item.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" ?>\n+<?xml version="1.0" encoding="utf-8"?>\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n- <schema />\n+  <schema />\n </model>\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/bc3a1cb63215b85c8ea1ab47075e3bf032e696b8

chore: codespell typos

Files changed:
M CHANGES.rst
M docs/contribute/develop.md
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py
M src/plone/api/user.py
M src/plone/api/validation.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 65640cd8..8f5c9e19 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -84,8 +84,8 @@ Bug fixes:\n \n \n - Do not run GitHub Actions tests twice.\n-  Only run GitHub Actions tests when commiting directly against master or main or\n-  opening a pull request agains master or main. This avoids to run the same test\n+  Only run GitHub Actions tests when committing directly against master or main or\n+  opening a pull request against master or main. This avoids to run the same test\n   suite for the same environment twice.\n   [thet] (#0)\n - Mockup TinyMCE settings: Remove unused AtD related views.\n@@ -474,7 +474,7 @@ Bug fixes:\n - Simplify the ``plone.api.content.delete`` method.\n   [thet]\n \n-- content.copy with safe_id=False should raise it\'s own exeception. Fixes #340\n+- content.copy with safe_id=False should raise it\'s own exception. Fixes #340\n   [jaroel]\n \n \ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex ccfe51b0..c2b0a699 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -70,7 +70,7 @@ Our repository on GitHub has the following layout:\n - **feature branches**: all development for new features must be done in\n   dedicated branches, normally one branch per feature,\n - **master branch**: when features get completed they are merged into the\n-  master branch; bugfixes are commited directly on the master branch,\n+  master branch; bugfixes are committed directly on the master branch,\n - **tags**: whenever we create a new release we tag the repository so we can\n   later re-trace our steps, re-release versions, etc.\n \ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 3086a4d4..e56161ba 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -486,7 +486,7 @@ def test_argument_requirement(self):\n             api.env.adopt_roles()\n \n     def test_debug_mode(self):\n-        """Tests that the retured value is the same as\n+        """Tests that the returned value is the same as\n         getConfiguration.debug_mode."""\n         from App.config import getConfiguration\n         from plone.api.env import debug_mode\ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex c1718d48..d3ac9770 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -77,7 +77,7 @@ def test_create_with_roles_and_groups(self):\n         self.assertIn("Reviewer", ham_group.getMemberIds())\n \n     def test_get_constraints(self):\n-        """Test the constraints for geting a group."""\n+        """Test the constraints for getting a group."""\n         from plone.api.exc import MissingParameterError\n \n         with self.assertRaises(MissingParameterError):\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex a467ba1a..39992127 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -520,7 +520,7 @@ def test_get_invalid_registry_record(self):\n \n     def test_get_invalid_registry_record_msg(self):\n         """Test that the error message from trying to get a\n-        nonexistant registry record produces an error message which\n+        nonexistent registry record produces an error message which\n         lists suggested registry records.\n         """\n         from plone.api.exc import InvalidParameterError\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 742383ac..bfc770e3 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -168,7 +168,7 @@ def test_create_no_roles(self):\n         )\n \n     def test_get_constraints(self):\n-        """Test on raised exeption if no username is given when getting the user."""\n+        """Test on raised exception if no username is given when getting the user."""\n         from plone.api.exc import MissingParameterError\n \n         with self.assertRaises(MissingParameterError):\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 206cbe70..1ac97d16 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -34,7 +34,7 @@ def create(\n         is not used as a username.\n     :type username: string\n     :param password: Password for the new user. If it\'s not set we generate\n-        a random 8-char alpha-numeric one.\n+        a random 8-char alphanumeric one.\n     :type password: string\n     :param properties: User properties to assign to the new user. The list of\n         available properties is available in ``portal_memberdata`` through ZMI.\ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex ff972b09..d8e52b71 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -10,7 +10,7 @@\n def _get_arg_spec(func, validator_args):\n     """Get the arguments specified in the function spec.\n \n-    and check that the decorator doesn\'t refer to non-existant args.\n+    and check that the decorator doesn\'t refer to non-existent args.\n     """\n     signature_args = inspect.getfullargspec(func).args\n     extra_args = set(validator_args) - set(signature_args)\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/72ebd751b7eab42272346c5caeeb73338b56bae4

fix: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 5b78990b..076aac65 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -32,24 +32,36 @@ def read(*rnames):\n     python_requires=">=3.8",\n     install_requires=[\n         "Products.statusmessages",\n+        "Products.PlonePAS",\n+        "Products.CMFPlone",\n         "decorator",\n         "plone.app.uuid",\n+        "plone.app.dexterity",\n+        "plone.app.intid",\n+        "plone.app.layout",\n         "plone.app.linkintegrity",\n+        "plone.dexterity",\n+        "plone.i18n",\n+        "plone.registry",\n         "plone.uuid",\n         "setuptools",\n         "zope.globalrequest",\n+        "Products.CMFCore",\n+        "z3c.relationfield",\n+        "zc.relation",\n+        "Zope",\n+        "zope.intid",\n     ],\n     extras_require={\n         "test": [\n-            "Products.CMFPlone",\n+            "borg.localrole",\n             "manuel>=1.11.2",\n-            "plone.app.dexterity",\n-            "plone.app.intid",\n+            "plone.app.contenttypes",\n+            "plone.app.textfield",\n             "plone.app.testing",\n+            "plone.testing",\n             "plone.indexer",\n             "plone.registry",\n-            "z3c.relationfield",\n-            "zope.testrunner",\n         ],\n     },\n     classifiers=[\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/76b76cce00edfbd34550f598782267e5f149edaf

chore: cleanup setup.py

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 076aac65..d89b87a4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,24 +1,22 @@\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n-import os\n-\n-\n-def read(*rnames):\n-    return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n+version = "2.1.1.dev0"\n \n long_description = (\n-    read("README.md") + "\\n\\n" + read("CHANGES.rst") + "\\n\\n" + read("LICENSE")\n+    f"{Path(\'README.md\').read_text()}\\n"\n+    f"{Path(\'CHANGES.rst\').read_text()}\\n"\n+    f"{Path(\'LICENSE\').read_text()}"\n )\n \n-version = "2.1.1.dev0"\n-\n setup(\n     name="plone.api",\n     version=version,\n     description="A Plone API.",\n     long_description=long_description,\n+    long_description_content_type="text/x-rst",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n     license="GPL version 2",\n@@ -64,6 +62,8 @@ def read(*rnames):\n             "plone.registry",\n         ],\n     },\n+    # Get more strings from\n+    # https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T11:07:35+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/b5edd6a3f14545fae2f7782078d152971c466eef

fix: use the Zope distribution

Files changed:
M src/plone/api/env.py

b'diff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex a57d79fc..5eb5506a 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -231,4 +231,4 @@ def zope_version():\n     :returns: string denoting what release of Zope2 this distribution contains\n     :Example: :ref:`env-zope-version-example`\n     """\n-    return get_distribution("Zope2").version\n+    return get_distribution("Zope").version\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T12:53:20+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/d5c64be8b31c91edc46dfc186978bfdb92ce08fe

fix(tox): ensure coverage reports are generated

Files changed:
M setup.cfg

b'diff --git a/setup.cfg b/setup.cfg\nindex c11c22e5..ba616ebe 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -10,7 +10,6 @@ omit =\n \n [coverage:report]\n precision = 2\n-include = src\n omit =\n     *.rst\n     */doctests/*\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-04-28T19:58:49+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.api/commit/7cb48160d570d7fad0a4c3bd67c306e23299382b

Merge pull request #512 from plone/config-with-default-template-0beddf5d

Config with default template

Files changed:
A .flake8
A .github/workflows/meta.yml
A .meta.toml
A .pre-commit-config.yaml
A dependabot.yml
A news/cfffba8c.internal
M .editorconfig
M .gitignore
M CHANGES.rst
M docs/conf.py
M docs/contribute/develop.md
M fix-converted-myst.py
M pyproject.toml
M setup.cfg
M setup.py
M src/plone/api/configure.zcml
M src/plone/api/content.py
M src/plone/api/env.py
M src/plone/api/portal.py
M src/plone/api/profiles/testfixture/metadata.xml
M src/plone/api/profiles/testfixture/types.xml
M src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml
M src/plone/api/profiles/testfixture/types/Dexterity_Item.xml
M src/plone/api/relation.py
M src/plone/api/testing.zcml
M src/plone/api/tests/Dexterity_Folder.xml
M src/plone/api/tests/Dexterity_Item.xml
M src/plone/api/tests/test_content.py
M src/plone/api/tests/test_doctests.py
M src/plone/api/tests/test_env.py
M src/plone/api/tests/test_group.py
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py
M src/plone/api/user.py
M src/plone/api/validation.py
M tox.ini
D .github/workflows/black.yml
D .github/workflows/isort.yml

b'diff --git a/.editorconfig b/.editorconfig\nindex c85c9bc4..5b3c112c 100644\n--- a/.editorconfig\n+++ b/.editorconfig\n@@ -1,4 +1,8 @@\n-# EditorConfig Configurtaion file, for more details see:\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+#\n+# EditorConfig Configuration file, for more details see:\n # http://EditorConfig.org\n # EditorConfig is a convention description, that could be interpreted\n # by multiple editors to enforce common coding conventions for specific\n@@ -8,7 +12,9 @@\n # Will ignore other EditorConfig files in Home directory or upper tree level.\n root = true\n \n-[*]  # For All Files\n+\n+[*]\n+# Default settings for all files.\n # Unix-style newlines with a newline ending every file\n end_of_line = lf\n insert_final_newline = true\n@@ -24,19 +30,27 @@ max_line_length = off\n # 4 space indentation\n indent_size = 4\n \n-[*.{yml}]\n+[*.{yml,zpt,pt,dtml,zcml,html,xml}]\n # 2 space indentation\n indent_size = 2\n \n+[*.{json,jsonl,js,jsx,ts,tsx,css,less,scss}]\n+# Frontend development\n+# 2 space indentation\n+indent_size = 2\n+max_line_length = 80\n+\n [{Makefile,.gitmodules}]\n # Tab indentation (no size specified, but view as 4 spaces)\n indent_style = tab\n indent_size = unset\n tab_width = unset\n \n-[*.bat]\n-indent_style = tab\n-end_of_line = crlf\n \n-[LICENSE]\n-insert_final_newline = false\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [editorconfig]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 00000000..38918f42\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,22 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [flake8]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\ndeleted file mode 100644\nindex fc5371c7..00000000\n--- a/.github/workflows/black.yml\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-name: Black\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: false\n-      matrix:\n-        python-version: [3.9]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v4\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v4\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-      - name: Install dependencies\n-        run: |\n-          python -m pip install --upgrade pip\n-          pip install tox tox-gh-actions\n-\n-      # python cache\n-      - uses: actions/cache@v3\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-\n-      - name: Test with tox\n-        run: tox -e black-check\ndiff --git a/.github/workflows/isort.yml b/.github/workflows/isort.yml\ndeleted file mode 100644\nindex 3176e03f..00000000\n--- a/.github/workflows/isort.yml\n+++ /dev/null\n@@ -1,32 +0,0 @@\n-name: Isort\n-on: [push]\n-jobs:\n-  build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      fail-fast: true\n-      matrix:\n-        python-version: [3.9]\n-\n-    steps:\n-      # git checkout\n-      - uses: actions/checkout@v4\n-\n-      # python setup\n-      - name: Set up Python ${{ matrix.python-version }}\n-        uses: actions/setup-python@v4\n-        with:\n-          python-version: ${{ matrix.python-version }}\n-      - name: Install dependencies\n-        run: |\n-          python -m pip install --upgrade pip\n-          pip install tox tox-gh-actions\n-\n-      # python cache\n-      - uses: actions/cache@v3\n-        with:\n-          path: ~/.cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n-\n-      - name: Test with tox\n-        run: tox -e isort\ndiff --git a/.github/workflows/meta.yml b/.github/workflows/meta.yml\nnew file mode 100644\nindex 00000000..064618d8\n--- /dev/null\n+++ b/.github/workflows/meta.yml\n@@ -0,0 +1,66 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+name: Meta\n+on:\n+  push:\n+    branches:\n+      - master\n+      - main\n+  pull_request:\n+    branches:\n+      - master\n+      - main\n+  workflow_dispatch:\n+\n+##\n+# To set environment variables for all jobs, add in .meta.toml:\n+# [github]\n+# env = """\n+#     debug: 1\n+#     image-name: \'org/image\'\n+#     image-tag: \'latest\'\n+# """\n+##\n+\n+jobs:\n+  qa:\n+    uses: plone/meta/.github/workflows/qa.yml@main\n+  test:\n+    uses: plone/meta/.github/workflows/test.yml@main\n+  coverage:\n+    uses: plone/meta/.github/workflows/coverage.yml@main\n+  dependencies:\n+    uses: plone/meta/.github/workflows/dependencies.yml@main\n+  release_ready:\n+    uses: plone/meta/.github/workflows/release_ready.yml@main\n+\n+##\n+# To modify the list of default jobs being created add in .meta.toml:\n+# [github]\n+# jobs = [\n+#    "qa",\n+#    "test",\n+#    "coverage",\n+#    "dependencies",\n+#    "release_ready",\n+#    "circular",\n+#    ]\n+##\n+\n+##\n+# To request that some OS level dependencies get installed\n+# when running tests/coverage jobs, add in .meta.toml:\n+# [github]\n+# os_dependencies = "git libxml2 libxslt"\n+##\n+\n+\n+##\n+# Specify additional jobs in .meta.toml:\n+#  [github]\n+#  extra_lines = """\n+#  another:\n+#    uses: org/repo/.github/workflows/file.yml@main\n+#  """\n+##\ndiff --git a/.gitignore b/.gitignore\nindex 6cb56eb9..486392f6 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,28 +1,56 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+# python related\n+*.egg-info\n+*.pyc\n+*.pyo\n+\n+# translation related\n *.mo\n-*.py[cod]\n-*~\n-/.Python\n-/.coverage*\n-/.installed.cfg\n-/bin/\n-/build/\n-/coverage*\n-/develop-eggs/\n-/dist/\n-/docs/Makefile\n-/docs/html/\n-/eggs/\n-/htmlcov\n-/include/\n-/lib/\n-/local.cfg\n-/local/\n-/parts/\n-/share/\n-/src/plone.api.egg-info/\n-/var/\n-/reports/\n-/pip-selfcheck.json\n-/_build/\n-/.tox/\n+\n+# tools related\n+build/\n+.coverage\n+.*project\n+coverage.xml\n+dist/\n+docs/_build\n+__pycache__/\n+.tox\n+.vscode/\n+node_modules/\n+\n+# venv / buildout related\n+bin/\n+develop-eggs/\n+eggs/\n+.eggs/\n+etc/\n+.installed.cfg\n+include/\n+lib/\n+lib64\n+.mr.developer.cfg\n+parts/\n pyvenv.cfg\n+var/\n+local.cfg\n+\n+# mxdev\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\n+.installed.txt\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [gitignore]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 00000000..d0ae1c53\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,141 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[meta]\n+template = "default"\n+commit-id = "1c2155e4"\n+\n+[pre_commit]\n+codespell_extra_lines = """\n+        exclude: docs/locale/.*.pot\n+"""\n+\n+[pyproject]\n+check_manifest_ignores = """\n+    ".editorconfig",\n+    "*.cfg",\n+    "constraints_plone52.txt",\n+    "constraints_plone60.txt",\n+    "constraints.txt",\n+    "fix-converted-myst.py",\n+    "Makefile",\n+    "netlify.toml",\n+    "requirements-docs.txt",\n+    "requirements.txt",\n+"""\n+dependencies_ignores = "[\'Products.PrintingMailHost\', \'plone.app.iterate\',]"\n+codespell_ignores = "manuel"\n+\n+[tox]\n+envlist_lines = """\n+    py{38,39,310,311}-plone{60}\n+    linkcheck\n+    plone6docs\n+    docs\n+"""\n+config_lines = """\n+skip_missing_interpreters = True\n+\n+[gh-actions]\n+python =\n+    3.8: py38\n+    3.9: py39\n+    3.10: py310\n+    3.11: py311\n+\n+[gh-actions:env]\n+PLONE =\n+    60: plone60\n+"""\n+extra_lines = """\n+[testenv:py{38,39,310,311}-plone{60}]\n+skip_install = True\n+\n+commands =\n+    python -VV\n+    pip install -r requirements.txt\n+    pip list\n+    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} install test\n+    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n+    {envbindir}/test\n+\n+setenv =\n+    BUILDOUT_FILE=test_plone-60.cfg\n+\n+deps =\n+    pdbpp\n+    manuel\n+\n+# tox < 4.0.0\n+whitelist_externals =\n+    mkdir\n+    echo\n+\n+# tox >= 4.0.0\n+allowlist_externals =\n+    mkdir\n+    echo\n+\n+[testenv:plone6docs]\n+# New docs with sphinx-book-theme\n+# See [testenv:docs] for classic documentation\n+basepython = python3.9\n+skip_install = False\n+usedevelop = True\n+allowlist_externals =\n+    mkdir\n+extras =\n+    tests\n+\n+deps =\n+    -r requirements-docs.txt\n+\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n+\n+[testenv:docs]\n+basepython = python3.9\n+skip_install = False\n+usedevelop = True\n+allowlist_externals =\n+    mkdir\n+extras =\n+    tests\n+\n+deps =\n+    -r requirements-docs.txt\n+\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/docs\n+    sphinx-build -b html -D html_theme=alabaster -d _build/docs/doctrees docs _build/docs/html\n+\n+whitelist_externals =\n+    mkdir\n+\n+[testenv:linkcheck]\n+basepython = python\n+skip_install = False\n+usedevelop = True\n+allowlist_externals =\n+    mkdir\n+extras =\n+    {[testenv:plone6docs]extras}\n+deps =\n+    {[testenv:plone6docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n+"""\n+\n+[github]\n+jobs = [\n+    "qa",\n+    "test",\n+    "coverage",\n+    "dependencies",\n+    "release_ready",\n+    ]\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 00000000..5c2addd6\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,95 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.15.2\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.13.2\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 24.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.1.0\n+    hooks:\n+    -   id: zpretty\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  zpretty_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 7.0.0\n+    hooks:\n+    -   id: flake8\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  flake8_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.6\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+        exclude: docs/locale/.*.pot\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  codespell_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\n+-   repo: https://github.com/mgedmin/check-python-versions\n+    rev: "0.22.0"\n+    hooks:\n+    -   id: check-python-versions\n+        args: [\'--only\', \'setup.py,pyproject.toml\']\n+-   repo: https://github.com/collective/i18ndude\n+    rev: "6.1.0"\n+    hooks:\n+    -   id: i18ndude\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  i18ndude_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 65640cd8..8f5c9e19 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -84,8 +84,8 @@ Bug fixes:\n \n \n - Do not run GitHub Actions tests twice.\n-  Only run GitHub Actions tests when commiting directly against master or main or\n-  opening a pull request agains master or main. This avoids to run the same test\n+  Only run GitHub Actions tests when committing directly against master or main or\n+  opening a pull request against master or main. This avoids to run the same test\n   suite for the same environment twice.\n   [thet] (#0)\n - Mockup TinyMCE settings: Remove unused AtD related views.\n@@ -474,7 +474,7 @@ Bug fixes:\n - Simplify the ``plone.api.content.delete`` method.\n   [thet]\n \n-- content.copy with safe_id=False should raise it\'s own exeception. Fixes #340\n+- content.copy with safe_id=False should raise it\'s own exception. Fixes #340\n   [jaroel]\n \n \ndiff --git a/dependabot.yml b/dependabot.yml\nnew file mode 100644\nindex 00000000..bbd3ab05\n--- /dev/null\n+++ b/dependabot.yml\n@@ -0,0 +1,11 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+version: 2\n+updates:\n+\n+  - package-ecosystem: "github-actions"\n+    directory: "/"\n+    schedule:\n+      # Check for updates to GitHub Actions every week\n+      interval: "weekly"\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 788a5059..9492f0a8 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -2,8 +2,9 @@\n \n import sys\n \n-project = \'plone.api\'\n-copyright = \'2012, Plone Foundation\'\n+\n+project = "plone.api"\n+copyright = "2012, Plone Foundation"\n \n version = release = get_distribution(project).version\n \n@@ -15,29 +16,31 @@\n }\n \n extensions = [\n-    \'sphinx.ext.doctest\',\n-    \'sphinx.ext.coverage\',\n-    \'sphinx.ext.autodoc\',\n-    \'sphinx.ext.viewcode\',\n-    \'sphinx.ext.autosummary\',\n+    "sphinx.ext.doctest",\n+    "sphinx.ext.coverage",\n+    "sphinx.ext.autodoc",\n+    "sphinx.ext.viewcode",\n+    "sphinx.ext.autosummary",\n     "myst_parser",\n     "sphinx.ext.todo",\n ]\n-master_doc = \'index\'\n+master_doc = "index"\n \n-locale_dirs = [\'translated/\']\n-language = \'en\'\n+locale_dirs = ["translated/"]\n+language = "en"\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual])\n # This enables PDF generation.\n-latex_documents = [(\n-    \'index\',\n-    \'ploneapi.tex\',\n-    \'plone.api Documentation\',\n-    \'\',\n-    \'manual\',\n-)]\n+latex_documents = [\n+    (\n+        "index",\n+        "ploneapi.tex",\n+        "plone.api Documentation",\n+        "",\n+        "manual",\n+    )\n+]\n \n \n class Mock:\n@@ -49,8 +52,8 @@ def __call__(self, *args, **kwargs):\n \n     @classmethod\n     def __getattr__(cls, name):\n-        if name in (\'__file__\', \'__path__\'):\n-            return \'/dev/null\'\n+        if name in ("__file__", "__path__"):\n+            return "/dev/null"\n         elif name[0] == name[0].upper():\n             mockType = type(name, (), {})\n             mockType.__module__ = __name__\n@@ -59,7 +62,7 @@ def __getattr__(cls, name):\n             return Mock()\n \n \n-MOCK_MODULES = [\'lxml\']\n+MOCK_MODULES = ["lxml"]\n for mod_name in MOCK_MODULES:\n     sys.modules[mod_name] = Mock()\n \ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\nindex ccfe51b0..c2b0a699 100644\n--- a/docs/contribute/develop.md\n+++ b/docs/contribute/develop.md\n@@ -70,7 +70,7 @@ Our repository on GitHub has the following layout:\n - **feature branches**: all development for new features must be done in\n   dedicated branches, normally one branch per feature,\n - **master branch**: when features get completed they are merged into the\n-  master branch; bugfixes are commited directly on the master branch,\n+  master branch; bugfixes are committed directly on the master branch,\n - **tags**: whenever we create a new release we tag the repository so we can\n   later re-trace our steps, re-release versions, etc.\n \ndiff --git a/fix-converted-myst.py b/fix-converted-myst.py\nindex e5053e69..3091a14c 100644\n--- a/fix-converted-myst.py\n+++ b/fix-converted-myst.py\n@@ -2,6 +2,7 @@\n import os\n import re\n \n+\n logging.basicConfig()\n logger = logging.getLogger("fix converted MyST documentation")\n logger.setLevel(logging.INFO)\n@@ -20,28 +21,27 @@ def replace_label_underscore(data):\n     ->\n     :Example: :ref:`portal-get-tool-example`\n     """\n-    regex_label_underscore = \'(?<=:ref:`)(.*)(?=`)\'\n+    regex_label_underscore = "(?<=:ref:`)(.*)(?=`)"\n \n     def _replace(mobj):\n-        return mobj.group(0).replace(\'_\', \'-\')\n+        return mobj.group(0).replace("_", "-")\n \n-    data = re.sub(\n-        regex_label_underscore, _replace, data)\n+    data = re.sub(regex_label_underscore, _replace, data)\n     return data\n \n \n def remove_github_warning(data):\n     """Remove \'GitHub-only\' warning"""\n-    regex_github_warning = r\':::{admonition} GitHub-only([\\S\\s]*?):::\\n\\n\'\n-    data = re.sub(regex_github_warning, \'\', data, flags=re.DOTALL)\n+    regex_github_warning = r":::{admonition} GitHub-only([\\S\\s]*?):::\\n\\n"\n+    data = re.sub(regex_github_warning, "", data, flags=re.DOTALL)\n     return data\n \n \n-for root, dirs, files in (*os.walk(\'./src\'), *os.walk(\'./docs\')):\n+for root, dirs, files in (*os.walk("./src"), *os.walk("./docs")):\n     for name in files:\n         if name.endswith(".py") or name.endswith(".md"):\n             filename = os.path.join(root, name)\n-            with open(filename, \'r+\') as f:\n+            with open(filename, "r+") as f:\n                 data = f.read()\n                 data = replace_label_underscore(data)\n                 data = remove_github_warning(data)\ndiff --git a/news/cfffba8c.internal b/news/cfffba8c.internal\nnew file mode 100644\nindex 00000000..c08f5399\n--- /dev/null\n+++ b/news/cfffba8c.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 057abc23..2066aabf 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,6 +1,12 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[build-system]\n+requires = ["setuptools>=68.2"]\n+\n [tool.towncrier]\n-filename = "CHANGES.rst"\n directory = "news/"\n+filename = "CHANGES.rst"\n title_format = "{version} ({project_date})"\n underlines = ["-", ""]\n \n@@ -27,4 +33,145 @@ showcontent = true\n [[tool.towncrier.type]]\n directory = "documentation"\n name = "Documentation:"\n-showcontent = true\n\\ No newline at end of file\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  towncrier_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.isort]\n+profile = "plone"\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  isort_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  black_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.codespell]\n+ignore-words-list = "discreet,manuel"\n+skip = "*.po,"\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  codespell_ignores = "foo,bar"\n+#  codespell_skip = "*.po,*.map,package-lock.json"\n+##\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+ignore-packages = [\'Products.PrintingMailHost\', \'plone.app.iterate\',]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  dependencies_ignores = "[\'zestreleaser.towncrier\']"\n+#  dependencies_mappings = [\n+#    "gitpython = [\'git\']",\n+#    "pygithub = [\'github\']",\n+#  ]\n+##\n+\n+[tool.check-manifest]\n+ignore = [\n+    ".editorconfig",\n+    ".flake8",\n+    ".meta.toml",\n+    ".pre-commit-config.yaml",\n+    "dependabot.yml",\n+    "mx.ini",\n+    "tox.ini",\n+    ".editorconfig",\n+    "*.cfg",\n+    "constraints_plone52.txt",\n+    "constraints_plone60.txt",\n+    "constraints.txt",\n+    "fix-converted-myst.py",\n+    "Makefile",\n+    "netlify.toml",\n+    "requirements-docs.txt",\n+    "requirements.txt",\n+\n+]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  check_manifest_ignores = """\n+#      "*.map.js",\n+#      "*.pyc",\n+#  """\n+#  check_manifest_extra_lines = """\n+#  ignore-bad-ideas = [\n+#      "some/test/file/PKG-INFO",\n+#  ]\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/setup.cfg b/setup.cfg\nindex 84355524..ba616ebe 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,26 +1,3 @@\n-[check-manifest]\n-ignore =\n-    .editorconfig\n-    *.cfg\n-    constraints_plone52.txt\n-    constraints_plone60.txt\n-    constraints.txt\n-    fix-converted-myst.py\n-    Makefile\n-    netlify.toml\n-    requirements-docs.txt\n-    requirements.txt\n-\n-[flake8]\n-max-line-length = 88\n-extend-ignore = E203, W503\n-\n-[isort]\n-force_alphabetical_sort=True\n-force_single_line=True\n-lines_after_imports=2\n-line_length=200\n-\n [coverage:run]\n branch = True\n source =\n@@ -33,7 +10,6 @@ omit =\n \n [coverage:report]\n precision = 2\n-include = src\n omit =\n     *.rst\n     */doctests/*\n@@ -41,6 +17,3 @@ omit =\n \n [coverage:html]\n directory = _build/coverage\n-\n-[bdist_wheel]\n-universal = 0\ndiff --git a/setup.py b/setup.py\nindex 5b78990b..d89b87a4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,24 +1,22 @@\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n-import os\n-\n-\n-def read(*rnames):\n-    return open(os.path.join(os.path.dirname(__file__), *rnames)).read()\n \n+version = "2.1.1.dev0"\n \n long_description = (\n-    read("README.md") + "\\n\\n" + read("CHANGES.rst") + "\\n\\n" + read("LICENSE")\n+    f"{Path(\'README.md\').read_text()}\\n"\n+    f"{Path(\'CHANGES.rst\').read_text()}\\n"\n+    f"{Path(\'LICENSE\').read_text()}"\n )\n \n-version = "2.1.1.dev0"\n-\n setup(\n     name="plone.api",\n     version=version,\n     description="A Plone API.",\n     long_description=long_description,\n+    long_description_content_type="text/x-rst",\n     author="Plone Foundation",\n     author_email="plone-developers@lists.sourceforge.net",\n     license="GPL version 2",\n@@ -32,26 +30,40 @@ def read(*rnames):\n     python_requires=">=3.8",\n     install_requires=[\n         "Products.statusmessages",\n+        "Products.PlonePAS",\n+        "Products.CMFPlone",\n         "decorator",\n         "plone.app.uuid",\n+        "plone.app.dexterity",\n+        "plone.app.intid",\n+        "plone.app.layout",\n         "plone.app.linkintegrity",\n+        "plone.dexterity",\n+        "plone.i18n",\n+        "plone.registry",\n         "plone.uuid",\n         "setuptools",\n         "zope.globalrequest",\n+        "Products.CMFCore",\n+        "z3c.relationfield",\n+        "zc.relation",\n+        "Zope",\n+        "zope.intid",\n     ],\n     extras_require={\n         "test": [\n-            "Products.CMFPlone",\n+            "borg.localrole",\n             "manuel>=1.11.2",\n-            "plone.app.dexterity",\n-            "plone.app.intid",\n+            "plone.app.contenttypes",\n+            "plone.app.textfield",\n             "plone.app.testing",\n+            "plone.testing",\n             "plone.indexer",\n             "plone.registry",\n-            "z3c.relationfield",\n-            "zope.testrunner",\n         ],\n     },\n+    # Get more strings from\n+    # https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\ndiff --git a/src/plone/api/configure.zcml b/src/plone/api/configure.zcml\nindex c25eee7b..fe29cba6 100644\n--- a/src/plone/api/configure.zcml\n+++ b/src/plone/api/configure.zcml\n@@ -1,5 +1,6 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone.api">\n+    i18n_domain="plone.api"\n+    >\n \n </configure>\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 6be66dec..95515de9 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -34,7 +34,7 @@ def create(\n     id=None,\n     title=None,\n     safe_id=False,\n-    **kwargs  # NOQA: C816, S101\n+    **kwargs,  # NOQA: C816, S101\n ):\n     """Create a new content item.\n \n@@ -127,7 +127,7 @@ def get(path=None, UID=None):\n     if path:\n         site = portal.get()\n         site_absolute_path = "/".join(site.getPhysicalPath())\n-        if not path.startswith("{path}".format(path=site_absolute_path)):\n+        if not path.startswith(f"{site_absolute_path}"):\n             path = "{site_path}{relative_path}".format(\n                 site_path=site_absolute_path,\n                 relative_path=path,\n@@ -297,7 +297,7 @@ def delete(obj=None, objects=None, check_linkintegrity=True):\n         breaches = linkintegrity_view.get_breaches(objects)\n         if breaches:\n             raise LinkIntegrityNotificationException(\n-                "Linkintegrity-breaches: {}".format(breaches),\n+                f"Linkintegrity-breaches: {breaches}",\n             )\n \n     for obj_ in objects:\ndiff --git a/src/plone/api/env.py b/src/plone/api/env.py\nindex a57d79fc..5eb5506a 100644\n--- a/src/plone/api/env.py\n+++ b/src/plone/api/env.py\n@@ -231,4 +231,4 @@ def zope_version():\n     :returns: string denoting what release of Zope2 this distribution contains\n     :Example: :ref:`env-zope-version-example`\n     """\n-    return get_distribution("Zope2").version\n+    return get_distribution("Zope").version\ndiff --git a/src/plone/api/portal.py b/src/plone/api/portal.py\nindex 1aec4997..6080093f 100644\n--- a/src/plone/api/portal.py\n+++ b/src/plone/api/portal.py\n@@ -280,7 +280,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n         records = registry.forInterface(interface, check=False)\n         _marker = object()\n         if getattr(records, name, _marker) != _marker:\n-            return registry["{}.{}".format(interface.__identifier__, name)]\n+            return registry[f"{interface.__identifier__}.{name}"]\n \n         if default is not MISSING:\n             return default\n@@ -307,7 +307,7 @@ def get_registry_record(name=None, interface=None, default=MISSING):\n \n     # Show all records that \'look like\' name.\n     # We don\'t dump the whole list, because it 1500+ items.\n-    msg = "Cannot find a record with name \'{name}\'".format(name=name)\n+    msg = f"Cannot find a record with name \'{name}\'"\n     records = [key for key in registry.records.keys() if name in key]\n     if records:\n         msg = (\ndiff --git a/src/plone/api/profiles/testfixture/metadata.xml b/src/plone/api/profiles/testfixture/metadata.xml\nindex 9f02b5ec..db49627f 100644\n--- a/src/plone/api/profiles/testfixture/metadata.xml\n+++ b/src/plone/api/profiles/testfixture/metadata.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0"?>\n+<?xml version="1.0" encoding="utf-8"?>\n <metadata>\n   <version>1</version>\n   <dependencies>\ndiff --git a/src/plone/api/profiles/testfixture/types.xml b/src/plone/api/profiles/testfixture/types.xml\nindex 9a3e48aa..a70943b1 100644\n--- a/src/plone/api/profiles/testfixture/types.xml\n+++ b/src/plone/api/profiles/testfixture/types.xml\n@@ -1,5 +1,11 @@\n-<?xml version="1.0"?>\n-<object name="portal_types" meta_type="Plone Types Tool">\n- <object name="Dexterity Item" meta_type="Dexterity FTI"/>\n- <object name="Dexterity Folder" meta_type="Dexterity FTI"/>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object meta_type="Plone Types Tool"\n+        name="portal_types"\n+>\n+  <object meta_type="Dexterity FTI"\n+          name="Dexterity Item"\n+  />\n+  <object meta_type="Dexterity FTI"\n+          name="Dexterity Folder"\n+  />\n </object>\ndiff --git a/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml b/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml\nindex 40dd5203..9c61671e 100644\n--- a/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml\n+++ b/src/plone/api/profiles/testfixture/types/Dexterity_Folder.xml\n@@ -1,40 +1,62 @@\n-<?xml version="1.0"?>\n-<object name="Dexterity Folder" meta_type="Dexterity FTI"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">Dexterity Folder</property>\n- <property name="description"></property>\n- <property name="content_icon"></property>\n- <property name="link_target"></property>\n- <property name="immediate_view">view</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">False</property>\n- <property name="allowed_content_types"/>\n- <property name="allow_discussion">False</property>\n- <property name="default_view">view</property>\n- <property name="view_methods">\n-  <element value="view"/>\n- </property>\n- <property name="default_view_fallback">False</property>\n- <property name="add_permission">cmf.AddPortalContent</property>\n- <property name="klass">plone.dexterity.content.Container</property>\n- <property name="behaviors">\n-  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>\n- </property>\n- <property name="schema"></property>\n- <property name="model_source"></property>\n- <property name="model_file">plone.api.tests:Dexterity_Folder.xml</property>\n- <alias from="(Default)" to="(dynamic view)"/>\n- <alias from="edit" to="@@edit"/>\n- <alias from="sharing" to="@@sharing"/>\n- <alias from="view" to="(selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}"\n-    visible="True">\n-  <permission value="View"/>\n- </action>\n- <action title="Edit" action_id="edit" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}/edit"\n-    visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Dexterity Folder"\n+>\n+  <property name="title">Dexterity Folder</property>\n+  <property name="description" />\n+  <property name="content_icon" />\n+  <property name="link_target" />\n+  <property name="immediate_view">view</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">False</property>\n+  <property name="allowed_content_types" />\n+  <property name="allow_discussion">False</property>\n+  <property name="default_view">view</property>\n+  <property name="view_methods">\n+    <element value="view" />\n+  </property>\n+  <property name="default_view_fallback">False</property>\n+  <property name="add_permission">cmf.AddPortalContent</property>\n+  <property name="klass">plone.dexterity.content.Container</property>\n+  <property name="behaviors">\n+    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n+  </property>\n+  <property name="schema" />\n+  <property name="model_source" />\n+  <property name="model_file">plone.api.tests:Dexterity_Folder.xml</property>\n+  <alias from="(Default)"\n+         to="(dynamic view)"\n+  />\n+  <alias from="edit"\n+         to="@@edit"\n+  />\n+  <alias from="sharing"\n+         to="@@sharing"\n+  />\n+  <alias from="view"\n+         to="(selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="View"\n+          url_expr="string:${object_url}"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n+  <action action_id="edit"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="Edit"\n+          url_expr="string:${object_url}/edit"\n+          visible="True"\n+  >\n+    <permission value="Modify portal content" />\n+  </action>\n </object>\ndiff --git a/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml b/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml\nindex 3c31f131..74ef9bc0 100644\n--- a/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml\n+++ b/src/plone/api/profiles/testfixture/types/Dexterity_Item.xml\n@@ -1,40 +1,62 @@\n-<?xml version="1.0"?>\n-<object name="Dexterity Item" meta_type="Dexterity FTI"\n-   xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n- <property name="title">Dexterity Item</property>\n- <property name="description"></property>\n- <property name="content_icon"></property>\n- <property name="link_target"></property>\n- <property name="immediate_view">view</property>\n- <property name="global_allow">True</property>\n- <property name="filter_content_types">True</property>\n- <property name="allowed_content_types"/>\n- <property name="allow_discussion">False</property>\n- <property name="default_view">view</property>\n- <property name="view_methods">\n-  <element value="view"/>\n- </property>\n- <property name="default_view_fallback">False</property>\n- <property name="add_permission">cmf.AddPortalContent</property>\n- <property name="klass">plone.dexterity.content.Item</property>\n- <property name="behaviors">\n-  <element value="plone.app.dexterity.behaviors.metadata.IDublinCore"/>\n- </property>\n- <property name="schema"></property>\n- <property name="model_source"></property>\n- <property name="model_file">plone.api.tests:Dexterity_Item.xml</property>\n- <alias from="(Default)" to="(dynamic view)"/>\n- <alias from="edit" to="@@edit"/>\n- <alias from="sharing" to="@@sharing"/>\n- <alias from="view" to="(selected layout)"/>\n- <action title="View" action_id="view" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}"\n-    visible="True">\n-  <permission value="View"/>\n- </action>\n- <action title="Edit" action_id="edit" category="object" condition_expr=""\n-    icon_expr="" link_target="" url_expr="string:${object_url}/edit"\n-    visible="True">\n-  <permission value="Modify portal content"/>\n- </action>\n+<?xml version="1.0" encoding="utf-8"?>\n+<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+        meta_type="Dexterity FTI"\n+        name="Dexterity Item"\n+>\n+  <property name="title">Dexterity Item</property>\n+  <property name="description" />\n+  <property name="content_icon" />\n+  <property name="link_target" />\n+  <property name="immediate_view">view</property>\n+  <property name="global_allow">True</property>\n+  <property name="filter_content_types">True</property>\n+  <property name="allowed_content_types" />\n+  <property name="allow_discussion">False</property>\n+  <property name="default_view">view</property>\n+  <property name="view_methods">\n+    <element value="view" />\n+  </property>\n+  <property name="default_view_fallback">False</property>\n+  <property name="add_permission">cmf.AddPortalContent</property>\n+  <property name="klass">plone.dexterity.content.Item</property>\n+  <property name="behaviors">\n+    <element value="plone.app.dexterity.behaviors.metadata.IDublinCore" />\n+  </property>\n+  <property name="schema" />\n+  <property name="model_source" />\n+  <property name="model_file">plone.api.tests:Dexterity_Item.xml</property>\n+  <alias from="(Default)"\n+         to="(dynamic view)"\n+  />\n+  <alias from="edit"\n+         to="@@edit"\n+  />\n+  <alias from="sharing"\n+         to="@@sharing"\n+  />\n+  <alias from="view"\n+         to="(selected layout)"\n+  />\n+  <action action_id="view"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="View"\n+          url_expr="string:${object_url}"\n+          visible="True"\n+  >\n+    <permission value="View" />\n+  </action>\n+  <action action_id="edit"\n+          category="object"\n+          condition_expr=""\n+          icon_expr=""\n+          link_target=""\n+          title="Edit"\n+          url_expr="string:${object_url}/edit"\n+          visible="True"\n+  >\n+    <permission value="Modify portal content" />\n+  </action>\n </object>\ndiff --git a/src/plone/api/relation.py b/src/plone/api/relation.py\nindex 5540d4ca..bf39a8aa 100644\n--- a/src/plone/api/relation.py\n+++ b/src/plone/api/relation.py\n@@ -76,16 +76,16 @@ def get(\n     :Example: :ref:`relation-get-example`\n     """\n     if source is not None and not base_hasattr(source, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(source))\n+        raise InvalidParameterError(f"{source} has no portal_type")\n \n     if target is not None and not base_hasattr(target, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(target))\n+        raise InvalidParameterError(f"{target} has no portal_type")\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError("{} is no string".format(relationship))\n+        raise InvalidParameterError(f"{relationship} is no string")\n \n     intids = getUtility(IIntIds)\n     relation_catalog = getUtility(ICatalog)\n@@ -150,13 +150,13 @@ def create(source=None, target=None, relationship=None):\n     :Example: :ref:`relation-create-example`\n     """\n     if source is not None and not base_hasattr(source, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(source))\n+        raise InvalidParameterError(f"{source} has no portal_type")\n \n     if target is not None and not base_hasattr(target, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(target))\n+        raise InvalidParameterError(f"{target} has no portal_type")\n \n     if not isinstance(relationship, str):\n-        raise InvalidParameterError("{} is no string".format(relationship))\n+        raise InvalidParameterError(f"{relationship} is no string")\n \n     relation_catalog = getUtility(ICatalog)\n     intids = getUtility(IIntIds)\n@@ -267,16 +267,16 @@ def delete(source=None, target=None, relationship=None):\n     :Example: :ref:`relation-delete-example`\n     """\n     if source is not None and not base_hasattr(source, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(source))\n+        raise InvalidParameterError(f"{source} has no portal_type")\n \n     if target is not None and not base_hasattr(target, "portal_type"):\n-        raise InvalidParameterError("{} has no portal_type".format(target))\n+        raise InvalidParameterError(f"{target} has no portal_type")\n \n     if relationship is not None and not isinstance(\n         relationship,\n         str,\n     ):\n-        raise InvalidParameterError("{} is no string".format(relationship))\n+        raise InvalidParameterError(f"{relationship} is no string")\n \n     query = {}\n     relation_catalog = getUtility(ICatalog)\ndiff --git a/src/plone/api/testing.zcml b/src/plone/api/testing.zcml\nindex 26d9ce41..1a9fbf15 100644\n--- a/src/plone/api/testing.zcml\n+++ b/src/plone/api/testing.zcml\n@@ -1,17 +1,21 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n-    i18n_domain="plone.api">\n+    i18n_domain="plone.api"\n+    >\n \n-    <include package="Products.GenericSetup" file="meta.zcml"/>\n+  <include\n+      package="Products.GenericSetup"\n+      file="meta.zcml"\n+      />\n \n-    <genericsetup:registerProfile\n-        name="testfixture"\n-        title="plone.api: Test fixture"\n-        directory="profiles/testfixture"\n-        description="Extension profile to configure a test fixture"\n-        for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"\n-        provides="Products.GenericSetup.interfaces.EXTENSION"\n-        />\n+  <genericsetup:registerProfile\n+      name="testfixture"\n+      title="plone.api: Test fixture"\n+      description="Extension profile to configure a test fixture"\n+      provides="Products.GenericSetup.interfaces.EXTENSION"\n+      for="Products.CMFPlone.interfaces.ITestCasePloneSiteRoot"\n+      directory="profiles/testfixture"\n+      />\n \n </configure>\ndiff --git a/src/plone/api/tests/Dexterity_Folder.xml b/src/plone/api/tests/Dexterity_Folder.xml\nindex d93a4890..b1bc2ab7 100644\n--- a/src/plone/api/tests/Dexterity_Folder.xml\n+++ b/src/plone/api/tests/Dexterity_Folder.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" ?>\n+<?xml version="1.0" encoding="utf-8"?>\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n- <schema />\n+  <schema />\n </model>\ndiff --git a/src/plone/api/tests/Dexterity_Item.xml b/src/plone/api/tests/Dexterity_Item.xml\nindex d93a4890..b1bc2ab7 100644\n--- a/src/plone/api/tests/Dexterity_Item.xml\n+++ b/src/plone/api/tests/Dexterity_Item.xml\n@@ -1,4 +1,4 @@\n-<?xml version="1.0" ?>\n+<?xml version="1.0" encoding="utf-8"?>\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n- <schema />\n+  <schema />\n </model>\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 637b1c64..41caebc0 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -461,7 +461,7 @@ def test_get(self):\n \n         # Test getting the team document by path that has portal id included\n         team_by_path = api.content.get(\n-            "/{}/about/team".format(self.portal.getId()),\n+            f"/{self.portal.getId()}/about/team",\n         )\n         self.assertEqual(self.team, team_by_path)\n \ndiff --git a/src/plone/api/tests/test_doctests.py b/src/plone/api/tests/test_doctests.py\nindex 26a2fb18..53f9b1d4 100644\n--- a/src/plone/api/tests/test_doctests.py\n+++ b/src/plone/api/tests/test_doctests.py\n@@ -125,7 +125,7 @@ def test_suite():\n             doctests.append(DocFileSuite(os.path.join(path, filename)))\n         except OSError:\n             logger.warning(\n-                "test_doctest.py skipping {file}".format(file=filename),\n+                f"test_doctest.py skipping {filename}",\n             )\n \n     return unittest.TestSuite(doctests)\ndiff --git a/src/plone/api/tests/test_env.py b/src/plone/api/tests/test_env.py\nindex 3086a4d4..e56161ba 100644\n--- a/src/plone/api/tests/test_env.py\n+++ b/src/plone/api/tests/test_env.py\n@@ -486,7 +486,7 @@ def test_argument_requirement(self):\n             api.env.adopt_roles()\n \n     def test_debug_mode(self):\n-        """Tests that the retured value is the same as\n+        """Tests that the returned value is the same as\n         getConfiguration.debug_mode."""\n         from App.config import getConfiguration\n         from plone.api.env import debug_mode\ndiff --git a/src/plone/api/tests/test_group.py b/src/plone/api/tests/test_group.py\nindex c1718d48..d3ac9770 100644\n--- a/src/plone/api/tests/test_group.py\n+++ b/src/plone/api/tests/test_group.py\n@@ -77,7 +77,7 @@ def test_create_with_roles_and_groups(self):\n         self.assertIn("Reviewer", ham_group.getMemberIds())\n \n     def test_get_constraints(self):\n-        """Test the constraints for geting a group."""\n+        """Test the constraints for getting a group."""\n         from plone.api.exc import MissingParameterError\n \n         with self.assertRaises(MissingParameterError):\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex a467ba1a..39992127 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -520,7 +520,7 @@ def test_get_invalid_registry_record(self):\n \n     def test_get_invalid_registry_record_msg(self):\n         """Test that the error message from trying to get a\n-        nonexistant registry record produces an error message which\n+        nonexistent registry record produces an error message which\n         lists suggested registry records.\n         """\n         from plone.api.exc import InvalidParameterError\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex 742383ac..bfc770e3 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -168,7 +168,7 @@ def test_create_no_roles(self):\n         )\n \n     def test_get_constraints(self):\n-        """Test on raised exeption if no username is given when getting the user."""\n+        """Test on raised exception if no username is given when getting the user."""\n         from plone.api.exc import MissingParameterError\n \n         with self.assertRaises(MissingParameterError):\ndiff --git a/src/plone/api/user.py b/src/plone/api/user.py\nindex 206cbe70..1ac97d16 100644\n--- a/src/plone/api/user.py\n+++ b/src/plone/api/user.py\n@@ -34,7 +34,7 @@ def create(\n         is not used as a username.\n     :type username: string\n     :param password: Password for the new user. If it\'s not set we generate\n-        a random 8-char alpha-numeric one.\n+        a random 8-char alphanumeric one.\n     :type password: string\n     :param properties: User properties to assign to the new user. The list of\n         available properties is available in ``portal_memberdata`` through ZMI.\ndiff --git a/src/plone/api/validation.py b/src/plone/api/validation.py\nindex ff972b09..d8e52b71 100644\n--- a/src/plone/api/validation.py\n+++ b/src/plone/api/validation.py\n@@ -10,7 +10,7 @@\n def _get_arg_spec(func, validator_args):\n     """Get the arguments specified in the function spec.\n \n-    and check that the decorator doesn\'t refer to non-existant args.\n+    and check that the decorator doesn\'t refer to non-existent args.\n     """\n     signature_args = inspect.getfullargspec(func).args\n     extra_args = set(validator_args) - set(signature_args)\ndiff --git a/tox.ini b/tox.ini\nindex 4ec548d9..701ba2af 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,13 +1,14 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/main/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    py{38,39,310,311}-plone{60}\n-    # towncrier\n-    # black-enforce\n-    black-check\n-    # isort-apply\n-    isort\n     lint\n-#    coverage-report\n+    test\n+    dependencies\n+    py{38,39,310,311}-plone{60}\n     linkcheck\n     plone6docs\n     docs\n@@ -25,126 +26,233 @@ python =\n PLONE =\n     60: plone60\n \n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  envlist_lines = """\n+#      my_other_environment\n+#  """\n+#  config_lines = """\n+#  my_extra_top_level_tox_configuration_lines\n+#  """\n+##\n \n [testenv]\n-skip_install = True\n-\n-commands =\n-    python -VV\n-    pip install -r requirements.txt\n-    pip list\n-    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} install test\n-    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n-    {envbindir}/test\n-\n-setenv =\n-    BUILDOUT_FILE=test_plone-60.cfg\n-\n-deps =\n-    pdbpp\n-    manuel\n-\n-# tox < 4.0.0\n-whitelist_externals =\n-    mkdir\n-    echo\n-\n-# tox >= 4.0.0\n+skip_install = true\n allowlist_externals =\n-    mkdir\n     echo\n+    false\n+# Make sure typos like `tox -e formaat` are caught instead of silently doing nothing.\n+# See https://github.com/tox-dev/tox/issues/2858.\n+commands =\n+    echo "Unrecognized environment name {envname}"\n+    false\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  testenv_options = """\n+#  basepython = /usr/bin/python3.8\n+#  """\n+##\n+\n+[testenv:init]\n+description = Prepare environment\n+skip_install = true\n+commands =\n+    echo "Initial setup complete"\n \n-[testenv:coverage-report]\n-basepython = python3.9\n-deps = coverage\n-\n-setenv =\n-    COVERAGE_FILE=.coverage\n-\n-skip_install = True\n \n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n commands =\n-    python -VV\n-    coverage erase\n-    coverage combine\n-    coverage report\n-    coverage html\n-    coverage xml\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n \n-[testenv:black-check]\n-basepython = python3.9\n-skip_install = True\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n deps =\n-    black\n-\n+    pre-commit\n commands =\n-    python -VV\n-    black --check --diff -v src setup.py\n+    pre-commit run -a\n \n-[testenv:black-enforce]\n-basepython = python3.9\n-skip_install = True\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n deps =\n-    black\n-\n+    build\n+    z3c.dependencychecker==2.14.3\n commands =\n-    python -VV\n-    black -v src setup.py\n+    python -m build --sdist\n+    dependencychecker\n \n-[testenv:isort]\n-basepython = python3.9\n-skip_install = True\n+[testenv:dependencies-graph]\n+description = generate a graph out of the dependencies of the package\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the distribution tests\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+#\n+# Set constrain_package_deps .meta.toml:\n+#  [tox]\n+#  constrain_package_deps = "false"\n+##\n deps =\n-    isort\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+\n+##\n+# Specify additional deps in .meta.toml:\n+#  [tox]\n+#  test_deps_additional = "-esources/plonegovbr.portal_base[test]"\n+#\n+# Specify a custom constraints file in .meta.toml:\n+#  [tox]\n+#  constraints_file = "https://my-server.com/constraints.txt"\n+##\n+commands =\n+    zope-testrunner --all --test-path={toxinidir}/src -s plone.api {posargs}\n+extras =\n+    test\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  test_extras = """\n+#      tests\n+#      widgets\n+#  """\n+##\n+\n+[testenv:coverage]\n+description = get a test coverage report\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n \n commands =\n-    python -VV\n-    isort --check-only --diff src setup.py\n+    coverage run --branch --source plone.api {envbindir}/zope-testrunner --quiet --all --test-path={toxinidir}/src -s plone.api {posargs}\n+    coverage report -m --format markdown\n+    coverage xml\n+    coverage html\n+extras =\n+    test\n \n-[testenv:isort-apply]\n-basepython = python3.9\n-skip_install = True\n \n+[testenv:release-check]\n+description = ensure that the distribution is ready to release\n+skip_install = true\n deps =\n-    isort\n+    twine\n+    build\n+    towncrier\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n \n commands =\n-    python -VV\n-    isort src setup.py {posargs}\n+    # fake version to not have to install the package\n+    # we build the change log as news entries might break\n+    # the README that is displayed on PyPI\n+    towncrier build --version=100.0.0 --yes\n+    python -m build --sdist\n+    twine check dist/*\n+\n+[testenv:circular]\n+description = ensure there are no cyclic dependencies\n+use_develop = true\n+skip_install = false\n+# Here we must always constrain the package deps to what is already installed,\n+# otherwise we simply get the latest from PyPI, which may not work.\n+constrain_package_deps = true\n+set_env =\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree\n+    pipforester\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n \n-[testenv:lint]\n-basepython = python3.9\n+commands =\n+    # Generate the full dependency tree\n+    sh -c \'pipdeptree -j > forest.json\'\n+    # Generate a DOT graph with the circular dependencies, if any\n+    pipforester -i forest.json -o forest.dot --cycles\n+    # Report if there are any circular dependencies, i.e. error if there are any\n+    pipforester -i forest.json --check-cycles -o /dev/null\n+\n+[testenv:py{38,39,310,311}-plone{60}]\n skip_install = True\n \n-deps =\n-    Jinja2<=3.0.3\n-    isort\n-    flake8\n-    # helper to generate HTML reports:\n-    flake8-html\n-    flake8-blind-except\n-    flake8-coding\n-    # flake8-commas\n-    flake8-debugger\n-    flake8-deprecated\n-    # flake8-docstrings\n-    flake8-isort\n-    flake8-pep3101\n-    flake8-plone-hasattr\n-    flake8-print\n-    # flake8-quotes\n-    flake8-string-format\n-    flake8-todo\n-\n commands =\n     python -VV\n-    mkdir -p {toxinidir}/_build/flake8\n-    - flake8 --format=html --htmldir={toxinidir}/_build/flake8 --ignore=C101 src setup.py\n-    flake8 --ignore=C101,P101,Q000 src setup.py\n+    pip install -r requirements.txt\n+    pip list\n+    {envbindir}/buildout -c /{toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} install test\n+    {envbindir}/buildout -c {toxinidir}/{env:BUILDOUT_FILE} buildout:directory={envdir} buildout:develop={toxinidir} annotate\n+    {envbindir}/test\n+\n+setenv =\n+    BUILDOUT_FILE=test_plone-60.cfg\n \n+deps =\n+    pdbpp\n+    manuel\n+\n+# tox < 4.0.0\n whitelist_externals =\n     mkdir\n+    echo\n \n+# tox >= 4.0.0\n+allowlist_externals =\n+    mkdir\n+    echo\n \n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n@@ -152,6 +260,8 @@ whitelist_externals =\n basepython = python3.9\n skip_install = False\n usedevelop = True\n+allowlist_externals =\n+    mkdir\n extras =\n     tests\n \n@@ -163,11 +273,12 @@ commands =\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n \n-\n [testenv:docs]\n basepython = python3.9\n skip_install = False\n usedevelop = True\n+allowlist_externals =\n+    mkdir\n extras =\n     tests\n \n@@ -182,11 +293,12 @@ commands =\n whitelist_externals =\n     mkdir\n \n-\n [testenv:linkcheck]\n basepython = python\n skip_install = False\n usedevelop = True\n+allowlist_externals =\n+    mkdir\n extras =\n     {[testenv:plone6docs]extras}\n deps =\n@@ -196,13 +308,10 @@ commands =\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n-\n-[testenv:towncrier]\n-basepython = python\n-skip_install = True\n-\n-deps=\n-    towncrier\n-\n-commands =\n-    towncrier --draft\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n'

