Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2023-05-24T07:31:08-07:00
Author: Thomas Schorr (tschorr) <t_schorr@gmx.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/a5b48c0c24e6eebbe01aa2874eaaa9aa3d49f155

Fix password validation tests (#3784)

* fix test

* update changelog

Files changed:
A news/3784.bugfix
M Products/CMFPlone/tests/testRegistrationTool.py

b'diff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py\nindex 2f68320bd2..87858eddbc 100644\n--- a/Products/CMFPlone/tests/testRegistrationTool.py\n+++ b/Products/CMFPlone/tests/testRegistrationTool.py\n@@ -134,13 +134,7 @@ def testTestPasswordValidityPolicy(self):\n         )\n         self.assertEqual(\n             self.registration.testPasswordValidity("abcd", confirm=None),\n-            "Your password must contain at least ${min_chars} characters.",\n-        )\n-        # Password validity is checked with an empty password\n-        # to get a nice help message to show for the input field.\n-        self.assertEqual(\n-            self.registration.testPasswordValidity("", confirm=None),\n-            "Minimum ${min_chars} characters.",\n+            "Your password must contain at least 8 characters.",\n         )\n \n     def testPasValidation(self):\n@@ -149,7 +143,7 @@ def testPasValidation(self):\n         )\n         self.assertEqual(\n             self.registration.pasValidation("password", "abcd"),\n-            "Your password must contain at least ${min_chars} characters.",\n+            "Your password must contain at least 8 characters.",\n         )\n \n     def testNewIdAllowed(self):\ndiff --git a/news/3784.bugfix b/news/3784.bugfix\nnew file mode 100644\nindex 0000000000..77bea46e6d\n--- /dev/null\n+++ b/news/3784.bugfix\n@@ -0,0 +1 @@\n+Fix password validation tests. [tschorr]\n'

Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2023-05-26T14:29:38+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/9ac0c8d9cc261112b5aea008d16791dcd4e66927

Fix membershipSearch

- check options many_users and many_groups and empty searchstring
- dont perform a search with active options and an empty search string

- fix #3790
- add a test
- add news

Files changed:
A news/3790.bugfix
M Products/CMFPlone/controlpanel/browser/usergroups.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/usergroups.py b/Products/CMFPlone/controlpanel/browser/usergroups.py\nindex 446cc3ccf4..535435cb8b 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups.py\n@@ -86,45 +86,49 @@ def membershipSearch(\n         )\n \n         if searchGroups:\n-            groupResults = searchView.merge(\n-                chain(\n-                    *[\n-                        searchView.searchGroups(**{field: searchString})\n-                        for field in ["id", "title"]\n-                    ]\n-                ),\n-                "groupid",\n-            )\n-            groupResults = [\n-                gtool.getGroupById(g["id"])\n-                for g in groupResults\n-                if g["id"] not in ignore\n-            ]\n-            groupResults.sort(\n-                key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName())\n-            )\n+            # Only search for all (\'\') if the many_users flag is not set.\n+            if not (self.many_groups) or bool(self.searchString):\n+                groupResults = searchView.merge(\n+                    chain(\n+                        *[\n+                            searchView.searchGroups(**{field: searchString})\n+                            for field in ["id", "title"]\n+                        ]\n+                    ),\n+                    "groupid",\n+                )\n+                groupResults = [\n+                    gtool.getGroupById(g["id"])\n+                    for g in groupResults\n+                    if g["id"] not in ignore\n+                ]\n+                groupResults.sort(\n+                    key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName())\n+                )\n \n         if searchUsers:\n-            userResults = searchView.merge(\n-                chain(\n-                    *[\n-                        searchView.searchUsers(**{field: searchString})\n-                        for field in ["login", "fullname", "email"]\n-                    ]\n-                ),\n-                "userid",\n-            )\n-            userResults = [\n-                mtool.getMemberById(u["id"])\n-                for u in userResults\n-                if u["id"] not in ignore\n-            ]\n-            userResults.sort(\n-                key=lambda x: x is not None\n-                and x.getProperty("fullname") is not None\n-                and normalizeString(x.getProperty("fullname"))\n-                or ""\n-            )\n+            # Only search for all (\'\') if the many_users flag is not set.\n+            if not (self.many_users) or bool(self.searchString):\n+                userResults = searchView.merge(\n+                    chain(\n+                        *[\n+                            searchView.searchUsers(**{field: searchString})\n+                            for field in ["login", "fullname", "email"]\n+                        ]\n+                    ),\n+                    "userid",\n+                )\n+                userResults = [\n+                    mtool.getMemberById(u["id"])\n+                    for u in userResults\n+                    if u["id"] not in ignore\n+                ]\n+                userResults.sort(\n+                    key=lambda x: x is not None\n+                    and x.getProperty("fullname") is not None\n+                    and normalizeString(x.getProperty("fullname"))\n+                    or ""\n+                )\n \n         return groupResults + userResults\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\nindex a07e1b1ff9..c245f4ed1a 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n@@ -1,13 +1,12 @@\n-from plone.app.testing import SITE_OWNER_NAME\n-from plone.app.testing import SITE_OWNER_PASSWORD\n+import unittest\n+\n+import transaction\n+from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.utils import normalizeString\n \n-import transaction\n-import unittest\n-\n \n class UserGroupsControlPanelFunctionalTest(unittest.TestCase):\n     """Test that changes in the user groups control panel are actually\n@@ -305,7 +304,7 @@ def setUp(self):\n         self.browser.addHeader(\n             "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n-\n+    \n     def test_usergroups_control_panel_link_users(self):\n         self.browser.open("%s/@@overview-controlpanel" % self.portal_url)\n         # There are two Users links.  The first is the Users tab.\n@@ -552,3 +551,63 @@ def test_usergroups_settings_many_groups(self):\n         self.browser.open(self.groups_url)\n         self.assertNotIn("Show all", self.browser.contents)\n         self.assertNotIn("DIispfuF", self.browser.contents)\n+    \n+    def test_usergroups_membership_many_users(self):\n+        from io import StringIO\n+\n+        from lxml import etree\n+\n+        # add user | many_users=False | many_groups=False\n+        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="add:list").getControl(\n+            value="TWrMCLIo"\n+        ).selected = True\n+        self.browser.getControl("Add selected groups and users to this group").click()\n+\n+        tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n+        result = tree.xpath(\n+            "count(//table[@summary=\'Groups\']/tbody/tr)"\n+        )\n+        \n+        # Rows with User Entries exists\n+        self.assertGreater(result, 1.0, "Table should contain User Entries")\n+\n+        # delete the user\n+        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="delete:list").getControl(\n+            value="TWrMCLIo"\n+        ).selected = True\n+        self.browser.getControl("Remove selected groups / users").click()        \n+        \n+        # set many_user and many_groups to True        \n+        self.browser.open("%s/@@usergroup-controlpanel" % self.portal_url)\n+\n+        self.browser.getControl(name="form.widgets.many_users:list").controls[\n+            0\n+        ].selected = True\n+        self.browser.getControl(name="form.widgets.many_groups:list").controls[\n+            0\n+        ].selected = True\n+        self.browser.getControl("Save").click()\n+\n+        # add user | many_users=True | many_groups=True\n+        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.getControl(name="searchstring").value = "j5g0xPmr"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="add:list").getControl(\n+            value="j5g0xPmr"\n+        ).selected = True\n+        self.browser.getControl("Add selected groups and users to this group").click()\n+\n+        tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n+        result = tree.xpath(\n+            "count(//table[@summary=\'Groups\']/tbody/tr)"\n+        )\n+        \n+        # No Rows with User Entries exists, only a row with a hint-text is visible\n+        self.assertEqual(1.0, result, "Table should contain no User Entries")\n+        \n\\ No newline at end of file\ndiff --git a/news/3790.bugfix b/news/3790.bugfix\nnew file mode 100644\nindex 0000000000..0e5320bf83\n--- /dev/null\n+++ b/news/3790.bugfix\n@@ -0,0 +1 @@\n+membershipSearch in UsersGroupsControlPanelView should respect many_groups, many_users Option and empty Searchstring |1letter\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2023-05-30T06:17:56+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/Products.CMFPlone/commit/aa13762090df30cd18b0a1ee00ed649236ed5da2

Merge branch '#fix3790' into 6.0.x-fix#3790

Files changed:
A news/3784.bugfix
A news/3790.bugfix
M Products/CMFPlone/controlpanel/browser/usergroups.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/usergroups.py b/Products/CMFPlone/controlpanel/browser/usergroups.py\nindex 446cc3ccf4..535435cb8b 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups.py\n@@ -86,45 +86,49 @@ def membershipSearch(\n         )\n \n         if searchGroups:\n-            groupResults = searchView.merge(\n-                chain(\n-                    *[\n-                        searchView.searchGroups(**{field: searchString})\n-                        for field in ["id", "title"]\n-                    ]\n-                ),\n-                "groupid",\n-            )\n-            groupResults = [\n-                gtool.getGroupById(g["id"])\n-                for g in groupResults\n-                if g["id"] not in ignore\n-            ]\n-            groupResults.sort(\n-                key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName())\n-            )\n+            # Only search for all (\'\') if the many_users flag is not set.\n+            if not (self.many_groups) or bool(self.searchString):\n+                groupResults = searchView.merge(\n+                    chain(\n+                        *[\n+                            searchView.searchGroups(**{field: searchString})\n+                            for field in ["id", "title"]\n+                        ]\n+                    ),\n+                    "groupid",\n+                )\n+                groupResults = [\n+                    gtool.getGroupById(g["id"])\n+                    for g in groupResults\n+                    if g["id"] not in ignore\n+                ]\n+                groupResults.sort(\n+                    key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName())\n+                )\n \n         if searchUsers:\n-            userResults = searchView.merge(\n-                chain(\n-                    *[\n-                        searchView.searchUsers(**{field: searchString})\n-                        for field in ["login", "fullname", "email"]\n-                    ]\n-                ),\n-                "userid",\n-            )\n-            userResults = [\n-                mtool.getMemberById(u["id"])\n-                for u in userResults\n-                if u["id"] not in ignore\n-            ]\n-            userResults.sort(\n-                key=lambda x: x is not None\n-                and x.getProperty("fullname") is not None\n-                and normalizeString(x.getProperty("fullname"))\n-                or ""\n-            )\n+            # Only search for all (\'\') if the many_users flag is not set.\n+            if not (self.many_users) or bool(self.searchString):\n+                userResults = searchView.merge(\n+                    chain(\n+                        *[\n+                            searchView.searchUsers(**{field: searchString})\n+                            for field in ["login", "fullname", "email"]\n+                        ]\n+                    ),\n+                    "userid",\n+                )\n+                userResults = [\n+                    mtool.getMemberById(u["id"])\n+                    for u in userResults\n+                    if u["id"] not in ignore\n+                ]\n+                userResults.sort(\n+                    key=lambda x: x is not None\n+                    and x.getProperty("fullname") is not None\n+                    and normalizeString(x.getProperty("fullname"))\n+                    or ""\n+                )\n \n         return groupResults + userResults\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\nindex a07e1b1ff9..c245f4ed1a 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n@@ -1,13 +1,12 @@\n-from plone.app.testing import SITE_OWNER_NAME\n-from plone.app.testing import SITE_OWNER_PASSWORD\n+import unittest\n+\n+import transaction\n+from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.utils import normalizeString\n \n-import transaction\n-import unittest\n-\n \n class UserGroupsControlPanelFunctionalTest(unittest.TestCase):\n     """Test that changes in the user groups control panel are actually\n@@ -305,7 +304,7 @@ def setUp(self):\n         self.browser.addHeader(\n             "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n-\n+    \n     def test_usergroups_control_panel_link_users(self):\n         self.browser.open("%s/@@overview-controlpanel" % self.portal_url)\n         # There are two Users links.  The first is the Users tab.\n@@ -552,3 +551,63 @@ def test_usergroups_settings_many_groups(self):\n         self.browser.open(self.groups_url)\n         self.assertNotIn("Show all", self.browser.contents)\n         self.assertNotIn("DIispfuF", self.browser.contents)\n+    \n+    def test_usergroups_membership_many_users(self):\n+        from io import StringIO\n+\n+        from lxml import etree\n+\n+        # add user | many_users=False | many_groups=False\n+        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="add:list").getControl(\n+            value="TWrMCLIo"\n+        ).selected = True\n+        self.browser.getControl("Add selected groups and users to this group").click()\n+\n+        tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n+        result = tree.xpath(\n+            "count(//table[@summary=\'Groups\']/tbody/tr)"\n+        )\n+        \n+        # Rows with User Entries exists\n+        self.assertGreater(result, 1.0, "Table should contain User Entries")\n+\n+        # delete the user\n+        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="delete:list").getControl(\n+            value="TWrMCLIo"\n+        ).selected = True\n+        self.browser.getControl("Remove selected groups / users").click()        \n+        \n+        # set many_user and many_groups to True        \n+        self.browser.open("%s/@@usergroup-controlpanel" % self.portal_url)\n+\n+        self.browser.getControl(name="form.widgets.many_users:list").controls[\n+            0\n+        ].selected = True\n+        self.browser.getControl(name="form.widgets.many_groups:list").controls[\n+            0\n+        ].selected = True\n+        self.browser.getControl("Save").click()\n+\n+        # add user | many_users=True | many_groups=True\n+        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.getControl(name="searchstring").value = "j5g0xPmr"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="add:list").getControl(\n+            value="j5g0xPmr"\n+        ).selected = True\n+        self.browser.getControl("Add selected groups and users to this group").click()\n+\n+        tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n+        result = tree.xpath(\n+            "count(//table[@summary=\'Groups\']/tbody/tr)"\n+        )\n+        \n+        # No Rows with User Entries exists, only a row with a hint-text is visible\n+        self.assertEqual(1.0, result, "Table should contain no User Entries")\n+        \n\\ No newline at end of file\ndiff --git a/news/3784.bugfix b/news/3784.bugfix\nnew file mode 100644\nindex 0000000000..77bea46e6d\n--- /dev/null\n+++ b/news/3784.bugfix\n@@ -0,0 +1 @@\n+Fix password validation tests. [tschorr]\ndiff --git a/news/3790.bugfix b/news/3790.bugfix\nnew file mode 100644\nindex 0000000000..0e5320bf83\n--- /dev/null\n+++ b/news/3790.bugfix\n@@ -0,0 +1 @@\n+membershipSearch in UsersGroupsControlPanelView should respect many_groups, many_users Option and empty Searchstring |1letter\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2023-05-30T11:58:13+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/6f5cf370df89aaeddee6e12b20ecfc33ead9b2d5

pre-commit run -a

Files changed:
M Products/CMFPlone/controlpanel/browser/usergroups.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/usergroups.py b/Products/CMFPlone/controlpanel/browser/usergroups.py\nindex 535435cb8b..52221ccaae 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups.py\n@@ -103,7 +103,8 @@ def membershipSearch(\n                     if g["id"] not in ignore\n                 ]\n                 groupResults.sort(\n-                    key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName())\n+                    key=lambda x: x is not None\n+                    and normalizeString(x.getGroupTitleOrName())\n                 )\n \n         if searchUsers:\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\nindex c245f4ed1a..0aa764f851 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n@@ -1,12 +1,13 @@\n-import unittest\n-\n-import transaction\n-from plone.app.testing import SITE_OWNER_NAME, SITE_OWNER_PASSWORD\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n from Products.CMFPlone.utils import normalizeString\n \n+import transaction\n+import unittest\n+\n \n class UserGroupsControlPanelFunctionalTest(unittest.TestCase):\n     """Test that changes in the user groups control panel are actually\n@@ -304,7 +305,7 @@ def setUp(self):\n         self.browser.addHeader(\n             "Authorization", f"Basic {SITE_OWNER_NAME}:{SITE_OWNER_PASSWORD}"\n         )\n-    \n+\n     def test_usergroups_control_panel_link_users(self):\n         self.browser.open("%s/@@overview-controlpanel" % self.portal_url)\n         # There are two Users links.  The first is the Users tab.\n@@ -551,14 +552,15 @@ def test_usergroups_settings_many_groups(self):\n         self.browser.open(self.groups_url)\n         self.assertNotIn("Show all", self.browser.contents)\n         self.assertNotIn("DIispfuF", self.browser.contents)\n-    \n+\n     def test_usergroups_membership_many_users(self):\n         from io import StringIO\n-\n         from lxml import etree\n \n         # add user | many_users=False | many_groups=False\n-        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.open(\n+            "%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url\n+        )\n         self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n         self.browser.getControl(name="form.button.Search").click()\n         self.browser.getControl(name="add:list").getControl(\n@@ -567,23 +569,23 @@ def test_usergroups_membership_many_users(self):\n         self.browser.getControl("Add selected groups and users to this group").click()\n \n         tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n-        result = tree.xpath(\n-            "count(//table[@summary=\'Groups\']/tbody/tr)"\n-        )\n-        \n+        result = tree.xpath("count(//table[@summary=\'Groups\']/tbody/tr)")\n+\n         # Rows with User Entries exists\n         self.assertGreater(result, 1.0, "Table should contain User Entries")\n \n         # delete the user\n-        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.open(\n+            "%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url\n+        )\n         self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n         self.browser.getControl(name="form.button.Search").click()\n         self.browser.getControl(name="delete:list").getControl(\n             value="TWrMCLIo"\n         ).selected = True\n-        self.browser.getControl("Remove selected groups / users").click()        \n-        \n-        # set many_user and many_groups to True        \n+        self.browser.getControl("Remove selected groups / users").click()\n+\n+        # set many_user and many_groups to True\n         self.browser.open("%s/@@usergroup-controlpanel" % self.portal_url)\n \n         self.browser.getControl(name="form.widgets.many_users:list").controls[\n@@ -595,7 +597,9 @@ def test_usergroups_membership_many_users(self):\n         self.browser.getControl("Save").click()\n \n         # add user | many_users=True | many_groups=True\n-        self.browser.open("%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url)\n+        self.browser.open(\n+            "%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url\n+        )\n         self.browser.getControl(name="searchstring").value = "j5g0xPmr"\n         self.browser.getControl(name="form.button.Search").click()\n         self.browser.getControl(name="add:list").getControl(\n@@ -604,10 +608,7 @@ def test_usergroups_membership_many_users(self):\n         self.browser.getControl("Add selected groups and users to this group").click()\n \n         tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n-        result = tree.xpath(\n-            "count(//table[@summary=\'Groups\']/tbody/tr)"\n-        )\n-        \n+        result = tree.xpath("count(//table[@summary=\'Groups\']/tbody/tr)")\n+\n         # No Rows with User Entries exists, only a row with a hint-text is visible\n         self.assertEqual(1.0, result, "Table should contain no User Entries")\n-        \n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2023-05-30T14:03:26+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/d62ce99306e8229bf7f1b6e588af120e91bd22a1

Merge pull request #3793 from plone/6.0.x-fix#3790

6.0.x fix#3790

Files changed:
A news/3784.bugfix
A news/3790.bugfix
M Products/CMFPlone/controlpanel/browser/usergroups.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/usergroups.py b/Products/CMFPlone/controlpanel/browser/usergroups.py\nindex 446cc3ccf4..52221ccaae 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups.py\n@@ -86,45 +86,50 @@ def membershipSearch(\n         )\n \n         if searchGroups:\n-            groupResults = searchView.merge(\n-                chain(\n-                    *[\n-                        searchView.searchGroups(**{field: searchString})\n-                        for field in ["id", "title"]\n-                    ]\n-                ),\n-                "groupid",\n-            )\n-            groupResults = [\n-                gtool.getGroupById(g["id"])\n-                for g in groupResults\n-                if g["id"] not in ignore\n-            ]\n-            groupResults.sort(\n-                key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName())\n-            )\n+            # Only search for all (\'\') if the many_users flag is not set.\n+            if not (self.many_groups) or bool(self.searchString):\n+                groupResults = searchView.merge(\n+                    chain(\n+                        *[\n+                            searchView.searchGroups(**{field: searchString})\n+                            for field in ["id", "title"]\n+                        ]\n+                    ),\n+                    "groupid",\n+                )\n+                groupResults = [\n+                    gtool.getGroupById(g["id"])\n+                    for g in groupResults\n+                    if g["id"] not in ignore\n+                ]\n+                groupResults.sort(\n+                    key=lambda x: x is not None\n+                    and normalizeString(x.getGroupTitleOrName())\n+                )\n \n         if searchUsers:\n-            userResults = searchView.merge(\n-                chain(\n-                    *[\n-                        searchView.searchUsers(**{field: searchString})\n-                        for field in ["login", "fullname", "email"]\n-                    ]\n-                ),\n-                "userid",\n-            )\n-            userResults = [\n-                mtool.getMemberById(u["id"])\n-                for u in userResults\n-                if u["id"] not in ignore\n-            ]\n-            userResults.sort(\n-                key=lambda x: x is not None\n-                and x.getProperty("fullname") is not None\n-                and normalizeString(x.getProperty("fullname"))\n-                or ""\n-            )\n+            # Only search for all (\'\') if the many_users flag is not set.\n+            if not (self.many_users) or bool(self.searchString):\n+                userResults = searchView.merge(\n+                    chain(\n+                        *[\n+                            searchView.searchUsers(**{field: searchString})\n+                            for field in ["login", "fullname", "email"]\n+                        ]\n+                    ),\n+                    "userid",\n+                )\n+                userResults = [\n+                    mtool.getMemberById(u["id"])\n+                    for u in userResults\n+                    if u["id"] not in ignore\n+                ]\n+                userResults.sort(\n+                    key=lambda x: x is not None\n+                    and x.getProperty("fullname") is not None\n+                    and normalizeString(x.getProperty("fullname"))\n+                    or ""\n+                )\n \n         return groupResults + userResults\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\nindex a07e1b1ff9..0aa764f851 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_usergroups.py\n@@ -552,3 +552,63 @@ def test_usergroups_settings_many_groups(self):\n         self.browser.open(self.groups_url)\n         self.assertNotIn("Show all", self.browser.contents)\n         self.assertNotIn("DIispfuF", self.browser.contents)\n+\n+    def test_usergroups_membership_many_users(self):\n+        from io import StringIO\n+        from lxml import etree\n+\n+        # add user | many_users=False | many_groups=False\n+        self.browser.open(\n+            "%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url\n+        )\n+        self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="add:list").getControl(\n+            value="TWrMCLIo"\n+        ).selected = True\n+        self.browser.getControl("Add selected groups and users to this group").click()\n+\n+        tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n+        result = tree.xpath("count(//table[@summary=\'Groups\']/tbody/tr)")\n+\n+        # Rows with User Entries exists\n+        self.assertGreater(result, 1.0, "Table should contain User Entries")\n+\n+        # delete the user\n+        self.browser.open(\n+            "%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url\n+        )\n+        self.browser.getControl(name="searchstring").value = "TWrMCLIo"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="delete:list").getControl(\n+            value="TWrMCLIo"\n+        ).selected = True\n+        self.browser.getControl("Remove selected groups / users").click()\n+\n+        # set many_user and many_groups to True\n+        self.browser.open("%s/@@usergroup-controlpanel" % self.portal_url)\n+\n+        self.browser.getControl(name="form.widgets.many_users:list").controls[\n+            0\n+        ].selected = True\n+        self.browser.getControl(name="form.widgets.many_groups:list").controls[\n+            0\n+        ].selected = True\n+        self.browser.getControl("Save").click()\n+\n+        # add user | many_users=True | many_groups=True\n+        self.browser.open(\n+            "%s/@@usergroup-groupmembership?groupname=group1" % self.portal_url\n+        )\n+        self.browser.getControl(name="searchstring").value = "j5g0xPmr"\n+        self.browser.getControl(name="form.button.Search").click()\n+        self.browser.getControl(name="add:list").getControl(\n+            value="j5g0xPmr"\n+        ).selected = True\n+        self.browser.getControl("Add selected groups and users to this group").click()\n+\n+        tree = etree.parse(StringIO(self.browser.contents), etree.HTMLParser())\n+        result = tree.xpath("count(//table[@summary=\'Groups\']/tbody/tr)")\n+\n+        # No Rows with User Entries exists, only a row with a hint-text is visible\n+        self.assertEqual(1.0, result, "Table should contain no User Entries")\ndiff --git a/news/3784.bugfix b/news/3784.bugfix\nnew file mode 100644\nindex 0000000000..77bea46e6d\n--- /dev/null\n+++ b/news/3784.bugfix\n@@ -0,0 +1 @@\n+Fix password validation tests. [tschorr]\ndiff --git a/news/3790.bugfix b/news/3790.bugfix\nnew file mode 100644\nindex 0000000000..0e5320bf83\n--- /dev/null\n+++ b/news/3790.bugfix\n@@ -0,0 +1 @@\n+membershipSearch in UsersGroupsControlPanelView should respect many_groups, many_users Option and empty Searchstring |1letter\n\\ No newline at end of file\n'

