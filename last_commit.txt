Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-07-14T13:46:31-04:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/ea0f2c754ef38438e73308188b9c1aae4c8175f5

Fix types expander in root for 5.2 (for non-DX Plone Site Root) (#1669)

* Fix types expander in root for 5.2 when a DX Plone Site Root is not present

* Changelog

* Remove modified Python version in Makefile

* Update news/1669.bugfix

---------

Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;

Files changed:
A news/1669.bugfix
M plone-5.2.x.cfg
M requirements-5.2.txt
M src/plone/restapi/services/types/configure.zcml
M src/plone/restapi/services/types/get.py
M src/plone/restapi/tests/test_expansion.py

b'diff --git a/news/1669.bugfix b/news/1669.bugfix\nnew file mode 100644\nindex 000000000..773b414f0\n--- /dev/null\n+++ b/news/1669.bugfix\n@@ -0,0 +1 @@\n+Fix types expander in root for Plone 5.2 (for non-Dexterity Plone Site Root) @sneridagh\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex c3f078375..d3706718d 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -1,10 +1,10 @@\n [buildout]\n extends =\n-    https://dist.plone.org/release/5.2.9/versions.cfg\n+    https://dist.plone.org/release/5.2.12/versions.cfg\n     base.cfg\n \n [versions]\n black = 21.7b0\n \n-# Use the new plone.rest alpha\n-plone.rest = 2.0.0a3\n+# Use the newest plone.rest\n+plone.rest = 3.0.0\ndiff --git a/requirements-5.2.txt b/requirements-5.2.txt\nindex 44d07ef43..f2e443e3f 100644\n--- a/requirements-5.2.txt\n+++ b/requirements-5.2.txt\n@@ -1,2 +1,2 @@\n--r https://dist.plone.org/release/5.2.9/requirements.txt\n+-r https://dist.plone.org/release/5.2.12/requirements.txt\n zpretty\ndiff --git a/src/plone/restapi/services/types/configure.zcml b/src/plone/restapi/services/types/configure.zcml\nindex 9255ac76f..a386e9b15 100644\n--- a/src/plone/restapi/services/types/configure.zcml\n+++ b/src/plone/restapi/services/types/configure.zcml\n@@ -50,4 +50,9 @@\n       name="types"\n       />\n \n+  <adapter\n+      factory=".get.TypesInfoRoot"\n+      name="types"\n+      />\n+\n </configure>\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex ffd928038..536dbd449 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -7,6 +7,7 @@\n from plone.restapi.types.utils import get_info_for_fieldset\n from plone.restapi.types.utils import get_info_for_type\n from Products.CMFCore.interfaces import IFolderish\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from Products.CMFCore.utils import getToolByName\n from zExceptions import Unauthorized\n from zope.component import adapter\n@@ -85,6 +86,12 @@ def __call__(self, expand=False):\n         return result\n \n \n+@implementer(IExpandableElement)\n+@adapter(IPloneSiteRoot, Interface)\n+class TypesInfoRoot(TypesInfo):\n+    pass\n+\n+\n @implementer(IPublishTraverse)\n class TypesGet(Service):\n     def __init__(self, context, request):\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex b33926f74..096f25b89 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -338,6 +338,12 @@ def test_types_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn("types", list(response.json().get("@components")))\n \n+    def test_types_is_expandable_in_root(self):\n+        response = self.api_session.get("/")\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn("types", list(response.json().get("@components")))\n+\n     def test_types_expanded(self):\n         response = self.api_session.get("/folder", params={"expand": "types"})\n \n@@ -418,6 +424,86 @@ def test_types_expanded(self):\n             response.json().get("@components").get("types"),\n         )\n \n+    def test_types_expanded_in_root(self):\n+        response = self.api_session.get("/", params={"expand": "types"})\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+        # XXX: Note: The @types endpoint currently doesn\'t conform to JSON-LD\n+        # because it\'s directly returning a list, and does not have an @id\n+        # property.\n+\n+        base_url = self.portal.absolute_url()\n+\n+        self.assertEqual(\n+            [\n+                {\n+                    "@id": "/".join((base_url, "@types/Collection")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "Collection",\n+                    "id": "Collection",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/DXTestDocument")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "DX Test Document",\n+                    "id": "DXTestDocument",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/Event")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "Event",\n+                    "id": "Event",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/File")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "File",\n+                    "id": "File",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/Folder")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "Folder",\n+                    "id": "Folder",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/Image")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "Image",\n+                    "id": "Image",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/Link")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "Link",\n+                    "id": "Link",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/News Item")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "News Item",\n+                    "id": "News Item",\n+                },\n+                {\n+                    "@id": "/".join((base_url, "@types/Document")),\n+                    "addable": True,\n+                    "immediately_addable": True,\n+                    "title": "Page",\n+                    "id": "Document",\n+                },\n+            ],\n+            response.json().get("@components").get("types"),\n+        )\n+\n \n class TestTranslationExpansionFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n'

