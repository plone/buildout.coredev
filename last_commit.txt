Repository: plone.api


Branch: refs/heads/master
Date: 2021-03-08T08:50:21+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.api/commit/689e6277f82f0e23c287ee194a4e4977808c01e8

Fix plone.api.content.find to respect object_provides "not" queries.

Fixes: #451

Files changed:
A news/452.bugfix
M src/plone/api/content.py
M src/plone/api/tests/test_content.py

b'diff --git a/news/452.bugfix b/news/452.bugfix\nnew file mode 100644\nindex 0000000..6e802e0\n--- /dev/null\n+++ b/news/452.bugfix\n@@ -0,0 +1,3 @@\n+Fix plone.api.content.find to respect object_provides "not" queries.\n+Fixes: #451\n+[thet]\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 08f738d..1f520a1 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -594,18 +594,35 @@ def _parse_object_provides_query(query):\n         query for multiple values\n         (eg. `{\'query\': [Iface1, Iface2], \'operator\': \'or\'}`)\n     """\n-    operator = \'or\'\n     ifaces = query\n+    operator = \'or\'\n+    query_not = []\n+\n     if isinstance(query, dict):\n-        operator = query.get(\'operator\', operator)\n         ifaces = query.get(\'query\', [])\n-    elif not isinstance(query, (list, tuple)):\n-        ifaces = [query]\n+        operator = query.get(\'operator\', operator)\n+        query_not = query.get(\'not\', [])\n+        # KeywordIndex also supports "range",\n+        # but that\'s not useful for querying object_provides\n+\n+    if not isinstance(ifaces, (list, tuple)):\n+        ifaces = [ifaces]\n+    ifaces = [getattr(x, \'__identifier__\', x) for x in ifaces]\n+\n+    if not isinstance(query_not, (list, tuple)):\n+        query_not = [query_not]\n+    query_not = [getattr(x, \'__identifier__\', x) for x in query_not]\n+\n+    result = {}\n+\n+    if ifaces:\n+        result[\'query\'] = ifaces\n+        result[\'operator\'] = operator\n+\n+    if query_not:\n+        result[\'not\'] = query_not\n \n-    return {\n-        \'query\': [getattr(x, \'__identifier__\', x) for x in ifaces],\n-        \'operator\': operator,\n-    }\n+    return result\n \n \n def find(context=None, depth=None, **kwargs):\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 795a8c2..766287b 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -5,7 +5,10 @@\n from OFS.CopySupport import CopyError\n from OFS.event import ObjectWillBeMovedEvent\n from OFS.interfaces import IObjectWillBeMovedEvent\n+from pkg_resources import parse_version\n from plone import api\n+from plone.api import env\n+from plone.api.content import _parse_object_provides_query\n from plone.api.content import NEW_LINKINTEGRITY\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -42,6 +45,9 @@\n     HAS_PACONTENTYPES = True\n \n \n+HAS_PLONE51 = parse_version(env.plone_version()) >= parse_version(\'5.1\')\n+\n+\n class TestPloneApiContent(unittest.TestCase):\n     """Unit tests for content manipulation using plone.api"""\n \n@@ -1049,6 +1055,78 @@ def test_find_interface_dict(self):\n         )\n         self.assertEqual(len(brains), 1)\n \n+    @unittest.skipUnless(\n+        HAS_PLONE51,\n+        \'Negative queries only available since Products.ZCatalog 3.0a1 or Plone 5.1\',\n+    )\n+    def test_find_interface_dict__include_not_query(self):\n+        """Check if not query in object_provides is functional.\n+        """\n+\n+        brains_all = api.content.find(\n+            object_provides={\'query\': IContentish.__identifier__},\n+        )\n+\n+        alsoProvides(self.portal.events, INavigationRoot)\n+        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+\n+        brains = api.content.find(\n+            object_provides={\n+                \'query\': IContentish.__identifier__,\n+                \'not\': INavigationRoot.__identifier__\n+            },\n+        )\n+\n+        self.assertEqual(len(brains_all) - len(brains), 1)\n+\n+    def test_find_interface_dict__all_options(self):\n+        """ Check for all options in a object_provides query are correctly\n+        transformed.\n+        """\n+        parser = _parse_object_provides_query\n+\n+        self.assertDictEqual(\n+            parser({\'query\': IContentish}),\n+            {\'query\': [IContentish.__identifier__], \'operator\': \'or\'},\n+        )\n+\n+        self.assertDictEqual(\n+            parser(\n+                {\n+                    \'query\': [IContentish, INavigationRoot.__identifier__],\n+                    \'operator\': \'and\'\n+                }\n+            ),\n+            {\n+                \'query\': [IContentish.__identifier__, INavigationRoot.__identifier__],\n+                \'operator\': \'and\'\n+            },\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'not\': IContentish}),\n+            {\'not\': [IContentish.__identifier__]},\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'not\': [IContentish, INavigationRoot.__identifier__]}),\n+            {\'not\': [IContentish.__identifier__, INavigationRoot.__identifier__]},\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'not\': IContentish}),\n+            {\'not\': [IContentish.__identifier__]},\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'query\': IContentish, \'operator\': \'and\', \'not\': INavigationRoot}),\n+            {\n+                \'query\': [IContentish.__identifier__],\n+                \'operator\': \'and\',\n+                \'not\': [INavigationRoot.__identifier__],\n+            },\n+        )\n+\n     def test_find_dict(self):\n         # Pass arguments using dict\n         path = \'/\'.join(self.portal.about.getPhysicalPath())\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-03-08T09:05:47+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.api/commit/82f183513ef5b20ca56737eaebdd21848c6e3739

Condition on test not necessary anymore as Plone &lt; 5.2 support was dropped.

Files changed:
M src/plone/api/tests/test_content.py

b'diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 766287b..f840d10 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -5,9 +5,7 @@\n from OFS.CopySupport import CopyError\n from OFS.event import ObjectWillBeMovedEvent\n from OFS.interfaces import IObjectWillBeMovedEvent\n-from pkg_resources import parse_version\n from plone import api\n-from plone.api import env\n from plone.api.content import _parse_object_provides_query\n from plone.api.content import NEW_LINKINTEGRITY\n from plone.api.tests.base import INTEGRATION_TESTING\n@@ -45,9 +43,6 @@\n     HAS_PACONTENTYPES = True\n \n \n-HAS_PLONE51 = parse_version(env.plone_version()) >= parse_version(\'5.1\')\n-\n-\n class TestPloneApiContent(unittest.TestCase):\n     """Unit tests for content manipulation using plone.api"""\n \n@@ -1055,10 +1050,6 @@ def test_find_interface_dict(self):\n         )\n         self.assertEqual(len(brains), 1)\n \n-    @unittest.skipUnless(\n-        HAS_PLONE51,\n-        \'Negative queries only available since Products.ZCatalog 3.0a1 or Plone 5.1\',\n-    )\n     def test_find_interface_dict__include_not_query(self):\n         """Check if not query in object_provides is functional.\n         """\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-03-08T14:17:28+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.api/commit/9a80f4c977f1472fbb2a7b2ec3fa5835d337300f

Adapt flake8 to Plone/black standards.

Files changed:
A news/452.feature
M setup.cfg

b'diff --git a/news/452.feature b/news/452.feature\nnew file mode 100644\nindex 0000000..3cb2dc2\n--- /dev/null\n+++ b/news/452.feature\n@@ -0,0 +1,2 @@\n+Adapt flake8 to Plone/black standards.\n+[thet]\ndiff --git a/setup.cfg b/setup.cfg\nindex e6a3d56..30f5d07 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -4,11 +4,8 @@ ignore =\n     .travis.yml\n \n [flake8]\n-exclude =\n-    bootstrap-buildout.py,\n-\n-ignore =\n-    W503\n+max-line-length = 88\n+extend-ignore = E203, W503\n \n [isort]\n force_alphabetical_sort=True\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2021-03-08T14:17:36+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.api/commit/b1f728498bc8972bb94ab61357d6fc87dd90e1d5

fix flake8 errors

Files changed:
M src/plone/api/tests/test_content.py

b"diff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex f840d10..fcbecaf 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -1064,7 +1064,7 @@ def test_find_interface_dict__include_not_query(self):\n         brains = api.content.find(\n             object_provides={\n                 'query': IContentish.__identifier__,\n-                'not': INavigationRoot.__identifier__\n+                'not': INavigationRoot.__identifier__,\n             },\n         )\n \n@@ -1085,12 +1085,12 @@ def test_find_interface_dict__all_options(self):\n             parser(\n                 {\n                     'query': [IContentish, INavigationRoot.__identifier__],\n-                    'operator': 'and'\n-                }\n+                    'operator': 'and',\n+                },\n             ),\n             {\n                 'query': [IContentish.__identifier__, INavigationRoot.__identifier__],\n-                'operator': 'and'\n+                'operator': 'and',\n             },\n         )\n \n"

Repository: plone.api


Branch: refs/heads/master
Date: 2021-03-09T08:21:49+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.api/commit/b9013bbbec5bdc4f9b1e456cbb0306afbd8d916c

Merge pull request #452 from plone/thet_object_provides

Fix plone.api.content.find to respect object_provides "not" queries.

Files changed:
A news/452.bugfix
A news/452.feature
M setup.cfg
M src/plone/api/content.py
M src/plone/api/tests/test_content.py

b'diff --git a/news/452.bugfix b/news/452.bugfix\nnew file mode 100644\nindex 0000000..6e802e0\n--- /dev/null\n+++ b/news/452.bugfix\n@@ -0,0 +1,3 @@\n+Fix plone.api.content.find to respect object_provides "not" queries.\n+Fixes: #451\n+[thet]\ndiff --git a/news/452.feature b/news/452.feature\nnew file mode 100644\nindex 0000000..3cb2dc2\n--- /dev/null\n+++ b/news/452.feature\n@@ -0,0 +1,2 @@\n+Adapt flake8 to Plone/black standards.\n+[thet]\ndiff --git a/setup.cfg b/setup.cfg\nindex e6a3d56..30f5d07 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -4,11 +4,8 @@ ignore =\n     .travis.yml\n \n [flake8]\n-exclude =\n-    bootstrap-buildout.py,\n-\n-ignore =\n-    W503\n+max-line-length = 88\n+extend-ignore = E203, W503\n \n [isort]\n force_alphabetical_sort=True\ndiff --git a/src/plone/api/content.py b/src/plone/api/content.py\nindex 08f738d..1f520a1 100644\n--- a/src/plone/api/content.py\n+++ b/src/plone/api/content.py\n@@ -594,18 +594,35 @@ def _parse_object_provides_query(query):\n         query for multiple values\n         (eg. `{\'query\': [Iface1, Iface2], \'operator\': \'or\'}`)\n     """\n-    operator = \'or\'\n     ifaces = query\n+    operator = \'or\'\n+    query_not = []\n+\n     if isinstance(query, dict):\n-        operator = query.get(\'operator\', operator)\n         ifaces = query.get(\'query\', [])\n-    elif not isinstance(query, (list, tuple)):\n-        ifaces = [query]\n+        operator = query.get(\'operator\', operator)\n+        query_not = query.get(\'not\', [])\n+        # KeywordIndex also supports "range",\n+        # but that\'s not useful for querying object_provides\n+\n+    if not isinstance(ifaces, (list, tuple)):\n+        ifaces = [ifaces]\n+    ifaces = [getattr(x, \'__identifier__\', x) for x in ifaces]\n+\n+    if not isinstance(query_not, (list, tuple)):\n+        query_not = [query_not]\n+    query_not = [getattr(x, \'__identifier__\', x) for x in query_not]\n+\n+    result = {}\n+\n+    if ifaces:\n+        result[\'query\'] = ifaces\n+        result[\'operator\'] = operator\n+\n+    if query_not:\n+        result[\'not\'] = query_not\n \n-    return {\n-        \'query\': [getattr(x, \'__identifier__\', x) for x in ifaces],\n-        \'operator\': operator,\n-    }\n+    return result\n \n \n def find(context=None, depth=None, **kwargs):\ndiff --git a/src/plone/api/tests/test_content.py b/src/plone/api/tests/test_content.py\nindex 795a8c2..fcbecaf 100644\n--- a/src/plone/api/tests/test_content.py\n+++ b/src/plone/api/tests/test_content.py\n@@ -6,6 +6,7 @@\n from OFS.event import ObjectWillBeMovedEvent\n from OFS.interfaces import IObjectWillBeMovedEvent\n from plone import api\n+from plone.api.content import _parse_object_provides_query\n from plone.api.content import NEW_LINKINTEGRITY\n from plone.api.tests.base import INTEGRATION_TESTING\n from plone.app.layout.navigation.interfaces import INavigationRoot\n@@ -1049,6 +1050,74 @@ def test_find_interface_dict(self):\n         )\n         self.assertEqual(len(brains), 1)\n \n+    def test_find_interface_dict__include_not_query(self):\n+        """Check if not query in object_provides is functional.\n+        """\n+\n+        brains_all = api.content.find(\n+            object_provides={\'query\': IContentish.__identifier__},\n+        )\n+\n+        alsoProvides(self.portal.events, INavigationRoot)\n+        self.portal.events.reindexObject(idxs=[\'object_provides\'])\n+\n+        brains = api.content.find(\n+            object_provides={\n+                \'query\': IContentish.__identifier__,\n+                \'not\': INavigationRoot.__identifier__,\n+            },\n+        )\n+\n+        self.assertEqual(len(brains_all) - len(brains), 1)\n+\n+    def test_find_interface_dict__all_options(self):\n+        """ Check for all options in a object_provides query are correctly\n+        transformed.\n+        """\n+        parser = _parse_object_provides_query\n+\n+        self.assertDictEqual(\n+            parser({\'query\': IContentish}),\n+            {\'query\': [IContentish.__identifier__], \'operator\': \'or\'},\n+        )\n+\n+        self.assertDictEqual(\n+            parser(\n+                {\n+                    \'query\': [IContentish, INavigationRoot.__identifier__],\n+                    \'operator\': \'and\',\n+                },\n+            ),\n+            {\n+                \'query\': [IContentish.__identifier__, INavigationRoot.__identifier__],\n+                \'operator\': \'and\',\n+            },\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'not\': IContentish}),\n+            {\'not\': [IContentish.__identifier__]},\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'not\': [IContentish, INavigationRoot.__identifier__]}),\n+            {\'not\': [IContentish.__identifier__, INavigationRoot.__identifier__]},\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'not\': IContentish}),\n+            {\'not\': [IContentish.__identifier__]},\n+        )\n+\n+        self.assertDictEqual(\n+            parser({\'query\': IContentish, \'operator\': \'and\', \'not\': INavigationRoot}),\n+            {\n+                \'query\': [IContentish.__identifier__],\n+                \'operator\': \'and\',\n+                \'not\': [INavigationRoot.__identifier__],\n+            },\n+        )\n+\n     def test_find_dict(self):\n         # Pass arguments using dict\n         path = \'/\'.join(self.portal.about.getPhysicalPath())\n'

