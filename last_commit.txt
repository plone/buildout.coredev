Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-23T21:31:10+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.namedfile/commit/32b301bdb42dcc64f5dd0c593aff0edc4c5780bd

Fix image scaling to return the originals when no scaling is required

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 97d7c41..aabe38d 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -218,6 +218,10 @@ def __call__(\n         if height is None and width is None:\n             dummy, format_ = orig_value.contentType.split("/", 1)\n             return None, format_, (orig_value._width, orig_value._height)\n+        elif height == orig_value._height and width == orig_value._width:\n+            if not parameters:\n+                dummy, format_ = orig_value.contentType.split("/", 1)\n+                return orig_value, format_, (orig_value._width, orig_value._height)\n         orig_data = None\n         try:\n             orig_data = orig_value.open()\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex c044d96..a31c644 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -85,6 +85,22 @@ def testCreateScale(self):\n         self.assertEqual(foo.height, 80)\n         assertImage(self, foo.data.data, \'PNG\', (80, 80))\n \n+    def testCreateExactScale(self):\n+        foo = self.scaling.scale(\'image\', width=100, height=80)\n+        self.assertIsNot(foo.data, self.item.image)\n+\n+        # test that exact scale without parameters returns original\n+        foo = self.scaling.scale(\'image\',\n+                                 width=self.item.image._width,\n+                                 height=self.item.image._height)\n+        self.assertIs(foo.data, self.item.image)\n+\n+        foo = self.scaling.scale(\'image\',\n+                                 width=self.item.image._width,\n+                                 height=self.item.image._height,\n+                                 quality=80)\n+        self.assertIsNot(foo.data, self.item.image)\n+\n     def testCreateHighPixelDensityScale(self):\n         self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n         foo = self.scaling.scale(\'image\', width=100, height=80)\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-23T21:36:54+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.namedfile/commit/942d34d120d3cd0b0a96e45f09cf486e2847bb38

Add changelog entry

Files changed:
A news/92.bugfix

b'diff --git a/news/92.bugfix b/news/92.bugfix\nnew file mode 100644\nindex 0000000..44b5211\n--- /dev/null\n+++ b/news/92.bugfix\n@@ -0,0 +1 @@\n+- Fix image scaling to re-use the original image when scaling is not required to allow Plone REST API to use cacheable scale URL for the original image without performance penalty [datakurre]\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-23T23:44:13+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.namedfile/commit/5a4a41d1d3a746d601c5cf3e88397a1ba983bf9f

Fix test failure in plone.formwidget.namedfile, where image bytes were directly saved as image value

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex aabe38d..d7cd7a4 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -218,10 +218,11 @@ def __call__(\n         if height is None and width is None:\n             dummy, format_ = orig_value.contentType.split("/", 1)\n             return None, format_, (orig_value._width, orig_value._height)\n-        elif height == orig_value._height and width == orig_value._width:\n-            if not parameters:\n-                dummy, format_ = orig_value.contentType.split("/", 1)\n-                return orig_value, format_, (orig_value._width, orig_value._height)\n+        elif not parameters and height and width \\\n+                and height == getattr(orig_value, "_height", None) \\\n+                and width == getattr(orig_value, "_width", None):\n+            dummy, format_ = orig_value.contentType.split("/", 1)\n+            return orig_value, format_, (orig_value._width, orig_value._height)\n         orig_data = None\n         try:\n             orig_data = orig_value.open()\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-24T18:11:35+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.namedfile/commit/a68a6e63a320adedd7f91ba64560c963b24144c8

Update changelog item

Files changed:
M news/92.bugfix

b'diff --git a/news/92.bugfix b/news/92.bugfix\nindex 44b5211..8713023 100644\n--- a/news/92.bugfix\n+++ b/news/92.bugfix\n@@ -1 +1 @@\n-- Fix image scaling to re-use the original image when scaling is not required to allow Plone REST API to use cacheable scale URL for the original image without performance penalty [datakurre]\n+Fix image scaling to re-use the original image when scaling is not required to allow Plone REST API to use cacheable scale URL for the original image without performance penalty [datakurre]\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-30T10:51:39+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.namedfile/commit/1973f0ed4ec53bbb9e06816864637a4ac3096dbb

Merge pull request #92 from plone/datakurre-reference-original-on-exact-scale

Fix image scaling to return the originals when no scaling is required

Files changed:
A news/92.bugfix
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/news/92.bugfix b/news/92.bugfix\nnew file mode 100644\nindex 0000000..8713023\n--- /dev/null\n+++ b/news/92.bugfix\n@@ -0,0 +1 @@\n+Fix image scaling to re-use the original image when scaling is not required to allow Plone REST API to use cacheable scale URL for the original image without performance penalty [datakurre]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 97d7c41..d7cd7a4 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -218,6 +218,11 @@ def __call__(\n         if height is None and width is None:\n             dummy, format_ = orig_value.contentType.split("/", 1)\n             return None, format_, (orig_value._width, orig_value._height)\n+        elif not parameters and height and width \\\n+                and height == getattr(orig_value, "_height", None) \\\n+                and width == getattr(orig_value, "_width", None):\n+            dummy, format_ = orig_value.contentType.split("/", 1)\n+            return orig_value, format_, (orig_value._width, orig_value._height)\n         orig_data = None\n         try:\n             orig_data = orig_value.open()\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex c044d96..a31c644 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -85,6 +85,22 @@ def testCreateScale(self):\n         self.assertEqual(foo.height, 80)\n         assertImage(self, foo.data.data, \'PNG\', (80, 80))\n \n+    def testCreateExactScale(self):\n+        foo = self.scaling.scale(\'image\', width=100, height=80)\n+        self.assertIsNot(foo.data, self.item.image)\n+\n+        # test that exact scale without parameters returns original\n+        foo = self.scaling.scale(\'image\',\n+                                 width=self.item.image._width,\n+                                 height=self.item.image._height)\n+        self.assertIs(foo.data, self.item.image)\n+\n+        foo = self.scaling.scale(\'image\',\n+                                 width=self.item.image._width,\n+                                 height=self.item.image._height,\n+                                 quality=80)\n+        self.assertIsNot(foo.data, self.item.image)\n+\n     def testCreateHighPixelDensityScale(self):\n         self.scaling.getHighPixelDensityScales = lambda: [{\'scale\': 2, \'quality\': 66}]\n         foo = self.scaling.scale(\'image\', width=100, height=80)\n'

