Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2021-05-11T12:23:17+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/7aeecabb2840d97ff6425b5c3eeb7ea525ea68d9

black code style

Files changed:
M .github/workflows/testing.yml
M setup.py
M src/plone/__init__.py
M src/plone/recipe/__init__.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/make.py
M src/plone/recipe/zope2instance/recipe.py
M src/plone/recipe/zope2instance/sentry.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M src/plone/recipe/zope2instance/tests/test_wsgischema.py
M tox.ini

b'diff --git a/.github/workflows/testing.yml b/.github/workflows/testing.yml\nindex 1564004..284119d 100644\n--- a/.github/workflows/testing.yml\n+++ b/.github/workflows/testing.yml\n@@ -49,8 +49,11 @@ jobs:\n             ${{ runner.os }}-test\n       - name: Install dependencies\n         run: |\n-          pip install -U pip wheel\n+          pip install -U pip wheel black\n           pip install -r requirements-testing-${{ matrix.zope-version }}.txt\n+      - name: Run black code style check\n+        run: |\n+          black --check src setup.py\n       - name: Run Tests\n         run: |\n           zope-testrunner --test-path=src\ndiff --git a/setup.py b/setup.py\nindex 0d093cc..9c9a719 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,7 +4,7 @@\n \n \n name = "plone.recipe.zope2instance"\n-version = \'6.10.0.dev0\'\n+version = "6.10.0.dev0"\n \n setup(\n     name=name,\n@@ -14,11 +14,10 @@\n     author="Hanno Schlichting",\n     author_email="hanno@hannosch.eu",\n     description="Buildout recipe for creating a Zope instance",\n-    long_description=((open(\'README.rst\').read() + \'\\n\' +\n-                       open(\'CHANGES.rst\').read())),\n+    long_description=((open("README.rst").read() + "\\n" + open("CHANGES.rst").read())),\n     license="ZPL 2.1",\n     keywords="zope buildout",\n-    url=\'https://github.com/plone/plone.recipe.zope2instance\',\n+    url="https://github.com/plone/plone.recipe.zope2instance",\n     classifiers=[\n         "Development Status :: 6 - Mature",\n         "Framework :: Buildout",\n@@ -40,46 +39,46 @@\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: Implementation :: CPython",\n     ],\n-    packages=find_packages(\'src\'),\n+    packages=find_packages("src"),\n     include_package_data=True,\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.recipe\'],\n-    python_requires=\'>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*\',\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.recipe"],\n+    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*",\n     install_requires=[\n-        \'zc.buildout\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zc.recipe.egg\',\n-        \'Zope >= 4.0b1\',\n-        \'ZODB >= 5.1.1\',\n-        \'ZEO\',\n-        \'waitress >= 1.2.0\',\n-        \'Paste\',\n-        \'python-dotenv\',\n+        "zc.buildout",\n+        "setuptools",\n+        "six",\n+        "zc.recipe.egg",\n+        "Zope >= 4.0b1",\n+        "ZODB >= 5.1.1",\n+        "ZEO",\n+        "waitress >= 1.2.0",\n+        "Paste",\n+        "python-dotenv",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'zope.testrunner\',\n-            \'sentry-sdk\',\n+        "test": [\n+            "zope.testrunner",\n+            "sentry-sdk",\n         ],\n-        \'sentry\': [\n-            \'sentry-sdk\',\n+        "sentry": [\n+            "sentry-sdk",\n+        ],\n+        "profile": [\n+            "repoze.profile",\n         ],\n-        \'profile\': [\n-            \'repoze.profile\',\n-        ]\n     },\n     zip_safe=False,\n     entry_points={\n-        \'zc.buildout\': [\'default = %s.recipe:Recipe\' % name],\n-        \'paste.server_runner\': [\n-            \'main=plone.recipe.zope2instance.ctl:serve_paste\',\n+        "zc.buildout": ["default = %s.recipe:Recipe" % name],\n+        "paste.server_runner": [\n+            "main=plone.recipe.zope2instance.ctl:serve_paste",\n         ],\n-        \'paste.server_factory\': [\n-            \'main=plone.recipe.zope2instance.ctl:server_factory\',\n+        "paste.server_factory": [\n+            "main=plone.recipe.zope2instance.ctl:server_factory",\n         ],\n-        \'paste.filter_factory\': [\n-            \'sentry=plone.recipe.zope2instance.sentry:sdk_init\',\n+        "paste.filter_factory": [\n+            "sentry=plone.recipe.zope2instance.sentry:sdk_init",\n         ],\n-        },\n+    },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/recipe/__init__.py b/src/plone/recipe/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/src/plone/recipe/__init__.py\n+++ b/src/plone/recipe/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 560e1e0..c216405 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -49,7 +49,7 @@\n import zdaemon\n \n \n-if sys.version_info > (3, ):\n+if sys.version_info > (3,):\n     basestring = str\n \n WINDOWS = False\n@@ -68,7 +68,8 @@\n \n     ERR_MSG_NOT_ADMIN = (\n         \'ERROR: You are not member of the "Administrators" group, \'\n-        \'or you have not run the shell as Administrator.\')\n+        "or you have not run the shell as Administrator."\n+    )\n \n \n class ZopeCtlOptions(ZDCtlOptions):\n@@ -103,8 +104,7 @@ def __init__(self):\n         self.ZopeOptions.__init__(self)\n         ZDCtlOptions.__init__(self)\n         self.add("interactive", None, "i", "interactive", flag=1)\n-        self.add("default_to_interactive", "runner.default_to_interactive",\n-                 default=1)\n+        self.add("default_to_interactive", "runner.default_to_interactive", default=1)\n \n     def realize(self, *args, **kw):\n         # Before ZConfig interprets the Zope configuration, we need to make\n@@ -112,12 +112,13 @@ def realize(self, *args, **kw):\n         # This value is used for storing ZEO persistent caches in case\n         # the var option was not also specified. Otherwise it is not used\n         # and setting it does not affect anything.\n-        os.environ.update({\'ZEO_TMP\': tempfile.gettempdir()})\n+        os.environ.update({"ZEO_TMP": tempfile.gettempdir()})\n \n         self.ZopeOptions.realize(self, *args, **kw)\n         # Additional checking of user option; set uid and gid\n         if self.user is not None:\n             import pwd\n+\n             try:\n                 uid = int(self.user)\n             except ValueError:\n@@ -145,7 +146,7 @@ def realize(self, *args, **kw):\n             self.program = config.runner.program\n         else:\n             self.program = [os.path.join(self.directory, "bin", "runzope")]\n-        if \'-s\' in args:\n+        if "-s" in args:\n             # set by command line option\n             # or by zdaemon.zdoptions - we need\n             # to override the latter case\n@@ -154,9 +155,8 @@ def realize(self, *args, **kw):\n             self.sockname = config.runner.socket_name\n         else:\n             self.sockname = os.path.join(self.clienthome, "zopectlsock")\n-        self.python = os.environ.get(\'PYTHON\', config.python) or sys.executable\n-        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__),\n-                                  "zdrun.py")\n+        self.python = os.environ.get("PYTHON", config.python) or sys.executable\n+        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__), "zdrun.py")\n \n         self.exitcodes = [0, 2]\n \n@@ -184,6 +184,7 @@ def _conditional_load(self):\n \n try:\n     import ZServer  # noqa\n+\n     HAS_ZSERVER = True\n except ImportError:\n     HAS_ZSERVER = False\n@@ -197,7 +198,7 @@ class ZServerCtlOptions(ZopeCtlOptions, ZopeOptions):\n \n class WSGICtlOptions(ZopeCtlOptions, ZDOptions):\n     schemadir = os.path.dirname(os.path.abspath(__file__))\n-    schemafile = \'wsgischema.xml\'\n+    schemafile = "wsgischema.xml"\n \n \n class ZopeCmd(ZDCmd):\n@@ -208,10 +209,10 @@ class ZopeCmd(ZDCmd):\n \n         # printable representations of the Windows service states\n         service_state_map = {\n-            win32service.SERVICE_START_PENDING: \'starting\',\n-            win32service.SERVICE_RUNNING:       \'started\',\n-            win32service.SERVICE_STOP_PENDING:  \'stopping\',\n-            win32service.SERVICE_STOPPED:       \'stopped\',\n+            win32service.SERVICE_START_PENDING: "starting",\n+            win32service.SERVICE_RUNNING: "started",\n+            win32service.SERVICE_STOP_PENDING: "stopping",\n+            win32service.SERVICE_STOPPED: "stopped",\n         }\n \n         def is_user_admin(self):\n@@ -230,16 +231,16 @@ def _get_pid_from_pidfile(self):\n                         return int(f.read().strip())\n                     except ValueError:\n                         # pid file for any reason empty or corrupt\n-                        print(\'ERROR: Corrupt pid file: {}\'.format(fname))\n+                        print("ERROR: Corrupt pid file: {}".format(fname))\n                         return 0\n             else:\n                 return 0\n \n         def _get_service_name(self):\n-            return \'Zope%s\' % str(hash(self.options.directory.lower()))\n+            return "Zope%s" % str(hash(self.options.directory.lower()))\n \n         def _get_service_status(self):\n-            """ Return status of Windows service, or None if not installed.\n+            """Return status of Windows service, or None if not installed.\n \n             Possible status values are:\n \n@@ -263,31 +264,25 @@ def _get_service_status(self):\n             return status\n \n         def _get_service_class_string(self):\n-            return \'%s.Service\' % resource_filename(\n-                \'nt_svcutils\', \'service\')\n+            return "%s.Service" % resource_filename("nt_svcutils", "service")\n \n-        def _set_winreg_key(self, name, value, keyname=\'PythonClass\'):\n+        def _set_winreg_key(self, name, value, keyname="PythonClass"):\n             # see "collective.buildout.cluster.ClusterBase"\n             # TODO: use Python module "_winreg"\n \n             def open_key(keyname=None):\n-                keypath = (\'System\\\\CurrentControlSet\\\\Services\\\\\' +\n-                           self._get_service_name())\n+                keypath = (\n+                    "System\\\\CurrentControlSet\\\\Services\\\\" + self._get_service_name()\n+                )\n                 if keyname:\n-                    keypath += (\'\\\\\' + keyname)\n+                    keypath += "\\\\" + keyname\n                 return win32api.RegOpenKey(\n-                    win32con.HKEY_LOCAL_MACHINE,\n-                    keypath,\n-                    0,\n-                    win32con.KEY_ALL_ACCESS)\n+                    win32con.HKEY_LOCAL_MACHINE, keypath, 0, win32con.KEY_ALL_ACCESS\n+                )\n \n             key = open_key(keyname)\n             try:\n-                win32api.RegSetValueEx(key,\n-                                       name,\n-                                       0,\n-                                       win32con.REG_SZ,\n-                                       value)\n+                win32api.RegSetValueEx(key, name, 0, win32con.REG_SZ, value)\n             finally:\n                 win32api.RegCloseKey(key)\n \n@@ -300,7 +295,7 @@ def do_install(self, arg):\n \n             status = self._get_service_status()\n             if status is not None:\n-                print(\'ERROR: Zope is already installed as a Windows service.\')\n+                print("ERROR: Zope is already installed as a Windows service.")\n                 return\n \n             # TODO:\n@@ -313,18 +308,17 @@ def do_install(self, arg):\n \n             class_string = self._get_service_class_string()\n             name = self._get_service_name()\n-            display_name = \'Zope instance at \' + self.options.directory\n+            display_name = "Zope instance at " + self.options.directory\n \n-            if arg.lower() == \'auto\':\n+            if arg.lower() == "auto":\n                 start_type = win32service.SERVICE_AUTO_START\n             else:\n                 start_type = win32service.SERVICE_DEMAND_START\n \n             try:\n-                win32serviceutil.InstallService(class_string,\n-                                                name,\n-                                                display_name,\n-                                                start_type)\n+                win32serviceutil.InstallService(\n+                    class_string, name, display_name, start_type\n+                )\n \n                 # put info in registry for the Windows Service class to use:\n \n@@ -333,17 +327,13 @@ def do_install(self, arg):\n                 #     \'D:\\\\local\\\\Plone-4.0b5\\\\bin\\\\instance-script.py\'\n                 # but the Windows Service must launch\n                 #     \'D:\\\\local\\\\Plone-4.0b5\\\\bin\\\\instance.exe\'\n-                script_suffix = \'-script.py\'\n+                script_suffix = "-script.py"\n                 pos = instance_script.rfind(script_suffix)\n-                instance_exe = instance_script[:pos] + \'.exe\'\n+                instance_exe = instance_script[:pos] + ".exe"\n \n+                self._set_winreg_key("command", \'"%s" console\' % instance_exe)\n                 self._set_winreg_key(\n-                    \'command\',\n-                    \'"%s" console\' % instance_exe\n-                )\n-                self._set_winreg_key(\n-                    \'pid_filename\',\n-                    self.options.configroot.pid_filename\n+                    "pid_filename", self.options.configroot.pid_filename\n                 )\n \n                 print(\'Installed Zope as Windows Service "{}".\'.format(name))\n@@ -356,12 +346,12 @@ def do_install(self, arg):\n \n         def help_install(self):\n             print(\n-                \'install -- Install Zope as a Windows service that must be \'\n-                \'manually started.\'\n+                "install -- Install Zope as a Windows service that must be "\n+                "manually started."\n             )\n             print(\n-                \'install auto -- Install Zope as a Windows service that \'\n-                \'starts at system startup.\'\n+                "install auto -- Install Zope as a Windows service that "\n+                "starts at system startup."\n             )\n \n         def do_start(self, arg):\n@@ -372,13 +362,13 @@ def do_start(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as Windows service.\')\n+                print("ERROR: Zope is not installed as Windows service.")\n                 return\n             elif status == win32service.SERVICE_START_PENDING:\n-                print(\'ERROR: The Zope Windows service is about to start.\')\n+                print("ERROR: The Zope Windows service is about to start.")\n                 return\n             elif status == win32service.SERVICE_RUNNING:\n-                print(\'ERROR: The Zope Windows service is already running.\')\n+                print("ERROR: The Zope Windows service is already running.")\n                 return\n             name = self._get_service_name()\n             try:\n@@ -395,10 +385,10 @@ def do_restart(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as Windows service.\')\n+                print("ERROR: Zope is not installed as Windows service.")\n                 return\n             elif status == win32service.SERVICE_STOPPED:\n-                print(\'ERROR: The Zope Windows service has not been started.\')\n+                print("ERROR: The Zope Windows service has not been started.")\n                 return\n             name = self._get_service_name()\n             try:\n@@ -415,10 +405,10 @@ def do_stop(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as Windows service.\')\n+                print("ERROR: Zope is not installed as Windows service.")\n                 return\n             elif status == win32service.SERVICE_STOPPED:\n-                print(\'ERROR: The Zope Windows service has not been started.\')\n+                print("ERROR: The Zope Windows service has not been started.")\n                 return\n             name = self._get_service_name()\n             try:\n@@ -435,13 +425,10 @@ def do_remove(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as a Windows service.\')\n+                print("ERROR: Zope is not installed as a Windows service.")\n                 return\n             elif status is not win32service.SERVICE_STOPPED:\n-                print(\n-                    \'ERROR: Please stop the Windows service before \'\n-                    \'removing it.\'\n-                )\n+                print("ERROR: Please stop the Windows service before " "removing it.")\n                 return\n \n             ret_code = 0\n@@ -477,33 +464,36 @@ def get_status(self):\n             else:\n                 self.zd_up = 0\n \n-        def do_status(self, arg=\'\'):\n-            if arg not in (\'\', \'-l\'):\n+        def do_status(self, arg=""):\n+            if arg not in ("", "-l"):\n                 print(\'ERROR: The only valid option is "-l".\')\n                 return\n             service_status = self._get_service_status()\n             if service_status is None:\n-                print(\'Zope is not installed as a Windows service.\')\n+                print("Zope is not installed as a Windows service.")\n             else:\n                 name = self._get_service_name()\n                 state = self.service_state_map.get(\n-                    service_status, \'in an unknown state\')\n-                print(\'Zope is installed as Windows service "%s", \'\n-                      \'this service is currently %s.\' % (name, state))\n-            if arg == \'-l\' and self.zd_status:\n+                    service_status, "in an unknown state"\n+                )\n+                print(\n+                    \'Zope is installed as Windows service "%s", \'\n+                    "this service is currently %s." % (name, state)\n+                )\n+            if arg == "-l" and self.zd_status:\n                 print(self.zd_status)\n \n             # TODO: what about "self.zd_up"?\n \n         def help_status(self):\n-            print(\'status -- Print status of the Windows service.\')\n+            print("status -- Print status of the Windows service.")\n             print(\n-                \'status -l -- Print status of the Windows service, \'\n-                \'and raw status output.\'\n+                "status -l -- Print status of the Windows service, "\n+                "and raw status output."\n             )\n \n         def help_EOF(self):\n-            print(\'To quit, type CTRL+Z or use the quit command.\')\n+            print("To quit, type CTRL+Z or use the quit command.")\n \n     # end of "if WINDOWS"\n     else:\n@@ -544,11 +534,9 @@ def do_start(self, arg):\n                 args += self._get_override("-s", "sockname")\n                 args += self._get_override("-u", "user")\n                 if self.options.umask:\n-                    args += self._get_override("-m", "umask",\n-                                               oct(self.options.umask))\n+                    args += self._get_override("-m", "umask", oct(self.options.umask))\n                 args += self._get_override(\n-                    "-x", "exitcodes",\n-                    ",".join(map(str, self.options.exitcodes))\n+                    "-x", "exitcodes", ",".join(map(str, self.options.exitcodes))\n                 )\n                 args += self._get_override("-z", "directory")\n \n@@ -559,22 +547,22 @@ def do_start(self, arg):\n                 else:\n                     flag = os.P_WAIT\n                 env = self.environment().copy()\n-                env.update({\'ZMANAGED\': \'1\', })\n+                env.update(\n+                    {\n+                        "ZMANAGED": "1",\n+                    }\n+                )\n                 os.spawnvpe(flag, args[0], args, env)\n             elif not self.zd_pid:\n                 self.send_action("start")\n             else:\n-                print(\'daemon process already running; pid={}\'.format(\n-                    self.zd_pid))\n+                print("daemon process already running; pid={}".format(self.zd_pid))\n                 return\n \n             def cond(n=0):\n                 return self.zd_pid\n \n-            self.awhile(\n-                cond,\n-                \'daemon process started, pid=%(zd_pid)d\'\n-            )\n+            self.awhile(cond, "daemon process started, pid=%(zd_pid)d")\n \n     def __getattr__(self, name):\n         """\n@@ -582,13 +570,11 @@ def __getattr__(self, name):\n         """\n         if not name.startswith("do_"):\n             raise AttributeError(name)\n-        data = list(pkg_resources.iter_entry_points(\n-            "zopectl.command", name=name[3:]))\n+        data = list(pkg_resources.iter_entry_points("zopectl.command", name=name[3:]))\n         if not data:\n             raise AttributeError(name)\n         if len(data) > 1:\n-            sys.stderr.write(\n-                "Warning: multiple entry points found for command")\n+            sys.stderr.write("Warning: multiple entry points found for command")\n             return\n         func = data[0].load()\n         if not callable(func):\n@@ -615,28 +601,31 @@ def go(arg):\n             # so that we can split on spaces while respecting quotes.\n             tup = self.options.args\n             if len(tup) == 1:\n-                tup = next(csv.reader(tup, delimiter=\' \'))\n+                tup = next(csv.reader(tup, delimiter=" "))\n \n             # Remove -c and add command name as sys.argv[0]\n-            cmd = [\'import sys\',\n-                   \'sys.argv.pop()\',\n-                   \'sys.argv.append(r\\\'%s\\\')\' % entry_point.name\n-                   ]\n+            cmd = [\n+                "import sys",\n+                "sys.argv.pop()",\n+                "sys.argv.append(r\'%s\')" % entry_point.name,\n+            ]\n             if len(tup) > 1:\n                 argv = tup[1:]\n                 for a in argv:\n-                    cmd.append(\'sys.argv.append(r\\\'%s\\\')\' % a)\n-            cmd.extend([\n-                \'import pkg_resources\',\n-                \'import Zope2\',\n-                \'func=pkg_resources.EntryPoint.parse(\\\'%s\\\').load(False)\'\n-                % entry_point,\n-                \'app=Zope2.app()\',\n-                \'func(app, sys.argv[1:])\',\n-            ])\n-            cmdline = self.get_startup_cmd(\n-                self.options.python, \' ; \'.join(cmd))\n+                    cmd.append("sys.argv.append(r\'%s\')" % a)\n+            cmd.extend(\n+                [\n+                    "import pkg_resources",\n+                    "import Zope2",\n+                    "func=pkg_resources.EntryPoint.parse(\'%s\').load(False)"\n+                    % entry_point,\n+                    "app=Zope2.app()",\n+                    "func(app, sys.argv[1:])",\n+                ]\n+            )\n+            cmdline = self.get_startup_cmd(self.options.python, " ; ".join(cmd))\n             self._exitstatus = os.system(cmdline)\n+\n         return go\n \n     def environment(self):\n@@ -647,7 +636,7 @@ def environment(self):\n         except AttributeError:\n             shome = None\n             shome  # pyflakes\n-        env.update({\'INSTANCE_HOME\': configroot.instancehome})\n+        env.update({"INSTANCE_HOME": configroot.instancehome})\n         return env\n \n     def get_startup_cmd(self, python, more, pyflags=""):\n@@ -668,50 +657,52 @@ def get_startup_cmd(self, python, more, pyflags=""):\n                 "configure(r\'%s\'); "\n                 "import Zope2; app=Zope2.app(); "\n             )\n-        cmdline = (\n-            \'"%s" %s "%s" %s -c "%s\' % (\n-                python, pyflags,\n-                self.options.interpreter,\n-                pyflags,\n-                cmd % self.options.configfile,\n-            )\n+        cmdline = \'"%s" %s "%s" %s -c "%s\' % (\n+            python,\n+            pyflags,\n+            self.options.interpreter,\n+            pyflags,\n+            cmd % self.options.configfile,\n         )\n \n         if not self.options.no_request:\n             cmdline += (\n-                \'from Testing.makerequest import makerequest; \'\n-                \'app = makerequest(app); \'\n+                "from Testing.makerequest import makerequest; "\n+                "app = makerequest(app); "\n                 # REQUEST.traverse needs this but no reason not to set\n                 # this even if we\'re not traversing to an object\n-                \'app.REQUEST[\\\'PARENTS\\\'] = [app]; \'\n+                "app.REQUEST[\'PARENTS\'] = [app]; "\n                 # five.globalrequest does setRequest at IPubStart\n                 # which is called outside of REQUEST.traverse\n-                \'from zope.globalrequest import setRequest ;\'\n-                \'setRequest(app.REQUEST); \')\n+                "from zope.globalrequest import setRequest ;"\n+                "setRequest(app.REQUEST); "\n+            )\n         # Need to login at different points depending on REQUEST.traverse\n         login_cmdline = (\n-            \'from AccessControl.SpecialUsers import system as user; \'\n-            \'from AccessControl.SecurityManagement import newSecurityManager; \'\n-            \'newSecurityManager(None, user); \')\n+            "from AccessControl.SpecialUsers import system as user; "\n+            "from AccessControl.SecurityManagement import newSecurityManager; "\n+            "newSecurityManager(None, user); "\n+        )\n         if self.options.object_path:\n             if not self.options.no_request:\n                 cmdline += (\n                     # populate the request, setSite, skin, theme, etc.\n-                    \'app.REQUEST.traverse(r\\\'%s\\\'); \'\n-                    % self.options.object_path)\n+                    "app.REQUEST.traverse(r\'%s\'); "\n+                    % self.options.object_path\n+                )\n             if not self.options.no_login:\n                 # REQUEST.traverse will do setSecurityManager with Anonymous\n                 # so we login after\n                 cmdline += login_cmdline\n             cmdline += (\n-                \'obj = app.restrictedTraverse(r\\\'%s\\\'); \'\n-                % self.options.object_path)\n+                "obj = app.restrictedTraverse(r\'%s\'); " % self.options.object_path\n+            )\n         elif not self.options.no_login:\n             # Login if we\'re not getting a object and we don\'t need to\n             # worry about REQUEST.traverse\n             cmdline += login_cmdline\n \n-        cmdline = cmdline + more + \'\\"\'\n+        cmdline = cmdline + more + \'"\'\n         if WINDOWS:\n             # entire command line must be quoted\n             # as well as the components\n@@ -720,7 +711,8 @@ def get_startup_cmd(self, python, more, pyflags=""):\n             return cmdline\n \n     def help_startup_command(self):\n-        print("""\\\n+        print(\n+            """\\\n     Also sets up a REQUEST, logs in the\n     AccessControl.SpecialUsers.system user, and may traverse\n     to an object, such as a CMF portal.  This environment set\n@@ -729,7 +721,8 @@ def help_startup_command(self):\n     -L/--no-login -- do not login the system user.\n     -O/--object-path <path> -- Traverse to <path> from the app\n                                and make available as `obj`.\n-    Example usage: bin/instance -RLOPlone/front-page debug""")\n+    Example usage: bin/instance -RLOPlone/front-page debug"""\n+        )\n \n     def do_run(self, arg):\n         # If the command line was something like\n@@ -747,7 +740,7 @@ def do_run(self, arg):\n         # If that\'s the case, we\'ll use csv to do the parsing\n         # so that we can split on spaces while respecting quotes.\n         if len(self.options.args) == 1:\n-            tup = next(csv.reader(self.options.args, delimiter=\' \'))[1:]\n+            tup = next(csv.reader(self.options.args, delimiter=" "))[1:]\n         else:\n             tup = self.options.args[1:]\n \n@@ -764,14 +757,16 @@ def do_run(self, arg):\n         ]\n         if len(tup) > 1:\n             argv = tup[1:]\n-            cmd.append(\'[sys.argv.append(x) for x in %s]\' % argv)\n-        cmd.extend([\n-            "f = open(%r)" % script,\n-            "src = f.read()",\n-            "f.close()",\n-            "code = compile(src, filename=%r, mode=\'exec\')" % script,\n-            "exec(code)",\n-        ])\n+            cmd.append("[sys.argv.append(x) for x in %s]" % argv)\n+        cmd.extend(\n+            [\n+                "f = open(%r)" % script,\n+                "src = f.read()",\n+                "f.close()",\n+                "code = compile(src, filename=%r, mode=\'exec\')" % script,\n+                "exec(code)",\n+            ]\n+        )\n         cmdline = self.get_startup_cmd(self.options.python, "; ".join(cmd))\n \n         self._exitstatus = os.system(cmdline)\n@@ -787,9 +782,11 @@ def do_console(self, arg):\n         self.do_foreground(arg, debug=False)\n \n     def help_console(self):\n-        print("""\\\n+        print(\n+            """\\\n console -- Run the program in the console.\n-    In contrast to foreground this does not turn on debug mode.""")\n+    In contrast to foreground this does not turn on debug mode."""\n+        )\n \n     def do_debug(self, arg):\n         # `-c` disables the PYTHONSTARTUP feature; load it explicitly\n@@ -805,10 +802,12 @@ def do_debug(self, arg):\n         cmdline = self.get_startup_cmd(\n             self.options.python,\n             interactive_startup % exec_call,\n-            pyflags=\'-i\',\n+            pyflags="-i",\n+        )\n+        print(\n+            \'Starting debugger (the name "app" is bound to the top-level \'\n+            "Zope object)"\n         )\n-        print(\'Starting debugger (the name "app" is bound to the top-level \'\n-              \'Zope object)\')\n         os.system(cmdline)\n \n     def help_debug(self):\n@@ -821,34 +820,35 @@ def do_foreground(self, arg, debug=True):\n         pid = self.zd_pid\n         if pid:\n             print(\n-                \'The program seems already to be running. If you believe not, \'\n-                \'check for dangling .pid and .lock files in var/.\'\n+                "The program seems already to be running. If you believe not, "\n+                "check for dangling .pid and .lock files in var/."\n             )\n             return\n \n         import subprocess\n+\n         env = self.environment()\n         program = self.options.program\n         local_additions = []\n \n         if debug:\n             if self.options.wsgi:\n-                debug_switch = \'-d\'\n-                if \'PYTHONWARNINGS\' not in env:\n-                    env[\'PYTHONWARNINGS\'] = \'on\'\n+                debug_switch = "-d"\n+                if "PYTHONWARNINGS" not in env:\n+                    env["PYTHONWARNINGS"] = "on"\n             else:\n-                debug_switch = \'-X\'\n+                debug_switch = "-X"\n             if not program.count(debug_switch):\n                 local_additions += [debug_switch]\n-            if not program.count(\'debug-mode=on\'):\n-                local_additions += [\'debug-mode=on\']\n+            if not program.count("debug-mode=on"):\n+                local_additions += ["debug-mode=on"]\n             program.extend(local_additions)\n \n         if WINDOWS:\n             # The outer quotes were causing\n             # "WindowsError: [Error 87] The parameter is incorrect"\n             # command = zopectl.quote_command(program)\n-            command = \' \'.join([\'"%s"\' % x for x in program])\n+            command = " ".join([\'"%s"\' % x for x in program])\n         else:\n             command = program\n \n@@ -866,11 +866,13 @@ def do_foreground(self, arg, debug=True):\n             os.execve(program[0], command, env)\n \n     def do_test(self, arg):\n-        print("The test command is no longer supported. Please use a "\n-              "zc.recipe.testrunner section in your buildout config file "\n-              "to get a test runner for your environment. Most often you "\n-              "will name the section `test` and can run tests via: "\n-              "bin/test -s <my.package>")\n+        print(\n+            "The test command is no longer supported. Please use a "\n+            "zc.recipe.testrunner section in your buildout config file "\n+            "to get a test runner for your environment. Most often you "\n+            "will name the section `test` and can run tests via: "\n+            "bin/test -s <my.package>"\n+        )\n         return\n \n     def do_adduser(self, arg):\n@@ -879,16 +881,19 @@ def do_adduser(self, arg):\n         except Exception:\n             print("usage: adduser <name> <password>")\n             return\n-        cmdline = self.get_startup_cmd(\n-            self.options.python,\n-            \'import Zope2; \'\n-            \'app = Zope2.app(); \'\n-            \'result = app.acl_users._doAddUser(\'\n-            \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n-            \'import transaction; \'\n-            \'transaction.commit(); \'\n-            \'print(\\\'Created user:\\\', result)\'\n-        ) % (name, password)\n+        cmdline = (\n+            self.get_startup_cmd(\n+                self.options.python,\n+                "import Zope2; "\n+                "app = Zope2.app(); "\n+                "result = app.acl_users._doAddUser("\n+                "\'%s\', \'%s\', [\'Manager\'], []); "\n+                "import transaction; "\n+                "transaction.commit(); "\n+                "print(\'Created user:\', result)",\n+            )\n+            % (name, password)\n+        )\n         os.system(cmdline)\n \n     def help_adduser(self):\n@@ -897,11 +902,10 @@ def help_adduser(self):\n \n def serve_paste(app, global_conf, **kw):\n     sockets = []\n-    if \'prebound\' in global_conf:\n-        filenos = global_conf[\'prebound\'].split()\n+    if "prebound" in global_conf:\n+        filenos = global_conf["prebound"].split()\n         for fileno in filenos:\n-            _sock = socket.fromfd(\n-                int(fileno), socket.AF_INET, socket.SOCK_STREAM)\n+            _sock = socket.fromfd(int(fileno), socket.AF_INET, socket.SOCK_STREAM)\n             if six.PY2:\n                 sock = socket.socket()\n                 sock._sock = _sock\n@@ -918,10 +922,10 @@ def serve_paste(app, global_conf, **kw):\n \n \n def server_factory(global_conf, **kws):\n-    if \'fast-listen\' in kws:\n+    if "fast-listen" in kws:\n         filenos = []\n-        for host_port in kws[\'fast-listen\'].split():\n-            host, port = host_port.split(\':\')\n+        for host_port in kws["fast-listen"].split():\n+            host, port = host_port.split(":")\n             prebound = dispatcher()\n             prebound.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n             prebound.set_reuse_addr()\n@@ -931,19 +935,19 @@ def server_factory(global_conf, **kws):\n                 sleep(1)\n             filenos.append(str(prebound.socket.fileno()))\n         global_conf.update(prebound=" ".join(filenos))\n-        del kws[\'fast-listen\']\n-    del kws[\'paste.server_factory\']\n+        del kws["fast-listen"]\n+    del kws["paste.server_factory"]\n \n     def serve(app):\n         return serve_paste(app, global_conf, **kws)\n+\n     return serve\n \n \n def main(args=None):\n-    """Customized entry point for launching Zope without forking other processes\n-    """\n+    """Customized entry point for launching Zope without forking other processes"""\n \n-    if \'--wsgi\' in args or \'-w\' in args:\n+    if "--wsgi" in args or "-w" in args:\n         options = WSGICtlOptions()\n     else:\n         options = ZServerCtlOptions()\n@@ -951,41 +955,44 @@ def main(args=None):\n     options.add(name="no_request", short="R", long="no-request", flag=1)\n     options.add(name="no_login", short="L", long="no-login", flag=1)\n     options.add(name="object_path", short="O:", long="object-path=")\n-    options.add(name="wsgi", short=\'w:\', long=\'wsgi=\')\n+    options.add(name="wsgi", short="w:", long="wsgi=")\n     # Realize arguments and set documentation which is used in the -h option\n     options.realize(args, doc=__doc__)\n \n-    load_dotenv(os.path.join(options.directory, \'..\', \'..\', \'.env\'))\n+    load_dotenv(os.path.join(options.directory, "..", "..", ".env"))\n \n-    if (os.environ.get(\'PLONE_ENV\')):\n-        PLONE_ENV = os.environ.get(\'PLONE_ENV\')\n-        load_dotenv(os.path.join(options.directory,\n-                                 \'..\', \'..\', \'.env.{}\'.format(PLONE_ENV)))\n+    if os.environ.get("PLONE_ENV"):\n+        PLONE_ENV = os.environ.get("PLONE_ENV")\n+        load_dotenv(\n+            os.path.join(options.directory, "..", "..", ".env.{}".format(PLONE_ENV))\n+        )\n \n     # Run the right command depending on whether we have ZServer\n-    options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n-    if sys.platform == \'win32\':\n-        options.interpreter += \'-script.py\'\n+    options.interpreter = os.path.join(options.directory, "bin", "interpreter")\n+    if sys.platform == "win32":\n+        options.interpreter += "-script.py"\n \n-    if options.wsgi is not None and \\\n-       options.wsgi.lower() in (\'off\', \'false\', \'0\'):\n+    if options.wsgi is not None and options.wsgi.lower() in ("off", "false", "0"):\n         options.wsgi = None\n \n     if six.PY2 and not options.wsgi:\n         # only use zserver in Python 2 and if wsgi is disabled\n         from ZServer.Zope2.Startup import run\n-        script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n+\n+        script = os.path.join(os.path.dirname(run.__file__), "run.py")\n         options.program = [\n-            options.python, options.interpreter, script, \'-C\',\n-            options.configfile\n+            options.python,\n+            options.interpreter,\n+            script,\n+            "-C",\n+            options.configfile,\n         ]\n     else:\n         # wsgi is the default\n         from Zope2.Startup import serve\n-        script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n-        options.program = [\n-            options.python, options.interpreter, script, options.wsgi\n-        ]\n+\n+        script = os.path.join(os.path.dirname(serve.__file__), "serve.py")\n+        options.program = [options.python, options.interpreter, script, options.wsgi]\n \n         # Try to find the log file from the WSGI configuration\n         # Requires loading the logging configuration from the WSGI config\n@@ -1007,8 +1014,8 @@ def main(args=None):\n     c = ZopeCmd(options)\n \n     # Mix in any additional commands supplied by other packages:\n-    for ep in iter_entry_points(\'plone.recipe.zope2instance.ctl\'):\n-        func_name = \'do_\' + ep.name\n+    for ep in iter_entry_points("plone.recipe.zope2instance.ctl"):\n+        func_name = "do_" + ep.name\n         func = ep.load()\n         # avoid overwriting the standard commands\n         if func_name not in dir(c):\n@@ -1028,7 +1035,7 @@ def main(args=None):\n     # But it\'s generated by setuptools, and doesn\'t have that functionality.\n \n     if options.args:\n-        c.onecmd(\' \'.join(options.args))\n+        c.onecmd(" ".join(options.args))\n         sys.exit(min(c._exitstatus, 1))\n \n     # If no command was specified: enter interactive mode.\n@@ -1037,6 +1044,6 @@ def main(args=None):\n         import readline  # noqa\n     except ImportError:\n         pass\n-    print(\'Program: {}\'.format(\' \'.join(options.program)))\n+    print("Program: {}".format(" ".join(options.program)))\n     c.do_status()\n     c.cmdloop()\ndiff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py\nindex 2132544..853537e 100644\n--- a/src/plone/recipe/zope2instance/make.py\n+++ b/src/plone/recipe/zope2instance/make.py\n@@ -10,24 +10,23 @@\n import sys\n \n \n-VCS_DIRS = [os.path.normcase(\'CVS\'),\n-            os.path.normcase(\'.svn\'),\n-            os.path.normcase(\'.git\')]\n+VCS_DIRS = [os.path.normcase("CVS"), os.path.normcase(".svn"), os.path.normcase(".git")]\n \n \n-def make_instance(user=None, instancehome=None, version=\'4\'):\n+def make_instance(user=None, instancehome=None, version="4"):\n     instancehome = os.path.abspath(os.path.expanduser(instancehome))\n     password = None\n     if user:\n-        user, password = user.split(\':\', 1)\n+        user, password = user.split(":", 1)\n \n     # Use our own skeleton\n-    skelsrc = os.path.join(os.path.dirname(__file__), \'skel\' + version)\n+    skelsrc = os.path.join(os.path.dirname(__file__), "skel" + version)\n     if not os.path.exists(skelsrc):\n         raise ValueError(\n-            \'No configuration skeleton found for version {0}\'.format(version))\n+            "No configuration skeleton found for version {0}".format(version)\n+        )\n \n-    inituser = os.path.join(instancehome, \'inituser\')\n+    inituser = os.path.join(instancehome, "inituser")\n     if not (user or os.path.exists(inituser)):\n         user, password = get_inituser()\n \n@@ -38,29 +37,32 @@ def make_instance(user=None, instancehome=None, version=\'4\'):\n \n def get_inituser():\n     import getpass\n-    print("""\\\n+\n+    print(\n+        """\\\n Please choose a username and password for the initial user.\n These will be the credentials you use to initially manage\n your new Zope instance.\n-""")\n-    user = input(\'Username: \').strip()\n-    if user == \'\':\n+"""\n+    )\n+    user = input("Username: ").strip()\n+    if user == "":\n         return None, None\n     while 1:\n-        passwd = getpass.getpass(\'Password: \')\n-        verify = getpass.getpass(\'Verify password: \')\n+        passwd = getpass.getpass("Password: ")\n+        verify = getpass.getpass("Verify password: ")\n         if verify == passwd:\n             break\n         else:\n-            passwd = verify = \'\'\n-            print(\'Password mismatch, please try again...\')\n+            passwd = verify = ""\n+            print("Password mismatch, please try again...")\n     return user, passwd\n \n \n def write_inituser(fn, user, password):\n-    fp = open(fn, \'w\')\n-    pw = b2a_base64(sha1(password.encode(\'utf-8\')).digest())[:-1]\n-    fp.write(\'%s:{SHA}%s\\n\' % (user, pw.decode(\'ascii\')))\n+    fp = open(fn, "w")\n+    pw = b2a_base64(sha1(password.encode("utf-8")).digest())[:-1]\n+    fp.write("%s:{SHA}%s\\n" % (user, pw.decode("ascii")))\n     fp.close()\n     os.chmod(fn, 0o644)\n \ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 2c1e89b..b86a85b 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -28,7 +28,7 @@\n import zc.buildout.easy_install\n \n \n-IS_WIN = sys.platform[:3].lower() == \'win\'\n+IS_WIN = sys.platform[:3].lower() == "win"\n \n BUILDOUT15 = True\n try:\n@@ -39,7 +39,7 @@\n \n def indent(snippet, amount):\n     ws = " " * amount\n-    return "\\n".join(ws + s if s else "" for s in snippet.split(\'\\n\'))\n+    return "\\n".join(ws + s if s else "" for s in snippet.split("\\n"))\n \n \n def nocomments_split(s):\n@@ -65,71 +65,74 @@ def nocomments_split(s):\n     """\n     res = []\n     for line in s.splitlines():\n-        if \'#\' in line:\n-            line, comment = line.split(\'#\', 1)\n+        if "#" in line:\n+            line, comment = line.split("#", 1)\n         for word in line.split():\n             res.append(word)\n     return res\n \n \n class Recipe(Scripts):\n-\n     def __init__(self, buildout, name, options):\n-        self.egg = Egg(buildout, options[\'recipe\'], options)\n+        self.egg = Egg(buildout, options["recipe"], options)\n         self.buildout, self.options, self.name = buildout, options, name\n         self.scripts = True\n \n-        options[\'location\'] = os.path.join(\n-            buildout[\'buildout\'][\'parts-directory\'],\n+        options["location"] = os.path.join(\n+            buildout["buildout"]["parts-directory"],\n             self.name,\n         )\n-        options[\'bin-directory\'] = buildout[\'buildout\'][\'bin-directory\']\n+        options["bin-directory"] = buildout["buildout"]["bin-directory"]\n \n-        if \'scripts\' in options:\n-            if options[\'scripts\'] == \'\':\n-                options[\'scripts\'] = \'\'  # suppress script generation.\n+        if "scripts" in options:\n+            if options["scripts"] == "":\n+                options["scripts"] = ""  # suppress script generation.\n                 self.scripts = False\n \n         # Relative path support for the generated scripts\n         relative_paths = options.get(\n-            \'relative-paths\',\n-            buildout[\'buildout\'].get(\'relative-paths\', \'false\')\n+            "relative-paths", buildout["buildout"].get("relative-paths", "false")\n         )\n-        if relative_paths == \'true\':\n-            options[\'buildout-directory\'] = buildout[\'buildout\'][\'directory\']\n-            self._relative_paths = options[\'buildout-directory\']\n+        if relative_paths == "true":\n+            options["buildout-directory"] = buildout["buildout"]["directory"]\n+            self._relative_paths = options["buildout-directory"]\n         else:\n-            self._relative_paths = \'\'\n+            self._relative_paths = ""\n \n-        if \'initialization\' not in options:\n-            options[\'initialization\'] = \'\'\n-        options[\'initialization\'] = options[\'initialization\'] % options\n+        if "initialization" not in options:\n+            options["initialization"] = ""\n+        options["initialization"] = options["initialization"] % options\n \n-        self._include_site_packages = options.get(\n-            \'include-site-packages\',\n-            buildout[\'buildout\'].get(\'include-site-packages\', \'false\')\n-        ) not in (\'off\', \'disable\', \'false\')\n+        self._include_site_packages = (\n+            options.get(\n+                "include-site-packages",\n+                buildout["buildout"].get("include-site-packages", "false"),\n+            )\n+            not in ("off", "disable", "false")\n+        )\n \n         self.wsgi = True\n-        self.wsgi_config = os.path.join(options[\'location\'], \'etc\', \'wsgi.ini\')\n-        wsgi_opt = options.get(\'wsgi\', \'on\')\n-        if six.PY2 and wsgi_opt.lower() in (\'off\', \'false\', \'0\'):\n+        self.wsgi_config = os.path.join(options["location"], "etc", "wsgi.ini")\n+        wsgi_opt = options.get("wsgi", "on")\n+        if six.PY2 and wsgi_opt.lower() in ("off", "false", "0"):\n             self.wsgi = False\n-        elif wsgi_opt.lower() not in (\'on\', \'true\', \'1\'):\n+        elif wsgi_opt.lower() not in ("on", "true", "1"):\n             self.wsgi_config = wsgi_opt\n \n-        if \'pipeline\' not in options:\n-            options[\'pipeline\'] = \'\'\'\n+        if "pipeline" not in options:\n+            options[\n+                "pipeline"\n+            ] = """\n                 translogger\n                 egg:Zope#httpexceptions\n                 zope\n-            \'\'\'.strip()\n+            """.strip()\n         # Get Scripts\' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \n     def install(self, update=False):\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n         installed = [location]\n \n         if not update:\n@@ -138,8 +141,8 @@ def install(self, update=False):\n \n             # We could check with pkg_resources which Zope version we have.\n             # But we support creating instances for 4 only.\n-            version = \'4\'\n-            make.make_instance(options.get(\'user\', None), location, version)\n+            version = "4"\n+            make.make_instance(options.get("user", None), location, version)\n \n         try:\n             # Make a new zope.conf and wsgi.ini\n@@ -172,121 +175,123 @@ def update(self):\n     def build_zope_conf(self):\n         """Create a zope.conf file."""\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n         # Don\'t do this if we have a manual zope.conf\n-        zope_conf_path = options.get(\'zope-conf\', None)\n+        zope_conf_path = options.get("zope-conf", None)\n         if zope_conf_path is not None:\n             return\n \n-        imports = options.get(\'zope-conf-imports\', \'\')\n+        imports = options.get("zope-conf-imports", "")\n         if imports:\n-            imports = imports.split(\'\\n\')\n+            imports = imports.split("\\n")\n             # Filter out empty lines\n             imports = [i for i in imports if i]\n-        imports_lines = \'\\n\'.join((\'%%import %s\' % i for i in imports))\n+        imports_lines = "\\n".join(("%%import %s" % i for i in imports))\n \n-        products = options.get(\'products\', \'\')\n+        products = options.get("products", "")\n         if products:\n-            products = products.split(\'\\n\')\n+            products = products.split("\\n")\n             # Filter out empty directories\n             products = [p for p in products if p]\n             # Make sure we have consistent path seperators\n             products = [os.path.abspath(p) for p in products]\n \n-        base_dir = self.buildout[\'buildout\'][\'directory\']\n-        var_dir = options.get(\'var\', os.path.join(base_dir, \'var\'))\n+        base_dir = self.buildout["buildout"]["directory"]\n+        var_dir = options.get("var", os.path.join(base_dir, "var"))\n         if not os.path.exists(var_dir):\n             os.makedirs(var_dir)\n \n         instance_home = location\n-        client_home = options.get(\'client-home\', os.path.join(var_dir,\n-                                                              self.name))\n+        client_home = options.get("client-home", os.path.join(var_dir, self.name))\n         if not os.path.exists(client_home):\n             os.makedirs(client_home)\n \n-        client_import = options.get(\'import-directory\',\n-                                    os.path.join(client_home, \'import\'))\n+        client_import = options.get(\n+            "import-directory", os.path.join(client_home, "import")\n+        )\n         if not os.path.exists(client_import):\n             os.makedirs(client_import)\n \n-        products_lines = \'\\n\'.join([\'products %s\' % p for p in products])\n-        module_paths = options.get(\'extra-paths\', \'\')\n+        products_lines = "\\n".join(["products %s" % p for p in products])\n+        module_paths = options.get("extra-paths", "")\n         if module_paths:\n-            module_paths = module_paths.split(\'\\n\')\n+            module_paths = module_paths.split("\\n")\n             # Filter out empty directories\n             module_paths = [p for p in module_paths if p]\n             # Make sure we have consistent path seperators\n             module_paths = [os.path.abspath(p) for p in module_paths]\n-        paths_lines = \'\\n\'.join([\'path %s\' % p for p in module_paths])\n-        debug_mode = options.get(\'debug-mode\', \'off\')\n-        debug_exceptions = options.get(\'debug-exceptions\', \'\')\n+        paths_lines = "\\n".join(["path %s" % p for p in module_paths])\n+        debug_mode = options.get("debug-mode", "off")\n+        debug_exceptions = options.get("debug-exceptions", "")\n         if debug_exceptions:\n             debug_exceptions = debug_exceptions_template % debug_exceptions\n-        security_implementation = \'C\'\n-        verbose_security = options.get(\'verbose-security\', \'off\')\n-        if verbose_security == \'on\':\n-            security_implementation = \'python\'\n-        port_base = options.get(\'port-base\', \'\')\n+        security_implementation = "C"\n+        verbose_security = options.get("verbose-security", "off")\n+        if verbose_security == "on":\n+            security_implementation = "python"\n+        port_base = options.get("port-base", "")\n         if port_base:\n-            port_base = \'port-base %s\' % port_base\n-        http_force_connection_close = options.get(\n-            \'http-force-connection-close\', None)\n+            port_base = "port-base %s" % port_base\n+        http_force_connection_close = options.get("http-force-connection-close", None)\n         if http_force_connection_close is None:\n-            http_force_connection_close = \'\'\n+            http_force_connection_close = ""\n         else:\n             http_force_connection_close = (\n-                http_force_connection_close_template\n-                % http_force_connection_close)\n-        http_fast_listen = options.get(\'http-fast-listen\', \'on\') or \'\'\n+                http_force_connection_close_template % http_force_connection_close\n+            )\n+        http_fast_listen = options.get("http-fast-listen", "on") or ""\n         if http_fast_listen.lower() in ("on", "true"):\n-            http_fast_listen = http_fast_listen_template % \'on\'\n+            http_fast_listen = http_fast_listen_template % "on"\n         else:\n-            http_fast_listen = http_fast_listen_template % \'off\'\n-        http_address = options.get(\'http-address\', \'8080\')\n+            http_fast_listen = http_fast_listen_template % "off"\n+        http_address = options.get("http-address", "8080")\n         if http_address:\n             http_address = http_server_template % dict(\n                 http_address=http_address,\n                 http_force_connection_close=http_force_connection_close,\n-                http_fast_listen=http_fast_listen)\n-        ftp_address = options.get(\'ftp-address\', \'\')\n+                http_fast_listen=http_fast_listen,\n+            )\n+        ftp_address = options.get("ftp-address", "")\n         if ftp_address:\n             ftp_address = ftp_server_template % ftp_address\n-        webdav_address = options.get(\'webdav-address\', \'\')\n+        webdav_address = options.get("webdav-address", "")\n         if webdav_address:\n-            webdav_conn_close = options.get(\n-                \'webdav-force-connection-close\', \'off\')\n-            webdav_address = webdav_server_template % (webdav_address,\n-                                                       webdav_conn_close)\n-        icp_address = options.get(\'icp-address\', \'\')\n+            webdav_conn_close = options.get("webdav-force-connection-close", "off")\n+            webdav_address = webdav_server_template % (\n+                webdav_address,\n+                webdav_conn_close,\n+            )\n+        icp_address = options.get("icp-address", "")\n         if icp_address:\n             icp_address = icp_server_template % icp_address\n-        http_header_max_length = options.get(\'http-header-max-length\', \'8192\')\n+        http_header_max_length = options.get("http-header-max-length", "8192")\n         if http_header_max_length:\n             http_header_max_length = (\n-                \'http-header-max-length %s\' % http_header_max_length)\n-        effective_user = options.get(\'effective-user\', \'\')\n+                "http-header-max-length %s" % http_header_max_length\n+            )\n+        effective_user = options.get("effective-user", "")\n         if effective_user:\n-            effective_user = \'effective-user %s\' % effective_user\n-        ip_address = options.get(\'ip-address\', \'\')\n+            effective_user = "effective-user %s" % effective_user\n+        ip_address = options.get("ip-address", "")\n         if ip_address:\n-            ip_address = \'ip-address %s\' % ip_address\n+            ip_address = "ip-address %s" % ip_address\n \n-        environment_vars = options.get(\'environment-vars\', \'\')\n+        environment_vars = options.get("environment-vars", "")\n \n-        if \'CHAMELEON_CACHE\' in environment_vars:\n+        if "CHAMELEON_CACHE" in environment_vars:\n             # We do not override a explicitly defined CHAMELEON_CACHE setting!\n             # Do not create the directory here because this is probably a old\n             # setting and we don\'t want to mess with peoples working setup.\n             chameleon_cache = None\n         else:\n             # Use template-cache setting, default to on\n-            chameleon_cache = options.get(\'template-cache\', \'on\')\n+            chameleon_cache = options.get("template-cache", "on")\n \n         if chameleon_cache:\n-            if chameleon_cache.lower() in (\'on\', \'1\', \'true\', \'enabled\'):\n+            if chameleon_cache.lower() in ("on", "1", "true", "enabled"):\n                 # use default setting var_dir/cache\n-                chameleon_cache = os.path.join(var_dir, \'cache\')\n-            elif chameleon_cache.lower() in (\'off\', \'0\', \'false\', \'disabled\'):\n+                chameleon_cache = os.path.join(var_dir, "cache")\n+            elif chameleon_cache.lower() in ("off", "0", "false", "disabled"):\n                 # disable cache\n                 chameleon_cache = None\n             else:\n@@ -298,21 +303,21 @@ def build_zope_conf(self):\n             os.makedirs(chameleon_cache)\n \n         # Inject cache into environment_vars unless it is set there\n-        if chameleon_cache and \'CHAMELEON_CACHE\' not in environment_vars:\n-            chameleon_cache = \'CHAMELEON_CACHE {}\'.format(chameleon_cache)\n-            if environment_vars and \'\\n\' in environment_vars:\n+        if chameleon_cache and "CHAMELEON_CACHE" not in environment_vars:\n+            chameleon_cache = "CHAMELEON_CACHE {}".format(chameleon_cache)\n+            if environment_vars and "\\n" in environment_vars:\n                 # default case\n-                environment_vars += \'\\n{}\'.format(chameleon_cache)\n+                environment_vars += "\\n{}".format(chameleon_cache)\n             elif environment_vars:\n                 # handle case of all vars in one line\n-                environment_vars += \' {}\'.format(chameleon_cache)\n+                environment_vars += " {}".format(chameleon_cache)\n             else:\n                 # handle case when there are no environment_vars yet\n                 environment_vars = chameleon_cache\n \n         if environment_vars:\n             # if the vars are all given on one line we need to do some work\n-            if \'\\n\' not in environment_vars:\n+            if "\\n" not in environment_vars:\n                 keys = []\n                 values = []\n                 env_vars = environment_vars.split()\n@@ -323,128 +328,151 @@ def build_zope_conf(self):\n                     else:\n                         values.append(var)\n                 env_vars = zip(keys, values)\n-                environment_vars = \'\\n\'.join([\n-                    "%s %s" % (env_var[0], env_var[1])\n-                    for env_var in env_vars])\n+                environment_vars = "\\n".join(\n+                    ["%s %s" % (env_var[0], env_var[1]) for env_var in env_vars]\n+                )\n             environment_vars = environment_template % environment_vars\n \n-        deprecation_warnings = options.get(\'deprecation-warnings\', \'\')\n+        deprecation_warnings = options.get("deprecation-warnings", "")\n         if deprecation_warnings:\n-            if deprecation_warnings.lower() in (\'off\', \'disable\', \'false\'):\n-                deprecation_warnings = \'ignore\'\n-            elif deprecation_warnings.lower() in (\'enable\', \'on\', \'true\'):\n-                deprecation_warnings = \'default\'\n-            deprecation_warnings = \'\\n\'.join((\n-                "<warnfilter>",\n-                "  action %s" % deprecation_warnings,\n-                "  category DeprecationWarning",\n-                "</warnfilter>"))\n-\n-        zope_conf_additional = options.get(\'zope-conf-additional\', \'\')\n+            if deprecation_warnings.lower() in ("off", "disable", "false"):\n+                deprecation_warnings = "ignore"\n+            elif deprecation_warnings.lower() in ("enable", "on", "true"):\n+                deprecation_warnings = "default"\n+            deprecation_warnings = "\\n".join(\n+                (\n+                    "<warnfilter>",\n+                    "  action %s" % deprecation_warnings,\n+                    "  category DeprecationWarning",\n+                    "</warnfilter>",\n+                )\n+            )\n+\n+        zope_conf_additional = options.get("zope-conf-additional", "")\n \n         # logging\n \n-        mailinglogger_config = options.get(\'mailinglogger\', \'\')\n-        mailinglogger_import = \'\'\n+        mailinglogger_config = options.get("mailinglogger", "")\n+        mailinglogger_import = ""\n         if mailinglogger_config:\n             mailinglogger_config = mailinglogger_config.strip()\n-            mailinglogger_import = \'%import mailinglogger\'\n+            mailinglogger_import = "%import mailinglogger"\n \n-        default_log = os.path.sep.join((\'log\', self.name + \'.log\',))\n-        event_log_name = options.get(\'event-log\', default_log)\n+        default_log = os.path.sep.join(\n+            (\n+                "log",\n+                self.name + ".log",\n+            )\n+        )\n+        event_log_name = options.get("event-log", default_log)\n \n-        if event_log_name.lower() == \'disable\':\n-            event_log = \'\'\n+        if event_log_name.lower() == "disable":\n+            event_log = ""\n         else:\n-            event_log_level = options.get(\'event-log-level\', \'INFO\')\n-            custom_event_log = options.get(\'event-log-custom\', None)\n+            event_log_level = options.get("event-log-level", "INFO")\n+            custom_event_log = options.get("event-log-custom", None)\n             # log file\n             if not custom_event_log:\n                 event_file = os.path.join(var_dir, event_log_name)\n                 event_log_dir = os.path.dirname(event_file)\n                 if not os.path.exists(event_log_dir):\n                     os.makedirs(event_log_dir)\n-                event_log_rotate = \'\'\n-                event_log_max_size = options.get(\'event-log-max-size\', None)\n+                event_log_rotate = ""\n+                event_log_max_size = options.get("event-log-max-size", None)\n                 if event_log_max_size:\n-                    event_log_old_files = options.get(\'event-log-old-files\', 1)\n-                    event_log_rotate = \'\\n\'.join((\n-                        "max-size %s" % event_log_max_size,\n-                        "    old-files %s" % event_log_old_files))\n+                    event_log_old_files = options.get("event-log-old-files", 1)\n+                    event_log_rotate = "\\n".join(\n+                        (\n+                            "max-size %s" % event_log_max_size,\n+                            "    old-files %s" % event_log_old_files,\n+                        )\n+                    )\n                 event_log = event_logfile % {\n-                    \'event_logfile\': event_file,\n-                    \'event_log_level\': event_log_level,\n-                    \'event_log_rotate\': event_log_rotate}\n+                    "event_logfile": event_file,\n+                    "event_log_level": event_log_level,\n+                    "event_log_rotate": event_log_rotate,\n+                }\n             # custom log\n             else:\n                 event_log = custom_event_log\n \n             event_log = event_log_template % {\n-                \'mailinglogger_config\': mailinglogger_config,\n-                \'event_log_level\': event_log_level,\n-                \'event_log\': event_log,\n+                "mailinglogger_config": mailinglogger_config,\n+                "event_log_level": event_log_level,\n+                "event_log": event_log,\n             }\n \n-        z_log_name = os.path.sep.join((\'log\', self.name + \'-Z2.log\'))\n-        z_log_name = options.get(\n-            \'z2-log\',\n-            options.get(\'access-log\', z_log_name))\n-        if z_log_name.lower() == \'disable\':\n-            access_event_log = \'\'\n+        z_log_name = os.path.sep.join(("log", self.name + "-Z2.log"))\n+        z_log_name = options.get("z2-log", options.get("access-log", z_log_name))\n+        if z_log_name.lower() == "disable":\n+            access_event_log = ""\n         else:\n             z_log = os.path.join(var_dir, z_log_name)\n             z_log_dir = os.path.dirname(z_log)\n             if not os.path.exists(z_log_dir):\n                 os.makedirs(z_log_dir)\n \n-            z_log_level = options.get(\'z2-log-level\', \'WARN\')\n+            z_log_level = options.get("z2-log-level", "WARN")\n \n             # access event log\n-            custom_access_event_log = options.get(\'access-log-custom\', None)\n+            custom_access_event_log = options.get("access-log-custom", None)\n             # filelog directive\n             if not custom_access_event_log:\n-                access_log_rotate = \'\'\n-                access_log_max_size = options.get(\'access-log-max-size\', None)\n+                access_log_rotate = ""\n+                access_log_max_size = options.get("access-log-max-size", None)\n                 if access_log_max_size:\n-                    access_log_old_files = options.get(\n-                        \'access-log-old-files\', 1)\n-                    access_log_rotate = \'\\n\'.join((\n-                        "max-size %s" % access_log_max_size,\n-                        "    old-files %s" % access_log_old_files))\n+                    access_log_old_files = options.get("access-log-old-files", 1)\n+                    access_log_rotate = "\\n".join(\n+                        (\n+                            "max-size %s" % access_log_max_size,\n+                            "    old-files %s" % access_log_old_files,\n+                        )\n+                    )\n                 access_event_log = access_event_logfile % {\n-                    \'z_log\': z_log,\n-                    \'access_log_rotate\': access_log_rotate}\n+                    "z_log": z_log,\n+                    "access_log_rotate": access_log_rotate,\n+                }\n             # custom directive\n             else:\n                 access_event_log = custom_access_event_log\n \n             access_event_log = access_log_template % {\n-                \'z_log_level\': z_log_level,\n-                \'access_event_log\': access_event_log,\n+                "z_log_level": z_log_level,\n+                "access_event_log": access_event_log,\n             }\n \n         default_zpublisher_encoding = options.get(\n-            \'default-zpublisher-encoding\', \'utf-8\')\n+            "default-zpublisher-encoding", "utf-8"\n+        )\n         if default_zpublisher_encoding:\n-            default_zpublisher_encoding = \'default-zpublisher-encoding %s\' %\\\n-                                          default_zpublisher_encoding\n+            default_zpublisher_encoding = (\n+                "default-zpublisher-encoding %s" % default_zpublisher_encoding\n+            )\n \n-        zeo_client = options.get(\'zeo-client\', \'\')\n-        zeo_client = zeo_client.lower() in (\'yes\', \'true\', \'on\', \'1\')\n-        shared_blob_dir = options.get(\'shared-blob\', \'no\')\n+        zeo_client = options.get("zeo-client", "")\n+        zeo_client = zeo_client.lower() in ("yes", "true", "on", "1")\n+        shared_blob_dir = options.get("shared-blob", "no")\n \n-        before_storage = options.get(\'before-storage\')\n-        demo_storage = options.get(\n-            \'demo-storage\', \'off\') not in (\'off\', \'disable\', \'false\')\n+        before_storage = options.get("before-storage")\n+        demo_storage = options.get("demo-storage", "off") not in (\n+            "off",\n+            "disable",\n+            "false",\n+        )\n \n-        zlib = options.get(\'zlib-storage\')\n+        zlib = options.get("zlib-storage")\n \n-        default_blob = os.path.join(var_dir, \'blobstorage\')\n-        default_file = os.path.sep.join((\'filestorage\', \'Data.fs\',))\n+        default_blob = os.path.join(var_dir, "blobstorage")\n+        default_file = os.path.sep.join(\n+            (\n+                "filestorage",\n+                "Data.fs",\n+            )\n+        )\n \n         # Don\'t try to use the actual blobstorage as a cache\n-        if zeo_client and shared_blob_dir == \'no\':\n-            default_blob = os.path.join(var_dir, \'blobcache\')\n+        if zeo_client and shared_blob_dir == "no":\n+            default_blob = os.path.join(var_dir, "blobcache")\n \n         # Only set blob storage default if we\'re using a before\n         # storage, or not a demo storage (otherwise, the default\n@@ -452,162 +480,171 @@ def build_zope_conf(self):\n         if demo_storage and not before_storage:\n             default_blob = None\n \n-        blob_storage = options.get(\'blob-storage\', default_blob)\n-        file_storage = options.get(\'file-storage\', default_file)\n+        blob_storage = options.get("blob-storage", default_blob)\n+        file_storage = options.get("file-storage", default_file)\n \n-        relstorage = options.get(\'rel-storage\')\n+        relstorage = options.get("rel-storage")\n         if relstorage:\n+\n             def _split(el):\n                 el = el.split(None, 1)\n                 return len(el) == 2 and el or None\n \n-            rel_storage = dict([\n-                _split(el) for el in relstorage.splitlines()\n-                if _split(el) is not None])\n-            type_ = rel_storage.pop(\'type\', \'postgresql\')\n+            rel_storage = dict(\n+                [_split(el) for el in relstorage.splitlines() if _split(el) is not None]\n+            )\n+            type_ = rel_storage.pop("type", "postgresql")\n \n-            if type_ == \'postgresql\' and \'dsn\' not in rel_storage:\n+            if type_ == "postgresql" and "dsn" not in rel_storage:\n                 # Support zope2instance 1.4 style interpolation for\n                 # postgresql\n-                template = ("dbname=\'%(dbname)s\' user=\'%(user)s\' "\n-                            "host=\'%(host)s\' password=\'%(password)s\'")\n+                template = (\n+                    "dbname=\'%(dbname)s\' user=\'%(user)s\' "\n+                    "host=\'%(host)s\' password=\'%(password)s\'"\n+                )\n                 dsn = template % rel_storage\n-                del rel_storage[\'dbname\']\n-                del rel_storage[\'user\']\n-                del rel_storage[\'host\']\n-                del rel_storage[\'password\']\n-                rel_storage[\'dsn\'] = dsn\n+                del rel_storage["dbname"]\n+                del rel_storage["user"]\n+                del rel_storage["host"]\n+                del rel_storage["password"]\n+                rel_storage["dsn"] = dsn\n \n             def is_rs_option(name):\n                 # All generic RelStorage options have a dash in their name,\n                 # except the "name" option. Other options are\n                 # database-specific.\n-                if name == \'data-dir\':  # sqlite3\n+                if name == "data-dir":  # sqlite3\n                     return False\n-                return \'-\' in name or name == \'name\'\n+                return "-" in name or name == "name"\n \n-            db_opts = \'\\n\'.join(\' \' * 12 + \' \'.join((k, v))\n-                                for k, v in rel_storage.items()\n-                                if not is_rs_option(k))\n-            if type_ == \'sqlite3\':\n-                pragmas = [k for k in rel_storage if k.startswith(\'pragmas-\')]\n+            db_opts = "\\n".join(\n+                " " * 12 + " ".join((k, v))\n+                for k, v in rel_storage.items()\n+                if not is_rs_option(k)\n+            )\n+            if type_ == "sqlite3":\n+                pragmas = [k for k in rel_storage if k.startswith("pragmas-")]\n                 if pragmas:\n-                    db_opts += \'\\n\' + \' \' * 12 + \'<pragmas>\\n\'\n+                    db_opts += "\\n" + " " * 12 + "<pragmas>\\n"\n                     for k in sorted(pragmas):\n-                        db_opts += \' \' * 16 + \\\n-                            \' \'.join((k[8:], rel_storage[k])) + \'\\n\'\n+                        db_opts += " " * 16 + " ".join((k[8:], rel_storage[k])) + "\\n"\n                         del rel_storage[k]\n-                    db_opts += \' \' * 12 + \'</pragmas>\\n\'\n+                    db_opts += " " * 12 + "</pragmas>\\n"\n             opts = dict(\n                 type=type_,\n                 db_opts=db_opts,\n-                rs_opts=\'\\n\'.join(\' \' * 8 + \' \'.join((k, v))\n-                                  for k, v in rel_storage.items()\n-                                  if is_rs_option(k)),\n+                rs_opts="\\n".join(\n+                    " " * 8 + " ".join((k, v))\n+                    for k, v in rel_storage.items()\n+                    if is_rs_option(k)\n+                ),\n             )\n             file_storage_snippet = rel_storage_template % opts\n         else:\n             file_storage_snippet = self.render_file_storage(\n-                file_storage, blob_storage, base_dir, var_dir, zlib)\n+                file_storage, blob_storage, base_dir, var_dir, zlib\n+            )\n \n-        if \'zserver-threads\' in options:\n+        if "zserver-threads" in options:\n             warn(\n                 \'option "zserver-threads" is deprecated, please use "threads"\',\n-                DeprecationWarning)\n-        zserver_threads = options.get(\n-            \'threads\', options.get(\'zserver-threads\', \'2\'))\n+                DeprecationWarning,\n+            )\n+        zserver_threads = options.get("threads", options.get("zserver-threads", "2"))\n         if zserver_threads:\n-            zserver_threads = \'zserver-threads %s\' % zserver_threads\n+            zserver_threads = "zserver-threads %s" % zserver_threads\n \n-        python_check_interval = options.get(\'python-check-interval\', \'1000\')\n+        python_check_interval = options.get("python-check-interval", "1000")\n         if python_check_interval:\n-            python_check_interval = (\n-                "python-check-interval %s" % python_check_interval)\n+            python_check_interval = "python-check-interval %s" % python_check_interval\n \n-        enable_products = options.get(\'enable-product-installation\', \'off\')\n+        enable_products = options.get("enable-product-installation", "off")\n         if enable_products:\n-            enable_products = (\n-                "enable-product-installation %s" % enable_products)\n+            enable_products = "enable-product-installation %s" % enable_products\n \n-        zeo_address = options.get(\'zeo-address\', \'8100\')\n-        zeo_addresses = zeo_address.split(\' \')\n-        zeo_address_list = \'\'\n+        zeo_address = options.get("zeo-address", "8100")\n+        zeo_addresses = zeo_address.split(" ")\n+        zeo_address_list = ""\n         for address in zeo_addresses:\n             if not address:\n                 continue\n-            zeo_address_list += zeo_address_list_template % dict(\n-                zeo_address=address)\n+            zeo_address_list += zeo_address_list_template % dict(zeo_address=address)\n \n-        zodb_cache_size = options.get(\'zodb-cache-size\', \'30000\')\n+        zodb_cache_size = options.get("zodb-cache-size", "30000")\n         if zodb_cache_size:\n             zodb_cache_size = "cache-size %s" % zodb_cache_size\n         else:\n             zodb_cache_size = ""\n-        zodb_cache_size_bytes = options.get(\'zodb-cache-size-bytes\', None)\n+        zodb_cache_size_bytes = options.get("zodb-cache-size-bytes", None)\n         if zodb_cache_size_bytes:\n-            zodb_cache_size_bytes = (\n-                "cache-size-bytes %s" % zodb_cache_size_bytes)\n+            zodb_cache_size_bytes = "cache-size-bytes %s" % zodb_cache_size_bytes\n         else:\n             zodb_cache_size_bytes = ""\n-        zeo_client_cache_size = options.get(\'zeo-client-cache-size\', \'128MB\')\n-        zeo_storage = options.get(\'zeo-storage\', \'1\')\n+        zeo_client_cache_size = options.get("zeo-client-cache-size", "128MB")\n+        zeo_storage = options.get("zeo-storage", "1")\n \n         if zeo_client:\n             if relstorage:\n                 raise ValueError(\n-                    \'You cannot use both ZEO and RelStorage at the same time.\')\n+                    "You cannot use both ZEO and RelStorage at the same time."\n+                )\n \n             zeo_client_drop_cache_rather_verify = options.get(\n-                \'zeo-client-drop-cache-rather-verify\', \'\')\n+                "zeo-client-drop-cache-rather-verify", ""\n+            )\n             if zeo_client_drop_cache_rather_verify:\n                 zeo_client_drop_cache_rather_verify = (\n-                    \'drop-cache-rather-verify %s\'\n-                    % zeo_client_drop_cache_rather_verify)\n-            zeo_client_blob_cache_size = options.get(\n-                \'zeo-client-blob-cache-size\', \'\')\n+                    "drop-cache-rather-verify %s" % zeo_client_drop_cache_rather_verify\n+                )\n+            zeo_client_blob_cache_size = options.get("zeo-client-blob-cache-size", "")\n             zeo_client_blob_cache_size_check = options.get(\n-                \'zeo-client-blob-cache-size-check\', \'\')\n-            zeo_client_min_disconnect_poll = options.get(\n-                \'min-disconnect-poll\', "")\n-            zeo_client_max_disconnect_poll = options.get(\n-                \'max-disconnect-poll\', "")\n+                "zeo-client-blob-cache-size-check", ""\n+            )\n+            zeo_client_min_disconnect_poll = options.get("min-disconnect-poll", "")\n+            zeo_client_max_disconnect_poll = options.get("max-disconnect-poll", "")\n             zeo_client_read_only_fallback = options.get(\n-                \'zeo-client-read-only-fallback\', \'false\')\n-            zeo_client_client = options.get(\'zeo-client-client\', \'\')\n+                "zeo-client-read-only-fallback", "false"\n+            )\n+            zeo_client_client = options.get("zeo-client-client", "")\n             if zeo_client_client:\n-                zeo_client_client = \'client %s\' % zeo_client_client\n-                zeo_var_dir = options.get(\'zeo-var\', \'\')\n+                zeo_client_client = "client %s" % zeo_client_client\n+                zeo_var_dir = options.get("zeo-var", "")\n                 if not zeo_var_dir:\n-                    zeo_var_dir = \'$(ZEO_TMP)\'\n-                zeo_var_dir = \'var %s\' % zeo_var_dir\n+                    zeo_var_dir = "$(ZEO_TMP)"\n+                zeo_var_dir = "var %s" % zeo_var_dir\n             else:\n-                zeo_var_dir = \'\'\n+                zeo_var_dir = ""\n             if zeo_client_blob_cache_size:\n                 zeo_client_blob_cache_size = (\n-                    \'blob-cache-size %s\' % zeo_client_blob_cache_size)\n+                    "blob-cache-size %s" % zeo_client_blob_cache_size\n+                )\n             if zeo_client_blob_cache_size_check:\n                 zeo_client_blob_cache_size_check = (\n-                    \'blob-cache-size-check %s\'\n-                    % zeo_client_blob_cache_size_check)\n+                    "blob-cache-size-check %s" % zeo_client_blob_cache_size_check\n+                )\n             if zeo_client_min_disconnect_poll:\n                 zeo_client_min_disconnect_poll = (\n-                    "min-disconnect-poll %s" % zeo_client_min_disconnect_poll)\n+                    "min-disconnect-poll %s" % zeo_client_min_disconnect_poll\n+                )\n             if zeo_client_max_disconnect_poll:\n                 zeo_client_max_disconnect_poll = (\n-                    "max-disconnect-poll %s" % zeo_client_max_disconnect_poll)\n+                    "max-disconnect-poll %s" % zeo_client_max_disconnect_poll\n+                )\n             if zeo_client_read_only_fallback:\n                 zeo_client_read_only_fallback = (\n-                    "read-only-fallback %s" % zeo_client_read_only_fallback)\n-            if options.get(\'zeo-username\', \'\'):\n-                if not options.get(\'zeo-password\', \'\'):\n-                    raise zc.buildout.UserError(\'No ZEO password specified\')\n+                    "read-only-fallback %s" % zeo_client_read_only_fallback\n+                )\n+            if options.get("zeo-username", ""):\n+                if not options.get("zeo-password", ""):\n+                    raise zc.buildout.UserError("No ZEO password specified")\n \n                 zeo_authentication = zeo_authentication_template % dict(\n-                    realm=options.get(\'zeo-realm\', \'ZEO\'),\n-                    username=options.get(\'zeo-username\'),\n-                    password=options.get(\'zeo-password\'))\n+                    realm=options.get("zeo-realm", "ZEO"),\n+                    username=options.get("zeo-username"),\n+                    password=options.get("zeo-password"),\n+                )\n             else:\n-                zeo_authentication = \'\'\n+                zeo_authentication = ""\n \n             if blob_storage:\n                 storage_snippet_template = zeo_blob_storage_template\n@@ -628,32 +665,32 @@ def is_rs_option(name):\n                 zeo_client_drop_cache_rather_verify=zeo_client_drop_cache_rather_verify,  # noqa: E501\n                 zeo_client_min_disconnect_poll=zeo_client_min_disconnect_poll,\n                 zeo_client_max_disconnect_poll=zeo_client_max_disconnect_poll,\n-                read_only=options.get(\'read-only\', \'false\'),\n-                zeo_client_read_only_fallback=zeo_client_read_only_fallback\n-                )\n+                read_only=options.get("read-only", "false"),\n+                zeo_client_read_only_fallback=zeo_client_read_only_fallback,\n+            )\n         else:\n             # no zeo-client\n-            zeo_client_client = \'\'\n+            zeo_client_client = ""\n             storage_snippet = file_storage_snippet\n \n         if before_storage:\n-            storage_snippet = (\n-                before_storage_template % before_storage) % indent(\n-                    storage_snippet, 2)\n+            storage_snippet = (before_storage_template % before_storage) % indent(\n+                storage_snippet, 2\n+            )\n \n         if demo_storage:\n-            demo_file_storage = options.get(\'demo-file-storage\')\n-            demo_blob_storage = options.get(\'demo-blob-storage\')\n+            demo_file_storage = options.get("demo-file-storage")\n+            demo_blob_storage = options.get("demo-blob-storage")\n \n             if demo_file_storage or demo_blob_storage:\n-                base = storage_snippet.replace(\'>\', \' base>\', 1)\n+                base = storage_snippet.replace(">", " base>", 1)\n                 changes = self.render_file_storage(\n-                    demo_file_storage, demo_blob_storage, base_dir, var_dir,\n-                    zlib).replace(\'>\', \' changes>\', 1)\n+                    demo_file_storage, demo_blob_storage, base_dir, var_dir, zlib\n+                ).replace(">", " changes>", 1)\n \n                 storage_snippet = demo_storage2_template % (base, changes)\n \n-            elif \'blob-storage\' in options:\n+            elif "blob-storage" in options:\n                 raise ValueError(\n                     "Both blob and demo storage cannot be used"\n                     " at the same time (use a before storage instead)."\n@@ -661,29 +698,24 @@ def is_rs_option(name):\n             else:\n                 storage_snippet = demo_storage_template % storage_snippet\n \n-        if options.get(\'storage-wrapper\'):\n-            storage_snippet = indent(\n-                options[\'storage-wrapper\'] % storage_snippet, 4)\n+        if options.get("storage-wrapper"):\n+            storage_snippet = indent(options["storage-wrapper"] % storage_snippet, 4)\n \n-        zodb_tmp_storage = options.get(\'zodb-temporary-storage\', \'on\')\n-        if zodb_tmp_storage.lower() in (\'off\', \'false\', \'0\'):\n+        zodb_tmp_storage = options.get("zodb-temporary-storage", "on")\n+        if zodb_tmp_storage.lower() in ("off", "false", "0"):\n             # no temporary-storage snippet\n-            zodb_tmp_storage = \'\'\n-        elif zodb_tmp_storage.lower() in (\'on\', \'true\', \'1\'):\n+            zodb_tmp_storage = ""\n+        elif zodb_tmp_storage.lower() in ("on", "true", "1"):\n             # use default temporary-storage snippet\n             zodb_tmp_storage = zodb_temporary_storage_template\n         template = wsgi_conf_template if self.wsgi else zope_conf_template\n \n-        pid_file = options.get(\n-            \'pid-file\',\n-            os.path.join(var_dir, self.name + \'.pid\'))\n+        pid_file = options.get("pid-file", os.path.join(var_dir, self.name + ".pid"))\n         pid_file_dir = os.path.dirname(pid_file)\n         if not os.path.exists(pid_file_dir):\n             os.makedirs(pid_file_dir)\n \n-        lock_file = options.get(\n-            \'lock-file\',\n-            os.path.join(var_dir, self.name + \'.lock\'))\n+        lock_file = options.get("lock-file", os.path.join(var_dir, self.name + ".lock"))\n         lock_file_dir = os.path.dirname(lock_file)\n         if not os.path.exists(lock_file_dir):\n             os.makedirs(lock_file_dir)\n@@ -723,158 +755,164 @@ def is_rs_option(name):\n             deprecation_warnings=deprecation_warnings,\n             python_check_interval=python_check_interval,\n             enable_products=enable_products,\n-            zope_conf_additional=zope_conf_additional,)\n+            zope_conf_additional=zope_conf_additional,\n+        )\n \n         zope_conf = "\\n".join(\n             [line for line in zope_conf.splitlines() if line.rstrip()]\n         )\n-        zope_conf_path = os.path.join(location, \'etc\', \'zope.conf\')\n-        with open(zope_conf_path, \'w\') as f:\n+        zope_conf_path = os.path.join(location, "etc", "zope.conf")\n+        with open(zope_conf_path, "w") as f:\n             f.write(zope_conf)\n \n     def build_wsgi_ini(self):\n         options = self.options\n-        wsgi_ini_path = os.path.join(options[\'location\'], \'etc\', \'wsgi.ini\')\n-        listen = options.get(\'http-address\', \'0.0.0.0:8080\')\n-        fast_listen = options.get(\'http-fast-listen\', \'on\') or \'\'\n-        fast = \'fast-\' if fast_listen.lower() in (\'on\', \'true\') else \'\'\n-        listen = \' \'.join(\n+        wsgi_ini_path = os.path.join(options["location"], "etc", "wsgi.ini")\n+        listen = options.get("http-address", "0.0.0.0:8080")\n+        fast_listen = options.get("http-fast-listen", "on") or ""\n+        fast = "fast-" if fast_listen.lower() in ("on", "true") else ""\n+        listen = " ".join(\n             [\n-                \'0.0.0.0:{}\'.format(part) if \':\' not in part else part\n+                "0.0.0.0:{}".format(part) if ":" not in part else part\n                 for part in listen.split()\n             ]\n         )\n-        base_dir = self.buildout[\'buildout\'][\'directory\']\n-        var_dir = options.get(\'var\', os.path.join(base_dir, \'var\'))\n+        base_dir = self.buildout["buildout"]["directory"]\n+        var_dir = options.get("var", os.path.join(base_dir, "var"))\n         default_eventlog = os.path.sep.join(\n-            (var_dir, \'log\', \'{}.log\'.format(self.name),))\n-        eventlog_name = options.get(\'event-log\', default_eventlog)\n-        eventlog_level = options.get(\'event-log-level\', \'INFO\')\n-        eventlog_handler = options.get(\'event-log-handler\', \'FileHandler\')\n-        eventlog_kwargs = options.get(\'event-log-kwargs\', \'{}\')\n-        eventlog_args = options.get(\'event-log-args\')\n+            (\n+                var_dir,\n+                "log",\n+                "{}.log".format(self.name),\n+            )\n+        )\n+        eventlog_name = options.get("event-log", default_eventlog)\n+        eventlog_level = options.get("event-log-level", "INFO")\n+        eventlog_handler = options.get("event-log-handler", "FileHandler")\n+        eventlog_kwargs = options.get("event-log-kwargs", "{}")\n+        eventlog_args = options.get("event-log-args")\n         if not eventlog_args:\n             eventlog_args = "(r\'{}\', \'a\')".format(eventlog_name)\n         else:\n             eventlog_args = eventlog_args.format(eventlog_name)\n \n-        if eventlog_name.lower() == \'disable\':\n-            root_handlers = \'console\'\n-            event_handlers = \'\'\n+        if eventlog_name.lower() == "disable":\n+            root_handlers = "console"\n+            event_handlers = ""\n         else:\n-            root_handlers = \'console, eventlog\'\n-            event_handlers = \'eventlog\'\n+            root_handlers = "console, eventlog"\n+            event_handlers = "eventlog"\n \n         default_accesslog = os.path.sep.join(\n-            (var_dir, \'log\', \'{}-access.log\'.format(self.name),))\n+            (\n+                var_dir,\n+                "log",\n+                "{}-access.log".format(self.name),\n+            )\n+        )\n \n         accesslog_name = options.get(\n-            \'z2-log\',\n-            options.get(\'access-log\', default_accesslog))\n+            "z2-log", options.get("access-log", default_accesslog)\n+        )\n         accesslog_level = options.get(\n-            \'access-log-level\',\n-            options.get(\'z2-log-level\', \'INFO\'))\n-        accesslog_handler = options.get(\'access-log-handler\', \'FileHandler\')\n-        accesslog_kwargs = options.get(\'access-log-kwargs\', \'{}\')\n-        accesslog_args = options.get(\'access-log-args\')\n+            "access-log-level", options.get("z2-log-level", "INFO")\n+        )\n+        accesslog_handler = options.get("access-log-handler", "FileHandler")\n+        accesslog_kwargs = options.get("access-log-kwargs", "{}")\n+        accesslog_args = options.get("access-log-args")\n         if not accesslog_args:\n             accesslog_args = "(r\'{}\', \'a\')".format(accesslog_name)\n         else:\n             accesslog_args = accesslog_args.format(accesslog_name)\n \n-        pipeline = options[\'pipeline\'].split()\n-        if accesslog_name.lower() == \'disable\':\n-            event_handlers = \'\'\n-            accesslog_handler = \'NullHandler\'\n+        pipeline = options["pipeline"].split()\n+        if accesslog_name.lower() == "disable":\n+            event_handlers = ""\n+            accesslog_handler = "NullHandler"\n             accesslog_args = "()"\n             pipeline = [line for line in pipeline if line != "translogger"]\n \n-        sentry_dsn = options.get(\'sentry_dsn\', \'\')\n+        sentry_dsn = options.get("sentry_dsn", "")\n         if sentry_dsn:\n             if "zope" in pipeline:\n-                pipeline.insert(pipeline.index("zope"), \'sentry\')\n+                pipeline.insert(pipeline.index("zope"), "sentry")\n             else:\n-                pipeline.append(\'sentry\')\n-        sentry_level = options.get(\'sentry_level\', \'INFO\')\n-        sentry_event_level = options.get(\'sentry_event_level\', \'ERROR\')\n-        sentry_ignore = options.get(\'sentry_ignore\', \'\')\n+                pipeline.append("sentry")\n+        sentry_level = options.get("sentry_level", "INFO")\n+        sentry_event_level = options.get("sentry_event_level", "ERROR")\n+        sentry_ignore = options.get("sentry_ignore", "")\n \n-        profile = options.get(\'profile\', \'\').strip() == \'on\'\n+        profile = options.get("profile", "").strip() == "on"\n         if profile:\n             if "zope" in pipeline:\n-                pipeline.insert(pipeline.index("zope"), \'profile\')\n+                pipeline.insert(pipeline.index("zope"), "profile")\n             else:\n-                pipeline.append(\'profile\')\n+                pipeline.append("profile")\n         default_profile_log_filename = os.path.sep.join(\n             [\n                 var_dir,\n-                \'log\',\n-                \'profile-{0}.raw\'.format(self.name),\n+                "log",\n+                "profile-{0}.raw".format(self.name),\n             ]\n         )\n         profile_log_filename = options.get(\n-            \'profile_log_filename\',\n-            default_profile_log_filename\n+            "profile_log_filename", default_profile_log_filename\n         )\n         default_profile_log_filename = os.path.sep.join(\n             [\n                 var_dir,\n-                \'log\',\n-                \'cachegrind.out.{0}\'.format(self.name),\n+                "log",\n+                "cachegrind.out.{0}".format(self.name),\n             ]\n         )\n         profile_cachegrind_filename = options.get(\n-            \'profile_cachegrind_filename\',\n-            default_profile_log_filename\n+            "profile_cachegrind_filename", default_profile_log_filename\n         )\n         profile_discard_first_request = options.get(\n-            \'profile_discard_first_request\',\n-            \'true\'\n-        )\n-        profile_path = options.get(\'profile_path\', \'/__profile__\')\n-        profile_flush_at_shutdown = options.get(\n-            \'profile_flush_at_shutdown\',\n-            \'true\'\n+            "profile_discard_first_request", "true"\n         )\n-        profile_unwind = options.get(\'profile_unwind\', \'false\')\n+        profile_path = options.get("profile_path", "/__profile__")\n+        profile_flush_at_shutdown = options.get("profile_flush_at_shutdown", "true")\n+        profile_unwind = options.get("profile_unwind", "false")\n \n         if "zope" not in pipeline:\n-            pipeline.append(\'zope\')\n+            pipeline.append("zope")\n \n         wsgi_options = {\n-            \'accesslog_args\': accesslog_args,\n-            \'accesslog_handler\': accesslog_handler,\n-            \'accesslog_kwargs\': accesslog_kwargs,\n-            \'accesslog_level\': accesslog_level,\n-            \'accesslog_name\': accesslog_name,\n-            \'clear_untrusted_proxy_headers\': options.get(\'clear-untrusted-proxy-headers\', \'false\'),\n-            \'event_handlers\': event_handlers,\n-            \'eventlog_args\': eventlog_args,\n-            \'eventlog_handler\': eventlog_handler,\n-            \'eventlog_kwargs\': eventlog_kwargs,\n-            \'eventlog_level\': eventlog_level,\n-            \'eventlog_name\': eventlog_name,\n-            \'fast-listen\': fast,\n-            \'http_address\': listen,\n-            \'location\': options[\'location\'],\n-            \'max_request_body_size\': options.get(\n-                \'max-request-body-size\', 1073741824),\n-            \'pipeline\': \'\\n    \'.join(pipeline),\n-            \'root_handlers\': root_handlers,\n-            \'sentry_dsn\': sentry_dsn,\n-            \'sentry_event_level\': sentry_event_level,\n-            \'sentry_ignore\': sentry_ignore,\n-            \'sentry_level\': sentry_level,\n-            \'threads\': options.get(\'threads\', 4),\n-            \'profile_log_filename\': profile_log_filename,\n-            \'profile_cachegrind_filename\': profile_cachegrind_filename,\n-            \'profile_discard_first_request\': profile_discard_first_request,\n-            \'profile_path\': profile_path,\n-            \'profile_flush_at_shutdown\': profile_flush_at_shutdown,\n-            \'profile_unwind\': profile_unwind,\n+            "accesslog_args": accesslog_args,\n+            "accesslog_handler": accesslog_handler,\n+            "accesslog_kwargs": accesslog_kwargs,\n+            "accesslog_level": accesslog_level,\n+            "accesslog_name": accesslog_name,\n+            "clear_untrusted_proxy_headers": options.get(\n+                "clear-untrusted-proxy-headers", "false"\n+            ),\n+            "event_handlers": event_handlers,\n+            "eventlog_args": eventlog_args,\n+            "eventlog_handler": eventlog_handler,\n+            "eventlog_kwargs": eventlog_kwargs,\n+            "eventlog_level": eventlog_level,\n+            "eventlog_name": eventlog_name,\n+            "fast-listen": fast,\n+            "http_address": listen,\n+            "location": options["location"],\n+            "max_request_body_size": options.get("max-request-body-size", 1073741824),\n+            "pipeline": "\\n    ".join(pipeline),\n+            "root_handlers": root_handlers,\n+            "sentry_dsn": sentry_dsn,\n+            "sentry_event_level": sentry_event_level,\n+            "sentry_ignore": sentry_ignore,\n+            "sentry_level": sentry_level,\n+            "threads": options.get("threads", 4),\n+            "profile_log_filename": profile_log_filename,\n+            "profile_cachegrind_filename": profile_cachegrind_filename,\n+            "profile_discard_first_request": profile_discard_first_request,\n+            "profile_path": profile_path,\n+            "profile_flush_at_shutdown": profile_flush_at_shutdown,\n+            "profile_unwind": profile_unwind,\n         }\n         global wsgi_ini_template\n-        wsgi_ini_template_path = self.options.get(\'wsgi-ini-template\')\n+        wsgi_ini_template_path = self.options.get("wsgi-ini-template")\n         if wsgi_ini_template_path:\n             try:\n                 with open(wsgi_ini_template_path) as fp:\n@@ -884,13 +922,12 @@ def build_wsgi_ini(self):\n \n         # generate a different [server:main] - useful for Windows\n         wsgi_server_main_template = wsgi_server_main_templates.get(\n-            sys.platform,\n-            wsgi_server_main_templates[\'default\']\n+            sys.platform, wsgi_server_main_templates["default"]\n         )\n-        wsgi_options[\'server_main\'] = wsgi_server_main_template % wsgi_options\n+        wsgi_options["server_main"] = wsgi_server_main_template % wsgi_options\n \n         wsgi_ini = wsgi_ini_template % wsgi_options\n-        with open(wsgi_ini_path, \'w\') as f:\n+        with open(wsgi_ini_path, "w") as f:\n             f.write(wsgi_ini)\n \n     def install_scripts(self):\n@@ -898,23 +935,24 @@ def install_scripts(self):\n             # instance scripts are usung zdaemon, which are Unix only\n             return {}\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n         # The instance control script\n-        zope_conf = os.path.join(location, \'etc\', \'zope.conf\')\n-        zope_conf_path = options.get(\'zope-conf\', zope_conf)\n-        program_name = \'interpreter\'\n-        program_path = os.path.join(location, \'bin\', program_name)\n+        zope_conf = os.path.join(location, "etc", "zope.conf")\n+        zope_conf_path = options.get("zope-conf", zope_conf)\n+        program_name = "interpreter"\n+        program_path = os.path.join(location, "bin", program_name)\n \n-        zopectl_umask = options.get(\'zopectl-umask\', \'\')\n+        zopectl_umask = options.get("zopectl-umask", "")\n \n-        extra_paths = options.get(\'extra-paths\', \'\').split()\n-        requirements, ws = self.egg.working_set([\'plone.recipe.zope2instance\'])\n-        reqs = [self.options.get(\'control-script\', self.name)]\n-        reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n+        extra_paths = options.get("extra-paths", "").split()\n+        requirements, ws = self.egg.working_set(["plone.recipe.zope2instance"])\n+        reqs = [self.options.get("control-script", self.name)]\n+        reqs.extend(["plone.recipe.zope2instance.ctl", "main"])\n         reqs = [tuple(reqs)]\n \n-        if options.get(\'relative-paths\'):\n+        if options.get("relative-paths"):\n+\n             class relative_path_str(str):\n                 def __repr__(self):\n                     return str(self)\n@@ -922,49 +960,64 @@ def __repr__(self):\n             zope_conf_path = relative_path_str(\n                 zc.buildout.easy_install._relativitize(\n                     zope_conf,\n-                    options[\'buildout-directory\'] + os.sep,\n-                    self._relative_paths\n+                    options["buildout-directory"] + os.sep,\n+                    self._relative_paths,\n                 )\n             )\n             program_path = relative_path_str(\n                 zc.buildout.easy_install._relativitize(\n                     program_path,\n-                    options[\'buildout-directory\'] + os.sep,\n-                    self._relative_paths\n+                    options["buildout-directory"] + os.sep,\n+                    self._relative_paths,\n                 )\n             )\n \n-        options[\'zope-conf\'] = zope_conf_path\n-        arguments = ["-C", zope_conf_path, \'-p\', program_path]\n+        options["zope-conf"] = zope_conf_path\n+        arguments = ["-C", zope_conf_path, "-p", program_path]\n         if zopectl_umask:\n             arguments.extend(["--umask", int(zopectl_umask, 8)])\n         if self.wsgi and self.wsgi_config:\n-            arguments.extend([\'-w\', self.wsgi_config])\n-        script_arguments = (\'\\n        \' + repr(arguments) +\n-                            \'\\n        + sys.argv[1:]\')\n+            arguments.extend(["-w", self.wsgi_config])\n+        script_arguments = "\\n        " + repr(arguments) + "\\n        + sys.argv[1:]"\n \n         generated = self._install_scripts(\n-            options[\'bin-directory\'], ws, reqs=reqs, extra_paths=extra_paths,\n-            script_arguments=script_arguments)\n-        generated.extend(self._install_scripts(\n-            os.path.join(options[\'location\'], \'bin\'), ws,\n-            interpreter=program_name, extra_paths=extra_paths))\n+            options["bin-directory"],\n+            ws,\n+            reqs=reqs,\n+            extra_paths=extra_paths,\n+            script_arguments=script_arguments,\n+        )\n+        generated.extend(\n+            self._install_scripts(\n+                os.path.join(options["location"], "bin"),\n+                ws,\n+                interpreter=program_name,\n+                extra_paths=extra_paths,\n+            )\n+        )\n         return generated\n \n-    def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n-                         extra_paths=(), script_arguments=\'\'):\n+    def _install_scripts(\n+        self,\n+        dest,\n+        working_set,\n+        reqs=(),\n+        interpreter=None,\n+        extra_paths=(),\n+        script_arguments="",\n+    ):\n         options = self.options\n         if BUILDOUT15:\n             return sitepackage_safe_scripts(\n                 dest=dest,\n                 working_set=working_set,\n-                executable=options[\'executable\'],\n-                site_py_dest=options[\'location\'],\n+                executable=options["executable"],\n+                site_py_dest=options["location"],\n                 reqs=reqs,\n                 scripts=None,\n                 interpreter=interpreter,\n                 extra_paths=extra_paths,\n-                initialization=options[\'initialization\'],\n+                initialization=options["initialization"],\n                 include_site_packages=self._include_site_packages,\n                 exec_sitecustomize=False,\n                 relative_paths=self._relative_paths,\n@@ -975,40 +1028,41 @@ def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n                 dest=dest,\n                 reqs=reqs,\n                 working_set=working_set,\n-                executable=options[\'executable\'],\n+                executable=options["executable"],\n                 extra_paths=extra_paths,\n-                initialization=options[\'initialization\'],\n+                initialization=options["initialization"],\n                 arguments=script_arguments,\n                 interpreter=interpreter,\n-                relative_paths=self._relative_paths,)\n+                relative_paths=self._relative_paths,\n+            )\n \n     def build_package_includes(self):\n         """Create ZCML slugs in etc/package-includes."""\n-        location = self.options[\'location\']\n-        sitezcml_path = os.path.join(location, \'etc\', \'site.zcml\')\n-        zcml = self.options.get(\'zcml\')\n-        site_zcml = self.options.get(\'site-zcml\')\n+        location = self.options["location"]\n+        sitezcml_path = os.path.join(location, "etc", "site.zcml")\n+        zcml = self.options.get("zcml")\n+        site_zcml = self.options.get("site-zcml")\n         additional_zcml = self.options.get("zcml-additional")\n         resources = self.options.get("resources")\n         locales = self.options.get("locales")\n \n         if site_zcml:\n-            open(sitezcml_path, \'w\').write(site_zcml)\n+            open(sitezcml_path, "w").write(site_zcml)\n             return\n \n         if zcml:\n             zcml = nocomments_split(zcml)\n \n         if additional_zcml or resources or locales or zcml:\n-            includes_path = os.path.join(location, \'etc\', \'package-includes\')\n+            includes_path = os.path.join(location, "etc", "package-includes")\n \n             if not os.path.exists(includes_path):\n                 # Zope 2.9 does not have a package-includes so we\n                 # create one.\n                 os.mkdir(includes_path)\n             else:\n-                if zcml and \'*\' in zcml:\n-                    zcml.remove(\'*\')\n+                if zcml and "*" in zcml:\n+                    zcml.remove("*")\n                 else:\n                     shutil.rmtree(includes_path)\n                     os.mkdir(includes_path)\n@@ -1021,9 +1075,7 @@ def build_package_includes(self):\n         if resources:\n             resources_path = resources.strip()\n             path = os.path.join(includes_path, "998-resources-configure.zcml")\n-            open(path, "w").write(\n-                resources_zcml % dict(directory=resources_path)\n-            )\n+            open(path, "w").write(resources_zcml % dict(directory=resources_path))\n \n             if not os.path.exists(resources_path):\n                 os.mkdir(resources_path)\n@@ -1031,49 +1083,45 @@ def build_package_includes(self):\n         if locales:\n             locales_path = locales.strip()\n             path = os.path.join(includes_path, "001-locales-configure.zcml")\n-            open(path, "w").write(\n-                locales_zcml % dict(directory=locales_path)\n-            )\n+            open(path, "w").write(locales_zcml % dict(directory=locales_path))\n \n             if not os.path.exists(locales_path):\n                 os.mkdir(locales_path)\n \n         if zcml:\n             n = 1  # 001 is reserved for an optional locales-configure\n-            package_match = re.compile(r\'\\w+([.]\\w+)*$\').match\n+            package_match = re.compile(r"\\w+([.]\\w+)*$").match\n             for package in zcml:\n                 n += 1\n                 orig = package\n-                if \':\' in package:\n-                    package, filename = package.split(\':\')\n+                if ":" in package:\n+                    package, filename = package.split(":")\n                 else:\n                     filename = None\n \n-                if \'-\' in package:\n-                    package, suff = package.split(\'-\')\n+                if "-" in package:\n+                    package, suff = package.split("-")\n                     file_suff = suff\n-                    if suff not in (\'configure\', \'meta\', \'overrides\'):\n-                        file_suff = \'%s-configure\' % suff\n+                    if suff not in ("configure", "meta", "overrides"):\n+                        file_suff = "%s-configure" % suff\n                 else:\n-                    suff = file_suff = \'configure\'\n+                    suff = file_suff = "configure"\n \n                 if filename is None:\n-                    filename = suff + \'.zcml\'\n+                    filename = suff + ".zcml"\n \n                 if not package_match(package):\n-                    raise ValueError(\'Invalid zcml\', orig)\n+                    raise ValueError("Invalid zcml", orig)\n \n                 path = os.path.join(\n                     includes_path,\n                     "%3.3d-%s-%s.zcml" % (n, package, file_suff),\n                 )\n-                open(path, \'w\').write(\n-                    \'<include package="%s" file="%s" />\\n\'\n-                    % (package, filename)\n+                open(path, "w").write(\n+                    \'<include package="%s" file="%s" />\\n\' % (package, filename)\n                 )\n \n-    def render_file_storage(self, file_storage, blob_storage,\n-                            base_dir, var_dir, zlib):\n+    def render_file_storage(self, file_storage, blob_storage, base_dir, var_dir, zlib):\n         if file_storage:\n             file_storage = os.path.join(var_dir, file_storage)\n             file_storage_dir = os.path.dirname(file_storage)\n@@ -1081,18 +1129,17 @@ def render_file_storage(self, file_storage, blob_storage,\n                 os.makedirs(file_storage_dir)\n             storage = file_storage_template % file_storage\n             if zlib is not None:\n-                if zlib == \'active\':\n-                    compress = \'true\'\n-                elif zlib == \'passive\':\n-                    compress = \'false\'\n+                if zlib == "active":\n+                    compress = "true"\n+                elif zlib == "passive":\n+                    compress = "false"\n                 else:\n                     raise ValueError(\n                         "Valid options for ``zlib-storage`` are "\n-                        "(\'compress\', \'uncompress\'). Got: %s." % zlib)\n+                        "(\'compress\', \'uncompress\'). Got: %s." % zlib\n+                    )\n \n-                storage = zlib_storage_template % (\n-                    compress, indent(storage, 2)\n-                )\n+                storage = zlib_storage_template % (compress, indent(storage, 2))\n         else:\n             storage = "    <demostorage />"\n \n@@ -1417,7 +1464,9 @@ def render_file_storage(self, file_storage, blob_storage,\n """\n \n wsgi_server_main_templates = {}\n-wsgi_server_main_templates[\'default\'] = """\\\n+wsgi_server_main_templates[\n+    "default"\n+] = """\\\n paste.server_factory = plone.recipe.zope2instance:main\n use = egg:plone.recipe.zope2instance#main\n %(fast-listen)slisten = %(http_address)s\n@@ -1426,7 +1475,9 @@ def render_file_storage(self, file_storage, blob_storage,\n max_request_body_size = %(max_request_body_size)s\n """\n \n-wsgi_server_main_templates[\'win32\'] = """\\\n+wsgi_server_main_templates[\n+    "win32"\n+] = """\\\n use = egg:waitress#main\n listen = %(http_address)s\n threads = %(threads)s\ndiff --git a/src/plone/recipe/zope2instance/sentry.py b/src/plone/recipe/zope2instance/sentry.py\nindex 069294a..80c2912 100644\n--- a/src/plone/recipe/zope2instance/sentry.py\n+++ b/src/plone/recipe/zope2instance/sentry.py\n@@ -3,15 +3,9 @@\n from sentry_sdk.integrations.logging import LoggingIntegration, ignore_logger\n \n \n-def sdk_init(\n-        global_conf,\n-        dsn,\n-        level=\'INFO\',\n-        event_level=\'ERROR\',\n-        ignorelist=\'\'):\n+def sdk_init(global_conf, dsn, level="INFO", event_level="ERROR", ignorelist=""):\n     sentry_logging = LoggingIntegration(\n-        level=logging.__dict__[level],\n-        event_level=logging.__dict__[event_level]\n+        level=logging.__dict__[level], event_level=logging.__dict__[event_level]\n     )\n     for logger in ignorelist.split():\n         ignore_logger(logger)\n@@ -19,4 +13,5 @@ def sdk_init(\n     def filter(app):\n         sentry_sdk.init(dsn=dsn, integrations=[sentry_logging])\n         return app\n+\n     return filter\ndiff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py\nindex 1ed2993..3336fad 100644\n--- a/src/plone/recipe/zope2instance/tests/test_docs.py\n+++ b/src/plone/recipe/zope2instance/tests/test_docs.py\n@@ -14,11 +14,11 @@\n \n def setUp(test):\n     buildoutSetUp(test)\n-    install_develop(\'plone.recipe.zope2instance\', test)\n-    install(\'zc.recipe.egg\', test)\n-    install_dependencies(pkg_resources.working_set.require(\'ZEO\'), test)\n-    install_dependencies(pkg_resources.working_set.require(\'Zope\'), test)\n-    install_dependencies(pkg_resources.working_set.require(\'ZODB\'), test)\n+    install_develop("plone.recipe.zope2instance", test)\n+    install("zc.recipe.egg", test)\n+    install_dependencies(pkg_resources.working_set.require("ZEO"), test)\n+    install_dependencies(pkg_resources.working_set.require("Zope"), test)\n+    install_dependencies(pkg_resources.working_set.require("ZODB"), test)\n \n \n def install_dependencies(dependencies, test):\n@@ -33,35 +33,39 @@ def install_dependencies(dependencies, test):\n \n def tearDown(test):\n     buildoutTearDown(test)\n-    sample_buildout = test.globs[\'sample_buildout\']\n+    sample_buildout = test.globs["sample_buildout"]\n     shutil.rmtree(sample_buildout, ignore_errors=True)\n \n \n def test_suite():\n     suite = []\n-    flags = (\n-        doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE |\n-        doctest.REPORT_NDIFF)\n+    flags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_NDIFF\n \n-    suite.append(doctest.DocFileSuite(\n-        \'zope2instance_base.rst\',\n-        \'zope2instance_beforestorage.rst\',\n-        \'zope2instance_blobstorage.rst\',\n-        \'zope2instance_demostorage.rst\',\n-        \'zope2instance_relstorage.rst\',\n-        \'zope2instance_tempstorage_off.rst\',\n-        \'zope2instance_zeostorage.rst\',\n-        \'zope2instance_zlibstorage.rst\',\n-        \'wsgi.rst\',\n-        optionflags=flags,\n-        setUp=setUp,\n-        tearDown=tearDown))\n-\n-    if six.PY2:\n-        suite.append(doctest.DocFileSuite(\n-            \'zope2instance_zserver.rst\',\n+    suite.append(\n+        doctest.DocFileSuite(\n+            "zope2instance_base.rst",\n+            "zope2instance_beforestorage.rst",\n+            "zope2instance_blobstorage.rst",\n+            "zope2instance_demostorage.rst",\n+            "zope2instance_relstorage.rst",\n+            "zope2instance_tempstorage_off.rst",\n+            "zope2instance_zeostorage.rst",\n+            "zope2instance_zlibstorage.rst",\n+            "wsgi.rst",\n             optionflags=flags,\n             setUp=setUp,\n-            tearDown=tearDown))\n+            tearDown=tearDown,\n+        )\n+    )\n+\n+    if six.PY2:\n+        suite.append(\n+            doctest.DocFileSuite(\n+                "zope2instance_zserver.rst",\n+                optionflags=flags,\n+                setUp=setUp,\n+                tearDown=tearDown,\n+            )\n+        )\n \n     return unittest.TestSuite(suite)\ndiff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nindex 71cb89e..82ecb7a 100644\n--- a/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -39,7 +39,6 @@ def getSchema():\n \n \n class StartupTestCase(unittest.TestCase):\n-\n     @property\n     def schema(self):\n         return getSchema()\n@@ -49,8 +48,7 @@ def load_config_text(self, text):\n         # of the directory is checked.  This handles this in a\n         # platform-independent way.\n         schema = self.schema\n-        sio = StringIO(\n-            text.replace("<<INSTANCE_HOME>>", TEMPNAME))\n+        sio = StringIO(text.replace("<<INSTANCE_HOME>>", TEMPNAME))\n         os.mkdir(TEMPNAME)\n         os.mkdir(TEMPVAR)\n         try:\n@@ -63,6 +61,7 @@ def load_config_text(self, text):\n \n     def test_load_config_template(self):\n         import Zope2.utilities\n+\n         base = os.path.dirname(Zope2.utilities.__file__)\n         fn = os.path.join(base, "skel", "etc", "zope.conf.in")\n         f = open(fn)\n@@ -71,21 +70,23 @@ def test_load_config_template(self):\n         self.load_config_text(text)\n \n     def test_environment(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             # instancehome is here since it\'s required\n             instancehome <<INSTANCE_HOME>>\n             <environment>\n               FEARFACTORY rocks\n               NSYNC doesnt\n             </environment>\n-            """)\n+            """\n+        )\n         items = list(conf.environment.items())\n         items.sort()\n-        self.assertEqual(\n-            items, [("FEARFACTORY", "rocks"), ("NSYNC", "doesnt")])\n+        self.assertEqual(items, [("FEARFACTORY", "rocks"), ("NSYNC", "doesnt")])\n \n     def test_zodb_db(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n             <zodb_db main>\n               <filestorage>\n@@ -95,43 +96,56 @@ def test_zodb_db(self):\n                 cache-size 5000\n                 pool-size 7\n             </zodb_db>\n-            """)\n+            """\n+        )\n         self.assertEqual(conf.databases[0].config.cache_size, 5000)\n \n     def test_max_conflict_retries_default(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n-            """)\n+            """\n+        )\n         self.assertEqual(conf.max_conflict_retries, 3)\n \n     def test_max_conflict_retries_explicit(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n             max-conflict-retries 15\n-            """)\n+            """\n+        )\n         self.assertEqual(conf.max_conflict_retries, 15)\n \n     def test_debug_exceptions_default(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n         instancehome <<INSTANCE_HOME>>\n-        """)\n+        """\n+        )\n         self.assertFalse(conf.debug_exceptions)\n \n     def test_debug_exceptions_explicit(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n         instancehome <<INSTANCE_HOME>>\n         debug-exceptions on\n-        """)\n+        """\n+        )\n         self.assertTrue(conf.debug_exceptions)\n \n     def test_default_zpublisher_encoding(self):\n-        conf, dummy = self.load_config_text("""\\\n+        conf, dummy = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n-            """)\n-        self.assertEqual(conf.default_zpublisher_encoding, \'utf-8\')\n+            """\n+        )\n+        self.assertEqual(conf.default_zpublisher_encoding, "utf-8")\n \n-        conf, dummy = self.load_config_text("""\\\n+        conf, dummy = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n             default-zpublisher-encoding iso-8859-15\n-            """)\n-        self.assertEqual(conf.default_zpublisher_encoding, \'iso-8859-15\')\n+            """\n+        )\n+        self.assertEqual(conf.default_zpublisher_encoding, "iso-8859-15")\ndiff --git a/tox.ini b/tox.ini\nindex fa62b55..164bc59 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -7,6 +7,7 @@ envlist =\n     py38,\n     py39,\n     flake8,\n+    black,\n     coverage\n \n skip_missing_interpreters = False\n@@ -44,7 +45,13 @@ commands =\n     coverage report\n \n [testenv:flake8]\n-basepython = python2.7\n+basepython = python3.8\n skip_install = true\n deps = flake8\n-commands = flake8 --doctests src setup.py\n+commands = flake8 --ignore=E203 --max-line-length=88 --doctests src setup.py\n+\n+[testenv:black]\n+basepython = python3.8\n+skip_install = true\n+deps = black\n+commands = black --check src setup.py\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2021-05-11T12:30:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/31d4cbb085d120c366204e7166023f8c25904cc8

isort code style

Files changed:
M .github/workflows/testing.yml
M setup.cfg
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/make.py
M src/plone/recipe/zope2instance/sentry.py
M src/plone/recipe/zope2instance/tests/test_wsgischema.py
M tox.ini

b'diff --git a/.github/workflows/testing.yml b/.github/workflows/testing.yml\nindex 284119d..2657bb0 100644\n--- a/.github/workflows/testing.yml\n+++ b/.github/workflows/testing.yml\n@@ -49,11 +49,14 @@ jobs:\n             ${{ runner.os }}-test\n       - name: Install dependencies\n         run: |\n-          pip install -U pip wheel black\n+          pip install -U pip wheel black isort\n           pip install -r requirements-testing-${{ matrix.zope-version }}.txt\n       - name: Run black code style check\n         run: |\n           black --check src setup.py\n+      - name: Run isort code style check\n+        run: |\n+          isort --check-only --df src setup.py\n       - name: Run Tests\n         run: |\n           zope-testrunner --test-path=src\ndiff --git a/setup.cfg b/setup.cfg\nindex 7f76e71..194ff8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,3 +11,10 @@ universal = 1\n \n [flake8]\n doctests = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex c216405..1e0114d 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -32,9 +32,11 @@\n from time import sleep\n from waitress.wasyncore import dispatcher\n from ZConfig.loader import SchemaLoader\n-from zdaemon.zdctl import ZDCmd, ZDCtlOptions\n+from zdaemon.zdctl import ZDCmd\n+from zdaemon.zdctl import ZDCtlOptions\n from zdaemon.zdoptions import ZDOptions\n from Zope2.Startup.options import ConditionalSchemaParser\n+\n import csv\n import logging\n import os\n@@ -44,8 +46,8 @@\n import socket\n import sys\n import tempfile\n-import xml.sax\n import waitress\n+import xml.sax\n import zdaemon\n \n \n@@ -57,11 +59,12 @@\n     WINDOWS = True\n \n if WINDOWS:\n-    import traceback\n     from pkg_resources import resource_filename\n+    from win32com.shell import shell\n+\n     import pywintypes\n+    import traceback\n     import win32api\n-    from win32com.shell import shell\n     import win32con\n     import win32service\n     import win32serviceutil\ndiff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py\nindex 853537e..6059184 100644\n--- a/src/plone/recipe/zope2instance/make.py\n+++ b/src/plone/recipe/zope2instance/make.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from __future__ import print_function\n+\n from binascii import b2a_base64\n from hashlib import sha1\n from six.moves import input\ndiff --git a/src/plone/recipe/zope2instance/sentry.py b/src/plone/recipe/zope2instance/sentry.py\nindex 80c2912..1a0ad06 100644\n--- a/src/plone/recipe/zope2instance/sentry.py\n+++ b/src/plone/recipe/zope2instance/sentry.py\n@@ -1,6 +1,8 @@\n+from sentry_sdk.integrations.logging import ignore_logger\n+from sentry_sdk.integrations.logging import LoggingIntegration\n+\n import logging\n import sentry_sdk\n-from sentry_sdk.integrations.logging import LoggingIntegration, ignore_logger\n \n \n def sdk_init(global_conf, dsn, level="INFO", event_level="ERROR", ignorelist=""):\ndiff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nindex 82ecb7a..0e71d78 100644\n--- a/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -13,6 +13,7 @@\n ##############################################################################\n \n from plone.recipe.zope2instance.ctl import WSGICtlOptions\n+\n import os\n import tempfile\n import unittest\ndiff --git a/tox.ini b/tox.ini\nindex 164bc59..12f0258 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -8,6 +8,7 @@ envlist =\n     py39,\n     flake8,\n     black,\n+    isort\n     coverage\n \n skip_missing_interpreters = False\n@@ -55,3 +56,9 @@ basepython = python3.8\n skip_install = true\n deps = black\n commands = black --check src setup.py\n+\n+[testenv:isort]\n+basepython = python3.8\n+skip_install = true\n+deps = isort\n+commands = isort --check-only --df src setup.py\n\\ No newline at end of file\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2021-05-11T12:40:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/afb1b4be90891d089f30097d5745857f771708c9

conditional run on Py 3.8

Files changed:
M .github/workflows/testing.yml

b"diff --git a/.github/workflows/testing.yml b/.github/workflows/testing.yml\nindex 2657bb0..73e0d16 100644\n--- a/.github/workflows/testing.yml\n+++ b/.github/workflows/testing.yml\n@@ -47,16 +47,20 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles('requirements-testing-*.txt') }}\n           restore-keys: |\n             ${{ runner.os }}-test\n-      - name: Install dependencies\n-        run: |\n-          pip install -U pip wheel black isort\n-          pip install -r requirements-testing-${{ matrix.zope-version }}.txt\n       - name: Run black code style check\n+        if: ${{ matrix.python-version == '3.8' }}\n         run: |\n+          pip install black\n           black --check src setup.py\n       - name: Run isort code style check\n+        if: ${{ matrix.python-version == '3.8' }}\n         run: |\n+          pip install isort\n           isort --check-only --df src setup.py\n+      - name: Install dependencies\n+        run: |\n+          pip install -U pip wheel \n+          pip install -r requirements-testing-${{ matrix.zope-version }}.txt\n       - name: Run Tests\n         run: |\n           zope-testrunner --test-path=src\n"

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2021-05-11T12:47:21+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/aff140b2cd578276baa3413aff59a054af9e3f15

document changes

Files changed:
A news/175.bugfix

b'diff --git a/news/175.bugfix b/news/175.bugfix\nnew file mode 100644\nindex 0000000..1e621ab\n--- /dev/null\n+++ b/news/175.bugfix\n@@ -0,0 +1 @@\n+Applied code style black and isort with Plone/black rules, includes tox/GH-Actions  [jensens]\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2021-05-11T13:57:28+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/c668d37ecc9cd03f8c8c2b758ea453a0481a237b

Merge pull request #175 from plone/code-style

Code style: black &amp; isort Plone style

Files changed:
A news/175.bugfix
M .github/workflows/testing.yml
M setup.cfg
M setup.py
M src/plone/__init__.py
M src/plone/recipe/__init__.py
M src/plone/recipe/zope2instance/ctl.py
M src/plone/recipe/zope2instance/make.py
M src/plone/recipe/zope2instance/recipe.py
M src/plone/recipe/zope2instance/sentry.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M src/plone/recipe/zope2instance/tests/test_wsgischema.py
M tox.ini

b'diff --git a/.github/workflows/testing.yml b/.github/workflows/testing.yml\nindex 1564004..73e0d16 100644\n--- a/.github/workflows/testing.yml\n+++ b/.github/workflows/testing.yml\n@@ -47,9 +47,19 @@ jobs:\n           key: ${{ runner.os }}-pip-${{ hashFiles(\'requirements-testing-*.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-test\n+      - name: Run black code style check\n+        if: ${{ matrix.python-version == \'3.8\' }}\n+        run: |\n+          pip install black\n+          black --check src setup.py\n+      - name: Run isort code style check\n+        if: ${{ matrix.python-version == \'3.8\' }}\n+        run: |\n+          pip install isort\n+          isort --check-only --df src setup.py\n       - name: Install dependencies\n         run: |\n-          pip install -U pip wheel\n+          pip install -U pip wheel \n           pip install -r requirements-testing-${{ matrix.zope-version }}.txt\n       - name: Run Tests\n         run: |\ndiff --git a/news/175.bugfix b/news/175.bugfix\nnew file mode 100644\nindex 0000000..1e621ab\n--- /dev/null\n+++ b/news/175.bugfix\n@@ -0,0 +1 @@\n+Applied code style black and isort with Plone/black rules, includes tox/GH-Actions  [jensens]\ndiff --git a/setup.cfg b/setup.cfg\nindex 7f76e71..194ff8e 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -11,3 +11,10 @@ universal = 1\n \n [flake8]\n doctests = yes\n+\n+[isort]\n+# black compatible Plone isort rules:\n+profile = black\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\ndiff --git a/setup.py b/setup.py\nindex 0d093cc..9c9a719 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -4,7 +4,7 @@\n \n \n name = "plone.recipe.zope2instance"\n-version = \'6.10.0.dev0\'\n+version = "6.10.0.dev0"\n \n setup(\n     name=name,\n@@ -14,11 +14,10 @@\n     author="Hanno Schlichting",\n     author_email="hanno@hannosch.eu",\n     description="Buildout recipe for creating a Zope instance",\n-    long_description=((open(\'README.rst\').read() + \'\\n\' +\n-                       open(\'CHANGES.rst\').read())),\n+    long_description=((open("README.rst").read() + "\\n" + open("CHANGES.rst").read())),\n     license="ZPL 2.1",\n     keywords="zope buildout",\n-    url=\'https://github.com/plone/plone.recipe.zope2instance\',\n+    url="https://github.com/plone/plone.recipe.zope2instance",\n     classifiers=[\n         "Development Status :: 6 - Mature",\n         "Framework :: Buildout",\n@@ -40,46 +39,46 @@\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: Implementation :: CPython",\n     ],\n-    packages=find_packages(\'src\'),\n+    packages=find_packages("src"),\n     include_package_data=True,\n-    package_dir={\'\': \'src\'},\n-    namespace_packages=[\'plone\', \'plone.recipe\'],\n-    python_requires=\'>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*\',\n+    package_dir={"": "src"},\n+    namespace_packages=["plone", "plone.recipe"],\n+    python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*",\n     install_requires=[\n-        \'zc.buildout\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zc.recipe.egg\',\n-        \'Zope >= 4.0b1\',\n-        \'ZODB >= 5.1.1\',\n-        \'ZEO\',\n-        \'waitress >= 1.2.0\',\n-        \'Paste\',\n-        \'python-dotenv\',\n+        "zc.buildout",\n+        "setuptools",\n+        "six",\n+        "zc.recipe.egg",\n+        "Zope >= 4.0b1",\n+        "ZODB >= 5.1.1",\n+        "ZEO",\n+        "waitress >= 1.2.0",\n+        "Paste",\n+        "python-dotenv",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'zope.testrunner\',\n-            \'sentry-sdk\',\n+        "test": [\n+            "zope.testrunner",\n+            "sentry-sdk",\n         ],\n-        \'sentry\': [\n-            \'sentry-sdk\',\n+        "sentry": [\n+            "sentry-sdk",\n+        ],\n+        "profile": [\n+            "repoze.profile",\n         ],\n-        \'profile\': [\n-            \'repoze.profile\',\n-        ]\n     },\n     zip_safe=False,\n     entry_points={\n-        \'zc.buildout\': [\'default = %s.recipe:Recipe\' % name],\n-        \'paste.server_runner\': [\n-            \'main=plone.recipe.zope2instance.ctl:serve_paste\',\n+        "zc.buildout": ["default = %s.recipe:Recipe" % name],\n+        "paste.server_runner": [\n+            "main=plone.recipe.zope2instance.ctl:serve_paste",\n         ],\n-        \'paste.server_factory\': [\n-            \'main=plone.recipe.zope2instance.ctl:server_factory\',\n+        "paste.server_factory": [\n+            "main=plone.recipe.zope2instance.ctl:server_factory",\n         ],\n-        \'paste.filter_factory\': [\n-            \'sentry=plone.recipe.zope2instance.sentry:sdk_init\',\n+        "paste.filter_factory": [\n+            "sentry=plone.recipe.zope2instance.sentry:sdk_init",\n         ],\n-        },\n+    },\n )\ndiff --git a/src/plone/__init__.py b/src/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/src/plone/__init__.py\n+++ b/src/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/recipe/__init__.py b/src/plone/recipe/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/src/plone/recipe/__init__.py\n+++ b/src/plone/recipe/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/src/plone/recipe/zope2instance/ctl.py b/src/plone/recipe/zope2instance/ctl.py\nindex 560e1e0..1e0114d 100644\n--- a/src/plone/recipe/zope2instance/ctl.py\n+++ b/src/plone/recipe/zope2instance/ctl.py\n@@ -32,9 +32,11 @@\n from time import sleep\n from waitress.wasyncore import dispatcher\n from ZConfig.loader import SchemaLoader\n-from zdaemon.zdctl import ZDCmd, ZDCtlOptions\n+from zdaemon.zdctl import ZDCmd\n+from zdaemon.zdctl import ZDCtlOptions\n from zdaemon.zdoptions import ZDOptions\n from Zope2.Startup.options import ConditionalSchemaParser\n+\n import csv\n import logging\n import os\n@@ -44,12 +46,12 @@\n import socket\n import sys\n import tempfile\n-import xml.sax\n import waitress\n+import xml.sax\n import zdaemon\n \n \n-if sys.version_info > (3, ):\n+if sys.version_info > (3,):\n     basestring = str\n \n WINDOWS = False\n@@ -57,18 +59,20 @@\n     WINDOWS = True\n \n if WINDOWS:\n-    import traceback\n     from pkg_resources import resource_filename\n+    from win32com.shell import shell\n+\n     import pywintypes\n+    import traceback\n     import win32api\n-    from win32com.shell import shell\n     import win32con\n     import win32service\n     import win32serviceutil\n \n     ERR_MSG_NOT_ADMIN = (\n         \'ERROR: You are not member of the "Administrators" group, \'\n-        \'or you have not run the shell as Administrator.\')\n+        "or you have not run the shell as Administrator."\n+    )\n \n \n class ZopeCtlOptions(ZDCtlOptions):\n@@ -103,8 +107,7 @@ def __init__(self):\n         self.ZopeOptions.__init__(self)\n         ZDCtlOptions.__init__(self)\n         self.add("interactive", None, "i", "interactive", flag=1)\n-        self.add("default_to_interactive", "runner.default_to_interactive",\n-                 default=1)\n+        self.add("default_to_interactive", "runner.default_to_interactive", default=1)\n \n     def realize(self, *args, **kw):\n         # Before ZConfig interprets the Zope configuration, we need to make\n@@ -112,12 +115,13 @@ def realize(self, *args, **kw):\n         # This value is used for storing ZEO persistent caches in case\n         # the var option was not also specified. Otherwise it is not used\n         # and setting it does not affect anything.\n-        os.environ.update({\'ZEO_TMP\': tempfile.gettempdir()})\n+        os.environ.update({"ZEO_TMP": tempfile.gettempdir()})\n \n         self.ZopeOptions.realize(self, *args, **kw)\n         # Additional checking of user option; set uid and gid\n         if self.user is not None:\n             import pwd\n+\n             try:\n                 uid = int(self.user)\n             except ValueError:\n@@ -145,7 +149,7 @@ def realize(self, *args, **kw):\n             self.program = config.runner.program\n         else:\n             self.program = [os.path.join(self.directory, "bin", "runzope")]\n-        if \'-s\' in args:\n+        if "-s" in args:\n             # set by command line option\n             # or by zdaemon.zdoptions - we need\n             # to override the latter case\n@@ -154,9 +158,8 @@ def realize(self, *args, **kw):\n             self.sockname = config.runner.socket_name\n         else:\n             self.sockname = os.path.join(self.clienthome, "zopectlsock")\n-        self.python = os.environ.get(\'PYTHON\', config.python) or sys.executable\n-        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__),\n-                                  "zdrun.py")\n+        self.python = os.environ.get("PYTHON", config.python) or sys.executable\n+        self.zdrun = os.path.join(os.path.dirname(zdaemon.__file__), "zdrun.py")\n \n         self.exitcodes = [0, 2]\n \n@@ -184,6 +187,7 @@ def _conditional_load(self):\n \n try:\n     import ZServer  # noqa\n+\n     HAS_ZSERVER = True\n except ImportError:\n     HAS_ZSERVER = False\n@@ -197,7 +201,7 @@ class ZServerCtlOptions(ZopeCtlOptions, ZopeOptions):\n \n class WSGICtlOptions(ZopeCtlOptions, ZDOptions):\n     schemadir = os.path.dirname(os.path.abspath(__file__))\n-    schemafile = \'wsgischema.xml\'\n+    schemafile = "wsgischema.xml"\n \n \n class ZopeCmd(ZDCmd):\n@@ -208,10 +212,10 @@ class ZopeCmd(ZDCmd):\n \n         # printable representations of the Windows service states\n         service_state_map = {\n-            win32service.SERVICE_START_PENDING: \'starting\',\n-            win32service.SERVICE_RUNNING:       \'started\',\n-            win32service.SERVICE_STOP_PENDING:  \'stopping\',\n-            win32service.SERVICE_STOPPED:       \'stopped\',\n+            win32service.SERVICE_START_PENDING: "starting",\n+            win32service.SERVICE_RUNNING: "started",\n+            win32service.SERVICE_STOP_PENDING: "stopping",\n+            win32service.SERVICE_STOPPED: "stopped",\n         }\n \n         def is_user_admin(self):\n@@ -230,16 +234,16 @@ def _get_pid_from_pidfile(self):\n                         return int(f.read().strip())\n                     except ValueError:\n                         # pid file for any reason empty or corrupt\n-                        print(\'ERROR: Corrupt pid file: {}\'.format(fname))\n+                        print("ERROR: Corrupt pid file: {}".format(fname))\n                         return 0\n             else:\n                 return 0\n \n         def _get_service_name(self):\n-            return \'Zope%s\' % str(hash(self.options.directory.lower()))\n+            return "Zope%s" % str(hash(self.options.directory.lower()))\n \n         def _get_service_status(self):\n-            """ Return status of Windows service, or None if not installed.\n+            """Return status of Windows service, or None if not installed.\n \n             Possible status values are:\n \n@@ -263,31 +267,25 @@ def _get_service_status(self):\n             return status\n \n         def _get_service_class_string(self):\n-            return \'%s.Service\' % resource_filename(\n-                \'nt_svcutils\', \'service\')\n+            return "%s.Service" % resource_filename("nt_svcutils", "service")\n \n-        def _set_winreg_key(self, name, value, keyname=\'PythonClass\'):\n+        def _set_winreg_key(self, name, value, keyname="PythonClass"):\n             # see "collective.buildout.cluster.ClusterBase"\n             # TODO: use Python module "_winreg"\n \n             def open_key(keyname=None):\n-                keypath = (\'System\\\\CurrentControlSet\\\\Services\\\\\' +\n-                           self._get_service_name())\n+                keypath = (\n+                    "System\\\\CurrentControlSet\\\\Services\\\\" + self._get_service_name()\n+                )\n                 if keyname:\n-                    keypath += (\'\\\\\' + keyname)\n+                    keypath += "\\\\" + keyname\n                 return win32api.RegOpenKey(\n-                    win32con.HKEY_LOCAL_MACHINE,\n-                    keypath,\n-                    0,\n-                    win32con.KEY_ALL_ACCESS)\n+                    win32con.HKEY_LOCAL_MACHINE, keypath, 0, win32con.KEY_ALL_ACCESS\n+                )\n \n             key = open_key(keyname)\n             try:\n-                win32api.RegSetValueEx(key,\n-                                       name,\n-                                       0,\n-                                       win32con.REG_SZ,\n-                                       value)\n+                win32api.RegSetValueEx(key, name, 0, win32con.REG_SZ, value)\n             finally:\n                 win32api.RegCloseKey(key)\n \n@@ -300,7 +298,7 @@ def do_install(self, arg):\n \n             status = self._get_service_status()\n             if status is not None:\n-                print(\'ERROR: Zope is already installed as a Windows service.\')\n+                print("ERROR: Zope is already installed as a Windows service.")\n                 return\n \n             # TODO:\n@@ -313,18 +311,17 @@ def do_install(self, arg):\n \n             class_string = self._get_service_class_string()\n             name = self._get_service_name()\n-            display_name = \'Zope instance at \' + self.options.directory\n+            display_name = "Zope instance at " + self.options.directory\n \n-            if arg.lower() == \'auto\':\n+            if arg.lower() == "auto":\n                 start_type = win32service.SERVICE_AUTO_START\n             else:\n                 start_type = win32service.SERVICE_DEMAND_START\n \n             try:\n-                win32serviceutil.InstallService(class_string,\n-                                                name,\n-                                                display_name,\n-                                                start_type)\n+                win32serviceutil.InstallService(\n+                    class_string, name, display_name, start_type\n+                )\n \n                 # put info in registry for the Windows Service class to use:\n \n@@ -333,17 +330,13 @@ def do_install(self, arg):\n                 #     \'D:\\\\local\\\\Plone-4.0b5\\\\bin\\\\instance-script.py\'\n                 # but the Windows Service must launch\n                 #     \'D:\\\\local\\\\Plone-4.0b5\\\\bin\\\\instance.exe\'\n-                script_suffix = \'-script.py\'\n+                script_suffix = "-script.py"\n                 pos = instance_script.rfind(script_suffix)\n-                instance_exe = instance_script[:pos] + \'.exe\'\n+                instance_exe = instance_script[:pos] + ".exe"\n \n+                self._set_winreg_key("command", \'"%s" console\' % instance_exe)\n                 self._set_winreg_key(\n-                    \'command\',\n-                    \'"%s" console\' % instance_exe\n-                )\n-                self._set_winreg_key(\n-                    \'pid_filename\',\n-                    self.options.configroot.pid_filename\n+                    "pid_filename", self.options.configroot.pid_filename\n                 )\n \n                 print(\'Installed Zope as Windows Service "{}".\'.format(name))\n@@ -356,12 +349,12 @@ def do_install(self, arg):\n \n         def help_install(self):\n             print(\n-                \'install -- Install Zope as a Windows service that must be \'\n-                \'manually started.\'\n+                "install -- Install Zope as a Windows service that must be "\n+                "manually started."\n             )\n             print(\n-                \'install auto -- Install Zope as a Windows service that \'\n-                \'starts at system startup.\'\n+                "install auto -- Install Zope as a Windows service that "\n+                "starts at system startup."\n             )\n \n         def do_start(self, arg):\n@@ -372,13 +365,13 @@ def do_start(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as Windows service.\')\n+                print("ERROR: Zope is not installed as Windows service.")\n                 return\n             elif status == win32service.SERVICE_START_PENDING:\n-                print(\'ERROR: The Zope Windows service is about to start.\')\n+                print("ERROR: The Zope Windows service is about to start.")\n                 return\n             elif status == win32service.SERVICE_RUNNING:\n-                print(\'ERROR: The Zope Windows service is already running.\')\n+                print("ERROR: The Zope Windows service is already running.")\n                 return\n             name = self._get_service_name()\n             try:\n@@ -395,10 +388,10 @@ def do_restart(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as Windows service.\')\n+                print("ERROR: Zope is not installed as Windows service.")\n                 return\n             elif status == win32service.SERVICE_STOPPED:\n-                print(\'ERROR: The Zope Windows service has not been started.\')\n+                print("ERROR: The Zope Windows service has not been started.")\n                 return\n             name = self._get_service_name()\n             try:\n@@ -415,10 +408,10 @@ def do_stop(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as Windows service.\')\n+                print("ERROR: Zope is not installed as Windows service.")\n                 return\n             elif status == win32service.SERVICE_STOPPED:\n-                print(\'ERROR: The Zope Windows service has not been started.\')\n+                print("ERROR: The Zope Windows service has not been started.")\n                 return\n             name = self._get_service_name()\n             try:\n@@ -435,13 +428,10 @@ def do_remove(self, arg):\n \n             status = self._get_service_status()\n             if status is None:\n-                print(\'ERROR: Zope is not installed as a Windows service.\')\n+                print("ERROR: Zope is not installed as a Windows service.")\n                 return\n             elif status is not win32service.SERVICE_STOPPED:\n-                print(\n-                    \'ERROR: Please stop the Windows service before \'\n-                    \'removing it.\'\n-                )\n+                print("ERROR: Please stop the Windows service before " "removing it.")\n                 return\n \n             ret_code = 0\n@@ -477,33 +467,36 @@ def get_status(self):\n             else:\n                 self.zd_up = 0\n \n-        def do_status(self, arg=\'\'):\n-            if arg not in (\'\', \'-l\'):\n+        def do_status(self, arg=""):\n+            if arg not in ("", "-l"):\n                 print(\'ERROR: The only valid option is "-l".\')\n                 return\n             service_status = self._get_service_status()\n             if service_status is None:\n-                print(\'Zope is not installed as a Windows service.\')\n+                print("Zope is not installed as a Windows service.")\n             else:\n                 name = self._get_service_name()\n                 state = self.service_state_map.get(\n-                    service_status, \'in an unknown state\')\n-                print(\'Zope is installed as Windows service "%s", \'\n-                      \'this service is currently %s.\' % (name, state))\n-            if arg == \'-l\' and self.zd_status:\n+                    service_status, "in an unknown state"\n+                )\n+                print(\n+                    \'Zope is installed as Windows service "%s", \'\n+                    "this service is currently %s." % (name, state)\n+                )\n+            if arg == "-l" and self.zd_status:\n                 print(self.zd_status)\n \n             # TODO: what about "self.zd_up"?\n \n         def help_status(self):\n-            print(\'status -- Print status of the Windows service.\')\n+            print("status -- Print status of the Windows service.")\n             print(\n-                \'status -l -- Print status of the Windows service, \'\n-                \'and raw status output.\'\n+                "status -l -- Print status of the Windows service, "\n+                "and raw status output."\n             )\n \n         def help_EOF(self):\n-            print(\'To quit, type CTRL+Z or use the quit command.\')\n+            print("To quit, type CTRL+Z or use the quit command.")\n \n     # end of "if WINDOWS"\n     else:\n@@ -544,11 +537,9 @@ def do_start(self, arg):\n                 args += self._get_override("-s", "sockname")\n                 args += self._get_override("-u", "user")\n                 if self.options.umask:\n-                    args += self._get_override("-m", "umask",\n-                                               oct(self.options.umask))\n+                    args += self._get_override("-m", "umask", oct(self.options.umask))\n                 args += self._get_override(\n-                    "-x", "exitcodes",\n-                    ",".join(map(str, self.options.exitcodes))\n+                    "-x", "exitcodes", ",".join(map(str, self.options.exitcodes))\n                 )\n                 args += self._get_override("-z", "directory")\n \n@@ -559,22 +550,22 @@ def do_start(self, arg):\n                 else:\n                     flag = os.P_WAIT\n                 env = self.environment().copy()\n-                env.update({\'ZMANAGED\': \'1\', })\n+                env.update(\n+                    {\n+                        "ZMANAGED": "1",\n+                    }\n+                )\n                 os.spawnvpe(flag, args[0], args, env)\n             elif not self.zd_pid:\n                 self.send_action("start")\n             else:\n-                print(\'daemon process already running; pid={}\'.format(\n-                    self.zd_pid))\n+                print("daemon process already running; pid={}".format(self.zd_pid))\n                 return\n \n             def cond(n=0):\n                 return self.zd_pid\n \n-            self.awhile(\n-                cond,\n-                \'daemon process started, pid=%(zd_pid)d\'\n-            )\n+            self.awhile(cond, "daemon process started, pid=%(zd_pid)d")\n \n     def __getattr__(self, name):\n         """\n@@ -582,13 +573,11 @@ def __getattr__(self, name):\n         """\n         if not name.startswith("do_"):\n             raise AttributeError(name)\n-        data = list(pkg_resources.iter_entry_points(\n-            "zopectl.command", name=name[3:]))\n+        data = list(pkg_resources.iter_entry_points("zopectl.command", name=name[3:]))\n         if not data:\n             raise AttributeError(name)\n         if len(data) > 1:\n-            sys.stderr.write(\n-                "Warning: multiple entry points found for command")\n+            sys.stderr.write("Warning: multiple entry points found for command")\n             return\n         func = data[0].load()\n         if not callable(func):\n@@ -615,28 +604,31 @@ def go(arg):\n             # so that we can split on spaces while respecting quotes.\n             tup = self.options.args\n             if len(tup) == 1:\n-                tup = next(csv.reader(tup, delimiter=\' \'))\n+                tup = next(csv.reader(tup, delimiter=" "))\n \n             # Remove -c and add command name as sys.argv[0]\n-            cmd = [\'import sys\',\n-                   \'sys.argv.pop()\',\n-                   \'sys.argv.append(r\\\'%s\\\')\' % entry_point.name\n-                   ]\n+            cmd = [\n+                "import sys",\n+                "sys.argv.pop()",\n+                "sys.argv.append(r\'%s\')" % entry_point.name,\n+            ]\n             if len(tup) > 1:\n                 argv = tup[1:]\n                 for a in argv:\n-                    cmd.append(\'sys.argv.append(r\\\'%s\\\')\' % a)\n-            cmd.extend([\n-                \'import pkg_resources\',\n-                \'import Zope2\',\n-                \'func=pkg_resources.EntryPoint.parse(\\\'%s\\\').load(False)\'\n-                % entry_point,\n-                \'app=Zope2.app()\',\n-                \'func(app, sys.argv[1:])\',\n-            ])\n-            cmdline = self.get_startup_cmd(\n-                self.options.python, \' ; \'.join(cmd))\n+                    cmd.append("sys.argv.append(r\'%s\')" % a)\n+            cmd.extend(\n+                [\n+                    "import pkg_resources",\n+                    "import Zope2",\n+                    "func=pkg_resources.EntryPoint.parse(\'%s\').load(False)"\n+                    % entry_point,\n+                    "app=Zope2.app()",\n+                    "func(app, sys.argv[1:])",\n+                ]\n+            )\n+            cmdline = self.get_startup_cmd(self.options.python, " ; ".join(cmd))\n             self._exitstatus = os.system(cmdline)\n+\n         return go\n \n     def environment(self):\n@@ -647,7 +639,7 @@ def environment(self):\n         except AttributeError:\n             shome = None\n             shome  # pyflakes\n-        env.update({\'INSTANCE_HOME\': configroot.instancehome})\n+        env.update({"INSTANCE_HOME": configroot.instancehome})\n         return env\n \n     def get_startup_cmd(self, python, more, pyflags=""):\n@@ -668,50 +660,52 @@ def get_startup_cmd(self, python, more, pyflags=""):\n                 "configure(r\'%s\'); "\n                 "import Zope2; app=Zope2.app(); "\n             )\n-        cmdline = (\n-            \'"%s" %s "%s" %s -c "%s\' % (\n-                python, pyflags,\n-                self.options.interpreter,\n-                pyflags,\n-                cmd % self.options.configfile,\n-            )\n+        cmdline = \'"%s" %s "%s" %s -c "%s\' % (\n+            python,\n+            pyflags,\n+            self.options.interpreter,\n+            pyflags,\n+            cmd % self.options.configfile,\n         )\n \n         if not self.options.no_request:\n             cmdline += (\n-                \'from Testing.makerequest import makerequest; \'\n-                \'app = makerequest(app); \'\n+                "from Testing.makerequest import makerequest; "\n+                "app = makerequest(app); "\n                 # REQUEST.traverse needs this but no reason not to set\n                 # this even if we\'re not traversing to an object\n-                \'app.REQUEST[\\\'PARENTS\\\'] = [app]; \'\n+                "app.REQUEST[\'PARENTS\'] = [app]; "\n                 # five.globalrequest does setRequest at IPubStart\n                 # which is called outside of REQUEST.traverse\n-                \'from zope.globalrequest import setRequest ;\'\n-                \'setRequest(app.REQUEST); \')\n+                "from zope.globalrequest import setRequest ;"\n+                "setRequest(app.REQUEST); "\n+            )\n         # Need to login at different points depending on REQUEST.traverse\n         login_cmdline = (\n-            \'from AccessControl.SpecialUsers import system as user; \'\n-            \'from AccessControl.SecurityManagement import newSecurityManager; \'\n-            \'newSecurityManager(None, user); \')\n+            "from AccessControl.SpecialUsers import system as user; "\n+            "from AccessControl.SecurityManagement import newSecurityManager; "\n+            "newSecurityManager(None, user); "\n+        )\n         if self.options.object_path:\n             if not self.options.no_request:\n                 cmdline += (\n                     # populate the request, setSite, skin, theme, etc.\n-                    \'app.REQUEST.traverse(r\\\'%s\\\'); \'\n-                    % self.options.object_path)\n+                    "app.REQUEST.traverse(r\'%s\'); "\n+                    % self.options.object_path\n+                )\n             if not self.options.no_login:\n                 # REQUEST.traverse will do setSecurityManager with Anonymous\n                 # so we login after\n                 cmdline += login_cmdline\n             cmdline += (\n-                \'obj = app.restrictedTraverse(r\\\'%s\\\'); \'\n-                % self.options.object_path)\n+                "obj = app.restrictedTraverse(r\'%s\'); " % self.options.object_path\n+            )\n         elif not self.options.no_login:\n             # Login if we\'re not getting a object and we don\'t need to\n             # worry about REQUEST.traverse\n             cmdline += login_cmdline\n \n-        cmdline = cmdline + more + \'\\"\'\n+        cmdline = cmdline + more + \'"\'\n         if WINDOWS:\n             # entire command line must be quoted\n             # as well as the components\n@@ -720,7 +714,8 @@ def get_startup_cmd(self, python, more, pyflags=""):\n             return cmdline\n \n     def help_startup_command(self):\n-        print("""\\\n+        print(\n+            """\\\n     Also sets up a REQUEST, logs in the\n     AccessControl.SpecialUsers.system user, and may traverse\n     to an object, such as a CMF portal.  This environment set\n@@ -729,7 +724,8 @@ def help_startup_command(self):\n     -L/--no-login -- do not login the system user.\n     -O/--object-path <path> -- Traverse to <path> from the app\n                                and make available as `obj`.\n-    Example usage: bin/instance -RLOPlone/front-page debug""")\n+    Example usage: bin/instance -RLOPlone/front-page debug"""\n+        )\n \n     def do_run(self, arg):\n         # If the command line was something like\n@@ -747,7 +743,7 @@ def do_run(self, arg):\n         # If that\'s the case, we\'ll use csv to do the parsing\n         # so that we can split on spaces while respecting quotes.\n         if len(self.options.args) == 1:\n-            tup = next(csv.reader(self.options.args, delimiter=\' \'))[1:]\n+            tup = next(csv.reader(self.options.args, delimiter=" "))[1:]\n         else:\n             tup = self.options.args[1:]\n \n@@ -764,14 +760,16 @@ def do_run(self, arg):\n         ]\n         if len(tup) > 1:\n             argv = tup[1:]\n-            cmd.append(\'[sys.argv.append(x) for x in %s]\' % argv)\n-        cmd.extend([\n-            "f = open(%r)" % script,\n-            "src = f.read()",\n-            "f.close()",\n-            "code = compile(src, filename=%r, mode=\'exec\')" % script,\n-            "exec(code)",\n-        ])\n+            cmd.append("[sys.argv.append(x) for x in %s]" % argv)\n+        cmd.extend(\n+            [\n+                "f = open(%r)" % script,\n+                "src = f.read()",\n+                "f.close()",\n+                "code = compile(src, filename=%r, mode=\'exec\')" % script,\n+                "exec(code)",\n+            ]\n+        )\n         cmdline = self.get_startup_cmd(self.options.python, "; ".join(cmd))\n \n         self._exitstatus = os.system(cmdline)\n@@ -787,9 +785,11 @@ def do_console(self, arg):\n         self.do_foreground(arg, debug=False)\n \n     def help_console(self):\n-        print("""\\\n+        print(\n+            """\\\n console -- Run the program in the console.\n-    In contrast to foreground this does not turn on debug mode.""")\n+    In contrast to foreground this does not turn on debug mode."""\n+        )\n \n     def do_debug(self, arg):\n         # `-c` disables the PYTHONSTARTUP feature; load it explicitly\n@@ -805,10 +805,12 @@ def do_debug(self, arg):\n         cmdline = self.get_startup_cmd(\n             self.options.python,\n             interactive_startup % exec_call,\n-            pyflags=\'-i\',\n+            pyflags="-i",\n+        )\n+        print(\n+            \'Starting debugger (the name "app" is bound to the top-level \'\n+            "Zope object)"\n         )\n-        print(\'Starting debugger (the name "app" is bound to the top-level \'\n-              \'Zope object)\')\n         os.system(cmdline)\n \n     def help_debug(self):\n@@ -821,34 +823,35 @@ def do_foreground(self, arg, debug=True):\n         pid = self.zd_pid\n         if pid:\n             print(\n-                \'The program seems already to be running. If you believe not, \'\n-                \'check for dangling .pid and .lock files in var/.\'\n+                "The program seems already to be running. If you believe not, "\n+                "check for dangling .pid and .lock files in var/."\n             )\n             return\n \n         import subprocess\n+\n         env = self.environment()\n         program = self.options.program\n         local_additions = []\n \n         if debug:\n             if self.options.wsgi:\n-                debug_switch = \'-d\'\n-                if \'PYTHONWARNINGS\' not in env:\n-                    env[\'PYTHONWARNINGS\'] = \'on\'\n+                debug_switch = "-d"\n+                if "PYTHONWARNINGS" not in env:\n+                    env["PYTHONWARNINGS"] = "on"\n             else:\n-                debug_switch = \'-X\'\n+                debug_switch = "-X"\n             if not program.count(debug_switch):\n                 local_additions += [debug_switch]\n-            if not program.count(\'debug-mode=on\'):\n-                local_additions += [\'debug-mode=on\']\n+            if not program.count("debug-mode=on"):\n+                local_additions += ["debug-mode=on"]\n             program.extend(local_additions)\n \n         if WINDOWS:\n             # The outer quotes were causing\n             # "WindowsError: [Error 87] The parameter is incorrect"\n             # command = zopectl.quote_command(program)\n-            command = \' \'.join([\'"%s"\' % x for x in program])\n+            command = " ".join([\'"%s"\' % x for x in program])\n         else:\n             command = program\n \n@@ -866,11 +869,13 @@ def do_foreground(self, arg, debug=True):\n             os.execve(program[0], command, env)\n \n     def do_test(self, arg):\n-        print("The test command is no longer supported. Please use a "\n-              "zc.recipe.testrunner section in your buildout config file "\n-              "to get a test runner for your environment. Most often you "\n-              "will name the section `test` and can run tests via: "\n-              "bin/test -s <my.package>")\n+        print(\n+            "The test command is no longer supported. Please use a "\n+            "zc.recipe.testrunner section in your buildout config file "\n+            "to get a test runner for your environment. Most often you "\n+            "will name the section `test` and can run tests via: "\n+            "bin/test -s <my.package>"\n+        )\n         return\n \n     def do_adduser(self, arg):\n@@ -879,16 +884,19 @@ def do_adduser(self, arg):\n         except Exception:\n             print("usage: adduser <name> <password>")\n             return\n-        cmdline = self.get_startup_cmd(\n-            self.options.python,\n-            \'import Zope2; \'\n-            \'app = Zope2.app(); \'\n-            \'result = app.acl_users._doAddUser(\'\n-            \'\\\'%s\\\', \\\'%s\\\', [\\\'Manager\\\'], []); \'\n-            \'import transaction; \'\n-            \'transaction.commit(); \'\n-            \'print(\\\'Created user:\\\', result)\'\n-        ) % (name, password)\n+        cmdline = (\n+            self.get_startup_cmd(\n+                self.options.python,\n+                "import Zope2; "\n+                "app = Zope2.app(); "\n+                "result = app.acl_users._doAddUser("\n+                "\'%s\', \'%s\', [\'Manager\'], []); "\n+                "import transaction; "\n+                "transaction.commit(); "\n+                "print(\'Created user:\', result)",\n+            )\n+            % (name, password)\n+        )\n         os.system(cmdline)\n \n     def help_adduser(self):\n@@ -897,11 +905,10 @@ def help_adduser(self):\n \n def serve_paste(app, global_conf, **kw):\n     sockets = []\n-    if \'prebound\' in global_conf:\n-        filenos = global_conf[\'prebound\'].split()\n+    if "prebound" in global_conf:\n+        filenos = global_conf["prebound"].split()\n         for fileno in filenos:\n-            _sock = socket.fromfd(\n-                int(fileno), socket.AF_INET, socket.SOCK_STREAM)\n+            _sock = socket.fromfd(int(fileno), socket.AF_INET, socket.SOCK_STREAM)\n             if six.PY2:\n                 sock = socket.socket()\n                 sock._sock = _sock\n@@ -918,10 +925,10 @@ def serve_paste(app, global_conf, **kw):\n \n \n def server_factory(global_conf, **kws):\n-    if \'fast-listen\' in kws:\n+    if "fast-listen" in kws:\n         filenos = []\n-        for host_port in kws[\'fast-listen\'].split():\n-            host, port = host_port.split(\':\')\n+        for host_port in kws["fast-listen"].split():\n+            host, port = host_port.split(":")\n             prebound = dispatcher()\n             prebound.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n             prebound.set_reuse_addr()\n@@ -931,19 +938,19 @@ def server_factory(global_conf, **kws):\n                 sleep(1)\n             filenos.append(str(prebound.socket.fileno()))\n         global_conf.update(prebound=" ".join(filenos))\n-        del kws[\'fast-listen\']\n-    del kws[\'paste.server_factory\']\n+        del kws["fast-listen"]\n+    del kws["paste.server_factory"]\n \n     def serve(app):\n         return serve_paste(app, global_conf, **kws)\n+\n     return serve\n \n \n def main(args=None):\n-    """Customized entry point for launching Zope without forking other processes\n-    """\n+    """Customized entry point for launching Zope without forking other processes"""\n \n-    if \'--wsgi\' in args or \'-w\' in args:\n+    if "--wsgi" in args or "-w" in args:\n         options = WSGICtlOptions()\n     else:\n         options = ZServerCtlOptions()\n@@ -951,41 +958,44 @@ def main(args=None):\n     options.add(name="no_request", short="R", long="no-request", flag=1)\n     options.add(name="no_login", short="L", long="no-login", flag=1)\n     options.add(name="object_path", short="O:", long="object-path=")\n-    options.add(name="wsgi", short=\'w:\', long=\'wsgi=\')\n+    options.add(name="wsgi", short="w:", long="wsgi=")\n     # Realize arguments and set documentation which is used in the -h option\n     options.realize(args, doc=__doc__)\n \n-    load_dotenv(os.path.join(options.directory, \'..\', \'..\', \'.env\'))\n+    load_dotenv(os.path.join(options.directory, "..", "..", ".env"))\n \n-    if (os.environ.get(\'PLONE_ENV\')):\n-        PLONE_ENV = os.environ.get(\'PLONE_ENV\')\n-        load_dotenv(os.path.join(options.directory,\n-                                 \'..\', \'..\', \'.env.{}\'.format(PLONE_ENV)))\n+    if os.environ.get("PLONE_ENV"):\n+        PLONE_ENV = os.environ.get("PLONE_ENV")\n+        load_dotenv(\n+            os.path.join(options.directory, "..", "..", ".env.{}".format(PLONE_ENV))\n+        )\n \n     # Run the right command depending on whether we have ZServer\n-    options.interpreter = os.path.join(options.directory, \'bin\', \'interpreter\')\n-    if sys.platform == \'win32\':\n-        options.interpreter += \'-script.py\'\n+    options.interpreter = os.path.join(options.directory, "bin", "interpreter")\n+    if sys.platform == "win32":\n+        options.interpreter += "-script.py"\n \n-    if options.wsgi is not None and \\\n-       options.wsgi.lower() in (\'off\', \'false\', \'0\'):\n+    if options.wsgi is not None and options.wsgi.lower() in ("off", "false", "0"):\n         options.wsgi = None\n \n     if six.PY2 and not options.wsgi:\n         # only use zserver in Python 2 and if wsgi is disabled\n         from ZServer.Zope2.Startup import run\n-        script = os.path.join(os.path.dirname(run.__file__), \'run.py\')\n+\n+        script = os.path.join(os.path.dirname(run.__file__), "run.py")\n         options.program = [\n-            options.python, options.interpreter, script, \'-C\',\n-            options.configfile\n+            options.python,\n+            options.interpreter,\n+            script,\n+            "-C",\n+            options.configfile,\n         ]\n     else:\n         # wsgi is the default\n         from Zope2.Startup import serve\n-        script = os.path.join(os.path.dirname(serve.__file__), \'serve.py\')\n-        options.program = [\n-            options.python, options.interpreter, script, options.wsgi\n-        ]\n+\n+        script = os.path.join(os.path.dirname(serve.__file__), "serve.py")\n+        options.program = [options.python, options.interpreter, script, options.wsgi]\n \n         # Try to find the log file from the WSGI configuration\n         # Requires loading the logging configuration from the WSGI config\n@@ -1007,8 +1017,8 @@ def main(args=None):\n     c = ZopeCmd(options)\n \n     # Mix in any additional commands supplied by other packages:\n-    for ep in iter_entry_points(\'plone.recipe.zope2instance.ctl\'):\n-        func_name = \'do_\' + ep.name\n+    for ep in iter_entry_points("plone.recipe.zope2instance.ctl"):\n+        func_name = "do_" + ep.name\n         func = ep.load()\n         # avoid overwriting the standard commands\n         if func_name not in dir(c):\n@@ -1028,7 +1038,7 @@ def main(args=None):\n     # But it\'s generated by setuptools, and doesn\'t have that functionality.\n \n     if options.args:\n-        c.onecmd(\' \'.join(options.args))\n+        c.onecmd(" ".join(options.args))\n         sys.exit(min(c._exitstatus, 1))\n \n     # If no command was specified: enter interactive mode.\n@@ -1037,6 +1047,6 @@ def main(args=None):\n         import readline  # noqa\n     except ImportError:\n         pass\n-    print(\'Program: {}\'.format(\' \'.join(options.program)))\n+    print("Program: {}".format(" ".join(options.program)))\n     c.do_status()\n     c.cmdloop()\ndiff --git a/src/plone/recipe/zope2instance/make.py b/src/plone/recipe/zope2instance/make.py\nindex 2132544..6059184 100644\n--- a/src/plone/recipe/zope2instance/make.py\n+++ b/src/plone/recipe/zope2instance/make.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from __future__ import print_function\n+\n from binascii import b2a_base64\n from hashlib import sha1\n from six.moves import input\n@@ -10,24 +11,23 @@\n import sys\n \n \n-VCS_DIRS = [os.path.normcase(\'CVS\'),\n-            os.path.normcase(\'.svn\'),\n-            os.path.normcase(\'.git\')]\n+VCS_DIRS = [os.path.normcase("CVS"), os.path.normcase(".svn"), os.path.normcase(".git")]\n \n \n-def make_instance(user=None, instancehome=None, version=\'4\'):\n+def make_instance(user=None, instancehome=None, version="4"):\n     instancehome = os.path.abspath(os.path.expanduser(instancehome))\n     password = None\n     if user:\n-        user, password = user.split(\':\', 1)\n+        user, password = user.split(":", 1)\n \n     # Use our own skeleton\n-    skelsrc = os.path.join(os.path.dirname(__file__), \'skel\' + version)\n+    skelsrc = os.path.join(os.path.dirname(__file__), "skel" + version)\n     if not os.path.exists(skelsrc):\n         raise ValueError(\n-            \'No configuration skeleton found for version {0}\'.format(version))\n+            "No configuration skeleton found for version {0}".format(version)\n+        )\n \n-    inituser = os.path.join(instancehome, \'inituser\')\n+    inituser = os.path.join(instancehome, "inituser")\n     if not (user or os.path.exists(inituser)):\n         user, password = get_inituser()\n \n@@ -38,29 +38,32 @@ def make_instance(user=None, instancehome=None, version=\'4\'):\n \n def get_inituser():\n     import getpass\n-    print("""\\\n+\n+    print(\n+        """\\\n Please choose a username and password for the initial user.\n These will be the credentials you use to initially manage\n your new Zope instance.\n-""")\n-    user = input(\'Username: \').strip()\n-    if user == \'\':\n+"""\n+    )\n+    user = input("Username: ").strip()\n+    if user == "":\n         return None, None\n     while 1:\n-        passwd = getpass.getpass(\'Password: \')\n-        verify = getpass.getpass(\'Verify password: \')\n+        passwd = getpass.getpass("Password: ")\n+        verify = getpass.getpass("Verify password: ")\n         if verify == passwd:\n             break\n         else:\n-            passwd = verify = \'\'\n-            print(\'Password mismatch, please try again...\')\n+            passwd = verify = ""\n+            print("Password mismatch, please try again...")\n     return user, passwd\n \n \n def write_inituser(fn, user, password):\n-    fp = open(fn, \'w\')\n-    pw = b2a_base64(sha1(password.encode(\'utf-8\')).digest())[:-1]\n-    fp.write(\'%s:{SHA}%s\\n\' % (user, pw.decode(\'ascii\')))\n+    fp = open(fn, "w")\n+    pw = b2a_base64(sha1(password.encode("utf-8")).digest())[:-1]\n+    fp.write("%s:{SHA}%s\\n" % (user, pw.decode("ascii")))\n     fp.close()\n     os.chmod(fn, 0o644)\n \ndiff --git a/src/plone/recipe/zope2instance/recipe.py b/src/plone/recipe/zope2instance/recipe.py\nindex 2c1e89b..b86a85b 100644\n--- a/src/plone/recipe/zope2instance/recipe.py\n+++ b/src/plone/recipe/zope2instance/recipe.py\n@@ -28,7 +28,7 @@\n import zc.buildout.easy_install\n \n \n-IS_WIN = sys.platform[:3].lower() == \'win\'\n+IS_WIN = sys.platform[:3].lower() == "win"\n \n BUILDOUT15 = True\n try:\n@@ -39,7 +39,7 @@\n \n def indent(snippet, amount):\n     ws = " " * amount\n-    return "\\n".join(ws + s if s else "" for s in snippet.split(\'\\n\'))\n+    return "\\n".join(ws + s if s else "" for s in snippet.split("\\n"))\n \n \n def nocomments_split(s):\n@@ -65,71 +65,74 @@ def nocomments_split(s):\n     """\n     res = []\n     for line in s.splitlines():\n-        if \'#\' in line:\n-            line, comment = line.split(\'#\', 1)\n+        if "#" in line:\n+            line, comment = line.split("#", 1)\n         for word in line.split():\n             res.append(word)\n     return res\n \n \n class Recipe(Scripts):\n-\n     def __init__(self, buildout, name, options):\n-        self.egg = Egg(buildout, options[\'recipe\'], options)\n+        self.egg = Egg(buildout, options["recipe"], options)\n         self.buildout, self.options, self.name = buildout, options, name\n         self.scripts = True\n \n-        options[\'location\'] = os.path.join(\n-            buildout[\'buildout\'][\'parts-directory\'],\n+        options["location"] = os.path.join(\n+            buildout["buildout"]["parts-directory"],\n             self.name,\n         )\n-        options[\'bin-directory\'] = buildout[\'buildout\'][\'bin-directory\']\n+        options["bin-directory"] = buildout["buildout"]["bin-directory"]\n \n-        if \'scripts\' in options:\n-            if options[\'scripts\'] == \'\':\n-                options[\'scripts\'] = \'\'  # suppress script generation.\n+        if "scripts" in options:\n+            if options["scripts"] == "":\n+                options["scripts"] = ""  # suppress script generation.\n                 self.scripts = False\n \n         # Relative path support for the generated scripts\n         relative_paths = options.get(\n-            \'relative-paths\',\n-            buildout[\'buildout\'].get(\'relative-paths\', \'false\')\n+            "relative-paths", buildout["buildout"].get("relative-paths", "false")\n         )\n-        if relative_paths == \'true\':\n-            options[\'buildout-directory\'] = buildout[\'buildout\'][\'directory\']\n-            self._relative_paths = options[\'buildout-directory\']\n+        if relative_paths == "true":\n+            options["buildout-directory"] = buildout["buildout"]["directory"]\n+            self._relative_paths = options["buildout-directory"]\n         else:\n-            self._relative_paths = \'\'\n+            self._relative_paths = ""\n \n-        if \'initialization\' not in options:\n-            options[\'initialization\'] = \'\'\n-        options[\'initialization\'] = options[\'initialization\'] % options\n+        if "initialization" not in options:\n+            options["initialization"] = ""\n+        options["initialization"] = options["initialization"] % options\n \n-        self._include_site_packages = options.get(\n-            \'include-site-packages\',\n-            buildout[\'buildout\'].get(\'include-site-packages\', \'false\')\n-        ) not in (\'off\', \'disable\', \'false\')\n+        self._include_site_packages = (\n+            options.get(\n+                "include-site-packages",\n+                buildout["buildout"].get("include-site-packages", "false"),\n+            )\n+            not in ("off", "disable", "false")\n+        )\n \n         self.wsgi = True\n-        self.wsgi_config = os.path.join(options[\'location\'], \'etc\', \'wsgi.ini\')\n-        wsgi_opt = options.get(\'wsgi\', \'on\')\n-        if six.PY2 and wsgi_opt.lower() in (\'off\', \'false\', \'0\'):\n+        self.wsgi_config = os.path.join(options["location"], "etc", "wsgi.ini")\n+        wsgi_opt = options.get("wsgi", "on")\n+        if six.PY2 and wsgi_opt.lower() in ("off", "false", "0"):\n             self.wsgi = False\n-        elif wsgi_opt.lower() not in (\'on\', \'true\', \'1\'):\n+        elif wsgi_opt.lower() not in ("on", "true", "1"):\n             self.wsgi_config = wsgi_opt\n \n-        if \'pipeline\' not in options:\n-            options[\'pipeline\'] = \'\'\'\n+        if "pipeline" not in options:\n+            options[\n+                "pipeline"\n+            ] = """\n                 translogger\n                 egg:Zope#httpexceptions\n                 zope\n-            \'\'\'.strip()\n+            """.strip()\n         # Get Scripts\' attributes\n         return Scripts.__init__(self, buildout, name, options)\n \n     def install(self, update=False):\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n         installed = [location]\n \n         if not update:\n@@ -138,8 +141,8 @@ def install(self, update=False):\n \n             # We could check with pkg_resources which Zope version we have.\n             # But we support creating instances for 4 only.\n-            version = \'4\'\n-            make.make_instance(options.get(\'user\', None), location, version)\n+            version = "4"\n+            make.make_instance(options.get("user", None), location, version)\n \n         try:\n             # Make a new zope.conf and wsgi.ini\n@@ -172,121 +175,123 @@ def update(self):\n     def build_zope_conf(self):\n         """Create a zope.conf file."""\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n         # Don\'t do this if we have a manual zope.conf\n-        zope_conf_path = options.get(\'zope-conf\', None)\n+        zope_conf_path = options.get("zope-conf", None)\n         if zope_conf_path is not None:\n             return\n \n-        imports = options.get(\'zope-conf-imports\', \'\')\n+        imports = options.get("zope-conf-imports", "")\n         if imports:\n-            imports = imports.split(\'\\n\')\n+            imports = imports.split("\\n")\n             # Filter out empty lines\n             imports = [i for i in imports if i]\n-        imports_lines = \'\\n\'.join((\'%%import %s\' % i for i in imports))\n+        imports_lines = "\\n".join(("%%import %s" % i for i in imports))\n \n-        products = options.get(\'products\', \'\')\n+        products = options.get("products", "")\n         if products:\n-            products = products.split(\'\\n\')\n+            products = products.split("\\n")\n             # Filter out empty directories\n             products = [p for p in products if p]\n             # Make sure we have consistent path seperators\n             products = [os.path.abspath(p) for p in products]\n \n-        base_dir = self.buildout[\'buildout\'][\'directory\']\n-        var_dir = options.get(\'var\', os.path.join(base_dir, \'var\'))\n+        base_dir = self.buildout["buildout"]["directory"]\n+        var_dir = options.get("var", os.path.join(base_dir, "var"))\n         if not os.path.exists(var_dir):\n             os.makedirs(var_dir)\n \n         instance_home = location\n-        client_home = options.get(\'client-home\', os.path.join(var_dir,\n-                                                              self.name))\n+        client_home = options.get("client-home", os.path.join(var_dir, self.name))\n         if not os.path.exists(client_home):\n             os.makedirs(client_home)\n \n-        client_import = options.get(\'import-directory\',\n-                                    os.path.join(client_home, \'import\'))\n+        client_import = options.get(\n+            "import-directory", os.path.join(client_home, "import")\n+        )\n         if not os.path.exists(client_import):\n             os.makedirs(client_import)\n \n-        products_lines = \'\\n\'.join([\'products %s\' % p for p in products])\n-        module_paths = options.get(\'extra-paths\', \'\')\n+        products_lines = "\\n".join(["products %s" % p for p in products])\n+        module_paths = options.get("extra-paths", "")\n         if module_paths:\n-            module_paths = module_paths.split(\'\\n\')\n+            module_paths = module_paths.split("\\n")\n             # Filter out empty directories\n             module_paths = [p for p in module_paths if p]\n             # Make sure we have consistent path seperators\n             module_paths = [os.path.abspath(p) for p in module_paths]\n-        paths_lines = \'\\n\'.join([\'path %s\' % p for p in module_paths])\n-        debug_mode = options.get(\'debug-mode\', \'off\')\n-        debug_exceptions = options.get(\'debug-exceptions\', \'\')\n+        paths_lines = "\\n".join(["path %s" % p for p in module_paths])\n+        debug_mode = options.get("debug-mode", "off")\n+        debug_exceptions = options.get("debug-exceptions", "")\n         if debug_exceptions:\n             debug_exceptions = debug_exceptions_template % debug_exceptions\n-        security_implementation = \'C\'\n-        verbose_security = options.get(\'verbose-security\', \'off\')\n-        if verbose_security == \'on\':\n-            security_implementation = \'python\'\n-        port_base = options.get(\'port-base\', \'\')\n+        security_implementation = "C"\n+        verbose_security = options.get("verbose-security", "off")\n+        if verbose_security == "on":\n+            security_implementation = "python"\n+        port_base = options.get("port-base", "")\n         if port_base:\n-            port_base = \'port-base %s\' % port_base\n-        http_force_connection_close = options.get(\n-            \'http-force-connection-close\', None)\n+            port_base = "port-base %s" % port_base\n+        http_force_connection_close = options.get("http-force-connection-close", None)\n         if http_force_connection_close is None:\n-            http_force_connection_close = \'\'\n+            http_force_connection_close = ""\n         else:\n             http_force_connection_close = (\n-                http_force_connection_close_template\n-                % http_force_connection_close)\n-        http_fast_listen = options.get(\'http-fast-listen\', \'on\') or \'\'\n+                http_force_connection_close_template % http_force_connection_close\n+            )\n+        http_fast_listen = options.get("http-fast-listen", "on") or ""\n         if http_fast_listen.lower() in ("on", "true"):\n-            http_fast_listen = http_fast_listen_template % \'on\'\n+            http_fast_listen = http_fast_listen_template % "on"\n         else:\n-            http_fast_listen = http_fast_listen_template % \'off\'\n-        http_address = options.get(\'http-address\', \'8080\')\n+            http_fast_listen = http_fast_listen_template % "off"\n+        http_address = options.get("http-address", "8080")\n         if http_address:\n             http_address = http_server_template % dict(\n                 http_address=http_address,\n                 http_force_connection_close=http_force_connection_close,\n-                http_fast_listen=http_fast_listen)\n-        ftp_address = options.get(\'ftp-address\', \'\')\n+                http_fast_listen=http_fast_listen,\n+            )\n+        ftp_address = options.get("ftp-address", "")\n         if ftp_address:\n             ftp_address = ftp_server_template % ftp_address\n-        webdav_address = options.get(\'webdav-address\', \'\')\n+        webdav_address = options.get("webdav-address", "")\n         if webdav_address:\n-            webdav_conn_close = options.get(\n-                \'webdav-force-connection-close\', \'off\')\n-            webdav_address = webdav_server_template % (webdav_address,\n-                                                       webdav_conn_close)\n-        icp_address = options.get(\'icp-address\', \'\')\n+            webdav_conn_close = options.get("webdav-force-connection-close", "off")\n+            webdav_address = webdav_server_template % (\n+                webdav_address,\n+                webdav_conn_close,\n+            )\n+        icp_address = options.get("icp-address", "")\n         if icp_address:\n             icp_address = icp_server_template % icp_address\n-        http_header_max_length = options.get(\'http-header-max-length\', \'8192\')\n+        http_header_max_length = options.get("http-header-max-length", "8192")\n         if http_header_max_length:\n             http_header_max_length = (\n-                \'http-header-max-length %s\' % http_header_max_length)\n-        effective_user = options.get(\'effective-user\', \'\')\n+                "http-header-max-length %s" % http_header_max_length\n+            )\n+        effective_user = options.get("effective-user", "")\n         if effective_user:\n-            effective_user = \'effective-user %s\' % effective_user\n-        ip_address = options.get(\'ip-address\', \'\')\n+            effective_user = "effective-user %s" % effective_user\n+        ip_address = options.get("ip-address", "")\n         if ip_address:\n-            ip_address = \'ip-address %s\' % ip_address\n+            ip_address = "ip-address %s" % ip_address\n \n-        environment_vars = options.get(\'environment-vars\', \'\')\n+        environment_vars = options.get("environment-vars", "")\n \n-        if \'CHAMELEON_CACHE\' in environment_vars:\n+        if "CHAMELEON_CACHE" in environment_vars:\n             # We do not override a explicitly defined CHAMELEON_CACHE setting!\n             # Do not create the directory here because this is probably a old\n             # setting and we don\'t want to mess with peoples working setup.\n             chameleon_cache = None\n         else:\n             # Use template-cache setting, default to on\n-            chameleon_cache = options.get(\'template-cache\', \'on\')\n+            chameleon_cache = options.get("template-cache", "on")\n \n         if chameleon_cache:\n-            if chameleon_cache.lower() in (\'on\', \'1\', \'true\', \'enabled\'):\n+            if chameleon_cache.lower() in ("on", "1", "true", "enabled"):\n                 # use default setting var_dir/cache\n-                chameleon_cache = os.path.join(var_dir, \'cache\')\n-            elif chameleon_cache.lower() in (\'off\', \'0\', \'false\', \'disabled\'):\n+                chameleon_cache = os.path.join(var_dir, "cache")\n+            elif chameleon_cache.lower() in ("off", "0", "false", "disabled"):\n                 # disable cache\n                 chameleon_cache = None\n             else:\n@@ -298,21 +303,21 @@ def build_zope_conf(self):\n             os.makedirs(chameleon_cache)\n \n         # Inject cache into environment_vars unless it is set there\n-        if chameleon_cache and \'CHAMELEON_CACHE\' not in environment_vars:\n-            chameleon_cache = \'CHAMELEON_CACHE {}\'.format(chameleon_cache)\n-            if environment_vars and \'\\n\' in environment_vars:\n+        if chameleon_cache and "CHAMELEON_CACHE" not in environment_vars:\n+            chameleon_cache = "CHAMELEON_CACHE {}".format(chameleon_cache)\n+            if environment_vars and "\\n" in environment_vars:\n                 # default case\n-                environment_vars += \'\\n{}\'.format(chameleon_cache)\n+                environment_vars += "\\n{}".format(chameleon_cache)\n             elif environment_vars:\n                 # handle case of all vars in one line\n-                environment_vars += \' {}\'.format(chameleon_cache)\n+                environment_vars += " {}".format(chameleon_cache)\n             else:\n                 # handle case when there are no environment_vars yet\n                 environment_vars = chameleon_cache\n \n         if environment_vars:\n             # if the vars are all given on one line we need to do some work\n-            if \'\\n\' not in environment_vars:\n+            if "\\n" not in environment_vars:\n                 keys = []\n                 values = []\n                 env_vars = environment_vars.split()\n@@ -323,128 +328,151 @@ def build_zope_conf(self):\n                     else:\n                         values.append(var)\n                 env_vars = zip(keys, values)\n-                environment_vars = \'\\n\'.join([\n-                    "%s %s" % (env_var[0], env_var[1])\n-                    for env_var in env_vars])\n+                environment_vars = "\\n".join(\n+                    ["%s %s" % (env_var[0], env_var[1]) for env_var in env_vars]\n+                )\n             environment_vars = environment_template % environment_vars\n \n-        deprecation_warnings = options.get(\'deprecation-warnings\', \'\')\n+        deprecation_warnings = options.get("deprecation-warnings", "")\n         if deprecation_warnings:\n-            if deprecation_warnings.lower() in (\'off\', \'disable\', \'false\'):\n-                deprecation_warnings = \'ignore\'\n-            elif deprecation_warnings.lower() in (\'enable\', \'on\', \'true\'):\n-                deprecation_warnings = \'default\'\n-            deprecation_warnings = \'\\n\'.join((\n-                "<warnfilter>",\n-                "  action %s" % deprecation_warnings,\n-                "  category DeprecationWarning",\n-                "</warnfilter>"))\n-\n-        zope_conf_additional = options.get(\'zope-conf-additional\', \'\')\n+            if deprecation_warnings.lower() in ("off", "disable", "false"):\n+                deprecation_warnings = "ignore"\n+            elif deprecation_warnings.lower() in ("enable", "on", "true"):\n+                deprecation_warnings = "default"\n+            deprecation_warnings = "\\n".join(\n+                (\n+                    "<warnfilter>",\n+                    "  action %s" % deprecation_warnings,\n+                    "  category DeprecationWarning",\n+                    "</warnfilter>",\n+                )\n+            )\n+\n+        zope_conf_additional = options.get("zope-conf-additional", "")\n \n         # logging\n \n-        mailinglogger_config = options.get(\'mailinglogger\', \'\')\n-        mailinglogger_import = \'\'\n+        mailinglogger_config = options.get("mailinglogger", "")\n+        mailinglogger_import = ""\n         if mailinglogger_config:\n             mailinglogger_config = mailinglogger_config.strip()\n-            mailinglogger_import = \'%import mailinglogger\'\n+            mailinglogger_import = "%import mailinglogger"\n \n-        default_log = os.path.sep.join((\'log\', self.name + \'.log\',))\n-        event_log_name = options.get(\'event-log\', default_log)\n+        default_log = os.path.sep.join(\n+            (\n+                "log",\n+                self.name + ".log",\n+            )\n+        )\n+        event_log_name = options.get("event-log", default_log)\n \n-        if event_log_name.lower() == \'disable\':\n-            event_log = \'\'\n+        if event_log_name.lower() == "disable":\n+            event_log = ""\n         else:\n-            event_log_level = options.get(\'event-log-level\', \'INFO\')\n-            custom_event_log = options.get(\'event-log-custom\', None)\n+            event_log_level = options.get("event-log-level", "INFO")\n+            custom_event_log = options.get("event-log-custom", None)\n             # log file\n             if not custom_event_log:\n                 event_file = os.path.join(var_dir, event_log_name)\n                 event_log_dir = os.path.dirname(event_file)\n                 if not os.path.exists(event_log_dir):\n                     os.makedirs(event_log_dir)\n-                event_log_rotate = \'\'\n-                event_log_max_size = options.get(\'event-log-max-size\', None)\n+                event_log_rotate = ""\n+                event_log_max_size = options.get("event-log-max-size", None)\n                 if event_log_max_size:\n-                    event_log_old_files = options.get(\'event-log-old-files\', 1)\n-                    event_log_rotate = \'\\n\'.join((\n-                        "max-size %s" % event_log_max_size,\n-                        "    old-files %s" % event_log_old_files))\n+                    event_log_old_files = options.get("event-log-old-files", 1)\n+                    event_log_rotate = "\\n".join(\n+                        (\n+                            "max-size %s" % event_log_max_size,\n+                            "    old-files %s" % event_log_old_files,\n+                        )\n+                    )\n                 event_log = event_logfile % {\n-                    \'event_logfile\': event_file,\n-                    \'event_log_level\': event_log_level,\n-                    \'event_log_rotate\': event_log_rotate}\n+                    "event_logfile": event_file,\n+                    "event_log_level": event_log_level,\n+                    "event_log_rotate": event_log_rotate,\n+                }\n             # custom log\n             else:\n                 event_log = custom_event_log\n \n             event_log = event_log_template % {\n-                \'mailinglogger_config\': mailinglogger_config,\n-                \'event_log_level\': event_log_level,\n-                \'event_log\': event_log,\n+                "mailinglogger_config": mailinglogger_config,\n+                "event_log_level": event_log_level,\n+                "event_log": event_log,\n             }\n \n-        z_log_name = os.path.sep.join((\'log\', self.name + \'-Z2.log\'))\n-        z_log_name = options.get(\n-            \'z2-log\',\n-            options.get(\'access-log\', z_log_name))\n-        if z_log_name.lower() == \'disable\':\n-            access_event_log = \'\'\n+        z_log_name = os.path.sep.join(("log", self.name + "-Z2.log"))\n+        z_log_name = options.get("z2-log", options.get("access-log", z_log_name))\n+        if z_log_name.lower() == "disable":\n+            access_event_log = ""\n         else:\n             z_log = os.path.join(var_dir, z_log_name)\n             z_log_dir = os.path.dirname(z_log)\n             if not os.path.exists(z_log_dir):\n                 os.makedirs(z_log_dir)\n \n-            z_log_level = options.get(\'z2-log-level\', \'WARN\')\n+            z_log_level = options.get("z2-log-level", "WARN")\n \n             # access event log\n-            custom_access_event_log = options.get(\'access-log-custom\', None)\n+            custom_access_event_log = options.get("access-log-custom", None)\n             # filelog directive\n             if not custom_access_event_log:\n-                access_log_rotate = \'\'\n-                access_log_max_size = options.get(\'access-log-max-size\', None)\n+                access_log_rotate = ""\n+                access_log_max_size = options.get("access-log-max-size", None)\n                 if access_log_max_size:\n-                    access_log_old_files = options.get(\n-                        \'access-log-old-files\', 1)\n-                    access_log_rotate = \'\\n\'.join((\n-                        "max-size %s" % access_log_max_size,\n-                        "    old-files %s" % access_log_old_files))\n+                    access_log_old_files = options.get("access-log-old-files", 1)\n+                    access_log_rotate = "\\n".join(\n+                        (\n+                            "max-size %s" % access_log_max_size,\n+                            "    old-files %s" % access_log_old_files,\n+                        )\n+                    )\n                 access_event_log = access_event_logfile % {\n-                    \'z_log\': z_log,\n-                    \'access_log_rotate\': access_log_rotate}\n+                    "z_log": z_log,\n+                    "access_log_rotate": access_log_rotate,\n+                }\n             # custom directive\n             else:\n                 access_event_log = custom_access_event_log\n \n             access_event_log = access_log_template % {\n-                \'z_log_level\': z_log_level,\n-                \'access_event_log\': access_event_log,\n+                "z_log_level": z_log_level,\n+                "access_event_log": access_event_log,\n             }\n \n         default_zpublisher_encoding = options.get(\n-            \'default-zpublisher-encoding\', \'utf-8\')\n+            "default-zpublisher-encoding", "utf-8"\n+        )\n         if default_zpublisher_encoding:\n-            default_zpublisher_encoding = \'default-zpublisher-encoding %s\' %\\\n-                                          default_zpublisher_encoding\n+            default_zpublisher_encoding = (\n+                "default-zpublisher-encoding %s" % default_zpublisher_encoding\n+            )\n \n-        zeo_client = options.get(\'zeo-client\', \'\')\n-        zeo_client = zeo_client.lower() in (\'yes\', \'true\', \'on\', \'1\')\n-        shared_blob_dir = options.get(\'shared-blob\', \'no\')\n+        zeo_client = options.get("zeo-client", "")\n+        zeo_client = zeo_client.lower() in ("yes", "true", "on", "1")\n+        shared_blob_dir = options.get("shared-blob", "no")\n \n-        before_storage = options.get(\'before-storage\')\n-        demo_storage = options.get(\n-            \'demo-storage\', \'off\') not in (\'off\', \'disable\', \'false\')\n+        before_storage = options.get("before-storage")\n+        demo_storage = options.get("demo-storage", "off") not in (\n+            "off",\n+            "disable",\n+            "false",\n+        )\n \n-        zlib = options.get(\'zlib-storage\')\n+        zlib = options.get("zlib-storage")\n \n-        default_blob = os.path.join(var_dir, \'blobstorage\')\n-        default_file = os.path.sep.join((\'filestorage\', \'Data.fs\',))\n+        default_blob = os.path.join(var_dir, "blobstorage")\n+        default_file = os.path.sep.join(\n+            (\n+                "filestorage",\n+                "Data.fs",\n+            )\n+        )\n \n         # Don\'t try to use the actual blobstorage as a cache\n-        if zeo_client and shared_blob_dir == \'no\':\n-            default_blob = os.path.join(var_dir, \'blobcache\')\n+        if zeo_client and shared_blob_dir == "no":\n+            default_blob = os.path.join(var_dir, "blobcache")\n \n         # Only set blob storage default if we\'re using a before\n         # storage, or not a demo storage (otherwise, the default\n@@ -452,162 +480,171 @@ def build_zope_conf(self):\n         if demo_storage and not before_storage:\n             default_blob = None\n \n-        blob_storage = options.get(\'blob-storage\', default_blob)\n-        file_storage = options.get(\'file-storage\', default_file)\n+        blob_storage = options.get("blob-storage", default_blob)\n+        file_storage = options.get("file-storage", default_file)\n \n-        relstorage = options.get(\'rel-storage\')\n+        relstorage = options.get("rel-storage")\n         if relstorage:\n+\n             def _split(el):\n                 el = el.split(None, 1)\n                 return len(el) == 2 and el or None\n \n-            rel_storage = dict([\n-                _split(el) for el in relstorage.splitlines()\n-                if _split(el) is not None])\n-            type_ = rel_storage.pop(\'type\', \'postgresql\')\n+            rel_storage = dict(\n+                [_split(el) for el in relstorage.splitlines() if _split(el) is not None]\n+            )\n+            type_ = rel_storage.pop("type", "postgresql")\n \n-            if type_ == \'postgresql\' and \'dsn\' not in rel_storage:\n+            if type_ == "postgresql" and "dsn" not in rel_storage:\n                 # Support zope2instance 1.4 style interpolation for\n                 # postgresql\n-                template = ("dbname=\'%(dbname)s\' user=\'%(user)s\' "\n-                            "host=\'%(host)s\' password=\'%(password)s\'")\n+                template = (\n+                    "dbname=\'%(dbname)s\' user=\'%(user)s\' "\n+                    "host=\'%(host)s\' password=\'%(password)s\'"\n+                )\n                 dsn = template % rel_storage\n-                del rel_storage[\'dbname\']\n-                del rel_storage[\'user\']\n-                del rel_storage[\'host\']\n-                del rel_storage[\'password\']\n-                rel_storage[\'dsn\'] = dsn\n+                del rel_storage["dbname"]\n+                del rel_storage["user"]\n+                del rel_storage["host"]\n+                del rel_storage["password"]\n+                rel_storage["dsn"] = dsn\n \n             def is_rs_option(name):\n                 # All generic RelStorage options have a dash in their name,\n                 # except the "name" option. Other options are\n                 # database-specific.\n-                if name == \'data-dir\':  # sqlite3\n+                if name == "data-dir":  # sqlite3\n                     return False\n-                return \'-\' in name or name == \'name\'\n+                return "-" in name or name == "name"\n \n-            db_opts = \'\\n\'.join(\' \' * 12 + \' \'.join((k, v))\n-                                for k, v in rel_storage.items()\n-                                if not is_rs_option(k))\n-            if type_ == \'sqlite3\':\n-                pragmas = [k for k in rel_storage if k.startswith(\'pragmas-\')]\n+            db_opts = "\\n".join(\n+                " " * 12 + " ".join((k, v))\n+                for k, v in rel_storage.items()\n+                if not is_rs_option(k)\n+            )\n+            if type_ == "sqlite3":\n+                pragmas = [k for k in rel_storage if k.startswith("pragmas-")]\n                 if pragmas:\n-                    db_opts += \'\\n\' + \' \' * 12 + \'<pragmas>\\n\'\n+                    db_opts += "\\n" + " " * 12 + "<pragmas>\\n"\n                     for k in sorted(pragmas):\n-                        db_opts += \' \' * 16 + \\\n-                            \' \'.join((k[8:], rel_storage[k])) + \'\\n\'\n+                        db_opts += " " * 16 + " ".join((k[8:], rel_storage[k])) + "\\n"\n                         del rel_storage[k]\n-                    db_opts += \' \' * 12 + \'</pragmas>\\n\'\n+                    db_opts += " " * 12 + "</pragmas>\\n"\n             opts = dict(\n                 type=type_,\n                 db_opts=db_opts,\n-                rs_opts=\'\\n\'.join(\' \' * 8 + \' \'.join((k, v))\n-                                  for k, v in rel_storage.items()\n-                                  if is_rs_option(k)),\n+                rs_opts="\\n".join(\n+                    " " * 8 + " ".join((k, v))\n+                    for k, v in rel_storage.items()\n+                    if is_rs_option(k)\n+                ),\n             )\n             file_storage_snippet = rel_storage_template % opts\n         else:\n             file_storage_snippet = self.render_file_storage(\n-                file_storage, blob_storage, base_dir, var_dir, zlib)\n+                file_storage, blob_storage, base_dir, var_dir, zlib\n+            )\n \n-        if \'zserver-threads\' in options:\n+        if "zserver-threads" in options:\n             warn(\n                 \'option "zserver-threads" is deprecated, please use "threads"\',\n-                DeprecationWarning)\n-        zserver_threads = options.get(\n-            \'threads\', options.get(\'zserver-threads\', \'2\'))\n+                DeprecationWarning,\n+            )\n+        zserver_threads = options.get("threads", options.get("zserver-threads", "2"))\n         if zserver_threads:\n-            zserver_threads = \'zserver-threads %s\' % zserver_threads\n+            zserver_threads = "zserver-threads %s" % zserver_threads\n \n-        python_check_interval = options.get(\'python-check-interval\', \'1000\')\n+        python_check_interval = options.get("python-check-interval", "1000")\n         if python_check_interval:\n-            python_check_interval = (\n-                "python-check-interval %s" % python_check_interval)\n+            python_check_interval = "python-check-interval %s" % python_check_interval\n \n-        enable_products = options.get(\'enable-product-installation\', \'off\')\n+        enable_products = options.get("enable-product-installation", "off")\n         if enable_products:\n-            enable_products = (\n-                "enable-product-installation %s" % enable_products)\n+            enable_products = "enable-product-installation %s" % enable_products\n \n-        zeo_address = options.get(\'zeo-address\', \'8100\')\n-        zeo_addresses = zeo_address.split(\' \')\n-        zeo_address_list = \'\'\n+        zeo_address = options.get("zeo-address", "8100")\n+        zeo_addresses = zeo_address.split(" ")\n+        zeo_address_list = ""\n         for address in zeo_addresses:\n             if not address:\n                 continue\n-            zeo_address_list += zeo_address_list_template % dict(\n-                zeo_address=address)\n+            zeo_address_list += zeo_address_list_template % dict(zeo_address=address)\n \n-        zodb_cache_size = options.get(\'zodb-cache-size\', \'30000\')\n+        zodb_cache_size = options.get("zodb-cache-size", "30000")\n         if zodb_cache_size:\n             zodb_cache_size = "cache-size %s" % zodb_cache_size\n         else:\n             zodb_cache_size = ""\n-        zodb_cache_size_bytes = options.get(\'zodb-cache-size-bytes\', None)\n+        zodb_cache_size_bytes = options.get("zodb-cache-size-bytes", None)\n         if zodb_cache_size_bytes:\n-            zodb_cache_size_bytes = (\n-                "cache-size-bytes %s" % zodb_cache_size_bytes)\n+            zodb_cache_size_bytes = "cache-size-bytes %s" % zodb_cache_size_bytes\n         else:\n             zodb_cache_size_bytes = ""\n-        zeo_client_cache_size = options.get(\'zeo-client-cache-size\', \'128MB\')\n-        zeo_storage = options.get(\'zeo-storage\', \'1\')\n+        zeo_client_cache_size = options.get("zeo-client-cache-size", "128MB")\n+        zeo_storage = options.get("zeo-storage", "1")\n \n         if zeo_client:\n             if relstorage:\n                 raise ValueError(\n-                    \'You cannot use both ZEO and RelStorage at the same time.\')\n+                    "You cannot use both ZEO and RelStorage at the same time."\n+                )\n \n             zeo_client_drop_cache_rather_verify = options.get(\n-                \'zeo-client-drop-cache-rather-verify\', \'\')\n+                "zeo-client-drop-cache-rather-verify", ""\n+            )\n             if zeo_client_drop_cache_rather_verify:\n                 zeo_client_drop_cache_rather_verify = (\n-                    \'drop-cache-rather-verify %s\'\n-                    % zeo_client_drop_cache_rather_verify)\n-            zeo_client_blob_cache_size = options.get(\n-                \'zeo-client-blob-cache-size\', \'\')\n+                    "drop-cache-rather-verify %s" % zeo_client_drop_cache_rather_verify\n+                )\n+            zeo_client_blob_cache_size = options.get("zeo-client-blob-cache-size", "")\n             zeo_client_blob_cache_size_check = options.get(\n-                \'zeo-client-blob-cache-size-check\', \'\')\n-            zeo_client_min_disconnect_poll = options.get(\n-                \'min-disconnect-poll\', "")\n-            zeo_client_max_disconnect_poll = options.get(\n-                \'max-disconnect-poll\', "")\n+                "zeo-client-blob-cache-size-check", ""\n+            )\n+            zeo_client_min_disconnect_poll = options.get("min-disconnect-poll", "")\n+            zeo_client_max_disconnect_poll = options.get("max-disconnect-poll", "")\n             zeo_client_read_only_fallback = options.get(\n-                \'zeo-client-read-only-fallback\', \'false\')\n-            zeo_client_client = options.get(\'zeo-client-client\', \'\')\n+                "zeo-client-read-only-fallback", "false"\n+            )\n+            zeo_client_client = options.get("zeo-client-client", "")\n             if zeo_client_client:\n-                zeo_client_client = \'client %s\' % zeo_client_client\n-                zeo_var_dir = options.get(\'zeo-var\', \'\')\n+                zeo_client_client = "client %s" % zeo_client_client\n+                zeo_var_dir = options.get("zeo-var", "")\n                 if not zeo_var_dir:\n-                    zeo_var_dir = \'$(ZEO_TMP)\'\n-                zeo_var_dir = \'var %s\' % zeo_var_dir\n+                    zeo_var_dir = "$(ZEO_TMP)"\n+                zeo_var_dir = "var %s" % zeo_var_dir\n             else:\n-                zeo_var_dir = \'\'\n+                zeo_var_dir = ""\n             if zeo_client_blob_cache_size:\n                 zeo_client_blob_cache_size = (\n-                    \'blob-cache-size %s\' % zeo_client_blob_cache_size)\n+                    "blob-cache-size %s" % zeo_client_blob_cache_size\n+                )\n             if zeo_client_blob_cache_size_check:\n                 zeo_client_blob_cache_size_check = (\n-                    \'blob-cache-size-check %s\'\n-                    % zeo_client_blob_cache_size_check)\n+                    "blob-cache-size-check %s" % zeo_client_blob_cache_size_check\n+                )\n             if zeo_client_min_disconnect_poll:\n                 zeo_client_min_disconnect_poll = (\n-                    "min-disconnect-poll %s" % zeo_client_min_disconnect_poll)\n+                    "min-disconnect-poll %s" % zeo_client_min_disconnect_poll\n+                )\n             if zeo_client_max_disconnect_poll:\n                 zeo_client_max_disconnect_poll = (\n-                    "max-disconnect-poll %s" % zeo_client_max_disconnect_poll)\n+                    "max-disconnect-poll %s" % zeo_client_max_disconnect_poll\n+                )\n             if zeo_client_read_only_fallback:\n                 zeo_client_read_only_fallback = (\n-                    "read-only-fallback %s" % zeo_client_read_only_fallback)\n-            if options.get(\'zeo-username\', \'\'):\n-                if not options.get(\'zeo-password\', \'\'):\n-                    raise zc.buildout.UserError(\'No ZEO password specified\')\n+                    "read-only-fallback %s" % zeo_client_read_only_fallback\n+                )\n+            if options.get("zeo-username", ""):\n+                if not options.get("zeo-password", ""):\n+                    raise zc.buildout.UserError("No ZEO password specified")\n \n                 zeo_authentication = zeo_authentication_template % dict(\n-                    realm=options.get(\'zeo-realm\', \'ZEO\'),\n-                    username=options.get(\'zeo-username\'),\n-                    password=options.get(\'zeo-password\'))\n+                    realm=options.get("zeo-realm", "ZEO"),\n+                    username=options.get("zeo-username"),\n+                    password=options.get("zeo-password"),\n+                )\n             else:\n-                zeo_authentication = \'\'\n+                zeo_authentication = ""\n \n             if blob_storage:\n                 storage_snippet_template = zeo_blob_storage_template\n@@ -628,32 +665,32 @@ def is_rs_option(name):\n                 zeo_client_drop_cache_rather_verify=zeo_client_drop_cache_rather_verify,  # noqa: E501\n                 zeo_client_min_disconnect_poll=zeo_client_min_disconnect_poll,\n                 zeo_client_max_disconnect_poll=zeo_client_max_disconnect_poll,\n-                read_only=options.get(\'read-only\', \'false\'),\n-                zeo_client_read_only_fallback=zeo_client_read_only_fallback\n-                )\n+                read_only=options.get("read-only", "false"),\n+                zeo_client_read_only_fallback=zeo_client_read_only_fallback,\n+            )\n         else:\n             # no zeo-client\n-            zeo_client_client = \'\'\n+            zeo_client_client = ""\n             storage_snippet = file_storage_snippet\n \n         if before_storage:\n-            storage_snippet = (\n-                before_storage_template % before_storage) % indent(\n-                    storage_snippet, 2)\n+            storage_snippet = (before_storage_template % before_storage) % indent(\n+                storage_snippet, 2\n+            )\n \n         if demo_storage:\n-            demo_file_storage = options.get(\'demo-file-storage\')\n-            demo_blob_storage = options.get(\'demo-blob-storage\')\n+            demo_file_storage = options.get("demo-file-storage")\n+            demo_blob_storage = options.get("demo-blob-storage")\n \n             if demo_file_storage or demo_blob_storage:\n-                base = storage_snippet.replace(\'>\', \' base>\', 1)\n+                base = storage_snippet.replace(">", " base>", 1)\n                 changes = self.render_file_storage(\n-                    demo_file_storage, demo_blob_storage, base_dir, var_dir,\n-                    zlib).replace(\'>\', \' changes>\', 1)\n+                    demo_file_storage, demo_blob_storage, base_dir, var_dir, zlib\n+                ).replace(">", " changes>", 1)\n \n                 storage_snippet = demo_storage2_template % (base, changes)\n \n-            elif \'blob-storage\' in options:\n+            elif "blob-storage" in options:\n                 raise ValueError(\n                     "Both blob and demo storage cannot be used"\n                     " at the same time (use a before storage instead)."\n@@ -661,29 +698,24 @@ def is_rs_option(name):\n             else:\n                 storage_snippet = demo_storage_template % storage_snippet\n \n-        if options.get(\'storage-wrapper\'):\n-            storage_snippet = indent(\n-                options[\'storage-wrapper\'] % storage_snippet, 4)\n+        if options.get("storage-wrapper"):\n+            storage_snippet = indent(options["storage-wrapper"] % storage_snippet, 4)\n \n-        zodb_tmp_storage = options.get(\'zodb-temporary-storage\', \'on\')\n-        if zodb_tmp_storage.lower() in (\'off\', \'false\', \'0\'):\n+        zodb_tmp_storage = options.get("zodb-temporary-storage", "on")\n+        if zodb_tmp_storage.lower() in ("off", "false", "0"):\n             # no temporary-storage snippet\n-            zodb_tmp_storage = \'\'\n-        elif zodb_tmp_storage.lower() in (\'on\', \'true\', \'1\'):\n+            zodb_tmp_storage = ""\n+        elif zodb_tmp_storage.lower() in ("on", "true", "1"):\n             # use default temporary-storage snippet\n             zodb_tmp_storage = zodb_temporary_storage_template\n         template = wsgi_conf_template if self.wsgi else zope_conf_template\n \n-        pid_file = options.get(\n-            \'pid-file\',\n-            os.path.join(var_dir, self.name + \'.pid\'))\n+        pid_file = options.get("pid-file", os.path.join(var_dir, self.name + ".pid"))\n         pid_file_dir = os.path.dirname(pid_file)\n         if not os.path.exists(pid_file_dir):\n             os.makedirs(pid_file_dir)\n \n-        lock_file = options.get(\n-            \'lock-file\',\n-            os.path.join(var_dir, self.name + \'.lock\'))\n+        lock_file = options.get("lock-file", os.path.join(var_dir, self.name + ".lock"))\n         lock_file_dir = os.path.dirname(lock_file)\n         if not os.path.exists(lock_file_dir):\n             os.makedirs(lock_file_dir)\n@@ -723,158 +755,164 @@ def is_rs_option(name):\n             deprecation_warnings=deprecation_warnings,\n             python_check_interval=python_check_interval,\n             enable_products=enable_products,\n-            zope_conf_additional=zope_conf_additional,)\n+            zope_conf_additional=zope_conf_additional,\n+        )\n \n         zope_conf = "\\n".join(\n             [line for line in zope_conf.splitlines() if line.rstrip()]\n         )\n-        zope_conf_path = os.path.join(location, \'etc\', \'zope.conf\')\n-        with open(zope_conf_path, \'w\') as f:\n+        zope_conf_path = os.path.join(location, "etc", "zope.conf")\n+        with open(zope_conf_path, "w") as f:\n             f.write(zope_conf)\n \n     def build_wsgi_ini(self):\n         options = self.options\n-        wsgi_ini_path = os.path.join(options[\'location\'], \'etc\', \'wsgi.ini\')\n-        listen = options.get(\'http-address\', \'0.0.0.0:8080\')\n-        fast_listen = options.get(\'http-fast-listen\', \'on\') or \'\'\n-        fast = \'fast-\' if fast_listen.lower() in (\'on\', \'true\') else \'\'\n-        listen = \' \'.join(\n+        wsgi_ini_path = os.path.join(options["location"], "etc", "wsgi.ini")\n+        listen = options.get("http-address", "0.0.0.0:8080")\n+        fast_listen = options.get("http-fast-listen", "on") or ""\n+        fast = "fast-" if fast_listen.lower() in ("on", "true") else ""\n+        listen = " ".join(\n             [\n-                \'0.0.0.0:{}\'.format(part) if \':\' not in part else part\n+                "0.0.0.0:{}".format(part) if ":" not in part else part\n                 for part in listen.split()\n             ]\n         )\n-        base_dir = self.buildout[\'buildout\'][\'directory\']\n-        var_dir = options.get(\'var\', os.path.join(base_dir, \'var\'))\n+        base_dir = self.buildout["buildout"]["directory"]\n+        var_dir = options.get("var", os.path.join(base_dir, "var"))\n         default_eventlog = os.path.sep.join(\n-            (var_dir, \'log\', \'{}.log\'.format(self.name),))\n-        eventlog_name = options.get(\'event-log\', default_eventlog)\n-        eventlog_level = options.get(\'event-log-level\', \'INFO\')\n-        eventlog_handler = options.get(\'event-log-handler\', \'FileHandler\')\n-        eventlog_kwargs = options.get(\'event-log-kwargs\', \'{}\')\n-        eventlog_args = options.get(\'event-log-args\')\n+            (\n+                var_dir,\n+                "log",\n+                "{}.log".format(self.name),\n+            )\n+        )\n+        eventlog_name = options.get("event-log", default_eventlog)\n+        eventlog_level = options.get("event-log-level", "INFO")\n+        eventlog_handler = options.get("event-log-handler", "FileHandler")\n+        eventlog_kwargs = options.get("event-log-kwargs", "{}")\n+        eventlog_args = options.get("event-log-args")\n         if not eventlog_args:\n             eventlog_args = "(r\'{}\', \'a\')".format(eventlog_name)\n         else:\n             eventlog_args = eventlog_args.format(eventlog_name)\n \n-        if eventlog_name.lower() == \'disable\':\n-            root_handlers = \'console\'\n-            event_handlers = \'\'\n+        if eventlog_name.lower() == "disable":\n+            root_handlers = "console"\n+            event_handlers = ""\n         else:\n-            root_handlers = \'console, eventlog\'\n-            event_handlers = \'eventlog\'\n+            root_handlers = "console, eventlog"\n+            event_handlers = "eventlog"\n \n         default_accesslog = os.path.sep.join(\n-            (var_dir, \'log\', \'{}-access.log\'.format(self.name),))\n+            (\n+                var_dir,\n+                "log",\n+                "{}-access.log".format(self.name),\n+            )\n+        )\n \n         accesslog_name = options.get(\n-            \'z2-log\',\n-            options.get(\'access-log\', default_accesslog))\n+            "z2-log", options.get("access-log", default_accesslog)\n+        )\n         accesslog_level = options.get(\n-            \'access-log-level\',\n-            options.get(\'z2-log-level\', \'INFO\'))\n-        accesslog_handler = options.get(\'access-log-handler\', \'FileHandler\')\n-        accesslog_kwargs = options.get(\'access-log-kwargs\', \'{}\')\n-        accesslog_args = options.get(\'access-log-args\')\n+            "access-log-level", options.get("z2-log-level", "INFO")\n+        )\n+        accesslog_handler = options.get("access-log-handler", "FileHandler")\n+        accesslog_kwargs = options.get("access-log-kwargs", "{}")\n+        accesslog_args = options.get("access-log-args")\n         if not accesslog_args:\n             accesslog_args = "(r\'{}\', \'a\')".format(accesslog_name)\n         else:\n             accesslog_args = accesslog_args.format(accesslog_name)\n \n-        pipeline = options[\'pipeline\'].split()\n-        if accesslog_name.lower() == \'disable\':\n-            event_handlers = \'\'\n-            accesslog_handler = \'NullHandler\'\n+        pipeline = options["pipeline"].split()\n+        if accesslog_name.lower() == "disable":\n+            event_handlers = ""\n+            accesslog_handler = "NullHandler"\n             accesslog_args = "()"\n             pipeline = [line for line in pipeline if line != "translogger"]\n \n-        sentry_dsn = options.get(\'sentry_dsn\', \'\')\n+        sentry_dsn = options.get("sentry_dsn", "")\n         if sentry_dsn:\n             if "zope" in pipeline:\n-                pipeline.insert(pipeline.index("zope"), \'sentry\')\n+                pipeline.insert(pipeline.index("zope"), "sentry")\n             else:\n-                pipeline.append(\'sentry\')\n-        sentry_level = options.get(\'sentry_level\', \'INFO\')\n-        sentry_event_level = options.get(\'sentry_event_level\', \'ERROR\')\n-        sentry_ignore = options.get(\'sentry_ignore\', \'\')\n+                pipeline.append("sentry")\n+        sentry_level = options.get("sentry_level", "INFO")\n+        sentry_event_level = options.get("sentry_event_level", "ERROR")\n+        sentry_ignore = options.get("sentry_ignore", "")\n \n-        profile = options.get(\'profile\', \'\').strip() == \'on\'\n+        profile = options.get("profile", "").strip() == "on"\n         if profile:\n             if "zope" in pipeline:\n-                pipeline.insert(pipeline.index("zope"), \'profile\')\n+                pipeline.insert(pipeline.index("zope"), "profile")\n             else:\n-                pipeline.append(\'profile\')\n+                pipeline.append("profile")\n         default_profile_log_filename = os.path.sep.join(\n             [\n                 var_dir,\n-                \'log\',\n-                \'profile-{0}.raw\'.format(self.name),\n+                "log",\n+                "profile-{0}.raw".format(self.name),\n             ]\n         )\n         profile_log_filename = options.get(\n-            \'profile_log_filename\',\n-            default_profile_log_filename\n+            "profile_log_filename", default_profile_log_filename\n         )\n         default_profile_log_filename = os.path.sep.join(\n             [\n                 var_dir,\n-                \'log\',\n-                \'cachegrind.out.{0}\'.format(self.name),\n+                "log",\n+                "cachegrind.out.{0}".format(self.name),\n             ]\n         )\n         profile_cachegrind_filename = options.get(\n-            \'profile_cachegrind_filename\',\n-            default_profile_log_filename\n+            "profile_cachegrind_filename", default_profile_log_filename\n         )\n         profile_discard_first_request = options.get(\n-            \'profile_discard_first_request\',\n-            \'true\'\n-        )\n-        profile_path = options.get(\'profile_path\', \'/__profile__\')\n-        profile_flush_at_shutdown = options.get(\n-            \'profile_flush_at_shutdown\',\n-            \'true\'\n+            "profile_discard_first_request", "true"\n         )\n-        profile_unwind = options.get(\'profile_unwind\', \'false\')\n+        profile_path = options.get("profile_path", "/__profile__")\n+        profile_flush_at_shutdown = options.get("profile_flush_at_shutdown", "true")\n+        profile_unwind = options.get("profile_unwind", "false")\n \n         if "zope" not in pipeline:\n-            pipeline.append(\'zope\')\n+            pipeline.append("zope")\n \n         wsgi_options = {\n-            \'accesslog_args\': accesslog_args,\n-            \'accesslog_handler\': accesslog_handler,\n-            \'accesslog_kwargs\': accesslog_kwargs,\n-            \'accesslog_level\': accesslog_level,\n-            \'accesslog_name\': accesslog_name,\n-            \'clear_untrusted_proxy_headers\': options.get(\'clear-untrusted-proxy-headers\', \'false\'),\n-            \'event_handlers\': event_handlers,\n-            \'eventlog_args\': eventlog_args,\n-            \'eventlog_handler\': eventlog_handler,\n-            \'eventlog_kwargs\': eventlog_kwargs,\n-            \'eventlog_level\': eventlog_level,\n-            \'eventlog_name\': eventlog_name,\n-            \'fast-listen\': fast,\n-            \'http_address\': listen,\n-            \'location\': options[\'location\'],\n-            \'max_request_body_size\': options.get(\n-                \'max-request-body-size\', 1073741824),\n-            \'pipeline\': \'\\n    \'.join(pipeline),\n-            \'root_handlers\': root_handlers,\n-            \'sentry_dsn\': sentry_dsn,\n-            \'sentry_event_level\': sentry_event_level,\n-            \'sentry_ignore\': sentry_ignore,\n-            \'sentry_level\': sentry_level,\n-            \'threads\': options.get(\'threads\', 4),\n-            \'profile_log_filename\': profile_log_filename,\n-            \'profile_cachegrind_filename\': profile_cachegrind_filename,\n-            \'profile_discard_first_request\': profile_discard_first_request,\n-            \'profile_path\': profile_path,\n-            \'profile_flush_at_shutdown\': profile_flush_at_shutdown,\n-            \'profile_unwind\': profile_unwind,\n+            "accesslog_args": accesslog_args,\n+            "accesslog_handler": accesslog_handler,\n+            "accesslog_kwargs": accesslog_kwargs,\n+            "accesslog_level": accesslog_level,\n+            "accesslog_name": accesslog_name,\n+            "clear_untrusted_proxy_headers": options.get(\n+                "clear-untrusted-proxy-headers", "false"\n+            ),\n+            "event_handlers": event_handlers,\n+            "eventlog_args": eventlog_args,\n+            "eventlog_handler": eventlog_handler,\n+            "eventlog_kwargs": eventlog_kwargs,\n+            "eventlog_level": eventlog_level,\n+            "eventlog_name": eventlog_name,\n+            "fast-listen": fast,\n+            "http_address": listen,\n+            "location": options["location"],\n+            "max_request_body_size": options.get("max-request-body-size", 1073741824),\n+            "pipeline": "\\n    ".join(pipeline),\n+            "root_handlers": root_handlers,\n+            "sentry_dsn": sentry_dsn,\n+            "sentry_event_level": sentry_event_level,\n+            "sentry_ignore": sentry_ignore,\n+            "sentry_level": sentry_level,\n+            "threads": options.get("threads", 4),\n+            "profile_log_filename": profile_log_filename,\n+            "profile_cachegrind_filename": profile_cachegrind_filename,\n+            "profile_discard_first_request": profile_discard_first_request,\n+            "profile_path": profile_path,\n+            "profile_flush_at_shutdown": profile_flush_at_shutdown,\n+            "profile_unwind": profile_unwind,\n         }\n         global wsgi_ini_template\n-        wsgi_ini_template_path = self.options.get(\'wsgi-ini-template\')\n+        wsgi_ini_template_path = self.options.get("wsgi-ini-template")\n         if wsgi_ini_template_path:\n             try:\n                 with open(wsgi_ini_template_path) as fp:\n@@ -884,13 +922,12 @@ def build_wsgi_ini(self):\n \n         # generate a different [server:main] - useful for Windows\n         wsgi_server_main_template = wsgi_server_main_templates.get(\n-            sys.platform,\n-            wsgi_server_main_templates[\'default\']\n+            sys.platform, wsgi_server_main_templates["default"]\n         )\n-        wsgi_options[\'server_main\'] = wsgi_server_main_template % wsgi_options\n+        wsgi_options["server_main"] = wsgi_server_main_template % wsgi_options\n \n         wsgi_ini = wsgi_ini_template % wsgi_options\n-        with open(wsgi_ini_path, \'w\') as f:\n+        with open(wsgi_ini_path, "w") as f:\n             f.write(wsgi_ini)\n \n     def install_scripts(self):\n@@ -898,23 +935,24 @@ def install_scripts(self):\n             # instance scripts are usung zdaemon, which are Unix only\n             return {}\n         options = self.options\n-        location = options[\'location\']\n+        location = options["location"]\n \n         # The instance control script\n-        zope_conf = os.path.join(location, \'etc\', \'zope.conf\')\n-        zope_conf_path = options.get(\'zope-conf\', zope_conf)\n-        program_name = \'interpreter\'\n-        program_path = os.path.join(location, \'bin\', program_name)\n+        zope_conf = os.path.join(location, "etc", "zope.conf")\n+        zope_conf_path = options.get("zope-conf", zope_conf)\n+        program_name = "interpreter"\n+        program_path = os.path.join(location, "bin", program_name)\n \n-        zopectl_umask = options.get(\'zopectl-umask\', \'\')\n+        zopectl_umask = options.get("zopectl-umask", "")\n \n-        extra_paths = options.get(\'extra-paths\', \'\').split()\n-        requirements, ws = self.egg.working_set([\'plone.recipe.zope2instance\'])\n-        reqs = [self.options.get(\'control-script\', self.name)]\n-        reqs.extend([\'plone.recipe.zope2instance.ctl\', \'main\'])\n+        extra_paths = options.get("extra-paths", "").split()\n+        requirements, ws = self.egg.working_set(["plone.recipe.zope2instance"])\n+        reqs = [self.options.get("control-script", self.name)]\n+        reqs.extend(["plone.recipe.zope2instance.ctl", "main"])\n         reqs = [tuple(reqs)]\n \n-        if options.get(\'relative-paths\'):\n+        if options.get("relative-paths"):\n+\n             class relative_path_str(str):\n                 def __repr__(self):\n                     return str(self)\n@@ -922,49 +960,64 @@ def __repr__(self):\n             zope_conf_path = relative_path_str(\n                 zc.buildout.easy_install._relativitize(\n                     zope_conf,\n-                    options[\'buildout-directory\'] + os.sep,\n-                    self._relative_paths\n+                    options["buildout-directory"] + os.sep,\n+                    self._relative_paths,\n                 )\n             )\n             program_path = relative_path_str(\n                 zc.buildout.easy_install._relativitize(\n                     program_path,\n-                    options[\'buildout-directory\'] + os.sep,\n-                    self._relative_paths\n+                    options["buildout-directory"] + os.sep,\n+                    self._relative_paths,\n                 )\n             )\n \n-        options[\'zope-conf\'] = zope_conf_path\n-        arguments = ["-C", zope_conf_path, \'-p\', program_path]\n+        options["zope-conf"] = zope_conf_path\n+        arguments = ["-C", zope_conf_path, "-p", program_path]\n         if zopectl_umask:\n             arguments.extend(["--umask", int(zopectl_umask, 8)])\n         if self.wsgi and self.wsgi_config:\n-            arguments.extend([\'-w\', self.wsgi_config])\n-        script_arguments = (\'\\n        \' + repr(arguments) +\n-                            \'\\n        + sys.argv[1:]\')\n+            arguments.extend(["-w", self.wsgi_config])\n+        script_arguments = "\\n        " + repr(arguments) + "\\n        + sys.argv[1:]"\n \n         generated = self._install_scripts(\n-            options[\'bin-directory\'], ws, reqs=reqs, extra_paths=extra_paths,\n-            script_arguments=script_arguments)\n-        generated.extend(self._install_scripts(\n-            os.path.join(options[\'location\'], \'bin\'), ws,\n-            interpreter=program_name, extra_paths=extra_paths))\n+            options["bin-directory"],\n+            ws,\n+            reqs=reqs,\n+            extra_paths=extra_paths,\n+            script_arguments=script_arguments,\n+        )\n+        generated.extend(\n+            self._install_scripts(\n+                os.path.join(options["location"], "bin"),\n+                ws,\n+                interpreter=program_name,\n+                extra_paths=extra_paths,\n+            )\n+        )\n         return generated\n \n-    def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n-                         extra_paths=(), script_arguments=\'\'):\n+    def _install_scripts(\n+        self,\n+        dest,\n+        working_set,\n+        reqs=(),\n+        interpreter=None,\n+        extra_paths=(),\n+        script_arguments="",\n+    ):\n         options = self.options\n         if BUILDOUT15:\n             return sitepackage_safe_scripts(\n                 dest=dest,\n                 working_set=working_set,\n-                executable=options[\'executable\'],\n-                site_py_dest=options[\'location\'],\n+                executable=options["executable"],\n+                site_py_dest=options["location"],\n                 reqs=reqs,\n                 scripts=None,\n                 interpreter=interpreter,\n                 extra_paths=extra_paths,\n-                initialization=options[\'initialization\'],\n+                initialization=options["initialization"],\n                 include_site_packages=self._include_site_packages,\n                 exec_sitecustomize=False,\n                 relative_paths=self._relative_paths,\n@@ -975,40 +1028,41 @@ def _install_scripts(self, dest, working_set, reqs=(), interpreter=None,\n                 dest=dest,\n                 reqs=reqs,\n                 working_set=working_set,\n-                executable=options[\'executable\'],\n+                executable=options["executable"],\n                 extra_paths=extra_paths,\n-                initialization=options[\'initialization\'],\n+                initialization=options["initialization"],\n                 arguments=script_arguments,\n                 interpreter=interpreter,\n-                relative_paths=self._relative_paths,)\n+                relative_paths=self._relative_paths,\n+            )\n \n     def build_package_includes(self):\n         """Create ZCML slugs in etc/package-includes."""\n-        location = self.options[\'location\']\n-        sitezcml_path = os.path.join(location, \'etc\', \'site.zcml\')\n-        zcml = self.options.get(\'zcml\')\n-        site_zcml = self.options.get(\'site-zcml\')\n+        location = self.options["location"]\n+        sitezcml_path = os.path.join(location, "etc", "site.zcml")\n+        zcml = self.options.get("zcml")\n+        site_zcml = self.options.get("site-zcml")\n         additional_zcml = self.options.get("zcml-additional")\n         resources = self.options.get("resources")\n         locales = self.options.get("locales")\n \n         if site_zcml:\n-            open(sitezcml_path, \'w\').write(site_zcml)\n+            open(sitezcml_path, "w").write(site_zcml)\n             return\n \n         if zcml:\n             zcml = nocomments_split(zcml)\n \n         if additional_zcml or resources or locales or zcml:\n-            includes_path = os.path.join(location, \'etc\', \'package-includes\')\n+            includes_path = os.path.join(location, "etc", "package-includes")\n \n             if not os.path.exists(includes_path):\n                 # Zope 2.9 does not have a package-includes so we\n                 # create one.\n                 os.mkdir(includes_path)\n             else:\n-                if zcml and \'*\' in zcml:\n-                    zcml.remove(\'*\')\n+                if zcml and "*" in zcml:\n+                    zcml.remove("*")\n                 else:\n                     shutil.rmtree(includes_path)\n                     os.mkdir(includes_path)\n@@ -1021,9 +1075,7 @@ def build_package_includes(self):\n         if resources:\n             resources_path = resources.strip()\n             path = os.path.join(includes_path, "998-resources-configure.zcml")\n-            open(path, "w").write(\n-                resources_zcml % dict(directory=resources_path)\n-            )\n+            open(path, "w").write(resources_zcml % dict(directory=resources_path))\n \n             if not os.path.exists(resources_path):\n                 os.mkdir(resources_path)\n@@ -1031,49 +1083,45 @@ def build_package_includes(self):\n         if locales:\n             locales_path = locales.strip()\n             path = os.path.join(includes_path, "001-locales-configure.zcml")\n-            open(path, "w").write(\n-                locales_zcml % dict(directory=locales_path)\n-            )\n+            open(path, "w").write(locales_zcml % dict(directory=locales_path))\n \n             if not os.path.exists(locales_path):\n                 os.mkdir(locales_path)\n \n         if zcml:\n             n = 1  # 001 is reserved for an optional locales-configure\n-            package_match = re.compile(r\'\\w+([.]\\w+)*$\').match\n+            package_match = re.compile(r"\\w+([.]\\w+)*$").match\n             for package in zcml:\n                 n += 1\n                 orig = package\n-                if \':\' in package:\n-                    package, filename = package.split(\':\')\n+                if ":" in package:\n+                    package, filename = package.split(":")\n                 else:\n                     filename = None\n \n-                if \'-\' in package:\n-                    package, suff = package.split(\'-\')\n+                if "-" in package:\n+                    package, suff = package.split("-")\n                     file_suff = suff\n-                    if suff not in (\'configure\', \'meta\', \'overrides\'):\n-                        file_suff = \'%s-configure\' % suff\n+                    if suff not in ("configure", "meta", "overrides"):\n+                        file_suff = "%s-configure" % suff\n                 else:\n-                    suff = file_suff = \'configure\'\n+                    suff = file_suff = "configure"\n \n                 if filename is None:\n-                    filename = suff + \'.zcml\'\n+                    filename = suff + ".zcml"\n \n                 if not package_match(package):\n-                    raise ValueError(\'Invalid zcml\', orig)\n+                    raise ValueError("Invalid zcml", orig)\n \n                 path = os.path.join(\n                     includes_path,\n                     "%3.3d-%s-%s.zcml" % (n, package, file_suff),\n                 )\n-                open(path, \'w\').write(\n-                    \'<include package="%s" file="%s" />\\n\'\n-                    % (package, filename)\n+                open(path, "w").write(\n+                    \'<include package="%s" file="%s" />\\n\' % (package, filename)\n                 )\n \n-    def render_file_storage(self, file_storage, blob_storage,\n-                            base_dir, var_dir, zlib):\n+    def render_file_storage(self, file_storage, blob_storage, base_dir, var_dir, zlib):\n         if file_storage:\n             file_storage = os.path.join(var_dir, file_storage)\n             file_storage_dir = os.path.dirname(file_storage)\n@@ -1081,18 +1129,17 @@ def render_file_storage(self, file_storage, blob_storage,\n                 os.makedirs(file_storage_dir)\n             storage = file_storage_template % file_storage\n             if zlib is not None:\n-                if zlib == \'active\':\n-                    compress = \'true\'\n-                elif zlib == \'passive\':\n-                    compress = \'false\'\n+                if zlib == "active":\n+                    compress = "true"\n+                elif zlib == "passive":\n+                    compress = "false"\n                 else:\n                     raise ValueError(\n                         "Valid options for ``zlib-storage`` are "\n-                        "(\'compress\', \'uncompress\'). Got: %s." % zlib)\n+                        "(\'compress\', \'uncompress\'). Got: %s." % zlib\n+                    )\n \n-                storage = zlib_storage_template % (\n-                    compress, indent(storage, 2)\n-                )\n+                storage = zlib_storage_template % (compress, indent(storage, 2))\n         else:\n             storage = "    <demostorage />"\n \n@@ -1417,7 +1464,9 @@ def render_file_storage(self, file_storage, blob_storage,\n """\n \n wsgi_server_main_templates = {}\n-wsgi_server_main_templates[\'default\'] = """\\\n+wsgi_server_main_templates[\n+    "default"\n+] = """\\\n paste.server_factory = plone.recipe.zope2instance:main\n use = egg:plone.recipe.zope2instance#main\n %(fast-listen)slisten = %(http_address)s\n@@ -1426,7 +1475,9 @@ def render_file_storage(self, file_storage, blob_storage,\n max_request_body_size = %(max_request_body_size)s\n """\n \n-wsgi_server_main_templates[\'win32\'] = """\\\n+wsgi_server_main_templates[\n+    "win32"\n+] = """\\\n use = egg:waitress#main\n listen = %(http_address)s\n threads = %(threads)s\ndiff --git a/src/plone/recipe/zope2instance/sentry.py b/src/plone/recipe/zope2instance/sentry.py\nindex 069294a..1a0ad06 100644\n--- a/src/plone/recipe/zope2instance/sentry.py\n+++ b/src/plone/recipe/zope2instance/sentry.py\n@@ -1,17 +1,13 @@\n+from sentry_sdk.integrations.logging import ignore_logger\n+from sentry_sdk.integrations.logging import LoggingIntegration\n+\n import logging\n import sentry_sdk\n-from sentry_sdk.integrations.logging import LoggingIntegration, ignore_logger\n \n \n-def sdk_init(\n-        global_conf,\n-        dsn,\n-        level=\'INFO\',\n-        event_level=\'ERROR\',\n-        ignorelist=\'\'):\n+def sdk_init(global_conf, dsn, level="INFO", event_level="ERROR", ignorelist=""):\n     sentry_logging = LoggingIntegration(\n-        level=logging.__dict__[level],\n-        event_level=logging.__dict__[event_level]\n+        level=logging.__dict__[level], event_level=logging.__dict__[event_level]\n     )\n     for logger in ignorelist.split():\n         ignore_logger(logger)\n@@ -19,4 +15,5 @@ def sdk_init(\n     def filter(app):\n         sentry_sdk.init(dsn=dsn, integrations=[sentry_logging])\n         return app\n+\n     return filter\ndiff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py\nindex 1ed2993..3336fad 100644\n--- a/src/plone/recipe/zope2instance/tests/test_docs.py\n+++ b/src/plone/recipe/zope2instance/tests/test_docs.py\n@@ -14,11 +14,11 @@\n \n def setUp(test):\n     buildoutSetUp(test)\n-    install_develop(\'plone.recipe.zope2instance\', test)\n-    install(\'zc.recipe.egg\', test)\n-    install_dependencies(pkg_resources.working_set.require(\'ZEO\'), test)\n-    install_dependencies(pkg_resources.working_set.require(\'Zope\'), test)\n-    install_dependencies(pkg_resources.working_set.require(\'ZODB\'), test)\n+    install_develop("plone.recipe.zope2instance", test)\n+    install("zc.recipe.egg", test)\n+    install_dependencies(pkg_resources.working_set.require("ZEO"), test)\n+    install_dependencies(pkg_resources.working_set.require("Zope"), test)\n+    install_dependencies(pkg_resources.working_set.require("ZODB"), test)\n \n \n def install_dependencies(dependencies, test):\n@@ -33,35 +33,39 @@ def install_dependencies(dependencies, test):\n \n def tearDown(test):\n     buildoutTearDown(test)\n-    sample_buildout = test.globs[\'sample_buildout\']\n+    sample_buildout = test.globs["sample_buildout"]\n     shutil.rmtree(sample_buildout, ignore_errors=True)\n \n \n def test_suite():\n     suite = []\n-    flags = (\n-        doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE |\n-        doctest.REPORT_NDIFF)\n+    flags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE | doctest.REPORT_NDIFF\n \n-    suite.append(doctest.DocFileSuite(\n-        \'zope2instance_base.rst\',\n-        \'zope2instance_beforestorage.rst\',\n-        \'zope2instance_blobstorage.rst\',\n-        \'zope2instance_demostorage.rst\',\n-        \'zope2instance_relstorage.rst\',\n-        \'zope2instance_tempstorage_off.rst\',\n-        \'zope2instance_zeostorage.rst\',\n-        \'zope2instance_zlibstorage.rst\',\n-        \'wsgi.rst\',\n-        optionflags=flags,\n-        setUp=setUp,\n-        tearDown=tearDown))\n-\n-    if six.PY2:\n-        suite.append(doctest.DocFileSuite(\n-            \'zope2instance_zserver.rst\',\n+    suite.append(\n+        doctest.DocFileSuite(\n+            "zope2instance_base.rst",\n+            "zope2instance_beforestorage.rst",\n+            "zope2instance_blobstorage.rst",\n+            "zope2instance_demostorage.rst",\n+            "zope2instance_relstorage.rst",\n+            "zope2instance_tempstorage_off.rst",\n+            "zope2instance_zeostorage.rst",\n+            "zope2instance_zlibstorage.rst",\n+            "wsgi.rst",\n             optionflags=flags,\n             setUp=setUp,\n-            tearDown=tearDown))\n+            tearDown=tearDown,\n+        )\n+    )\n+\n+    if six.PY2:\n+        suite.append(\n+            doctest.DocFileSuite(\n+                "zope2instance_zserver.rst",\n+                optionflags=flags,\n+                setUp=setUp,\n+                tearDown=tearDown,\n+            )\n+        )\n \n     return unittest.TestSuite(suite)\ndiff --git a/src/plone/recipe/zope2instance/tests/test_wsgischema.py b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\nindex 71cb89e..0e71d78 100644\n--- a/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n+++ b/src/plone/recipe/zope2instance/tests/test_wsgischema.py\n@@ -13,6 +13,7 @@\n ##############################################################################\n \n from plone.recipe.zope2instance.ctl import WSGICtlOptions\n+\n import os\n import tempfile\n import unittest\n@@ -39,7 +40,6 @@ def getSchema():\n \n \n class StartupTestCase(unittest.TestCase):\n-\n     @property\n     def schema(self):\n         return getSchema()\n@@ -49,8 +49,7 @@ def load_config_text(self, text):\n         # of the directory is checked.  This handles this in a\n         # platform-independent way.\n         schema = self.schema\n-        sio = StringIO(\n-            text.replace("<<INSTANCE_HOME>>", TEMPNAME))\n+        sio = StringIO(text.replace("<<INSTANCE_HOME>>", TEMPNAME))\n         os.mkdir(TEMPNAME)\n         os.mkdir(TEMPVAR)\n         try:\n@@ -63,6 +62,7 @@ def load_config_text(self, text):\n \n     def test_load_config_template(self):\n         import Zope2.utilities\n+\n         base = os.path.dirname(Zope2.utilities.__file__)\n         fn = os.path.join(base, "skel", "etc", "zope.conf.in")\n         f = open(fn)\n@@ -71,21 +71,23 @@ def test_load_config_template(self):\n         self.load_config_text(text)\n \n     def test_environment(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             # instancehome is here since it\'s required\n             instancehome <<INSTANCE_HOME>>\n             <environment>\n               FEARFACTORY rocks\n               NSYNC doesnt\n             </environment>\n-            """)\n+            """\n+        )\n         items = list(conf.environment.items())\n         items.sort()\n-        self.assertEqual(\n-            items, [("FEARFACTORY", "rocks"), ("NSYNC", "doesnt")])\n+        self.assertEqual(items, [("FEARFACTORY", "rocks"), ("NSYNC", "doesnt")])\n \n     def test_zodb_db(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n             <zodb_db main>\n               <filestorage>\n@@ -95,43 +97,56 @@ def test_zodb_db(self):\n                 cache-size 5000\n                 pool-size 7\n             </zodb_db>\n-            """)\n+            """\n+        )\n         self.assertEqual(conf.databases[0].config.cache_size, 5000)\n \n     def test_max_conflict_retries_default(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n-            """)\n+            """\n+        )\n         self.assertEqual(conf.max_conflict_retries, 3)\n \n     def test_max_conflict_retries_explicit(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n             max-conflict-retries 15\n-            """)\n+            """\n+        )\n         self.assertEqual(conf.max_conflict_retries, 15)\n \n     def test_debug_exceptions_default(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n         instancehome <<INSTANCE_HOME>>\n-        """)\n+        """\n+        )\n         self.assertFalse(conf.debug_exceptions)\n \n     def test_debug_exceptions_explicit(self):\n-        conf, handler = self.load_config_text("""\\\n+        conf, handler = self.load_config_text(\n+            """\\\n         instancehome <<INSTANCE_HOME>>\n         debug-exceptions on\n-        """)\n+        """\n+        )\n         self.assertTrue(conf.debug_exceptions)\n \n     def test_default_zpublisher_encoding(self):\n-        conf, dummy = self.load_config_text("""\\\n+        conf, dummy = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n-            """)\n-        self.assertEqual(conf.default_zpublisher_encoding, \'utf-8\')\n+            """\n+        )\n+        self.assertEqual(conf.default_zpublisher_encoding, "utf-8")\n \n-        conf, dummy = self.load_config_text("""\\\n+        conf, dummy = self.load_config_text(\n+            """\\\n             instancehome <<INSTANCE_HOME>>\n             default-zpublisher-encoding iso-8859-15\n-            """)\n-        self.assertEqual(conf.default_zpublisher_encoding, \'iso-8859-15\')\n+            """\n+        )\n+        self.assertEqual(conf.default_zpublisher_encoding, "iso-8859-15")\ndiff --git a/tox.ini b/tox.ini\nindex fa62b55..12f0258 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -7,6 +7,8 @@ envlist =\n     py38,\n     py39,\n     flake8,\n+    black,\n+    isort\n     coverage\n \n skip_missing_interpreters = False\n@@ -44,7 +46,19 @@ commands =\n     coverage report\n \n [testenv:flake8]\n-basepython = python2.7\n+basepython = python3.8\n skip_install = true\n deps = flake8\n-commands = flake8 --doctests src setup.py\n+commands = flake8 --ignore=E203 --max-line-length=88 --doctests src setup.py\n+\n+[testenv:black]\n+basepython = python3.8\n+skip_install = true\n+deps = black\n+commands = black --check src setup.py\n+\n+[testenv:isort]\n+basepython = python3.8\n+skip_install = true\n+deps = isort\n+commands = isort --check-only --df src setup.py\n\\ No newline at end of file\n'

