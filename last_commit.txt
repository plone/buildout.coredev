Repository: plone.rest


Branch: refs/heads/master
Date: 2023-09-19T12:39:57+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.rest/commit/db0cb9adb7f483bffb3e1ab06d1270c7db0b04a8

When ++api++ is in the url multiple times, redirect to the proper url.

When the url is badly formed, for example `++api++/something/++api++`, give a 404 NotFound.
Fixes a denial of service.

Files changed:
A news/1.bugfix
M src/plone/rest/tests/test_traversal.py
M src/plone/rest/traverse.py

b'diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..019268d\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,5 @@\n+When ``++api++`` is in the url multiple times, redirect to the proper url.\n+When the url is badly formed, for example ``++api++/something/++api++``, give a 404 NotFound.\n+Fixes a denial of service.\n+See `security advisory <https://github.com/plone/plone.rest/security/advisories/GHSA-h6rp-mprm-xgcq>`_.\n+[maurits]\ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 963d1c4..5d5389d 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -10,6 +10,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.rest.service import Service\n from plone.rest.testing import PLONE_REST_INTEGRATION_TESTING\n+from zExceptions import NotFound\n+from zExceptions import Redirect\n from zope.event import notify\n from zope.interface import alsoProvides\n from zope.publisher.interfaces.browser import IBrowserView\n@@ -106,6 +108,34 @@ def test_html_request_on_existing_view_returns_view(self):\n         obj = self.traverse(path="/plone/folder1/search", accept="text/html")\n         self.assertFalse(isinstance(obj, Service), "Got a service")\n \n+    def test_html_request_via_api_returns_service(self):\n+        obj = self.traverse(path="/plone/++api++", accept="text/html")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n+\n+    def test_html_request_via_double_apis_raises_redirect(self):\n+        portal_url = self.portal.absolute_url()\n+        with self.assertRaises(Redirect) as exc:\n+            self.traverse(path="/plone/++api++/++api++", accept="text/html")\n+        self.assertEqual(\n+            exc.exception.headers["Location"],\n+            f"{portal_url}/++api++",\n+        )\n+\n+    def test_html_request_via_multiple_apis_raises_redirect(self):\n+        portal_url = self.portal.absolute_url()\n+        with self.assertRaises(Redirect) as exc:\n+            self.traverse(\n+                path="/plone/++api++/++api++/++api++/search", accept="text/html"\n+            )\n+        self.assertEqual(\n+            exc.exception.headers["Location"],\n+            f"{portal_url}/++api++/search",\n+        )\n+\n+    def test_html_request_via_multiple_bad_apis_raises_not_found(self):\n+        with self.assertRaises(NotFound):\n+            self.traverse(path="/plone/++api++/search/++api++", accept="text/html")\n+\n     def test_virtual_hosting(self):\n         app = self.layer["app"]\n         vhm = VirtualHostMonster()\ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex f8d4a23..0a151c8 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -5,6 +5,7 @@\n from plone.rest.interfaces import IAPIRequest\n from plone.rest.interfaces import IService\n from plone.rest.events import mark_as_api_request\n+from zExceptions import Redirect\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n@@ -64,6 +65,18 @@ def __init__(self, context, request):\n         self.request = request\n \n     def traverse(self, name_ignored, subpath_ignored):\n+        name = "/++api++"\n+        url = self.request.ACTUAL_URL\n+        if url.count(name) > 1:\n+            # Redirect to proper url.\n+            while f"{name}{name}" in url:\n+                url = url.replace(f"{name}{name}", name)\n+            if url.count(name) > 1:\n+                # Something like: .../++api++/something/++api++\n+                # Return nothing, so a NotFound is raised.\n+                return\n+            # Raise a redirect exception to stop execution of the current request.\n+            raise Redirect(url)\n         mark_as_api_request(self.request, "application/json")\n         return self.context\n \n'

Repository: plone.rest


Branch: refs/heads/master
Date: 2023-09-21T13:15:43+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.rest/commit/77846a9842889b24f35e8bedc2e9d461388d3302

Merge pull request from GHSA-h6rp-mprm-xgcq

When ++api++ is in the url multiple times, redirect to the proper url. [master]

Files changed:
A news/1.bugfix
M src/plone/rest/tests/test_traversal.py
M src/plone/rest/traverse.py

b'diff --git a/news/1.bugfix b/news/1.bugfix\nnew file mode 100644\nindex 0000000..019268d\n--- /dev/null\n+++ b/news/1.bugfix\n@@ -0,0 +1,5 @@\n+When ``++api++`` is in the url multiple times, redirect to the proper url.\n+When the url is badly formed, for example ``++api++/something/++api++``, give a 404 NotFound.\n+Fixes a denial of service.\n+See `security advisory <https://github.com/plone/plone.rest/security/advisories/GHSA-h6rp-mprm-xgcq>`_.\n+[maurits]\ndiff --git a/src/plone/rest/tests/test_traversal.py b/src/plone/rest/tests/test_traversal.py\nindex 963d1c4..5d5389d 100644\n--- a/src/plone/rest/tests/test_traversal.py\n+++ b/src/plone/rest/tests/test_traversal.py\n@@ -10,6 +10,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.rest.service import Service\n from plone.rest.testing import PLONE_REST_INTEGRATION_TESTING\n+from zExceptions import NotFound\n+from zExceptions import Redirect\n from zope.event import notify\n from zope.interface import alsoProvides\n from zope.publisher.interfaces.browser import IBrowserView\n@@ -106,6 +108,34 @@ def test_html_request_on_existing_view_returns_view(self):\n         obj = self.traverse(path="/plone/folder1/search", accept="text/html")\n         self.assertFalse(isinstance(obj, Service), "Got a service")\n \n+    def test_html_request_via_api_returns_service(self):\n+        obj = self.traverse(path="/plone/++api++", accept="text/html")\n+        self.assertTrue(isinstance(obj, Service), "Not a service")\n+\n+    def test_html_request_via_double_apis_raises_redirect(self):\n+        portal_url = self.portal.absolute_url()\n+        with self.assertRaises(Redirect) as exc:\n+            self.traverse(path="/plone/++api++/++api++", accept="text/html")\n+        self.assertEqual(\n+            exc.exception.headers["Location"],\n+            f"{portal_url}/++api++",\n+        )\n+\n+    def test_html_request_via_multiple_apis_raises_redirect(self):\n+        portal_url = self.portal.absolute_url()\n+        with self.assertRaises(Redirect) as exc:\n+            self.traverse(\n+                path="/plone/++api++/++api++/++api++/search", accept="text/html"\n+            )\n+        self.assertEqual(\n+            exc.exception.headers["Location"],\n+            f"{portal_url}/++api++/search",\n+        )\n+\n+    def test_html_request_via_multiple_bad_apis_raises_not_found(self):\n+        with self.assertRaises(NotFound):\n+            self.traverse(path="/plone/++api++/search/++api++", accept="text/html")\n+\n     def test_virtual_hosting(self):\n         app = self.layer["app"]\n         vhm = VirtualHostMonster()\ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex f8d4a23..0a151c8 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -5,6 +5,7 @@\n from plone.rest.interfaces import IAPIRequest\n from plone.rest.interfaces import IService\n from plone.rest.events import mark_as_api_request\n+from zExceptions import Redirect\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n@@ -64,6 +65,18 @@ def __init__(self, context, request):\n         self.request = request\n \n     def traverse(self, name_ignored, subpath_ignored):\n+        name = "/++api++"\n+        url = self.request.ACTUAL_URL\n+        if url.count(name) > 1:\n+            # Redirect to proper url.\n+            while f"{name}{name}" in url:\n+                url = url.replace(f"{name}{name}", name)\n+            if url.count(name) > 1:\n+                # Something like: .../++api++/something/++api++\n+                # Return nothing, so a NotFound is raised.\n+                return\n+            # Raise a redirect exception to stop execution of the current request.\n+            raise Redirect(url)\n         mark_as_api_request(self.request, "application/json")\n         return self.context\n \n'

