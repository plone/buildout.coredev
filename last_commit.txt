Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-09-17T11:11:19+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/09e3a5fdde8e76144aeeeaa5962b3802daef1f40

Fix tests with Products.MailHost 4.10.

Also bring our MockMailHost.send method in line with Products.MailHost 4.10.
We were not passing the 'encode' argument.  (Code may now pass for example encode="8bit".)

Files changed:
A news/3178.bugfix
M Products/CMFPlone/tests/emaillogin.rst
M Products/CMFPlone/tests/mails.txt
M Products/CMFPlone/tests/pwreset_browser.rst
M Products/CMFPlone/tests/testRegistrationTool.py
M Products/CMFPlone/tests/test_login_help.py
M Products/CMFPlone/tests/utils.py

b'diff --git a/Products/CMFPlone/tests/emaillogin.rst b/Products/CMFPlone/tests/emaillogin.rst\nindex 739d75d64d..343bec0525 100644\n--- a/Products/CMFPlone/tests/emaillogin.rst\n+++ b/Products/CMFPlone/tests/emaillogin.rst\n@@ -224,7 +224,7 @@ in a list called ``messages``::\n Now that we have the message, we want to look at its contents, and\n then we extract the address that lets us reset our password::\n \n-    >>> "To: email2@example.org" in msg\n+    >>> b"To: email2@example.org" in msg\n     True\n \n Now get the link::\n@@ -265,7 +265,7 @@ The email is sent to the correct email address::\n     >>> len(mailhost.messages)\n     2\n     >>> msg = mailhost.messages[-1]\n-    >>> "To: username@example.org" in msg\n+    >>> b"To: username@example.org" in msg\n     True\n \n Now get the link::\ndiff --git a/Products/CMFPlone/tests/mails.txt b/Products/CMFPlone/tests/mails.txt\nindex 8cd6665a8e..183b2cbbb8 100644\n--- a/Products/CMFPlone/tests/mails.txt\n+++ b/Products/CMFPlone/tests/mails.txt\n@@ -47,15 +47,15 @@ in a list called ``messages``:\n \n Now that we have the message, we want to look at its contents:\n \n-  >>> \'To: mail@plone.test\' in msg\n+  >>> b\'To: mail@plone.test\' in msg\n   True\n \n-  >>> \'From: mail@plone.test\' in msg\n+  >>> b\'From: mail@plone.test\' in msg\n   True\n \n We expect the headers to be properly header encoded (7-bit):\n \n-  >>> \'Subject: =?utf-8?q?Some_t=C3=A4st_subject=2E?=\' in msg\n+  >>> b\'Subject: =?utf-8?q?Some_t=C3=A4st_subject=2E?=\' in msg\n   True\n \n The output should be encoded in a reasonable manner (in this case\n@@ -63,8 +63,8 @@ quoted-printable).  There may be some small differences in where\n exactly the lines are cut off, depending on whether you use five.pt\n (in Zope 2.13) or not, so we turn the message into one line first:\n \n-  >>> msg.replace(\'=\\n\', \'\').replace(\'\\n\', \' \')\n-  \'...Another t=C3=A4st message...You are receiving this mail because T=C3=A4st user test@plone.test...is sending feedback about the site you administer at...\n+  >>> msg.replace(b\'=\\n\', b\'\').replace(b\'\\n\', b\' \')\n+  b\'...Another t=C3=A4st message...You are receiving this mail because T=C3=A4st user test@plone.test...is sending feedback about the site you administer at...\n \n We can also decode the string, though we should still be careful about\n lines ending in different spots:\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex 7cc16a1a76..e12dbcb9c1 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -326,7 +326,7 @@ We should have received an e-mail at this point:\n   >>> len(mailhost.messages)\n   2\n   >>> import quopri\n-  >>> msg = quopri.decodestring(str(mailhost.messages[-1]))\n+  >>> msg = quopri.decodestring(mailhost.messages[-1])\n   >>> b"The site administrator asks you to reset your password for \'wsmith\' userid" in msg\n   True\n   >>> please_visit_text = b"The following link will take you to a page where you can reset your password for Plone site site:"\n@@ -400,7 +400,7 @@ We should have received an e-mail at this point:\n   >>> mailhost = layer[\'portal\'].MailHost\n   >>> len(mailhost.messages)\n   3\n-  >>> msg = str(mailhost.messages[-1])\n+  >>> msg = mailhost.messages[-1]\n \n Let\'s clear the events storage:\n \n@@ -412,7 +412,7 @@ then we extract the address that lets us reset our password:\n   >>> from email.parser import Parser\n   >>> import re\n   >>> parser = Parser()\n-  >>> message = parser.parsestr(msg)\n+  >>> message = parser.parsestr(msg.decode("utf-8"))\n   >>> message["To"]\n   \'bsmith@example.com\'\n   >>> msgtext = quopri.decodestring(message.get_payload())\n@@ -498,12 +498,12 @@ We should have received an e-mail at this point:\n   >>> mailhost = layer[\'portal\'].MailHost\n   >>> len(mailhost.messages)\n   4\n-  >>> msg = str(mailhost.messages[-1])\n+  >>> msg = mailhost.messages[-1]\n \n Now that we have the message, we want to look at its contents, and\n then we extract the address that lets us reset our password:\n \n-  >>> message = parser.parsestr(msg)\n+  >>> message = parser.parsestr(msg.decode("utf-8"))\n   >>> message["To"]\n   \'wwwsmith@example.com\'\n   >>> msgtext = quopri.decodestring(message.get_payload())\ndiff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py\nindex 07471f404a..0a922935f1 100644\n--- a/Products/CMFPlone/tests/testRegistrationTool.py\n+++ b/Products/CMFPlone/tests/testRegistrationTool.py\n@@ -8,12 +8,18 @@\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n-from email import message_from_string\n from plone.registry.interfaces import IRegistry\n from zope.component import getSiteManager, getUtility\n \n member_id = \'new_member\'\n \n+try:\n+    # Python 3\n+    from email import message_from_bytes\n+except ImportError:\n+    # Python 2\n+    from email import message_from_string as message_from_bytes\n+\n \n class TestRegistrationTool(PloneTestCase.PloneTestCase):\n \n@@ -150,7 +156,7 @@ def testRegisteredNotify(self):\n         # Notify the registered user\n         self.registration.registeredNotify(member_id)\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n         # We get an encoded subject\n         self.assertEqual(\n             msg[\'Subject\'],\n@@ -182,7 +188,7 @@ def testRegisteredNotifyEncoding(self):\n         # Notify the registered user\n         self.registration.registeredNotify(member_id)\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n \n         # Ensure charset (and thus Content-Type) were set via template\n         self.assertEqual(msg[\'Content-Type\'], \'text/plain; charset="us-ascii"\')\n@@ -209,7 +215,7 @@ def testMailPassword(self):\n         from zope.publisher.browser import TestRequest\n         self.registration.mailPassword(member_id, TestRequest())\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n         # We get an encoded subject\n         self.assertEqual(msg[\'Subject\'],\n                          \'=?utf-8?q?Password_reset_request?=\')\n@@ -242,7 +248,7 @@ def testMailPasswordEncoding(self):\n         from zope.publisher.browser import TestRequest\n         self.registration.mailPassword(member_id, TestRequest())\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n \n         # Ensure charset (and thus Content-Type) were set via template\n         self.assertEqual(msg[\'Content-Type\'], \'text/plain; charset="us-ascii"\')\ndiff --git a/Products/CMFPlone/tests/test_login_help.py b/Products/CMFPlone/tests/test_login_help.py\nindex 6aa9640a0b..a004f603c6 100644\n--- a/Products/CMFPlone/tests/test_login_help.py\n+++ b/Products/CMFPlone/tests/test_login_help.py\n@@ -70,8 +70,8 @@ def test_request_reset_password(self):\n         self.assertEqual(reset_password.status, \'\')\n         self.assertEqual(len(self.portal.MailHost.messages), 1)\n         message = self.portal.MailHost.messages[0]\n-        self.assertIn(\'To: foo@plone.org\', message)\n-        self.assertIn(\'http://nohost/plone/passwordreset/\', message)\n+        self.assertIn(b\'To: foo@plone.org\', message)\n+        self.assertIn(b\'http://nohost/plone/passwordreset/\', message)\n \n \n class TestLoginHelpFunctional(unittest.TestCase):\n@@ -140,8 +140,8 @@ def test_login_help_request_username(self):\n             \'email has been sent with your username.\', self.browser.contents)\n         self.assertEqual(len(self.portal.MailHost.messages), 1)\n         message = self.portal.MailHost.messages[0]\n-        self.assertIn(\'To: foo@plone.org\', message)\n-        self.assertIn(\'Your username is: test_user_1_\', message)\n+        self.assertIn(b\'To: foo@plone.org\', message)\n+        self.assertIn(b\'Your username is: test_user_1_\', message)\n \n         self.browser.getControl(\n             name=\'form.widgets.recover_username\').value = \'noemail\'\ndiff --git a/Products/CMFPlone/tests/utils.py b/Products/CMFPlone/tests/utils.py\nindex df10eeb296..3dbefe12b9 100644\n--- a/Products/CMFPlone/tests/utils.py\n+++ b/Products/CMFPlone/tests/utils.py\n@@ -48,13 +48,25 @@ def _send(self, mfrom, mto, messageText, immediate=False):\n         """ Send the message """\n         self.messages.append(messageText)\n \n-    def send(self, messageText, mto=None, mfrom=None, subject=None,\n-             encode=None, immediate=False, charset=None, msg_type=None):\n-        messageText, mto, mfrom = _mungeHeaders(messageText,\n-                                                mto, mfrom, subject,\n-                                                charset=charset,\n-                                                msg_type=msg_type)\n-        self.messages.append(messageText)\n+    def send(self,\n+             messageText,\n+             mto=None,\n+             mfrom=None,\n+             subject=None,\n+             encode=None,\n+             immediate=False,\n+             charset=None,\n+             msg_type=None):\n+        """send *messageText* modified by the other parameters.\n+\n+        *messageText* can either be an ``email.message.Message``\n+        or a string.\n+        Note that Products.MailHost 4.10 had changes here.\n+        """\n+        msg, mto, mfrom = _mungeHeaders(messageText, mto, mfrom,\n+                                        subject, charset, msg_type,\n+                                        encode)\n+        self.messages.append(msg)\n \n \n # a function to test if a string is a valid CSS identifier\ndiff --git a/news/3178.bugfix b/news/3178.bugfix\nnew file mode 100644\nindex 0000000000..c62697d906\n--- /dev/null\n+++ b/news/3178.bugfix\n@@ -0,0 +1,2 @@\n+Fix tests with Products.MailHost 4.10.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-09-17T11:44:24+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/5777f578770edd919a47c732cc8c911850cd06d6

Fix test on Py 2.

The Py23DocChecker was not kicking in because a quote was missing at the end.

Files changed:
M Products/CMFPlone/tests/mails.txt

b"diff --git a/Products/CMFPlone/tests/mails.txt b/Products/CMFPlone/tests/mails.txt\nindex 183b2cbbb8..756208fa87 100644\n--- a/Products/CMFPlone/tests/mails.txt\n+++ b/Products/CMFPlone/tests/mails.txt\n@@ -64,7 +64,7 @@ exactly the lines are cut off, depending on whether you use five.pt\n (in Zope 2.13) or not, so we turn the message into one line first:\n \n   >>> msg.replace(b'=\\n', b'').replace(b'\\n', b' ')\n-  b'...Another t=C3=A4st message...You are receiving this mail because T=C3=A4st user test@plone.test...is sending feedback about the site you administer at...\n+  b'...Another t=C3=A4st message...You are receiving this mail because T=C3=A4st user test@plone.test...is sending feedback about the site you administer at...'\n \n We can also decode the string, though we should still be careful about\n lines ending in different spots:\n"

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-09-25T16:40:51+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/Products.CMFPlone/commit/90fa276e2db73bcd149b2d4105569cf9feb0aa6c

Merge pull request #3179 from plone/mailhost-410

Fix tests with Products.MailHost 4.10.

Files changed:
A news/3178.bugfix
M Products/CMFPlone/tests/emaillogin.rst
M Products/CMFPlone/tests/mails.txt
M Products/CMFPlone/tests/pwreset_browser.rst
M Products/CMFPlone/tests/testRegistrationTool.py
M Products/CMFPlone/tests/test_login_help.py
M Products/CMFPlone/tests/utils.py

b'diff --git a/Products/CMFPlone/tests/emaillogin.rst b/Products/CMFPlone/tests/emaillogin.rst\nindex 739d75d64d..343bec0525 100644\n--- a/Products/CMFPlone/tests/emaillogin.rst\n+++ b/Products/CMFPlone/tests/emaillogin.rst\n@@ -224,7 +224,7 @@ in a list called ``messages``::\n Now that we have the message, we want to look at its contents, and\n then we extract the address that lets us reset our password::\n \n-    >>> "To: email2@example.org" in msg\n+    >>> b"To: email2@example.org" in msg\n     True\n \n Now get the link::\n@@ -265,7 +265,7 @@ The email is sent to the correct email address::\n     >>> len(mailhost.messages)\n     2\n     >>> msg = mailhost.messages[-1]\n-    >>> "To: username@example.org" in msg\n+    >>> b"To: username@example.org" in msg\n     True\n \n Now get the link::\ndiff --git a/Products/CMFPlone/tests/mails.txt b/Products/CMFPlone/tests/mails.txt\nindex 8cd6665a8e..756208fa87 100644\n--- a/Products/CMFPlone/tests/mails.txt\n+++ b/Products/CMFPlone/tests/mails.txt\n@@ -47,15 +47,15 @@ in a list called ``messages``:\n \n Now that we have the message, we want to look at its contents:\n \n-  >>> \'To: mail@plone.test\' in msg\n+  >>> b\'To: mail@plone.test\' in msg\n   True\n \n-  >>> \'From: mail@plone.test\' in msg\n+  >>> b\'From: mail@plone.test\' in msg\n   True\n \n We expect the headers to be properly header encoded (7-bit):\n \n-  >>> \'Subject: =?utf-8?q?Some_t=C3=A4st_subject=2E?=\' in msg\n+  >>> b\'Subject: =?utf-8?q?Some_t=C3=A4st_subject=2E?=\' in msg\n   True\n \n The output should be encoded in a reasonable manner (in this case\n@@ -63,8 +63,8 @@ quoted-printable).  There may be some small differences in where\n exactly the lines are cut off, depending on whether you use five.pt\n (in Zope 2.13) or not, so we turn the message into one line first:\n \n-  >>> msg.replace(\'=\\n\', \'\').replace(\'\\n\', \' \')\n-  \'...Another t=C3=A4st message...You are receiving this mail because T=C3=A4st user test@plone.test...is sending feedback about the site you administer at...\n+  >>> msg.replace(b\'=\\n\', b\'\').replace(b\'\\n\', b\' \')\n+  b\'...Another t=C3=A4st message...You are receiving this mail because T=C3=A4st user test@plone.test...is sending feedback about the site you administer at...\'\n \n We can also decode the string, though we should still be careful about\n lines ending in different spots:\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex 7cc16a1a76..e12dbcb9c1 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -326,7 +326,7 @@ We should have received an e-mail at this point:\n   >>> len(mailhost.messages)\n   2\n   >>> import quopri\n-  >>> msg = quopri.decodestring(str(mailhost.messages[-1]))\n+  >>> msg = quopri.decodestring(mailhost.messages[-1])\n   >>> b"The site administrator asks you to reset your password for \'wsmith\' userid" in msg\n   True\n   >>> please_visit_text = b"The following link will take you to a page where you can reset your password for Plone site site:"\n@@ -400,7 +400,7 @@ We should have received an e-mail at this point:\n   >>> mailhost = layer[\'portal\'].MailHost\n   >>> len(mailhost.messages)\n   3\n-  >>> msg = str(mailhost.messages[-1])\n+  >>> msg = mailhost.messages[-1]\n \n Let\'s clear the events storage:\n \n@@ -412,7 +412,7 @@ then we extract the address that lets us reset our password:\n   >>> from email.parser import Parser\n   >>> import re\n   >>> parser = Parser()\n-  >>> message = parser.parsestr(msg)\n+  >>> message = parser.parsestr(msg.decode("utf-8"))\n   >>> message["To"]\n   \'bsmith@example.com\'\n   >>> msgtext = quopri.decodestring(message.get_payload())\n@@ -498,12 +498,12 @@ We should have received an e-mail at this point:\n   >>> mailhost = layer[\'portal\'].MailHost\n   >>> len(mailhost.messages)\n   4\n-  >>> msg = str(mailhost.messages[-1])\n+  >>> msg = mailhost.messages[-1]\n \n Now that we have the message, we want to look at its contents, and\n then we extract the address that lets us reset our password:\n \n-  >>> message = parser.parsestr(msg)\n+  >>> message = parser.parsestr(msg.decode("utf-8"))\n   >>> message["To"]\n   \'wwwsmith@example.com\'\n   >>> msgtext = quopri.decodestring(message.get_payload())\ndiff --git a/Products/CMFPlone/tests/testRegistrationTool.py b/Products/CMFPlone/tests/testRegistrationTool.py\nindex 07471f404a..0a922935f1 100644\n--- a/Products/CMFPlone/tests/testRegistrationTool.py\n+++ b/Products/CMFPlone/tests/testRegistrationTool.py\n@@ -8,12 +8,18 @@\n from Products.CMFPlone.tests import PloneTestCase\n from Products.CMFPlone.tests.utils import MockMailHost\n from Products.MailHost.interfaces import IMailHost\n-from email import message_from_string\n from plone.registry.interfaces import IRegistry\n from zope.component import getSiteManager, getUtility\n \n member_id = \'new_member\'\n \n+try:\n+    # Python 3\n+    from email import message_from_bytes\n+except ImportError:\n+    # Python 2\n+    from email import message_from_string as message_from_bytes\n+\n \n class TestRegistrationTool(PloneTestCase.PloneTestCase):\n \n@@ -150,7 +156,7 @@ def testRegisteredNotify(self):\n         # Notify the registered user\n         self.registration.registeredNotify(member_id)\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n         # We get an encoded subject\n         self.assertEqual(\n             msg[\'Subject\'],\n@@ -182,7 +188,7 @@ def testRegisteredNotifyEncoding(self):\n         # Notify the registered user\n         self.registration.registeredNotify(member_id)\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n \n         # Ensure charset (and thus Content-Type) were set via template\n         self.assertEqual(msg[\'Content-Type\'], \'text/plain; charset="us-ascii"\')\n@@ -209,7 +215,7 @@ def testMailPassword(self):\n         from zope.publisher.browser import TestRequest\n         self.registration.mailPassword(member_id, TestRequest())\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n         # We get an encoded subject\n         self.assertEqual(msg[\'Subject\'],\n                          \'=?utf-8?q?Password_reset_request?=\')\n@@ -242,7 +248,7 @@ def testMailPasswordEncoding(self):\n         from zope.publisher.browser import TestRequest\n         self.registration.mailPassword(member_id, TestRequest())\n         self.assertEqual(len(mails.messages), 1)\n-        msg = message_from_string(mails.messages[0])\n+        msg = message_from_bytes(mails.messages[0])\n \n         # Ensure charset (and thus Content-Type) were set via template\n         self.assertEqual(msg[\'Content-Type\'], \'text/plain; charset="us-ascii"\')\ndiff --git a/Products/CMFPlone/tests/test_login_help.py b/Products/CMFPlone/tests/test_login_help.py\nindex 6aa9640a0b..a004f603c6 100644\n--- a/Products/CMFPlone/tests/test_login_help.py\n+++ b/Products/CMFPlone/tests/test_login_help.py\n@@ -70,8 +70,8 @@ def test_request_reset_password(self):\n         self.assertEqual(reset_password.status, \'\')\n         self.assertEqual(len(self.portal.MailHost.messages), 1)\n         message = self.portal.MailHost.messages[0]\n-        self.assertIn(\'To: foo@plone.org\', message)\n-        self.assertIn(\'http://nohost/plone/passwordreset/\', message)\n+        self.assertIn(b\'To: foo@plone.org\', message)\n+        self.assertIn(b\'http://nohost/plone/passwordreset/\', message)\n \n \n class TestLoginHelpFunctional(unittest.TestCase):\n@@ -140,8 +140,8 @@ def test_login_help_request_username(self):\n             \'email has been sent with your username.\', self.browser.contents)\n         self.assertEqual(len(self.portal.MailHost.messages), 1)\n         message = self.portal.MailHost.messages[0]\n-        self.assertIn(\'To: foo@plone.org\', message)\n-        self.assertIn(\'Your username is: test_user_1_\', message)\n+        self.assertIn(b\'To: foo@plone.org\', message)\n+        self.assertIn(b\'Your username is: test_user_1_\', message)\n \n         self.browser.getControl(\n             name=\'form.widgets.recover_username\').value = \'noemail\'\ndiff --git a/Products/CMFPlone/tests/utils.py b/Products/CMFPlone/tests/utils.py\nindex df10eeb296..3dbefe12b9 100644\n--- a/Products/CMFPlone/tests/utils.py\n+++ b/Products/CMFPlone/tests/utils.py\n@@ -48,13 +48,25 @@ def _send(self, mfrom, mto, messageText, immediate=False):\n         """ Send the message """\n         self.messages.append(messageText)\n \n-    def send(self, messageText, mto=None, mfrom=None, subject=None,\n-             encode=None, immediate=False, charset=None, msg_type=None):\n-        messageText, mto, mfrom = _mungeHeaders(messageText,\n-                                                mto, mfrom, subject,\n-                                                charset=charset,\n-                                                msg_type=msg_type)\n-        self.messages.append(messageText)\n+    def send(self,\n+             messageText,\n+             mto=None,\n+             mfrom=None,\n+             subject=None,\n+             encode=None,\n+             immediate=False,\n+             charset=None,\n+             msg_type=None):\n+        """send *messageText* modified by the other parameters.\n+\n+        *messageText* can either be an ``email.message.Message``\n+        or a string.\n+        Note that Products.MailHost 4.10 had changes here.\n+        """\n+        msg, mto, mfrom = _mungeHeaders(messageText, mto, mfrom,\n+                                        subject, charset, msg_type,\n+                                        encode)\n+        self.messages.append(msg)\n \n \n # a function to test if a string is a valid CSS identifier\ndiff --git a/news/3178.bugfix b/news/3178.bugfix\nnew file mode 100644\nindex 0000000000..c62697d906\n--- /dev/null\n+++ b/news/3178.bugfix\n@@ -0,0 +1,2 @@\n+Fix tests with Products.MailHost 4.10.\n+[maurits]\n'

