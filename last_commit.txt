Repository: plone.restapi


Branch: refs/heads/main
Date: 2024-05-17T12:17:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/c7b8e076deeb3c1f4b468521d0ecabfb0731483a

Support for plone.app.discussion as core add-on (#1781)

* No discussion related settings needed in a pa.iterate test.

* for tests, explicitly pull in pa.discussion and apply it's profile.

* add a note to the docs docs/source/endpoints/comments.md

* conditional usage of plone.app.discussion (endpoint)

* black,  zpretty

---------

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

Files changed:
A news/1781.bugfix
M docs/source/endpoints/comments.md
M setup.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/testing.py
M src/plone/restapi/tests/statictime.py
M src/plone/restapi/tests/test_statictime.py

b'diff --git a/docs/source/endpoints/comments.md b/docs/source/endpoints/comments.md\nindex 8864da61e..5be81aefe 100644\n--- a/docs/source/endpoints/comments.md\n+++ b/docs/source/endpoints/comments.md\n@@ -9,7 +9,12 @@ myst:\n \n # Comments\n \n-Plone offers to users a feature to post comments on any content object with `plone.app.discussion`.\n+```{versionchanged} Plone 6.1\n+Discussion is disabled by default in Plone 6.1 and later.\n+To enable discussion, see the Plone 6.1 upgrade guide section {ref}`backend-upgrade-plone-v61-discussion-label`.\n+```\n+\n+Discussion is a feature that allows your site visitors to comment on web pages for any content object.\n \n Commenting can be enabled globally for specific content types and for single content objects.\n \ndiff --git a/news/1781.bugfix b/news/1781.bugfix\nnew file mode 100644\nindex 000000000..c7a5197bd\n--- /dev/null\n+++ b/news/1781.bugfix\n@@ -0,0 +1 @@\n+Make plone.app.discussion an optional dependency (core add-on) [@jensens]\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 4863cdf89..7e041a3ff 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,6 +44,7 @@ def read(filename):\n     "plone.app.caching",\n     "plone.app.contenttypes[test]",\n     "plone.app.iterate",\n+    "plone.app.discussion[test]",\n     "plone.app.testing",\n     "plone.app.upgrade",\n     "plone.api",\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 614f3d415..c1117121a 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -107,8 +107,10 @@\n \n   <adapter factory=".registry.SerializeRegistryToJson" />\n \n-  <adapter factory=".discussion.ConversationSerializer" />\n-  <adapter factory=".discussion.CommentSerializer" />\n+  <configure zcml:condition="installed plone.app.discussion">\n+    <adapter factory=".discussion.ConversationSerializer" />\n+    <adapter factory=".discussion.CommentSerializer" />\n+  </configure>\n \n   <include package=".controlpanels" />\n \ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex ed31ccf12..1f56801bd 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -18,7 +18,10 @@\n   <include package=".controlpanels" />\n   <include package=".copymove" />\n   <include package=".database" />\n-  <include package=".discussion" />\n+  <include\n+      package=".discussion"\n+      zcml:condition="installed plone.app.discussion"\n+      />\n   <include package=".groups" />\n   <include package=".navigation" />\n   <include package=".contextnavigation" />\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 7ed7c0358..adc4d184b 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -135,6 +135,9 @@ def setUpPloneSite(self, portal):\n \n         set_supported_languages(portal)\n \n+        if portal.portal_setup.profileExists("plone.app.discussion:default"):\n+            applyProfile(portal, "plone.app.discussion:default")\n+\n         applyProfile(portal, "plone.restapi:default")\n         applyProfile(portal, "plone.restapi:testing")\n         add_catalog_indexes(portal, DX_TYPES_INDEXES)\ndiff --git a/src/plone/restapi/tests/statictime.py b/src/plone/restapi/tests/statictime.py\nindex 6357c1966..3f138b1b8 100644\n--- a/src/plone/restapi/tests/statictime.py\n+++ b/src/plone/restapi/tests/statictime.py\n@@ -1,7 +1,6 @@\n from datetime import datetime\n from datetime import timezone\n from DateTime import DateTime\n-from plone.app.discussion.comment import Comment\n from plone.app.layout.viewlets.content import ContentHistoryViewlet\n from plone.dexterity.content import DexterityContent\n from plone.locking.lockable import TTWLockable\n@@ -9,6 +8,11 @@\n from Products.CMFCore.WorkflowTool import _marker\n from Products.CMFCore.WorkflowTool import WorkflowTool\n \n+try:\n+    from plone.app.discussion.comment import Comment\n+except ImportError:\n+    Comment = None\n+\n \n _originals = {\n     "WorkflowTool.getInfoFor": WorkflowTool.getInfoFor,\n@@ -106,19 +110,21 @@ def start(self):\n         DexterityContent.modification_date = property(\n             static_modification_date_getter_factory(self.static_modified), nop_setter\n         )\n-\n-        # Patch the lightweight p.a.discussion \'Comment\' type. Its dates are\n-        # Python datetimes, unlike DX Content types which use zope DateTimes.\n-        Comment.creation_date = property(\n-            static_creation_date_getter_factory(self.static_created, type_=datetime),\n-            nop_setter,\n-        )\n-        Comment.modification_date = property(\n-            static_modification_date_getter_factory(\n-                self.static_modified, type_=datetime\n-            ),\n-            nop_setter,\n-        )\n+        if Comment is not None:\n+            # Patch the lightweight p.a.discussion \'Comment\' type. Its dates are\n+            # Python datetimes, unlike DX Content types which use zope DateTimes.\n+            Comment.creation_date = property(\n+                static_creation_date_getter_factory(\n+                    self.static_created, type_=datetime\n+                ),\n+                nop_setter,\n+            )\n+            Comment.modification_date = property(\n+                static_modification_date_getter_factory(\n+                    self.static_modified, type_=datetime\n+                ),\n+                nop_setter,\n+            )\n \n         WorkflowTool.getInfoFor = static_get_info_for_factory(self.static_modified)\n \n@@ -138,8 +144,9 @@ def stop(self):\n         ]\n         WorkflowTool.getInfoFor = _originals["WorkflowTool.getInfoFor"]\n \n-        Comment.modification_date = None\n-        Comment.creation_date = None\n+        if Comment is not None:\n+            Comment.modification_date = None\n+            Comment.creation_date = None\n \n         WorkingCopyInfo.created = _originals["WorkingCopyInfo.created"]\n \ndiff --git a/src/plone/restapi/tests/test_statictime.py b/src/plone/restapi/tests/test_statictime.py\nindex 38ba23a3d..2cd654c19 100644\n--- a/src/plone/restapi/tests/test_statictime.py\n+++ b/src/plone/restapi/tests/test_statictime.py\n@@ -299,10 +299,6 @@ def setUp(self):\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n \n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(IDiscussionSettings, check=False)\n-        settings.globally_enabled = True\n-\n         transaction.commit()\n \n     def create_document(self, id_):\n'

