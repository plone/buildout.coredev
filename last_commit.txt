Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2024-05-03T10:57:53+02:00
Author: Paul Grunewald (pgrunewald) <paul.grunewald@tu-dresden.de>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/80cdac13796b55ed0e9f33c035ebe5b09f706d17

Fix breaches reporting for documents with multiple links

Files changed:
A news/102.bugfix
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/tests/test_references.py

b'diff --git a/news/102.bugfix b/news/102.bugfix\nnew file mode 100644\nindex 0000000..6f1837a\n--- /dev/null\n+++ b/news/102.bugfix\n@@ -0,0 +1,2 @@\n+Fix breaches reporting for documents with multiple links.\n+[pgrunewald]\n\\ No newline at end of file\ndiff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py\nindex b2be8f2..4f6df41 100644\n--- a/plone/app/linkintegrity/browser/info.py\n+++ b/plone/app/linkintegrity/browser/info.py\n@@ -51,7 +51,6 @@ def get_breaches(self, items=None):\n         catalog = getToolByName(self.context, "portal_catalog")\n         results = []\n         uids_to_ignore = set()\n-        uids_visited = set()\n         self.breach_count = {}\n         path2obj = dict()\n         path2brains = dict()\n@@ -84,12 +83,8 @@ def get_breaches(self, items=None):\n                     for source in breach["sources"]:\n                         # Only add the breach if one the sources is not in the\n                         # list of items that are to be deleted.\n-                        if (\n-                            source["uid"] not in uids_to_ignore\n-                            and source["uid"] not in uids_visited\n-                        ):\n+                        if source["uid"] not in uids_to_ignore:\n                             results.append(breach)\n-                            uids_visited.add(source["uid"])\n                             break\n \n             if IFolder.providedBy(obj):\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex f3b1deb..1afb921 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -259,3 +259,22 @@ def test_delete_confirmation_for_any_reference(self):\n         breaches = info.get_breaches()\n         self.assertEqual(len(breaches), 1)\n         self.assertEqual(len(info.get_breaches()[0]["sources"]), 1)\n+\n+    def test_sources_with_multiple_links_can_appear_multiple_times(self):\n+        """Test, if delete confirmation shows one document as source twice\n+        if it links to two of our to-be-deleted documents.\n+        """\n+        from plone.app.linkintegrity.testing import create\n+\n+        doc1 = self.portal.doc1\n+        doc2 = self.portal.doc2\n+        # create a document and create links to two existing documents\n+        doc5 = create(self.portal, "Document", id="doc5", title="Test Page 5")\n+        set_text(doc5, \'<a href="doc1">d1</a><a href="doc2">d2</a>\')\n+\n+        doc5_breaches = {r.to_object for r in getOutgoingLinks(doc5)}\n+        # the order of breaches is non-deterministic\n+        self.assertEqual({doc1, doc2}, doc5_breaches)\n+        view = self.portal.restrictedTraverse("@@delete_confirmation_info")\n+        # deleting the two referenced document results in two reported breaches\n+        self.assertEqual(len(view.get_breaches([doc1, doc2])), 2)\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2024-05-03T14:19:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/cf374bd471cef8135dfd48715f118af0f5b50f9b

Merge pull request #103 from plone/bugfix-documents-with-multiple-links

Fix breaches reporting for documents with multiple links

Files changed:
A news/102.bugfix
M plone/app/linkintegrity/browser/info.py
M plone/app/linkintegrity/tests/test_references.py

b'diff --git a/news/102.bugfix b/news/102.bugfix\nnew file mode 100644\nindex 0000000..6f1837a\n--- /dev/null\n+++ b/news/102.bugfix\n@@ -0,0 +1,2 @@\n+Fix breaches reporting for documents with multiple links.\n+[pgrunewald]\n\\ No newline at end of file\ndiff --git a/plone/app/linkintegrity/browser/info.py b/plone/app/linkintegrity/browser/info.py\nindex b2be8f2..4f6df41 100644\n--- a/plone/app/linkintegrity/browser/info.py\n+++ b/plone/app/linkintegrity/browser/info.py\n@@ -51,7 +51,6 @@ def get_breaches(self, items=None):\n         catalog = getToolByName(self.context, "portal_catalog")\n         results = []\n         uids_to_ignore = set()\n-        uids_visited = set()\n         self.breach_count = {}\n         path2obj = dict()\n         path2brains = dict()\n@@ -84,12 +83,8 @@ def get_breaches(self, items=None):\n                     for source in breach["sources"]:\n                         # Only add the breach if one the sources is not in the\n                         # list of items that are to be deleted.\n-                        if (\n-                            source["uid"] not in uids_to_ignore\n-                            and source["uid"] not in uids_visited\n-                        ):\n+                        if source["uid"] not in uids_to_ignore:\n                             results.append(breach)\n-                            uids_visited.add(source["uid"])\n                             break\n \n             if IFolder.providedBy(obj):\ndiff --git a/plone/app/linkintegrity/tests/test_references.py b/plone/app/linkintegrity/tests/test_references.py\nindex f3b1deb..1afb921 100644\n--- a/plone/app/linkintegrity/tests/test_references.py\n+++ b/plone/app/linkintegrity/tests/test_references.py\n@@ -259,3 +259,22 @@ def test_delete_confirmation_for_any_reference(self):\n         breaches = info.get_breaches()\n         self.assertEqual(len(breaches), 1)\n         self.assertEqual(len(info.get_breaches()[0]["sources"]), 1)\n+\n+    def test_sources_with_multiple_links_can_appear_multiple_times(self):\n+        """Test, if delete confirmation shows one document as source twice\n+        if it links to two of our to-be-deleted documents.\n+        """\n+        from plone.app.linkintegrity.testing import create\n+\n+        doc1 = self.portal.doc1\n+        doc2 = self.portal.doc2\n+        # create a document and create links to two existing documents\n+        doc5 = create(self.portal, "Document", id="doc5", title="Test Page 5")\n+        set_text(doc5, \'<a href="doc1">d1</a><a href="doc2">d2</a>\')\n+\n+        doc5_breaches = {r.to_object for r in getOutgoingLinks(doc5)}\n+        # the order of breaches is non-deterministic\n+        self.assertEqual({doc1, doc2}, doc5_breaches)\n+        view = self.portal.restrictedTraverse("@@delete_confirmation_info")\n+        # deleting the two referenced document results in two reported breaches\n+        self.assertEqual(len(view.get_breaches([doc1, doc2])), 2)\n'

