Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-25T22:41:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/5e799b3ef1b4696448233f34a98fda96b66f1ef1

Restored resourceRegistries ETag, but now for Plone 5 resource registries.

Fixes warning "Could not find value adapter for ETag component resourceRegistries".

Files changed:
A news/61.feature
M plone/app/caching/operations/configure.zcml
M plone/app/caching/operations/etags.py

b'diff --git a/news/61.feature b/news/61.feature\nnew file mode 100644\nindex 0000000..ea11173\n--- /dev/null\n+++ b/news/61.feature\n@@ -0,0 +1,3 @@\n+Restored ``resourceRegistries`` ETag, but now for Plone 5 resource registries.\n+Fixes warning "Could not find value adapter for ETag component resourceRegistries".\n+[maurits]\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex 348aa07..8685b51 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -38,6 +38,7 @@\n     <adapter factory=".etags.CatalogCounter"            name="catalogCounter" />\n     <adapter factory=".etags.ObjectLocked"              name="locked" />\n     <adapter factory=".etags.Skin"                      name="skin" />\n+    <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n     <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n     <adapter factory=".etags.CopyCookie"                name="copy" />\n \ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 25934ac..0ac97fb 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -3,6 +3,8 @@\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.resources.browser.combine import get_override_directory\n+from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n@@ -219,3 +221,35 @@ def __init__(self, published, request):\n \n     def __call__(self):\n         return self.request.get(\'__cp\') and \'1\' or \'0\'\n+\n+\n+@implementer(IETagValue)\n+@adapter(Interface, Interface)\n+class ResourceRegistries(object):\n+    """The ``resourceRegistries`` etag component, returning a timestamp.\n+\n+    This is the last modified timestamp from the Plone 5+ Resource Registries.\n+    This is useful for avoiding requests for expired resources from cached pages.\n+    """\n+\n+    def __init__(self, published, request):\n+        self.published = published\n+        self.request = request\n+\n+    def __call__(self):\n+        context = getContext(self.published)\n+        container = get_override_directory(context)\n+        if PRODUCTION_RESOURCE_DIRECTORY not in container:\n+            return \'\'\n+        production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n+        filename = \'timestamp.txt\'\n+        if filename not in production_folder:\n+            return \'\'\n+        timestamp = production_folder.readFile(filename)\n+        if not timestamp:\n+            return \'\'\n+        # timestamp is in bytes, and we must return a string.\n+        # On Python 2 this is the same, but not on Python 3.\n+        if not isinstance(timestamp, str):\n+            timestamp = timestamp.decode("utf-8")\n+        return timestamp\n'

Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-25T22:41:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/b9a37a2dceca243fc962ab7d102f2bf1d999ed53

Revert part of "Handling of legacy resource registries Products.ResourceRegistries removed"

This partially reverts commit b18dedbe24658427799ef4909946971e6bb8e518.

Specifically:

- This reintroduces the resourceRegistries ETag in the various caching profiles.
- Adds documentation for the ETag.
- Adapts the tests to expect content for the ETag.

The tests will need changes though.

The legacy resource registries (portal_css/kss/javascript) are definitely not supported with this revert.
This is only about the "new-style" Plone 5 resource registries in `@@resourceregistry-controlpanel`.

Files changed:
M docs/caching-proxies.rst
M docs/etags.rst
M plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml
M plone/app/caching/profiles/with-caching-proxy/registry.xml
M plone/app/caching/profiles/without-caching-proxy/registry.xml
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/docs/caching-proxies.rst b/docs/caching-proxies.rst\nindex adb3780..f5955fc 100644\n--- a/docs/caching-proxies.rst\n+++ b/docs/caching-proxies.rst\n@@ -22,7 +22,13 @@ returned to a user, because the cache has not been updated since the item\n was modified. There are three general strategies for dealing with this:\n \n * Since resources are cached in the proxy based on their URL, you can\n-  "invalidate" the cached copy by changing an item\'s URL when it is updated. This approach has the benefit of also being able to\n+  "invalidate" the cached copy by changing an item\'s URL when it is updated.\n+  This is the approach taken by Plone\'s ResourceRegistries:\n+  in production mode, the links that are inserted\n+  into Plone\'s content pages for resource managed by ResourceRegistries\n+  contain a time-based token, which changes when the ResourceRegistries\n+  are updated, more specifically: when the resource bundles are combined.\n+  This approach has the benefit of also being able to\n   "invalidate" content stored in a user\'s browser cache.\n \n * All caching proxies support setting timeouts. This means that content may\n@@ -85,7 +91,8 @@ The default purge paths include:\n   ``Image`` types.\n \n Files and images created (or customised) in the ZMI are purged automatically\n-when modified. To purge Plone content when modified\n+when modified. Files managed through the ResourceRegistries do not need\n+purging, since they have "stable" URLs. To purge Plone content when modified\n (or removed), you must select the content types in the control panel. By\n default, only the ``File`` and ``Image`` types are purged.\n \ndiff --git a/docs/etags.rst b/docs/etags.rst\nindex 9b842c3..3cdc796 100644\n--- a/docs/etags.rst\n+++ b/docs/etags.rst\n@@ -42,6 +42,11 @@ The ETag names tokens supported by default are:\n * skin\n     The name of the current skin (theme)\n \n+* resourceRegistries\n+    A timestamp indicating the last-modified timestamp for the\n+    Resource Registries. This is useful for avoiding requests for expired\n+    resources from cached pages.\n+\n It is possible to provide additional tokens by registering an ``IETagValue``\n adapter. This should be a named adapter on the published object (typically a\n view, file resource or Zope page template object) and request, with a unique\ndiff --git a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\nindex 3d32eb3..22943d7 100644\n--- a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n@@ -21,6 +21,7 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.ramCache">\n@@ -48,6 +49,7 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.ramCache">\n@@ -117,4 +119,4 @@\n   </record>\n \n \n-</registry>\n+</registry>\n\\ No newline at end of file\ndiff --git a/plone/app/caching/profiles/with-caching-proxy/registry.xml b/plone/app/caching/profiles/with-caching-proxy/registry.xml\nindex 56c2264..0d30b49 100644\n--- a/plone/app/caching/profiles/with-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy/registry.xml\n@@ -21,6 +21,7 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -39,6 +40,7 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\ndiff --git a/plone/app/caching/profiles/without-caching-proxy/registry.xml b/plone/app/caching/profiles/without-caching-proxy/registry.xml\nindex 3569909..bdbe9b4 100644\n--- a/plone/app/caching/profiles/without-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/without-caching-proxy/registry.xml\n@@ -21,6 +21,7 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -39,6 +40,7 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n@@ -92,4 +94,4 @@\n   </record>\n \n \n-</registry>\n+</registry>\n\\ No newline at end of file\ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 320371d..b3897eb 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -147,7 +147,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -162,7 +162,7 @@ def test_composite_viewsxx(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|1\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n \n         # Request the authenticated page\n@@ -181,7 +181,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s\' % (catalog.getCounter(\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -227,7 +227,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s|0|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -244,7 +244,7 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -264,7 +264,7 @@ def test_composite_viewsxx(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n+        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n         ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex d19db4e..0692758 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -135,7 +135,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -153,7 +153,7 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0|1\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -175,7 +175,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n@@ -223,7 +223,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}|0|0\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -240,7 +240,7 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n@@ -260,7 +260,7 @@ def test_composite_views(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n+        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n         self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n'

Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-25T22:41:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/127aa4413a513eae9b7ad202361eebe70addb595

Fixed normalizing etags in tests.

The previous code blindly removed the last etag, assuming it was the time based resourceRegistries ETag.
This is true again, after reintroducing the modernized version of this ETag, but it was not true before.

Moved the two versions of the _normalize_etag function to normalize_etag in test_utils.py.
Fixed it there to only remove the last component when the current year is in it.

Files changed:
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_utils.py

b'diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex b3897eb..11ba0d3 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n+from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n@@ -44,12 +45,6 @@ def test_image():\n     )\n \n \n-def _normalize_etag(s):\n-    s = s.split(\'|\')\n-    s.pop()  # remove time-based component\n-    return \'|\'.join(s)\n-\n-\n class TestProfileWithCaching(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n     `with-caching-proxy` profile.\n@@ -148,7 +143,7 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         self.assertEqual(\'"|test_user_1_|%d|en|%s|0|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -163,7 +158,7 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         self.assertEqual(\'"|test_user_1_|%d|en|%s|0|1\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n \n         # Request the authenticated page\n         now = stable_now()\n@@ -182,7 +177,7 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -228,7 +223,7 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         self.assertEqual(\'"||%d|en|%s|0|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -245,7 +240,7 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -265,7 +260,7 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 0692758..ae455c4 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n+from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n@@ -41,12 +42,6 @@ def test_image():\n     )\n \n \n-def _normalize_etag(s):\n-    s = s.split(\'|\')\n-    s.pop()  # remove time-based component\n-    return \'|\'.join(s)\n-\n-\n class TestProfileWithoutCaching(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n     `without-caching-proxy` profile.\n@@ -139,7 +134,7 @@ def test_composite_views(self):\n             catalog.getCounter(),\n             default_skin,\n         )\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -157,7 +152,7 @@ def test_composite_views(self):\n             catalog.getCounter(),\n             default_skin,\n         )\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n \n         # Request the authenticated page\n         now = stable_now()\n@@ -179,7 +174,7 @@ def test_composite_views(self):\n             catalog.getCounter(),\n             default_skin,\n         )\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -224,7 +219,7 @@ def test_composite_views(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         tag = \'"||{0}|en|{1}|0|0\'.format(catalog.getCounter(), default_skin)\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -241,7 +236,7 @@ def test_composite_views(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -261,7 +256,7 @@ def test_composite_views(self):\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n         tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \ndiff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py\nindex a95b2ea..68eaa91 100644\n--- a/plone/app/caching/tests/test_utils.py\n+++ b/plone/app/caching/tests/test_utils.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import Explicit\n+from datetime import date\n from datetime import datetime\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.utils import getObjectDefaultView\n@@ -31,6 +32,18 @@ def stable_now():\n     return now\n \n \n+def normalize_etag(value):\n+    split_value = value.split(\'|\')\n+    # The last component is expected to be the resourceRegistries ETag,\n+    # which is a time-based component, making it hard to test.\n+    last = split_value.pop()\n+    if str(date.today().year) in last:\n+        # yes, this is time based, remove it\n+        return \'|\'.join(split_value)\n+    # return original\n+    return value\n+\n+\n @implementer(IBrowserDefault, IDynamicType)\n class DummyContent(Explicit):\n \n'

Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-25T22:41:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/97c9d1184bb18a152050280cf72ebcaa202165ee

Fixed unclosed files in tests.

Files changed:
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_purge.py

b'diff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py\nindex d3d6cc3..f861f65 100644\n--- a/plone/app/caching/tests/test_integration.py\n+++ b/plone/app/caching/tests/test_integration.py\n@@ -125,24 +125,27 @@ def test_disabled(self):\n         self.portal[\'f1\'].invokeFactory(\'Image\', \'i1\')\n         self.portal[\'f1\'][\'i1\'].title = u\'Image one\'\n         self.portal[\'f1\'][\'i1\'].description = u\'Image one description\'\n-        self.portal[\'f1\'][\'i1\'].image = NamedImage(\n-            open(TEST_IMAGE, \'rb\'), \'image/gif\', u\'test.gif\')\n+        with open(TEST_IMAGE, \'rb\') as myfile:\n+            self.portal[\'f1\'][\'i1\'].image = NamedImage(\n+                myfile, \'image/gif\', u\'test.gif\')\n         self.portal[\'f1\'][\'i1\'].reindexObject()\n \n         # Content file\n         self.portal[\'f1\'].invokeFactory(\'File\', \'f1\')\n         self.portal[\'f1\'][\'f1\'].title = u\'File one\'\n         self.portal[\'f1\'][\'f1\'].description = u\'File one description\'\n-        self.portal[\'f1\'][\'f1\'].file = OFS.Image.File(\n-            \'test.gif\', \'test.gif\', open(TEST_FILE, \'rb\'))\n+        with open(TEST_FILE, \'rb\') as myfile:\n+            self.portal[\'f1\'][\'f1\'].file = OFS.Image.File(\n+                \'test.gif\', \'test.gif\', myfile)\n         self.portal[\'f1\'][\'f1\'].reindexObject()\n \n         # OFS image (custom folder)\n-        OFS.Image.manage_addImage(\n-            self.portal[\'portal_skins\'][\'custom\'],\n-            \'test.gif\',\n-            open(TEST_IMAGE, \'rb\'),\n-        )\n+        with open(TEST_IMAGE, \'rb\') as myfile:\n+            OFS.Image.manage_addImage(\n+                self.portal[\'portal_skins\'][\'custom\'],\n+                \'test.gif\',\n+                myfile,\n+            )\n \n         setRoles(self.portal, TEST_USER_ID, (\'Member\',))\n \ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex e91080d..e67086f 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -57,8 +57,8 @@ def getData(filename):\n     from plone.app.caching import tests\n \n     filename = join(dirname(tests.__file__), filename)\n-    data = open(filename, "rb").read()\n-    return data\n+    with open(filename, "rb") as myfile:\n+        return myfile.read()\n \n \n class Handler(object):\n'

Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-25T22:41:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/8f9e0720f35e41d6be4420973237ebf88c82481f

Removed unused FSFile import from tests.

Files changed:
M plone/app/caching/tests/test_profile_without_caching_proxy.py

b'diff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex ae455c4..e73b5bb 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -13,7 +13,6 @@\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n-from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n'

Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-25T22:41:12+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/1fce0e0da4882168a98c32b16914f0416a48b362

Tests: moved test_image function to test_utils.py

Files changed:
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_utils.py

b'diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 11ba0d3..5cca979 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -3,6 +3,7 @@\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n+from plone.app.caching.tests.test_utils import test_image\n from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n@@ -25,26 +26,10 @@\n import dateutil.parser\n import dateutil.tz\n import os\n-import pkg_resources\n import six\n import unittest\n \n \n-TEST_FILE = pkg_resources.resource_filename(\n-    \'plone.app.caching.tests\', \'test.gif\')\n-\n-\n-def test_image():\n-    from plone.namedfile.file import NamedBlobImage\n-    filename = pkg_resources.resource_filename(\n-        \'plone.app.caching.tests\', \'test.gif\')\n-    filename = os.path.join(os.path.dirname(__file__), u\'test.gif\')\n-    return NamedBlobImage(\n-        data=open(filename, \'rb\').read(),\n-        filename=filename,\n-    )\n-\n-\n class TestProfileWithCaching(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n     `with-caching-proxy` profile.\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex e73b5bb..59d5a96 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -3,6 +3,7 @@\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n+from plone.app.caching.tests.test_utils import test_image\n from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -20,27 +21,10 @@\n import datetime\n import dateutil.parser\n import dateutil.tz\n-import os\n-import pkg_resources\n import six\n import unittest\n \n \n-TEST_FILE = pkg_resources.resource_filename(\n-    \'plone.app.caching.tests\', \'test.gif\')\n-\n-\n-def test_image():\n-    from plone.namedfile.file import NamedBlobImage\n-    filename = pkg_resources.resource_filename(\n-        \'plone.app.caching.tests\', \'test.gif\')\n-    filename = os.path.join(os.path.dirname(__file__), u\'test.gif\')\n-    return NamedBlobImage(\n-        data=open(filename, \'rb\').read(),\n-        filename=filename,\n-    )\n-\n-\n class TestProfileWithoutCaching(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n     `without-caching-proxy` profile.\ndiff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py\nindex 68eaa91..e6362d1 100644\n--- a/plone/app/caching/tests/test_utils.py\n+++ b/plone/app/caching/tests/test_utils.py\n@@ -16,11 +16,14 @@\n from zope.component import provideUtility\n from zope.interface import implementer\n \n+import pkg_resources\n import pytz\n import unittest\n \n \n TEST_TIMEZONE = \'Europe/Vienna\'\n+TEST_IMAGE = pkg_resources.resource_filename(\n+    \'plone.app.caching.tests\', \'test.gif\')\n \n \n def stable_now():\n@@ -44,6 +47,15 @@ def normalize_etag(value):\n     return value\n \n \n+def test_image():\n+    from plone.namedfile.file import NamedBlobImage\n+    with open(TEST_IMAGE, \'rb\') as myfile:\n+        return NamedBlobImage(\n+            data=myfile.read(),\n+            filename=TEST_IMAGE,\n+        )\n+\n+\n @implementer(IBrowserDefault, IDynamicType)\n class DummyContent(Explicit):\n \n'

Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-25T22:41:13+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.caching/commit/28d514c85f03b8c89b7eed8b4a69d124d67c6ece

Fixed test failure on Python 2.

Filename needs to be unicode there.

Files changed:
M plone/app/caching/tests/test_utils.py

b"diff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py\nindex e6362d1..b8edd90 100644\n--- a/plone/app/caching/tests/test_utils.py\n+++ b/plone/app/caching/tests/test_utils.py\n@@ -23,7 +23,7 @@\n \n TEST_TIMEZONE = 'Europe/Vienna'\n TEST_IMAGE = pkg_resources.resource_filename(\n-    'plone.app.caching.tests', 'test.gif')\n+    u'plone.app.caching.tests', u'test.gif')\n \n \n def stable_now():\n"

Repository: plone.app.caching


Branch: refs/heads/2.x
Date: 2021-01-26T10:39:55-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/0315450983a8d9ff89ff91b79ad462863a853868

Merge pull request #70 from plone/maurits/restore-resource-registries-2x

Restore resource registries eTag [2x]

Files changed:
A news/61.feature
M docs/caching-proxies.rst
M docs/etags.rst
M plone/app/caching/operations/configure.zcml
M plone/app/caching/operations/etags.py
M plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml
M plone/app/caching/profiles/with-caching-proxy/registry.xml
M plone/app/caching/profiles/without-caching-proxy/registry.xml
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py

b'diff --git a/docs/caching-proxies.rst b/docs/caching-proxies.rst\nindex adb3780..f5955fc 100644\n--- a/docs/caching-proxies.rst\n+++ b/docs/caching-proxies.rst\n@@ -22,7 +22,13 @@ returned to a user, because the cache has not been updated since the item\n was modified. There are three general strategies for dealing with this:\n \n * Since resources are cached in the proxy based on their URL, you can\n-  "invalidate" the cached copy by changing an item\'s URL when it is updated. This approach has the benefit of also being able to\n+  "invalidate" the cached copy by changing an item\'s URL when it is updated.\n+  This is the approach taken by Plone\'s ResourceRegistries:\n+  in production mode, the links that are inserted\n+  into Plone\'s content pages for resource managed by ResourceRegistries\n+  contain a time-based token, which changes when the ResourceRegistries\n+  are updated, more specifically: when the resource bundles are combined.\n+  This approach has the benefit of also being able to\n   "invalidate" content stored in a user\'s browser cache.\n \n * All caching proxies support setting timeouts. This means that content may\n@@ -85,7 +91,8 @@ The default purge paths include:\n   ``Image`` types.\n \n Files and images created (or customised) in the ZMI are purged automatically\n-when modified. To purge Plone content when modified\n+when modified. Files managed through the ResourceRegistries do not need\n+purging, since they have "stable" URLs. To purge Plone content when modified\n (or removed), you must select the content types in the control panel. By\n default, only the ``File`` and ``Image`` types are purged.\n \ndiff --git a/docs/etags.rst b/docs/etags.rst\nindex 9b842c3..3cdc796 100644\n--- a/docs/etags.rst\n+++ b/docs/etags.rst\n@@ -42,6 +42,11 @@ The ETag names tokens supported by default are:\n * skin\n     The name of the current skin (theme)\n \n+* resourceRegistries\n+    A timestamp indicating the last-modified timestamp for the\n+    Resource Registries. This is useful for avoiding requests for expired\n+    resources from cached pages.\n+\n It is possible to provide additional tokens by registering an ``IETagValue``\n adapter. This should be a named adapter on the published object (typically a\n view, file resource or Zope page template object) and request, with a unique\ndiff --git a/news/61.feature b/news/61.feature\nnew file mode 100644\nindex 0000000..ea11173\n--- /dev/null\n+++ b/news/61.feature\n@@ -0,0 +1,3 @@\n+Restored ``resourceRegistries`` ETag, but now for Plone 5 resource registries.\n+Fixes warning "Could not find value adapter for ETag component resourceRegistries".\n+[maurits]\ndiff --git a/plone/app/caching/operations/configure.zcml b/plone/app/caching/operations/configure.zcml\nindex 348aa07..8685b51 100644\n--- a/plone/app/caching/operations/configure.zcml\n+++ b/plone/app/caching/operations/configure.zcml\n@@ -38,6 +38,7 @@\n     <adapter factory=".etags.CatalogCounter"            name="catalogCounter" />\n     <adapter factory=".etags.ObjectLocked"              name="locked" />\n     <adapter factory=".etags.Skin"                      name="skin" />\n+    <adapter factory=".etags.ResourceRegistries"        name="resourceRegistries" />\n     <adapter factory=".etags.AnonymousOrRandom"         name="anonymousOrRandom" />\n     <adapter factory=".etags.CopyCookie"                name="copy" />\n \ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 25934ac..0ac97fb 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -3,6 +3,8 @@\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.resources.browser.combine import get_override_directory\n+from Products.CMFPlone.resources.browser.combine import PRODUCTION_RESOURCE_DIRECTORY\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n@@ -219,3 +221,35 @@ def __init__(self, published, request):\n \n     def __call__(self):\n         return self.request.get(\'__cp\') and \'1\' or \'0\'\n+\n+\n+@implementer(IETagValue)\n+@adapter(Interface, Interface)\n+class ResourceRegistries(object):\n+    """The ``resourceRegistries`` etag component, returning a timestamp.\n+\n+    This is the last modified timestamp from the Plone 5+ Resource Registries.\n+    This is useful for avoiding requests for expired resources from cached pages.\n+    """\n+\n+    def __init__(self, published, request):\n+        self.published = published\n+        self.request = request\n+\n+    def __call__(self):\n+        context = getContext(self.published)\n+        container = get_override_directory(context)\n+        if PRODUCTION_RESOURCE_DIRECTORY not in container:\n+            return \'\'\n+        production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n+        filename = \'timestamp.txt\'\n+        if filename not in production_folder:\n+            return \'\'\n+        timestamp = production_folder.readFile(filename)\n+        if not timestamp:\n+            return \'\'\n+        # timestamp is in bytes, and we must return a string.\n+        # On Python 2 this is the same, but not on Python 3.\n+        if not isinstance(timestamp, str):\n+            timestamp = timestamp.decode("utf-8")\n+        return timestamp\ndiff --git a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\nindex 3d32eb3..22943d7 100644\n--- a/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy-splitviews/registry.xml\n@@ -21,6 +21,7 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.itemView.ramCache">\n@@ -48,6 +49,7 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.moderateCaching.plone.content.folderView.ramCache">\n@@ -117,4 +119,4 @@\n   </record>\n \n \n-</registry>\n+</registry>\n\\ No newline at end of file\ndiff --git a/plone/app/caching/profiles/with-caching-proxy/registry.xml b/plone/app/caching/profiles/with-caching-proxy/registry.xml\nindex 56c2264..0d30b49 100644\n--- a/plone/app/caching/profiles/with-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/with-caching-proxy/registry.xml\n@@ -21,6 +21,7 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -39,6 +40,7 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\ndiff --git a/plone/app/caching/profiles/without-caching-proxy/registry.xml b/plone/app/caching/profiles/without-caching-proxy/registry.xml\nindex 3569909..bdbe9b4 100644\n--- a/plone/app/caching/profiles/without-caching-proxy/registry.xml\n+++ b/plone/app/caching/profiles/without-caching-proxy/registry.xml\n@@ -21,6 +21,7 @@\n           <element>userLanguage</element>\n           <element>skin</element>\n           <element>locked</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.itemView.ramCache">\n@@ -39,6 +40,7 @@\n           <element>skin</element>\n           <element>locked</element>\n           <element>copy</element>\n+          <element>resourceRegistries</element>\n       </value>\n   </record>\n   <record name="plone.app.caching.weakCaching.plone.content.folderView.ramCache">\n@@ -92,4 +94,4 @@\n   </record>\n \n \n-</registry>\n+</registry>\n\\ No newline at end of file\ndiff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py\nindex d3d6cc3..f861f65 100644\n--- a/plone/app/caching/tests/test_integration.py\n+++ b/plone/app/caching/tests/test_integration.py\n@@ -125,24 +125,27 @@ def test_disabled(self):\n         self.portal[\'f1\'].invokeFactory(\'Image\', \'i1\')\n         self.portal[\'f1\'][\'i1\'].title = u\'Image one\'\n         self.portal[\'f1\'][\'i1\'].description = u\'Image one description\'\n-        self.portal[\'f1\'][\'i1\'].image = NamedImage(\n-            open(TEST_IMAGE, \'rb\'), \'image/gif\', u\'test.gif\')\n+        with open(TEST_IMAGE, \'rb\') as myfile:\n+            self.portal[\'f1\'][\'i1\'].image = NamedImage(\n+                myfile, \'image/gif\', u\'test.gif\')\n         self.portal[\'f1\'][\'i1\'].reindexObject()\n \n         # Content file\n         self.portal[\'f1\'].invokeFactory(\'File\', \'f1\')\n         self.portal[\'f1\'][\'f1\'].title = u\'File one\'\n         self.portal[\'f1\'][\'f1\'].description = u\'File one description\'\n-        self.portal[\'f1\'][\'f1\'].file = OFS.Image.File(\n-            \'test.gif\', \'test.gif\', open(TEST_FILE, \'rb\'))\n+        with open(TEST_FILE, \'rb\') as myfile:\n+            self.portal[\'f1\'][\'f1\'].file = OFS.Image.File(\n+                \'test.gif\', \'test.gif\', myfile)\n         self.portal[\'f1\'][\'f1\'].reindexObject()\n \n         # OFS image (custom folder)\n-        OFS.Image.manage_addImage(\n-            self.portal[\'portal_skins\'][\'custom\'],\n-            \'test.gif\',\n-            open(TEST_IMAGE, \'rb\'),\n-        )\n+        with open(TEST_IMAGE, \'rb\') as myfile:\n+            OFS.Image.manage_addImage(\n+                self.portal[\'portal_skins\'][\'custom\'],\n+                \'test.gif\',\n+                myfile,\n+            )\n \n         setRoles(self.portal, TEST_USER_ID, (\'Member\',))\n \ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 320371d..5cca979 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n+from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n+from plone.app.caching.tests.test_utils import test_image\n from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n@@ -24,32 +26,10 @@\n import dateutil.parser\n import dateutil.tz\n import os\n-import pkg_resources\n import six\n import unittest\n \n \n-TEST_FILE = pkg_resources.resource_filename(\n-    \'plone.app.caching.tests\', \'test.gif\')\n-\n-\n-def test_image():\n-    from plone.namedfile.file import NamedBlobImage\n-    filename = pkg_resources.resource_filename(\n-        \'plone.app.caching.tests\', \'test.gif\')\n-    filename = os.path.join(os.path.dirname(__file__), u\'test.gif\')\n-    return NamedBlobImage(\n-        data=open(filename, \'rb\').read(),\n-        filename=filename,\n-    )\n-\n-\n-def _normalize_etag(s):\n-    s = s.split(\'|\')\n-    s.pop()  # remove time-based component\n-    return \'|\'.join(s)\n-\n-\n class TestProfileWithCaching(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n     `with-caching-proxy` profile.\n@@ -147,8 +127,8 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|0\' % (catalog.getCounter(\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -162,8 +142,8 @@ def test_composite_viewsxx(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0|1\' % (catalog.getCounter(\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n \n         # Request the authenticated page\n         now = stable_now()\n@@ -181,8 +161,8 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"|test_user_1_|%d|en|%s\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(\'"|test_user_1_|%d|en|%s|0\' % (catalog.getCounter(\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -227,8 +207,8 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(\'"||%d|en|%s|0|0\' % (catalog.getCounter(\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -244,8 +224,8 @@ def test_composite_viewsxx(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -264,8 +244,8 @@ def test_composite_viewsxx(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        self.assertEqual(\'"||%d|en|%s\' % (catalog.getCounter(\n-        ), skins_tool.default_skin), _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(\'"||%d|en|%s|0\' % (catalog.getCounter(\n+        ), skins_tool.default_skin), normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex d19db4e..59d5a96 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n+from plone.app.caching.tests.test_utils import normalize_etag\n from plone.app.caching.tests.test_utils import stable_now\n+from plone.app.caching.tests.test_utils import test_image\n from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -12,7 +14,6 @@\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n from plone.testing.z2 import Browser\n-from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n@@ -20,33 +21,10 @@\n import datetime\n import dateutil.parser\n import dateutil.tz\n-import os\n-import pkg_resources\n import six\n import unittest\n \n \n-TEST_FILE = pkg_resources.resource_filename(\n-    \'plone.app.caching.tests\', \'test.gif\')\n-\n-\n-def test_image():\n-    from plone.namedfile.file import NamedBlobImage\n-    filename = pkg_resources.resource_filename(\n-        \'plone.app.caching.tests\', \'test.gif\')\n-    filename = os.path.join(os.path.dirname(__file__), u\'test.gif\')\n-    return NamedBlobImage(\n-        data=open(filename, \'rb\').read(),\n-        filename=filename,\n-    )\n-\n-\n-def _normalize_etag(s):\n-    s = s.split(\'|\')\n-    s.pop()  # remove time-based component\n-    return \'|\'.join(s)\n-\n-\n class TestProfileWithoutCaching(unittest.TestCase):\n     """This test aims to exercise the caching operations expected from the\n     `without-caching-proxy` profile.\n@@ -135,11 +113,11 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -153,11 +131,11 @@ def test_composite_views(self):\n                          browser.headers[\'X-Cache-Operation\'])\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0|1\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n \n         # Request the authenticated page\n         now = stable_now()\n@@ -175,11 +153,11 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"|test_user_1_|{0}|en|{1}\'.format(\n+        tag = \'"|test_user_1_|{0}|en|{1}|0\'.format(\n             catalog.getCounter(),\n             default_skin,\n         )\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -223,8 +201,8 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        tag = \'"||{0}|en|{1}|0|0\'.format(catalog.getCounter(), default_skin)\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -240,8 +218,8 @@ def test_composite_views(self):\n         # This should use cacheInBrowser\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \n@@ -260,8 +238,8 @@ def test_composite_views(self):\n         self.assertIn(testText, browser.contents)\n         self.assertEqual(\'max-age=0, must-revalidate, private\',\n                          browser.headers[\'Cache-Control\'])\n-        tag = \'"||{0}|en|{1}\'.format(catalog.getCounter(), default_skin)\n-        self.assertEqual(tag, _normalize_etag(browser.headers[\'ETag\']))\n+        tag = \'"||{0}|en|{1}|0\'.format(catalog.getCounter(), default_skin)\n+        self.assertEqual(tag, normalize_etag(browser.headers[\'ETag\']))\n         self.assertGreater(now, dateutil.parser.parse(\n             browser.headers[\'Expires\']))\n \ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex e91080d..e67086f 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -57,8 +57,8 @@ def getData(filename):\n     from plone.app.caching import tests\n \n     filename = join(dirname(tests.__file__), filename)\n-    data = open(filename, "rb").read()\n-    return data\n+    with open(filename, "rb") as myfile:\n+        return myfile.read()\n \n \n class Handler(object):\ndiff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py\nindex a95b2ea..b8edd90 100644\n--- a/plone/app/caching/tests/test_utils.py\n+++ b/plone/app/caching/tests/test_utils.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from Acquisition import Explicit\n+from datetime import date\n from datetime import datetime\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.utils import getObjectDefaultView\n@@ -15,11 +16,14 @@\n from zope.component import provideUtility\n from zope.interface import implementer\n \n+import pkg_resources\n import pytz\n import unittest\n \n \n TEST_TIMEZONE = \'Europe/Vienna\'\n+TEST_IMAGE = pkg_resources.resource_filename(\n+    u\'plone.app.caching.tests\', u\'test.gif\')\n \n \n def stable_now():\n@@ -31,6 +35,27 @@ def stable_now():\n     return now\n \n \n+def normalize_etag(value):\n+    split_value = value.split(\'|\')\n+    # The last component is expected to be the resourceRegistries ETag,\n+    # which is a time-based component, making it hard to test.\n+    last = split_value.pop()\n+    if str(date.today().year) in last:\n+        # yes, this is time based, remove it\n+        return \'|\'.join(split_value)\n+    # return original\n+    return value\n+\n+\n+def test_image():\n+    from plone.namedfile.file import NamedBlobImage\n+    with open(TEST_IMAGE, \'rb\') as myfile:\n+        return NamedBlobImage(\n+            data=myfile.read(),\n+            filename=TEST_IMAGE,\n+        )\n+\n+\n @implementer(IBrowserDefault, IDynamicType)\n class DummyContent(Explicit):\n \n'

