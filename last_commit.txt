Repository: icalendar


Branch: refs/heads/master
Date: 2021-09-28T22:29:57+05:30
Author: Jon Dufresne (jdufresne) <jon.dufresne@gmail.com>
Commit: https://github.com/collective/icalendar/commit/5c4fcf76302ee90b8a995799191b977465848709

Replace bare 'except:' with 'except Exception:' (#281)

Catching all exceptions is generally considered a bad practice under
most circumstances as it will also catch KeyboardInterrupt and
SystemExit. These special cases should be raised to the interpreter to
allow the Python process to exit.

This fix complies with pycodestyle's error code E722:

https://pycodestyle.readthedocs.io/en/latest/intro.html#error-codes

&gt; do not use bare except, specify exception instead

Files changed:
M src/icalendar/parser.py
M src/icalendar/prop.py

b'diff --git a/src/icalendar/parser.py b/src/icalendar/parser.py\nindex 318469d..5344de8 100644\n--- a/src/icalendar/parser.py\n+++ b/src/icalendar/parser.py\n@@ -391,7 +391,7 @@ def from_ical(cls, st):\n                         line in NEWLINE.split(unfolded) if line)\n             lines.append(\'\')  # \'\\r\\n\' at the end of every content line\n             return lines\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected StringType with content lines\')\n \n \ndiff --git a/src/icalendar/prop.py b/src/icalendar/prop.py\nindex 300955e..a9f8dbc 100644\n--- a/src/icalendar/prop.py\n+++ b/src/icalendar/prop.py\n@@ -174,7 +174,7 @@ def to_ical(self):\n     def from_ical(cls, ical):\n         try:\n             return cls.BOOL_MAP[ical]\n-        except:\n+        except Exception:\n             raise ValueError("Expected \'TRUE\' or \'FALSE\'. Got %s" % ical)\n \n \n@@ -213,7 +213,7 @@ def to_ical(self):\n     def from_ical(cls, ical):\n         try:\n             return cls(ical)\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected float value, got: %s\' % ical)\n \n \n@@ -232,7 +232,7 @@ def to_ical(self):\n     def from_ical(cls, ical):\n         try:\n             return cls(ical)\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected int, got: %s\' % ical)\n \n \n@@ -371,7 +371,7 @@ def from_ical(ical):\n                 int(ical[6:8]),  # day\n             )\n             return date(*timetuple)\n-        except:\n+        except Exception:\n             raise ValueError(\'Wrong date format %s\' % ical)\n \n \n@@ -437,7 +437,7 @@ def from_ical(ical, timezone=None):\n                 return pytz.utc.localize(datetime(*timetuple))\n             else:\n                 raise ValueError(ical)\n-        except:\n+        except Exception:\n             raise ValueError(\'Wrong datetime format: %s\' % ical)\n \n \n@@ -492,7 +492,7 @@ def from_ical(ical):\n             if sign == \'-\':\n                 value = -value\n             return value\n-        except:\n+        except Exception:\n             raise ValueError(\'Invalid iCalendar duration: %s\' % ical)\n \n \n@@ -557,7 +557,7 @@ def from_ical(ical):\n             start = vDDDTypes.from_ical(start)\n             end_or_duration = vDDDTypes.from_ical(end_or_duration)\n             return (start, end_or_duration)\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected period format, got: %s\' % ical)\n \n     def __repr__(self):\n@@ -598,7 +598,7 @@ def to_ical(self):\n     def from_ical(cls, ical):\n         try:\n             return cls(ical.upper())\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected weekday abbrevation, got: %s\' % ical)\n \n \n@@ -631,7 +631,7 @@ def to_ical(self):\n     def from_ical(cls, ical):\n         try:\n             return cls(ical.upper())\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected frequency, got: %s\' % ical)\n \n \n@@ -705,7 +705,7 @@ def from_ical(cls, ical):\n                     continue\n                 recur[key] = cls.parse_type(key, vals)\n             return dict(recur)\n-        except:\n+        except Exception:\n             raise ValueError(\'Error in recurrence rule: %s\' % ical)\n \n \n@@ -754,7 +754,7 @@ def from_ical(ical):\n         try:\n             timetuple = (int(ical[:2]), int(ical[2:4]), int(ical[4:6]))\n             return time(*timetuple)\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected time, got: %s\' % ical)\n \n \n@@ -775,7 +775,7 @@ def to_ical(self):\n     def from_ical(cls, ical):\n         try:\n             return cls(ical)\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected , got: %s\' % ical)\n \n \n@@ -788,7 +788,7 @@ def __init__(self, geo):\n             latitude, longitude = (geo[0], geo[1])\n             latitude = float(latitude)\n             longitude = float(longitude)\n-        except:\n+        except Exception:\n             raise ValueError(\'Input must be (float, float) for \'\n                              \'latitude and longitude\')\n         self.latitude = latitude\n@@ -803,7 +803,7 @@ def from_ical(ical):\n         try:\n             latitude, longitude = ical.split(\';\')\n             return (float(latitude), float(longitude))\n-        except:\n+        except Exception:\n             raise ValueError("Expected \'float;float\' , got: %s" % ical)\n \n \n@@ -853,7 +853,7 @@ def from_ical(cls, ical):\n                                              int(ical[3:5]),\n                                              int(ical[5:7] or 0))\n             offset = timedelta(hours=hours, minutes=minutes, seconds=seconds)\n-        except:\n+        except Exception:\n             raise ValueError(\'Expected utc offset, got: %s\' % ical)\n         if not cls.ignore_exceptions and offset >= timedelta(hours=24):\n             raise ValueError(\n'

