Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2022-01-04T00:51:14Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/5d2dce312b34cb37ffeb8385ea4859d07619ba87

Support SRCSET in a number of tags that can point to resolveuid URLs.

Related: https://github.com/plone/plone.outputfilters/pull/47

Files changed:
M plone/app/linkintegrity/parser.py

b'diff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py\nindex c0de8e4..1e0880f 100644\n--- a/plone/app/linkintegrity/parser.py\n+++ b/plone/app/linkintegrity/parser.py\n@@ -30,9 +30,21 @@ def handle_starttag(self, tag, attrs):\n             self.links.extend(search_attr(\'href\', attrs))\n         if tag == \'img\':\n             self.links.extend(search_attr(\'src\', attrs))\n+            self.links.extend(search_attr(\'srcset\', attrs))\n         if tag == \'source\':\n+            # Used within img/picture/audio/video tags\n+            # to embed various sources of media.\n             self.links.extend(search_attr(\'src\', attrs))\n             self.links.extend(search_attr(\'srcset\', attrs))\n+        if tag == \'audio\':\n+            # Embeds audio recordings.\n+            self.links.extend(search_attr(\'src\', attrs))\n+        if tag == \'video\':\n+            # Embeds videos.\n+            self.links.extend(search_attr(\'src\', attrs))\n+        if tag == \'iframe\':\n+            # Used to embed PDFs.\n+            self.links.extend(search_attr(\'src\', attrs))\n \n \n def search_attr(name, attrs):\n@@ -40,7 +52,12 @@ def search_attr(name, attrs):\n     """\n     for attr, value in attrs:\n         if attr == name:\n-            return [value]\n+            if name == "srcset":\n+                # SRCSET is split by commas, and each line\'s first\n+                # element is the URL in question.\n+                return [x.strip().split()[0] for x in value.split(",")]\n+            else:\n+                return [value]\n     return []\n \n \n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2022-01-04T00:52:59Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/9fe8563e470bafefd4d562de126eb501ef89b4f6

Add changelog entry

Files changed:
A news/84.feature

b'diff --git a/news/84.feature b/news/84.feature\nnew file mode 100644\nindex 0000000..480974d\n--- /dev/null\n+++ b/news/84.feature\n@@ -0,0 +1 @@\n+Track link integrity of referenced PDFs and other site objects in IFRAME SRC references.\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2022-01-29T00:47:41Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/52e3e41e6cd351d9634949998a53adc5daaee1b9

No single value vars.

Files changed:
M plone/app/linkintegrity/parser.py

b'diff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py\nindex 1e0880f..5897272 100644\n--- a/plone/app/linkintegrity/parser.py\n+++ b/plone/app/linkintegrity/parser.py\n@@ -55,7 +55,7 @@ def search_attr(name, attrs):\n             if name == "srcset":\n                 # SRCSET is split by commas, and each line\'s first\n                 # element is the URL in question.\n-                return [x.strip().split()[0] for x in value.split(",")]\n+                return [src.strip().split()[0] for src in value.split(",")]\n             else:\n                 return [value]\n     return []\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2022-01-31T13:34:14Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/ba1ea26f9baeb4971281b863cbb84ee3af014421

Clean up code by using a tag-&gt;attrs table.

Files changed:
M plone/app/linkintegrity/parser.py

b'diff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py\nindex 5897272..d542605 100644\n--- a/plone/app/linkintegrity/parser.py\n+++ b/plone/app/linkintegrity/parser.py\n@@ -10,60 +10,59 @@ class HTMLParseError(Exception):\n         pass\n \n \n+TAG_ATTRS_TO_TRACK = {\n+    # The humble hyperlink.\n+    "a": ["href"],\n+    # The image.\n+    "img": ["src", "srcset"],\n+    # Used within img/picture/audio/video tags\n+    # to embed various sources of media.\n+    "source": ["src", "srcset"],\n+    # Embeds audio recordings.\n+    "audio": ["src"],\n+    # Embeds videos.\n+    "video": ["src"],\n+    # Used to embed PDFs.\n+    "iframe": ["src"],\n+}\n+\n+\n class LinkParser(HTMLParser):\n-    """A simple html parser for link and image urls.\n-    """\n+    """A simple html parser for link and image urls."""\n \n     def __init__(self):\n         HTMLParser.__init__(self)\n         self.links = []\n \n     def getLinks(self):\n-        """Return all links found during parsing.\n-        """\n+        """Return all links found during parsing."""\n         return tuple(self.links)\n \n     def handle_starttag(self, tag, attrs):\n-        """Override the method to remember all links.\n-        """\n-        if tag == \'a\':\n-            self.links.extend(search_attr(\'href\', attrs))\n-        if tag == \'img\':\n-            self.links.extend(search_attr(\'src\', attrs))\n-            self.links.extend(search_attr(\'srcset\', attrs))\n-        if tag == \'source\':\n-            # Used within img/picture/audio/video tags\n-            # to embed various sources of media.\n-            self.links.extend(search_attr(\'src\', attrs))\n-            self.links.extend(search_attr(\'srcset\', attrs))\n-        if tag == \'audio\':\n-            # Embeds audio recordings.\n-            self.links.extend(search_attr(\'src\', attrs))\n-        if tag == \'video\':\n-            # Embeds videos.\n-            self.links.extend(search_attr(\'src\', attrs))\n-        if tag == \'iframe\':\n-            # Used to embed PDFs.\n-            self.links.extend(search_attr(\'src\', attrs))\n+        """Override the method to remember all links."""\n+        for at in TAG_ATTRS_TO_TRACK.get(tag.lower(), []):\n+            self.links.extend(search_attr(at), attrs)\n+\n+\n+def links_in_srcset(attrval):\n+    # SRCSET is split by commas, and each line\'s first\n+    # element is the URL in question.\n+    # Yes, this means that spaces in such a link must be\n+    # encoded with %20 or +.  That is what the written\n+    # standard implies.\n+    return [src.strip().split()[0] for src in attrval.split(",")]\n \n \n def search_attr(name, attrs):\n-    """Search named attribute in a list of attributes.\n-    """\n+    """Search named attribute in a list of attributes."""\n     for attr, value in attrs:\n         if attr == name:\n-            if name == "srcset":\n-                # SRCSET is split by commas, and each line\'s first\n-                # element is the URL in question.\n-                return [src.strip().split()[0] for src in value.split(",")]\n-            else:\n-                return [value]\n+            return links_in_srcset(value) if name == "srcset" else [value]\n     return []\n \n \n-def extractLinks(data, encoding=\'utf-8\'):\n-    """Parse the given html and return all links.\n-    """\n+def extractLinks(data, encoding="utf-8"):\n+    """Parse the given html and return all links."""\n     if not data:\n         return []\n     parser = LinkParser()\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2022-02-01T13:27:47Z
Author: Manuel Amador (Rudd-O) (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/37009c7d29d02a787f3406f34d7b24aa6933b39f

Gotta be the dumbest bug I ever put in software... this week.

Files changed:
M plone/app/linkintegrity/parser.py

b'diff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py\nindex d542605..bf95800 100644\n--- a/plone/app/linkintegrity/parser.py\n+++ b/plone/app/linkintegrity/parser.py\n@@ -41,7 +41,7 @@ def getLinks(self):\n     def handle_starttag(self, tag, attrs):\n         """Override the method to remember all links."""\n         for at in TAG_ATTRS_TO_TRACK.get(tag.lower(), []):\n-            self.links.extend(search_attr(at), attrs)\n+            self.links.extend(search_attr(at, attrs))\n \n \n def links_in_srcset(attrval):\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2022-02-01T14:36:47Z
Author: Rudd-O (Rudd-O) <rudd-o@rudd-o.com>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/aff8c11c936d5cc90e8c15d2faaa0c95d1038440

Merge pull request #84 from Rudd-O/master

Track integrity of IFRAME SRC= too.

Files changed:
A news/84.feature
M plone/app/linkintegrity/parser.py

b'diff --git a/news/84.feature b/news/84.feature\nnew file mode 100644\nindex 0000000..480974d\n--- /dev/null\n+++ b/news/84.feature\n@@ -0,0 +1 @@\n+Track link integrity of referenced PDFs and other site objects in IFRAME SRC references.\ndiff --git a/plone/app/linkintegrity/parser.py b/plone/app/linkintegrity/parser.py\nindex c0de8e4..bf95800 100644\n--- a/plone/app/linkintegrity/parser.py\n+++ b/plone/app/linkintegrity/parser.py\n@@ -10,43 +10,59 @@ class HTMLParseError(Exception):\n         pass\n \n \n+TAG_ATTRS_TO_TRACK = {\n+    # The humble hyperlink.\n+    "a": ["href"],\n+    # The image.\n+    "img": ["src", "srcset"],\n+    # Used within img/picture/audio/video tags\n+    # to embed various sources of media.\n+    "source": ["src", "srcset"],\n+    # Embeds audio recordings.\n+    "audio": ["src"],\n+    # Embeds videos.\n+    "video": ["src"],\n+    # Used to embed PDFs.\n+    "iframe": ["src"],\n+}\n+\n+\n class LinkParser(HTMLParser):\n-    """A simple html parser for link and image urls.\n-    """\n+    """A simple html parser for link and image urls."""\n \n     def __init__(self):\n         HTMLParser.__init__(self)\n         self.links = []\n \n     def getLinks(self):\n-        """Return all links found during parsing.\n-        """\n+        """Return all links found during parsing."""\n         return tuple(self.links)\n \n     def handle_starttag(self, tag, attrs):\n-        """Override the method to remember all links.\n-        """\n-        if tag == \'a\':\n-            self.links.extend(search_attr(\'href\', attrs))\n-        if tag == \'img\':\n-            self.links.extend(search_attr(\'src\', attrs))\n-        if tag == \'source\':\n-            self.links.extend(search_attr(\'src\', attrs))\n-            self.links.extend(search_attr(\'srcset\', attrs))\n+        """Override the method to remember all links."""\n+        for at in TAG_ATTRS_TO_TRACK.get(tag.lower(), []):\n+            self.links.extend(search_attr(at, attrs))\n+\n+\n+def links_in_srcset(attrval):\n+    # SRCSET is split by commas, and each line\'s first\n+    # element is the URL in question.\n+    # Yes, this means that spaces in such a link must be\n+    # encoded with %20 or +.  That is what the written\n+    # standard implies.\n+    return [src.strip().split()[0] for src in attrval.split(",")]\n \n \n def search_attr(name, attrs):\n-    """Search named attribute in a list of attributes.\n-    """\n+    """Search named attribute in a list of attributes."""\n     for attr, value in attrs:\n         if attr == name:\n-            return [value]\n+            return links_in_srcset(value) if name == "srcset" else [value]\n     return []\n \n \n-def extractLinks(data, encoding=\'utf-8\'):\n-    """Parse the given html and return all links.\n-    """\n+def extractLinks(data, encoding="utf-8"):\n+    """Parse the given html and return all links."""\n     if not data:\n         return []\n     parser = LinkParser()\n'

