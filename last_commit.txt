Repository: plone.rest


Branch: refs/heads/master
Date: 2021-10-05T21:30:44+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.rest/commit/d431f1c0772bdcfc32db33f89f21e40d6cbbd1e8

REST traverser ++api++ (#113)

* Draft proposal of rest traverser

* refactor to reuse marking logic in as non-subscriber

* use ++api++ as traverser

* implement rest marking traverser ++api++

* document changes

Files changed:
A news/113.feature
M README.rst
M src/plone/rest/configure.zcml
M src/plone/rest/events.py
M src/plone/rest/traverse.py

b'diff --git a/README.rst b/README.rst\nindex 63bff50..4b91180 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -98,11 +98,18 @@ The factory class needs to inherit from the plone.rest \'Service\' class and to im\n Content Negotiation\n -------------------\n \n-To access the service endpoint we just created we have to send a GET request to a Dexterity object by setting the \'Accept\' header to \'application/json\'::\n+To access the service endpoint we created we have to send a GET request to a Dexterity object:\n \n-  PATCH /Plone/doc1 HTTP/1.1\n-  Host: localhost:8080\n-  Accept: application/json\n+1. by setting the \'Accept\' header to \'application/json\'::\n+\n+    PATCH /Plone/doc1 HTTP/1.1\n+    Host: localhost:8080\n+    Accept: application/json\n+\n+2. or by adding an explicit traversal step to the path like so::\n+\n+    PATCH /Plone/++api++/doc1 HTTP/1.1\n+    Host: localhost:8080\n \n The server then will respond with \'200 OK\'::\n \n@@ -113,6 +120,15 @@ The server then will respond with \'200 OK\'::\n     "message": "PATCH: Hello World!"\n   }\n \n+Why two methods? \n+Using the \'Accept\' header is the intended way of RESTful APIs to get different responses from the same URL.\n+However, if it comes to caching the response in an web accelerator like Varnish or Cloudflare, additional challenges are added.\n+Setting the `Vary` header to \'Vary: Accept\' helps to a certain degree in Varnish. \n+But cache pollution may happen, because different browsers send different headers on normal HTML requests.\n+Hosted services like Cloudflare just do not support the \'Vary\' usage and can not be used for sites with REST calls.\n+Thus a second option with different URLs is needed.\n+\n+\n You can try this out on the command line:\n \n .. code-block:: console\n@@ -126,26 +142,32 @@ Here is a list of examples for all supported HTTP verbs:\n GET::\n \n   $ http --auth admin:admin GET localhost:8080/Plone/doc1 Accept:application/json\n+  $ http --auth admin:admin GET localhost:8080/Plone/++api++/doc1\n \n POST::\n \n   $ http --auth admin:admin POST localhost:8080/Plone/doc1 Accept:application/json\n+  $ http --auth admin:admin POST localhost:8080/Plone/++api++/doc1\n \n PUT::\n \n   $ http --auth admin:admin PUT localhost:8080/Plone/doc1 Accept:application/json\n+  $ http --auth admin:admin PUT localhost:8080/Plone/++api++/doc1\n \n DELETE::\n \n   $ http --auth admin:admin DELETE localhost:8080/Plone/doc1 Accept:application/json\n+  $ http --auth admin:admin DELETE localhost:8080/Plone/++api++/doc1\n \n PATCH::\n \n   $ http --auth admin:admin PATCH localhost:8080/Plone/doc1 Accept:application/json\n+  $ http --auth admin:admin PATCH localhost:8080/Plone/++api++/doc1\n \n OPTIONS::\n \n   $ http --auth admin:admin OPTIONS localhost:8080/Plone/doc1 Accept:application/json\n+  $ http --auth admin:admin OPTIONS localhost:8080/Plone/++api++/doc1\n \n \n Named Services\n@@ -171,6 +193,11 @@ following request::\n   Host: localhost:8080\n   Accept: application/json\n \n+Service endpoints can also be accessed using the traverser::\n+\n+  GET /Plone/++api++/search HTTP/1.1\n+  Host: localhost:8080\n+\n \n Additional Path Segments\n ------------------------\n@@ -182,13 +209,12 @@ stores all path segments in an array in `self.params`.\n .. code-block:: python\n \n   from plone.rest import Service\n-  from zope.interface import implements\n+  from zope.interface import implementer\n   from zope.publisher.interfaces import IPublishTraverse\n \n+  @implementer(implementer)\n   class MyService(Service):\n \n-      implements(IPublishTraverse)\n-\n       def __init__(self, context, request):\n           super(MyService, self).__init__(context, request)\n           self.params = []\ndiff --git a/news/113.feature b/news/113.feature\nnew file mode 100644\nindex 0000000..91fff13\n--- /dev/null\n+++ b/news/113.feature\n@@ -0,0 +1,2 @@\n+Add a traverser `++api++` as an alternative to mark a request as REST request. \n+[jensens]\ndiff --git a/src/plone/rest/configure.zcml b/src/plone/rest/configure.zcml\nindex 7eafbd2..f03a0e8 100644\n--- a/src/plone/rest/configure.zcml\n+++ b/src/plone/rest/configure.zcml\n@@ -7,13 +7,19 @@\n   <include file="meta.zcml"/>\n   <subscriber\n     for="ZPublisher.interfaces.IPubStart"\n-    handler=".events.mark_as_api_request"\n+    handler=".events.subscriber_mark_as_api_request"\n     />\n \n   <include file="patches.zcml" />\n \n   <adapter factory=".traverse.RESTTraverse" />\n \n+  <adapter\n+      for="* zope.publisher.interfaces.IRequest"\n+      name="api"\n+      factory=".traverse.MarkAsRESTTraverser"\n+      />\n+\n   <adapter\n       factory=".errors.ErrorHandling"\n       name="index.html"\ndiff --git a/src/plone/rest/events.py b/src/plone/rest/events.py\nindex e2c65ce..86dbcb3 100644\n--- a/src/plone/rest/events.py\n+++ b/src/plone/rest/events.py\n@@ -5,18 +5,16 @@\n from zope.interface import alsoProvides\n \n \n-def mark_as_api_request(event):\n+def mark_as_api_request(request, accept):\n     """Mark a request as IAPIRequest if there\'s a service registered for the\n     actual request method and Accept header.\n     """\n-    request = event.request\n     method = request.get("REQUEST_METHOD", "GET")\n     if method == "OPTIONS" and request.getHeader("Origin", False):\n         preflighted_method = request.getHeader("Access-Control-Request-Method", None)\n         service_id = lookup_preflight_service_id(preflighted_method)\n         request._rest_cors_preflight = True\n     else:\n-        accept = request.getHeader("Accept", "text/html")\n         service_id = lookup_service_id(method, accept)\n         request._rest_cors_preflight = False\n \n@@ -27,3 +25,12 @@ def mark_as_api_request(event):\n         # Flag as non-WebDAV request in order to avoid special treatment\n         # in ZPublisher.BaseRequest.traverse().\n         request.maybe_webdav_client = 0\n+\n+\n+def subscriber_mark_as_api_request(event):\n+    """Subscriber to mark a request as IAPIRequest (see mark_as_api_request)\n+    """\n+    mark_as_api_request(\n+        event.request, \n+        event.request.getHeader("Accept", "text/html"),\n+    )    \ndiff --git a/src/plone/rest/traverse.py b/src/plone/rest/traverse.py\nindex 1cacba9..bd0bba0 100644\n--- a/src/plone/rest/traverse.py\n+++ b/src/plone/rest/traverse.py\n@@ -4,10 +4,12 @@\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n from plone.rest.interfaces import IAPIRequest\n from plone.rest.interfaces import IService\n+from plone.rest.events import mark_as_api_request\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserPublisher\n+from zope.traversing.interfaces import ITraversable\n from Products.CMFCore.interfaces import IContentish\n \n \n@@ -50,6 +52,22 @@ def browserDefault(self, request):\n         return self.context, (request._rest_service_id,)\n \n \n+@implementer(ITraversable)\n+class MarkAsRESTTraverser(object):\n+    """ \n+    Traversal adapter for the ``++api++`` namespace.\n+    It marks the request as API request.\n+    """\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def traverse(self, name_ignored, subpath_ignored):\n+        mark_as_api_request(self.request, "application/json")\n+        return self.context\n+\n+\n @implementer(IBrowserPublisher)\n class RESTWrapper(object):\n     """A wrapper for objects traversed during a REST request."""\n'

