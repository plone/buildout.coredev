Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2021-01-15T18:42:41+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/b8bd2027b0fac1ec403e8e03ef13728e9d7448cc

Fix Unauthorized when editing page with link to page you cannot see.

Fixes https://github.com/plone/plone.app.linkintegrity/issues/79.

```
http://localhost:8080/Plone/pageb/@@edit
Traceback (innermost last):
  Module ZPublisher.WSGIPublisher, line 162, in transaction_pubevents
  Module ZPublisher.WSGIPublisher, line 371, in publish_module
  Module ZPublisher.WSGIPublisher, line 274, in publish
  Module ZPublisher.mapply, line 85, in mapply
  Module ZPublisher.WSGIPublisher, line 63, in call_object
  Module plone.z3cform.layout, line 63, in __call__
  Module plone.z3cform.layout, line 47, in update
  Module plone.dexterity.browser.edit, line 58, in update
  Module plone.z3cform.fieldsets.extensible, line 65, in update
  Module plone.z3cform.patch, line 30, in GroupForm_update
  Module z3c.form.group, line 145, in update
  Module plone.app.z3cform.csrf, line 22, in execute
  Module z3c.form.action, line 98, in execute
  Module z3c.form.button, line 315, in __call__
  Module z3c.form.button, line 170, in __call__
  Module plone.dexterity.browser.edit, line 30, in handleApply
  Module z3c.form.group, line 126, in applyChanges
  Module zope.event, line 32, in notify
  Module zope.component.event, line 27, in dispatch
  Module zope.component._api, line 134, in subscribers
  Module zope.interface.registry, line 448, in subscribers
  Module zope.interface.adapter, line 619, in subscribers
  Module zope.component.event, line 36, in objectEventNotify
  Module zope.component._api, line 134, in subscribers
  Module zope.interface.registry, line 448, in subscribers
  Module zope.interface.adapter, line 619, in subscribers
  Module plone.app.linkintegrity.handlers, line 109, in modifiedContent
  Module plone.app.linkintegrity.handlers, line 89, in getObjectsFromLinks
  Module plone.app.linkintegrity.handlers, line 49, in findObject
  Module plone.app.uuid.utils, line 39, in uuidToObject
  Module Products.ZCatalog.CatalogBrains, line 91, in getObject
  Module OFS.Traversable, line 360, in restrictedTraverse
  Module OFS.Traversable, line 292, in unrestrictedTraverse
   - __traceback_info__: ([], 'pagea')
Unauthorized: You are not allowed to access 'pagea' in this context
```

Files changed:
A news/79.bugfix
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/tests/test_handlers.py

b'diff --git a/news/79.bugfix b/news/79.bugfix\nnew file mode 100644\nindex 0000000..2e81351\n--- /dev/null\n+++ b/news/79.bugfix\n@@ -0,0 +1,3 @@\n+Fix Unauthorized exception when you edit a page that links to another page that you are not allowed to see.\n+Fixes `issue 79 <https://github.com/plone/plone.app.linkintegrity/issues/79>`_.\n+[maurits]\ndiff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py\nindex 3c9ea8d..ff859b2 100644\n--- a/plone/app/linkintegrity/handlers.py\n+++ b/plone/app/linkintegrity/handlers.py\n@@ -5,7 +5,7 @@\n from plone.app.linkintegrity.interfaces import IRetriever\n from plone.app.linkintegrity.utils import ensure_intid\n from plone.app.linkintegrity.utils import referencedRelationship\n-from plone.app.uuid.utils import uuidToObject\n+from plone.app.uuid.utils import uuidToCatalogBrain\n from plone.dexterity.interfaces import IDexterityContent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -46,9 +46,17 @@ def findObject(base, path):\n     # on a view or skinscript to do this for us.\n     if \'resolveuid\' in components:\n         uid = components[components.index(\'resolveuid\') + 1]\n-        obj = uuidToObject(uid)\n-        if obj:\n-            return obj, path\n+        # This may be a link to a page that once was published but not anymore,\n+        # or the current editor does not have View permission.\n+        # In that case uuidToObject(uid) could fail with Unauthorized.\n+        brain = uuidToCatalogBrain(uid)\n+        if brain is not None:\n+            # Note: _unrestrictedGetObject starts with an underscore,\n+            # but it is documented in ZCatalog.interfaces,\n+            # so should be safe to rely on.\n+            obj = brain._unrestrictedGetObject()\n+            if obj:\n+                return obj, path\n \n     while components:\n         child_id = unquote(components[0])\ndiff --git a/plone/app/linkintegrity/tests/test_handlers.py b/plone/app/linkintegrity/tests/test_handlers.py\nindex b4ec594..2cd0310 100644\n--- a/plone/app/linkintegrity/tests/test_handlers.py\n+++ b/plone/app/linkintegrity/tests/test_handlers.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity.handlers import findObject\n+from plone.app.linkintegrity.testing import create\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.testing import logout\n \n import six\n \n@@ -31,6 +33,24 @@ def test_webserver_rewrites_portal_name(self):\n         self.assertEqual(obj.getPhysicalPath(), (\'\', \'plone\', \'doc2\'))\n         self.assertEqual(components, \'\')\n \n+    def test_uuid_link(self):\n+        # Test that objects can be found from uuid links.\n+        create(self.portal, \'Document\', id=\'target\', title=\'Target\')\n+        target = self.portal.target\n+        target_uid = target.UID()\n+        path = "../resolveuid/{}".format(target_uid)\n+\n+        # We logout.  This is to check that findObject also finds objects\n+        # that are not visible to the current user, like a private page.\n+        # See https://github.com/plone/plone.app.linkintegrity/issues/79\n+        # Note that in the Archetypes tests this is no problem,\n+        # but for Dexterity it is.  Likely they use a different workflow.\n+        logout()\n+\n+        obj, components = findObject(self.portal.doc1, path)\n+        self.assertEqual(obj.absolute_url_path(), \'/plone/target\')\n+        self.assertEqual(components, path)\n+\n \n class ReferenceGenerationDXTestCase(DXBaseTestCase, FindObjectTests):\n     """findObject testcase for dx content types"""\n'

Repository: plone.app.linkintegrity


Branch: refs/heads/master
Date: 2021-02-23T08:59:38+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.linkintegrity/commit/18d511a8d193054aa202b9cd1a65a9b8d00ea538

Merge pull request #80 from plone/maurits/issue-79-fix-unauthorized-on-edit

Fix Unauthorized when editing page with link to page you cannot see.

Files changed:
A news/79.bugfix
M plone/app/linkintegrity/handlers.py
M plone/app/linkintegrity/tests/test_handlers.py

b'diff --git a/news/79.bugfix b/news/79.bugfix\nnew file mode 100644\nindex 0000000..2e81351\n--- /dev/null\n+++ b/news/79.bugfix\n@@ -0,0 +1,3 @@\n+Fix Unauthorized exception when you edit a page that links to another page that you are not allowed to see.\n+Fixes `issue 79 <https://github.com/plone/plone.app.linkintegrity/issues/79>`_.\n+[maurits]\ndiff --git a/plone/app/linkintegrity/handlers.py b/plone/app/linkintegrity/handlers.py\nindex 3c9ea8d..ff859b2 100644\n--- a/plone/app/linkintegrity/handlers.py\n+++ b/plone/app/linkintegrity/handlers.py\n@@ -5,7 +5,7 @@\n from plone.app.linkintegrity.interfaces import IRetriever\n from plone.app.linkintegrity.utils import ensure_intid\n from plone.app.linkintegrity.utils import referencedRelationship\n-from plone.app.uuid.utils import uuidToObject\n+from plone.app.uuid.utils import uuidToCatalogBrain\n from plone.dexterity.interfaces import IDexterityContent\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -46,9 +46,17 @@ def findObject(base, path):\n     # on a view or skinscript to do this for us.\n     if \'resolveuid\' in components:\n         uid = components[components.index(\'resolveuid\') + 1]\n-        obj = uuidToObject(uid)\n-        if obj:\n-            return obj, path\n+        # This may be a link to a page that once was published but not anymore,\n+        # or the current editor does not have View permission.\n+        # In that case uuidToObject(uid) could fail with Unauthorized.\n+        brain = uuidToCatalogBrain(uid)\n+        if brain is not None:\n+            # Note: _unrestrictedGetObject starts with an underscore,\n+            # but it is documented in ZCatalog.interfaces,\n+            # so should be safe to rely on.\n+            obj = brain._unrestrictedGetObject()\n+            if obj:\n+                return obj, path\n \n     while components:\n         child_id = unquote(components[0])\ndiff --git a/plone/app/linkintegrity/tests/test_handlers.py b/plone/app/linkintegrity/tests/test_handlers.py\nindex b4ec594..2cd0310 100644\n--- a/plone/app/linkintegrity/tests/test_handlers.py\n+++ b/plone/app/linkintegrity/tests/test_handlers.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n from plone.app.linkintegrity.handlers import findObject\n+from plone.app.linkintegrity.testing import create\n from plone.app.linkintegrity.tests.base import DXBaseTestCase\n+from plone.app.testing import logout\n \n import six\n \n@@ -31,6 +33,24 @@ def test_webserver_rewrites_portal_name(self):\n         self.assertEqual(obj.getPhysicalPath(), (\'\', \'plone\', \'doc2\'))\n         self.assertEqual(components, \'\')\n \n+    def test_uuid_link(self):\n+        # Test that objects can be found from uuid links.\n+        create(self.portal, \'Document\', id=\'target\', title=\'Target\')\n+        target = self.portal.target\n+        target_uid = target.UID()\n+        path = "../resolveuid/{}".format(target_uid)\n+\n+        # We logout.  This is to check that findObject also finds objects\n+        # that are not visible to the current user, like a private page.\n+        # See https://github.com/plone/plone.app.linkintegrity/issues/79\n+        # Note that in the Archetypes tests this is no problem,\n+        # but for Dexterity it is.  Likely they use a different workflow.\n+        logout()\n+\n+        obj, components = findObject(self.portal.doc1, path)\n+        self.assertEqual(obj.absolute_url_path(), \'/plone/target\')\n+        self.assertEqual(components, path)\n+\n \n class ReferenceGenerationDXTestCase(DXBaseTestCase, FindObjectTests):\n     """findObject testcase for dx content types"""\n'

