Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:15:31+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/3ffad5f4934cbf91754dd58613f4d00bbec7ed55

Fix calculation of eventaccessor urls

Files changed:
M plone/app/event/dx/behaviors.py

b'diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex d9633bc7..877a1c8e 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -1,6 +1,7 @@\n """Behaviors to enable calendarish event extension to dexterity content types.\n """\n \n+from plone import api\n from plone.app.dexterity.behaviors.metadata import ICategorization\n from plone.app.event import _\n from plone.app.event.base import default_end as default_end_dt\n@@ -339,7 +340,21 @@ def uid(self):\n \n     @property\n     def url(self):\n-        return safe_text(self.context.absolute_url())\n+        """calculate the path, is required as long the ram.cache is activ in portlets renderer\n+        the return value of self.context.absolute_url() differs\n+        with ram cache: portal/testtermin\n+        without ram cache: http://site.local/testevent\n+        """\n+        portal_url = api.portal.get().absolute_url()\n+        portal_path = list(api.portal.get().getPhysicalPath())\n+        event_path = list(self.context.getPhysicalPath())\n+        path_without_portal = ""\n+        if len(portal_path) > 0:\n+            path_without_portal = "/".join(event_path[len(portal_path) :])\n+\n+        url = f"{portal_url}/{path_without_portal}"\n+\n+        return safe_text(url)\n \n     @property\n     def created(self):\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:15:48+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/2e834a641521b16bc731f712f81cdacbd76e6a3a

Add Test

Files changed:
M plone/app/event/tests/base_setup.py
M plone/app/event/tests/test_portlet_events.py

b'diff --git a/plone/app/event/tests/base_setup.py b/plone/app/event/tests/base_setup.py\nindex c3f70d14..36e2b38a 100644\n--- a/plone/app/event/tests/base_setup.py\n+++ b/plone/app/event/tests/base_setup.py\n@@ -1,5 +1,6 @@\n from datetime import datetime\n from datetime import timedelta\n+from dateutil.relativedelta import relativedelta\n from plone.app.event.dx import behaviors\n from plone.app.event.testing import set_browserlayer\n from plone.app.event.testing import set_timezone\n@@ -45,8 +46,9 @@ def make_dates(self):\n         past = self.past = tz.normalize(now - timedelta(days=10))\n         future = self.future = tz.normalize(now + timedelta(days=10))\n         far = self.far = tz.normalize(now + timedelta(days=30))\n+        scifi = self.scifi = tz.normalize(now + relativedelta(years=50))\n         duration = self.duration = timedelta(hours=1)\n-        return (now, past, future, far, duration)\n+        return (now, past, future, far, duration, scifi)\n \n     def setUp(self):\n         """Construct sample contents.\n@@ -72,7 +74,7 @@ def setUp(self):\n         set_browserlayer(self.request)\n         set_timezone(TEST_TIMEZONE)\n \n-        now, past, future, far, duration = self.make_dates()\n+        now, past, future, far, duration, scifi = self.make_dates()\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         workflow = getToolByName(self.portal, "portal_workflow")\n         workflow.setDefaultChain("simple_publication_workflow")\ndiff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py\nindex 0ce52193..33aae585 100644\n--- a/plone/app/event/tests/test_portlet_events.py\n+++ b/plone/app/event/tests/test_portlet_events.py\n@@ -2,9 +2,12 @@\n from plone.app.event.base import localized_now\n from plone.app.event.portlets import portlet_events\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import set_env_timezone\n from plone.app.event.testing import set_timezone\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n+from plone.app.event.tests.base_setup import patched_now as PN\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -15,8 +18,10 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.utils import _getDottedName\n+from unittest import mock\n from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -248,3 +253,67 @@ def test_portlet_event_renderer__listing_link(self):\n         rd = r.render()\n         self.assertTrue("?mode=future" in rd)\n         self.assertTrue("?mode=past" in rd)\n+\n+\n+class FunctionalTestCachedPortletEvents(AbstractSampleDataEvents):\n+    layer = PAEventDX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        from dateutil.relativedelta import relativedelta\n+\n+        super().setUp()\n+\n+        # a event in the future is needed, show in the portlet\n+\n+        self.scifi_event = self.event_factory(\n+            container=self.portal.sub,\n+            id="scifi_event",\n+            title="Long Event in the future",\n+            start=self.scifi,\n+            location="My Home",\n+        )\n+        workflow = getToolByName(self.portal, "portal_workflow")\n+        workflow.setDefaultChain("simple_publication_workflow")\n+        workflow.doActionFor(self.scifi_event, "publish")\n+        self.scifi_event.reindexObject()\n+\n+    def anonymous_browser(self):\n+        """Browser of anonymous user"""\n+        import transaction\n+\n+        transaction.commit()\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        return browser\n+\n+    def test_event_portlet_links(self):\n+        from io import StringIO\n+        from lxml import etree\n+\n+        # first request, events not in ram cache\n+        browser = self.anonymous_browser()\n+        browser.open(f"{self.portal.absolute_url()}")\n+        tree = etree.parse(StringIO(browser.contents), etree.HTMLParser())\n+        result = tree.xpath("//li[contains(@class,\'portletItem even\')]/a/@href")\n+\n+        self.assertEqual(\n+            result[0],\n+            "http://nohost/plone/sub/scifi_event",\n+            "URL of Event is wrong",\n+        )\n+\n+        # second request, events are in ram cache\n+        browser = self.anonymous_browser()\n+        browser.open(f"{self.portal.absolute_url()}")\n+        tree = etree.parse(StringIO(browser.contents), etree.HTMLParser())\n+        result = tree.xpath("//li[contains(@class,\'portletItem even\')]/a/@href")\n+\n+        self.assertEqual(\n+            result[0],\n+            "http://nohost/plone/sub/scifi_event",\n+            "URL of Event, calculate from ram cache, is wrong",\n+        )\n+\n+    def tearDown(self):\n+        if "scifi_event" in self.portal.sub.keys():\n+            del self.portal.sub["scifi_event"]\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:15:57+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/d77eaf5afbdb31ba72a9cc976777ebc8d80f496d

Add News

Files changed:
A news/387.bugfix.md

b'diff --git a/news/387.bugfix.md b/news/387.bugfix.md\nnew file mode 100644\nindex 000000000..8e36f65c3\n--- /dev/null\n+++ b/news/387.bugfix.md\n@@ -0,0 +1 @@\n+Fix calculation of eventaccessor urls @1letter\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:22:11+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/9f8b70886933179ff7619e82c191e08124f8113d

fix codespell

Files changed:
M plone/app/event/dx/behaviors.py

b'diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex 877a1c8e..ac288604 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -340,7 +340,7 @@ def uid(self):\n \n     @property\n     def url(self):\n-        """calculate the path, is required as long the ram.cache is activ in portlets renderer\n+        """calculate the path, is required as long the ram.cache is active in portlets renderer\n         the return value of self.context.absolute_url() differs\n         with ram cache: portal/testtermin\n         without ram cache: http://site.local/testevent\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:22:24+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/d9ad8f4819f3a7058730f1a88fe2e7a0d7fdf749

remove unused imports

Files changed:
M plone/app/event/tests/test_portlet_events.py

b'diff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py\nindex 33aae585..45a2567f 100644\n--- a/plone/app/event/tests/test_portlet_events.py\n+++ b/plone/app/event/tests/test_portlet_events.py\n@@ -7,7 +7,6 @@\n from plone.app.event.testing import set_env_timezone\n from plone.app.event.testing import set_timezone\n from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n-from plone.app.event.tests.base_setup import patched_now as PN\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -21,7 +20,6 @@\n from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.utils import _getDottedName\n-from unittest import mock\n from zExceptions import Unauthorized\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n@@ -259,8 +257,6 @@ class FunctionalTestCachedPortletEvents(AbstractSampleDataEvents):\n     layer = PAEventDX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n-        from dateutil.relativedelta import relativedelta\n-\n         super().setUp()\n \n         # a event in the future is needed, show in the portlet\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:37:50+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/41efd41b0f8a1cf48d1456d8a55a96144295c0ec

remove import of plone.api

Files changed:
M plone/app/event/dx/behaviors.py

b'diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex ac288604..2b59f161 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -1,7 +1,6 @@\n """Behaviors to enable calendarish event extension to dexterity content types.\n """\n \n-from plone import api\n from plone.app.dexterity.behaviors.metadata import ICategorization\n from plone.app.event import _\n from plone.app.event.base import default_end as default_end_dt\n@@ -40,6 +39,7 @@\n from zope.interface import invariant\n from zope.interface import provider\n from zope.schema.interfaces import IContextAwareDefaultFactory\n+from zope.component.hooks import getSite\n \n \n def first_weekday_sun0():\n@@ -345,8 +345,10 @@ def url(self):\n         with ram cache: portal/testtermin\n         without ram cache: http://site.local/testevent\n         """\n-        portal_url = api.portal.get().absolute_url()\n-        portal_path = list(api.portal.get().getPhysicalPath())\n+\n+        portal = getSite()\n+        portal_url = portal.absolute_url()\n+        portal_path = list(portal.getPhysicalPath())\n         event_path = list(self.context.getPhysicalPath())\n         path_without_portal = ""\n         if len(portal_path) > 0:\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:44:10+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/9d10090272d9f4dbe587c3a0328c05287e989bed

fix import order via isort

Files changed:
M plone/app/event/dx/behaviors.py

b'diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex 2b59f161..885ba3ea 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -32,6 +32,7 @@\n from z3c.form.browser.textlines import TextLinesFieldWidget\n from zope import schema\n from zope.component import adapter\n+from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n from zope.interface import implementer\n@@ -39,7 +40,6 @@\n from zope.interface import invariant\n from zope.interface import provider\n from zope.schema.interfaces import IContextAwareDefaultFactory\n-from zope.component.hooks import getSite\n \n \n def first_weekday_sun0():\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:55:55+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/fb5dceeb6b7415b0d4c07211d798a89eaeefe442

remove dependency dateutil

Files changed:
M plone/app/event/tests/base_setup.py

b'diff --git a/plone/app/event/tests/base_setup.py b/plone/app/event/tests/base_setup.py\nindex 36e2b38a..9dda8f75 100644\n--- a/plone/app/event/tests/base_setup.py\n+++ b/plone/app/event/tests/base_setup.py\n@@ -1,6 +1,5 @@\n from datetime import datetime\n from datetime import timedelta\n-from dateutil.relativedelta import relativedelta\n from plone.app.event.dx import behaviors\n from plone.app.event.testing import set_browserlayer\n from plone.app.event.testing import set_timezone\n@@ -46,7 +45,7 @@ def make_dates(self):\n         past = self.past = tz.normalize(now - timedelta(days=10))\n         future = self.future = tz.normalize(now + timedelta(days=10))\n         far = self.far = tz.normalize(now + timedelta(days=30))\n-        scifi = self.scifi = tz.normalize(now + relativedelta(years=50))\n+        scifi = self.scifi = tz.normalize(now + 50 * timedelta(days=365))\n         duration = self.duration = timedelta(hours=1)\n         return (now, past, future, far, duration, scifi)\n \n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-02T10:58:33+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/b2feff319c8143bb60be492c42ce507a4534aa21

add test requirements to setup.py

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 8dc40e9b..de72e509 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -85,6 +85,7 @@\n             "plone.app.testing [robot]",\n             "plone.testing",\n             "robotsuite",\n+            "lxml",\n         ],\n     },\n )\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-03T07:06:28+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.event/commit/8d090b25883153cf98830f2645decd6f2b5db9e0

Update calculation of url by eventaccessor

Files changed:
M plone/app/event/dx/behaviors.py

b'diff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex 885ba3ea..95de9aa3 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -32,7 +32,6 @@\n from z3c.form.browser.textlines import TextLinesFieldWidget\n from zope import schema\n from zope.component import adapter\n-from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n from zope.interface import implementer\n@@ -340,23 +339,12 @@ def uid(self):\n \n     @property\n     def url(self):\n-        """calculate the path, is required as long the ram.cache is active in portlets renderer\n-        the return value of self.context.absolute_url() differs\n-        with ram cache: portal/testtermin\n-        without ram cache: http://site.local/testevent\n+        """need to lookup globalrequest in order to calculate\n+        correct URL during cached lookup (eg. in event portlet renderer)\n         """\n-\n-        portal = getSite()\n-        portal_url = portal.absolute_url()\n-        portal_path = list(portal.getPhysicalPath())\n-        event_path = list(self.context.getPhysicalPath())\n-        path_without_portal = ""\n-        if len(portal_path) > 0:\n-            path_without_portal = "/".join(event_path[len(portal_path) :])\n-\n-        url = f"{portal_url}/{path_without_portal}"\n-\n-        return safe_text(url)\n+        request = getRequest()\n+        absolute_url = request.physicalPathToURL(self.context.getPhysicalPath())\n+        return absolute_url\n \n     @property\n     def created(self):\n'

Repository: plone.app.event


Branch: refs/heads/master
Date: 2024-04-03T08:10:41+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.event/commit/4d2a1eb1abe7c87e2a9b860f3b2d5e89f1d835ab

Merge pull request #391 from plone/1letter/fix#387

Fix for #387 - Fix calculation of eventaccessor urls

Files changed:
A news/387.bugfix.md
M plone/app/event/dx/behaviors.py
M plone/app/event/tests/base_setup.py
M plone/app/event/tests/test_portlet_events.py
M setup.py

b'diff --git a/news/387.bugfix.md b/news/387.bugfix.md\nnew file mode 100644\nindex 000000000..8e36f65c3\n--- /dev/null\n+++ b/news/387.bugfix.md\n@@ -0,0 +1 @@\n+Fix calculation of eventaccessor urls @1letter\ndiff --git a/plone/app/event/dx/behaviors.py b/plone/app/event/dx/behaviors.py\nindex d9633bc7f..95de9aa3c 100644\n--- a/plone/app/event/dx/behaviors.py\n+++ b/plone/app/event/dx/behaviors.py\n@@ -339,7 +339,12 @@ def uid(self):\n \n     @property\n     def url(self):\n-        return safe_text(self.context.absolute_url())\n+        """need to lookup globalrequest in order to calculate\n+        correct URL during cached lookup (eg. in event portlet renderer)\n+        """\n+        request = getRequest()\n+        absolute_url = request.physicalPathToURL(self.context.getPhysicalPath())\n+        return absolute_url\n \n     @property\n     def created(self):\ndiff --git a/plone/app/event/tests/base_setup.py b/plone/app/event/tests/base_setup.py\nindex c3f70d14b..9dda8f758 100644\n--- a/plone/app/event/tests/base_setup.py\n+++ b/plone/app/event/tests/base_setup.py\n@@ -45,8 +45,9 @@ def make_dates(self):\n         past = self.past = tz.normalize(now - timedelta(days=10))\n         future = self.future = tz.normalize(now + timedelta(days=10))\n         far = self.far = tz.normalize(now + timedelta(days=30))\n+        scifi = self.scifi = tz.normalize(now + 50 * timedelta(days=365))\n         duration = self.duration = timedelta(hours=1)\n-        return (now, past, future, far, duration)\n+        return (now, past, future, far, duration, scifi)\n \n     def setUp(self):\n         """Construct sample contents.\n@@ -72,7 +73,7 @@ def setUp(self):\n         set_browserlayer(self.request)\n         set_timezone(TEST_TIMEZONE)\n \n-        now, past, future, far, duration = self.make_dates()\n+        now, past, future, far, duration, scifi = self.make_dates()\n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n         workflow = getToolByName(self.portal, "portal_workflow")\n         workflow.setDefaultChain("simple_publication_workflow")\ndiff --git a/plone/app/event/tests/test_portlet_events.py b/plone/app/event/tests/test_portlet_events.py\nindex 0ce521935..45a2567fa 100644\n--- a/plone/app/event/tests/test_portlet_events.py\n+++ b/plone/app/event/tests/test_portlet_events.py\n@@ -2,9 +2,11 @@\n from plone.app.event.base import localized_now\n from plone.app.event.portlets import portlet_events\n from plone.app.event.testing import PAEvent_INTEGRATION_TESTING\n+from plone.app.event.testing import PAEventDX_FUNCTIONAL_TESTING\n from plone.app.event.testing import PAEventDX_INTEGRATION_TESTING\n from plone.app.event.testing import set_env_timezone\n from plone.app.event.testing import set_timezone\n+from plone.app.event.tests.base_setup import AbstractSampleDataEvents\n from plone.app.portlets.storage import PortletAssignmentMapping\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -15,6 +17,7 @@\n from plone.portlets.interfaces import IPortletManager\n from plone.portlets.interfaces import IPortletRenderer\n from plone.portlets.interfaces import IPortletType\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from Products.GenericSetup.utils import _getDottedName\n from zExceptions import Unauthorized\n@@ -248,3 +251,65 @@ def test_portlet_event_renderer__listing_link(self):\n         rd = r.render()\n         self.assertTrue("?mode=future" in rd)\n         self.assertTrue("?mode=past" in rd)\n+\n+\n+class FunctionalTestCachedPortletEvents(AbstractSampleDataEvents):\n+    layer = PAEventDX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        super().setUp()\n+\n+        # a event in the future is needed, show in the portlet\n+\n+        self.scifi_event = self.event_factory(\n+            container=self.portal.sub,\n+            id="scifi_event",\n+            title="Long Event in the future",\n+            start=self.scifi,\n+            location="My Home",\n+        )\n+        workflow = getToolByName(self.portal, "portal_workflow")\n+        workflow.setDefaultChain("simple_publication_workflow")\n+        workflow.doActionFor(self.scifi_event, "publish")\n+        self.scifi_event.reindexObject()\n+\n+    def anonymous_browser(self):\n+        """Browser of anonymous user"""\n+        import transaction\n+\n+        transaction.commit()\n+        browser = Browser(self.layer["app"])\n+        browser.handleErrors = False\n+        return browser\n+\n+    def test_event_portlet_links(self):\n+        from io import StringIO\n+        from lxml import etree\n+\n+        # first request, events not in ram cache\n+        browser = self.anonymous_browser()\n+        browser.open(f"{self.portal.absolute_url()}")\n+        tree = etree.parse(StringIO(browser.contents), etree.HTMLParser())\n+        result = tree.xpath("//li[contains(@class,\'portletItem even\')]/a/@href")\n+\n+        self.assertEqual(\n+            result[0],\n+            "http://nohost/plone/sub/scifi_event",\n+            "URL of Event is wrong",\n+        )\n+\n+        # second request, events are in ram cache\n+        browser = self.anonymous_browser()\n+        browser.open(f"{self.portal.absolute_url()}")\n+        tree = etree.parse(StringIO(browser.contents), etree.HTMLParser())\n+        result = tree.xpath("//li[contains(@class,\'portletItem even\')]/a/@href")\n+\n+        self.assertEqual(\n+            result[0],\n+            "http://nohost/plone/sub/scifi_event",\n+            "URL of Event, calculate from ram cache, is wrong",\n+        )\n+\n+    def tearDown(self):\n+        if "scifi_event" in self.portal.sub.keys():\n+            del self.portal.sub["scifi_event"]\ndiff --git a/setup.py b/setup.py\nindex 8dc40e9b9..de72e509e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -85,6 +85,7 @@\n             "plone.app.testing [robot]",\n             "plone.testing",\n             "robotsuite",\n+            "lxml",\n         ],\n     },\n )\n'

