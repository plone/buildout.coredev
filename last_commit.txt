Repository: plone.dexterity


Branch: refs/heads/2.2.x
Date: 2020-10-08T16:56:04+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.dexterity/commit/acbb717c2a0fae3b16ba34df1c2fee9e94a3518a

Refs #136 - Update dynamic schema on all ZEO clients on change

Files changed:
A news/136.bugfix
M plone/dexterity/fti.py
M plone/dexterity/utils.py

b'diff --git a/news/136.bugfix b/news/136.bugfix\nnew file mode 100644\nindex 0000000..bbaa530\n--- /dev/null\n+++ b/news/136.bugfix\n@@ -0,0 +1,2 @@\n+Make sure that Dynamic schema is updated on all ZEO clients on change\n+[@avoinea]\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 4a5668a..ec104fe 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -247,8 +247,8 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-\n-        schemaName = utils.portalTypeToSchemaName(self.getId())\n+        mtime = getattr(self, "_p_mtime", None) or ""\n+        schemaName = utils.portalTypeToSchemaName(self.getId(), suffix=str(mtime))\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n@@ -536,7 +536,8 @@ def ftiModified(object, event):\n         if (fti.model_source or fti.model_file) \\\n            and (\'model_source\' in mod or \'model_file\' in mod or \'schema_policy\' in mod):\n \n-            schemaName = utils.portalTypeToSchemaName(portal_type)\n+            mtime = getattr(fti, "_p_mtime", None) or ""\n+            schemaName = utils.portalTypeToSchemaName(portal_type, suffix=str(mtime))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex b59b737..3e04c61 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -36,12 +36,15 @@ def resolveDottedName(dottedName):\n \n # Schema name encoding\n class SchemaNameEncoder(object):\n+    """Schema name encoding\n+    """\n \n     key = (\n         (\' \', \'_1_\'),\n         (\'.\', \'_2_\'),\n         (\'-\', \'_3_\'),\n         (\'/\', \'_4_\'),\n+        (\'|\', \'_5_\'),\n     )\n \n     def encode(self, s):\n@@ -61,11 +64,13 @@ def split(self, s):\n         return [self.decode(a) for a in s.split(\'_0_\')]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None):\n+def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n     if prefix is None:\n         prefix = \'/\'.join(getUtility(ISiteRoot).getPhysicalPath())[1:]\n+    if suffix:\n+        prefix = \'|\'.join([prefix, suffix])\n \n     encoder = SchemaNameEncoder()\n     return encoder.join(prefix, portal_type, schema)\n'

Repository: plone.dexterity


Branch: refs/heads/2.2.x
Date: 2020-10-13T15:21:01+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.dexterity/commit/3b5a791cc3ba29a3774619d794b22820e9d763eb

Merge pull request #143 from plone/sync-schema-on-zeo-clients-plone4

2.2.x - Refs #136 - Update dynamic schema on all ZEO clients on change

Files changed:
A news/136.bugfix
M plone/dexterity/fti.py
M plone/dexterity/utils.py

b'diff --git a/news/136.bugfix b/news/136.bugfix\nnew file mode 100644\nindex 0000000..bbaa530\n--- /dev/null\n+++ b/news/136.bugfix\n@@ -0,0 +1,2 @@\n+Make sure that Dynamic schema is updated on all ZEO clients on change\n+[@avoinea]\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 4a5668a..ec104fe 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -247,8 +247,8 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-\n-        schemaName = utils.portalTypeToSchemaName(self.getId())\n+        mtime = getattr(self, "_p_mtime", None) or ""\n+        schemaName = utils.portalTypeToSchemaName(self.getId(), suffix=str(mtime))\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n@@ -536,7 +536,8 @@ def ftiModified(object, event):\n         if (fti.model_source or fti.model_file) \\\n            and (\'model_source\' in mod or \'model_file\' in mod or \'schema_policy\' in mod):\n \n-            schemaName = utils.portalTypeToSchemaName(portal_type)\n+            mtime = getattr(fti, "_p_mtime", None) or ""\n+            schemaName = utils.portalTypeToSchemaName(portal_type, suffix=str(mtime))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex b59b737..3e04c61 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -36,12 +36,15 @@ def resolveDottedName(dottedName):\n \n # Schema name encoding\n class SchemaNameEncoder(object):\n+    """Schema name encoding\n+    """\n \n     key = (\n         (\' \', \'_1_\'),\n         (\'.\', \'_2_\'),\n         (\'-\', \'_3_\'),\n         (\'/\', \'_4_\'),\n+        (\'|\', \'_5_\'),\n     )\n \n     def encode(self, s):\n@@ -61,11 +64,13 @@ def split(self, s):\n         return [self.decode(a) for a in s.split(\'_0_\')]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None):\n+def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n     if prefix is None:\n         prefix = \'/\'.join(getUtility(ISiteRoot).getPhysicalPath())[1:]\n+    if suffix:\n+        prefix = \'|\'.join([prefix, suffix])\n \n     encoder = SchemaNameEncoder()\n     return encoder.join(prefix, portal_type, schema)\n'

