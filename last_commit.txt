Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-07T21:18:49+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/7934ebf94b34bacc1bde0ba846da5122bdafb10a

Add system endpoint (#735)

* Add system endpoint.

* Add changelog for system endpoint.

* Remove unused imports.

* Black.

* Fix build for Plone 4.3.

* Install pip for py3 on Travis.

* Fix max-line-length in base.cfg.

* Install black with fire and forget.

* Run black on py3.

* Fix test for Plone 4.3.

* Black.

* Check black on Travis.

* Fix OverviewControlpanel import.

* Bind system get to siteroot and protect the view with controlpanel overview

* No need to install black twice

* Use snake case for debug mode for consistency

Files changed:
A news/736.feature
A src/plone/restapi/services/system/__init__.py
A src/plone/restapi/services/system/configure.zcml
A src/plone/restapi/services/system/get.py
A src/plone/restapi/tests/test_system.py
M src/plone/restapi/services/configure.zcml

b'diff --git a/news/736.feature b/news/736.feature\nnew file mode 100644\nindex 00000000..e3da67db\n--- /dev/null\n+++ b/news/736.feature\n@@ -0,0 +1 @@\n+Add system endpoint. [timo]\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 42339ff1..a0a5fe1d 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -27,6 +27,7 @@\n   <include package=".registry"/>\n   <include package=".roles"/>\n   <include package=".search"/>\n+  <include package=".system"/>\n   <include package=".sources"/>\n   <include package=".types"/>\n   <include package=".users"/>\ndiff --git a/src/plone/restapi/services/system/__init__.py b/src/plone/restapi/services/system/__init__.py\nnew file mode 100644\nindex 00000000..e69de29b\ndiff --git a/src/plone/restapi/services/system/configure.zcml b/src/plone/restapi/services/system/configure.zcml\nnew file mode 100644\nindex 00000000..a72e24f5\n--- /dev/null\n+++ b/src/plone/restapi/services/system/configure.zcml\n@@ -0,0 +1,13 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone">\n+\n+  <plone:service\n+    method="GET"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".get.SystemGet"\n+    name="@system"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/system/get.py b/src/plone/restapi/services/system/get.py\nnew file mode 100644\nindex 00000000..80165199\n--- /dev/null\n+++ b/src/plone/restapi/services/system/get.py\n@@ -0,0 +1,26 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+\n+try:\n+    from Products.CMFPlone.controlpanel.browser.overview import OverviewControlPanel\n+except ImportError:\n+    from plone.app.controlpanel.overview import OverviewControlPanel\n+\n+\n+class SystemGet(Service):\n+    def reply(self):\n+        overview_control_panel = OverviewControlPanel(self.context, self.request)\n+        core_versions = overview_control_panel.core_versions()\n+        return {\n+            "@id": "{}/@system".format(self.context.absolute_url()),\n+            "zope_version": core_versions.get("Zope"),\n+            "plone_version": core_versions.get("Plone"),\n+            "python_version": core_versions.get("Python"),\n+            "cmf_version": core_versions.get("CMF"),\n+            "pil_version": core_versions.get("PIL"),\n+            "debug_mode": core_versions.get("Debug mode"),\n+            "plone_gs_metadata_version_installed": core_versions.get("Plone Instance"),\n+            "plone_gs_metadata_version_file_system": core_versions.get(\n+                "Plone File System"\n+            ),\n+        }\ndiff --git a/src/plone/restapi/tests/test_system.py b/src/plone/restapi/tests/test_system.py\nnew file mode 100644\nindex 00000000..f74b9b47\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_system.py\n@@ -0,0 +1,57 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from Products.CMFCore.utils import getToolByName\n+\n+try:\n+    from Products.CMFPlone.controlpanel.browser.overview import OverviewControlPanel\n+except ImportError:\n+    from plone.app.controlpanel.overview import OverviewControlPanel\n+\n+import unittest\n+\n+\n+class TestSystemFunctional(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.portal.REQUEST\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+        overview_control_panel = OverviewControlPanel(self.portal, self.request)\n+        self.core_versions = overview_control_panel.core_versions()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_get_system(self):\n+        response = self.api_session.get("/@system")\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers.get("Content-Type"), "application/json")\n+\n+        results = response.json()\n+        self.assertEqual(results[u"@id"], self.portal.absolute_url() + "/@system")\n+        self.assertEqual(results["cmf_version"], self.core_versions.get("CMF"))\n+        self.assertEqual(results["debug_mode"], self.core_versions.get("Debug mode"))\n+        self.assertEqual(results["pil_version"], self.core_versions.get("PIL"))\n+        self.assertEqual(results["python_version"], self.core_versions.get("Python"))\n+        self.assertEqual(\n+            results["plone_gs_metadata_version_file_system"],\n+            self.core_versions.get("Plone File System"),\n+        )\n+        self.assertEqual(\n+            results["plone_gs_metadata_version_installed"],\n+            self.core_versions.get("Plone Instance"),\n+        )\n+        self.assertEqual(results["plone_version"], self.core_versions.get("Plone"))\n+        self.assertEqual(results["zope_version"], self.core_versions.get("Zope"))\n'

