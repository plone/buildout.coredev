Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-09-24T22:54:26+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/483485d85818c1543bca0e9f8f1174dbac0b073c

remove uneeded stringtype checks (#876)

Files changed:
A news/875.feature
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/multilingual/pam.py

b'diff --git a/news/875.feature b/news/875.feature\nnew file mode 100644\nindex 000000000..133c4e3f3\n--- /dev/null\n+++ b/news/875.feature\n@@ -0,0 +1,2 @@\n+Remove unneeded stringtype checks\n+[erral]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex b3731693b..35d051362 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -25,23 +25,22 @@ def __init__(self, context, request):\n \n     def get_object(self, key):\n         """Get an object by url, path or UID."""\n-        if isinstance(key, six.string_types):\n-            if key.startswith(self.portal_url):\n-                # Resolve by URL\n-                key = key[len(self.portal_url) + 1 :]\n-                if six.PY2:\n-                    key = key.encode("utf8")\n-                return self.portal.restrictedTraverse(key, None)\n-            elif key.startswith("/"):\n-                if six.PY2:\n-                    key = key.encode("utf8")\n-                # Resolve by path\n-                return self.portal.restrictedTraverse(key.lstrip("/"), None)\n-            else:\n-                # Resolve by UID\n-                brain = self.catalog(UID=key)\n-                if brain:\n-                    return brain[0].getObject()\n+        if key.startswith(self.portal_url):\n+            # Resolve by URL\n+            key = key[len(self.portal_url) + 1 :]\n+            if six.PY2:\n+                key = key.encode("utf8")\n+            return self.portal.restrictedTraverse(key, None)\n+        elif key.startswith("/"):\n+            if six.PY2:\n+                key = key.encode("utf8")\n+            # Resolve by path\n+            return self.portal.restrictedTraverse(key.lstrip("/"), None)\n+        else:\n+            # Resolve by UID\n+            brain = self.catalog(UID=key)\n+            if brain:\n+                return brain[0].getObject()\n \n     def reply(self):\n         # return 401/403 Forbidden if the user has no permission\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 57cb784e9..74961fcbc 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -101,23 +101,22 @@ def reply(self):\n         return {}\n \n     def get_object(self, key):\n-        if isinstance(key, six.string_types):\n-            if key.startswith(self.portal_url):\n-                # Resolve by URL\n-                key = key[len(self.portal_url) + 1 :]\n-                if six.PY2:\n-                    key = key.encode("utf8")\n-                return self.portal.restrictedTraverse(key, None)\n-            elif key.startswith("/"):\n-                if six.PY2:\n-                    key = key.encode("utf8")\n-                # Resolve by path\n-                return self.portal.restrictedTraverse(key.lstrip("/"), None)\n-            else:\n-                # Resolve by UID\n-                brain = self.catalog(UID=key)\n-                if brain:\n-                    return brain[0].getObject()\n+        if key.startswith(self.portal_url):\n+            # Resolve by URL\n+            key = key[len(self.portal_url) + 1 :]\n+            if six.PY2:\n+                key = key.encode("utf8")\n+            return self.portal.restrictedTraverse(key, None)\n+        elif key.startswith("/"):\n+            if six.PY2:\n+                key = key.encode("utf8")\n+            # Resolve by path\n+            return self.portal.restrictedTraverse(key.lstrip("/"), None)\n+        else:\n+            # Resolve by UID\n+            brain = self.catalog(UID=key)\n+            if brain:\n+                return brain[0].getObject()\n \n \n class UnlinkTranslations(Service):\n'

