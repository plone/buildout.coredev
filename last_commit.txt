Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-08-14T17:28:47+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/f68fb6c3673e8a17b36e50924db55e28639760ba

Use Products.isurlinportal directly, instead of relying on it patching our URLTool.

This solves a cyclic dependency.
See https://github.com/plone/Products.isurlinportal/issues/12

Files changed:
A news/12.breaking
M Products/CMFPlone/URLTool.py

b'diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py\nindex 76ccbb2f39..71aecab897 100644\n--- a/Products/CMFPlone/URLTool.py\n+++ b/Products/CMFPlone/URLTool.py\n@@ -6,6 +6,7 @@\n from Products.CMFCore.URLTool import URLTool as BaseTool\n from Products.CMFPlone.patches.gtbn import rewrap_in_request_container\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n+from Products.isurlinportal import isURLInPortal\n from zope.component import getUtility\n \n \n@@ -14,26 +15,10 @@ class URLTool(PloneBaseTool, BaseTool):\n     security = ClassSecurityInfo()\n     toolicon = "skins/plone_images/link_icon.png"\n \n-    @security.public\n-    def isURLInPortal(self, url, context=None):\n-        # Note: no docstring, because the method is publicly available\n-        # but does not need to be callable on site-url/portal_url/isURLInPortal.\n-        #\n-        # This method is overridden by Products.isurlinportal,\n-        # but the public declaration still seems needed.\n-        #\n-        # Also, in tests/testURLTool.py we do not use layers,\n-        # which means the Products code is not loaded,\n-        # so we need to import it explicitly.\n-        # This is done once.\n-        try:\n-            from Products.isurlinportal import isURLInPortal\n-        except ImportError:\n-            # If this somehow fails, it seems better to have a safe fallback,\n-            # instead of a hard failure.\n-            return False\n-\n-        return isURLInPortal(self, url, context=context)\n+    # The implementation of this method was moved to Products.isurlinportal\n+    # to be able to more quickly do a security release in case there is a\n+    # problem in this part.\n+    isURLInPortal = isURLInPortal\n \n     def getPortalObject(self):\n         portal = aq_parent(aq_inner(self))\ndiff --git a/news/12.breaking b/news/12.breaking\nnew file mode 100644\nindex 0000000000..af580c5b43\n--- /dev/null\n+++ b/news/12.breaking\n@@ -0,0 +1,3 @@\n+Use `Products.isurlinportal` directly, instead of relying on it patching our `URLTool`.\n+This solves a cyclic dependency.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-08-17T01:45:35+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@py76.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/f51422ece69e463b393c714cac57ae3d59585f61

Merge pull request #4000 from plone/maurits-use-products-isurlinportal-directly

Use Products.isurlinportal directly

Files changed:
A news/12.breaking
M Products/CMFPlone/URLTool.py

b'diff --git a/Products/CMFPlone/URLTool.py b/Products/CMFPlone/URLTool.py\nindex 76ccbb2f39..71aecab897 100644\n--- a/Products/CMFPlone/URLTool.py\n+++ b/Products/CMFPlone/URLTool.py\n@@ -6,6 +6,7 @@\n from Products.CMFCore.URLTool import URLTool as BaseTool\n from Products.CMFPlone.patches.gtbn import rewrap_in_request_container\n from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n+from Products.isurlinportal import isURLInPortal\n from zope.component import getUtility\n \n \n@@ -14,26 +15,10 @@ class URLTool(PloneBaseTool, BaseTool):\n     security = ClassSecurityInfo()\n     toolicon = "skins/plone_images/link_icon.png"\n \n-    @security.public\n-    def isURLInPortal(self, url, context=None):\n-        # Note: no docstring, because the method is publicly available\n-        # but does not need to be callable on site-url/portal_url/isURLInPortal.\n-        #\n-        # This method is overridden by Products.isurlinportal,\n-        # but the public declaration still seems needed.\n-        #\n-        # Also, in tests/testURLTool.py we do not use layers,\n-        # which means the Products code is not loaded,\n-        # so we need to import it explicitly.\n-        # This is done once.\n-        try:\n-            from Products.isurlinportal import isURLInPortal\n-        except ImportError:\n-            # If this somehow fails, it seems better to have a safe fallback,\n-            # instead of a hard failure.\n-            return False\n-\n-        return isURLInPortal(self, url, context=context)\n+    # The implementation of this method was moved to Products.isurlinportal\n+    # to be able to more quickly do a security release in case there is a\n+    # problem in this part.\n+    isURLInPortal = isURLInPortal\n \n     def getPortalObject(self):\n         portal = aq_parent(aq_inner(self))\ndiff --git a/news/12.breaking b/news/12.breaking\nnew file mode 100644\nindex 0000000000..af580c5b43\n--- /dev/null\n+++ b/news/12.breaking\n@@ -0,0 +1,3 @@\n+Use `Products.isurlinportal` directly, instead of relying on it patching our `URLTool`.\n+This solves a cyclic dependency.\n+[maurits]\n'

