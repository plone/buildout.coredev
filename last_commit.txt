Repository: plone.namedfile


Branch: refs/heads/master
Date: 2023-09-11T10:57:01-04:00
Author: Mathias Leimgruber (maethu) <m.leimgruber@webcloud7.ch>
Commit: https://github.com/plone/plone.namedfile/commit/056ad6ae630a9576198966b38b5e26786e573842

Add internal modification timestamp with fallback to _p_mtime.

Files changed:
A news/149.internal
M plone/namedfile/file.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/news/149.internal b/news/149.internal\nnew file mode 100644\nindex 0000000..aa24e6a\n--- /dev/null\n+++ b/news/149.internal\n@@ -0,0 +1,2 @@\n+Add internal modification timestamp with fallback to _p_mtime.\n+[mathias.leimgruber]\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex f527aa1..36dd30b 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -1,6 +1,7 @@\n # The implementations in this file are largely borrowed\n # from zope.app.file and z3c.blobfile\n # and are licensed under the ZPL.\n+from DateTime import DateTime\n from logging import getLogger\n from persistent import Persistent\n from plone.namedfile.interfaces import INamedBlobFile\n@@ -70,8 +71,17 @@ def _get_contents(self):\n     pass\n \n \n+class ModifiedPropertyMixin:\n+    @property\n+    def modified(self):\n+        if hasattr(self, "_modified"):\n+            return self._modified\n+        # Fall back to modification time in database.\n+        return self._p_mtime\n+\n+\n @implementer(INamedFile)\n-class NamedFile(Persistent):\n+class NamedFile(Persistent, ModifiedPropertyMixin):\n     """A non-BLOB file that stores a filename\n \n     Let\'s test the constructor:\n@@ -169,6 +179,7 @@ def __init__(self, data=b"", contentType="", filename=None):\n         self.data = data\n         self.contentType = contentType\n         self.filename = filename\n+        self._modified = DateTime().millis()\n \n     def _getData(self):\n         if isinstance(self._data, tuple(FILECHUNK_CLASSES)):\n@@ -177,6 +188,7 @@ def _getData(self):\n             return self._data\n \n     def _setData(self, data):\n+        self._modified = DateTime().millis()\n \n         # Handle case when data is a string\n         if isinstance(data, str):\n@@ -310,7 +322,7 @@ def getImageSize(self):\n \n \n @implementer(INamedBlobFile, HTTPRangeSupport.HTTPRangeInterface)\n-class NamedBlobFile(Persistent):\n+class NamedBlobFile(Persistent, ModifiedPropertyMixin):\n     """A file stored in a ZODB BLOB, with a filename"""\n \n     filename = FieldProperty(INamedFile["filename"])\n@@ -325,6 +337,7 @@ def __init__(self, data=b"", contentType="", filename=None):\n         f.close()\n         self._setData(data)\n         self.filename = filename\n+        self._modified = DateTime().millis()\n \n     def open(self, mode="r"):\n         if mode != "r" and "size" in self.__dict__:\n@@ -342,6 +355,7 @@ def _setData(self, data):\n         log.debug("Storage selected for data: %s", dottedName)\n         storable = getUtility(IStorage, name=dottedName)\n         storable.store(data, self._blob)\n+        self._modified = DateTime().millis()\n \n     def _getData(self):\n         fp = self._blob.open("r")\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex 16d30e5..b0aa490 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -1,3 +1,8 @@\n+from DateTime import DateTime\n+from plone.namedfile.file import NamedBlobImage\n+from plone.namedfile.file import NamedImage\n+\n+\n import os\n \n \n@@ -6,3 +11,11 @@ def getFile(filename, length=None):\n     filename = os.path.join(os.path.dirname(__file__), filename)\n     with open(filename, "rb") as data_file:\n         return data_file.read(length)\n+\n+\n+class MockNamedImage(NamedImage):\n+    _p_mtime = DateTime().millis()\n+\n+\n+class MockNamedBlobImage(NamedBlobImage):\n+    _p_mtime = DateTime().millis()\ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex d748246..67f7107 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -15,6 +15,7 @@\n #\n ##############################################################################\n \n+from DateTime import DateTime\n from plone.namedfile import storages\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n@@ -24,11 +25,12 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests.test_image import zptlogo\n+from plone.namedfile.tests import MockNamedBlobImage\n from zope.component import provideUtility\n from zope.interface.verify import verifyClass\n \n-import os\n import struct\n+import time\n import transaction\n import unittest\n \n@@ -56,11 +58,13 @@ def testEmpty(self):\n         file = self._makeImage()\n         self.assertEqual(file.contentType, "")\n         self.assertEqual(file.data, b"")\n+        self.assertIsNotNone(file.modified)\n \n     def testConstructor(self):\n         file = self._makeImage(b"Data")\n         self.assertEqual(file.contentType, "")\n         self.assertEqual(file.data, b"Data")\n+        self.assertIsNotNone(file.modified)\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -73,6 +77,24 @@ def testMutators(self):\n         self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n+    def testModifiedTimeStamp(self):\n+        image = self._makeImage()\n+        old_timestamp = image.modified\n+        time.sleep(1/1000)  # make sure at least 1ms passes\n+        image._setData(zptlogo)\n+        self.assertNotEqual(image.modified, old_timestamp)\n+\n+    def testFallBackToDatabaseModifiedTimeStamp(self):\n+        dt = DateTime()\n+        image = MockNamedBlobImage()\n+        image._p_mtime = dt.millis()\n+        image._modified = (dt + 1).millis()\n+\n+        delattr(image, "_modified")\n+        marker = object()\n+        self.assertEqual(marker, getattr(image, "_modified", marker))\n+        self.assertEqual(dt.millis(), image._p_mtime)\n+\n     def testInterface(self):\n         self.assertTrue(INamedBlobImage.implementedBy(NamedBlobImage))\n         self.assertTrue(verifyClass(INamedBlobImage, NamedBlobImage))\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 4629207..8360a97 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -1,12 +1,15 @@\n # This file is borrowed from zope.app.file and licensed ZPL.\n \n+from DateTime import DateTime\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n+from plone.namedfile.tests import MockNamedImage\n from plone.namedfile.utils import get_contenttype\n from zope.interface.verify import verifyClass\n \n+import time\n import unittest\n \n \n@@ -39,15 +42,16 @@ def testEmpty(self):\n         file_img = self._makeImage()\n         self.assertEqual(file_img.contentType, "")\n         self.assertEqual(bytes(file_img.data), b"")\n+        self.assertIsNotNone(file_img.modified)\n \n     def testConstructor(self):\n         file_img = self._makeImage(b"Data")\n         self.assertEqual(file_img.contentType, "")\n         self.assertEqual(bytes(file_img.data), b"Data")\n+        self.assertIsNotNone(file_img.modified)\n \n     def testMutators(self):\n         image = self._makeImage()\n-\n         image.contentType = "image/jpeg"\n         self.assertEqual(image.contentType, "image/jpeg")\n \n@@ -56,6 +60,24 @@ def testMutators(self):\n         self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n+    def testModifiedTimeStamp(self):\n+        image = self._makeImage()\n+        old_timestamp = image.modified\n+        time.sleep(1/1000)  # make sure at least 1ms passes\n+        image._setData(zptlogo)\n+        self.assertNotEqual(image.modified, old_timestamp)\n+\n+    def testFallBackToDatabaseModifiedTimeStamp(self):\n+        dt = DateTime()\n+        image = MockNamedImage()\n+        image._p_mtime = dt.millis()\n+        image._modified = (dt + 1).millis()\n+\n+        delattr(image, "_modified")\n+        marker = object()\n+        self.assertEqual(marker, getattr(image, "_modified", marker))\n+        self.assertEqual(dt.millis(), image._p_mtime)\n+\n     def testInterface(self):\n         self.assertTrue(INamedImage.implementedBy(NamedImage))\n         self.assertTrue(verifyClass(INamedImage, NamedImage))\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 7934763..4159ebf 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -11,6 +11,7 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n+from plone.namedfile.tests import MockNamedImage\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.storage import IImageScaleStorage\n@@ -143,10 +144,6 @@ def value(self):\n         return self.field\n \n \n-class MockNamedImage(NamedImage):\n-    _p_mtime = DateTime().millis()\n-\n-\n @implementer(IScaledImageQuality)\n class DummyQualitySupplier:\n     """fake utility for image quality setting from imaging control panel."""\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2023-09-11T22:22:10-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.namedfile/commit/28044bd2801a29a0460f7374252b9c65381a5c31

Merge pull request #150 from plone/mle-internal-modification-timestamp

Add internal modification timestamp.

Files changed:
A news/149.internal
M plone/namedfile/file.py
M plone/namedfile/tests/__init__.py
M plone/namedfile/tests/test_blobfile.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/news/149.internal b/news/149.internal\nnew file mode 100644\nindex 0000000..aa24e6a\n--- /dev/null\n+++ b/news/149.internal\n@@ -0,0 +1,2 @@\n+Add internal modification timestamp with fallback to _p_mtime.\n+[mathias.leimgruber]\ndiff --git a/plone/namedfile/file.py b/plone/namedfile/file.py\nindex f527aa1..36dd30b 100644\n--- a/plone/namedfile/file.py\n+++ b/plone/namedfile/file.py\n@@ -1,6 +1,7 @@\n # The implementations in this file are largely borrowed\n # from zope.app.file and z3c.blobfile\n # and are licensed under the ZPL.\n+from DateTime import DateTime\n from logging import getLogger\n from persistent import Persistent\n from plone.namedfile.interfaces import INamedBlobFile\n@@ -70,8 +71,17 @@ def _get_contents(self):\n     pass\n \n \n+class ModifiedPropertyMixin:\n+    @property\n+    def modified(self):\n+        if hasattr(self, "_modified"):\n+            return self._modified\n+        # Fall back to modification time in database.\n+        return self._p_mtime\n+\n+\n @implementer(INamedFile)\n-class NamedFile(Persistent):\n+class NamedFile(Persistent, ModifiedPropertyMixin):\n     """A non-BLOB file that stores a filename\n \n     Let\'s test the constructor:\n@@ -169,6 +179,7 @@ def __init__(self, data=b"", contentType="", filename=None):\n         self.data = data\n         self.contentType = contentType\n         self.filename = filename\n+        self._modified = DateTime().millis()\n \n     def _getData(self):\n         if isinstance(self._data, tuple(FILECHUNK_CLASSES)):\n@@ -177,6 +188,7 @@ def _getData(self):\n             return self._data\n \n     def _setData(self, data):\n+        self._modified = DateTime().millis()\n \n         # Handle case when data is a string\n         if isinstance(data, str):\n@@ -310,7 +322,7 @@ def getImageSize(self):\n \n \n @implementer(INamedBlobFile, HTTPRangeSupport.HTTPRangeInterface)\n-class NamedBlobFile(Persistent):\n+class NamedBlobFile(Persistent, ModifiedPropertyMixin):\n     """A file stored in a ZODB BLOB, with a filename"""\n \n     filename = FieldProperty(INamedFile["filename"])\n@@ -325,6 +337,7 @@ def __init__(self, data=b"", contentType="", filename=None):\n         f.close()\n         self._setData(data)\n         self.filename = filename\n+        self._modified = DateTime().millis()\n \n     def open(self, mode="r"):\n         if mode != "r" and "size" in self.__dict__:\n@@ -342,6 +355,7 @@ def _setData(self, data):\n         log.debug("Storage selected for data: %s", dottedName)\n         storable = getUtility(IStorage, name=dottedName)\n         storable.store(data, self._blob)\n+        self._modified = DateTime().millis()\n \n     def _getData(self):\n         fp = self._blob.open("r")\ndiff --git a/plone/namedfile/tests/__init__.py b/plone/namedfile/tests/__init__.py\nindex 16d30e5..b0aa490 100644\n--- a/plone/namedfile/tests/__init__.py\n+++ b/plone/namedfile/tests/__init__.py\n@@ -1,3 +1,8 @@\n+from DateTime import DateTime\n+from plone.namedfile.file import NamedBlobImage\n+from plone.namedfile.file import NamedImage\n+\n+\n import os\n \n \n@@ -6,3 +11,11 @@ def getFile(filename, length=None):\n     filename = os.path.join(os.path.dirname(__file__), filename)\n     with open(filename, "rb") as data_file:\n         return data_file.read(length)\n+\n+\n+class MockNamedImage(NamedImage):\n+    _p_mtime = DateTime().millis()\n+\n+\n+class MockNamedBlobImage(NamedBlobImage):\n+    _p_mtime = DateTime().millis()\ndiff --git a/plone/namedfile/tests/test_blobfile.py b/plone/namedfile/tests/test_blobfile.py\nindex d748246..67f7107 100644\n--- a/plone/namedfile/tests/test_blobfile.py\n+++ b/plone/namedfile/tests/test_blobfile.py\n@@ -15,6 +15,7 @@\n #\n ##############################################################################\n \n+from DateTime import DateTime\n from plone.namedfile import storages\n from plone.namedfile.file import NamedBlobFile\n from plone.namedfile.file import NamedBlobImage\n@@ -24,11 +25,12 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests.test_image import zptlogo\n+from plone.namedfile.tests import MockNamedBlobImage\n from zope.component import provideUtility\n from zope.interface.verify import verifyClass\n \n-import os\n import struct\n+import time\n import transaction\n import unittest\n \n@@ -56,11 +58,13 @@ def testEmpty(self):\n         file = self._makeImage()\n         self.assertEqual(file.contentType, "")\n         self.assertEqual(file.data, b"")\n+        self.assertIsNotNone(file.modified)\n \n     def testConstructor(self):\n         file = self._makeImage(b"Data")\n         self.assertEqual(file.contentType, "")\n         self.assertEqual(file.data, b"Data")\n+        self.assertIsNotNone(file.modified)\n \n     def testMutators(self):\n         image = self._makeImage()\n@@ -73,6 +77,24 @@ def testMutators(self):\n         self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n+    def testModifiedTimeStamp(self):\n+        image = self._makeImage()\n+        old_timestamp = image.modified\n+        time.sleep(1/1000)  # make sure at least 1ms passes\n+        image._setData(zptlogo)\n+        self.assertNotEqual(image.modified, old_timestamp)\n+\n+    def testFallBackToDatabaseModifiedTimeStamp(self):\n+        dt = DateTime()\n+        image = MockNamedBlobImage()\n+        image._p_mtime = dt.millis()\n+        image._modified = (dt + 1).millis()\n+\n+        delattr(image, "_modified")\n+        marker = object()\n+        self.assertEqual(marker, getattr(image, "_modified", marker))\n+        self.assertEqual(dt.millis(), image._p_mtime)\n+\n     def testInterface(self):\n         self.assertTrue(INamedBlobImage.implementedBy(NamedBlobImage))\n         self.assertTrue(verifyClass(INamedBlobImage, NamedBlobImage))\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 4629207..8360a97 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -1,12 +1,15 @@\n # This file is borrowed from zope.app.file and licensed ZPL.\n \n+from DateTime import DateTime\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamedImage\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n+from plone.namedfile.tests import MockNamedImage\n from plone.namedfile.utils import get_contenttype\n from zope.interface.verify import verifyClass\n \n+import time\n import unittest\n \n \n@@ -39,15 +42,16 @@ def testEmpty(self):\n         file_img = self._makeImage()\n         self.assertEqual(file_img.contentType, "")\n         self.assertEqual(bytes(file_img.data), b"")\n+        self.assertIsNotNone(file_img.modified)\n \n     def testConstructor(self):\n         file_img = self._makeImage(b"Data")\n         self.assertEqual(file_img.contentType, "")\n         self.assertEqual(bytes(file_img.data), b"Data")\n+        self.assertIsNotNone(file_img.modified)\n \n     def testMutators(self):\n         image = self._makeImage()\n-\n         image.contentType = "image/jpeg"\n         self.assertEqual(image.contentType, "image/jpeg")\n \n@@ -56,6 +60,24 @@ def testMutators(self):\n         self.assertEqual(image.contentType, "image/gif")\n         self.assertEqual(image.getImageSize(), (16, 16))\n \n+    def testModifiedTimeStamp(self):\n+        image = self._makeImage()\n+        old_timestamp = image.modified\n+        time.sleep(1/1000)  # make sure at least 1ms passes\n+        image._setData(zptlogo)\n+        self.assertNotEqual(image.modified, old_timestamp)\n+\n+    def testFallBackToDatabaseModifiedTimeStamp(self):\n+        dt = DateTime()\n+        image = MockNamedImage()\n+        image._p_mtime = dt.millis()\n+        image._modified = (dt + 1).millis()\n+\n+        delattr(image, "_modified")\n+        marker = object()\n+        self.assertEqual(marker, getattr(image, "_modified", marker))\n+        self.assertEqual(dt.millis(), image._p_mtime)\n+\n     def testInterface(self):\n         self.assertTrue(INamedImage.implementedBy(NamedImage))\n         self.assertTrue(verifyClass(INamedImage, NamedImage))\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 7934763..4159ebf 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -11,6 +11,7 @@\n from plone.namedfile.testing import PLONE_NAMEDFILE_FUNCTIONAL_TESTING\n from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n+from plone.namedfile.tests import MockNamedImage\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n from plone.scale.interfaces import IScaledImageQuality\n from plone.scale.storage import IImageScaleStorage\n@@ -143,10 +144,6 @@ def value(self):\n         return self.field\n \n \n-class MockNamedImage(NamedImage):\n-    _p_mtime = DateTime().millis()\n-\n-\n @implementer(IScaledImageQuality)\n class DummyQualitySupplier:\n     """fake utility for image quality setting from imaging control panel."""\n'

