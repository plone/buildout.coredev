Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-01-22T20:50:47+01:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/8340d980614f2b4cae3647ef10c36f3af20ddd5b

Handle remoteUrl field for Links (#1005)

* convert links for Link objects

* add changelog

* fix blank lines

* fix tests

* fix unicode handling

* blacked

* blacked again

Co-authored-by: Victor Fernandez de Alba &lt;sneridagh@gmail.com&gt;

Files changed:
A news/1005.feature
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py

b'diff --git a/news/1005.feature b/news/1005.feature\nnew file mode 100644\nindex 000000000..a84c967dd\n--- /dev/null\n+++ b/news/1005.feature\n@@ -0,0 +1 @@\n+- Add serializer/deserializer for remoteUrl Link\'s field [cekk]\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 9ff560a18..c91a26628 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -4,14 +4,15 @@\n     i18n_domain="plone.restapi">\n \n   <adapter factory=".site.DeserializeSiteRootFromJson" />\n-\n   <adapter factory=".dxcontent.DeserializeFromJson" />\n+\n   <adapter factory=".dxfields.DefaultFieldDeserializer" />\n   <adapter factory=".dxfields.DatetimeFieldDeserializer" />\n   <adapter factory=".dxfields.ChoiceFieldDeserializer" />\n   <adapter factory=".dxfields.CollectionFieldDeserializer" />\n   <adapter factory=".dxfields.DictFieldDeserializer" />\n   <adapter factory=".dxfields.TextLineFieldDeserializer" />\n+  <adapter factory=".dxfields.LinkTextLineFieldDeserializer" />\n   <adapter factory=".dxfields.TimeFieldDeserializer" />\n   <adapter factory=".dxfields.TimedeltaFieldDeserializer" />\n   <adapter factory=".dxfields.NamedFieldDeserializer" />\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex a8d9f4281..e166e0424 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from datetime import timedelta\n+from plone.app.contenttypes.interfaces import ILink\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.interfaces import IDexterityContent\n@@ -74,6 +75,23 @@ def __call__(self, value):\n         return value\n \n \n+@implementer(IFieldDeserializer)\n+@adapter(ITextLine, ILink, IBrowserRequest)\n+class LinkTextLineFieldDeserializer(TextLineFieldDeserializer):\n+    def __call__(self, value):\n+        value = super(LinkTextLineFieldDeserializer, self).__call__(value)\n+        if self.field.getName() == "remoteUrl":\n+            portal = getMultiAdapter(\n+                (self.context, self.context.REQUEST), name="plone_portal_state"\n+            ).portal()\n+            portal_url = portal.portal_url()\n+            if value.startswith(portal_url):\n+                value = "${{portal_url}}{path}".format(\n+                    path=value.replace(portal_url, "")\n+                )\n+        return value\n+\n+\n @implementer(IFieldDeserializer)\n @adapter(IDatetime, IDexterityContent, IBrowserRequest)\n class DatetimeFieldDeserializer(DefaultFieldDeserializer):\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex b3680c1af..778c173a8 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -24,6 +24,7 @@\n     <adapter factory=".dxfields.RichttextFieldSerializer" />\n     <adapter factory=".dxfields.DefaultPrimaryFieldTarget" />\n     <adapter factory=".dxfields.PrimaryFileFieldTarget" />\n+    <adapter factory=".dxfields.TextLineFieldSerializer" />\n \n     <adapter factory=".blocks.BlocksJSONFieldSerializer" />\n     <subscriber factory=".blocks.TextBlockSerializer"\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 0b7f9952c..36b0623cb 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -2,7 +2,8 @@\n \n from AccessControl import getSecurityManager\n from Products.CMFCore.permissions import ModifyPortalContent\n-\n+from plone.app.contenttypes.interfaces import ILink\n+from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.textfield.interfaces import IRichText\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n@@ -12,12 +13,14 @@\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n+from zope.component import getMultiAdapter\n from zope.component import adapter\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.schema.interfaces import IChoice\n from zope.schema.interfaces import ICollection\n from zope.schema.interfaces import IField\n+from zope.schema.interfaces import ITextLine\n from zope.schema.interfaces import IVocabularyTokenized\n \n import logging\n@@ -132,6 +135,22 @@ def __call__(self):\n         return json_compatible(value, self.context)\n \n \n+@adapter(ITextLine, ILink, Interface)\n+class TextLineFieldSerializer(DefaultFieldSerializer):\n+    def __call__(self):\n+        if self.field.getName() != "remoteUrl":\n+            return super(TextLineFieldSerializer, self).__call__()\n+        value = self.get_value()\n+        path = replace_link_variables_by_paths(context=self.context, url=value)\n+        portal = getMultiAdapter(\n+            (self.context, self.context.REQUEST), name="plone_portal_state"\n+        ).portal()\n+        ref_obj = portal.restrictedTraverse(path, None)\n+        if ref_obj:\n+            value = ref_obj.absolute_url()\n+        return json_compatible(value)\n+\n+\n @adapter(IField, IDexterityContent, Interface)\n @implementer(IPrimaryFieldTarget)\n class DefaultPrimaryFieldTarget(object):\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex f6b466126..71815d337 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -51,7 +51,7 @@ Content-Type: application/json\n     "description": "Congratulations! You have successfully installed Plone.", \n     "title": "Welcome to Plone"\n   }, \n-  "remoteUrl": null, \n+  "remoteUrl": "http://localhost:55001/plone", \n   "review_state": "private", \n   "rights": "", \n   "subjects": [], \ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 424c22a5b..8b3ffc907 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -605,3 +605,26 @@ def constraint(self, value):\n             deserializer(b"not an int")\n \n         self.assertEqual(42, deserializer(42))\n+\n+    def test_textline_deserializer_for_links_convert_internal_links(self):\n+        self.portal.invokeFactory("Link", id="link", title="Test Link")\n+        link = self.portal.link\n+        field = None\n+        for schema in iterSchemata(link):\n+            if "remoteUrl" in schema:\n+                field = schema.get("remoteUrl")\n+                break\n+        deserializer = getMultiAdapter((field, link, self.request), IFieldDeserializer)\n+\n+        self.assertEqual(\n+            u"http://www.plone.com", deserializer(value=u"http://www.plone.com")\n+        )\n+        self.assertEqual(\n+            u"${portal_url}/doc1", deserializer(value=u"http://nohost/plone/doc1")\n+        )\n+\n+        # for other contents/fields does nothing\n+        value = self.deserialize("test_textline_field", u"http://www.plone.com")\n+        self.assertEqual(u"http://www.plone.com", value)\n+        value = self.deserialize("test_textline_field", u"http://nohost/plone/doc1")\n+        self.assertEqual(self.portal.doc1.absolute_url(), value)\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex d23a980ea..288992b8f 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -317,6 +317,28 @@ def test_relationlist_field_serialization_returns_list(self):\n             value,\n         )\n \n+    def test_remoteurl_field_in_links_get_converted(self):\n+        link = self.portal[\n+            self.portal.invokeFactory(\n+                "Link",\n+                id="link",\n+                title="Test Link",\n+            )\n+        ]\n+        field = None\n+        for schema in iterSchemata(link):\n+            if "remoteUrl" in schema:\n+                field = schema.get("remoteUrl")\n+                break\n+        dm = getMultiAdapter((link, field), IDataManager)\n+        serializer = getMultiAdapter((field, link, self.request), IFieldSerializer)\n+\n+        dm.set("http://www.plone.com")\n+        self.assertEqual(serializer(), "http://www.plone.com")\n+\n+        dm.set("${portal_url}/doc1")\n+        self.assertEqual(serializer(), self.portal.doc1.absolute_url())\n+\n \n @unittest.skipUnless(\n     PLONE_VERSION.base_version < "5.1",\n'

