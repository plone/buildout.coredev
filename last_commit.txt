Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-11T10:01:13+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/dcc96a34db89323a51a1e8f6eab6b542ef1c2fe6

Add database endpoint (#940)

* Add database endpoint

* Add changelog for #941

* Add documentation for system and database endpoint

* Hardcode database/system response in docs. No way we are going to be able to freeze that

* Include plone.restapi version in system endpoint

* Do not create response files for database and system endpoint docs

* ReST is not MD...

Files changed:
A docs/source/database.rst
A docs/source/system.rst
A news/941.feature
A src/plone/restapi/services/database/__init__.py
A src/plone/restapi/services/database/configure.zcml
A src/plone/restapi/services/database/get.py
A src/plone/restapi/tests/http-examples/database_get.req
A src/plone/restapi/tests/http-examples/system_get.req
A src/plone/restapi/tests/test_services_database.py
M docs/source/comments.rst
M docs/source/index.rst
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/services/system/get.py
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/comments.rst b/docs/source/comments.rst\nindex 913a3895..d43c34ae 100644\n--- a/docs/source/comments.rst\n+++ b/docs/source/comments.rst\n@@ -72,7 +72,7 @@ If the creation of the comment has been successful, the server will respond with\n Updating a Comment\n ------------------\n \n-..note: The permission to update a comment is, by default, only granted to the creater (owner role) of the comment.\n+.. note:: The permission to update a comment is, by default, only granted to the creater (owner role) of the comment.\n \n An existing comment can be updated by sending a PATCH request to the URL of the comment. The request body needs to contain a JSON structure with at least a \'text\' attribute:\n \n@@ -90,7 +90,7 @@ Deleting a Comment\n \n An existing comment can be deleted by sending a DELETE request to the URL of the comment.\n \n-..note: Deleting a comment will, by default, also delete all existing replies to that comment.\n+.. note:: Deleting a comment will, by default, also delete all existing replies to that comment.\n \n ..  http:example:: curl httpie python-requests\n \t :request: ../../src/plone/restapi/tests/http-examples/comments_delete.req\ndiff --git a/docs/source/database.rst b/docs/source/database.rst\nnew file mode 100644\nindex 00000000..b66a2925\n--- /dev/null\n+++ b/docs/source/database.rst\n@@ -0,0 +1,40 @@\n+.. _database:\n+\n+Database\n+========\n+\n+The `@database` endpoint exposes system information about the Plone database (ZODB).\n+\n+Send a GET request to the `@database` endpoint:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/database_get.req\n+\n+The response will contain the database information::\n+\n+  HTTP/1.1 200 OK\n+  Content-Type: application/json\n+\n+  {\n+    "@id": "http://localhost:55001/plone/@database",\n+    "cache_detail_length": [\n+      {\n+        "connection": "<Connection at 11238e150>",\n+        "ngsize": 393,\n+        "size": 862\n+      },\n+      {\n+        "connection": "<Connection at 112530c50>",\n+        "ngsize": 46,\n+        "size": 261\n+      }\n+    ],\n+    "cache_length": 439,\n+    "cache_length_bytes": 0,\n+    "cache_size": 400,\n+    "database_size": 230,\n+    "db_name": "FunctionalTest",\n+    "db_size": 92516\n+  }\n+\n+.. note:: The system endpoint is protected by the ``plone.app.controlpanel.Overview`` permission that requires the site-administrator or manager role.\n\\ No newline at end of file\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex a854f39e..3c788ad0 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -58,6 +58,8 @@ Contents\n    email-notification\n    upgrade-guide\n    contributing\n+   system\n+   database\n \n .. include:: ../../README.rst\n \ndiff --git a/docs/source/system.rst b/docs/source/system.rst\nnew file mode 100644\nindex 00000000..9a034289\n--- /dev/null\n+++ b/docs/source/system.rst\n@@ -0,0 +1,31 @@\n+.. _system:\n+\n+System\n+======\n+\n+The `@system` endpoint exposes system information about the Plone backend.\n+\n+Send a GET request to the `@system` endpoint:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/system_get.req\n+\n+The response will contain the system information::\n+\n+  HTTP/1.1 200 OK\n+  Content-Type: application/json\n+\n+  {\n+    "@id": "http://localhost:55001/plone/@system",\n+    "cmf_version": "2.4.2",\n+    "debug_mode": "No",\n+    "pil_version": "6.2.1 (Pillow)",\n+    "plone_gs_metadata_version_file_system": "5208",\n+    "plone_gs_metadata_version_installed": "5208",\n+    "plone_version": "5.2.1",\n+    "python_version": "3.7.7 (default, Mar 10 2020, 15:43:33) \\n[Clang 11.0.0 (clang-1100.0.33.17)]",\n+    "zope_version": "4.1.3"\n+  }\n+\n+\n+.. note:: The system endpoint is protected by the ``plone.app.controlpanel.Overview`` permission that requires the site-administrator or manager role.\n\\ No newline at end of file\ndiff --git a/news/941.feature b/news/941.feature\nnew file mode 100644\nindex 00000000..e0addb4e\n--- /dev/null\n+++ b/news/941.feature\n@@ -0,0 +1 @@\n+Add database endpoint [timo]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex a0a5fe1d..254d310c 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -15,6 +15,7 @@\n     <include package=".controlpanels" />\n   </configure>\n   <include package=".copymove"/>\n+  <include package=".database"/>\n   <include package=".discussion"/>\n   <include package=".groups"/>\n   <include package=".navigation"/>\ndiff --git a/src/plone/restapi/services/database/__init__.py b/src/plone/restapi/services/database/__init__.py\nnew file mode 100644\nindex 00000000..e69de29b\ndiff --git a/src/plone/restapi/services/database/configure.zcml b/src/plone/restapi/services/database/configure.zcml\nnew file mode 100644\nindex 00000000..972d22c5\n--- /dev/null\n+++ b/src/plone/restapi/services/database/configure.zcml\n@@ -0,0 +1,13 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone">\n+\n+  <plone:service\n+    method="GET"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".get.DatabaseGet"\n+    name="@database"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/database/get.py b/src/plone/restapi/services/database/get.py\nnew file mode 100644\nindex 00000000..143a9bbb\n--- /dev/null\n+++ b/src/plone/restapi/services/database/get.py\n@@ -0,0 +1,17 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.services import Service\n+\n+\n+class DatabaseGet(Service):\n+    def reply(self):\n+        db = self.context._p_jar.db()\n+        return {\n+            "@id": "{}/@database".format(self.context.absolute_url()),\n+            "cache_length": db.cacheSize(),\n+            "cache_length_bytes": db.getCacheSizeBytes(),\n+            "cache_detail_length": db.cacheDetailSize(),\n+            "cache_size": db.getCacheSize(),\n+            "database_size": db.objectCount(),\n+            "db_name": db.getName(),\n+            "db_size": db.getSize(),\n+        }\ndiff --git a/src/plone/restapi/services/system/get.py b/src/plone/restapi/services/system/get.py\nindex 80165199..cf5b0862 100644\n--- a/src/plone/restapi/services/system/get.py\n+++ b/src/plone/restapi/services/system/get.py\n@@ -6,6 +6,10 @@\n except ImportError:\n     from plone.app.controlpanel.overview import OverviewControlPanel\n \n+import pkg_resources\n+\n+plone_restapi_version = pkg_resources.require("plone.restapi")[0].version\n+\n \n class SystemGet(Service):\n     def reply(self):\n@@ -15,6 +19,7 @@ def reply(self):\n             "@id": "{}/@system".format(self.context.absolute_url()),\n             "zope_version": core_versions.get("Zope"),\n             "plone_version": core_versions.get("Plone"),\n+            "plone_restapi_version": plone_restapi_version,\n             "python_version": core_versions.get("Python"),\n             "cmf_version": core_versions.get("CMF"),\n             "pil_version": core_versions.get("PIL"),\ndiff --git a/src/plone/restapi/tests/http-examples/database_get.req b/src/plone/restapi/tests/http-examples/database_get.req\nnew file mode 100644\nindex 00000000..e83c3524\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/database_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/@database HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/system_get.req b/src/plone/restapi/tests/http-examples/system_get.req\nnew file mode 100644\nindex 00000000..adacca49\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/system_get.req\n@@ -0,0 +1,3 @@\n+GET /plone/@system HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 75bfd11f..ecb407e2 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -148,6 +148,50 @@ def save_request_and_response_for_docs(name, response):\n         resp.write(response.text)\n \n \n+def save_request_for_docs(name, response):\n+    if six.PY2:\n+        open_kw = {}\n+    else:\n+        open_kw = {"newline": "\\n"}\n+    filename = "{}/{}".format(base_path, "%s.req" % name)\n+    with open(filename, "w", **open_kw) as req:\n+        req.write(\n+            "{} {} HTTP/1.1\\n".format(\n+                response.request.method, response.request.path_url\n+            )\n+        )\n+        ordered_request_headers = collections.OrderedDict(\n+            sorted(response.request.headers.items())\n+        )\n+        for key, value in ordered_request_headers.items():\n+            if key.lower() in REQUEST_HEADER_KEYS:\n+                req.write("{}: {}\\n".format(key.title(), value))\n+        if response.request.body:\n+            # If request has a body, make sure to set Content-Type header\n+            if "content-type" not in REQUEST_HEADER_KEYS:\n+                content_type = response.request.headers["Content-Type"]\n+                req.write("Content-Type: %s\\n" % content_type)\n+\n+            req.write("\\n")\n+\n+            # Pretty print JSON request body\n+            if content_type == "application/json":\n+                json_body = json.loads(response.request.body)\n+                body = pretty_json(json_body)\n+                # Make sure Content-Length gets updated, just in case we\n+                # ever decide to dump that header\n+                response.request.prepare_body(data=body, files=None)\n+\n+            req.flush()\n+            if isinstance(response.request.body, six.text_type) or not hasattr(\n+                req, "buffer"\n+            ):\n+                req.write(response.request.body)\n+            else:\n+                req.buffer.seek(0, 2)\n+                req.buffer.write(response.request.body)\n+\n+\n class TestDocumentationBase(unittest.TestCase):\n     def setUp(self):\n         self.statictime = self.setup_with_context_manager(StaticTime())\n@@ -1342,6 +1386,14 @@ def test_querystringsearch_post(self):\n         )\n         save_request_and_response_for_docs("querystringsearch_post", response)\n \n+    def test_system_get(self):\n+        response = self.api_session.get("/@system")\n+        save_request_for_docs("system_get", response)\n+\n+    def test_database_get(self):\n+        response = self.api_session.get("/@database")\n+        save_request_for_docs("database_get", response)\n+\n \n class TestDocumentationMessageTranslations(TestDocumentationBase):\n \ndiff --git a/src/plone/restapi/tests/test_services_database.py b/src/plone/restapi/tests/test_services_database.py\nnew file mode 100644\nindex 00000000..a6a7aeae\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_services_database.py\n@@ -0,0 +1,43 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from Products.CMFCore.utils import getToolByName\n+\n+import unittest\n+\n+\n+class TestDatabaseServiceFunctional(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        self.request = self.portal.REQUEST\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_get_system(self):\n+        response = self.api_session.get("/@database")\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.headers.get("Content-Type"), "application/json")\n+\n+        results = response.json()\n+        self.assertEqual(results[u"@id"], self.portal.absolute_url() + "/@database")\n+        self.assertTrue("cache_length" in results.keys())\n+        self.assertTrue("cache_length_bytes" in results.keys())\n+        self.assertTrue("cache_detail_length" in results.keys())\n+        self.assertTrue("cache_size" in results.keys())\n+        self.assertTrue("database_size" in results.keys())\n+        self.assertTrue("db_name" in results.keys())\n+        self.assertTrue("db_size" in results.keys())\n'

