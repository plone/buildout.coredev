Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-09-29T16:05:12+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/5276f897f8cde3f28bab0bc12b59b55529c34317

take RichTextBehavior fields into accou nt

Files changed:
A news/464.bugfix
M src/plone/app/multilingual/browser/javascript/babel_helper.js

b'diff --git a/news/464.bugfix b/news/464.bugfix\nnew file mode 100644\nindex 000000000..6ec0f4267\n--- /dev/null\n+++ b/news/464.bugfix\n@@ -0,0 +1,2 @@\n+Take RichTextBehavior fields into account\n+[erral]\ndiff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 331240322..f10609203 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -123,7 +123,7 @@\n             sync_element_vertically(original_field, destination_field, padding, index === 0);\n \n             // Add the google translation field\n-            if ($(\'#gtranslate_service_available\').attr(\'value\') === "True" && ((original_field.find(\'.richtext-field, .textline-field, .text-field, .localstatic-field, .ArchetypesField-TextField\').length > 0) || ($(\'#at-babel-edit\').length > 0))) {\n+            if ($(\'#gtranslate_service_available\').attr(\'value\') === "True" && ((original_field.find(\'.richtext-field, .textline-field, .text-field, .localstatic-field\').length > 0) || (original_field.attr(\'id\') == \'IRichTextBehavior.text\'))) {\n                 original_field.prepend("<div class=\'translator-widget\' id=\'item_translation_" + order + "\'></div>");\n                 original_field.children(\'.translator-widget\').click(function () {\n                     var field = $(value).attr("rel");\n@@ -133,7 +133,9 @@\n                         \'lang_source\': langSource\n                     };\n                     var targetelement = destination_field.find(\'textarea\');\n-                    var tiny_editor = destination_field.find("textarea.mce_editable");\n+                    // look for .tox-tinymce because it signals that\n+                    // a TinyMCE editor is present\n+                    var tiny_editor = destination_field.find(".tox-tinymce");\n                     if (!targetelement.length) {\n                         targetelement = destination_field.find("input");\n                     }\n@@ -146,7 +148,9 @@\n                         success: function (data) {\n                             var text_target = data.data;\n                             if (tiny_editor.length > 0) {\n-                                tinyMCE.get(tiny_editor.attr(\'id\')).setContent(text_target);\n+                                // use target element\'s id as the TinyMCE item id\n+                                // to set the content in there\n+                                tinyMCE.get(targetelement.attr(\'id\')).setContent(text_target);\n                             } else {\n                                 targetelement.val(text_target); // Inserts translated text.\n                             }\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-03T12:38:23+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/c3ce67d9f28c044294b5cf9ff352494a6406f026

Merge remote-tracking branch 'origin/master' into erral-modernize-gtranslate

Files changed:
A news/303.bugfix
M README.rst
M src/plone/app/multilingual/browser/javascript/babel_helper.js
M src/plone/app/multilingual/browser/translate.py

b'diff --git a/README.rst b/README.rst\nindex d69a5495..6b563e3f 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -313,7 +313,7 @@ In order to know if a content can be translated there is a marker interface::\n Source Code\n ===========\n \n-Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n+Contributors please read the document `Contribute to Plone 6 core <https://6.docs.plone.org/contributing/core/index.html>`_\n \n Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.multilingual>`_.\n \ndiff --git a/news/303.bugfix b/news/303.bugfix\nnew file mode 100644\nindex 00000000..ad85419a\n--- /dev/null\n+++ b/news/303.bugfix\n@@ -0,0 +1,2 @@\n+Get the object to be translated correctly\n+[erral]\ndiff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex f1060920..7d09645d 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -128,10 +128,16 @@\n                 original_field.children(\'.translator-widget\').click(function () {\n                     var field = $(value).attr("rel");\n                     // Fetch source of text to translate.\n+\n+                    // we use the current URL to get the context\'s UID\n+                    var url_parts = document.location.pathname.split(\'++addtranslation++\')\n+\n                     var jsondata = {\n                         \'field\': field,\n-                        \'lang_source\': langSource\n-                    };\n+                        \'lang_source\': langSource,\n+                        // we use the second part of the url_parts, the uid itself\n+                        \'context_uid\': url_parts[1]\n+                      };\n                     var targetelement = destination_field.find(\'textarea\');\n                     // look for .tox-tinymce because it signals that\n                     // a TinyMCE editor is present\ndiff --git a/src/plone/app/multilingual/browser/translate.py b/src/plone/app/multilingual/browser/translate.py\nindex cb702e41..e5348f3b 100644\n--- a/src/plone/app/multilingual/browser/translate.py\n+++ b/src/plone/app/multilingual/browser/translate.py\n@@ -2,6 +2,7 @@\n from plone.app.multilingual import _\n from plone.app.multilingual.interfaces import IMultiLanguageExtraOptionsSchema\n from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.app.uuid.utils import uuidToObject\n from plone.base.interfaces import ILanguage\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n@@ -57,7 +58,17 @@ def __call__(self):\n         ):\n             return _("Need a field")\n         else:\n-            manager = ITranslationManager(self.context)\n+            context_uid = self.request.form.get("context_uid", None)\n+            if context_uid is None:\n+                # try with context if no translation uid is present\n+                manager = ITranslationManager(self.context)\n+            else:\n+                context = uuidToObject(context_uid)\n+                if context is not None:\n+                    manager = ITranslationManager(context)\n+                else:\n+                    manager = ITranslationManager(self.context)\n+\n             registry = getUtility(IRegistry)\n             settings = registry.forInterface(\n                 IMultiLanguageExtraOptionsSchema, prefix="plone"\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-03T16:28:47+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/1bdb7ab67a78090d96f0e38f438609b76d6334cc

rewrite babel_helper.js

Files changed:
M src/plone/app/multilingual/browser/javascript/babel_helper.js
M src/plone/app/multilingual/browser/stylesheet/multilingual.css
M src/plone/app/multilingual/browser/translate.py

b'diff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 7d09645d4..32bd5af84 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -2,182 +2,181 @@\n (function ($) {\n     "use strict";\n \n-    var original_fields = [],\n-        destination_fields = [],\n-        padding = 0;\n-\n-    function sync_element_vertically(original, destination, padding, first) {\n-        var default_props = {\n-            position: "",\n-            top: ""\n-        },\n-            original_top = 0,\n-            original_padding = 0,\n-            destination_top = 0,\n-            destination_padding = 0,\n-            shift = 0,\n-            more_padding = 0,\n-            images, new_distance;\n-\n-        function distance(a, b) {\n-            return b.position().top - a.position().top - a.height();\n-        }\n-        if (destination.is(":visible")) {\n-            original.show();\n-            // reset fields\n-            if (original.css("position") === "relative") {\n-                original.css(default_props);\n-            }\n-            if (destination.css("position") === "relative") {\n-                destination.css(default_props);\n-            }\n-            original_top = original.position().top;\n-\n-            // Make images smaller\n-            images = original.find(\'img\');\n-            images.each(function (index, img) {\n-                var qimg = $(img);\n-                if (qimg.width() > original.width()) {\n-                    qimg.width(original.width() * 0.8);\n-                }\n-            });\n+    function sync_element_vertically(original, destination) {\n+        // sync vertical position\n+        const orig_rect = original.getBoundingClientRect()\n+        const dest_rect = destination.getBoundingClientRect()\n \n-            destination_top = destination.position().top;\n-            shift = Math.abs(original_top - destination_top);\n-            if (original_top > destination_top) {\n-                destination_padding = shift;\n-            } else {\n-                original_padding = shift;\n-            }\n-\n-            // The next calculation of padding is necessary if both elements\n-            // have to be shifted down.\n-            if (!first && original.prev().is(":visible")) {\n-                // Calculate distance between bottom of prev element and top\n-                // of current element. add Padding. If > 0, add to more_padding\n-                new_distance = distance(original.prev(), original);\n-                new_distance += original_padding;\n-                if (new_distance < padding) {\n-                    more_padding += padding - new_distance;\n-                }\n-                new_distance = distance(destination.prev(), destination);\n-                new_distance += destination_padding + more_padding;\n-                if (new_distance < padding) {\n-                    more_padding += padding - new_distance;\n-                }\n-            }\n-            original_padding += more_padding;\n-            destination_padding += more_padding;\n-            if (original_padding) {\n-                original.css({\n-                    position: \'relative\',\n-                    top: original_padding\n-                });\n-            } else {\n-                original.css(default_props);\n-            }\n-            if (destination_padding) {\n-                destination.css({\n-                    position: \'relative\',\n-                    top: destination_padding\n-                });\n-            } else {\n-                destination.css(default_props);\n-            }\n+        // make the wrapper heights equally\n+        var max_height = Math.max(orig_rect.height, dest_rect.height);\n \n-        } else {\n-            original.hide();\n-            destination.css(default_props);\n-            original.css(default_props);\n-        }\n-        // With all that padding, the form might need to be pushed down in\n-        // some cases.\n-        $([original, destination]).each(function (index, item) {\n-            var $item = $(item),\n-                outer_padding = 0,\n-                parent = $item.parent();\n-            outer_padding = Math.max($item.position().top + $item.height() - (parent.position().top + parent.height()) + padding, 0);\n-            if (outer_padding) {\n-                parent.height(parent.height() + outer_padding);\n-            }\n-        });\n+        original.style.height = `${max_height}px`;\n+        destination.style.height = `${max_height}px`;\n     }\n \n     function update_view() {\n-        var order = 1,\n-            url_translate = $(\'input#url_translate\').val(),\n-            langSource = $(\'#frame-content #view_language\')[0].innerHTML;\n+        let order = 1;\n+        const url_translate = document.querySelector(\'input#url_translate\')?.value;\n+        const langSource = document.querySelector(\'#frame-content #view_language\').innerHTML;\n \n+        // unwrap(document.querySelectorAll(\'#form-target fieldset > div > .field\'));\n         $(\'#form-target fieldset > div > .field\').unwrap();\n \n-        original_fields = $(\'#frame-content .field\');\n-        destination_fields = $(\'#form-target fieldset > .field\');\n+        const original_fields = document.querySelectorAll(\'#frame-content .field\');\n+        const destination_fields = document.querySelectorAll(\'#form-target fieldset > .field\');\n+        const visible_destination_fields = [...destination_fields].filter(it => it.closest("fieldset.active") != null);\n+\n+        // show only fields of current tab\n+        original_fields.forEach((field) => {\n+            field.style.display = "none";\n+            visible_destination_fields.forEach((dst_fld) => {\n+                if (dst_fld.dataset.fieldname.endsWith(field.id)) {\n+                    field.style.display = "block";\n+                    return;\n+                }\n+            })\n+        });\n \n-        // Calculate the padding between fields as intended by css\n-        if (original_fields.length > 1) {\n-            padding = ($(original_fields[1]).position().top - $(original_fields[0]).position().top - $(original_fields[0]).height());\n-        }\n-        $.each(original_fields, function (index, value) {\n-            var original_field = $(value);\n-            var destination_field = $(destination_fields[index]);\n-            sync_element_vertically(original_field, destination_field, padding, index === 0);\n+        visible_destination_fields.forEach(dest_field => {\n+            var orig_field = [...original_fields].filter(it => dest_field.dataset.fieldname.endsWith(it.id));\n+\n+            if (!orig_field.length) {\n+                // field not found\n+                return;\n+            } else {\n+                orig_field = orig_field[0];\n+            }\n+\n+            sync_element_vertically(orig_field, dest_field);\n+\n+            const gtranslate_enabled = document.getElementById("gtranslate_service_available");\n \n             // Add the google translation field\n-            if ($(\'#gtranslate_service_available\').attr(\'value\') === "True" && ((original_field.find(\'.richtext-field, .textline-field, .text-field, .localstatic-field\').length > 0) || (original_field.attr(\'id\') == \'IRichTextBehavior.text\'))) {\n-                original_field.prepend("<div class=\'translator-widget\' id=\'item_translation_" + order + "\'></div>");\n-                original_field.children(\'.translator-widget\').click(function () {\n-                    var field = $(value).attr("rel");\n-                    // Fetch source of text to translate.\n+            if (\n+                gtranslate_enabled.value === "True" &&\n+                dest_field.querySelectorAll(\'.text-widget, .textarea-widget, .richTextWidget\').length &&\n+                !orig_field.querySelector(".translator-widget")\n+            ) {\n+                const translator_widget = document.createElement("div");\n+\n+                translator_widget.classList.add("translator-widget");\n+                translator_widget.id = `item_translation_${order}`;\n+\n+                translator_widget.addEventListener("click", async function () {\n+                    var field = orig_field.getAttribute("rel");\n \n                     // we use the current URL to get the context\'s UID\n-                    var url_parts = document.location.pathname.split(\'++addtranslation++\')\n+                    var url_parts = document.location.pathname.split(\'++addtranslation++\');\n \n-                    var jsondata = {\n+                    var postdata = new URLSearchParams({\n                         \'field\': field,\n                         \'lang_source\': langSource,\n                         // we use the second part of the url_parts, the uid itself\n                         \'context_uid\': url_parts[1]\n-                      };\n-                    var targetelement = destination_field.find(\'textarea\');\n-                    // look for .tox-tinymce because it signals that\n-                    // a TinyMCE editor is present\n-                    var tiny_editor = destination_field.find(".tox-tinymce");\n-                    if (!targetelement.length) {\n-                        targetelement = destination_field.find("input");\n-                    }\n+                    });\n+\n+                    const translate_service_url = url_translate + \'/gtranslation_service\';\n+\n                     // Now we call the data\n-                    $.ajax({\n-                        url: url_translate + \'/gtranslation_service\',\n-                        data: jsondata,\n-                        dataType: \'json\',\n-                        type: \'POST\',\n-                        success: function (data) {\n-                            var text_target = data.data;\n-                            if (tiny_editor.length > 0) {\n-                                // use target element\'s id as the TinyMCE item id\n-                                // to set the content in there\n-                                tinyMCE.get(targetelement.attr(\'id\')).setContent(text_target);\n-                            } else {\n-                                targetelement.val(text_target); // Inserts translated text.\n-                            }\n-                        }\n+                    const response = await fetch(translate_service_url, {\n+                        method: "POST",\n+                        headers: {\n+                            "Content-type": "application/x-www-form-urlencoded; charset: utf-8",\n+                        },\n+                        body: postdata,\n                     });\n+\n+                    if (!response.ok) {\n+                        console.log(`Could not load ${translate_service_url}: ${response.statusText}`);\n+                        return;\n+                    }\n+\n+                    const json = await response.json();\n+                    var text_target = json.data;\n+\n+                    var target_el = dest_field.querySelector(\'textarea,input\');\n+                    const target_tiny = tinymce.get(target_el.id);\n+\n+                    if (target_tiny) {\n+                        // a TinyMCE editor is present\n+                        await target_tiny.setContent(text_target);\n+                    } else {\n+                        // set value of textarea\n+                        target_el.value = text_target;\n+                    }\n                 });\n-                original_field.children(\'.translator-widget\').hide();\n+\n+                orig_field.prepend(translator_widget);\n                 order += 1;\n             }\n         });\n     }\n \n-    $(window).on("load", function () {\n+    function init_tab_switch() {\n+        // init fieldset switch\n+        document.querySelector("#form-target form").querySelectorAll(".autotoc-nav a").forEach((item) => {\n+            // NOTE: the "clicked" event is triggered in pat-autotoc\n+            $(item).on("clicked", (e) => {\n+                update_view();\n+            });\n+        });\n+    }\n+\n+    function init_sync_active_click() {\n+        /* select a field on both sides and change the color */\n+        let babel_selected = null;\n+        let orig_babel_selected = null;\n+\n+        document.querySelectorAll(\'#form-target fieldset .field\').forEach((field) => {\n+            field.addEventListener("click", () => {\n+                const original_fields = document.querySelectorAll(\'#frame-content .field\');\n+\n+                if (babel_selected) {\n+                    babel_selected.classList.remove("selected");\n+                    orig_babel_selected.classList.remove("selected");\n+                }\n+                babel_selected = field;\n+                babel_selected.classList.add("selected");\n+                const orig_field = [...original_fields].filter(it => babel_selected.dataset.fieldname.endsWith(it.id));\n+                if(!orig_field.length) {\n+                    return;\n+                }\n+                orig_babel_selected = orig_field[0];\n+                orig_babel_selected.classList.add("selected");\n+            });\n+        });\n+    }\n+\n+    function load_default_language() {\n+        // Fetch default language content\n+        const trans_buttons = document.querySelectorAll("#trans-selector button");\n+        const active_buttons = [...trans_buttons].filter(it => it.classList.contains("active"));\n+        const trans_select = document.querySelector("#trans-selector select");\n+\n+        let initialFetchUrl = "";\n+\n+        if (active_buttons.length) {\n+            initialFetchUrl = active_buttons[0].dataset.url;\n+        } else if (trans_buttons.length) {\n+            trans_buttons[0].classList.add("active");\n+            initialFetchUrl = trans_buttons[0].dataset.url;\n+        } else if (trans_select) {\n+            initialFetchUrl = trans_select.value;\n+        } else {\n+            // no chance to get original language content\n+            return;\n+        }\n \n-        /* alert about language independent field */\n-        $(\'.languageindependent\').click(function () {\n-            $(this).css(\'opacity\', \'1\');\n+        $(\'#frame-content\').load(initialFetchUrl, function () {\n+            $("#frame-content fieldset legend").unwrap().remove();\n+            update_view();\n         });\n+    }\n+\n+    function init_babel_view() {\n \n         /* change the language trigger */\n-        $(\'#trans-selector button\').click(function () {\n+        $(\'#trans-selector button\').on("click", function () {\n             var url = $(this).data(\'url\');\n             $(\'#frame-content\').load(url, function () {\n                 $("#frame-content fieldset legend").unwrap().remove();\n@@ -186,9 +185,10 @@\n             $(\'#trans-selector button.active\').removeClass(\'active\');\n             $(this).addClass(\'active\');\n         });\n+\n         /* change the language trigger, this time for the drop-down, which is\n         used when too many translations are present to fit into buttons */\n-        $(\'#trans-selector select\').change(function () {\n+        $(\'#trans-selector select\').on("change", function () {\n             var selected_elem = $(this).children(\'option\').eq(this.selectedIndex);\n             var url = selected_elem.val();\n             $(\'#frame-content\').load(url, function () {\n@@ -197,38 +197,25 @@\n             });\n         });\n \n-        /* select a field on both sides and change the color */\n-        var babel_selected = null,\n-            orig_babel_select = null;\n-        $(\'#babel-edit *[id^=fieldset] .field\').click(function () {\n-            var index = $(\'#form-target .field\').index($(this));\n-            if (babel_selected) {\n-                $(babel_selected).addClass(\'selected\');\n-                $(babel_selected).toggleClass("selected");\n-                $(orig_babel_select).toggleClass("selected");\n-                $(orig_babel_select).children(\'.translator-widget\').hide();\n-            }\n-            babel_selected = this;\n-            $(this).toggleClass("selected");\n-            orig_babel_select = $(\'#frame-content .field\')[index];\n-            $(orig_babel_select).toggleClass("selected");\n-            $(orig_babel_select).children(\'.translator-widget\').show();\n-        });\n+        // initialize tab change\n+        init_tab_switch();\n+\n+        // initialize synchron active fields when clicked\n+        init_sync_active_click();\n+\n+        // load original language\n+        load_default_language();\n+    };\n \n-        // Fetch default content\n-        var initialFetch = $(\'#trans-selector button.active\').data(\'url\');\n-        // Can be null if not buttons, but the drop-down is present\n-        if (initialFetch === null) {\n-            initialFetch = $(\'#trans-selector select option:selected\').val();\n+    let initInterval = null;\n+    initInterval = setInterval(() => {\n+        if (!document.querySelector("body.patterns-loaded")) {\n+            // wait for loaded patterns\n+            return;\n         }\n-        $(\'#frame-content\').load(initialFetch, function () {\n-            $("#frame-content fieldset legend").unwrap().remove();\n-            update_view();\n-        });\n+        clearInterval(initInterval);\n+        init_babel_view();\n+    }, 500);\n \n-        var intervalId = window.setInterval(function () {\n-            update_view();\n-        }, 1000);\n \n-    });\n }(jQuery));\ndiff --git a/src/plone/app/multilingual/browser/stylesheet/multilingual.css b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\nindex 0cf9f6407..4b1c43255 100644\n--- a/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n+++ b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n@@ -22,6 +22,7 @@\n #babel-edit .field, #babel-edit #frame-content .field  {\n     background-color: #f1f1f1;\n     padding: 20px;\n+    margin-bottom: 1rem;\n }\n \n #babel-edit .selected, #babel-edit #frame-content .selected{\n@@ -33,6 +34,10 @@\n     color: white;\n }\n \n+#babel-edit #frame-content .selected .translator-widget {\n+    display:block;\n+}\n+\n #babel-edit .richtext-field {\n     background-color: white;\n     color: black;\n@@ -57,6 +62,7 @@\n     background: url(\'++resource++plone.app.multilingual.images/gtranslate.png\');\n     min-height: 50px;\n     min-width: 50px;\n+    display: none;\n }\n \n .currentLanguage {\ndiff --git a/src/plone/app/multilingual/browser/translate.py b/src/plone/app/multilingual/browser/translate.py\nindex e5348f3b0..3337e204f 100644\n--- a/src/plone/app/multilingual/browser/translate.py\n+++ b/src/plone/app/multilingual/browser/translate.py\n@@ -78,7 +78,7 @@ def __call__(self):\n             orig_object = manager.get_translation(lang_source)\n             field = self.request.form["field"].split(".")[-1]\n             if hasattr(orig_object, field):\n-                question = getattr(orig_object, field, "")\n+                question = getattr(orig_object, field, "") or ""\n                 if hasattr(question, "raw"):\n                     question = question.raw\n             else:\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-03T17:01:26+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/60a042424d43c38ff446da521ccafc6cf09bd6b5

trigger change event

Files changed:
M src/plone/app/multilingual/browser/javascript/babel_helper.js
M src/plone/app/multilingual/browser/stylesheet/multilingual.css

b'diff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 32bd5af8..b6889199 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -104,6 +104,8 @@\n                         // set value of textarea\n                         target_el.value = text_target;\n                     }\n+                    // need to trigger "change" event to make validation (and tiny) happy\n+                    $(target_el).trigger("change");\n                 });\n \n                 orig_field.prepend(translator_widget);\ndiff --git a/src/plone/app/multilingual/browser/stylesheet/multilingual.css b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\nindex 4b1c4325..8f366ffe 100644\n--- a/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n+++ b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n@@ -36,6 +36,7 @@\n \n #babel-edit #frame-content .selected .translator-widget {\n     display:block;\n+    cursor: pointer;\n }\n \n #babel-edit .richtext-field {\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-04T11:18:44+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/002236b53e36528477600aaa2fa4093559fcc39e

check for tinymce fields

Files changed:
M src/plone/app/multilingual/browser/javascript/babel_helper.js

b'diff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex b6889199..0d290769 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -51,10 +51,17 @@\n \n             const gtranslate_enabled = document.getElementById("gtranslate_service_available");\n \n+            var target_el = dest_field.querySelector(\'textarea,input\');\n+            const target_tiny = tinymce.get(target_el.id);\n+\n             // Add the google translation field\n             if (\n-                gtranslate_enabled.value === "True" &&\n-                dest_field.querySelectorAll(\'.text-widget, .textarea-widget, .richTextWidget\').length &&\n+                gtranslate_enabled.value === "True" && (\n+                // it is either a text widget, a text area or rich widget\n+                dest_field.querySelectorAll(\'.text-widget, .textarea-widget, .richTextWidget\').length ||\n+                // or it is a tinymce richtextfield without wrapping CSS class\n+                target_tiny !== null\n+                ) &&\n                 !orig_field.querySelector(".translator-widget")\n             ) {\n                 const translator_widget = document.createElement("div");\n@@ -94,9 +101,6 @@\n                     const json = await response.json();\n                     var text_target = json.data;\n \n-                    var target_el = dest_field.querySelector(\'textarea,input\');\n-                    const target_tiny = tinymce.get(target_el.id);\n-\n                     if (target_tiny) {\n                         // a TinyMCE editor is present\n                         await target_tiny.setContent(text_target);\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-04T11:27:24+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/2be2d5b618246ae32d07e386a4f43b0245774bf7

style improvements: sync header heights too and check window resizing

Files changed:
M src/plone/app/multilingual/browser/javascript/babel_helper.js

b'diff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 0d290769..fc67bcdb 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -2,16 +2,35 @@\n (function ($) {\n     "use strict";\n \n-    function sync_element_vertically(original, destination) {\n-        // sync vertical position\n-        const orig_rect = original.getBoundingClientRect()\n-        const dest_rect = destination.getBoundingClientRect()\n-\n-        // make the wrapper heights equally\n-        var max_height = Math.max(orig_rect.height, dest_rect.height);\n+    function sync_heights(el1, el2) {\n+        if(el1.style.height != "auto") {\n+            // reset if previously set\n+            el1.style.height = "auto";\n+        }\n+        if(el2.style.height != "auto") {\n+            // reset if previously set\n+            el2.style.height = "auto";\n+        }\n+        const max_height = Math.max(\n+            el1.getBoundingClientRect().height,\n+            el2.getBoundingClientRect().height,\n+        );\n+        el1.style.height = `${max_height}px`;\n+        el2.style.height = `${max_height}px`;\n+    }\n \n-        original.style.height = `${max_height}px`;\n-        destination.style.height = `${max_height}px`;\n+    function sync_header_height() {\n+        // sync header and tab/button heights to ensure the fields are aligned synchronous\n+        sync_heights(\n+            document.querySelector("#babel-edit > div > h2"),\n+            document.querySelector("#header-translation h2"),\n+        )\n+\n+        // sync translation button and tab heights\n+        sync_heights(\n+            document.querySelector("#babel-edit #trans-selector"),\n+            document.querySelector("#form-target .autotoc-nav"),\n+        )\n     }\n \n     function update_view() {\n@@ -19,7 +38,9 @@\n         const url_translate = document.querySelector(\'input#url_translate\')?.value;\n         const langSource = document.querySelector(\'#frame-content #view_language\').innerHTML;\n \n-        // unwrap(document.querySelectorAll(\'#form-target fieldset > div > .field\'));\n+        sync_header_height();\n+\n+        // unwrap .field\n         $(\'#form-target fieldset > div > .field\').unwrap();\n \n         const original_fields = document.querySelectorAll(\'#frame-content .field\');\n@@ -47,7 +68,7 @@\n                 orig_field = orig_field[0];\n             }\n \n-            sync_element_vertically(orig_field, dest_field);\n+            sync_heights(orig_field, dest_field);\n \n             const gtranslate_enabled = document.getElementById("gtranslate_service_available");\n \n@@ -57,10 +78,10 @@\n             // Add the google translation field\n             if (\n                 gtranslate_enabled.value === "True" && (\n-                // it is either a text widget, a text area or rich widget\n-                dest_field.querySelectorAll(\'.text-widget, .textarea-widget, .richTextWidget\').length ||\n-                // or it is a tinymce richtextfield without wrapping CSS class\n-                target_tiny !== null\n+                    // it is either a text widget, a text area or rich widget\n+                    dest_field.querySelectorAll(\'.text-widget, .textarea-widget, .richTextWidget\').length ||\n+                    // or it is a tinymce richtextfield without wrapping CSS class\n+                    target_tiny !== null\n                 ) &&\n                 !orig_field.querySelector(".translator-widget")\n             ) {\n@@ -101,6 +122,10 @@\n                     const json = await response.json();\n                     var text_target = json.data;\n \n+                    if(!text_target) {\n+                        return;\n+                    }\n+\n                     if (target_tiny) {\n                         // a TinyMCE editor is present\n                         await target_tiny.setContent(text_target);\n@@ -144,7 +169,7 @@\n                 babel_selected = field;\n                 babel_selected.classList.add("selected");\n                 const orig_field = [...original_fields].filter(it => babel_selected.dataset.fieldname.endsWith(it.id));\n-                if(!orig_field.length) {\n+                if (!orig_field.length) {\n                     return;\n                 }\n                 orig_babel_selected = orig_field[0];\n@@ -175,7 +200,8 @@\n \n         $(\'#frame-content\').load(initialFetchUrl, function () {\n             $("#frame-content fieldset legend").unwrap().remove();\n-            update_view();\n+            // defer updateing\n+            setTimeout(update_view, 500);\n         });\n     }\n \n@@ -209,7 +235,7 @@\n         // initialize synchron active fields when clicked\n         init_sync_active_click();\n \n-        // load original language\n+        // load original language and update the view\n         load_default_language();\n     };\n \n@@ -223,5 +249,13 @@\n         init_babel_view();\n     }, 500);\n \n+    // fix field alignment on window resize\n+    let deferResize = null;\n+    window.addEventListener("resize", () => {\n+        if (deferResize) {\n+            clearTimeout(deferResize);\n+        }\n+        deferResize = setTimeout(update_view, 500);\n+    });\n \n }(jQuery));\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-04T11:33:30+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/d900c13c0089ac1f25847128b7553af12c68991f

s/updateing/updating

Files changed:
M src/plone/app/multilingual/browser/javascript/babel_helper.js

b'diff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex fc67bcdb..1679d9ab 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -200,7 +200,7 @@\n \n         $(\'#frame-content\').load(initialFetchUrl, function () {\n             $("#frame-content fieldset legend").unwrap().remove();\n-            // defer updateing\n+            // defer updating\n             setTimeout(update_view, 500);\n         });\n     }\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-07T08:23:10+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/2894637f92617166fc208e998ee961a6e55464c5

udpate gtranslate icon

Files changed:
M src/plone/app/multilingual/browser/images/gtranslate.png
M src/plone/app/multilingual/browser/stylesheet/multilingual.css

b'diff --git a/src/plone/app/multilingual/browser/images/gtranslate.png b/src/plone/app/multilingual/browser/images/gtranslate.png\nindex 9b6dec2ce..63617cf57 100644\nBinary files a/src/plone/app/multilingual/browser/images/gtranslate.png and b/src/plone/app/multilingual/browser/images/gtranslate.png differ\ndiff --git a/src/plone/app/multilingual/browser/stylesheet/multilingual.css b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\nindex 8f366ffe3..69d9349f3 100644\n--- a/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n+++ b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n@@ -19,15 +19,17 @@\n     margin-right: 20px;\n }\n \n-#babel-edit .field, #babel-edit #frame-content .field  {\n+#babel-edit .field,\n+#babel-edit #frame-content .field {\n     background-color: #f1f1f1;\n     padding: 20px;\n     margin-bottom: 1rem;\n }\n \n-#babel-edit .selected, #babel-edit #frame-content .selected{\n-    background-color: #99B0C4;\n-    color: #0A0909;\n+#babel-edit .selected,\n+#babel-edit #frame-content .selected {\n+    background-color: #99b0c4;\n+    color: #0a0909;\n }\n \n #babel-edit .selected .formHelp {\n@@ -35,7 +37,7 @@\n }\n \n #babel-edit #frame-content .selected .translator-widget {\n-    display:block;\n+    display: block;\n     cursor: pointer;\n }\n \n@@ -60,7 +62,8 @@\n .translator-widget {\n     position: relative;\n     float: right;\n-    background: url(\'++resource++plone.app.multilingual.images/gtranslate.png\');\n+    background: url("++resource++plone.app.multilingual.images/gtranslate.png") no-repeat;\n+    background-size: contain;\n     min-height: 50px;\n     min-width: 50px;\n     display: none;\n@@ -70,15 +73,17 @@\n     font-weight: bold;\n }\n /* Specific rule needed to fix a js error (position null in a field) */\n-#archetypes-fieldname-contributors{\n-    display:block;\n+#archetypes-fieldname-contributors {\n+    display: block;\n }\n \n a.contentmenuflags img {\n     margin-bottom: 2pt;\n }\n \n-.toolbar-menu-icon.icon-plone-contentmenu-multilingual:before { content: \'\\E81A\'; } /* \'\xee\xa0\xb6\' */\n+.toolbar-menu-icon.icon-plone-contentmenu-multilingual:before {\n+    content: "\\E81A";\n+} /* \'\xee\xa0\xb6\' */\n \n #translations-overview td {\n     line-height: 1;\n@@ -119,9 +124,9 @@ a.contentmenuflags img {\n #edit-zone nav > ul ul li.plonetoolbar-multilingual.actionSeparator {\n     margin: 0;\n     padding: 5px 0 0;\n-    border-top: 1px solid rgba(255,255,255,0.17);\n+    border-top: 1px solid rgba(255, 255, 255, 0.17);\n }\n-#edit-zone nav>ul ul li.plonetoolbar-multilingual.actionSeparator>span {\n+#edit-zone nav > ul ul li.plonetoolbar-multilingual.actionSeparator > span {\n     font-weight: 400;\n     color: #ccc;\n }\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-07T08:23:27+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/3fb28d40360ca3db8a63148f4df39ca14ec976c8

fix modal size when adding a translation

Files changed:
M src/plone/app/multilingual/browser/templates/modify_translations.pt

b'diff --git a/src/plone/app/multilingual/browser/templates/modify_translations.pt b/src/plone/app/multilingual/browser/templates/modify_translations.pt\nindex eb6576b8..b781b038 100644\n--- a/src/plone/app/multilingual/browser/templates/modify_translations.pt\n+++ b/src/plone/app/multilingual/browser/templates/modify_translations.pt\n@@ -141,6 +141,9 @@\n                   <a class="pat-plone-modal addTranslationAction"\n                      href="#"\n                      title="Add translation"\n+                     data-pat-plone-modal=\'{\n+                      "modalSizeClass": "modal-xl"\n+                     }\'\n                      tal:attributes="\n                        href string:${context/absolute_url}/@@create_translation?language=${lang};\n                      "\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-07T08:33:12+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/fca3b06470ec5e6462f4498f31992e9db2ba86b1

refactor focus sync and fix tinymce issues.

Files changed:
M src/plone/app/multilingual/browser/javascript/babel_helper.js
M src/plone/app/multilingual/browser/stylesheet/multilingual.css

b'diff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 1679d9ab..e3342181 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -1,13 +1,15 @@\n-/*global tinyMCE: false, document: false, window: false, jQuery: false */\n (function ($) {\n     "use strict";\n \n+    let babel_selected = null;\n+    let orig_babel_selected = null;\n+\n     function sync_heights(el1, el2) {\n-        if(el1.style.height != "auto") {\n+        if (el1.style.height != "auto") {\n             // reset if previously set\n             el1.style.height = "auto";\n         }\n-        if(el2.style.height != "auto") {\n+        if (el2.style.height != "auto") {\n             // reset if previously set\n             el2.style.height = "auto";\n         }\n@@ -33,6 +35,28 @@\n         )\n     }\n \n+    function sync_focus(orig_field, focus_field, focus_tinymce) {\n+        const click_field = (field) => {\n+            console.log("clicked");\n+\n+            if (babel_selected) {\n+                babel_selected.classList.remove("selected");\n+                orig_babel_selected.classList.remove("selected");\n+            }\n+            babel_selected = focus_field;\n+            babel_selected.classList.add("selected");\n+            orig_babel_selected = orig_field;\n+            orig_babel_selected.classList.add("selected");\n+        };\n+\n+        /* select a field on both sides and change the color */\n+        focus_field.addEventListener("click", click_field);\n+\n+        if(focus_tinymce) {\n+            focus_tinymce.on("focus", click_field);\n+        }\n+    }\n+\n     function update_view() {\n         let order = 1;\n         const url_translate = document.querySelector(\'input#url_translate\')?.value;\n@@ -40,11 +64,8 @@\n \n         sync_header_height();\n \n-        // unwrap .field\n-        $(\'#form-target fieldset > div > .field\').unwrap();\n-\n         const original_fields = document.querySelectorAll(\'#frame-content .field\');\n-        const destination_fields = document.querySelectorAll(\'#form-target fieldset > .field\');\n+        const destination_fields = document.querySelectorAll(\'#form-target fieldset .field\');\n         const visible_destination_fields = [...destination_fields].filter(it => it.closest("fieldset.active") != null);\n \n         // show only fields of current tab\n@@ -68,13 +89,13 @@\n                 orig_field = orig_field[0];\n             }\n \n-            sync_heights(orig_field, dest_field);\n-\n             const gtranslate_enabled = document.getElementById("gtranslate_service_available");\n-\n-            var target_el = dest_field.querySelector(\'textarea,input\');\n+            const target_el = dest_field.querySelector(\'textarea,input\');\n             const target_tiny = tinymce.get(target_el.id);\n \n+            sync_focus(orig_field, dest_field, target_tiny);\n+            sync_heights(orig_field, dest_field);\n+\n             // Add the google translation field\n             if (\n                 gtranslate_enabled.value === "True" && (\n@@ -122,7 +143,7 @@\n                     const json = await response.json();\n                     var text_target = json.data;\n \n-                    if(!text_target) {\n+                    if (!text_target) {\n                         return;\n                     }\n \n@@ -153,31 +174,6 @@\n         });\n     }\n \n-    function init_sync_active_click() {\n-        /* select a field on both sides and change the color */\n-        let babel_selected = null;\n-        let orig_babel_selected = null;\n-\n-        document.querySelectorAll(\'#form-target fieldset .field\').forEach((field) => {\n-            field.addEventListener("click", () => {\n-                const original_fields = document.querySelectorAll(\'#frame-content .field\');\n-\n-                if (babel_selected) {\n-                    babel_selected.classList.remove("selected");\n-                    orig_babel_selected.classList.remove("selected");\n-                }\n-                babel_selected = field;\n-                babel_selected.classList.add("selected");\n-                const orig_field = [...original_fields].filter(it => babel_selected.dataset.fieldname.endsWith(it.id));\n-                if (!orig_field.length) {\n-                    return;\n-                }\n-                orig_babel_selected = orig_field[0];\n-                orig_babel_selected.classList.add("selected");\n-            });\n-        });\n-    }\n-\n     function load_default_language() {\n         // Fetch default language content\n         const trans_buttons = document.querySelectorAll("#trans-selector button");\n@@ -199,7 +195,6 @@\n         }\n \n         $(\'#frame-content\').load(initialFetchUrl, function () {\n-            $("#frame-content fieldset legend").unwrap().remove();\n             // defer updating\n             setTimeout(update_view, 500);\n         });\n@@ -232,9 +227,6 @@\n         // initialize tab change\n         init_tab_switch();\n \n-        // initialize synchron active fields when clicked\n-        init_sync_active_click();\n-\n         // load original language and update the view\n         load_default_language();\n     };\ndiff --git a/src/plone/app/multilingual/browser/stylesheet/multilingual.css b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\nindex 69d9349f..a2e59134 100644\n--- a/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n+++ b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n@@ -2,6 +2,14 @@\n     text-align: center;\n }\n \n+#babel-edit fieldset legend {\n+    display: none;\n+}\n+\n+#babel-edit fieldset .row {\n+    --bs-gutter-x: 0;\n+}\n+\n #babel-edit #trans-selector {\n     margin-top: 3px;\n     min-height: 26px;\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-07T08:49:17+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.multilingual/commit/e138b5413defeba2ac6d758bc62ea889c98f9b50

remove debug info

Files changed:
M src/plone/app/multilingual/browser/javascript/babel_helper.js

b'diff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex e3342181..2f42e8d1 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -37,8 +37,6 @@\n \n     function sync_focus(orig_field, focus_field, focus_tinymce) {\n         const click_field = (field) => {\n-            console.log("clicked");\n-\n             if (babel_selected) {\n                 babel_selected.classList.remove("selected");\n                 orig_babel_selected.classList.remove("selected");\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-07T12:30:07+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/53dda3d435f8dae2099a244d963e943e22e41448

Merge pull request #465 from plone/erral-modernize-gtranslate

take RichTextBehavior fields into account when using google translate

Files changed:
A news/464.bugfix
M src/plone/app/multilingual/browser/images/gtranslate.png
M src/plone/app/multilingual/browser/javascript/babel_helper.js
M src/plone/app/multilingual/browser/stylesheet/multilingual.css
M src/plone/app/multilingual/browser/templates/modify_translations.pt
M src/plone/app/multilingual/browser/translate.py

b'diff --git a/news/464.bugfix b/news/464.bugfix\nnew file mode 100644\nindex 000000000..6ec0f4267\n--- /dev/null\n+++ b/news/464.bugfix\n@@ -0,0 +1,2 @@\n+Take RichTextBehavior fields into account\n+[erral]\ndiff --git a/src/plone/app/multilingual/browser/images/gtranslate.png b/src/plone/app/multilingual/browser/images/gtranslate.png\nindex 9b6dec2ce..63617cf57 100644\nBinary files a/src/plone/app/multilingual/browser/images/gtranslate.png and b/src/plone/app/multilingual/browser/images/gtranslate.png differ\ndiff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 48279d32a..2f42e8d1f 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -1,179 +1,207 @@\n-/*global tinyMCE: false, document: false, window: false, jQuery: false */\n (function ($) {\n     "use strict";\n \n-    var original_fields = [],\n-        destination_fields = [],\n-        padding = 0;\n-\n-    function sync_element_vertically(original, destination, padding, first) {\n-        var default_props = {\n-            position: "",\n-            top: ""\n-        },\n-            original_top = 0,\n-            original_padding = 0,\n-            destination_top = 0,\n-            destination_padding = 0,\n-            shift = 0,\n-            more_padding = 0,\n-            images, new_distance;\n-\n-        function distance(a, b) {\n-            return b.position().top - a.position().top - a.height();\n+    let babel_selected = null;\n+    let orig_babel_selected = null;\n+\n+    function sync_heights(el1, el2) {\n+        if (el1.style.height != "auto") {\n+            // reset if previously set\n+            el1.style.height = "auto";\n         }\n-        if (destination.is(":visible")) {\n-            original.show();\n-            // reset fields\n-            if (original.css("position") === "relative") {\n-                original.css(default_props);\n-            }\n-            if (destination.css("position") === "relative") {\n-                destination.css(default_props);\n-            }\n-            original_top = original.position().top;\n-\n-            // Make images smaller\n-            images = original.find(\'img\');\n-            images.each(function (index, img) {\n-                var qimg = $(img);\n-                if (qimg.width() > original.width()) {\n-                    qimg.width(original.width() * 0.8);\n-                }\n-            });\n+        if (el2.style.height != "auto") {\n+            // reset if previously set\n+            el2.style.height = "auto";\n+        }\n+        const max_height = Math.max(\n+            el1.getBoundingClientRect().height,\n+            el2.getBoundingClientRect().height,\n+        );\n+        el1.style.height = `${max_height}px`;\n+        el2.style.height = `${max_height}px`;\n+    }\n \n-            destination_top = destination.position().top;\n-            shift = Math.abs(original_top - destination_top);\n-            if (original_top > destination_top) {\n-                destination_padding = shift;\n-            } else {\n-                original_padding = shift;\n-            }\n+    function sync_header_height() {\n+        // sync header and tab/button heights to ensure the fields are aligned synchronous\n+        sync_heights(\n+            document.querySelector("#babel-edit > div > h2"),\n+            document.querySelector("#header-translation h2"),\n+        )\n+\n+        // sync translation button and tab heights\n+        sync_heights(\n+            document.querySelector("#babel-edit #trans-selector"),\n+            document.querySelector("#form-target .autotoc-nav"),\n+        )\n+    }\n \n-            // The next calculation of padding is necessary if both elements\n-            // have to be shifted down.\n-            if (!first && original.prev().is(":visible")) {\n-                // Calculate distance between bottom of prev element and top\n-                // of current element. add Padding. If > 0, add to more_padding\n-                new_distance = distance(original.prev(), original);\n-                new_distance += original_padding;\n-                if (new_distance < padding) {\n-                    more_padding += padding - new_distance;\n-                }\n-                new_distance = distance(destination.prev(), destination);\n-                new_distance += destination_padding + more_padding;\n-                if (new_distance < padding) {\n-                    more_padding += padding - new_distance;\n-                }\n-            }\n-            original_padding += more_padding;\n-            destination_padding += more_padding;\n-            if (original_padding) {\n-                original.css({\n-                    position: \'relative\',\n-                    top: original_padding\n-                });\n-            } else {\n-                original.css(default_props);\n-            }\n-            if (destination_padding) {\n-                destination.css({\n-                    position: \'relative\',\n-                    top: destination_padding\n-                });\n-            } else {\n-                destination.css(default_props);\n+    function sync_focus(orig_field, focus_field, focus_tinymce) {\n+        const click_field = (field) => {\n+            if (babel_selected) {\n+                babel_selected.classList.remove("selected");\n+                orig_babel_selected.classList.remove("selected");\n             }\n+            babel_selected = focus_field;\n+            babel_selected.classList.add("selected");\n+            orig_babel_selected = orig_field;\n+            orig_babel_selected.classList.add("selected");\n+        };\n \n-        } else {\n-            original.hide();\n-            destination.css(default_props);\n-            original.css(default_props);\n+        /* select a field on both sides and change the color */\n+        focus_field.addEventListener("click", click_field);\n+\n+        if(focus_tinymce) {\n+            focus_tinymce.on("focus", click_field);\n         }\n-        // With all that padding, the form might need to be pushed down in\n-        // some cases.\n-        $([original, destination]).each(function (index, item) {\n-            var $item = $(item),\n-                outer_padding = 0,\n-                parent = $item.parent();\n-            outer_padding = Math.max($item.position().top + $item.height() - (parent.position().top + parent.height()) + padding, 0);\n-            if (outer_padding) {\n-                parent.height(parent.height() + outer_padding);\n-            }\n-        });\n     }\n \n     function update_view() {\n-        var order = 1,\n-            url_translate = $(\'input#url_translate\').val(),\n-            langSource = $(\'#frame-content #view_language\')[0].innerHTML;\n+        let order = 1;\n+        const url_translate = document.querySelector(\'input#url_translate\')?.value;\n+        const langSource = document.querySelector(\'#frame-content #view_language\').innerHTML;\n+\n+        sync_header_height();\n+\n+        const original_fields = document.querySelectorAll(\'#frame-content .field\');\n+        const destination_fields = document.querySelectorAll(\'#form-target fieldset .field\');\n+        const visible_destination_fields = [...destination_fields].filter(it => it.closest("fieldset.active") != null);\n+\n+        // show only fields of current tab\n+        original_fields.forEach((field) => {\n+            field.style.display = "none";\n+            visible_destination_fields.forEach((dst_fld) => {\n+                if (dst_fld.dataset.fieldname.endsWith(field.id)) {\n+                    field.style.display = "block";\n+                    return;\n+                }\n+            })\n+        });\n \n-        $(\'#form-target fieldset > div > .field\').unwrap();\n+        visible_destination_fields.forEach(dest_field => {\n+            var orig_field = [...original_fields].filter(it => dest_field.dataset.fieldname.endsWith(it.id));\n \n-        original_fields = $(\'#frame-content .field\');\n-        destination_fields = $(\'#form-target fieldset > .field\');\n+            if (!orig_field.length) {\n+                // field not found\n+                return;\n+            } else {\n+                orig_field = orig_field[0];\n+            }\n \n-        // Calculate the padding between fields as intended by css\n-        if (original_fields.length > 1) {\n-            padding = ($(original_fields[1]).position().top - $(original_fields[0]).position().top - $(original_fields[0]).height());\n-        }\n-        $.each(original_fields, function (index, value) {\n-            var original_field = $(value);\n-            var destination_field = $(destination_fields[index]);\n-            sync_element_vertically(original_field, destination_field, padding, index === 0);\n+            const gtranslate_enabled = document.getElementById("gtranslate_service_available");\n+            const target_el = dest_field.querySelector(\'textarea,input\');\n+            const target_tiny = tinymce.get(target_el.id);\n+\n+            sync_focus(orig_field, dest_field, target_tiny);\n+            sync_heights(orig_field, dest_field);\n \n             // Add the google translation field\n-            if ($(\'#gtranslate_service_available\').attr(\'value\') === "True" && ((original_field.find(\'.richtext-field, .textline-field, .text-field, .localstatic-field, .ArchetypesField-TextField\').length > 0) || ($(\'#at-babel-edit\').length > 0))) {\n-                original_field.prepend("<div class=\'translator-widget\' id=\'item_translation_" + order + "\'></div>");\n-                original_field.children(\'.translator-widget\').click(function () {\n-                    var field = $(value).attr("rel");\n-                    // Fetch source of text to translate.\n+            if (\n+                gtranslate_enabled.value === "True" && (\n+                    // it is either a text widget, a text area or rich widget\n+                    dest_field.querySelectorAll(\'.text-widget, .textarea-widget, .richTextWidget\').length ||\n+                    // or it is a tinymce richtextfield without wrapping CSS class\n+                    target_tiny !== null\n+                ) &&\n+                !orig_field.querySelector(".translator-widget")\n+            ) {\n+                const translator_widget = document.createElement("div");\n+\n+                translator_widget.classList.add("translator-widget");\n+                translator_widget.id = `item_translation_${order}`;\n+\n+                translator_widget.addEventListener("click", async function () {\n+                    var field = orig_field.getAttribute("rel");\n \n                     // we use the current URL to get the context\'s UID\n-                    var url_parts = document.location.pathname.split(\'++addtranslation++\')\n+                    var url_parts = document.location.pathname.split(\'++addtranslation++\');\n \n-                    var jsondata = {\n+                    var postdata = new URLSearchParams({\n                         \'field\': field,\n                         \'lang_source\': langSource,\n                         // we use the second part of the url_parts, the uid itself\n                         \'context_uid\': url_parts[1]\n-                      };\n-                    var targetelement = destination_field.find(\'textarea\');\n-                    var tiny_editor = destination_field.find("textarea.mce_editable");\n-                    if (!targetelement.length) {\n-                        targetelement = destination_field.find("input");\n-                    }\n+                    });\n+\n+                    const translate_service_url = url_translate + \'/gtranslation_service\';\n+\n                     // Now we call the data\n-                    $.ajax({\n-                        url: url_translate + \'/gtranslation_service\',\n-                        data: jsondata,\n-                        dataType: \'json\',\n-                        type: \'POST\',\n-                        success: function (data) {\n-                            var text_target = data.data;\n-                            if (tiny_editor.length > 0) {\n-                                tinyMCE.get(tiny_editor.attr(\'id\')).setContent(text_target);\n-                            } else {\n-                                targetelement.val(text_target); // Inserts translated text.\n-                            }\n-                        }\n+                    const response = await fetch(translate_service_url, {\n+                        method: "POST",\n+                        headers: {\n+                            "Content-type": "application/x-www-form-urlencoded; charset: utf-8",\n+                        },\n+                        body: postdata,\n                     });\n+\n+                    if (!response.ok) {\n+                        console.log(`Could not load ${translate_service_url}: ${response.statusText}`);\n+                        return;\n+                    }\n+\n+                    const json = await response.json();\n+                    var text_target = json.data;\n+\n+                    if (!text_target) {\n+                        return;\n+                    }\n+\n+                    if (target_tiny) {\n+                        // a TinyMCE editor is present\n+                        await target_tiny.setContent(text_target);\n+                    } else {\n+                        // set value of textarea\n+                        target_el.value = text_target;\n+                    }\n+                    // need to trigger "change" event to make validation (and tiny) happy\n+                    $(target_el).trigger("change");\n                 });\n-                original_field.children(\'.translator-widget\').hide();\n+\n+                orig_field.prepend(translator_widget);\n                 order += 1;\n             }\n         });\n     }\n \n-    $(window).on("load", function () {\n+    function init_tab_switch() {\n+        // init fieldset switch\n+        document.querySelector("#form-target form").querySelectorAll(".autotoc-nav a").forEach((item) => {\n+            // NOTE: the "clicked" event is triggered in pat-autotoc\n+            $(item).on("clicked", (e) => {\n+                update_view();\n+            });\n+        });\n+    }\n \n-        /* alert about language independent field */\n-        $(\'.languageindependent\').click(function () {\n-            $(this).css(\'opacity\', \'1\');\n+    function load_default_language() {\n+        // Fetch default language content\n+        const trans_buttons = document.querySelectorAll("#trans-selector button");\n+        const active_buttons = [...trans_buttons].filter(it => it.classList.contains("active"));\n+        const trans_select = document.querySelector("#trans-selector select");\n+\n+        let initialFetchUrl = "";\n+\n+        if (active_buttons.length) {\n+            initialFetchUrl = active_buttons[0].dataset.url;\n+        } else if (trans_buttons.length) {\n+            trans_buttons[0].classList.add("active");\n+            initialFetchUrl = trans_buttons[0].dataset.url;\n+        } else if (trans_select) {\n+            initialFetchUrl = trans_select.value;\n+        } else {\n+            // no chance to get original language content\n+            return;\n+        }\n+\n+        $(\'#frame-content\').load(initialFetchUrl, function () {\n+            // defer updating\n+            setTimeout(update_view, 500);\n         });\n+    }\n+\n+    function init_babel_view() {\n \n         /* change the language trigger */\n-        $(\'#trans-selector button\').click(function () {\n+        $(\'#trans-selector button\').on("click", function () {\n             var url = $(this).data(\'url\');\n             $(\'#frame-content\').load(url, function () {\n                 $("#frame-content fieldset legend").unwrap().remove();\n@@ -182,9 +210,10 @@\n             $(\'#trans-selector button.active\').removeClass(\'active\');\n             $(this).addClass(\'active\');\n         });\n+\n         /* change the language trigger, this time for the drop-down, which is\n         used when too many translations are present to fit into buttons */\n-        $(\'#trans-selector select\').change(function () {\n+        $(\'#trans-selector select\').on("change", function () {\n             var selected_elem = $(this).children(\'option\').eq(this.selectedIndex);\n             var url = selected_elem.val();\n             $(\'#frame-content\').load(url, function () {\n@@ -193,38 +222,30 @@\n             });\n         });\n \n-        /* select a field on both sides and change the color */\n-        var babel_selected = null,\n-            orig_babel_select = null;\n-        $(\'#babel-edit *[id^=fieldset] .field\').click(function () {\n-            var index = $(\'#form-target .field\').index($(this));\n-            if (babel_selected) {\n-                $(babel_selected).addClass(\'selected\');\n-                $(babel_selected).toggleClass("selected");\n-                $(orig_babel_select).toggleClass("selected");\n-                $(orig_babel_select).children(\'.translator-widget\').hide();\n-            }\n-            babel_selected = this;\n-            $(this).toggleClass("selected");\n-            orig_babel_select = $(\'#frame-content .field\')[index];\n-            $(orig_babel_select).toggleClass("selected");\n-            $(orig_babel_select).children(\'.translator-widget\').show();\n-        });\n-\n-        // Fetch default content\n-        var initialFetch = $(\'#trans-selector button.active\').data(\'url\');\n-        // Can be null if not buttons, but the drop-down is present\n-        if (initialFetch === null) {\n-            initialFetch = $(\'#trans-selector select option:selected\').val();\n-        }\n-        $(\'#frame-content\').load(initialFetch, function () {\n-            $("#frame-content fieldset legend").unwrap().remove();\n-            update_view();\n-        });\n+        // initialize tab change\n+        init_tab_switch();\n \n-        var intervalId = window.setInterval(function () {\n-            update_view();\n-        }, 1000);\n+        // load original language and update the view\n+        load_default_language();\n+    };\n \n+    let initInterval = null;\n+    initInterval = setInterval(() => {\n+        if (!document.querySelector("body.patterns-loaded")) {\n+            // wait for loaded patterns\n+            return;\n+        }\n+        clearInterval(initInterval);\n+        init_babel_view();\n+    }, 500);\n+\n+    // fix field alignment on window resize\n+    let deferResize = null;\n+    window.addEventListener("resize", () => {\n+        if (deferResize) {\n+            clearTimeout(deferResize);\n+        }\n+        deferResize = setTimeout(update_view, 500);\n     });\n+\n }(jQuery));\ndiff --git a/src/plone/app/multilingual/browser/stylesheet/multilingual.css b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\nindex 0cf9f6407..a2e591340 100644\n--- a/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n+++ b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n@@ -2,6 +2,14 @@\n     text-align: center;\n }\n \n+#babel-edit fieldset legend {\n+    display: none;\n+}\n+\n+#babel-edit fieldset .row {\n+    --bs-gutter-x: 0;\n+}\n+\n #babel-edit #trans-selector {\n     margin-top: 3px;\n     min-height: 26px;\n@@ -19,20 +27,28 @@\n     margin-right: 20px;\n }\n \n-#babel-edit .field, #babel-edit #frame-content .field  {\n+#babel-edit .field,\n+#babel-edit #frame-content .field {\n     background-color: #f1f1f1;\n     padding: 20px;\n+    margin-bottom: 1rem;\n }\n \n-#babel-edit .selected, #babel-edit #frame-content .selected{\n-    background-color: #99B0C4;\n-    color: #0A0909;\n+#babel-edit .selected,\n+#babel-edit #frame-content .selected {\n+    background-color: #99b0c4;\n+    color: #0a0909;\n }\n \n #babel-edit .selected .formHelp {\n     color: white;\n }\n \n+#babel-edit #frame-content .selected .translator-widget {\n+    display: block;\n+    cursor: pointer;\n+}\n+\n #babel-edit .richtext-field {\n     background-color: white;\n     color: black;\n@@ -54,24 +70,28 @@\n .translator-widget {\n     position: relative;\n     float: right;\n-    background: url(\'++resource++plone.app.multilingual.images/gtranslate.png\');\n+    background: url("++resource++plone.app.multilingual.images/gtranslate.png") no-repeat;\n+    background-size: contain;\n     min-height: 50px;\n     min-width: 50px;\n+    display: none;\n }\n \n .currentLanguage {\n     font-weight: bold;\n }\n /* Specific rule needed to fix a js error (position null in a field) */\n-#archetypes-fieldname-contributors{\n-    display:block;\n+#archetypes-fieldname-contributors {\n+    display: block;\n }\n \n a.contentmenuflags img {\n     margin-bottom: 2pt;\n }\n \n-.toolbar-menu-icon.icon-plone-contentmenu-multilingual:before { content: \'\\E81A\'; } /* \'\xee\xa0\xb6\' */\n+.toolbar-menu-icon.icon-plone-contentmenu-multilingual:before {\n+    content: "\\E81A";\n+} /* \'\xee\xa0\xb6\' */\n \n #translations-overview td {\n     line-height: 1;\n@@ -112,9 +132,9 @@ a.contentmenuflags img {\n #edit-zone nav > ul ul li.plonetoolbar-multilingual.actionSeparator {\n     margin: 0;\n     padding: 5px 0 0;\n-    border-top: 1px solid rgba(255,255,255,0.17);\n+    border-top: 1px solid rgba(255, 255, 255, 0.17);\n }\n-#edit-zone nav>ul ul li.plonetoolbar-multilingual.actionSeparator>span {\n+#edit-zone nav > ul ul li.plonetoolbar-multilingual.actionSeparator > span {\n     font-weight: 400;\n     color: #ccc;\n }\ndiff --git a/src/plone/app/multilingual/browser/templates/modify_translations.pt b/src/plone/app/multilingual/browser/templates/modify_translations.pt\nindex eb6576b88..b781b0383 100644\n--- a/src/plone/app/multilingual/browser/templates/modify_translations.pt\n+++ b/src/plone/app/multilingual/browser/templates/modify_translations.pt\n@@ -141,6 +141,9 @@\n                   <a class="pat-plone-modal addTranslationAction"\n                      href="#"\n                      title="Add translation"\n+                     data-pat-plone-modal=\'{\n+                      "modalSizeClass": "modal-xl"\n+                     }\'\n                      tal:attributes="\n                        href string:${context/absolute_url}/@@create_translation?language=${lang};\n                      "\ndiff --git a/src/plone/app/multilingual/browser/translate.py b/src/plone/app/multilingual/browser/translate.py\nindex e5348f3b0..3337e204f 100644\n--- a/src/plone/app/multilingual/browser/translate.py\n+++ b/src/plone/app/multilingual/browser/translate.py\n@@ -78,7 +78,7 @@ def __call__(self):\n             orig_object = manager.get_translation(lang_source)\n             field = self.request.form["field"].split(".")[-1]\n             if hasattr(orig_object, field):\n-                question = getattr(orig_object, field, "")\n+                question = getattr(orig_object, field, "") or ""\n                 if hasattr(question, "raw"):\n                     question = question.raw\n             else:\n'

