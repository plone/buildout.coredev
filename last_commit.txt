Repository: plone.session


Branch: refs/heads/master
Date: 2020-04-17T10:04:51+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.session/commit/bee903fda1e17d7b08a4ab535b418064d05917e5

fix dependency indirection to CMFPlone

Files changed:
A news/20.bugfix
M plone/session/tktauth.py

b'diff --git a/news/20.bugfix b/news/20.bugfix\nnew file mode 100644\nindex 0000000..2f9e547\n--- /dev/null\n+++ b/news/20.bugfix\n@@ -0,0 +1,2 @@\n+Fix hard dependency indirection with Products.CMFPlone (plone.session must not import from it).\n+[jensens]\ndiff --git a/plone/session/tktauth.py b/plone/session/tktauth.py\nindex 29655b9..94024f9 100755\n--- a/plone/session/tktauth.py\n+++ b/plone/session/tktauth.py\n@@ -135,7 +135,6 @@\n \n """\n \n-from Products.CMFPlone.utils import safe_unicode\n from socket import inet_aton\n from struct import pack\n \n@@ -144,16 +143,39 @@\n import six\n import time\n \n-try:\n-    from Products.CMFPlone.utils import safe_encode\n-except ImportError:\n-    def safe_encode(value, encoding=\'utf-8\'):\n-        """Convert unicode to the specified encoding.\n-        """\n-        if isinstance(value, six.text_type):\n-            value = value.encode(encoding)\n+\n+def safe_encode(value, encoding=\'utf-8\'):\n+    """Convert unicode to the specified encoding.\n+\n+    copied from Products.CMFPlone.utils b/c this package does not depend on it\n+    """\n+    if isinstance(value, six.text_type):\n+        value = value.encode(encoding)\n+    return value\n+\n+def safe_text(value, encoding=\'utf-8\'):\n+    """Converts a value to text, even it is already a text string.\n+\n+    copied from Products.CMFPlone.utils b/c this package does not depend on it\n+    """\n+    if six.PY2:\n+        if isinstance(value, unicode):\n+            return value\n+        elif isinstance(value, basestring):\n+            try:\n+                value = unicode(value, encoding)\n+            except (UnicodeDecodeError):\n+                value = value.decode(\'utf-8\', \'replace\')\n         return value\n \n+    if isinstance(value, str):\n+        return value\n+    elif isinstance(value, bytes):\n+        try:\n+            value = str(value, encoding)\n+        except (UnicodeDecodeError):\n+            value = value.decode(\'utf-8\', \'replace\')\n+    return value\n \n def is_equal(val1, val2):\n     # constant time comparison\n@@ -232,9 +254,9 @@ def splitTicket(ticket, encoding=None):\n     timestamp = int(val, 16)  # convert from hexadecimal+\n \n     if six.PY3:\n-        remainder = safe_unicode(remainder)\n+        remainder = safe_text(remainder)\n     elif encoding is not None:\n-        remainder = safe_unicode(remainder, encoding)\n+        remainder = safe_text(remainder, encoding)\n     parts = remainder.split(\'!\')\n \n     if len(parts) == 2:\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2020-06-17T15:12:44+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.session/commit/2c05684dc20f883089b4af47be97111adfb59cee

Merge pull request #20 from plone/fix-depepndency-indirection

fix dependency indirection to CMFPlone

Files changed:
A news/20.bugfix
M plone/session/tktauth.py

b'diff --git a/news/20.bugfix b/news/20.bugfix\nnew file mode 100644\nindex 0000000..2f9e547\n--- /dev/null\n+++ b/news/20.bugfix\n@@ -0,0 +1,2 @@\n+Fix hard dependency indirection with Products.CMFPlone (plone.session must not import from it).\n+[jensens]\ndiff --git a/plone/session/tktauth.py b/plone/session/tktauth.py\nindex 29655b9..94024f9 100755\n--- a/plone/session/tktauth.py\n+++ b/plone/session/tktauth.py\n@@ -135,7 +135,6 @@\n \n """\n \n-from Products.CMFPlone.utils import safe_unicode\n from socket import inet_aton\n from struct import pack\n \n@@ -144,16 +143,39 @@\n import six\n import time\n \n-try:\n-    from Products.CMFPlone.utils import safe_encode\n-except ImportError:\n-    def safe_encode(value, encoding=\'utf-8\'):\n-        """Convert unicode to the specified encoding.\n-        """\n-        if isinstance(value, six.text_type):\n-            value = value.encode(encoding)\n+\n+def safe_encode(value, encoding=\'utf-8\'):\n+    """Convert unicode to the specified encoding.\n+\n+    copied from Products.CMFPlone.utils b/c this package does not depend on it\n+    """\n+    if isinstance(value, six.text_type):\n+        value = value.encode(encoding)\n+    return value\n+\n+def safe_text(value, encoding=\'utf-8\'):\n+    """Converts a value to text, even it is already a text string.\n+\n+    copied from Products.CMFPlone.utils b/c this package does not depend on it\n+    """\n+    if six.PY2:\n+        if isinstance(value, unicode):\n+            return value\n+        elif isinstance(value, basestring):\n+            try:\n+                value = unicode(value, encoding)\n+            except (UnicodeDecodeError):\n+                value = value.decode(\'utf-8\', \'replace\')\n         return value\n \n+    if isinstance(value, str):\n+        return value\n+    elif isinstance(value, bytes):\n+        try:\n+            value = str(value, encoding)\n+        except (UnicodeDecodeError):\n+            value = value.decode(\'utf-8\', \'replace\')\n+    return value\n \n def is_equal(val1, val2):\n     # constant time comparison\n@@ -232,9 +254,9 @@ def splitTicket(ticket, encoding=None):\n     timestamp = int(val, 16)  # convert from hexadecimal+\n \n     if six.PY3:\n-        remainder = safe_unicode(remainder)\n+        remainder = safe_text(remainder)\n     elif encoding is not None:\n-        remainder = safe_unicode(remainder, encoding)\n+        remainder = safe_text(remainder, encoding)\n     parts = remainder.split(\'!\')\n \n     if len(parts) == 2:\n'

