Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-04-22T13:45:12+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/6871352f9867e7f5c11991e2d0c907cbe48313a4

Control panels: Dexterity Content Types (#909)

* Add description and count to @types

* Implement POST on @types

* Implement DELETE on @types

* Fix @types DELETE on Plone4

* Add Dexterity Content Types to /@controlpanels

* Dexterity Types Control Panel

* Revert "Add description and count to @types"

This reverts commit d9efbe281105b7a795e06567078a50c89fe2b80f.

* Fix Dexterity Types control panel items

* Align Controlpanels to other services

* Implement POST on controlpanels

* Revert "Implement POST on @types"

This reverts commit 7b6cac1383f2cb8eec5f78ebb11d59767e66c3d1.

* Handle @controlpanels POST and DELETE

* Revert "Fix @types DELETE on Plone4"

This reverts commit 49bee6842046cb10c5fae4fa18da6485c807ecd9.

* Revert "Implement DELETE on @types"

This reverts commit dac08f74de0e7fe1968b2c138bb4cdef3464483a.

* Serialize Control panel items

* Dexterity Content Type Control Panel Update/Deserializer

* Drop hard dependency on plone.app.dexterity

* Fix tests

* Controlpanel: Dexterity Types get documentation tests

* Controlpanel: Dexterity Types testing and documentation

* ControlPanel: Dexterity Types fix tests

* Flake fixes

* Remove useless Testing layer

* Changelog

* Fixes based on PR review

* Docs - Normalize plone.registry refs

* Control Panels: Dexterity-types edit behaviors

* Fix tests

* Add dx controlpanel integration test

* Add a few more expectations

* Fix dx controlpanel integration tests

* Fix failing test on Jenkins

Co-authored-by: Alin Voinea &lt;contact@avoinea.com&gt;

Files changed:
A news/534.feature
A src/plone/restapi/controlpanels/__init__.py
A src/plone/restapi/controlpanels/interfaces.py
A src/plone/restapi/controlpanels/types.py
A src/plone/restapi/deserializer/controlpanels/__init__.py
A src/plone/restapi/deserializer/controlpanels/configure.zcml
A src/plone/restapi/deserializer/controlpanels/types.py
A src/plone/restapi/serializer/controlpanels/__init__.py
A src/plone/restapi/serializer/controlpanels/configure.zcml
A src/plone/restapi/serializer/controlpanels/types.py
A src/plone/restapi/services/controlpanels/add.py
A src/plone/restapi/services/controlpanels/delete.py
A src/plone/restapi/services/controlpanels/update.py
A src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req
A src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req
A src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp
A src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req
A src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp
A src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req
A src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp
A src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req
A src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp
A src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py
M CONTRIBUTORS.rst
M docs/source/controlpanels.rst
M docs/source/types.rst
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/services/controlpanels/configure.zcml
M src/plone/restapi/services/controlpanels/get.py
M src/plone/restapi/tests/http-examples/controlpanels_get.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/types/utils.py
D src/plone/restapi/controlpanels.py
D src/plone/restapi/deserializer/controlpanels.py
D src/plone/restapi/serializer/controlpanels.py
D src/plone/restapi/services/controlpanels/patch.py

b'diff --git a/CONTRIBUTORS.rst b/CONTRIBUTORS.rst\nindex 1377a6b7..231691cc 100644\n--- a/CONTRIBUTORS.rst\n+++ b/CONTRIBUTORS.rst\n@@ -19,3 +19,4 @@\n - Andrea Cecchi\n - Luca Bellenghi\n - Giacomo Monari\n+- Alin Voinea\ndiff --git a/docs/source/controlpanels.rst b/docs/source/controlpanels.rst\nindex 8afed7e9..cc6a5155 100644\n--- a/docs/source/controlpanels.rst\n+++ b/docs/source/controlpanels.rst\n@@ -2,12 +2,12 @@ Control Panels\n ==============\n \n Control panels in Plone allow you to configure the global site setup of a\n-Plone site. The @controlpanels endpoint in plone.restapi allows you to list\n+Plone site. The ``@controlpanels`` endpoint in plone.restapi allows you to list\n all existing control panels in a Plone site and to retrieve or edit the\n settings of a specific control panel.\n \n-Most of the settings in the Plone control panels are based on plone.registry (since Plone 5.x). Therefore you can also use the @registry endpoint to\n-retrieve or manipulate site settings. The @controlpanels endpoint just gives\n+Most of the settings in the Plone control panels are based on plone.registry (since Plone 5.x). Therefore you can also use the ``@registry`` endpoint to\n+retrieve or manipulate site settings. The ``@controlpanels`` endpoint just gives\n developers are more a convenience way of accessing the settings and makes it\n easier to render control panels on the front-end.\n \n@@ -19,7 +19,7 @@ Listing Control Panels\n ----------------------\n \n A list of all existing control panels in the portal can be retrieved by\n-sending a GET request to the @controlpanels endpoint:\n+sending a GET request to the ``@controlpanels`` endpoint:\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get.req\n@@ -31,9 +31,9 @@ Response:\n \n The following fields are returned:\n \n-- @id: hypermedia link to the control panel\n-- title: the title of the control panel\n-- group: the group where the control panel should show up (e.g. General, Content, Users, Security, Advanced, Add-on Configuration)\n+- ``@id``: hypermedia link to the control panel\n+- ``title``: the title of the control panel\n+- ``group``: the group where the control panel should show up (e.g. General, Content, Users, Security, Advanced, Add-on Configuration)\n \n \n Retrieve a single Control Panel\n@@ -53,11 +53,11 @@ Response:\n \n The following fields are returned:\n \n-- @id: hypermedia link to the control panel\n-- title: title of the control panel\n-- group: group name of the control panel\n-- schema: JSON Schema of the control panel\n-- data: current values of the control panel\n+- ``@id``: hypermedia link to the control panel\n+- ``title``: title of the control panel\n+- ``group``: group name of the control panel\n+- ``schema``: JSON Schema of the control panel\n+- ``data``: current values of the control panel\n \n \n Updating a Control Panel with PATCH\n@@ -75,3 +75,106 @@ A successful response to a PATCH request will be indicated by a :term:`204 No Co\n \n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_patch.resp\n    :language: http\n+\n+\n+Control Panels not based on plone.registry\n+------------------------------------------\n+\n+Control panel which are not based on plone.registry have a custom ``@controlpanels/:panel`` endpoint implementation.\n+\n+Dexterity Types\n+^^^^^^^^^^^^^^^\n+\n+``@controlpanels/dexterity-types`` is a custom control panel endpoint, that will allow you to add, remove and configure available :ref:`types`\n+\n+Reading or writing Dexterity Content Types require the ``plone.schemaeditor.ManageSchemata`` permission.\n+\n+======= =============================================== ==============================================\n+Verb    URL                                             Action\n+======= =============================================== ==============================================\n+GET     ``/@controlpanels/dexterity-types``             List configurable content-types\n+POST    ``/@controlpanels/dexterity-types``             Creates a new content-type\n+GET     ``/@controlpanels/dexterity-types/{type-id}``   Get the current state of the content-type\n+PATCH   ``/@controlpanels/dexterity-types/{type-id}``   Update the content-type details\n+DELETE  ``/@controlpanels/dexterity-types/{type-id}``   Remove content-type\n+======= =============================================== ==============================================\n+\n+\n+Listing Dexterity Content Types\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+To list the available content-types send a GET request to ``@controlpanels/dexterity-types``\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp\n+   :language: http\n+\n+The following fields are returned:\n+\n+- ``@id``: hypermedia link to the control panel\n+- ``title``: title of the control panel\n+- ``group``: group name of the control panel\n+- ``schema``: JSON Schema of the control panel\n+- ``data``: current values of the control panel\n+- ``items``: list of configurable content-types.\n+\n+\n+Creating a new Dexterity Type with POST\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+To create a new content-type, send a POST request to the ``/@controlpanels/dexterity-types`` endpoint.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n+   :language: http\n+\n+\n+Reading a Dexterity Type with GET\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+After a successful POST, access the content-type by sending a GET request to the ``/@controlpanels/dexterity-types/{type-id}``:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n+   :language: http\n+\n+\n+Updating a Dexterity Type with PATCH\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+To update an existing content-type we send a PATCH request to the server.\n+PATCH allows to provide just a subset of the resource (the values you actually want to change).\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp\n+   :language: http\n+\n+\n+Removing a Dexterity Type with DELETE\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Delete an existing content-type by sending a DELETE request to the URL of an existing content-type:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\n+   :language: http\ndiff --git a/docs/source/types.rst b/docs/source/types.rst\nindex 0bb6c983..ff9c3e9e 100644\n--- a/docs/source/types.rst\n+++ b/docs/source/types.rst\n@@ -1,3 +1,5 @@\n+.. _types:\n+\n Types\n =====\n \ndiff --git a/news/534.feature b/news/534.feature\nnew file mode 100644\nindex 00000000..f554a339\n--- /dev/null\n+++ b/news/534.feature\n@@ -0,0 +1,2 @@\n+Managing Dexterity Type Creation (CRUD) via plone.restapi\n+[avoinea]\ndiff --git a/src/plone/restapi/controlpanels.py b/src/plone/restapi/controlpanels/__init__.py\nsimilarity index 89%\nrename from src/plone/restapi/controlpanels.py\nrename to src/plone/restapi/controlpanels/__init__.py\nindex 66237fa7..3461a3c3 100644\n--- a/src/plone/restapi/controlpanels.py\n+++ b/src/plone/restapi/controlpanels/__init__.py\n@@ -12,21 +12,10 @@\n from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n from Products.CMFPlone.interfaces.controlpanel import ISocialMediaSchema\n from zope.component import adapter\n-from zope.interface import Attribute\n from zope.interface import implementer\n from zope.interface import Interface\n-\n-\n-class IControlpanel(Interface):\n-    __name__ = Attribute("Name of the controlpanel in the URL")\n-    title = Attribute("Title of this controlpanel")\n-    group = Attribute("Group name of this controlpanel")\n-    schema = Attribute("Registry schema of this controlpanel")\n-\n-    configlet_id = Attribute("Id the configlet, ie MailHost")\n-    configlet_category_id = Attribute(\n-        "Category of the configlet, ie plone-general"\n-    )  # noqa\n+from zope.publisher.interfaces import NotFound\n+from plone.restapi.controlpanels.interfaces import IControlpanel\n \n \n @implementer(IControlpanel)\n@@ -63,6 +52,18 @@ def __init__(self, context, request):\n             self.title = self.configlet["title"]\n             self.group = self._get_group_title()\n \n+    def add(self, names):\n+        raise NotFound(self.context, names, self.request)\n+\n+    def get(self, names):\n+        raise NotFound(self.context, names, self.request)\n+\n+    def update(self, names):\n+        raise NotFound(self.context, names, self.request)\n+\n+    def delete(self, names):\n+        raise NotFound(self.context, names, self.request)\n+\n \n # General\n \ndiff --git a/src/plone/restapi/controlpanels/interfaces.py b/src/plone/restapi/controlpanels/interfaces.py\nnew file mode 100644\nindex 00000000..681cfaa6\n--- /dev/null\n+++ b/src/plone/restapi/controlpanels/interfaces.py\n@@ -0,0 +1,35 @@\n+# -*- coding: utf-8 -*-\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+\n+\n+class IControlpanel(Interface):\n+    __name__ = Attribute("Name of the controlpanel in the URL")\n+    title = Attribute("Title of this controlpanel")\n+    group = Attribute("Group name of this controlpanel")\n+    schema = Attribute("Registry schema of this controlpanel")\n+\n+    configlet_id = Attribute("Id of the configlet, e.g. MailHost")\n+    configlet_category_id = Attribute(\n+        "Category of the configlet, e.g. plone-general"\n+    )  # noqa\n+\n+    def add(names):\n+        """ Create controlpanel children by names\n+        """\n+\n+    def get(names):\n+        """ Read controlpanel children by names\n+        """\n+\n+    def update(names):\n+        """ Update controlpanel children by names\n+        """\n+\n+    def delete(names):\n+        """ Remove controlpanel children by names\n+        """\n+\n+\n+class IDexterityTypesControlpanel(IControlpanel):\n+    """ Dexterity Types Control panel """\ndiff --git a/src/plone/restapi/controlpanels/types.py b/src/plone/restapi/controlpanels/types.py\nnew file mode 100644\nindex 00000000..fea279a7\n--- /dev/null\n+++ b/src/plone/restapi/controlpanels/types.py\n@@ -0,0 +1,88 @@\n+# -*- coding: utf-8 -*-\n+from zExceptions import BadRequest\n+from zope.component import adapter\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from plone.i18n.normalizer import idnormalizer\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.controlpanels import RegistryConfigletPanel\n+from plone.restapi.controlpanels.interfaces import IDexterityTypesControlpanel\n+import plone.protect.interfaces\n+from zope.interface import noLongerProvides\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+\n+\n+@adapter(Interface, IPloneRestapiLayer)\n+@implementer(IDexterityTypesControlpanel)\n+class DexterityTypesControlpanel(RegistryConfigletPanel):\n+    schema = Interface\n+    configlet_id = "dexterity-types"\n+    configlet_category_id = "plone-content"\n+\n+    def add(self, names):\n+        data = json_body(self.request)\n+\n+        title = data.get("title", None)\n+        if not title:\n+            raise BadRequest("Property \'title\' is required")\n+\n+        tid = data.get("id", None)\n+        if not tid:\n+            tid = idnormalizer.normalize(title).replace("-", "_")\n+\n+        description = data.get("description", "")\n+\n+        properties = {\n+            "id": tid,\n+            "title": title,\n+            "description": description\n+        }\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n+        add_type = queryMultiAdapter((context, self.request), name=\'add-type\')\n+        fti = add_type.form_instance.create(data=properties)\n+        add_type.form_instance.add(fti)\n+        return self.get([tid, ])\n+\n+    def get(self, names):\n+        name = names[0]\n+\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n+        context = context.publishTraverse(self.request, name)\n+        serializer = ISerializeToJson(self)\n+        return serializer(context)\n+\n+    def update(self, names):\n+        name = names[0]\n+\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n+        context = context.publishTraverse(self.request, name)\n+        deserializer = IDeserializeFromJson(self)\n+        return deserializer(context)\n+\n+    def delete(self, names):\n+        name = names[0]\n+\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n+        edit = queryMultiAdapter((context, self.request), name=\'edit\')\n+        edit.form_instance.remove((name, None))\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 6f9de628..9c4f3f60 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -36,7 +36,7 @@\n   </configure>\n \n   <configure zcml:condition="have plone-5">\n-    <adapter factory=".controlpanels.ControlpanelDeserializeFromJson" />\n+    <include package=".controlpanels" />\n   </configure>\n \n </configure>\ndiff --git a/src/plone/restapi/deserializer/controlpanels.py b/src/plone/restapi/deserializer/controlpanels/__init__.py\nsimilarity index 100%\nrename from src/plone/restapi/deserializer/controlpanels.py\nrename to src/plone/restapi/deserializer/controlpanels/__init__.py\ndiff --git a/src/plone/restapi/deserializer/controlpanels/configure.zcml b/src/plone/restapi/deserializer/controlpanels/configure.zcml\nnew file mode 100644\nindex 00000000..1e3fe4cc\n--- /dev/null\n+++ b/src/plone/restapi/deserializer/controlpanels/configure.zcml\n@@ -0,0 +1,8 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    i18n_domain="plone.restapi">\n+\n+    <adapter factory=".ControlpanelDeserializeFromJson" />\n+    <adapter factory=".types.DexterityTypesControlpanelDeserializeFromJson" />\n+\n+</configure>\ndiff --git a/src/plone/restapi/deserializer/controlpanels/types.py b/src/plone/restapi/deserializer/controlpanels/types.py\nnew file mode 100644\nindex 00000000..7977dd58\n--- /dev/null\n+++ b/src/plone/restapi/deserializer/controlpanels/types.py\n@@ -0,0 +1,23 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.controlpanels.interfaces import IDexterityTypesControlpanel\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.deserializer.controlpanels import ControlpanelDeserializeFromJson\n+from plone.restapi.interfaces import IDeserializeFromJson\n+from zope.component import adapter, queryMultiAdapter\n+from zope.interface import implementer\n+\n+\n+@implementer(IDeserializeFromJson)\n+@adapter(IDexterityTypesControlpanel)\n+class DexterityTypesControlpanelDeserializeFromJson(ControlpanelDeserializeFromJson):\n+    def deserialize_item(self, proxy):\n+        data = json_body(self.request)\n+        overview = queryMultiAdapter((proxy, self.request), name=\'overview\')\n+        overview.form_instance.applyChanges(data)\n+        behaviors = queryMultiAdapter((proxy, self.request), name=\'behaviors\')\n+        behaviors.form_instance.applyChanges(data)\n+\n+    def __call__(self, item=None):\n+        if item is not None:\n+            return self.deserialize_item(item)\n+        return super(DexterityTypesControlpanelDeserializeFromJson, self).__call__()\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex cfa452f8..a86bce65 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -93,8 +93,7 @@\n     </configure>\n \n     <configure zcml:condition="have plone-5">\n-        <adapter factory=".controlpanels.ControlpanelSerializeToJson" />\n-        <adapter factory=".controlpanels.ControlpanelSummarySerializeToJson" />\n+        <include package=".controlpanels" />\n     </configure>\n \n </configure>\ndiff --git a/src/plone/restapi/serializer/controlpanels.py b/src/plone/restapi/serializer/controlpanels/__init__.py\nsimilarity index 94%\nrename from src/plone/restapi/serializer/controlpanels.py\nrename to src/plone/restapi/serializer/controlpanels/__init__.py\nindex cd5c0a52..04f9a567 100644\n--- a/src/plone/restapi/serializer/controlpanels.py\n+++ b/src/plone/restapi/serializer/controlpanels/__init__.py\n@@ -38,12 +38,14 @@ def __call__(self):\n         }\n \n \n-def get_jsonschema_for_controlpanel(controlpanel, context, request):\n+def get_jsonschema_for_controlpanel(controlpanel, context, request, form=None):\n     """Build a complete JSON schema for the given controlpanel.\n     """\n-    schema = controlpanel.schema\n-\n-    fieldsets = utils.get_fieldsets(context, request, schema)\n+    if not form:\n+        schema = controlpanel.schema\n+        fieldsets = utils.get_fieldsets(context, request, schema)\n+    else:\n+        fieldsets = utils.get_form_fieldsets(form)\n \n     # Build JSON schema properties\n     properties = utils.get_jsonschema_properties(context, request, fieldsets)\ndiff --git a/src/plone/restapi/serializer/controlpanels/configure.zcml b/src/plone/restapi/serializer/controlpanels/configure.zcml\nnew file mode 100644\nindex 00000000..5e8c8193\n--- /dev/null\n+++ b/src/plone/restapi/serializer/controlpanels/configure.zcml\n@@ -0,0 +1,9 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    i18n_domain="plone.restapi">\n+\n+    <adapter factory=".ControlpanelSerializeToJson" />\n+    <adapter factory=".ControlpanelSummarySerializeToJson" />\n+    <adapter factory=".types.DexterityTypesControlpanelSerializeToJson" />\n+\n+</configure>\ndiff --git a/src/plone/restapi/serializer/controlpanels/types.py b/src/plone/restapi/serializer/controlpanels/types.py\nnew file mode 100644\nindex 00000000..0316e08a\n--- /dev/null\n+++ b/src/plone/restapi/serializer/controlpanels/types.py\n@@ -0,0 +1,102 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFCore.utils import getToolByName\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.restapi.interfaces import ISerializeToJson\n+from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.controlpanels.interfaces import IDexterityTypesControlpanel\n+from plone.restapi.serializer.controlpanels import SERVICE_ID\n+from plone.restapi.serializer.controlpanels import ControlpanelSerializeToJson\n+from plone.restapi.serializer.controlpanels import get_jsonschema_for_controlpanel\n+from plone.restapi.serializer.converters import json_compatible\n+from zope.component import adapter\n+from zope.component import getAllUtilitiesRegisteredFor\n+from zope.component import queryMultiAdapter\n+from zope.component.hooks import getSite\n+from zope.interface import implementer\n+from zope.i18n import translate\n+\n+\n+@implementer(ISerializeToJson)\n+@adapter(IDexterityTypesControlpanel)\n+class DexterityTypesControlpanelSerializeToJson(ControlpanelSerializeToJson):\n+    def count(self, portal_type):\n+        catalog = getToolByName(self.controlpanel.context, \'portal_catalog\')\n+        lengths = dict(\n+            catalog.Indexes[\'portal_type\'].uniqueValues(withLengths=True))\n+        return lengths.get(portal_type, 0)\n+\n+    def serialize_item(self, proxy):\n+        json_data = {}\n+        json_schema = {}\n+        fti = proxy.fti\n+\n+        overview = queryMultiAdapter((proxy, self.controlpanel.request), name=\'overview\')\n+        form = overview.form_instance\n+        json_schema = get_jsonschema_for_controlpanel(\n+            self.controlpanel, self.controlpanel.context, self.controlpanel.request, form\n+        )\n+\n+        for name, item in form.fields.items():\n+            serializer = queryMultiAdapter(\n+                (item.field, fti, self.controlpanel.request), IFieldSerializer\n+            )\n+            if serializer:\n+                value = serializer()\n+            else:\n+                value = getattr(fti, name, None)\n+            json_data[json_compatible(name)] = value\n+\n+        behaviors = queryMultiAdapter((proxy, self.controlpanel.request), name=\'behaviors\')\n+        form = behaviors.form_instance\n+        behaviors_schema = get_jsonschema_for_controlpanel(\n+            self.controlpanel, self.controlpanel.context, self.controlpanel.request, form\n+        )\n+\n+        behaviors_schema[\'fieldsets\'][0][\'id\'] = \'behaviors\'\n+        behaviors_schema[\'fieldsets\'][0][\'title\'] = translate(\'Behaviors\', domain="plone", context=self.controlpanel.request)\n+        json_schema[\'fieldsets\'].extend(behaviors_schema[\'fieldsets\'])\n+        json_schema[\'properties\'].update(behaviors_schema[\'properties\'])\n+\n+        for name, item in form.fields.items():\n+            behaviors = getattr(fti, \'behaviors\', [])\n+            json_data[json_compatible(name)] = name in behaviors\n+\n+        # JSON schema\n+        return {\n+            "@id": "{}/{}/{}/{}".format(\n+                self.controlpanel.context.absolute_url(),\n+                SERVICE_ID,\n+                self.controlpanel.__name__,\n+                proxy.__name__\n+            ),\n+            "title": fti.Title(),\n+            "description": fti.Description(),\n+            "group": self.controlpanel.group,\n+            "schema": json_schema,\n+            "data": json_data,\n+            "items": []\n+        }\n+\n+    def __call__(self, item=None):\n+        if item is not None:\n+            return self.serialize_item(item)\n+\n+        json = super(DexterityTypesControlpanelSerializeToJson, self).__call__()\n+        json[\'items\'] = []\n+\n+        portal = getSite()\n+        portal_url = portal.absolute_url()\n+\n+        ftis = getAllUtilitiesRegisteredFor(IDexterityFTI)\n+        for fti in ftis:\n+            name = fti.__name__\n+            json[\'items\'].append({\n+                "@id": "{}/@controlpanels/dexterity-types/{}".format(portal_url, name),\n+                "@type": name,\n+                "meta_type": fti.meta_type,\n+                "id": name,\n+                "title": fti.Title(),\n+                "description": fti.Description(),\n+                "count": self.count(name)\n+            })\n+        return json\ndiff --git a/src/plone/restapi/services/controlpanels/patch.py b/src/plone/restapi/services/controlpanels/add.py\nsimilarity index 65%\nrename from src/plone/restapi/services/controlpanels/patch.py\nrename to src/plone/restapi/services/controlpanels/add.py\nindex ae3e492b..48212e53 100644\n--- a/src/plone/restapi/services/controlpanels/patch.py\n+++ b/src/plone/restapi/services/controlpanels/add.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.controlpanels import IControlpanel\n-from plone.restapi.interfaces import IDeserializeFromJson\n from plone.restapi.services import Service\n from zExceptions import BadRequest\n from zope.component import getAdapters\n@@ -9,11 +8,13 @@\n \n \n @implementer(IPublishTraverse)\n-class ControlpanelsPatch(Service):\n-    controlpanel_name = None\n+class ControlpanelsAdd(Service):\n+    def __init__(self, context, request):\n+        super(ControlpanelsAdd, self).__init__(context, request)\n+        self.params = []\n \n     def publishTraverse(self, request, name):\n-        self.controlpanel_name = name\n+        self.params.append(name)\n         return self\n \n     def get_controlpanel_adapters(self):\n@@ -27,11 +28,12 @@ def panel_by_name(self, name):\n         return panels.get(name)\n \n     def reply(self):\n-        if not self.controlpanel_name:\n+        if not self.params:\n             raise BadRequest("Missing parameter controlpanelname")\n \n-        panel = self.panel_by_name(self.controlpanel_name)\n-        deserializer = IDeserializeFromJson(panel)\n-        deserializer()  # The deserializer knows where to put it.\n+        panel = self.panel_by_name(self.params[0])\n+        res = panel.add(self.params[1:])\n \n-        return self.reply_no_content()\n+        self.request.response.setStatus(201)\n+        self.request.response.setHeader("Location", res["@id"])\n+        return res\ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex 718ea565..d17f8ee1 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -13,6 +13,14 @@\n     package="plone.app.controlpanel"\n     file="permissions.zcml" />\n \n+  <plone:service\n+    method="POST"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".add.ControlpanelsAdd"\n+    name="@controlpanels"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n+\n   <plone:service\n     method="GET"\n     for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n@@ -24,11 +32,18 @@\n   <plone:service\n     method="PATCH"\n     for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-    factory=".patch.ControlpanelsPatch"\n+    factory=".update.ControlpanelsUpdate"\n     name="@controlpanels"\n     permission="plone.app.controlpanel.Overview"\n     />\n \n+  <plone:service\n+    method="DELETE"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".delete.ControlpanelsDelete"\n+    name="@controlpanels"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n \n <!-- General -->\n   <adapter\n@@ -73,6 +88,11 @@\n     factory="plone.restapi.controlpanels.MarkupControlpanel"\n     name="markup" />\n \n+  <adapter\n+    factory="plone.restapi.controlpanels.types.DexterityTypesControlpanel"\n+    provides="plone.restapi.controlpanels.interfaces.IDexterityTypesControlpanel"\n+    name="dexterity-types" />\n+\n <!-- Security -->\n   <adapter\n     factory="plone.restapi.controlpanels.SecurityControlpanel"\ndiff --git a/src/plone/restapi/services/controlpanels/delete.py b/src/plone/restapi/services/controlpanels/delete.py\nnew file mode 100644\nindex 00000000..533ab98f\n--- /dev/null\n+++ b/src/plone/restapi/services/controlpanels/delete.py\n@@ -0,0 +1,37 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.controlpanels import IControlpanel\n+from plone.restapi.services import Service\n+from zExceptions import BadRequest\n+from zope.component import getAdapters\n+from zope.interface import implementer\n+from zope.publisher.interfaces import IPublishTraverse\n+\n+\n+@implementer(IPublishTraverse)\n+class ControlpanelsDelete(Service):\n+    def __init__(self, context, request):\n+        super(ControlpanelsDelete, self).__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        self.params.append(name)\n+        return self\n+\n+    def get_controlpanel_adapters(self):\n+        adapters = getAdapters((self.context, self.request), provided=IControlpanel)\n+        for name, panel in adapters:\n+            panel.__name__ = name\n+            yield name, panel\n+\n+    def panel_by_name(self, name):\n+        panels = dict(self.get_controlpanel_adapters())\n+        return panels.get(name)\n+\n+    def reply(self):\n+        if len(self.params) < 2:\n+            raise BadRequest("Can\'t delete Control Panel: %s" % self.params)\n+\n+        panel = self.panel_by_name(self.params[0])\n+        panel.delete(self.params[1:])\n+\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/controlpanels/get.py b/src/plone/restapi/services/controlpanels/get.py\nindex 51286cd9..98113619 100644\n--- a/src/plone/restapi/services/controlpanels/get.py\n+++ b/src/plone/restapi/services/controlpanels/get.py\n@@ -12,10 +12,12 @@\n \n @implementer(IPublishTraverse)\n class ControlpanelsGet(Service):\n-    controlpanel_name = None\n+    def __init__(self, context, request):\n+        super(ControlpanelsGet, self).__init__(context, request)\n+        self.params = []\n \n     def publishTraverse(self, request, name):\n-        self.controlpanel_name = name\n+        self.params.append(name)\n         return self\n \n     def get_controlpanel_adapters(self):\n@@ -43,7 +45,7 @@ def panel_by_name(self, name):\n         return panels.get(name)\n \n     def reply(self):\n-        if self.controlpanel_name:\n+        if self.params:\n             return self.reply_panel()\n \n         def serialize(panels):\n@@ -51,12 +53,20 @@ def serialize(panels):\n                 serializer = ISerializeToJsonSummary(panel)\n                 yield serializer()\n \n+        # List panels\n         panels = self.available_controlpanels()\n         return IJsonCompatible(list(serialize(panels)))\n \n     def reply_panel(self):\n-        panel = self.panel_by_name(self.controlpanel_name)\n+        name = self.params[0]\n+        panel = self.panel_by_name(name)\n         if panel is None:\n             self.request.response.setStatus(404)\n             return\n+\n+        # Panel child request\n+        if len(self.params) > 1:\n+            return IJsonCompatible(panel.get(self.params[1:]))\n+\n+        # Panel request\n         return IJsonCompatible(ISerializeToJson(panel)())\ndiff --git a/src/plone/restapi/services/controlpanels/update.py b/src/plone/restapi/services/controlpanels/update.py\nnew file mode 100644\nindex 00000000..06568a7f\n--- /dev/null\n+++ b/src/plone/restapi/services/controlpanels/update.py\n@@ -0,0 +1,44 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.controlpanels import IControlpanel\n+from plone.restapi.interfaces import IDeserializeFromJson\n+from plone.restapi.services import Service\n+from zExceptions import BadRequest\n+from zope.component import getAdapters\n+from zope.interface import implementer\n+from zope.publisher.interfaces import IPublishTraverse\n+\n+\n+@implementer(IPublishTraverse)\n+class ControlpanelsUpdate(Service):\n+    def __init__(self, context, request):\n+        super(ControlpanelsUpdate, self).__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        self.params.append(name)\n+        return self\n+\n+    def get_controlpanel_adapters(self):\n+        adapters = getAdapters((self.context, self.request), provided=IControlpanel)\n+        for name, panel in adapters:\n+            panel.__name__ = name\n+            yield name, panel\n+\n+    def panel_by_name(self, name):\n+        panels = dict(self.get_controlpanel_adapters())\n+        return panels.get(name)\n+\n+    def reply(self):\n+        if not self.params:\n+            raise BadRequest("Missing parameter controlpanelname")\n+\n+        panel = self.panel_by_name(self.params[0])\n+        if len(self.params) > 1:\n+            # Update panel child\n+            panel.update(self.params[1:])\n+        else:\n+            # Update panel\n+            deserializer = IDeserializeFromJson(panel)\n+            deserializer()  # The deserializer knows where to put it.\n+\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req b/src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req\nnew file mode 100644\nindex 00000000..232df634\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/@controlpanels/dexterity-types/my_custom_content_type HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_delete_dexterity_item.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get.resp b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\nindex 038b2cdc..f052b8e8 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get.resp\n@@ -52,6 +52,11 @@ Content-Type: application/json\n     "group": "Content", \n     "title": "Markup"\n   }, \n+  {\n+    "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types", \n+    "group": "Content", \n+    "title": "Dexterity Content Types"\n+  }, \n   {\n     "@id": "http://localhost:55001/plone/@controlpanels/security", \n     "group": "Security", \ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req\nnew file mode 100644\nindex 00000000..7cffbc2f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/dexterity-types HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp\nnew file mode 100644\nindex 00000000..54995d1b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity.resp\n@@ -0,0 +1,98 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types", \n+  "data": {}, \n+  "group": "Content", \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/Collection", \n+      "@type": "Collection", \n+      "count": 0, \n+      "description": "", \n+      "id": "Collection", \n+      "meta_type": "Dexterity FTI", \n+      "title": "Collection"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/Document", \n+      "@type": "Document", \n+      "count": 0, \n+      "description": "", \n+      "id": "Document", \n+      "meta_type": "Dexterity FTI", \n+      "title": "Page"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/Folder", \n+      "@type": "Folder", \n+      "count": 0, \n+      "description": "", \n+      "id": "Folder", \n+      "meta_type": "Dexterity FTI", \n+      "title": "Folder"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/Link", \n+      "@type": "Link", \n+      "count": 0, \n+      "description": "", \n+      "id": "Link", \n+      "meta_type": "Dexterity FTI", \n+      "title": "Link"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/File", \n+      "@type": "File", \n+      "count": 0, \n+      "description": "Lets you upload a file to the site.", \n+      "id": "File", \n+      "meta_type": "Dexterity FTI", \n+      "title": "File"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/Image", \n+      "@type": "Image", \n+      "count": 0, \n+      "description": "Images can be referenced in pages or displayed in an album.", \n+      "id": "Image", \n+      "meta_type": "Dexterity FTI", \n+      "title": "Image"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/News Item", \n+      "@type": "News Item", \n+      "count": 0, \n+      "description": "", \n+      "id": "News Item", \n+      "meta_type": "Dexterity FTI", \n+      "title": "News Item"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/Event", \n+      "@type": "Event", \n+      "count": 0, \n+      "description": "Events can be shown in calendars.", \n+      "id": "Event", \n+      "meta_type": "Dexterity FTI", \n+      "title": "Event"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/DXTestDocument", \n+      "@type": "DXTestDocument", \n+      "count": 0, \n+      "description": "", \n+      "id": "DXTestDocument", \n+      "meta_type": "Dexterity FTI", \n+      "title": "DX Test Document"\n+    }\n+  ], \n+  "schema": {\n+    "fieldsets": [], \n+    "properties": {}, \n+    "required": [], \n+    "type": "object"\n+  }, \n+  "title": "Dexterity Content Types"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req\nnew file mode 100644\nindex 00000000..8f6c72e0\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.req\n@@ -0,0 +1,3 @@\n+GET /plone/@controlpanels/dexterity-types/my_custom_content_type HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\nnew file mode 100644\nindex 00000000..f0a2b486\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n@@ -0,0 +1,320 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_content_type", \n+  "data": {\n+    "allowed_content_types": [], \n+    "description": "A custom content-type", \n+    "filter_content_types": true, \n+    "plone.allowdiscussion": false, \n+    "plone.basic": false, \n+    "plone.categorization": false, \n+    "plone.collection": false, \n+    "plone.constraintypes": false, \n+    "plone.dublincore": true, \n+    "plone.eventattendees": false, \n+    "plone.eventbasic": false, \n+    "plone.eventcontact": false, \n+    "plone.eventlocation": false, \n+    "plone.eventrecurrence": false, \n+    "plone.excludefromnavigation": false, \n+    "plone.leadimage": false, \n+    "plone.locking": false, \n+    "plone.namefromfilename": false, \n+    "plone.namefromtitle": true, \n+    "plone.navigationroot": false, \n+    "plone.nextpreviousenabled": false, \n+    "plone.nextprevioustoggle": false, \n+    "plone.ownership": false, \n+    "plone.publication": false, \n+    "plone.relateditems": false, \n+    "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": false, \n+    "plone.restapi.tests.dxtypes.ITestBehavior": false, \n+    "plone.richtext": false, \n+    "plone.shortname": false, \n+    "plone.tableofcontents": false, \n+    "plone.thumb_icon": false, \n+    "plone.translatable": false, \n+    "plone.versioning": false, \n+    "title": "My Custom Content Type", \n+    "volto.blocks": false\n+  }, \n+  "description": "A custom content-type", \n+  "group": "Content", \n+  "items": [], \n+  "schema": {\n+    "fieldsets": [\n+      {\n+        "fields": [\n+          "title", \n+          "description", \n+          "allowed_content_types", \n+          "filter_content_types"\n+        ], \n+        "id": "default", \n+        "title": "Default"\n+      }, \n+      {\n+        "fields": [\n+          "plone.allowdiscussion", \n+          "plone.basic", \n+          "volto.blocks", \n+          "plone.categorization", \n+          "plone.collection", \n+          "plone.publication", \n+          "plone.dublincore", \n+          "plone.eventattendees", \n+          "plone.eventbasic", \n+          "plone.eventcontact", \n+          "plone.eventlocation", \n+          "plone.eventrecurrence", \n+          "plone.excludefromnavigation", \n+          "plone.constraintypes", \n+          "plone.leadimage", \n+          "plone.locking", \n+          "plone.translatable", \n+          "plone.namefromfilename", \n+          "plone.namefromtitle", \n+          "plone.navigationroot", \n+          "plone.nextpreviousenabled", \n+          "plone.nextprevioustoggle", \n+          "plone.ownership", \n+          "plone.relateditems", \n+          "plone.richtext", \n+          "plone.shortname", \n+          "plone.tableofcontents", \n+          "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior", \n+          "plone.restapi.tests.dxtypes.ITestBehavior", \n+          "plone.thumb_icon", \n+          "plone.versioning"\n+        ], \n+        "id": "behaviors", \n+        "title": "Behaviors"\n+      }\n+    ], \n+    "properties": {\n+      "allowed_content_types": {\n+        "additionalItems": true, \n+        "description": "", \n+        "items": {\n+          "description": "", \n+          "title": "", \n+          "type": "string", \n+          "vocabulary": {\n+            "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n+          }\n+        }, \n+        "title": "Allowed Content Types", \n+        "type": "array", \n+        "uniqueItems": true\n+      }, \n+      "description": {\n+        "description": "", \n+        "minLength": 0, \n+        "title": "Description", \n+        "type": "string", \n+        "widget": "textarea"\n+      }, \n+      "filter_content_types": {\n+        "choices": [\n+          [\n+            "none", \n+            null\n+          ], \n+          [\n+            "all", \n+            null\n+          ], \n+          [\n+            "some", \n+            null\n+          ]\n+        ], \n+        "default": "none", \n+        "description": "Items of this type can act as a folder containing other  items. What content types should be allowed inside?", \n+        "enum": [\n+          "none", \n+          "all", \n+          "some"\n+        ], \n+        "enumNames": [\n+          null, \n+          null, \n+          null\n+        ], \n+        "title": "Filter Contained Types", \n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@sources/filter_content_types"\n+        }\n+      }, \n+      "plone.allowdiscussion": {\n+        "description": "Allow discussion on this item", \n+        "title": "Allow discussion", \n+        "type": "boolean"\n+      }, \n+      "plone.basic": {\n+        "description": "Adds title and description fields.", \n+        "title": "Basic metadata", \n+        "type": "boolean"\n+      }, \n+      "plone.categorization": {\n+        "description": "Adds keywords and language fields.", \n+        "title": "Categorization", \n+        "type": "boolean"\n+      }, \n+      "plone.collection": {\n+        "description": "Adds collection behavior", \n+        "title": "Collection", \n+        "type": "boolean"\n+      }, \n+      "plone.constraintypes": {\n+        "description": "Restrict the content types that can be added to folderish content", \n+        "title": "Folder Addable Constrains", \n+        "type": "boolean"\n+      }, \n+      "plone.dublincore": {\n+        "description": "Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)", \n+        "title": "Dublin Core metadata", \n+        "type": "boolean"\n+      }, \n+      "plone.eventattendees": {\n+        "description": "Attendees extension for Events.", \n+        "title": "Event Attendees", \n+        "type": "boolean"\n+      }, \n+      "plone.eventbasic": {\n+        "description": "Basic Event schema.", \n+        "title": "Event Basic", \n+        "type": "boolean"\n+      }, \n+      "plone.eventcontact": {\n+        "description": "Contact extension for Events.", \n+        "title": "Event Contact", \n+        "type": "boolean"\n+      }, \n+      "plone.eventlocation": {\n+        "description": "Location extension for Events.", \n+        "title": "Event Location", \n+        "type": "boolean"\n+      }, \n+      "plone.eventrecurrence": {\n+        "description": "Recurrence extension for Events.", \n+        "title": "Event Recurrence", \n+        "type": "boolean"\n+      }, \n+      "plone.excludefromnavigation": {\n+        "description": "Allow items to be excluded from navigation", \n+        "title": "Exclude From navigation", \n+        "type": "boolean"\n+      }, \n+      "plone.leadimage": {\n+        "description": "Adds image and image caption fields", \n+        "title": "Lead Image", \n+        "type": "boolean"\n+      }, \n+      "plone.locking": {\n+        "description": "Locking support for dexterity", \n+        "title": "Locking", \n+        "type": "boolean"\n+      }, \n+      "plone.namefromfilename": {\n+        "description": "Automatically generate short URL name for content based on its primary field file name", \n+        "title": "Name from file name", \n+        "type": "boolean"\n+      }, \n+      "plone.namefromtitle": {\n+        "description": "Automatically generate short URL name for content based on its initial title", \n+        "title": "Name from title", \n+        "type": "boolean"\n+      }, \n+      "plone.navigationroot": {\n+        "description": "Make all items of this type a navigation root", \n+        "title": "Navigation root", \n+        "type": "boolean"\n+      }, \n+      "plone.nextpreviousenabled": {\n+        "description": "Enable next previous navigation for all items of this type", \n+        "title": "Next previous navigation", \n+        "type": "boolean"\n+      }, \n+      "plone.nextprevioustoggle": {\n+        "description": "Allow items to have next previous navigation enabled", \n+        "title": "Next previous navigation toggle", \n+        "type": "boolean"\n+      }, \n+      "plone.ownership": {\n+        "description": "Adds creator, contributor, and rights fields.", \n+        "title": "Ownership", \n+        "type": "boolean"\n+      }, \n+      "plone.publication": {\n+        "description": "Adds effective date and expiration date fields.", \n+        "title": "Date range", \n+        "type": "boolean"\n+      }, \n+      "plone.relateditems": {\n+        "description": "Adds the ability to assign related items", \n+        "title": "Related items", \n+        "type": "boolean"\n+      }, \n+      "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": {\n+        "description": "Schema-only behavior using annotations", \n+        "title": "Test Annotations Behavior", \n+        "type": "boolean"\n+      }, \n+      "plone.restapi.tests.dxtypes.ITestBehavior": {\n+        "description": "Schema-only behavior using attributes", \n+        "title": "Test Behavior", \n+        "type": "boolean"\n+      }, \n+      "plone.richtext": {\n+        "description": "Adds richtext behavior", \n+        "title": "RichText", \n+        "type": "boolean"\n+      }, \n+      "plone.shortname": {\n+        "description": "Gives the ability to rename an item from its edit form.", \n+        "title": "Short name", \n+        "type": "boolean"\n+      }, \n+      "plone.tableofcontents": {\n+        "description": "Adds a table of contents", \n+        "title": "Table of contents", \n+        "type": "boolean"\n+      }, \n+      "plone.thumb_icon": {\n+        "description": "Options to suppress thumbs and/or icons and to override thumb size in listings, tables etc.", \n+        "title": "Thumbs and icon handling", \n+        "type": "boolean"\n+      }, \n+      "plone.translatable": {\n+        "description": "Make this content type multilingual aware", \n+        "title": "Multilingual Support", \n+        "type": "boolean"\n+      }, \n+      "plone.versioning": {\n+        "description": "Versioning support with CMFEditions", \n+        "title": "Versioning", \n+        "type": "boolean"\n+      }, \n+      "title": {\n+        "description": "", \n+        "title": "Type Name", \n+        "type": "string"\n+      }, \n+      "volto.blocks": {\n+        "description": "Enables Volto Blocks support", \n+        "title": "Blocks", \n+        "type": "boolean"\n+      }\n+    }, \n+    "required": [\n+      "title", \n+      "filter_content_types"\n+    ], \n+    "type": "object"\n+  }, \n+  "title": "My Custom Content Type"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\nnew file mode 100644\nindex 00000000..b6923341\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n@@ -0,0 +1,9 @@\n+PATCH /plone/@controlpanels/dexterity-types/my_custom_content_type HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "description": "A content-type",\n+    "title": "My Content Type"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp\nnew file mode 100644\nindex 00000000..0074ded3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req\nnew file mode 100644\nindex 00000000..3e6fb0db\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.req\n@@ -0,0 +1,9 @@\n+POST /plone/@controlpanels/dexterity-types HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "description": "A custom content-type",\n+    "title": "My Custom Content Type"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\nnew file mode 100644\nindex 00000000..350a1ca3\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n@@ -0,0 +1,321 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_content_type\n+\n+{\n+  "@id": "http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_content_type", \n+  "data": {\n+    "allowed_content_types": [], \n+    "description": "A custom content-type", \n+    "filter_content_types": true, \n+    "plone.allowdiscussion": false, \n+    "plone.basic": false, \n+    "plone.categorization": false, \n+    "plone.collection": false, \n+    "plone.constraintypes": false, \n+    "plone.dublincore": true, \n+    "plone.eventattendees": false, \n+    "plone.eventbasic": false, \n+    "plone.eventcontact": false, \n+    "plone.eventlocation": false, \n+    "plone.eventrecurrence": false, \n+    "plone.excludefromnavigation": false, \n+    "plone.leadimage": false, \n+    "plone.locking": false, \n+    "plone.namefromfilename": false, \n+    "plone.namefromtitle": true, \n+    "plone.navigationroot": false, \n+    "plone.nextpreviousenabled": false, \n+    "plone.nextprevioustoggle": false, \n+    "plone.ownership": false, \n+    "plone.publication": false, \n+    "plone.relateditems": false, \n+    "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": false, \n+    "plone.restapi.tests.dxtypes.ITestBehavior": false, \n+    "plone.richtext": false, \n+    "plone.shortname": false, \n+    "plone.tableofcontents": false, \n+    "plone.thumb_icon": false, \n+    "plone.translatable": false, \n+    "plone.versioning": false, \n+    "title": "My Custom Content Type", \n+    "volto.blocks": false\n+  }, \n+  "description": "A custom content-type", \n+  "group": "Content", \n+  "items": [], \n+  "schema": {\n+    "fieldsets": [\n+      {\n+        "fields": [\n+          "title", \n+          "description", \n+          "allowed_content_types", \n+          "filter_content_types"\n+        ], \n+        "id": "default", \n+        "title": "Default"\n+      }, \n+      {\n+        "fields": [\n+          "plone.allowdiscussion", \n+          "plone.basic", \n+          "volto.blocks", \n+          "plone.categorization", \n+          "plone.collection", \n+          "plone.publication", \n+          "plone.dublincore", \n+          "plone.eventattendees", \n+          "plone.eventbasic", \n+          "plone.eventcontact", \n+          "plone.eventlocation", \n+          "plone.eventrecurrence", \n+          "plone.excludefromnavigation", \n+          "plone.constraintypes", \n+          "plone.leadimage", \n+          "plone.locking", \n+          "plone.translatable", \n+          "plone.namefromfilename", \n+          "plone.namefromtitle", \n+          "plone.navigationroot", \n+          "plone.nextpreviousenabled", \n+          "plone.nextprevioustoggle", \n+          "plone.ownership", \n+          "plone.relateditems", \n+          "plone.richtext", \n+          "plone.shortname", \n+          "plone.tableofcontents", \n+          "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior", \n+          "plone.restapi.tests.dxtypes.ITestBehavior", \n+          "plone.thumb_icon", \n+          "plone.versioning"\n+        ], \n+        "id": "behaviors", \n+        "title": "Behaviors"\n+      }\n+    ], \n+    "properties": {\n+      "allowed_content_types": {\n+        "additionalItems": true, \n+        "description": "", \n+        "items": {\n+          "description": "", \n+          "title": "", \n+          "type": "string", \n+          "vocabulary": {\n+            "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n+          }\n+        }, \n+        "title": "Allowed Content Types", \n+        "type": "array", \n+        "uniqueItems": true\n+      }, \n+      "description": {\n+        "description": "", \n+        "minLength": 0, \n+        "title": "Description", \n+        "type": "string", \n+        "widget": "textarea"\n+      }, \n+      "filter_content_types": {\n+        "choices": [\n+          [\n+            "none", \n+            null\n+          ], \n+          [\n+            "all", \n+            null\n+          ], \n+          [\n+            "some", \n+            null\n+          ]\n+        ], \n+        "default": "none", \n+        "description": "Items of this type can act as a folder containing other  items. What content types should be allowed inside?", \n+        "enum": [\n+          "none", \n+          "all", \n+          "some"\n+        ], \n+        "enumNames": [\n+          null, \n+          null, \n+          null\n+        ], \n+        "title": "Filter Contained Types", \n+        "type": "string", \n+        "vocabulary": {\n+          "@id": "http://localhost:55001/plone/@sources/filter_content_types"\n+        }\n+      }, \n+      "plone.allowdiscussion": {\n+        "description": "Allow discussion on this item", \n+        "title": "Allow discussion", \n+        "type": "boolean"\n+      }, \n+      "plone.basic": {\n+        "description": "Adds title and description fields.", \n+        "title": "Basic metadata", \n+        "type": "boolean"\n+      }, \n+      "plone.categorization": {\n+        "description": "Adds keywords and language fields.", \n+        "title": "Categorization", \n+        "type": "boolean"\n+      }, \n+      "plone.collection": {\n+        "description": "Adds collection behavior", \n+        "title": "Collection", \n+        "type": "boolean"\n+      }, \n+      "plone.constraintypes": {\n+        "description": "Restrict the content types that can be added to folderish content", \n+        "title": "Folder Addable Constrains", \n+        "type": "boolean"\n+      }, \n+      "plone.dublincore": {\n+        "description": "Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)", \n+        "title": "Dublin Core metadata", \n+        "type": "boolean"\n+      }, \n+      "plone.eventattendees": {\n+        "description": "Attendees extension for Events.", \n+        "title": "Event Attendees", \n+        "type": "boolean"\n+      }, \n+      "plone.eventbasic": {\n+        "description": "Basic Event schema.", \n+        "title": "Event Basic", \n+        "type": "boolean"\n+      }, \n+      "plone.eventcontact": {\n+        "description": "Contact extension for Events.", \n+        "title": "Event Contact", \n+        "type": "boolean"\n+      }, \n+      "plone.eventlocation": {\n+        "description": "Location extension for Events.", \n+        "title": "Event Location", \n+        "type": "boolean"\n+      }, \n+      "plone.eventrecurrence": {\n+        "description": "Recurrence extension for Events.", \n+        "title": "Event Recurrence", \n+        "type": "boolean"\n+      }, \n+      "plone.excludefromnavigation": {\n+        "description": "Allow items to be excluded from navigation", \n+        "title": "Exclude From navigation", \n+        "type": "boolean"\n+      }, \n+      "plone.leadimage": {\n+        "description": "Adds image and image caption fields", \n+        "title": "Lead Image", \n+        "type": "boolean"\n+      }, \n+      "plone.locking": {\n+        "description": "Locking support for dexterity", \n+        "title": "Locking", \n+        "type": "boolean"\n+      }, \n+      "plone.namefromfilename": {\n+        "description": "Automatically generate short URL name for content based on its primary field file name", \n+        "title": "Name from file name", \n+        "type": "boolean"\n+      }, \n+      "plone.namefromtitle": {\n+        "description": "Automatically generate short URL name for content based on its initial title", \n+        "title": "Name from title", \n+        "type": "boolean"\n+      }, \n+      "plone.navigationroot": {\n+        "description": "Make all items of this type a navigation root", \n+        "title": "Navigation root", \n+        "type": "boolean"\n+      }, \n+      "plone.nextpreviousenabled": {\n+        "description": "Enable next previous navigation for all items of this type", \n+        "title": "Next previous navigation", \n+        "type": "boolean"\n+      }, \n+      "plone.nextprevioustoggle": {\n+        "description": "Allow items to have next previous navigation enabled", \n+        "title": "Next previous navigation toggle", \n+        "type": "boolean"\n+      }, \n+      "plone.ownership": {\n+        "description": "Adds creator, contributor, and rights fields.", \n+        "title": "Ownership", \n+        "type": "boolean"\n+      }, \n+      "plone.publication": {\n+        "description": "Adds effective date and expiration date fields.", \n+        "title": "Date range", \n+        "type": "boolean"\n+      }, \n+      "plone.relateditems": {\n+        "description": "Adds the ability to assign related items", \n+        "title": "Related items", \n+        "type": "boolean"\n+      }, \n+      "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": {\n+        "description": "Schema-only behavior using annotations", \n+        "title": "Test Annotations Behavior", \n+        "type": "boolean"\n+      }, \n+      "plone.restapi.tests.dxtypes.ITestBehavior": {\n+        "description": "Schema-only behavior using attributes", \n+        "title": "Test Behavior", \n+        "type": "boolean"\n+      }, \n+      "plone.richtext": {\n+        "description": "Adds richtext behavior", \n+        "title": "RichText", \n+        "type": "boolean"\n+      }, \n+      "plone.shortname": {\n+        "description": "Gives the ability to rename an item from its edit form.", \n+        "title": "Short name", \n+        "type": "boolean"\n+      }, \n+      "plone.tableofcontents": {\n+        "description": "Adds a table of contents", \n+        "title": "Table of contents", \n+        "type": "boolean"\n+      }, \n+      "plone.thumb_icon": {\n+        "description": "Options to suppress thumbs and/or icons and to override thumb size in listings, tables etc.", \n+        "title": "Thumbs and icon handling", \n+        "type": "boolean"\n+      }, \n+      "plone.translatable": {\n+        "description": "Make this content type multilingual aware", \n+        "title": "Multilingual Support", \n+        "type": "boolean"\n+      }, \n+      "plone.versioning": {\n+        "description": "Versioning support with CMFEditions", \n+        "title": "Versioning", \n+        "type": "boolean"\n+      }, \n+      "title": {\n+        "description": "", \n+        "title": "Type Name", \n+        "type": "string"\n+      }, \n+      "volto.blocks": {\n+        "description": "Enables Volto Blocks support", \n+        "title": "Blocks", \n+        "type": "boolean"\n+      }\n+    }, \n+    "required": [\n+      "title", \n+      "filter_content_types"\n+    ], \n+    "type": "object"\n+  }, \n+  "title": "My Custom Content Type"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex ff4d90d5..f23bf19d 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -9,7 +9,7 @@ Content-Type: application/json+schema\n         "description"\n       ], \n       "id": "default", \n-      "title": "Default"\n+      "title": "Por defecto"\n     }, \n     {\n       "fields": [\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 835bca13..2ec99caf 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1345,7 +1345,7 @@ def test_querystringsearch_post(self):\n \n class TestDocumentationMessageTranslations(TestDocumentationBase):\n \n-    layer = layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         super(TestDocumentationMessageTranslations, self).setUp()\n@@ -1536,16 +1536,54 @@ def test_documentation_expansion(self):\n         response = self.api_session.get("/front-page?expand=breadcrumbs,workflow")\n         save_request_and_response_for_docs("expansion", response)\n \n-    @unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n+\n+@unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n+class TestControlPanelDocumentation(TestDocumentationBase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n     def test_controlpanels_get_listing(self):\n         response = self.api_session.get("/@controlpanels")\n         save_request_and_response_for_docs("controlpanels_get", response)\n \n-    @unittest.skipIf(not PLONE5, "Just Plone 5 currently.")\n     def test_controlpanels_get_item(self):\n         response = self.api_session.get("/@controlpanels/editing")\n         save_request_and_response_for_docs("controlpanels_get_item", response)\n \n+    def test_controlpanels_get_dexterity(self):\n+        response = self.api_session.get("/@controlpanels/dexterity-types")\n+        save_request_and_response_for_docs("controlpanels_get_dexterity", response)\n+\n+    def test_controlpanels_crud_dexterity(self):\n+        # POST\n+        response = self.api_session.post(\n+            "/@controlpanels/dexterity-types",\n+            json={\n+                "title": "My Custom Content Type",\n+                "description": "A custom content-type",\n+            },\n+        )\n+        save_request_and_response_for_docs("controlpanels_post_dexterity_item", response)\n+\n+        # GET\n+        response = self.api_session.get("/@controlpanels/dexterity-types/my_custom_content_type")\n+        save_request_and_response_for_docs("controlpanels_get_dexterity_item", response)\n+\n+        # PATCH\n+        response = self.api_session.patch(\n+            "/@controlpanels/dexterity-types/my_custom_content_type",\n+            json={\n+                "title": "My Content Type",\n+                "description": "A content-type",\n+            },\n+        )\n+        save_request_and_response_for_docs("controlpanels_patch_dexterity_item", response)\n+\n+        # DELETE\n+        response = self.api_session.delete(\n+            "/@controlpanels/dexterity-types/my_custom_content_type")\n+        save_request_and_response_for_docs("controlpanels_delete_dexterity_item", response)\n+\n \n @unittest.skipUnless(\n     PAM_INSTALLED, "plone.app.multilingual is installed by default only in Plone 5"\ndiff --git a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\nnew file mode 100644\nindex 00000000..619cee6e\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n@@ -0,0 +1,143 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+\n+import unittest\n+\n+\n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+except ImportError:\n+    PLONE5 = False\n+else:\n+    PLONE5 = True\n+\n+\n+@unittest.skipIf(not PLONE5, "Endpoint works for Plone 5 only")\n+class TestDexterityTypesControlpanel(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_controlpanels_dexterity_types_get(self):\n+        response = self.api_session.get("/@controlpanels/dexterity-types")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(\n+            [\n+                "Collection",\n+                "Document",\n+                "Folder",\n+                "Link",\n+                "File",\n+                "Image",\n+                "News Item",\n+                "Event",\n+                "DXTestDocument",\n+            ],\n+            [\n+                x.get("id")\n+                for x in self.api_session.get("/@controlpanels/dexterity-types")\n+                .json()\n+                .get("items")\n+            ],\n+        )\n+\n+    def test_controlpanels_dexterity_types_document_get(self):\n+        response = self.api_session.get(\n+            "/@controlpanels/dexterity-types/Document")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(\n+            "{}/@controlpanels/dexterity-types/Document".format(\n+                self.portal_url),\n+            response.json().get("@id"),\n+        )\n+        self.assertEqual("Page", response.json().get("title"))\n+\n+    def test_controlpanels_dexterity_types_post(self):\n+        response = self.api_session.post(\n+            "/@controlpanels/dexterity-types",\n+            json={\n+                "title": "My Custom Content Type",\n+                "description": "A custom content-type",\n+            },\n+        )\n+\n+        self.assertEqual(201, response.status_code)\n+        self.assertEqual(\n+            "{}/@controlpanels/dexterity-types/my_custom_content_type".format(\n+                self.portal_url),\n+            response.json().get("@id"),\n+        )\n+        self.assertEqual(\n+            \'My Custom Content Type\',\n+            response.json().get("title")\n+        )\n+        self.assertEqual(\n+            \'A custom content-type\',\n+            response.json().get("description")\n+        )\n+\n+    def test_controlpanels_dexterity_types_document_patch(self):\n+        response = self.api_session.patch(\n+            "/@controlpanels/dexterity-types/Document",\n+            json={\n+                "title": "New Content Type Title",\n+                "description": "New content type description",\n+            },\n+        )\n+\n+        # PATCH returns no content\n+        self.assertEqual(204, response.status_code)\n+\n+        response = self.api_session.get(\n+            "/@controlpanels/dexterity-types/Document")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(\n+            \'New Content Type Title\',\n+            response.json().get("title")\n+        )\n+        self.assertEqual(\n+            \'New content type description\',\n+            response.json().get("description")\n+        )\n+\n+    def test_controlpanels_dexterity_types_document_delete(self):\n+        response = self.api_session.delete(\n+            "/@controlpanels/dexterity-types/Document")\n+\n+        self.assertEqual(204, response.status_code)\n+        self.assertEqual(\n+            [\n+                "Collection",\n+                "Folder",\n+                "Link",\n+                "File",\n+                "Image",\n+                "News Item",\n+                "Event",\n+                "DXTestDocument",\n+            ],\n+            [\n+                x.get("id")\n+                for x in self.api_session.get("/@controlpanels/dexterity-types")\n+                .json()\n+                .get("items")\n+            ],\n+        )\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 92cf026d..fdbbdedd 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -57,29 +57,39 @@ def iter_fields(fieldsets):\n             yield field\n \n \n-def get_fieldsets(context, request, schema, additional_schemata=None):\n-    """Given a base schema, and optionally some additional schemata,\n-    build a list of fieldsets with the corresponding z3c.form fields in them.\n+def get_form_fieldsets(form):\n+    """ Get fieldsets from form\n     """\n-    form = create_form(context, request, schema, additional_schemata)\n-\n-    # Default fieldset\n-    fieldsets = [\n-        {"id": "default", "title": u"Default", "fields": list(form.fields.values())}\n-    ]\n+    fieldsets = []\n+    form_fields = getattr(form, \'fields\', {})\n+    fields_values = list(form_fields.values())\n+    if form_fields:\n+        fieldsets.append({\n+            "id": "default",\n+            "title": translate("label_schema_default", default="Default",\n+                               domain="plone", context=getRequest()),\n+            "fields": fields_values\n+        })\n \n     # Additional fieldsets (AKA z3c.form groups)\n-    for group in form.groups:\n+    for group in getattr(form, \'groups\', []):\n         fieldset = {\n             "id": group.__name__,\n             "title": translate(group.label, context=getRequest()),\n             "fields": list(group.fields.values()),\n         }\n         fieldsets.append(fieldset)\n-\n     return fieldsets\n \n \n+def get_fieldsets(context, request, schema, additional_schemata=None):\n+    """Given a base schema, and optionally some additional schemata,\n+    build a list of fieldsets with the corresponding z3c.form fields in them.\n+    """\n+    form = create_form(context, request, schema, additional_schemata)\n+    return get_form_fieldsets(form)\n+\n+\n def get_fieldset_infos(fieldsets):\n     """Given a list of fieldset dicts as returned by `get_fieldsets()`,\n     return a list of fieldset info dicts that contain the (short) field name\n'

