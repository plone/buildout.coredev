Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2024-10-21T18:53:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.contenttypes/commit/e37ec9a297ac8177c5b248171fc9636b16c7a200

Undo changes for alt text.  That was a bit too soon.

Files changed:
M .gitignore
M .meta.toml
M MANIFEST.in
M plone/app/contenttypes/browser/templates/image.pt
M plone/app/contenttypes/browser/templates/listing.pt
M plone/app/contenttypes/browser/templates/listing_album.pt
M plone/app/contenttypes/browser/templates/listing_summary.pt
M plone/app/contenttypes/browser/templates/listing_tabular.pt
M plone/app/contenttypes/indexers.py
M plone/app/contenttypes/indexers.zcml
M plone/app/contenttypes/schema/image.xml
M plone/app/contenttypes/tests/test_image.py
D Makefile
D constraints.txt
D instance.yaml
D mx.ini
D news/+setup.internal
D news/700.feature
D requirements.txt

b'diff --git a/.gitignore b/.gitignore\nindex 8d63c885..486392f6 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -46,8 +46,6 @@ local.cfg\n /venv/\n .installed.txt\n \n-/test_*\n-robot_*\n \n ##\n # Add extra configuration options in .meta.toml:\ndiff --git a/.meta.toml b/.meta.toml\nindex 74ca55db..3bf9f054 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -11,9 +11,3 @@ dependencies_ignores = "[\'ZServer\', \'plone.app.event\', \'Products.CMFPlone\',]"\n \n [tox]\n constraints_file = "https://dist.plone.org/release/6.1-dev/constraints.txt"\n-\n-[gitignore]\n-extra_lines = """\n-/test_*\n-robot_*\n-"""\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex 5993732e..74225c91 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -8,9 +8,3 @@ global-exclude *.pyc\n \n recursive-exclude news *\n exclude news\n-\n-include requirements.txt\n-include constraints.txt\n-include *.yaml\n-include Makefile\n-exclude *-mxdev.txt\ndiff --git a/Makefile b/Makefile\ndeleted file mode 100644\nindex 053d9d8b..00000000\n--- a/Makefile\n+++ /dev/null\n@@ -1,123 +0,0 @@\n-### Defensive settings for make:\n-#     https://tech.davis-hansson.com/p/make/\n-SHELL:=bash\n-.ONESHELL:\n-.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n-.SILENT:\n-.DELETE_ON_ERROR:\n-MAKEFLAGS+=--warn-undefined-variables\n-MAKEFLAGS+=--no-builtin-rules\n-\n-# We like colors\n-# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n-RED=`tput setaf 1`\n-GREEN=`tput setaf 2`\n-RESET=`tput sgr0`\n-YELLOW=`tput setaf 3`\n-\n-BACKEND_FOLDER=$(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))\n-DOCS_DIR=${BACKEND_FOLDER}/docs\n-\n-# Python checks\n-PYTHON?=python3\n-\n-# installed?\n-ifeq (, $(shell which $(PYTHON) ))\n-  $(error "PYTHON=$(PYTHON) not found in $(PATH)")\n-endif\n-\n-# version ok?\n-PYTHON_VERSION_MIN=3.8\n-PYTHON_VERSION_OK=$(shell $(PYTHON) -c "import sys; print((int(sys.version_info[0]), int(sys.version_info[1])) >= tuple(map(int, \'$(PYTHON_VERSION_MIN)\'.split(\'.\'))))")\n-ifeq ($(PYTHON_VERSION_OK),0)\n-  $(error "Need python $(PYTHON_VERSION) >= $(PYTHON_VERSION_MIN)")\n-endif\n-\n-all: install\n-\n-# Add the following \'help\' target to your Makefile\n-# And add help text after each target name starting with \'\\#\\#\'\n-.PHONY: help\n-help: ## This help message\n-\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n-\n-.PHONY: clean\n-clean: clean-build clean-pyc clean-test clean-venv clean-instance ## remove all build, test, coverage and Python artifacts\n-\n-.PHONY: clean-instance\n-clean-instance: ## remove existing instance\n-\trm -fr instance etc inituser var\n-\n-.PHONY: clean-venv\n-clean-venv: ## remove virtual environment\n-\trm -fr bin include lib lib64 env pyvenv.cfg .tox .pytest_cache constraints-mxdev.txt requirements-mxdev.txt sources/\n-\n-.PHONY: clean-build\n-clean-build: ## remove build artifacts\n-\trm -fr build/\n-\trm -fr dist/\n-\trm -fr .eggs/\n-\trm -fr parts/\n-\trm -fr coverage.xml\n-\tfind . -name \'*.egg-info\' -exec rm -fr {} +\n-\tfind . -name \'*.egg\' -exec rm -rf {} +\n-\n-.PHONY: clean-pyc\n-clean-pyc: ## remove Python file artifacts\n-\tfind . -name \'*.pyc\' -exec rm -f {} +\n-\tfind . -name \'*.pyo\' -exec rm -f {} +\n-\tfind . -name \'*~\' -exec rm -f {} +\n-\tfind . -name \'__pycache__\' -exec rm -fr {} +\n-\n-.PHONY: clean-test\n-clean-test: ## remove test and coverage artifacts\n-\trm -f .coverage\n-\trm -fr htmlcov/\n-\trm -fr test_*\n-\trm -fr robot_*\n-\n-bin/pip bin/tox bin/mxdev:\n-\t@echo "$(GREEN)==> Setup Virtual Env$(RESET)"\n-\t$(PYTHON) -m venv .\n-\tbin/pip install -U "pip" "wheel" "cookiecutter" "mxdev" "tox" "pre-commit"\n-\tbin/pre-commit install\n-\n-.PHONY: config\n-config: bin/pip  ## Create instance configuration\n-\t@echo "$(GREEN)==> Create instance configuration$(RESET)"\n-\tbin/cookiecutter -f --no-input --config-file instance.yaml gh:plone/cookiecutter-zope-instance\n-\n-.PHONY: install-plone-6.0\n-install-plone-6.0: config ## pip install Plone packages\n-\t@echo "$(GREEN)==> Setup Build$(RESET)"\n-\tbin/mxdev -c mx.ini\n-\tbin/pip install -r requirements-mxdev.txt\n-\n-.PHONY: install\n-install: install-plone-6.0 ## Install Plone 6.0\n-\n-.PHONY: start\n-start: ## Start a Plone instance on localhost:8080\n-\tPYTHONWARNINGS=ignore ./bin/runwsgi instance/etc/zope.ini\n-\n-.PHONY: console\n-console: ## Start a console on a Plone instance\n-\tPYTHONWARNINGS=ignore ./bin/zconsole debug instance/etc/zope.conf\n-\n-.PHONY: format\n-format: bin/tox ## Format the codebase according to our standards\n-\t@echo "$(GREEN)==> Format codebase$(RESET)"\n-\tbin/tox -e format\n-\n-.PHONY: lint\n-lint: ## check code style\n-\tbin/tox -e lint\n-\n-# Tests\n-.PHONY: test\n-test: bin/tox ## run tests\n-\tbin/tox -e test\n-\n-.PHONY: test-coverage\n-test-coverage: bin/tox ## run tests with coverage\n-\tbin/tox -e coverage\ndiff --git a/constraints.txt b/constraints.txt\ndeleted file mode 100644\nindex 3bb2e326..00000000\n--- a/constraints.txt\n+++ /dev/null\n@@ -1 +0,0 @@\n--c https://dist.plone.org/release/6.0.13/constraints.txt\ndiff --git a/instance.yaml b/instance.yaml\ndeleted file mode 100644\nindex fe9d3149..00000000\n--- a/instance.yaml\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-default_context:\n-    initial_user_name: \'admin\'\n-    initial_user_password: \'admin\'\n-\n-    zcml_package_includes: [\'plone.app.contenttypes\']\n-\n-    db_storage: direct\ndiff --git a/mx.ini b/mx.ini\ndeleted file mode 100644\nindex db2906f9..00000000\n--- a/mx.ini\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-; This is a mxdev configuration file\n-; it can be used to override versions of packages already defined in the\n-; constraints files and to add new packages from VCS like git.\n-; to learn more about mxdev visit https://pypi.org/project/mxdev/\n-\n-[settings]\n-main-package = -e .[test]\n-version-overrides =\n-    plone.app.contenttypes >= 4.0.1.dev0\ndiff --git a/news/+setup.internal b/news/+setup.internal\ndeleted file mode 100644\nindex 3ca94f9d..00000000\n--- a/news/+setup.internal\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Setup local installation\n-[@ericof]\ndiff --git a/news/700.feature b/news/700.feature\ndeleted file mode 100644\nindex b73a4c8e..00000000\n--- a/news/700.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Add alt_text field to image content type. This allows users to manually set the value of alt tag, for usage in automated listings.\n-[@cekk, @jackahl]\ndiff --git a/plone/app/contenttypes/browser/templates/image.pt b/plone/app/contenttypes/browser/templates/image.pt\nindex 5c0592ff..cb77820f 100644\n--- a/plone/app/contenttypes/browser/templates/image.pt\n+++ b/plone/app/contenttypes/browser/templates/image.pt\n@@ -27,8 +27,7 @@\n           <figure class="figure">\n             <a tal:define="\n                  scale context/@@images;\n-                 alt_text context/alt_text|nothing;\n-                 img_tag python:scale.tag(\'image\', scale=\'large\', css_class=\'figure-img img-fluid\', alt=alt_text);\n+                 img_tag python:scale.tag(\'image\', scale=\'large\', css_class=\'figure-img img-fluid\');\n                "\n                tal:attributes="\n                  href string:${context/@@plone_context_state/object_url}/image_view_fullscreen;\n@@ -86,9 +85,7 @@\n           >Download</a>\n           <a class="btn btn-primary fullscreen"\n              href="${context/@@plone_context_state/object_url}/image_view_fullscreen"\n-          >\n-            <span i18n:translate="label_click_to_view_full_image">View full-size image</span>\n-          </a>\n+          ><span i18n:translate="label_click_to_view_full_image">View full-size image</span></a>\n         </section>\n \n \ndiff --git a/plone/app/contenttypes/browser/templates/listing.pt b/plone/app/contenttypes/browser/templates/listing.pt\nindex 5be2631e..9ad3df22 100644\n--- a/plone/app/contenttypes/browser/templates/listing.pt\n+++ b/plone/app/contenttypes/browser/templates/listing.pt\n@@ -66,7 +66,6 @@\n                                item_link python:item_type in view.use_view_action and item_url+\'/view\' or item_url;\n                                item_is_event python:view.is_event(obj);\n                                item_has_image python:item.getIcon;\n-                               item_alt_text python:getattr(item, \'alt_text\', \'\') if item_has_image else \'\';\n                                item_type_class python:(\'contenttype-\' + view.normalizeString(item_type)) if showicons else \'\';\n                              ">\n                     <metal:block define-slot="entry">\n@@ -162,7 +161,7 @@\n                           <a tal:attributes="\n                                href python:item_link;\n                              ">\n-                            <img tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale_list, css_class=img_class, loading=\'lazy\', alt=item_alt_text)" />\n+                            <img tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale_list, css_class=img_class, loading=\'lazy\')" />\n                           </a>\n                         </div>\n                       </article>\ndiff --git a/plone/app/contenttypes/browser/templates/listing_album.pt b/plone/app/contenttypes/browser/templates/listing_album.pt\nindex d3f5f3b3..70561c0e 100644\n--- a/plone/app/contenttypes/browser/templates/listing_album.pt\n+++ b/plone/app/contenttypes/browser/templates/listing_album.pt\n@@ -48,9 +48,7 @@\n                   <div class="card-image d-flex justify-content-center align-items-center"\n                        style="height: 14rem;"\n                        tal:define="\n-                         item_has_image python:image.getIcon;\n-                         item_alt_text python:getattr(image, \'alt_text\', \'\') if item_has_image else \'\';\n-                         scale python:image_scale.tag(image, \'image\', scale=\'mini\', loading=\'lazy\', alt=item_alt_text);\n+                         scale python:image_scale.tag(image, \'image\', scale=\'mini\', loading=\'lazy\');\n                        "\n                        tal:condition="scale"\n                   >\n@@ -81,9 +79,7 @@\n                   <div class="card-image d-flex justify-content-center align-items-center"\n                        style="height: 14rem;"\n                        tal:define="\n-                         item_has_image python:album.getIcon;\n-                         item_alt_text python:getattr(album, \'alt_text\', \'\') if item_has_image else \'\';\n-                         scale python:image_scale.tag(album, \'image\', scale=\'mini\', loading=\'lazy\', alt=item_alt_text) if getattr(album, \'image\', None) else None;\n+                         scale python:image_scale.tag(album, \'image\', scale=\'mini\', loading=\'lazy\') if getattr(album, \'image\', None) else None;\n                        "\n                        tal:condition="scale"\n                   >\ndiff --git a/plone/app/contenttypes/browser/templates/listing_summary.pt b/plone/app/contenttypes/browser/templates/listing_summary.pt\nindex 91f60dc4..fec35e61 100644\n--- a/plone/app/contenttypes/browser/templates/listing_summary.pt\n+++ b/plone/app/contenttypes/browser/templates/listing_summary.pt\n@@ -34,8 +34,6 @@\n                          tal:attributes="\n                            href item_link;\n                            title item_type;\n-                           item_has_image python:item.getIcon;\n-                           item_alt_text python:getattr(item, \'alt_text\', \'\') if item_has_image else \'\';\n                          "\n                       >\n               Item Title\n@@ -74,7 +72,7 @@\n                     <a tal:attributes="\n                          href item_link;\n                        ">\n-                      <img tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale_summary, css_class=\'image-responsive thumb-\' + thumb_scale_summary, loading=\'lazy\', alt=item_alt_text)" />\n+                      <img tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale_summary, css_class=\'image-responsive thumb-\' + thumb_scale_summary, loading=\'lazy\')" />\n                     </a>\n                   </div>\n \ndiff --git a/plone/app/contenttypes/browser/templates/listing_tabular.pt b/plone/app/contenttypes/browser/templates/listing_tabular.pt\nindex 56205c2a..29b8cdc3 100644\n--- a/plone/app/contenttypes/browser/templates/listing_tabular.pt\n+++ b/plone/app/contenttypes/browser/templates/listing_tabular.pt\n@@ -79,7 +79,6 @@\n                                    item_wf_state_class python:\'state-\' + view.normalizeString(item_wf_state);\n                                    item_creator python:item.Creator();\n                                    item_has_image python:item.getIcon;\n-                                   item_alt_text python:getattr(item, \'alt_text\', \'\') if item_has_image else \'\';\n                                    item_link python:item_type in view.use_view_action and item_url+\'/view\' or item_url;\n                                    item_mime_type python:item.mime_type;\n                                    item_mime_type_icon python: \'mimetype-\' + item_mime_type;\n@@ -139,7 +138,7 @@\n \n                           <td>\n                             <a tal:condition="python:item_has_image and thumb_scale_table">\n-                              <img tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale_table, css_class=img_class, loading=\'lazy\', alt=item_alt_text)"\n+                              <img tal:replace="structure python:image_scale.tag(item, \'image\', scale=thumb_scale_table, css_class=img_class, loading=\'lazy\')"\n                                    tal:attributes="\n                                      href python: item_link;\n                                    "\ndiff --git a/plone/app/contenttypes/indexers.py b/plone/app/contenttypes/indexers.py\nindex 2517b616..973dfe83 100644\n--- a/plone/app/contenttypes/indexers.py\n+++ b/plone/app/contenttypes/indexers.py\n@@ -190,8 +190,3 @@ def getIcon(obj):\n     if obj.aq_base.image:\n         return True\n     return False\n-\n-\n-@indexer(IDexterityContent)\n-def getAltTag(obj):\n-    return obj.alt_text\ndiff --git a/plone/app/contenttypes/indexers.zcml b/plone/app/contenttypes/indexers.zcml\nindex 6c79c341..52b15f0c 100644\n--- a/plone/app/contenttypes/indexers.zcml\n+++ b/plone/app/contenttypes/indexers.zcml\n@@ -50,9 +50,5 @@\n       factory=".indexers.mime_type"\n       name="mime_type"\n       />\n-  <adapter\n-      factory=".indexers.getAltTag"\n-      name="alt_text"\n-      />\n \n </configure>\ndiff --git a/plone/app/contenttypes/schema/image.xml b/plone/app/contenttypes/schema/image.xml\nindex af70b3b4..05c45972 100644\n--- a/plone/app/contenttypes/schema/image.xml\n+++ b/plone/app/contenttypes/schema/image.xml\n@@ -26,19 +26,5 @@\n       <description />\n       <title i18n:translate="label_image">Image</title>\n     </field>\n-    <field name="alt_text"\n-           type="zope.schema.TextLine"\n-    >\n-      <description i18n:translate="label_alt_text_help">\n-        Briefly describe the meaning of the image for people using assistive technology like screen readers.\n-        This will be used when the image is viewed by itself or in automated contexts like listings.\n-        Do not duplicate the Title or Description fields, since those might also be read by screen readers.\n-        Alt text should describe what a sighted user sees when looking at the image.\n-        This might include text the image contains, or even a description of an abstract pattern.\n-        In case your description already sufficiently describes your image, leave this field blank.\n-      </description>\n-      <required>False</required>\n-      <title i18n:translate="label_alt_text">Alt Text</title>\n-    </field>\n   </schema>\n </model>\ndiff --git a/plone/app/contenttypes/tests/test_image.py b/plone/app/contenttypes/tests/test_image.py\nindex 27f6d786..b31a514a 100644\n--- a/plone/app/contenttypes/tests/test_image.py\n+++ b/plone/app/contenttypes/tests/test_image.py\n@@ -72,16 +72,7 @@ def setUp(self):\n         image.title = "My Image"\n         image.description = "This is my image."\n         image.image = dummy_image()\n-\n-        self.portal.invokeFactory("Image", "image-with-alt")\n-        image_alt = self.portal["image-with-alt"]\n-        image_alt.title = "My Image 2"\n-        image_alt.description = "This is my second image."\n-        image_alt.alt_text = "An alt text"\n-        image_alt.image = dummy_image()\n-\n         self.image = image\n-        self.image_alt = image_alt\n         self.request.set("URL", image.absolute_url())\n         self.request.set("ACTUAL_URL", image.absolute_url())\n         alsoProvides(self.request, IPloneFormLayer)\n@@ -94,29 +85,6 @@ def test_image_view(self):\n         self.assertTrue("My Image" in view())\n         self.assertTrue("This is my image." in view())\n \n-    def test_image_view_alt(self):\n-        view = self.image_alt.restrictedTraverse("@@image_view")\n-        self.assertTrue(view())\n-        self.assertEqual(view.request.response.status, 200)\n-        self.assertTrue("My Image 2" in view())\n-        self.assertTrue("This is my second image." in view())\n-        self.assertTrue("An alt text" in view())\n-\n-    def test_image_alt_in_listing_view(self):\n-        self.image_alt.image = dummy_image("image.svg")\n-        view = self.portal.restrictedTraverse("@@listing_view")\n-        self.assertTrue("An alt text" in view())\n-\n-    def test_image_alt_in_summary_view(self):\n-        self.image_alt.image = dummy_image("image.svg")\n-        view = self.portal.restrictedTraverse("@@summary_view")\n-        self.assertTrue("An alt text" in view())\n-\n-    def test_image_alt_in_album_view(self):\n-        self.image_alt.image = dummy_image("image.svg")\n-        view = self.portal.restrictedTraverse("@@album_view")\n-        self.assertTrue("An alt text" in view())\n-\n     # XXX: Not working. See ImageFunctionalTest test_image_view_fullscreen\n     # Problem seems to be that the image is not properly uploaded.\n     #    def test_image_view_fullscreen(self):\ndiff --git a/requirements.txt b/requirements.txt\ndeleted file mode 100644\nindex da443200..00000000\n--- a/requirements.txt\n+++ /dev/null\n@@ -1 +0,0 @@\n--c constraints.txt\n'

