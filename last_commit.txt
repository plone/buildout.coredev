Repository: plone.namedfile


Branch: refs/heads/master
Date: 2023-10-27T02:20:31+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/6687472bac29807942219a5fde4721f75fdb1132

Be more strict when checking if mimetype is allowed to be displayed inline.

This takes over some code from https://github.com/zopefoundation/Zope/pull/1167

Files changed:
A news/1167.bugfix
M plone/namedfile/browser.py
M plone/namedfile/scaling.py
M plone/namedfile/utils/__init__.py

b'diff --git a/news/1167.bugfix b/news/1167.bugfix\nnew file mode 100644\nindex 0000000..3d8ef86\n--- /dev/null\n+++ b/news/1167.bugfix\n@@ -0,0 +1,2 @@\n+Be more strict when checking if mimetype is allowed to be displayed inline.\n+[maurits]\ndiff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py\nindex a764a0a..0930b75 100644\n--- a/plone/namedfile/browser.py\n+++ b/plone/namedfile/browser.py\n@@ -1,4 +1,5 @@\n from AccessControl.ZopeGuards import guarded_getattr\n+from plone.namedfile.utils import extract_media_type\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n@@ -174,7 +175,7 @@ class DisplayFile(Download):\n \n     def set_headers(self, file):\n         if hasattr(file, "contentType"):\n-            mimetype = file.contentType\n+            mimetype = extract_media_type(file.contentType)\n             if self.use_denylist:\n                 if mimetype in self.disallowed_inline_mimetypes:\n                     # Let the Download view handle this.\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 47503dd..8f2c9c4 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -11,6 +11,7 @@\n from plone.namedfile.interfaces import IStableImageScale\n from plone.namedfile.picture import get_picture_variants\n from plone.namedfile.picture import Img2PictureTag\n+from plone.namedfile.utils import extract_media_type\n from plone.namedfile.utils import getHighPixelDensityScales\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n@@ -182,7 +183,7 @@ def _should_force_download(self):\n         # If this returns True, the caller should call set_headers with a filename.\n         if not hasattr(self.data, "contentType"):\n             return\n-        mimetype = self.data.contentType\n+        mimetype = extract_media_type(self.data.contentType)\n         if self.use_denylist:\n             # We explicitly deny a few mimetypes, and allow the rest.\n             return mimetype in self.disallowed_inline_mimetypes\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex a747a6c..75a15bb 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -94,7 +94,11 @@ def safe_basename(filename):\n \n \n def get_contenttype(file=None, filename=None, default="application/octet-stream"):\n-    """Get the MIME content type of the given file and/or filename."""\n+    """Get the MIME content type of the given file and/or filename.\n+\n+    Note: depending on your use case, you may want to call \'extract_media_type\'\n+    on the result.\n+    """\n \n     file_type = getattr(file, "contentType", None)\n     if file_type:\n@@ -108,6 +112,22 @@ def get_contenttype(file=None, filename=None, default="application/octet-stream"\n     return default\n \n \n+def extract_media_type(content_type):\n+    """extract the proper media type from *content_type*.\n+\n+    Ignore parameters and whitespace and normalize to lower case.\n+    See https://github.com/zopefoundation/Zope/pull/1167\n+    """\n+    if not content_type:\n+        return content_type\n+    # ignore parameters\n+    content_type = content_type.split(";", 1)[0]\n+    # ignore whitespace\n+    content_type = "".join(content_type.split())\n+    # normalize to lowercase\n+    return content_type.lower()\n+\n+\n def set_headers(file, response, filename=None):\n     """Set response headers for the given file. If filename is given, set\n     the Content-Disposition to attachment.\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2023-10-27T09:32:21+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/17dbec4aa50d86370af8328977808141bd90c094

Only define extract_media_type when we cannot import it from Zope.

Files changed:
M plone/namedfile/utils/__init__.py

b'diff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex 75a15bb..b27c882 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -31,6 +31,26 @@\n except ImportError:\n     from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n \n+try:\n+    # Zope 5.8.6+\n+    from OFS.Image import extract_media_type\n+except ImportError:\n+\n+    def extract_media_type(content_type):\n+        """extract the proper media type from *content_type*.\n+\n+        Ignore parameters and whitespace and normalize to lower case.\n+        See https://github.com/zopefoundation/Zope/pull/1167\n+        """\n+        if not content_type:\n+            return content_type\n+        # ignore parameters\n+        content_type = content_type.split(";", 1)[0]\n+        # ignore whitespace\n+        content_type = "".join(content_type.split())\n+        # normalize to lowercase\n+        return content_type.lower()\n+\n \n @implementer(IStreamIterator)\n class filestream_range_iterator(Iterable):\n@@ -112,22 +132,6 @@ def get_contenttype(file=None, filename=None, default="application/octet-stream"\n     return default\n \n \n-def extract_media_type(content_type):\n-    """extract the proper media type from *content_type*.\n-\n-    Ignore parameters and whitespace and normalize to lower case.\n-    See https://github.com/zopefoundation/Zope/pull/1167\n-    """\n-    if not content_type:\n-        return content_type\n-    # ignore parameters\n-    content_type = content_type.split(";", 1)[0]\n-    # ignore whitespace\n-    content_type = "".join(content_type.split())\n-    # normalize to lowercase\n-    return content_type.lower()\n-\n-\n def set_headers(file, response, filename=None):\n     """Set response headers for the given file. If filename is given, set\n     the Content-Disposition to attachment.\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2023-10-27T09:41:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/ff616cced3aca4651c0d4814e31b4d0001362420

Copy unit test for extract_media_type from Zope.

Files changed:
M plone/namedfile/tests/test_image.py

b'diff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 8360a97..d05a42b 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -1,4 +1,4 @@\n-# This file is borrowed from zope.app.file and licensed ZPL.\n+# This file is partially borrowed from zope.app.file and licensed ZPL.\n \n from DateTime import DateTime\n from plone.namedfile.file import NamedImage\n@@ -82,6 +82,15 @@ def testInterface(self):\n         self.assertTrue(INamedImage.implementedBy(NamedImage))\n         self.assertTrue(verifyClass(INamedImage, NamedImage))\n \n+    def test_extract_media_type(self):\n+        from plone.namedfile.utils import extract_media_type as extract\n+\n+        self.assertIsNone(extract(None))\n+        self.assertEqual(extract("text/plain"), "text/plain")\n+        self.assertEqual(extract("TEXT/PLAIN"), "text/plain")\n+        self.assertEqual(extract("text / plain"), "text/plain")\n+        self.assertEqual(extract(" text/plain ; charset=utf-8"), "text/plain")\n+\n     def test_get_contenttype(self):\n         self.assertEqual(\n             get_contenttype(NamedImage(getFile("image.gif"), contentType="image/gif")),\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2023-10-28T10:00:32-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.namedfile/commit/17a21d40b7089bdc61162e5be8da36de0982eee3

Merge pull request #154 from plone/maurits-extract-media-type-master

Be more strict when checking if mimetype is allowed inline

Files changed:
A news/1167.bugfix
M plone/namedfile/browser.py
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/utils/__init__.py

b'diff --git a/news/1167.bugfix b/news/1167.bugfix\nnew file mode 100644\nindex 0000000..3d8ef86\n--- /dev/null\n+++ b/news/1167.bugfix\n@@ -0,0 +1,2 @@\n+Be more strict when checking if mimetype is allowed to be displayed inline.\n+[maurits]\ndiff --git a/plone/namedfile/browser.py b/plone/namedfile/browser.py\nindex a764a0a..0930b75 100644\n--- a/plone/namedfile/browser.py\n+++ b/plone/namedfile/browser.py\n@@ -1,4 +1,5 @@\n from AccessControl.ZopeGuards import guarded_getattr\n+from plone.namedfile.utils import extract_media_type\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n from plone.rfc822.interfaces import IPrimaryFieldInfo\n@@ -174,7 +175,7 @@ class DisplayFile(Download):\n \n     def set_headers(self, file):\n         if hasattr(file, "contentType"):\n-            mimetype = file.contentType\n+            mimetype = extract_media_type(file.contentType)\n             if self.use_denylist:\n                 if mimetype in self.disallowed_inline_mimetypes:\n                     # Let the Download view handle this.\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 47503dd..8f2c9c4 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -11,6 +11,7 @@\n from plone.namedfile.interfaces import IStableImageScale\n from plone.namedfile.picture import get_picture_variants\n from plone.namedfile.picture import Img2PictureTag\n+from plone.namedfile.utils import extract_media_type\n from plone.namedfile.utils import getHighPixelDensityScales\n from plone.namedfile.utils import set_headers\n from plone.namedfile.utils import stream_data\n@@ -182,7 +183,7 @@ def _should_force_download(self):\n         # If this returns True, the caller should call set_headers with a filename.\n         if not hasattr(self.data, "contentType"):\n             return\n-        mimetype = self.data.contentType\n+        mimetype = extract_media_type(self.data.contentType)\n         if self.use_denylist:\n             # We explicitly deny a few mimetypes, and allow the rest.\n             return mimetype in self.disallowed_inline_mimetypes\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 8360a97..d05a42b 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -1,4 +1,4 @@\n-# This file is borrowed from zope.app.file and licensed ZPL.\n+# This file is partially borrowed from zope.app.file and licensed ZPL.\n \n from DateTime import DateTime\n from plone.namedfile.file import NamedImage\n@@ -82,6 +82,15 @@ def testInterface(self):\n         self.assertTrue(INamedImage.implementedBy(NamedImage))\n         self.assertTrue(verifyClass(INamedImage, NamedImage))\n \n+    def test_extract_media_type(self):\n+        from plone.namedfile.utils import extract_media_type as extract\n+\n+        self.assertIsNone(extract(None))\n+        self.assertEqual(extract("text/plain"), "text/plain")\n+        self.assertEqual(extract("TEXT/PLAIN"), "text/plain")\n+        self.assertEqual(extract("text / plain"), "text/plain")\n+        self.assertEqual(extract(" text/plain ; charset=utf-8"), "text/plain")\n+\n     def test_get_contenttype(self):\n         self.assertEqual(\n             get_contenttype(NamedImage(getFile("image.gif"), contentType="image/gif")),\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex a747a6c..b27c882 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -31,6 +31,26 @@\n except ImportError:\n     from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n \n+try:\n+    # Zope 5.8.6+\n+    from OFS.Image import extract_media_type\n+except ImportError:\n+\n+    def extract_media_type(content_type):\n+        """extract the proper media type from *content_type*.\n+\n+        Ignore parameters and whitespace and normalize to lower case.\n+        See https://github.com/zopefoundation/Zope/pull/1167\n+        """\n+        if not content_type:\n+            return content_type\n+        # ignore parameters\n+        content_type = content_type.split(";", 1)[0]\n+        # ignore whitespace\n+        content_type = "".join(content_type.split())\n+        # normalize to lowercase\n+        return content_type.lower()\n+\n \n @implementer(IStreamIterator)\n class filestream_range_iterator(Iterable):\n@@ -94,7 +114,11 @@ def safe_basename(filename):\n \n \n def get_contenttype(file=None, filename=None, default="application/octet-stream"):\n-    """Get the MIME content type of the given file and/or filename."""\n+    """Get the MIME content type of the given file and/or filename.\n+\n+    Note: depending on your use case, you may want to call \'extract_media_type\'\n+    on the result.\n+    """\n \n     file_type = getattr(file, "contentType", None)\n     if file_type:\n'

