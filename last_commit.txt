Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-05-06T10:47:48+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/b5d31fdad5dbaa55bd500859a2288acf4a6f8601

Date/time widget: Fix data converter adaption.

Get the data converter for the date and datetime widgets via adaption and remove the _converter attribute hack.
This aligns the code to z3c.form standards and allows to override the data converter which was previously not easily possible.

Files changed:
A news/204.internal
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widgets/datetime.py

b'diff --git a/news/204.internal b/news/204.internal\nnew file mode 100644\nindex 00000000..9ed5d71b\n--- /dev/null\n+++ b/news/204.internal\n@@ -0,0 +1,4 @@\n+Date/time widget: Fix data converter adaption.\n+Get the data converter for the date and datetime widgets via adaption and remove the _converter attribute hack.\n+This aligns the code to z3c.form standards and allows to override the data converter which was previously not easily possible.\n+[thet]\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 4cb6ebf1..77438a0b 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -22,6 +22,7 @@\n from unittest.mock import Mock\n from z3c.form.form import EditForm\n from z3c.form.form import Form\n+from z3c.form.interfaces import IDataConverter\n from z3c.form.interfaces import IValue\n from z3c.form.interfaces import IWidget\n from z3c.form.widget import FieldWidget\n@@ -265,10 +266,14 @@ def test_widget_required(self):\n         pattern_options = self.widget.get_pattern_options()\n         self.assertEqual(pattern_options["clear"], False)\n \n-    def test_data_converter(self):\n-        from plone.app.z3cform.widgets.datetime import DateWidgetConverter\n+    def test_datewidget_data_converter_adaption(self):\n+        from plone.app.z3cform.converters import DateWidgetConverter\n+\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n+        self.assertEqual(DateWidgetConverter, converter.__class__)\n \n-        converter = DateWidgetConverter(self.field, self.widget)\n+    def test_data_converter(self):\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n \n         self.assertEqual(\n             converter.field.missing_value,\n@@ -375,10 +380,14 @@ def test_widget_required(self):\n         pattern_options = self.widget.get_pattern_options()\n         self.assertEqual(pattern_options["clear"], False)\n \n-    def test_data_converter(self):\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n+    def test_datetimewidget_data_converter_adaption(self):\n+        from plone.app.z3cform.converters import DatetimeWidgetConverter\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n+        self.assertEqual(DatetimeWidgetConverter, converter.__class__)\n+\n+    def test_data_converter(self):\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n \n         self.assertEqual(\n             converter.toFieldValue(""),\n@@ -412,8 +421,6 @@ def test_data_converter(self):\n \n     def test_data_converter__no_timezone(self):\n         """When no timezone is set, don\'t apply one."""\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n-\n         context = Mock()\n \n         dt = datetime(2013, 11, 13, 10, 20)\n@@ -421,7 +428,7 @@ def test_data_converter__no_timezone(self):\n         self.widget.context = context\n         self.widget.default_timezone = None\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n         self.assertEqual(\n             converter.toFieldValue("2013-11-13T10:20"),\n             datetime(2013, 11, 13, 10, 20),\n@@ -433,8 +440,6 @@ def test_data_converter__no_timezone(self):\n \n     def test_data_converter__timezone_id(self):\n         """When a (pytz) timezone id is set, use that."""\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n-\n         context = Mock()\n \n         dt = datetime(2013, 11, 13, 10, 20)\n@@ -443,7 +448,7 @@ def test_data_converter__timezone_id(self):\n         self.widget.default_timezone = "Europe/Amsterdam"\n         tz = pytz.timezone("Europe/Amsterdam")\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n         self.assertEqual(\n             converter.toFieldValue("2013-11-13T10:20"),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\n@@ -457,8 +462,6 @@ def test_data_converter__timezone_callback(self):\n         """When a timezone callback is set, returning a (pytz) timezone id,\n         use that.\n         """\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n-\n         context = Mock()\n \n         dt = datetime(2013, 11, 13, 10, 20)\n@@ -467,7 +470,7 @@ def test_data_converter__timezone_callback(self):\n         self.widget.default_timezone = lambda context: "Europe/Amsterdam"\n         tz = pytz.timezone("Europe/Amsterdam")\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n         self.assertEqual(\n             converter.toFieldValue("2013-11-13T10:20"),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\ndiff --git a/plone/app/z3cform/widgets/datetime.py b/plone/app/z3cform/widgets/datetime.py\nindex c30aad4a..b0f6f447 100644\n--- a/plone/app/z3cform/widgets/datetime.py\n+++ b/plone/app/z3cform/widgets/datetime.py\n@@ -1,14 +1,14 @@\n-from plone.app.z3cform.converters import DatetimeWidgetConverter\n-from plone.app.z3cform.converters import DateWidgetConverter\n from plone.app.z3cform.interfaces import IDatetimeWidget\n from plone.app.z3cform.interfaces import IDateWidget\n from plone.app.z3cform.interfaces import ITimeWidget\n from plone.app.z3cform.utils import dict_merge\n from plone.app.z3cform.widgets.base import HTMLTextInputWidget\n from plone.base import PloneMessageFactory as _\n+from z3c.form.interfaces import IDataConverter\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.widget import FieldWidget\n from z3c.form.widget import Widget\n+from zope.component import getMultiAdapter\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import implementer_only\n@@ -27,7 +27,6 @@ def get_date_options(request):\n \n class DateTimeWidgetBase(HTMLTextInputWidget, Widget):\n     _input_type = ""\n-    _converter = None\n     _formater = ""\n     _formater_length = ""\n \n@@ -63,10 +62,12 @@ def render(self):\n         if not self.value:\n             return ""\n \n-        if not self._converter:\n+        converter = getMultiAdapter((self.field, self), IDataConverter)\n+\n+        if not converter:\n             return self.value\n \n-        field_value = self._converter(self.field, self).toFieldValue(self.value)\n+        field_value = converter.toFieldValue(self.value)\n         if field_value is self.field.missing_value:\n             return ""\n \n@@ -82,7 +83,6 @@ class DateWidget(DateTimeWidgetBase):\n     """Date widget for z3c.form."""\n \n     _input_type = "date"\n-    _converter = DateWidgetConverter\n     _formater = "date"\n     _formater_length = "short"\n \n@@ -100,7 +100,6 @@ class DatetimeWidget(DateTimeWidgetBase):\n     """Datetime widget for z3c.form."""\n \n     _input_type = "datetime-local"\n-    _converter = DatetimeWidgetConverter\n     _formater = "dateTime"\n     _formater_length = "short"\n \n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-05-06T11:25:48+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/42ff10858dfd0fd3dfae7bda6c96487f6bf9a2a4

Merge pull request #204 from plone/datetimewidget-converteradaption

Date/time widget: Get the dataconverter via adapter registration and â€¦

Files changed:
A news/204.internal
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widgets/datetime.py

b'diff --git a/news/204.internal b/news/204.internal\nnew file mode 100644\nindex 00000000..9ed5d71b\n--- /dev/null\n+++ b/news/204.internal\n@@ -0,0 +1,4 @@\n+Date/time widget: Fix data converter adaption.\n+Get the data converter for the date and datetime widgets via adaption and remove the _converter attribute hack.\n+This aligns the code to z3c.form standards and allows to override the data converter which was previously not easily possible.\n+[thet]\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 4cb6ebf1..77438a0b 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -22,6 +22,7 @@\n from unittest.mock import Mock\n from z3c.form.form import EditForm\n from z3c.form.form import Form\n+from z3c.form.interfaces import IDataConverter\n from z3c.form.interfaces import IValue\n from z3c.form.interfaces import IWidget\n from z3c.form.widget import FieldWidget\n@@ -265,10 +266,14 @@ def test_widget_required(self):\n         pattern_options = self.widget.get_pattern_options()\n         self.assertEqual(pattern_options["clear"], False)\n \n-    def test_data_converter(self):\n-        from plone.app.z3cform.widgets.datetime import DateWidgetConverter\n+    def test_datewidget_data_converter_adaption(self):\n+        from plone.app.z3cform.converters import DateWidgetConverter\n+\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n+        self.assertEqual(DateWidgetConverter, converter.__class__)\n \n-        converter = DateWidgetConverter(self.field, self.widget)\n+    def test_data_converter(self):\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n \n         self.assertEqual(\n             converter.field.missing_value,\n@@ -375,10 +380,14 @@ def test_widget_required(self):\n         pattern_options = self.widget.get_pattern_options()\n         self.assertEqual(pattern_options["clear"], False)\n \n-    def test_data_converter(self):\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n+    def test_datetimewidget_data_converter_adaption(self):\n+        from plone.app.z3cform.converters import DatetimeWidgetConverter\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n+        self.assertEqual(DatetimeWidgetConverter, converter.__class__)\n+\n+    def test_data_converter(self):\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n \n         self.assertEqual(\n             converter.toFieldValue(""),\n@@ -412,8 +421,6 @@ def test_data_converter(self):\n \n     def test_data_converter__no_timezone(self):\n         """When no timezone is set, don\'t apply one."""\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n-\n         context = Mock()\n \n         dt = datetime(2013, 11, 13, 10, 20)\n@@ -421,7 +428,7 @@ def test_data_converter__no_timezone(self):\n         self.widget.context = context\n         self.widget.default_timezone = None\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n         self.assertEqual(\n             converter.toFieldValue("2013-11-13T10:20"),\n             datetime(2013, 11, 13, 10, 20),\n@@ -433,8 +440,6 @@ def test_data_converter__no_timezone(self):\n \n     def test_data_converter__timezone_id(self):\n         """When a (pytz) timezone id is set, use that."""\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n-\n         context = Mock()\n \n         dt = datetime(2013, 11, 13, 10, 20)\n@@ -443,7 +448,7 @@ def test_data_converter__timezone_id(self):\n         self.widget.default_timezone = "Europe/Amsterdam"\n         tz = pytz.timezone("Europe/Amsterdam")\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n         self.assertEqual(\n             converter.toFieldValue("2013-11-13T10:20"),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\n@@ -457,8 +462,6 @@ def test_data_converter__timezone_callback(self):\n         """When a timezone callback is set, returning a (pytz) timezone id,\n         use that.\n         """\n-        from plone.app.z3cform.widgets.datetime import DatetimeWidgetConverter\n-\n         context = Mock()\n \n         dt = datetime(2013, 11, 13, 10, 20)\n@@ -467,7 +470,7 @@ def test_data_converter__timezone_callback(self):\n         self.widget.default_timezone = lambda context: "Europe/Amsterdam"\n         tz = pytz.timezone("Europe/Amsterdam")\n \n-        converter = DatetimeWidgetConverter(self.field, self.widget)\n+        converter = getMultiAdapter((self.field, self.widget), IDataConverter)\n         self.assertEqual(\n             converter.toFieldValue("2013-11-13T10:20"),\n             tz.localize(datetime(2013, 11, 13, 10, 20)),\ndiff --git a/plone/app/z3cform/widgets/datetime.py b/plone/app/z3cform/widgets/datetime.py\nindex c30aad4a..b0f6f447 100644\n--- a/plone/app/z3cform/widgets/datetime.py\n+++ b/plone/app/z3cform/widgets/datetime.py\n@@ -1,14 +1,14 @@\n-from plone.app.z3cform.converters import DatetimeWidgetConverter\n-from plone.app.z3cform.converters import DateWidgetConverter\n from plone.app.z3cform.interfaces import IDatetimeWidget\n from plone.app.z3cform.interfaces import IDateWidget\n from plone.app.z3cform.interfaces import ITimeWidget\n from plone.app.z3cform.utils import dict_merge\n from plone.app.z3cform.widgets.base import HTMLTextInputWidget\n from plone.base import PloneMessageFactory as _\n+from z3c.form.interfaces import IDataConverter\n from z3c.form.interfaces import IFieldWidget\n from z3c.form.widget import FieldWidget\n from z3c.form.widget import Widget\n+from zope.component import getMultiAdapter\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import implementer_only\n@@ -27,7 +27,6 @@ def get_date_options(request):\n \n class DateTimeWidgetBase(HTMLTextInputWidget, Widget):\n     _input_type = ""\n-    _converter = None\n     _formater = ""\n     _formater_length = ""\n \n@@ -63,10 +62,12 @@ def render(self):\n         if not self.value:\n             return ""\n \n-        if not self._converter:\n+        converter = getMultiAdapter((self.field, self), IDataConverter)\n+\n+        if not converter:\n             return self.value\n \n-        field_value = self._converter(self.field, self).toFieldValue(self.value)\n+        field_value = converter.toFieldValue(self.value)\n         if field_value is self.field.missing_value:\n             return ""\n \n@@ -82,7 +83,6 @@ class DateWidget(DateTimeWidgetBase):\n     """Date widget for z3c.form."""\n \n     _input_type = "date"\n-    _converter = DateWidgetConverter\n     _formater = "date"\n     _formater_length = "short"\n \n@@ -100,7 +100,6 @@ class DatetimeWidget(DateTimeWidgetBase):\n     """Datetime widget for z3c.form."""\n \n     _input_type = "datetime-local"\n-    _converter = DatetimeWidgetConverter\n     _formater = "dateTime"\n     _formater_length = "short"\n \n'

