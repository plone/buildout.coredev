Repository: plone.restapi


Branch: refs/heads/7.x.x
Date: 2021-10-12T15:45:40+02:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/634186969290e44358b9fbac5abaa5a1a1a98539

7.x Backport - Add missing backend logout actions for the @logout endpoint (delete c… (#1242)

* Add missing backend logout actions for the @logout endpoint (delete c… (#1240)

* Add missing backend logout actions for the @logout endpoint (delete cookie, etc)

* Fix the use case, removing the 501 branch, refactor old test

* Fix Py2 syntax

Co-authored-by: Víctor Fernández de Alba &lt;sneridagh@gmail.com&gt;

Files changed:
A news/1239.bugfix
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/services/auth/logout.py
M src/plone/restapi/tests/test_auth.py

b'diff --git a/news/1239.bugfix b/news/1239.bugfix\nnew file mode 100644\nindex 000000000..727d34b71\n--- /dev/null\n+++ b/news/1239.bugfix\n@@ -0,0 +1,2 @@\n+- Add missing backend logout actions for the @logout endpoint (delete cookie, etc)\n+  [sneridagh]\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 420fabbd9..527550cac 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -172,7 +172,7 @@ def _path(self):\n \n     def delete_token(self, token):\n         payload = self._decode_token(token, verify=False)\n-        if "sub" not in payload:\n+        if not payload or "sub" not in payload:\n             return False\n         userid = payload["sub"]\n         if userid in self._tokens and token in self._tokens[userid]:\ndiff --git a/src/plone/restapi/services/auth/logout.py b/src/plone/restapi/services/auth/logout.py\nindex feacecb82..a98af4524 100644\n--- a/src/plone/restapi/services/auth/logout.py\n+++ b/src/plone/restapi/services/auth/logout.py\n@@ -10,6 +10,7 @@ class Logout(Service):\n     def reply(self):\n         plugin = None\n         acl_users = getToolByName(self, "acl_users")\n+        mt = getToolByName(self.context, "portal_membership")\n         plugins = acl_users._getOb("plugins")\n         authenticators = plugins.listPlugins(IAuthenticationPlugin)\n         for id_, authenticator in authenticators:\n@@ -27,13 +28,20 @@ def reply(self):\n             )\n \n         if not plugin.store_tokens:\n-            self.request.response.setStatus(501)\n-            return dict(\n-                error=dict(type="Logout failed", message="Token can\'t be invalidated")\n-            )\n+            # Just logout properly from Plone\n+            mt.logoutUser()\n+            self.request.response.setStatus(200)\n+            return super().reply()\n \n         creds = plugin.extractCredentials(self.request)\n-        if creds and "token" in creds and plugin.delete_token(creds["token"]):\n+        if (\n+            plugin.store_tokens\n+            and creds\n+            and "token" in creds\n+            and plugin.delete_token(creds["token"])\n+        ):\n+            # Logout also properly from Plone\n+            mt.logoutUser()\n             self.request.response.setStatus(200)\n             return super(Logout, self).reply()\n \ndiff --git a/src/plone/restapi/tests/test_auth.py b/src/plone/restapi/tests/test_auth.py\nindex 01e602e2d..d79a5da7d 100644\n--- a/src/plone/restapi/tests/test_auth.py\n+++ b/src/plone/restapi/tests/test_auth.py\n@@ -125,12 +125,9 @@ def test_logout_without_pas_plugin_fails(self):\n         res = service.reply()\n         self.assertIn("error", res)\n \n-    def test_logout_with_not_stored_token_fails(self):\n+    def test_logout_with_not_stored_token_just_logouts_user(self):\n         self.portal.acl_users.jwt_auth.store_tokens = False\n-        service = self.traverse()\n-        res = service.reply()\n-        self.assertEqual(501, self.request.response.getStatus())\n-        self.assertEqual("Token can\'t be invalidated", res["error"]["message"])\n+        self.assertEqual(200, self.request.response.getStatus())\n \n     def test_logout_with_without_credentials_fails(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n@@ -139,6 +136,14 @@ def test_logout_with_without_credentials_fails(self):\n         self.assertEqual(400, self.request.response.getStatus())\n         self.assertEqual("Unknown token", res["error"]["message"])\n \n+    def test_logout_with_invalid_token_fails(self):\n+        self.portal.acl_users.jwt_auth.store_tokens = True\n+        token = "my_invalid_token"\n+        self.request._auth = "Bearer {}".format(token)\n+        service = self.traverse()\n+        service.reply()\n+        self.assertEqual(400, self.request.response.getStatus())\n+\n     def test_logout_succeeds(self):\n         self.portal.acl_users.jwt_auth.store_tokens = True\n         token = self.portal.acl_users.jwt_auth.create_token("admin")\n'

