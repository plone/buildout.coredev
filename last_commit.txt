Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-11-24T08:35:24+01:00
Author: Wesley Barroso Lopes (wesleybl) <wesleybl@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/03e76e92068657b338552317b95c0e63867fa81c

Fixes schema name generated in Python 2 (#159)

As of plone.dexterity 2.9.10, _p_mtime is used in the schema name. To
transform the _p_mtime into a string, the str function was used.
However, in Python 2, the str function rounds floats when it's applied
to large floats:

Python 2:
&gt;&gt;&gt; str(1637689348.9999528)
'1637689349.0'

Python 3:
&gt;&gt;&gt; str(1637689348.9999528)
'1637689348.9999528'

This was causing the schema names in Python 2 to take an unexpected
format, causing errors.
So, we need to use the repr function, which doesn't round floats.

Files changed:
A news/159.bugfix
M plone/dexterity/fti.py
M plone/dexterity/tests/test_fti.py

b'diff --git a/news/159.bugfix b/news/159.bugfix\nnew file mode 100644\nindex 0000000..5725267\n--- /dev/null\n+++ b/news/159.bugfix\n@@ -0,0 +1 @@\n+Fixes schema name generated in Python 2. [wesleybl]\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex a6b3830..abea8c2 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -30,6 +30,26 @@\n import six\n \n \n+def get_suffix(fti):\n+    mtime = getattr(fti, "_p_mtime", None)\n+    # Python 2 rounds floats when we use the str function on them.\n+\n+    # Python 2:\n+    # >>> str(1637689348.9999528)\n+    # \'1637689349.0\'\n+\n+    # Python 3:\n+    # >>> str(1637689348.9999528)\n+    # \'1637689348.9999528\'\n+\n+    # This was causing the schema names in Python 2 to take an unexpected format,\n+    # causing errors.\n+    # So, we need to use the repr function, which doesn\'t round floats.\n+    if mtime:\n+        return repr(mtime)\n+    return ""\n+\n+\n @implementer(IDexterityFTIModificationDescription)\n class DexterityFTIModificationDescription(object):\n     def __init__(self, attribute, oldValue):\n@@ -258,8 +278,7 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-        mtime = getattr(self, "_p_mtime", None) or ""\n-        schemaName = portalTypeToSchemaName(self.getId(), suffix=str(mtime))\n+        schemaName = portalTypeToSchemaName(self.getId(), suffix=get_suffix(self))\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n@@ -554,8 +573,7 @@ def ftiModified(object, event):\n             "model_source" in mod or "model_file" in mod or "schema_policy" in mod\n         ):\n \n-            mtime = getattr(fti, "_p_mtime", None) or ""\n-            schemaName = portalTypeToSchemaName(portal_type, suffix=str(mtime))\n+            schemaName = portalTypeToSchemaName(portal_type, suffix=get_suffix(fti))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex da1e61f..e207ad8 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from plone.dexterity import utils\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.fti import DexterityFTIModificationDescription\n@@ -51,6 +50,12 @@ class ITestInterface(Interface):\n     pass\n \n \n+class DexterityMtimeFTI(DexterityFTI):\n+    # It was necessary to overwrite the _p_mtime attribute, as it is originally\n+    # read-only.\n+    _p_mtime = None\n+\n+\n class TestFTI(MockTestCase):\n     def test_factory_name_is_fti_id(self):\n         fti = DexterityFTI(u"testtype")\n@@ -968,3 +973,60 @@ def test_deleted_factory_not_unregistered_if_not_unique(self):\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n             provided=IDexterityFTI, name=u"testtype"\n         )\n+\n+    def test_loockup_schema_with_p_mtime_roundable(self):\n+        fti = DexterityMtimeFTI("testtype")\n+        fti.schema = None  # use dynamic schema\n+        # Set a roundable _p_mtime\n+        fti._p_mtime = 1637689348.9999528\n+\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n+        self.mock_utility(portal, ISiteRoot)\n+\n+        # Generated schema name must be this.\n+        schemaName = "site_5_1637689348_2_9999528_0_testtype"\n+        setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n+\n+        self.assertEqual(ITestSchema, fti.lookupSchema())\n+\n+        # cleanup\n+        delattr(plone.dexterity.schema.generated, schemaName)\n+\n+    def test_fti_modified_with_p_mtime_roundable(self):\n+        portal_type = "testtype"\n+        fti = DexterityMtimeFTI(portal_type)\n+        # Set a roundable _p_mtime\n+        fti._p_mtime = 1637689348.9999528\n+\n+        class INew(Interface):\n+            title = zope.schema.TextLine(title=u"title")\n+\n+        model_dummy = Model({u"": INew})\n+\n+        fti.lookupModel = Mock(return_value=model_dummy)\n+        self.create_dummy()\n+\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n+        self.mock_utility(site_dummy, ISiteRoot)\n+\n+        class IBlank1(Interface):\n+            pass\n+\n+        # Set source interface\n+        # Generated schema name must be this.\n+        schemaName = "siteid_5_1637689348_2_9999528_0_testtype"\n+        setattr(plone.dexterity.schema.generated, schemaName, IBlank1)\n+\n+        # Sync this with schema\n+        ftiModified(\n+            fti,\n+            ObjectModifiedEvent(\n+                fti, DexterityFTIModificationDescription("model_file", "")\n+            ),\n+        )\n+\n+        self.assertTrue("title" in IBlank1)\n+        self.assertTrue(IBlank1["title"].title == u"title")\n+\n+        # cleanup\n+        delattr(plone.dexterity.schema.generated, schemaName)\n'

