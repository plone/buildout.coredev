Repository: plone.memoize


Branch: refs/heads/master
Date: 2021-07-21T11:30:12-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/fab00e4ceab0f2a065374ccd54034474f8925e5c

Work in a FIPS enabled environment. closes gh-25

Files changed:
A news/25.feature
M plone/memoize/ram.py

b'diff --git a/news/25.feature b/news/25.feature\nnew file mode 100644\nindex 0000000..2e9f5e8\n--- /dev/null\n+++ b/news/25.feature\n@@ -0,0 +1 @@\n+Work in a FIPS enabled environment [frapell] (#25)\ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex bb0fff5..2eb5e19 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -2,6 +2,7 @@\n """A cache decorator that uses RAMCache by default.\n """\n \n+from functools import partial\n from plone.memoize import volatile\n from plone.memoize.interfaces import ICacheChooser\n from zope import component\n@@ -18,9 +19,15 @@\n     import cPickle as pickle  # Python 2\n \n try:\n-    from hashlib import md5\n+    from hashlib import md5_original\n except ImportError:\n-    from md5 import new as md5\n+    from md5 import new as md5_original\n+\n+try:\n+    hashed = md5_original(b\'test\')\n+    md5 = md5_original\n+except ValueError:\n+    md5 = partial(md5_original, usedforsecurity=False)\n \n \n global_cache = ram.RAMCache()\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2021-07-21T12:17:34-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/692b1d196b11a922926c5b4514d4c64ec54f654d

Typo

Files changed:
M plone/memoize/ram.py

b'diff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex 2eb5e19..d4e76bd 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -19,7 +19,7 @@\n     import cPickle as pickle  # Python 2\n \n try:\n-    from hashlib import md5_original\n+    from hashlib import md5 as md5_original\n except ImportError:\n     from md5 import new as md5_original\n \n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2021-07-21T15:35:06-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/5fd47fc215548eed91e1b973e86aa4c960300c69

Replace MD5 with SHA1

Files changed:
M news/25.feature
M plone/memoize/ram.py

b'diff --git a/news/25.feature b/news/25.feature\nindex 2e9f5e8..f724f96 100644\n--- a/news/25.feature\n+++ b/news/25.feature\n@@ -1 +1 @@\n-Work in a FIPS enabled environment [frapell] (#25)\n+Work in a FIPS enabled environment by using SHA1 instead of MD5 for computing the cache key [frapell] (#25)\ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex d4e76bd..80b71e0 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -2,7 +2,7 @@\n """A cache decorator that uses RAMCache by default.\n """\n \n-from functools import partial\n+from hashlib import sha1\n from plone.memoize import volatile\n from plone.memoize.interfaces import ICacheChooser\n from zope import component\n@@ -18,17 +18,6 @@\n except ImportError:\n     import cPickle as pickle  # Python 2\n \n-try:\n-    from hashlib import md5 as md5_original\n-except ImportError:\n-    from md5 import new as md5_original\n-\n-try:\n-    hashed = md5_original(b\'test\')\n-    md5 = md5_original\n-except ValueError:\n-    md5 = partial(md5_original, usedforsecurity=False)\n-\n \n global_cache = ram.RAMCache()\n global_cache.update(maxAge=86400)\n@@ -53,7 +42,7 @@ def __init__(self, client, globalkey=""):\n     def _make_key(self, source):\n         if issubclass(type(source), six.text_type):\n             source = source.encode("utf-8")\n-        return md5(source).hexdigest()\n+        return sha1(source).hexdigest()\n \n     def __getitem__(self, key):\n         cached_value = self.client.get(self.globalkey + self._make_key(key))\n@@ -75,7 +64,7 @@ def __init__(self, ramcache, globalkey=""):\n     def _make_key(self, source):\n         if issubclass(type(source), six.text_type):\n             source = source.encode("utf-8")\n-        return md5(source).digest()\n+        return sha1(source).digest()\n \n     def __getitem__(self, key):\n         value = self.ramcache.query(\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2021-07-23T19:20:00+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.memoize/commit/306af6cb32ba749f9ac48f51661026804dad0805

Merge pull request #26 from enfold/master

Work in a FIPS enabled environment.

Files changed:
A news/25.feature
M plone/memoize/ram.py

b'diff --git a/news/25.feature b/news/25.feature\nnew file mode 100644\nindex 0000000..f724f96\n--- /dev/null\n+++ b/news/25.feature\n@@ -0,0 +1 @@\n+Work in a FIPS enabled environment by using SHA1 instead of MD5 for computing the cache key [frapell] (#25)\ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex bb0fff5..80b71e0 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -2,6 +2,7 @@\n """A cache decorator that uses RAMCache by default.\n """\n \n+from hashlib import sha1\n from plone.memoize import volatile\n from plone.memoize.interfaces import ICacheChooser\n from zope import component\n@@ -17,11 +18,6 @@\n except ImportError:\n     import cPickle as pickle  # Python 2\n \n-try:\n-    from hashlib import md5\n-except ImportError:\n-    from md5 import new as md5\n-\n \n global_cache = ram.RAMCache()\n global_cache.update(maxAge=86400)\n@@ -46,7 +42,7 @@ def __init__(self, client, globalkey=""):\n     def _make_key(self, source):\n         if issubclass(type(source), six.text_type):\n             source = source.encode("utf-8")\n-        return md5(source).hexdigest()\n+        return sha1(source).hexdigest()\n \n     def __getitem__(self, key):\n         cached_value = self.client.get(self.globalkey + self._make_key(key))\n@@ -68,7 +64,7 @@ def __init__(self, ramcache, globalkey=""):\n     def _make_key(self, source):\n         if issubclass(type(source), six.text_type):\n             source = source.encode("utf-8")\n-        return md5(source).digest()\n+        return sha1(source).digest()\n \n     def __getitem__(self, key):\n         value = self.ramcache.query(\n'

