Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:51:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/2ffe8b839fed2b5f69076315db935e850fe705ef

Do not assume request URL is a string. It might be None.

This may happen on layer setup in tests if request was not initialized already properly.
Also check if there is a request at all.

Files changed:
M plone/app/caching/purge.py

b"diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex d81017e..c80ac52 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -282,7 +282,9 @@ def purgeOnModified(object, event):\n def purgeOnMovedOrRemoved(object, event):\n     request = getRequest()\n     confirmed_delete = (\n-        'delete_confirmation' in request.URL\n+        request\n+        and request.URL is not None\n+        and 'delete_confirmation' in request.URL\n         and request.REQUEST_METHOD == 'POST'\n         and 'form.submitted' in request.form\n     )\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:51:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/1fdec7add2d30eea2bd4d961811a5142c0849e42

Create 59.bugfix

Files changed:
A news/59.bugfix

b'diff --git a/news/59.bugfix b/news/59.bugfix\nnew file mode 100644\nindex 0000000..6ba4605\n--- /dev/null\n+++ b/news/59.bugfix\n@@ -0,0 +1 @@\n+Do not assume request or request.URL is a string. It might be None. [jensens, iham]\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-07T14:51:56+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/5f88570f6294a6617dbd5cf579094be323b0ab1b

request may not have URL attribute

getattr needs default

Files changed:
M plone/app/caching/purge.py

b"diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex c80ac52..968aa35 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -283,7 +283,7 @@ def purgeOnMovedOrRemoved(object, event):\n     request = getRequest()\n     confirmed_delete = (\n         request\n-        and request.URL is not None\n+        and getattr(request, 'URL', None)\n         and 'delete_confirmation' in request.URL\n         and request.REQUEST_METHOD == 'POST'\n         and 'form.submitted' in request.form\n"

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-09T11:59:26+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/079db5ce081cd8fb6d65a23a95221a7ad3a2c45c

fix tests,

black to increase readability

Files changed:
M plone/app/caching/purge.py
M plone/app/caching/tests/test_purge.py

b'diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex 968aa35..53fadad 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -282,13 +282,13 @@ def purgeOnModified(object, event):\n def purgeOnMovedOrRemoved(object, event):\n     request = getRequest()\n     confirmed_delete = (\n-        request\n+        request is not None\n         and getattr(request, \'URL\', None)\n         and \'delete_confirmation\' in request.URL\n         and request.REQUEST_METHOD == \'POST\'\n         and \'form.submitted\' in request.form\n     )\n-    if IObjectRemovedEvent.providedBy(event) and not confirmed_delete:\n+    if not confirmed_delete and IObjectRemovedEvent.providedBy(event):\n         # ignore extra delete events\n         return\n     # Don\'t purge when added\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex 4fdf391..e91080d 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -9,8 +9,7 @@\n from plone.app.caching.purge import purgeOnMovedOrRemoved\n from plone.app.caching.purge import ScalesPurgePaths\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n-from plone.app.contenttypes.behaviors.leadimage \\\n-    import ILeadImageBehavior\n+from plone.app.contenttypes.behaviors.leadimage import ILeadImageBehavior\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -56,13 +55,13 @@\n def getData(filename):\n     from os.path import dirname, join\n     from plone.app.caching import tests\n+\n     filename = join(dirname(tests.__file__), filename)\n-    data = open(filename, \'rb\').read()\n+    data = open(filename, "rb").read()\n     return data\n \n \n class Handler(object):\n-\n     def __init__(self):\n         self.invocations = []\n \n@@ -72,14 +71,13 @@ def handler(self, event):\n \n \n class FauxRequest(dict):\n-    REQUEST_METHOD = \'POST\'\n-    URL = \'http://nohost/test\'\n-    form = (\'form.submitted\',)\n+    REQUEST_METHOD = "POST"\n+    URL = "http://nohost/test"\n+    form = ("form.submitted",)\n \n \n @implementer(IContentish)\n class FauxNonContent(Explicit):\n-\n     def __init__(self, name=None):\n         self.__name__ = name\n         self.__parent__ = None  # may be overridden by acquisition\n@@ -90,24 +88,24 @@ def getId(self):\n     def virtual_url_path(self):\n         parent = aq_base(self.__parent__)\n         if parent is not None:\n-            return parent.virtual_url_path() + \'/\' + self.__name__\n+            return parent.virtual_url_path() + "/" + self.__name__\n         else:\n             return self.__name__\n \n     def getPhysicalPath(self):\n-        return (\'\', )\n+        return ("",)\n \n     def getParentNode(self):\n-        return FauxNonContent(\'folder\')\n+        return FauxNonContent("folder")\n \n \n @implementer(IBrowserDefault)\n class FauxContent(FauxNonContent):\n \n-    portal_type = \'testtype\'\n+    portal_type = "testtype"\n \n     def defaultView(self):\n-        return \'default-view\'\n+        return "default-view"\n \n \n @implementer(IDiscussionResponse)\n@@ -122,21 +120,18 @@ class TestPurgeRedispatch(unittest.TestCase):\n     def setUp(self):\n         self.handler = Handler()\n         provideHandler(self.handler.handler)\n-\n         provideHandler(objectEventNotify)\n         provideHandler(purgeOnModified)\n         provideHandler(purgeOnMovedOrRemoved)\n-\n         provideAdapter(persistentFieldAdapter)\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IPloneCacheSettings)\n-\n         ploneSettings = registry.forInterface(IPloneCacheSettings)\n-        ploneSettings.purgedContentTypes = (\'testtype\',)\n+        ploneSettings.purgedContentTypes = ("testtype",)\n \n     def test_not_purged(self):\n-        context = FauxNonContent(\'new\').__of__(FauxContent())\n+        context = FauxNonContent("new").__of__(FauxContent())\n \n         notify(ObjectModifiedEvent(context))\n         notify(ObjectAddedEvent(context))\n@@ -153,37 +148,43 @@ def test_modified(self):\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_added(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n+        context = FauxContent("new").__of__(FauxContent())\n \n-        notify(ObjectAddedEvent(context, context.__parent__, \'new\'))\n+        notify(ObjectAddedEvent(context, context.__parent__, "new"))\n \n         self.assertEqual(0, len(self.handler.invocations))\n \n     def test_moved(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n+        context = FauxContent("new").__of__(FauxContent())\n+        request = FauxRequest()\n+        setRequest(request)\n \n-        notify(ObjectMovedEvent(context, FauxContent(), \'old\',\n-                                context.__parent__, \'new\'))\n+        notify(\n+            ObjectMovedEvent(context, FauxContent(), "old", context.__parent__, "new")\n+        )\n \n         self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_renamed(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n+        context = FauxContent("new").__of__(FauxContent())\n \n-        notify(ObjectMovedEvent(context,\n-                                context.__parent__, \'old\',\n-                                context.__parent__, \'new\'))\n+        notify(\n+            ObjectMovedEvent(\n+                context, context.__parent__, "old", context.__parent__, "new"\n+            )\n+        )\n \n         self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_removed(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n-        request = getRequest()\n-        request.URL = \'http://nohost/delete_confirmation\'\n+        context = FauxContent("new").__of__(FauxContent())\n+        request = FauxRequest()\n+        request.URL = "http://nohost/delete_confirmation"\n+        setRequest(request)\n \n-        notify(ObjectRemovedEvent(context, context.__parent__, \'new\'))\n+        notify(ObjectRemovedEvent(context, context.__parent__, "new"))\n \n         self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n@@ -194,42 +195,42 @@ class TestContentPurgePaths(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def test_no_default_view(self):\n-        context = FauxNonContent(\'foo\')\n+        context = FauxNonContent("foo")\n         purger = ContentPurgePaths(context)\n \n-        self.assertEqual([\'/foo/\', \'/foo/view\'],\n-                         list(purger.getRelativePaths()))\n+        self.assertEqual(["/foo/", "/foo/view"], list(purger.getRelativePaths()))\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_default_view(self):\n-        context = FauxContent(\'foo\')\n+        context = FauxContent("foo")\n         purger = ContentPurgePaths(context)\n \n-        self.assertEqual([\'/foo/\', \'/foo/view\', \'/foo/default-view\'],\n-                         list(purger.getRelativePaths()))\n+        self.assertEqual(\n+            ["/foo/", "/foo/view", "/foo/default-view"], list(purger.getRelativePaths())\n+        )\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_parent_not_default_view(self):\n-        context = FauxContent(\'foo\').__of__(FauxContent(\'bar\'))\n+        context = FauxContent("foo").__of__(FauxContent("bar"))\n         purger = ContentPurgePaths(context)\n \n         self.assertEqual(\n-            [\'/bar/foo/\', \'/bar/foo/view\', \'/bar/foo/default-view\'],\n+            ["/bar/foo/", "/bar/foo/view", "/bar/foo/default-view"],\n             list(purger.getRelativePaths()),\n         )\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_parent_default_view(self):\n-        context = FauxContent(\'default-view\').__of__(FauxContent(\'bar\'))\n+        context = FauxContent("default-view").__of__(FauxContent("bar"))\n         purger = ContentPurgePaths(context)\n         self.assertEqual(\n             [\n-                \'/bar/default-view/\',\n-                \'/bar/default-view/view\',\n-                \'/bar/default-view/default-view\',\n-                \'/bar\',\n-                \'/bar/\',\n-                \'/bar/view\',\n+                "/bar/default-view/",\n+                "/bar/default-view/view",\n+                "/bar/default-view/default-view",\n+                "/bar",\n+                "/bar/",\n+                "/bar/view",\n             ],\n             list(purger.getRelativePaths()),\n         )\n@@ -241,25 +242,23 @@ class TestDiscussionItemPurgePaths(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def setUp(self):\n-\n         @implementer(IPurgePaths)\n         @adapter(FauxContent)\n         class FauxContentPurgePaths(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRelativePaths(self):\n-                return [\'/\' + self.context.virtual_url_path()]\n+                return ["/" + self.context.virtual_url_path()]\n \n             def getAbsolutePaths(self):\n-                return [\'/purgeme\']\n+                return ["/purgeme"]\n \n-        provideAdapter(FauxContentPurgePaths, name=\'testpurge\')\n+        provideAdapter(FauxContentPurgePaths, name="testpurge")\n \n     def test_no_tool(self):\n-        root = FauxContent(\'\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         request = FauxRequest()\n@@ -271,12 +270,11 @@ def test_no_tool(self):\n         self.assertEqual([], list(purge.getAbsolutePaths()))\n \n     def test_no_request(self):\n-        root = FauxContent(\'app\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("app")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         class FauxPloneTool(object):\n-\n             def getDiscussionThread(self, item):\n                 return [content, item]\n \n@@ -290,12 +288,11 @@ def getDiscussionThread(self, item):\n         self.assertEqual([], list(purge.getAbsolutePaths()))\n \n     def test_no_discussion_thread(self):\n-        root = FauxContent(\'app\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("app")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         class FauxPloneTool(object):\n-\n             def getDiscussionThread(self, item):\n                 return []\n \n@@ -310,12 +307,11 @@ def getDiscussionThread(self, item):\n         self.assertEqual([], list(purge.getAbsolutePaths()))\n \n     def test_paths_of_root(self):\n-        root = FauxContent(\'app\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("app")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         class FauxPloneTool(object):\n-\n             def getDiscussionThread(self, item):\n                 return [content, item]\n \n@@ -326,11 +322,11 @@ def getDiscussionThread(self, item):\n \n         purge = DiscussionItemPurgePaths(discussable)\n \n-        self.assertEqual([\'/app/foo\'], list(purge.getRelativePaths()))\n-        self.assertEqual([\'/purgeme\'], list(purge.getAbsolutePaths()))\n+        self.assertEqual(["/app/foo"], list(purge.getRelativePaths()))\n+        self.assertEqual(["/purgeme"], list(purge.getAbsolutePaths()))\n \n \n-@unittest.skipUnless(HAVE_AT, \'Only run with AT\')\n+@unittest.skipUnless(HAVE_AT, "Only run with AT")\n class TestObjectFieldPurgePaths(unittest.TestCase):\n \n     maxDiff = None\n@@ -340,11 +336,10 @@ def setUp(self):\n         provideAdapter(instanceSchemaFactory)\n \n     def test_no_file_image_fields(self):\n-\n         class ATNoFields(atapi.BaseContent):\n-            schema = atapi.Schema((atapi.StringField(\'foo\'),))\n+            schema = atapi.Schema((atapi.StringField("foo"),))\n \n-        context = ATNoFields(\'foo\')\n+        context = ATNoFields("foo")\n         purger = ObjectFieldPurgePaths(context)\n \n         self.assertEqual([], list(purger.getRelativePaths()))\n@@ -354,68 +349,73 @@ def test_file_image_fields(self):\n         from plone.app.blob.field import BlobField\n \n         class ATMultipleFields(atapi.BaseContent):\n-            schema = atapi.Schema((\n-                atapi.StringField(\'foo\'),\n-                atapi.FileField(\'file1\'),\n-                atapi.ImageField(\'image1\'),\n-                atapi.ImageField(\'image2\', sizes={\n-                                 \'mini\': (50, 50), \'normal\': (100, 100)}),\n-                BlobField(\'blob1\'),\n-            ))\n-\n-        root = FauxContent(\'\')\n-        context = ATMultipleFields(\'foo\').__of__(root)\n+            schema = atapi.Schema(\n+                (\n+                    atapi.StringField("foo"),\n+                    atapi.FileField("file1"),\n+                    atapi.ImageField("image1"),\n+                    atapi.ImageField(\n+                        "image2", sizes={"mini": (50, 50), "normal": (100, 100)}\n+                    ),\n+                    BlobField("blob1"),\n+                )\n+            )\n+\n+        root = FauxContent("")\n+        context = ATMultipleFields("foo").__of__(root)\n         purger = ObjectFieldPurgePaths(context)\n \n         self.assertEqual(\n             [\n-                \'/foo/download\',\n-                \'/foo/at_download\',\n-                \'/foo/at_download/file1\',\n-                \'/foo/file1\',\n-                \'/foo/at_download/image1\',\n-                \'/foo/image1\',\n-                \'/foo/image1_thumb\',\n-                \'/foo/at_download/image2\',\n-                \'/foo/image2\',\n-                \'/foo/image2_mini\',\n-                \'/foo/image2_normal\',\n-                \'/foo/at_download/blob1\',\n-                \'/foo/blob1\',\n+                "/foo/download",\n+                "/foo/at_download",\n+                "/foo/at_download/file1",\n+                "/foo/file1",\n+                "/foo/at_download/image1",\n+                "/foo/image1",\n+                "/foo/image1_thumb",\n+                "/foo/at_download/image2",\n+                "/foo/image2",\n+                "/foo/image2_mini",\n+                "/foo/image2_normal",\n+                "/foo/at_download/blob1",\n+                "/foo/blob1",\n             ],\n             list(purger.getRelativePaths()),\n         )\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_file_image_text_fields(self):\n-\n         class ATMultipleFields(atapi.BaseContent):\n-            schema = atapi.Schema((\n-                atapi.StringField(\'foo\'),\n-                atapi.FileField(\'file1\'),\n-                atapi.ImageField(\'image1\'),\n-                atapi.ImageField(\'image2\', sizes={\n-                                 \'mini\': (50, 50), \'normal\': (100, 100)}),\n-                atapi.TextField(\'text\'),\n-            ))\n-\n-        root = FauxContent(\'\')\n-        context = ATMultipleFields(\'foo\').__of__(root)\n+            schema = atapi.Schema(\n+                (\n+                    atapi.StringField("foo"),\n+                    atapi.FileField("file1"),\n+                    atapi.ImageField("image1"),\n+                    atapi.ImageField(\n+                        "image2", sizes={"mini": (50, 50), "normal": (100, 100)}\n+                    ),\n+                    atapi.TextField("text"),\n+                )\n+            )\n+\n+        root = FauxContent("")\n+        context = ATMultipleFields("foo").__of__(root)\n         purger = ObjectFieldPurgePaths(context)\n \n         self.assertEqual(\n             [\n-                \'/foo/download\',\n-                \'/foo/at_download\',\n-                \'/foo/at_download/file1\',\n-                \'/foo/file1\',\n-                \'/foo/at_download/image1\',\n-                \'/foo/image1\',\n-                \'/foo/image1_thumb\',\n-                \'/foo/at_download/image2\',\n-                \'/foo/image2\',\n-                \'/foo/image2_mini\',\n-                \'/foo/image2_normal\',\n+                "/foo/download",\n+                "/foo/at_download",\n+                "/foo/at_download/file1",\n+                "/foo/file1",\n+                "/foo/at_download/image1",\n+                "/foo/image1",\n+                "/foo/image1_thumb",\n+                "/foo/at_download/image2",\n+                "/foo/image2",\n+                "/foo/image2_mini",\n+                "/foo/image2_normal",\n             ],\n             list(purger.getRelativePaths()),\n         )\n@@ -428,28 +428,20 @@ class TestScalesPurgePaths(unittest.TestCase):\n \n     def setUp(self):\n \n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'media\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "media")\n         self.folder = self.portal.media\n-        self.folder.invokeFactory(\n-            \'Image\',\n-            \'image\',\n-            title=\'Test Image\')\n-        self.image_type = self.folder[\'image\']\n+        self.folder.invokeFactory("Image", "image", title="Test Image")\n+        self.image_type = self.folder["image"]\n         self.image_type.image = NamedImage(\n-            getData(\'data/plone-app-caching.jpg\'),\n-            \'image/jpg\',\n-            u\'plone-app-caching.jpg\')\n-        self.folder.invokeFactory(\n-            \'File\',\n-            \'file\',\n-            title=u\'T\xc3\xb6st File\')\n-        self.file = self.folder[\'file\']\n+            getData("data/plone-app-caching.jpg"), "image/jpg", u"plone-app-caching.jpg"\n+        )\n+        self.folder.invokeFactory("File", "file", title=u"T\xc3\xb6st File")\n+        self.file = self.folder["file"]\n         self.file.file = NamedFile(\n-            getData(\'data/testfile.csv\'),\n-            \'text/csv\',\n-            u\'data/t\xc3\xb6stfile.csv\')\n+            getData("data/testfile.csv"), "text/csv", u"data/t\xc3\xb6stfile.csv"\n+        )\n \n         # Create a page with a lead image.\n         # For the purposes of testing, we will use the Document type and\n@@ -460,7 +452,7 @@ def setUp(self):\n         class TestingAssignable(object):\n \n             enabled = [ILeadImageBehavior]\n-            name = \'plone.leadimage\'\n+            name = "plone.leadimage"\n \n             def __init__(self, context):\n                 self.context = context\n@@ -475,44 +467,40 @@ def enumerateBehaviors(self):\n \n         provideAdapter(TestingAssignable)\n \n-        self.folder.invokeFactory(\n-            \'Document\',\n-            \'page\',\n-            title=\'Test Page\')\n-        self.page = self.folder[\'page\']\n+        self.folder.invokeFactory("Document", "page", title="Test Page")\n+        self.page = self.folder["page"]\n \n         leadimage_adapter = ILeadImageBehavior(self.page)\n         leadimage_adapter.image = NamedImage(\n-            getData(\'data/plone-app-caching.jpg\'),\n-            \'image/jpg\',\n-            u\'plone-app-caching.jpg\')\n+            getData("data/plone-app-caching.jpg"), "image/jpg", u"plone-app-caching.jpg"\n+        )\n \n         setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES)\n \n     def test_scale_purge_paths(self):\n-        prefix = \'/\'.join(self.image_type.getPhysicalPath())\n+        prefix = "/".join(self.image_type.getPhysicalPath())\n         purge = ScalesPurgePaths(self.image_type)\n         paths = purge.getRelativePaths()\n         scales = purge.getScales()\n-        scalepaths = [prefix + \'/@@images/image/\' + str(i) for i in scales]\n+        scalepaths = [prefix + "/@@images/image/" + str(i) for i in scales]\n         [self.assertIn(j, paths) for j in scalepaths]\n         # lead image scales (example for an image field of a behavior)\n-        prefix = \'/\'.join(self.page.getPhysicalPath())\n+        prefix = "/".join(self.page.getPhysicalPath())\n         purge = ScalesPurgePaths(self.page)\n         paths = purge.getRelativePaths()\n         scales = purge.getScales()\n-        scalepaths = [prefix + \'/@@images/image/\' + str(i) for i in scales]\n+        scalepaths = [prefix + "/@@images/image/" + str(i) for i in scales]\n         [self.assertIn(j, paths) for j in scalepaths]\n \n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n         expected = [\n-            u\'/plone/media/file/view/++widget++form.widgets.file/@@download/data/t\xc3\xb6stfile.csv\',  # noqa: E501\n-            u\'/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv\',\n+            u"/plone/media/file/view/++widget++form.widgets.file/@@download/data/t\xc3\xb6stfile.csv",  # noqa: E501\n+            u"/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv",\n         ]\n         if six.PY2:\n             # the getRelativePaths method returns bytes on Python 2\n-            expected = [x.encode(\'utf8\') for x in expected]\n+            expected = [x.encode("utf8") for x in expected]\n         self.assertListEqual(\n             list(purge.getRelativePaths()),\n             expected,\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2020-10-09T13:16:16+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/9057ef6c32480ed3c6fcbcaddf9c34f697fb82b0

Merge pull request #59 from plone/fix-testsetup-content-creation

Do not assume request URL is a string. It might be None.

Files changed:
A news/59.bugfix
M plone/app/caching/purge.py
M plone/app/caching/tests/test_purge.py

b'diff --git a/news/59.bugfix b/news/59.bugfix\nnew file mode 100644\nindex 0000000..6ba4605\n--- /dev/null\n+++ b/news/59.bugfix\n@@ -0,0 +1 @@\n+Do not assume request or request.URL is a string. It might be None. [jensens, iham]\ndiff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py\nindex d81017e..53fadad 100644\n--- a/plone/app/caching/purge.py\n+++ b/plone/app/caching/purge.py\n@@ -282,11 +282,13 @@ def purgeOnModified(object, event):\n def purgeOnMovedOrRemoved(object, event):\n     request = getRequest()\n     confirmed_delete = (\n-        \'delete_confirmation\' in request.URL\n+        request is not None\n+        and getattr(request, \'URL\', None)\n+        and \'delete_confirmation\' in request.URL\n         and request.REQUEST_METHOD == \'POST\'\n         and \'form.submitted\' in request.form\n     )\n-    if IObjectRemovedEvent.providedBy(event) and not confirmed_delete:\n+    if not confirmed_delete and IObjectRemovedEvent.providedBy(event):\n         # ignore extra delete events\n         return\n     # Don\'t purge when added\ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex 4fdf391..e91080d 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -9,8 +9,7 @@\n from plone.app.caching.purge import purgeOnMovedOrRemoved\n from plone.app.caching.purge import ScalesPurgePaths\n from plone.app.caching.testing import PLONE_APP_CACHING_FUNCTIONAL_TESTING\n-from plone.app.contenttypes.behaviors.leadimage \\\n-    import ILeadImageBehavior\n+from plone.app.contenttypes.behaviors.leadimage import ILeadImageBehavior\n from plone.app.contenttypes.interfaces import IDocument\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n@@ -56,13 +55,13 @@\n def getData(filename):\n     from os.path import dirname, join\n     from plone.app.caching import tests\n+\n     filename = join(dirname(tests.__file__), filename)\n-    data = open(filename, \'rb\').read()\n+    data = open(filename, "rb").read()\n     return data\n \n \n class Handler(object):\n-\n     def __init__(self):\n         self.invocations = []\n \n@@ -72,14 +71,13 @@ def handler(self, event):\n \n \n class FauxRequest(dict):\n-    REQUEST_METHOD = \'POST\'\n-    URL = \'http://nohost/test\'\n-    form = (\'form.submitted\',)\n+    REQUEST_METHOD = "POST"\n+    URL = "http://nohost/test"\n+    form = ("form.submitted",)\n \n \n @implementer(IContentish)\n class FauxNonContent(Explicit):\n-\n     def __init__(self, name=None):\n         self.__name__ = name\n         self.__parent__ = None  # may be overridden by acquisition\n@@ -90,24 +88,24 @@ def getId(self):\n     def virtual_url_path(self):\n         parent = aq_base(self.__parent__)\n         if parent is not None:\n-            return parent.virtual_url_path() + \'/\' + self.__name__\n+            return parent.virtual_url_path() + "/" + self.__name__\n         else:\n             return self.__name__\n \n     def getPhysicalPath(self):\n-        return (\'\', )\n+        return ("",)\n \n     def getParentNode(self):\n-        return FauxNonContent(\'folder\')\n+        return FauxNonContent("folder")\n \n \n @implementer(IBrowserDefault)\n class FauxContent(FauxNonContent):\n \n-    portal_type = \'testtype\'\n+    portal_type = "testtype"\n \n     def defaultView(self):\n-        return \'default-view\'\n+        return "default-view"\n \n \n @implementer(IDiscussionResponse)\n@@ -122,21 +120,18 @@ class TestPurgeRedispatch(unittest.TestCase):\n     def setUp(self):\n         self.handler = Handler()\n         provideHandler(self.handler.handler)\n-\n         provideHandler(objectEventNotify)\n         provideHandler(purgeOnModified)\n         provideHandler(purgeOnMovedOrRemoved)\n-\n         provideAdapter(persistentFieldAdapter)\n         provideUtility(Registry(), IRegistry)\n         registry = getUtility(IRegistry)\n         registry.registerInterface(IPloneCacheSettings)\n-\n         ploneSettings = registry.forInterface(IPloneCacheSettings)\n-        ploneSettings.purgedContentTypes = (\'testtype\',)\n+        ploneSettings.purgedContentTypes = ("testtype",)\n \n     def test_not_purged(self):\n-        context = FauxNonContent(\'new\').__of__(FauxContent())\n+        context = FauxNonContent("new").__of__(FauxContent())\n \n         notify(ObjectModifiedEvent(context))\n         notify(ObjectAddedEvent(context))\n@@ -153,37 +148,43 @@ def test_modified(self):\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_added(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n+        context = FauxContent("new").__of__(FauxContent())\n \n-        notify(ObjectAddedEvent(context, context.__parent__, \'new\'))\n+        notify(ObjectAddedEvent(context, context.__parent__, "new"))\n \n         self.assertEqual(0, len(self.handler.invocations))\n \n     def test_moved(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n+        context = FauxContent("new").__of__(FauxContent())\n+        request = FauxRequest()\n+        setRequest(request)\n \n-        notify(ObjectMovedEvent(context, FauxContent(), \'old\',\n-                                context.__parent__, \'new\'))\n+        notify(\n+            ObjectMovedEvent(context, FauxContent(), "old", context.__parent__, "new")\n+        )\n \n         self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_renamed(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n+        context = FauxContent("new").__of__(FauxContent())\n \n-        notify(ObjectMovedEvent(context,\n-                                context.__parent__, \'old\',\n-                                context.__parent__, \'new\'))\n+        notify(\n+            ObjectMovedEvent(\n+                context, context.__parent__, "old", context.__parent__, "new"\n+            )\n+        )\n \n         self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n \n     def test_removed(self):\n-        context = FauxContent(\'new\').__of__(FauxContent())\n-        request = getRequest()\n-        request.URL = \'http://nohost/delete_confirmation\'\n+        context = FauxContent("new").__of__(FauxContent())\n+        request = FauxRequest()\n+        request.URL = "http://nohost/delete_confirmation"\n+        setRequest(request)\n \n-        notify(ObjectRemovedEvent(context, context.__parent__, \'new\'))\n+        notify(ObjectRemovedEvent(context, context.__parent__, "new"))\n \n         self.assertEqual(2, len(self.handler.invocations))\n         self.assertEqual(context, self.handler.invocations[0].object)\n@@ -194,42 +195,42 @@ class TestContentPurgePaths(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def test_no_default_view(self):\n-        context = FauxNonContent(\'foo\')\n+        context = FauxNonContent("foo")\n         purger = ContentPurgePaths(context)\n \n-        self.assertEqual([\'/foo/\', \'/foo/view\'],\n-                         list(purger.getRelativePaths()))\n+        self.assertEqual(["/foo/", "/foo/view"], list(purger.getRelativePaths()))\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_default_view(self):\n-        context = FauxContent(\'foo\')\n+        context = FauxContent("foo")\n         purger = ContentPurgePaths(context)\n \n-        self.assertEqual([\'/foo/\', \'/foo/view\', \'/foo/default-view\'],\n-                         list(purger.getRelativePaths()))\n+        self.assertEqual(\n+            ["/foo/", "/foo/view", "/foo/default-view"], list(purger.getRelativePaths())\n+        )\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_parent_not_default_view(self):\n-        context = FauxContent(\'foo\').__of__(FauxContent(\'bar\'))\n+        context = FauxContent("foo").__of__(FauxContent("bar"))\n         purger = ContentPurgePaths(context)\n \n         self.assertEqual(\n-            [\'/bar/foo/\', \'/bar/foo/view\', \'/bar/foo/default-view\'],\n+            ["/bar/foo/", "/bar/foo/view", "/bar/foo/default-view"],\n             list(purger.getRelativePaths()),\n         )\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_parent_default_view(self):\n-        context = FauxContent(\'default-view\').__of__(FauxContent(\'bar\'))\n+        context = FauxContent("default-view").__of__(FauxContent("bar"))\n         purger = ContentPurgePaths(context)\n         self.assertEqual(\n             [\n-                \'/bar/default-view/\',\n-                \'/bar/default-view/view\',\n-                \'/bar/default-view/default-view\',\n-                \'/bar\',\n-                \'/bar/\',\n-                \'/bar/view\',\n+                "/bar/default-view/",\n+                "/bar/default-view/view",\n+                "/bar/default-view/default-view",\n+                "/bar",\n+                "/bar/",\n+                "/bar/view",\n             ],\n             list(purger.getRelativePaths()),\n         )\n@@ -241,25 +242,23 @@ class TestDiscussionItemPurgePaths(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def setUp(self):\n-\n         @implementer(IPurgePaths)\n         @adapter(FauxContent)\n         class FauxContentPurgePaths(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n             def getRelativePaths(self):\n-                return [\'/\' + self.context.virtual_url_path()]\n+                return ["/" + self.context.virtual_url_path()]\n \n             def getAbsolutePaths(self):\n-                return [\'/purgeme\']\n+                return ["/purgeme"]\n \n-        provideAdapter(FauxContentPurgePaths, name=\'testpurge\')\n+        provideAdapter(FauxContentPurgePaths, name="testpurge")\n \n     def test_no_tool(self):\n-        root = FauxContent(\'\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         request = FauxRequest()\n@@ -271,12 +270,11 @@ def test_no_tool(self):\n         self.assertEqual([], list(purge.getAbsolutePaths()))\n \n     def test_no_request(self):\n-        root = FauxContent(\'app\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("app")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         class FauxPloneTool(object):\n-\n             def getDiscussionThread(self, item):\n                 return [content, item]\n \n@@ -290,12 +288,11 @@ def getDiscussionThread(self, item):\n         self.assertEqual([], list(purge.getAbsolutePaths()))\n \n     def test_no_discussion_thread(self):\n-        root = FauxContent(\'app\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("app")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         class FauxPloneTool(object):\n-\n             def getDiscussionThread(self, item):\n                 return []\n \n@@ -310,12 +307,11 @@ def getDiscussionThread(self, item):\n         self.assertEqual([], list(purge.getAbsolutePaths()))\n \n     def test_paths_of_root(self):\n-        root = FauxContent(\'app\')\n-        content = FauxContent(\'foo\').__of__(root)\n+        root = FauxContent("app")\n+        content = FauxContent("foo").__of__(root)\n         discussable = FauxDiscussable().__of__(content)\n \n         class FauxPloneTool(object):\n-\n             def getDiscussionThread(self, item):\n                 return [content, item]\n \n@@ -326,11 +322,11 @@ def getDiscussionThread(self, item):\n \n         purge = DiscussionItemPurgePaths(discussable)\n \n-        self.assertEqual([\'/app/foo\'], list(purge.getRelativePaths()))\n-        self.assertEqual([\'/purgeme\'], list(purge.getAbsolutePaths()))\n+        self.assertEqual(["/app/foo"], list(purge.getRelativePaths()))\n+        self.assertEqual(["/purgeme"], list(purge.getAbsolutePaths()))\n \n \n-@unittest.skipUnless(HAVE_AT, \'Only run with AT\')\n+@unittest.skipUnless(HAVE_AT, "Only run with AT")\n class TestObjectFieldPurgePaths(unittest.TestCase):\n \n     maxDiff = None\n@@ -340,11 +336,10 @@ def setUp(self):\n         provideAdapter(instanceSchemaFactory)\n \n     def test_no_file_image_fields(self):\n-\n         class ATNoFields(atapi.BaseContent):\n-            schema = atapi.Schema((atapi.StringField(\'foo\'),))\n+            schema = atapi.Schema((atapi.StringField("foo"),))\n \n-        context = ATNoFields(\'foo\')\n+        context = ATNoFields("foo")\n         purger = ObjectFieldPurgePaths(context)\n \n         self.assertEqual([], list(purger.getRelativePaths()))\n@@ -354,68 +349,73 @@ def test_file_image_fields(self):\n         from plone.app.blob.field import BlobField\n \n         class ATMultipleFields(atapi.BaseContent):\n-            schema = atapi.Schema((\n-                atapi.StringField(\'foo\'),\n-                atapi.FileField(\'file1\'),\n-                atapi.ImageField(\'image1\'),\n-                atapi.ImageField(\'image2\', sizes={\n-                                 \'mini\': (50, 50), \'normal\': (100, 100)}),\n-                BlobField(\'blob1\'),\n-            ))\n-\n-        root = FauxContent(\'\')\n-        context = ATMultipleFields(\'foo\').__of__(root)\n+            schema = atapi.Schema(\n+                (\n+                    atapi.StringField("foo"),\n+                    atapi.FileField("file1"),\n+                    atapi.ImageField("image1"),\n+                    atapi.ImageField(\n+                        "image2", sizes={"mini": (50, 50), "normal": (100, 100)}\n+                    ),\n+                    BlobField("blob1"),\n+                )\n+            )\n+\n+        root = FauxContent("")\n+        context = ATMultipleFields("foo").__of__(root)\n         purger = ObjectFieldPurgePaths(context)\n \n         self.assertEqual(\n             [\n-                \'/foo/download\',\n-                \'/foo/at_download\',\n-                \'/foo/at_download/file1\',\n-                \'/foo/file1\',\n-                \'/foo/at_download/image1\',\n-                \'/foo/image1\',\n-                \'/foo/image1_thumb\',\n-                \'/foo/at_download/image2\',\n-                \'/foo/image2\',\n-                \'/foo/image2_mini\',\n-                \'/foo/image2_normal\',\n-                \'/foo/at_download/blob1\',\n-                \'/foo/blob1\',\n+                "/foo/download",\n+                "/foo/at_download",\n+                "/foo/at_download/file1",\n+                "/foo/file1",\n+                "/foo/at_download/image1",\n+                "/foo/image1",\n+                "/foo/image1_thumb",\n+                "/foo/at_download/image2",\n+                "/foo/image2",\n+                "/foo/image2_mini",\n+                "/foo/image2_normal",\n+                "/foo/at_download/blob1",\n+                "/foo/blob1",\n             ],\n             list(purger.getRelativePaths()),\n         )\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_file_image_text_fields(self):\n-\n         class ATMultipleFields(atapi.BaseContent):\n-            schema = atapi.Schema((\n-                atapi.StringField(\'foo\'),\n-                atapi.FileField(\'file1\'),\n-                atapi.ImageField(\'image1\'),\n-                atapi.ImageField(\'image2\', sizes={\n-                                 \'mini\': (50, 50), \'normal\': (100, 100)}),\n-                atapi.TextField(\'text\'),\n-            ))\n-\n-        root = FauxContent(\'\')\n-        context = ATMultipleFields(\'foo\').__of__(root)\n+            schema = atapi.Schema(\n+                (\n+                    atapi.StringField("foo"),\n+                    atapi.FileField("file1"),\n+                    atapi.ImageField("image1"),\n+                    atapi.ImageField(\n+                        "image2", sizes={"mini": (50, 50), "normal": (100, 100)}\n+                    ),\n+                    atapi.TextField("text"),\n+                )\n+            )\n+\n+        root = FauxContent("")\n+        context = ATMultipleFields("foo").__of__(root)\n         purger = ObjectFieldPurgePaths(context)\n \n         self.assertEqual(\n             [\n-                \'/foo/download\',\n-                \'/foo/at_download\',\n-                \'/foo/at_download/file1\',\n-                \'/foo/file1\',\n-                \'/foo/at_download/image1\',\n-                \'/foo/image1\',\n-                \'/foo/image1_thumb\',\n-                \'/foo/at_download/image2\',\n-                \'/foo/image2\',\n-                \'/foo/image2_mini\',\n-                \'/foo/image2_normal\',\n+                "/foo/download",\n+                "/foo/at_download",\n+                "/foo/at_download/file1",\n+                "/foo/file1",\n+                "/foo/at_download/image1",\n+                "/foo/image1",\n+                "/foo/image1_thumb",\n+                "/foo/at_download/image2",\n+                "/foo/image2",\n+                "/foo/image2_mini",\n+                "/foo/image2_normal",\n             ],\n             list(purger.getRelativePaths()),\n         )\n@@ -428,28 +428,20 @@ class TestScalesPurgePaths(unittest.TestCase):\n \n     def setUp(self):\n \n-        self.portal = self.layer[\'portal\']\n-        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n-        self.portal.invokeFactory(\'Folder\', \'media\')\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "media")\n         self.folder = self.portal.media\n-        self.folder.invokeFactory(\n-            \'Image\',\n-            \'image\',\n-            title=\'Test Image\')\n-        self.image_type = self.folder[\'image\']\n+        self.folder.invokeFactory("Image", "image", title="Test Image")\n+        self.image_type = self.folder["image"]\n         self.image_type.image = NamedImage(\n-            getData(\'data/plone-app-caching.jpg\'),\n-            \'image/jpg\',\n-            u\'plone-app-caching.jpg\')\n-        self.folder.invokeFactory(\n-            \'File\',\n-            \'file\',\n-            title=u\'T\xc3\xb6st File\')\n-        self.file = self.folder[\'file\']\n+            getData("data/plone-app-caching.jpg"), "image/jpg", u"plone-app-caching.jpg"\n+        )\n+        self.folder.invokeFactory("File", "file", title=u"T\xc3\xb6st File")\n+        self.file = self.folder["file"]\n         self.file.file = NamedFile(\n-            getData(\'data/testfile.csv\'),\n-            \'text/csv\',\n-            u\'data/t\xc3\xb6stfile.csv\')\n+            getData("data/testfile.csv"), "text/csv", u"data/t\xc3\xb6stfile.csv"\n+        )\n \n         # Create a page with a lead image.\n         # For the purposes of testing, we will use the Document type and\n@@ -460,7 +452,7 @@ def setUp(self):\n         class TestingAssignable(object):\n \n             enabled = [ILeadImageBehavior]\n-            name = \'plone.leadimage\'\n+            name = "plone.leadimage"\n \n             def __init__(self, context):\n                 self.context = context\n@@ -475,44 +467,40 @@ def enumerateBehaviors(self):\n \n         provideAdapter(TestingAssignable)\n \n-        self.folder.invokeFactory(\n-            \'Document\',\n-            \'page\',\n-            title=\'Test Page\')\n-        self.page = self.folder[\'page\']\n+        self.folder.invokeFactory("Document", "page", title="Test Page")\n+        self.page = self.folder["page"]\n \n         leadimage_adapter = ILeadImageBehavior(self.page)\n         leadimage_adapter.image = NamedImage(\n-            getData(\'data/plone-app-caching.jpg\'),\n-            \'image/jpg\',\n-            u\'plone-app-caching.jpg\')\n+            getData("data/plone-app-caching.jpg"), "image/jpg", u"plone-app-caching.jpg"\n+        )\n \n         setRoles(self.portal, TEST_USER_ID, TEST_USER_ROLES)\n \n     def test_scale_purge_paths(self):\n-        prefix = \'/\'.join(self.image_type.getPhysicalPath())\n+        prefix = "/".join(self.image_type.getPhysicalPath())\n         purge = ScalesPurgePaths(self.image_type)\n         paths = purge.getRelativePaths()\n         scales = purge.getScales()\n-        scalepaths = [prefix + \'/@@images/image/\' + str(i) for i in scales]\n+        scalepaths = [prefix + "/@@images/image/" + str(i) for i in scales]\n         [self.assertIn(j, paths) for j in scalepaths]\n         # lead image scales (example for an image field of a behavior)\n-        prefix = \'/\'.join(self.page.getPhysicalPath())\n+        prefix = "/".join(self.page.getPhysicalPath())\n         purge = ScalesPurgePaths(self.page)\n         paths = purge.getRelativePaths()\n         scales = purge.getScales()\n-        scalepaths = [prefix + \'/@@images/image/\' + str(i) for i in scales]\n+        scalepaths = [prefix + "/@@images/image/" + str(i) for i in scales]\n         [self.assertIn(j, paths) for j in scalepaths]\n \n     def test_scale_purge_paths_unicode(self):\n         purge = ScalesPurgePaths(self.file)\n         expected = [\n-            u\'/plone/media/file/view/++widget++form.widgets.file/@@download/data/t\xc3\xb6stfile.csv\',  # noqa: E501\n-            u\'/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv\',\n+            u"/plone/media/file/view/++widget++form.widgets.file/@@download/data/t\xc3\xb6stfile.csv",  # noqa: E501\n+            u"/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv",\n         ]\n         if six.PY2:\n             # the getRelativePaths method returns bytes on Python 2\n-            expected = [x.encode(\'utf8\') for x in expected]\n+            expected = [x.encode("utf8") for x in expected]\n         self.assertListEqual(\n             list(purge.getRelativePaths()),\n             expected,\n'

