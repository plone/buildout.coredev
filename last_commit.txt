Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-20T22:22:36+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.namedfile/commit/c1bed2fea3eb4290145ff772a676eba0be841e72

Change to use field value _p_mtime instead of context object _p_mtime as image scale invalidation timestamp

Files changed:
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 45c53b6..97d7c41 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -31,6 +31,7 @@\n from zope.traversing.interfaces import ITraversable\n from zope.traversing.interfaces import TraversalError\n \n+import functools\n import logging\n import six\n \n@@ -390,12 +391,17 @@ def getRetinaScales(self):\n     def getHighPixelDensityScales(self):\n         return getHighPixelDensityScales()\n \n-    def modified(self):\n+    def modified(self, fieldname=None):\n         """Provide a callable to return the modification time of content\n         items, so stored image scales can be invalidated.\n         """\n         context = aq_base(self.context)\n-        date = DateTime(context._p_mtime)\n+        if fieldname is not None:\n+            field = getattr(context, fieldname, None)\n+            field_p_mtime = getattr(field, "_p_mtime", None)\n+            date = DateTime(field_p_mtime or context._p_mtime)\n+        else:\n+            date = DateTime(context._p_mtime)\n         return date.millis()\n \n     def scale(\n@@ -425,7 +431,10 @@ def scale(\n             width, height = available[scale]\n         if IDisableCSRFProtection and self.request is not None:\n             alsoProvides(self.request, IDisableCSRFProtection)\n-        storage = AnnotationStorage(self.context, self.modified)\n+        storage = AnnotationStorage(\n+            self.context,\n+            functools.partial(self.modified, fieldname)\n+        )\n         info = storage.scale(\n             fieldname=fieldname,\n             height=height,\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 8e68794..c044d96 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -50,6 +50,10 @@ def Title(self):\n         return self.title\n \n \n+class MockNamedImage(NamedImage):\n+    _p_mtime = DateTime().millis()\n+\n+\n @implementer(IScaledImageQuality)\n class DummyQualitySupplier(object):\n     """ fake utility for plone.app.imaging\'s scaling quality """\n@@ -65,7 +69,7 @@ class ImageScalingTests(unittest.TestCase):\n     def setUp(self):\n         data = getFile(\'image.png\')\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.png\')\n+        item.image = MockNamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n         self.item = self.layer[\'app\'].item\n         self.scaling = ImageScaling(self.item, None)\n@@ -223,15 +227,30 @@ def testGetUnknownScale(self):\n         self.assertEqual(foo, None)\n \n     def testScaleInvalidation(self):\n-        # first get the scale of the original image\n-        self.scaling.available_sizes = {\'foo\': (23, 23)}\n-        foo1 = self.scaling.scale(\'image\', scale=\'foo\')\n-        wait_to_ensure_modified()\n-        # now upload a new one and make sure the scale has changed\n-        data = getFile(\'image.jpg\')\n-        self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n-        foo2 = self.scaling.scale(\'image\', scale=\'foo\')\n-        self.assertFalse(foo1.data == foo2.data, \'scale not updated?\')\n+        dt = self.item.modified()\n+\n+        # Test that different parameters give different scale\n+        self.item.modified = lambda: dt\n+        self.item.image._p_mtime = dt.millis()\n+        scale1a = self.scaling.scale(\'image\', width=100, height=80)\n+        scale2a = self.scaling.scale(\'image\', width=80, height=60)\n+        self.assertNotEqual(scale1a.data, scale2a.data)\n+\n+        # Test that bare object modification does not invalidate scales\n+        self.item.modified = lambda: dt + 1\n+        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n+        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        self.assertNotEqual(scale1b.data, scale2b.data)\n+        self.assertEqual(scale1a.data, scale1b.data)\n+        self.assertEqual(scale2a.data, scale2b.data)\n+\n+        # Test that field modification invalidates scales\n+        self.item.image._p_mtime = (dt + 1).millis()\n+        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n+        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        self.assertNotEqual(scale1b.data, scale2b.data)\n+        self.assertNotEqual(scale1a.data, scale1b.data, \'scale not updated?\')\n+        self.assertNotEqual(scale2a.data, scale2b.data, \'scale not updated?\')\n \n     def testCustomSizeChange(self):\n         # set custom image sizes & view a scale\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-20T22:27:33+03:00
Author: Asko Soukka (datakurre) <asko.soukka@iki.fi>
Commit: https://github.com/plone/plone.namedfile/commit/43f4bf9fdd4a3f8b3ab76b6cbfde190427a09c18

Add changelog entry

Files changed:
A news/91.feature

b'diff --git a/news/91.feature b/news/91.feature\nnew file mode 100644\nindex 0000000..1e7735b\n--- /dev/null\n+++ b/news/91.feature\n@@ -0,0 +1 @@\n+- Change to use field value _p_mtime instead of context object _p_mtime as image scale invalidation timestamp to fix issue where context object (e.g. a document with lead image) modification invalidated all its image field scales even the images itself were not modified. [datakurre]\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2020-04-21T15:43:58+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.namedfile/commit/0aefc45e2303f511be8f175ff27ec75a7fcfa4e8

Merge pull request #91 from plone/datakurre-invalidate-by-field

Change to use field value _p_mtime instead of context object _p_mtimeâ€¦

Files changed:
A news/91.feature
M plone/namedfile/scaling.py
M plone/namedfile/tests/test_scaling.py

b'diff --git a/news/91.feature b/news/91.feature\nnew file mode 100644\nindex 0000000..1e7735b\n--- /dev/null\n+++ b/news/91.feature\n@@ -0,0 +1 @@\n+- Change to use field value _p_mtime instead of context object _p_mtime as image scale invalidation timestamp to fix issue where context object (e.g. a document with lead image) modification invalidated all its image field scales even the images itself were not modified. [datakurre]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 45c53b6..97d7c41 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -31,6 +31,7 @@\n from zope.traversing.interfaces import ITraversable\n from zope.traversing.interfaces import TraversalError\n \n+import functools\n import logging\n import six\n \n@@ -390,12 +391,17 @@ def getRetinaScales(self):\n     def getHighPixelDensityScales(self):\n         return getHighPixelDensityScales()\n \n-    def modified(self):\n+    def modified(self, fieldname=None):\n         """Provide a callable to return the modification time of content\n         items, so stored image scales can be invalidated.\n         """\n         context = aq_base(self.context)\n-        date = DateTime(context._p_mtime)\n+        if fieldname is not None:\n+            field = getattr(context, fieldname, None)\n+            field_p_mtime = getattr(field, "_p_mtime", None)\n+            date = DateTime(field_p_mtime or context._p_mtime)\n+        else:\n+            date = DateTime(context._p_mtime)\n         return date.millis()\n \n     def scale(\n@@ -425,7 +431,10 @@ def scale(\n             width, height = available[scale]\n         if IDisableCSRFProtection and self.request is not None:\n             alsoProvides(self.request, IDisableCSRFProtection)\n-        storage = AnnotationStorage(self.context, self.modified)\n+        storage = AnnotationStorage(\n+            self.context,\n+            functools.partial(self.modified, fieldname)\n+        )\n         info = storage.scale(\n             fieldname=fieldname,\n             height=height,\ndiff --git a/plone/namedfile/tests/test_scaling.py b/plone/namedfile/tests/test_scaling.py\nindex 8e68794..c044d96 100644\n--- a/plone/namedfile/tests/test_scaling.py\n+++ b/plone/namedfile/tests/test_scaling.py\n@@ -50,6 +50,10 @@ def Title(self):\n         return self.title\n \n \n+class MockNamedImage(NamedImage):\n+    _p_mtime = DateTime().millis()\n+\n+\n @implementer(IScaledImageQuality)\n class DummyQualitySupplier(object):\n     """ fake utility for plone.app.imaging\'s scaling quality """\n@@ -65,7 +69,7 @@ class ImageScalingTests(unittest.TestCase):\n     def setUp(self):\n         data = getFile(\'image.png\')\n         item = DummyContent()\n-        item.image = NamedImage(data, \'image/png\', u\'image.png\')\n+        item.image = MockNamedImage(data, \'image/png\', u\'image.png\')\n         self.layer[\'app\']._setOb(\'item\', item)\n         self.item = self.layer[\'app\'].item\n         self.scaling = ImageScaling(self.item, None)\n@@ -223,15 +227,30 @@ def testGetUnknownScale(self):\n         self.assertEqual(foo, None)\n \n     def testScaleInvalidation(self):\n-        # first get the scale of the original image\n-        self.scaling.available_sizes = {\'foo\': (23, 23)}\n-        foo1 = self.scaling.scale(\'image\', scale=\'foo\')\n-        wait_to_ensure_modified()\n-        # now upload a new one and make sure the scale has changed\n-        data = getFile(\'image.jpg\')\n-        self.item.image = NamedImage(data, \'image/jpeg\', u\'image.jpg\')\n-        foo2 = self.scaling.scale(\'image\', scale=\'foo\')\n-        self.assertFalse(foo1.data == foo2.data, \'scale not updated?\')\n+        dt = self.item.modified()\n+\n+        # Test that different parameters give different scale\n+        self.item.modified = lambda: dt\n+        self.item.image._p_mtime = dt.millis()\n+        scale1a = self.scaling.scale(\'image\', width=100, height=80)\n+        scale2a = self.scaling.scale(\'image\', width=80, height=60)\n+        self.assertNotEqual(scale1a.data, scale2a.data)\n+\n+        # Test that bare object modification does not invalidate scales\n+        self.item.modified = lambda: dt + 1\n+        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n+        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        self.assertNotEqual(scale1b.data, scale2b.data)\n+        self.assertEqual(scale1a.data, scale1b.data)\n+        self.assertEqual(scale2a.data, scale2b.data)\n+\n+        # Test that field modification invalidates scales\n+        self.item.image._p_mtime = (dt + 1).millis()\n+        scale1b = self.scaling.scale(\'image\', width=100, height=80)\n+        scale2b = self.scaling.scale(\'image\', width=80, height=60)\n+        self.assertNotEqual(scale1b.data, scale2b.data)\n+        self.assertNotEqual(scale1a.data, scale1b.data, \'scale not updated?\')\n+        self.assertNotEqual(scale2a.data, scale2b.data, \'scale not updated?\')\n \n     def testCustomSizeChange(self):\n         # set custom image sizes & view a scale\n'

