Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-04-29T03:26:45+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/2c859f649ead38f2d64bcf69c4cf3320fa9b4388

Add gh action for black (#1115)

* Add gh action for black

* Black

* Remove black check from ci.yml

Files changed:
A .github/workflows/black.yml
M .github/workflows/ci.yml
M src/plone/restapi/controlpanels/interfaces.py
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/interfaces.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/nextprev.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_dxcontent_serializer.py

b'diff --git a/.github/workflows/black.yml b/.github/workflows/black.yml\nnew file mode 100644\nindex 000000000..9b23c028b\n--- /dev/null\n+++ b/.github/workflows/black.yml\n@@ -0,0 +1,35 @@\n+name: Black\n+on: [push]\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        python-version: [3.8]\n+\n+    steps:\n+      # git checkout\n+      - uses: actions/checkout@v2\n+\n+      # python setup\n+      - name: Set up Python ${{ matrix.python-version }}\n+        uses: actions/setup-python@v1\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+\n+      # python cache\n+      - uses: actions/cache@v1\n+        with:\n+          path: ~/.cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'**/requirements.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-pip-\n+\n+      # install black\n+      - name: install black\n+        run: pip install black\n+\n+      # run black\n+      - name: run black\n+        run: black src/ --check --diff\ndiff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml\nindex 2bf97df03..617db8467 100644\n--- a/.github/workflows/ci.yml\n+++ b/.github/workflows/ci.yml\n@@ -58,10 +58,6 @@ jobs:\n         env:\n           CI: true\n \n-      # black\n-      - name: black\n-        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then pip install black && black src/ --check --diff; fi\n-\n       # code analysis\n       - name: code analysis\n         run: bin/code-analysis\ndiff --git a/src/plone/restapi/controlpanels/interfaces.py b/src/plone/restapi/controlpanels/interfaces.py\nindex 55b9852ea..ac8a00934 100644\n--- a/src/plone/restapi/controlpanels/interfaces.py\n+++ b/src/plone/restapi/controlpanels/interfaces.py\n@@ -28,4 +28,4 @@ def delete(names):\n \n \n class IDexterityTypesControlpanel(IControlpanel):\n-    """ Dexterity Types Control panel """\n+    """Dexterity Types Control panel"""\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex bc4f7c1e7..81642f6e3 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -215,46 +215,46 @@ def __call__(self, block):\n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class ResolveUIDDeserializer(ResolveUIDDeserializerBase):\n-    """ Deserializer for content-types that implements IBlocks behavior """\n+    """Deserializer for content-types that implements IBlocks behavior"""\n \n \n @adapter(IPloneSiteRoot, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class ResolveUIDDeserializerRoot(ResolveUIDDeserializerBase):\n-    """ Deserializer for site root """\n+    """Deserializer for site root"""\n \n \n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class TextBlockDeserializer(TextBlockDeserializerBase):\n-    """ Deserializer for content-types that implements IBlocks behavior """\n+    """Deserializer for content-types that implements IBlocks behavior"""\n \n \n @adapter(IPloneSiteRoot, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class TextBlockDeserializerRoot(TextBlockDeserializerBase):\n-    """ Deserializer for site root """\n+    """Deserializer for site root"""\n \n \n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class HTMLBlockDeserializer(HTMLBlockDeserializerBase):\n-    """ Deserializer for content-types that implements IBlocks behavior """\n+    """Deserializer for content-types that implements IBlocks behavior"""\n \n \n @adapter(IPloneSiteRoot, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class HTMLBlockDeserializerRoot(HTMLBlockDeserializerBase):\n-    """ Deserializer for site root """\n+    """Deserializer for site root"""\n \n \n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class ImageBlockDeserializer(ImageBlockDeserializerBase):\n-    """ Deserializer for content-types that implements IBlocks behavior """\n+    """Deserializer for content-types that implements IBlocks behavior"""\n \n \n @adapter(IPloneSiteRoot, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class ImageBlockDeserializerRoot(ImageBlockDeserializerBase):\n-    """ Deserializer for site root """\n+    """Deserializer for site root"""\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex 41a73d000..0acabbbed 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -128,7 +128,7 @@ class IExpandableElement(Interface):\n     """\n \n     def __call__(expand=False):\n-        """"""\n+        """ """\n \n \n class IZCatalogCompatibleQuery(Interface):\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex e1bd49e63..e9571e372 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -161,22 +161,22 @@ def __call__(self, value):\n @implementer(IBlockFieldSerializationTransformer)\n @adapter(IBlocks, IBrowserRequest)\n class ResolveUIDSerializer(ResolveUIDSerializerBase):\n-    """ Serializer for content-types with IBlocks behavior """\n+    """Serializer for content-types with IBlocks behavior"""\n \n \n @implementer(IBlockFieldSerializationTransformer)\n @adapter(IPloneSiteRoot, IBrowserRequest)\n class ResolveUIDSerializerRoot(ResolveUIDSerializerBase):\n-    """ Serializer for site root """\n+    """Serializer for site root"""\n \n \n @implementer(IBlockFieldSerializationTransformer)\n @adapter(IBlocks, IBrowserRequest)\n class TextBlockSerializer(TextBlockSerializerBase):\n-    """ Serializer for content-types with IBlocks behavior """\n+    """Serializer for content-types with IBlocks behavior"""\n \n \n @implementer(IBlockFieldSerializationTransformer)\n @adapter(IPloneSiteRoot, IBrowserRequest)\n class TextBlockSerializerRoot(TextBlockSerializerBase):\n-    """ Serializer for site root """\n+    """Serializer for site root"""\ndiff --git a/src/plone/restapi/serializer/nextprev.py b/src/plone/restapi/serializer/nextprev.py\nindex eff29eed3..133aeb679 100644\n--- a/src/plone/restapi/serializer/nextprev.py\n+++ b/src/plone/restapi/serializer/nextprev.py\n@@ -31,7 +31,7 @@ def __init__(self, context):\n \n     @property\n     def next(self):\n-        """ return info about the next item in the container """\n+        """return info about the next item in the container"""\n         if getattr(self.parent, "_ordering", "") == "unordered":\n             # Unordered folder\n             return {}\n@@ -47,7 +47,7 @@ def next(self):\n \n     @property\n     def previous(self):\n-        """ return info about the previous item in the container """\n+        """return info about the previous item in the container"""\n         if getattr(self.parent, "_ordering", "") == "unordered":\n             # Unordered folder\n             return {}\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex ab4a3e261..32d370f7e 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -50,7 +50,7 @@ def _get_ac_local_roles_block(self, obj):\n         )\n \n     def test_sharing_search(self):\n-        """A request to @sharing should support the search parameter. """\n+        """A request to @sharing should support the search parameter."""\n         response = requests.get(\n             self.portal.folder1.absolute_url() + "/@sharing",\n             headers={"Accept": "application/json"},\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 6e1a2bdf3..de32392ba 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -433,7 +433,7 @@ def __call__(self, value, mime_type):\n         )\n \n     def test_allow_discussion_by_default(self):\n-        """ Not globally addable, not fti enabled, not obj instance enabled """\n+        """Not globally addable, not fti enabled, not obj instance enabled"""\n         self.portal.invokeFactory("Document", id=u"doc2")\n         serializer = getMultiAdapter((self.portal.doc2, self.request), ISerializeToJson)\n         obj = serializer()\n'

