Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-04-15T23:48:48+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/65d393d4c4804f9bdd215e8f3ab7e59c20b64f2f

Fix redirect issues

Redirect (when possible) also ajax requests and do not return an unuseful body

Fixes #3014

Files changed:
A Products/CMFPlone/tests/test_error_message.py
A news/3014.bugfix
M Products/CMFPlone/browser/exceptions.py
M Products/CMFPlone/browser/templates/error_message.pt

b'diff --git a/Products/CMFPlone/browser/exceptions.py b/Products/CMFPlone/browser/exceptions.py\nindex 7a1a712f6c..8ee7944bf2 100644\n--- a/Products/CMFPlone/browser/exceptions.py\n+++ b/Products/CMFPlone/browser/exceptions.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n+from plone.memoize.view import memoize\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions.ExceptionFormatter import format_exception\n+from zope.component import getMultiAdapter\n \n import json\n import sys\n@@ -15,12 +17,24 @@ def is_manager(self):\n         return getSecurityManager().checkPermission(\n             \'Manage portal\', self.context)\n \n+    @property\n+    @memoize\n+    def plone_redirector_view(self):\n+        return getMultiAdapter(\n+            (self.__parent__, self.request), name="plone_redirector_view"\n+        )\n+\n     def __call__(self):\n         exception = self.context\n+        error_type = exception.__class__.__name__\n+        if error_type == "NotFound" and self.plone_redirector_view.attempt_redirect():\n+            # if a redirect is possible attempt_redirect returns True\n+            # and sets the proper location header\n+            return\n+\n         self.context = self.__parent__\n         request = self.request\n \n-        error_type = exception.__class__.__name__\n         exc_type, value, traceback = sys.exc_info()\n         error_tb = \'\'.join(\n             format_exception(exc_type, value, traceback, as_html=False))\ndiff --git a/Products/CMFPlone/browser/templates/error_message.pt b/Products/CMFPlone/browser/templates/error_message.pt\nindex d1d7be29b3..f68a5d4774 100644\n--- a/Products/CMFPlone/browser/templates/error_message.pt\n+++ b/Products/CMFPlone/browser/templates/error_message.pt\n@@ -14,11 +14,7 @@\n \n         <metal:notfound tal:condition="python:err_type == \'NotFound\'">\n \n-            <tal:redirect define="redirection_view context/@@plone_redirector_view">\n-\n-                <tal:redirect define="redirect_success redirection_view/attempt_redirect|nothing" replace="nothing">\n-                    If the attempt succeeds, we won\'t see any more of this template\n-                </tal:redirect>\n+            <tal:redirect define="redirection_view nocall:view/@@plone_redirector_view">\n \n                 <h1 class="documentFirstHeading"\n                     i18n:translate="heading_site_there_seems_to_be_an_error">\ndiff --git a/Products/CMFPlone/tests/test_error_message.py b/Products/CMFPlone/tests/test_error_message.py\nnew file mode 100644\nindex 0000000000..1a5874ff9d\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_error_message.py\n@@ -0,0 +1,71 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zExceptions import HTTPNotImplemented\n+from zExceptions import NotFound\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n+import unittest\n+\n+\n+class TestErrorMessage(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.request = self.layer["request"]\n+\n+    def test_error_message_3xx(self):\n+        # Prepare a fake request\n+        request = self.request.clone()\n+        request.other["URL"] = "http://nohost/foo"\n+        # prepare the redirection tool\n+        storage = getUtility(IRedirectionStorage)\n+        storage.add("/foo", "/bar")\n+\n+        try:\n+            raise NotFound\n+        except NotFound as exc:\n+            view = getMultiAdapter((exc, request), name="index.html")\n+            self.assertIsNone(view())\n+            self.assertEqual(\n+                view.request.response.getHeader("Location"), "http://nohost/bar"\n+            )\n+            self.assertEqual(view.request.response.getStatus(), 302)\n+\n+    def test_error_message_4xx(self):\n+        try:\n+            raise NotFound\n+        except NotFound as exc:\n+            view = getMultiAdapter((exc, self.request.clone()), name="index.html")\n+            self.assertEqual(\'{"error_type": "NotFound"}\', view())\n+            self.assertEqual(view.request.response.getStatus(), 404)\n+\n+    def test_error_message_5xx(self):\n+        class CustomException(Exception):\n+            pass\n+\n+        try:\n+            raise CustomException\n+        except CustomException as exc:\n+            view = getMultiAdapter((exc, self.request.clone()), name="index.html")\n+            self.assertEqual(\'{"error_type": "CustomException"}\', view())\n+\n+            # Check the response page (served only when accepting html)\n+            view.request.environ["HTTP_ACCEPT"] = "text/html"\n+            self.assertIn("Error", view())\n+            self.assertEqual(view.request.response.getStatus(), 500)\n+\n+        # Zope might set a more specific status based on the exception\n+        try:\n+            raise KeyError\n+        except KeyError as exc:\n+            view = getMultiAdapter((exc, self.request.clone()), name="index.html")\n+            view()\n+            self.assertEqual(\'{"error_type": "KeyError"}\', view())\n+\n+            # Check the response page (served only when accepting html)\n+            view.request.environ["HTTP_ACCEPT"] = "text/html"\n+            self.assertIn("Error", view())\n+            self.assertEqual(view.request.response.getStatus(), 503)\ndiff --git a/news/3014.bugfix b/news/3014.bugfix\nnew file mode 100644\nindex 0000000000..88591eab87\n--- /dev/null\n+++ b/news/3014.bugfix\n@@ -0,0 +1,2 @@\n+Redirect (when possible) also ajax requests and do not return an unuseful body\n+[ale-rt]\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2020-04-20T14:04:33+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/5376977526a02447156f9fd4b5229d3421ef9e43

Merge pull request #3015 from plone/3014-5.2.x-redirect-issues

Fix redirect issues

Files changed:
A Products/CMFPlone/tests/test_error_message.py
A news/3014.bugfix
M Products/CMFPlone/browser/exceptions.py
M Products/CMFPlone/browser/templates/error_message.pt

b'diff --git a/Products/CMFPlone/browser/exceptions.py b/Products/CMFPlone/browser/exceptions.py\nindex 7a1a712f6c..8ee7944bf2 100644\n--- a/Products/CMFPlone/browser/exceptions.py\n+++ b/Products/CMFPlone/browser/exceptions.py\n@@ -1,8 +1,10 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n+from plone.memoize.view import memoize\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n from zExceptions.ExceptionFormatter import format_exception\n+from zope.component import getMultiAdapter\n \n import json\n import sys\n@@ -15,12 +17,24 @@ def is_manager(self):\n         return getSecurityManager().checkPermission(\n             \'Manage portal\', self.context)\n \n+    @property\n+    @memoize\n+    def plone_redirector_view(self):\n+        return getMultiAdapter(\n+            (self.__parent__, self.request), name="plone_redirector_view"\n+        )\n+\n     def __call__(self):\n         exception = self.context\n+        error_type = exception.__class__.__name__\n+        if error_type == "NotFound" and self.plone_redirector_view.attempt_redirect():\n+            # if a redirect is possible attempt_redirect returns True\n+            # and sets the proper location header\n+            return\n+\n         self.context = self.__parent__\n         request = self.request\n \n-        error_type = exception.__class__.__name__\n         exc_type, value, traceback = sys.exc_info()\n         error_tb = \'\'.join(\n             format_exception(exc_type, value, traceback, as_html=False))\ndiff --git a/Products/CMFPlone/browser/templates/error_message.pt b/Products/CMFPlone/browser/templates/error_message.pt\nindex d1d7be29b3..f68a5d4774 100644\n--- a/Products/CMFPlone/browser/templates/error_message.pt\n+++ b/Products/CMFPlone/browser/templates/error_message.pt\n@@ -14,11 +14,7 @@\n \n         <metal:notfound tal:condition="python:err_type == \'NotFound\'">\n \n-            <tal:redirect define="redirection_view context/@@plone_redirector_view">\n-\n-                <tal:redirect define="redirect_success redirection_view/attempt_redirect|nothing" replace="nothing">\n-                    If the attempt succeeds, we won\'t see any more of this template\n-                </tal:redirect>\n+            <tal:redirect define="redirection_view nocall:view/@@plone_redirector_view">\n \n                 <h1 class="documentFirstHeading"\n                     i18n:translate="heading_site_there_seems_to_be_an_error">\ndiff --git a/Products/CMFPlone/tests/test_error_message.py b/Products/CMFPlone/tests/test_error_message.py\nnew file mode 100644\nindex 0000000000..1a5874ff9d\n--- /dev/null\n+++ b/Products/CMFPlone/tests/test_error_message.py\n@@ -0,0 +1,71 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.redirector.interfaces import IRedirectionStorage\n+from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+from zExceptions import HTTPNotImplemented\n+from zExceptions import NotFound\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n+import unittest\n+\n+\n+class TestErrorMessage(unittest.TestCase):\n+\n+    layer = PRODUCTS_CMFPLONE_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.request = self.layer["request"]\n+\n+    def test_error_message_3xx(self):\n+        # Prepare a fake request\n+        request = self.request.clone()\n+        request.other["URL"] = "http://nohost/foo"\n+        # prepare the redirection tool\n+        storage = getUtility(IRedirectionStorage)\n+        storage.add("/foo", "/bar")\n+\n+        try:\n+            raise NotFound\n+        except NotFound as exc:\n+            view = getMultiAdapter((exc, request), name="index.html")\n+            self.assertIsNone(view())\n+            self.assertEqual(\n+                view.request.response.getHeader("Location"), "http://nohost/bar"\n+            )\n+            self.assertEqual(view.request.response.getStatus(), 302)\n+\n+    def test_error_message_4xx(self):\n+        try:\n+            raise NotFound\n+        except NotFound as exc:\n+            view = getMultiAdapter((exc, self.request.clone()), name="index.html")\n+            self.assertEqual(\'{"error_type": "NotFound"}\', view())\n+            self.assertEqual(view.request.response.getStatus(), 404)\n+\n+    def test_error_message_5xx(self):\n+        class CustomException(Exception):\n+            pass\n+\n+        try:\n+            raise CustomException\n+        except CustomException as exc:\n+            view = getMultiAdapter((exc, self.request.clone()), name="index.html")\n+            self.assertEqual(\'{"error_type": "CustomException"}\', view())\n+\n+            # Check the response page (served only when accepting html)\n+            view.request.environ["HTTP_ACCEPT"] = "text/html"\n+            self.assertIn("Error", view())\n+            self.assertEqual(view.request.response.getStatus(), 500)\n+\n+        # Zope might set a more specific status based on the exception\n+        try:\n+            raise KeyError\n+        except KeyError as exc:\n+            view = getMultiAdapter((exc, self.request.clone()), name="index.html")\n+            view()\n+            self.assertEqual(\'{"error_type": "KeyError"}\', view())\n+\n+            # Check the response page (served only when accepting html)\n+            view.request.environ["HTTP_ACCEPT"] = "text/html"\n+            self.assertIn("Error", view())\n+            self.assertEqual(view.request.response.getStatus(), 503)\ndiff --git a/news/3014.bugfix b/news/3014.bugfix\nnew file mode 100644\nindex 0000000000..88591eab87\n--- /dev/null\n+++ b/news/3014.bugfix\n@@ -0,0 +1,2 @@\n+Redirect (when possible) also ajax requests and do not return an unuseful body\n+[ale-rt]\n'

