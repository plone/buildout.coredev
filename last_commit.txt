Repository: plone.dexterity


Branch: refs/heads/master
Date: 2024-02-26T14:32:19+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/745f0a300a6a5f682125c71ba8858532c602a27a

Fix WebDAV traversal (#196)

Fix a traversal error that happens when traversing a WebDAV resource and the virtual host monster is used.

Fixes #195

Files changed:
A news/195.bugfix
M plone/dexterity/browser/traversal.py
M plone/dexterity/tests/test_webdav.py

b'diff --git a/news/195.bugfix b/news/195.bugfix\nnew file mode 100644\nindex 00000000..4be48e5c\n--- /dev/null\n+++ b/news/195.bugfix\n@@ -0,0 +1,2 @@\n+Fix a traversal error that happens when traversing a WebDAV resource and the virtual host monster is used.\n+[ale-rt]\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 55e6b9e7..b7dd6976 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -4,6 +4,7 @@\n from plone.dexterity.filerepresentation import FolderDataResource\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContent\n+from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n@@ -38,6 +39,14 @@ def publishTraverse(self, request, name):\n \n         defaultTraversal = super().publishTraverse(request, name)\n \n+        if isinstance(defaultTraversal, VirtualHostMonster):\n+            # If we are traversing to a VHM, we want to just return it immediately.\n+            # For WebDAV requests, the check that controls if the parent\n+            # of the traversed object is the same as the context\n+            # will most probably fail because VHM parent will usually be\n+            # the Zope App object.\n+            return defaultTraversal\n+\n         # If this is a WebDAV PUT/PROPFIND/PROPPATCH request, don\'t acquire\n         # things. If we did, we couldn\'t create a new object with PUT, for\n         # example, because the acquired object would shadow the NullResource\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 04828a4e..8d17cfbe 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -41,6 +41,7 @@\n from ZPublisher.Iterators import IStreamIterator\n \n import re\n+import unittest\n \n \n XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n@@ -1261,3 +1262,75 @@ def __browser_default__(self, request):\n             ),\n             traversal.browserDefault(request),\n         )\n+\n+\n+class TestDexterityPublishTraverse(unittest.TestCase):\n+\n+    def setUp(self):\n+        """Inspired by webdav.tests.testPUT_factory.TestPUTFactory"""\n+        from Testing.makerequest import makerequest\n+\n+        import Zope2\n+\n+        # Create a basic data structure\n+        self.app = makerequest(Zope2.app())\n+\n+        self.app.manage_addFolder("folder", "")\n+        self.folder = self.app.folder\n+\n+        self.folder.manage_addFolder("subfolder", "")\n+        self.subfolder = self.folder.subfolder\n+\n+    @property\n+    def get_request(self):\n+        request = self.app.REQUEST\n+        request["PARENTS"] = [self.app]\n+        return request\n+\n+    @property\n+    def lock_request(self):\n+        lock_request = self.get_request.clone()\n+        lock_request["REQUEST_METHOD"] = "LOCK"\n+        lock_request.maybe_webdav_client = True\n+        return lock_request\n+\n+    def test_get_subfolder(self):\n+        traversal = DexterityPublishTraverse(self.folder, None)\n+        traversed = traversal.publishTraverse(self.get_request, "subfolder")\n+        self.assertEqual(traversed, self.subfolder)\n+\n+    def test_lock_subfolder(self):\n+        traversal = DexterityPublishTraverse(self.folder, None)\n+        traversed = traversal.publishTraverse(self.lock_request, "subfolder")\n+        self.assertEqual(traversed, self.subfolder)\n+\n+    def test_get_acquired(self):\n+        traversal = DexterityPublishTraverse(self.subfolder, None)\n+        traversed = traversal.publishTraverse(self.get_request, "folder")\n+        self.assertEqual(traversed, self.folder)\n+\n+    def test_lock_acquired(self):\n+        """Ensure we are protected against acquisition:\n+        traversing to an acquired object should return a NullResource\n+        """\n+        from webdav.NullResource import NullResource\n+\n+        traversal = DexterityPublishTraverse(self.subfolder, None)\n+        traversed = traversal.publishTraverse(self.lock_request, "folder")\n+        self.assertIsInstance(traversed, NullResource)\n+\n+    def test_get_vhm(self):\n+        """Ensure we can handle virtual hosting with regular requests"""\n+        from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n+\n+        traversal = DexterityPublishTraverse(self.folder, None)\n+        traversed = traversal.publishTraverse(self.get_request, "virtual_hosting")\n+        self.assertIsInstance(traversed, VirtualHostMonster)\n+\n+    def test_lock_vhm(self):\n+        """Ensure we can handle virtual hosting with dav requests"""\n+        from Products.SiteAccess.VirtualHostMonster import VirtualHostMonster\n+\n+        traversal = DexterityPublishTraverse(self.folder, None)\n+        traversed = traversal.publishTraverse(self.lock_request, "virtual_hosting")\n+        self.assertIsInstance(traversed, VirtualHostMonster)\n'

