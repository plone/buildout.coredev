Repository: plone.app.content


Branch: refs/heads/master
Date: 2020-05-25T14:26:12+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/0409d15ac246d0e995229ee61056fea4fbb02e2d

Do not require mock on Python2.7

Fixes #198

Files changed:
A news/198.bugfix
M plone/app/content/tests/test_contents.py
M plone/app/content/tests/test_widgets.py
M setup.py

b'diff --git a/news/198.bugfix b/news/198.bugfix\nnew file mode 100644\nindex 0000000..8aa6c4c\n--- /dev/null\n+++ b/news/198.bugfix\n@@ -0,0 +1 @@\n+Require mock only on Python 2.7 [ale-rt]\ndiff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex 8a2a1a5..bf0cf7c 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -18,10 +18,14 @@\n from zope.component import getUtility\n \n import json\n-import mock\n import transaction\n import unittest\n \n+try:\n+    from unittest import mock\n+except ImportError:\n+    import mock\n+\n \n class ContentsCopyTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex 9bef312..8c7f538 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from mock import Mock\n from plone.app.content.browser import vocabulary\n from plone.app.content.browser.file import FileUploadView\n from plone.app.content.browser.query import QueryStringIndexOptions\n@@ -26,7 +25,6 @@\n from zope.publisher.browser import TestRequest\n \n import json\n-import mock\n import os\n import transaction\n \n@@ -37,6 +35,11 @@\n     def processQueue():\n         pass\n \n+try:\n+    from unittest import mock\n+except ImportError:\n+    import mock\n+\n \n _dir = os.path.dirname(__file__)\n \n@@ -388,7 +391,7 @@ def testSource(self):\n         class DummyCatalogSource(object):\n             def search_catalog(self, query):\n                 querytext = query[\'SearchableText\'][\'query\']\n-                return [Mock(id=querytext)]\n+                return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n         widget.context = self.portal\n@@ -468,7 +471,7 @@ def testSourcePermissionDenied(self):\n         class DummyCatalogSource(object):\n             def search_catalog(self, query):\n                 querytext = query[\'SearchableText\'][\'query\']\n-                return [Mock(id=querytext)]\n+                return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n         widget.context = self.portal\n@@ -503,7 +506,7 @@ def testSourceTextQuery(self):\n         @implementer(ISource)\n         class DummyCatalogSource(object):\n             def search(self, query):\n-                return [Mock(value=Mock(id=query))]\n+                return [mock.Mock(value=mock.Mock(id=query))]\n \n         widget = TextWidget(self.request)\n         widget.context = self.portal\ndiff --git a/setup.py b/setup.py\nindex a4f03e9..075117e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,7 +37,7 @@\n         test=[\n             \'plone.app.contenttypes\',\n             \'plone.app.testing\',\n-            \'mock\'\n+            \'mock;python_version<"3.3"\'\n         ]\n     ),\n     install_requires=[\n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2020-05-25T14:57:17+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.content/commit/3f5b501920d1c76ae68772124f0348a272f916cb

Do not break with unknown MIME types

Fixes #197

Files changed:
A news/197.bugfix
M plone/app/content/browser/vocabulary.py
M plone/app/content/tests/test_widgets.py

b'diff --git a/news/197.bugfix b/news/197.bugfix\nnew file mode 100644\nindex 0000000..bc34932\n--- /dev/null\n+++ b/news/197.bugfix\n@@ -0,0 +1 @@\n+Do not break with unknown MIME types [ale-rt]\ndiff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py\nindex 5f0c13e..cec956c 100644\n--- a/plone/app/content/browser/vocabulary.py\n+++ b/plone/app/content/browser/vocabulary.py\n@@ -15,6 +15,7 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n+from Products.MimetypesRegistry.MimeTypeItem import PREFIX\n from types import FunctionType\n from z3c.form.interfaces import ISubForm\n from zope.component import getUtility\n@@ -250,9 +251,18 @@ def __call__(self):\n                             getattr(vocab_item, \'mime_type\', None))\n                         if contenttype:\n                             ctype = mtt.lookup(contenttype)\n-                            item[key] = \'/\'.join([\n-                                base_path,\n-                                guess_icon_path(ctype[0])])\n+                            if ctype:\n+                                item[key] = \'/\'.join([\n+                                    base_path,\n+                                    guess_icon_path(ctype[0])])\n+                            else:\n+                                item[key] = "/".join(\n+                                    [\n+                                        base_path,\n+                                        PREFIX.rstrip("/"),\n+                                        "unknown.png",\n+                                    ]\n+                                )\n                 items.append(item)\n         else:\n             items = [{\'id\': item.value,\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex 8c7f538..1b3c17e 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -568,6 +568,41 @@ def testUntranslatableMetadata(self):\n         # portal_type is never translated\n         self.assertEqual(data[\'results\'][0][\'portal_type\'], u\'Document\')\n \n+    def testGetMimeIcon(self):\n+        """ Check if the returned icon is correct\n+        """\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "attributes": ["getMimeIcon"],\n+            }\n+        )\n+        view = VocabularyView(self.portal, self.request)\n+\n+        # Check an empty file\n+        self.portal.invokeFactory("File", id="my-file", title="My file")\n+        obj = self.portal["my-file"]\n+        obj.reindexObject()\n+\n+        self.assertListEqual(\n+            json.loads(view())["results"], [{"getMimeIcon": None}]\n+        )\n+\n+        # mock a pdf\n+        obj.file = mock.Mock(contentType="application/pdf")\n+        obj.reindexObject()\n+        self.assertListEqual(\n+            json.loads(view())["results"],\n+            [{"getMimeIcon": "/plone/++resource++mimetype.icons/pdf.png"}],\n+        )\n+\n+        # mock something unknown\n+        obj.file = mock.Mock(contentType="x-foo/x-bar")\n+        obj.reindexObject()\n+        self.assertListEqual(\n+            json.loads(view())["results"],\n+            [{"getMimeIcon": "/plone/++resource++mimetype.icons/unknown.png"}],\n+        )\n \n class FunctionalBrowserTest(unittest.TestCase):\n \n'

Repository: plone.app.content


Branch: refs/heads/master
Date: 2020-05-26T14:13:41+02:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.app.content/commit/3c2e37bca0dc219c77e93e8df3622f1acc5882ad

Merge pull request #199 from plone/ale-improvements

Do not break with unknown MIME types

Files changed:
A news/197.bugfix
A news/198.bugfix
M plone/app/content/browser/vocabulary.py
M plone/app/content/tests/test_contents.py
M plone/app/content/tests/test_widgets.py
M setup.py

b'diff --git a/news/197.bugfix b/news/197.bugfix\nnew file mode 100644\nindex 0000000..bc34932\n--- /dev/null\n+++ b/news/197.bugfix\n@@ -0,0 +1 @@\n+Do not break with unknown MIME types [ale-rt]\ndiff --git a/news/198.bugfix b/news/198.bugfix\nnew file mode 100644\nindex 0000000..8aa6c4c\n--- /dev/null\n+++ b/news/198.bugfix\n@@ -0,0 +1 @@\n+Require mock only on Python 2.7 [ale-rt]\ndiff --git a/plone/app/content/browser/vocabulary.py b/plone/app/content/browser/vocabulary.py\nindex 5f0c13e..cec956c 100644\n--- a/plone/app/content/browser/vocabulary.py\n+++ b/plone/app/content/browser/vocabulary.py\n@@ -15,6 +15,7 @@\n from Products.CMFPlone.utils import safe_unicode\n from Products.Five import BrowserView\n from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n+from Products.MimetypesRegistry.MimeTypeItem import PREFIX\n from types import FunctionType\n from z3c.form.interfaces import ISubForm\n from zope.component import getUtility\n@@ -250,9 +251,18 @@ def __call__(self):\n                             getattr(vocab_item, \'mime_type\', None))\n                         if contenttype:\n                             ctype = mtt.lookup(contenttype)\n-                            item[key] = \'/\'.join([\n-                                base_path,\n-                                guess_icon_path(ctype[0])])\n+                            if ctype:\n+                                item[key] = \'/\'.join([\n+                                    base_path,\n+                                    guess_icon_path(ctype[0])])\n+                            else:\n+                                item[key] = "/".join(\n+                                    [\n+                                        base_path,\n+                                        PREFIX.rstrip("/"),\n+                                        "unknown.png",\n+                                    ]\n+                                )\n                 items.append(item)\n         else:\n             items = [{\'id\': item.value,\ndiff --git a/plone/app/content/tests/test_contents.py b/plone/app/content/tests/test_contents.py\nindex 8a2a1a5..bf0cf7c 100644\n--- a/plone/app/content/tests/test_contents.py\n+++ b/plone/app/content/tests/test_contents.py\n@@ -18,10 +18,14 @@\n from zope.component import getUtility\n \n import json\n-import mock\n import transaction\n import unittest\n \n+try:\n+    from unittest import mock\n+except ImportError:\n+    import mock\n+\n \n class ContentsCopyTests(unittest.TestCase):\n     layer = PLONE_APP_CONTENT_DX_INTEGRATION_TESTING\ndiff --git a/plone/app/content/tests/test_widgets.py b/plone/app/content/tests/test_widgets.py\nindex 9bef312..1b3c17e 100644\n--- a/plone/app/content/tests/test_widgets.py\n+++ b/plone/app/content/tests/test_widgets.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from mock import Mock\n from plone.app.content.browser import vocabulary\n from plone.app.content.browser.file import FileUploadView\n from plone.app.content.browser.query import QueryStringIndexOptions\n@@ -26,7 +25,6 @@\n from zope.publisher.browser import TestRequest\n \n import json\n-import mock\n import os\n import transaction\n \n@@ -37,6 +35,11 @@\n     def processQueue():\n         pass\n \n+try:\n+    from unittest import mock\n+except ImportError:\n+    import mock\n+\n \n _dir = os.path.dirname(__file__)\n \n@@ -388,7 +391,7 @@ def testSource(self):\n         class DummyCatalogSource(object):\n             def search_catalog(self, query):\n                 querytext = query[\'SearchableText\'][\'query\']\n-                return [Mock(id=querytext)]\n+                return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n         widget.context = self.portal\n@@ -468,7 +471,7 @@ def testSourcePermissionDenied(self):\n         class DummyCatalogSource(object):\n             def search_catalog(self, query):\n                 querytext = query[\'SearchableText\'][\'query\']\n-                return [Mock(id=querytext)]\n+                return [mock.Mock(id=querytext)]\n \n         widget = TextWidget(self.request)\n         widget.context = self.portal\n@@ -503,7 +506,7 @@ def testSourceTextQuery(self):\n         @implementer(ISource)\n         class DummyCatalogSource(object):\n             def search(self, query):\n-                return [Mock(value=Mock(id=query))]\n+                return [mock.Mock(value=mock.Mock(id=query))]\n \n         widget = TextWidget(self.request)\n         widget.context = self.portal\n@@ -565,6 +568,41 @@ def testUntranslatableMetadata(self):\n         # portal_type is never translated\n         self.assertEqual(data[\'results\'][0][\'portal_type\'], u\'Document\')\n \n+    def testGetMimeIcon(self):\n+        """ Check if the returned icon is correct\n+        """\n+        self.request.form.update(\n+            {\n+                "name": "plone.app.vocabularies.Catalog",\n+                "attributes": ["getMimeIcon"],\n+            }\n+        )\n+        view = VocabularyView(self.portal, self.request)\n+\n+        # Check an empty file\n+        self.portal.invokeFactory("File", id="my-file", title="My file")\n+        obj = self.portal["my-file"]\n+        obj.reindexObject()\n+\n+        self.assertListEqual(\n+            json.loads(view())["results"], [{"getMimeIcon": None}]\n+        )\n+\n+        # mock a pdf\n+        obj.file = mock.Mock(contentType="application/pdf")\n+        obj.reindexObject()\n+        self.assertListEqual(\n+            json.loads(view())["results"],\n+            [{"getMimeIcon": "/plone/++resource++mimetype.icons/pdf.png"}],\n+        )\n+\n+        # mock something unknown\n+        obj.file = mock.Mock(contentType="x-foo/x-bar")\n+        obj.reindexObject()\n+        self.assertListEqual(\n+            json.loads(view())["results"],\n+            [{"getMimeIcon": "/plone/++resource++mimetype.icons/unknown.png"}],\n+        )\n \n class FunctionalBrowserTest(unittest.TestCase):\n \ndiff --git a/setup.py b/setup.py\nindex a4f03e9..075117e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -37,7 +37,7 @@\n         test=[\n             \'plone.app.contenttypes\',\n             \'plone.app.testing\',\n-            \'mock\'\n+            \'mock;python_version<"3.3"\'\n         ]\n     ),\n     install_requires=[\n'

