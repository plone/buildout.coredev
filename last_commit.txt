Repository: plone.namedfile


Branch: refs/heads/master
Date: 2021-12-22T17:22:43+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/2b4650295704246184c38834355a95354d4fd666

Add support for tiles in DefaultImageScalingFactory.

plone.app.tiles has its [own image scale factory](https://github.com/plone/plone.app.tiles/blob/3.2.2/plone/app/tiles/imagescaling.py#L110).
It [passes this around](https://github.com/plone/plone.app.tiles/blob/3.2.2/plone/app/tiles/imagescaling.py#L180) in a [deprecated way](https://github.com/plone/plone.scale/blob/3.1.2/plone/scale/storage.py#L207-L212).
Its scale factory does almost the same as the DefaultImageScalingFactory, although it is structured differently, as a function instead of a class.
Result is that the tiles scale factory is missing some features and fixes from the default, at least support for SVG and passing a quality parameter.

The only *intended* difference of the tile scale factory, is that it gets the original field value from the [tile data](https://github.com/plone/plone.app.tiles/blob/3.2.2/plone/app/tiles/imagescaling.py#L114),
instead of a [field on the context](https://github.com/plone/plone.namedfile/blob/5.5.1/plone/namedfile/scaling.py#L214).

The current commit makes the DefaultImageScalingFactory work for tiles.
Next step would be to update plone.app.tiles to use this.  This mostly involves removing code.

(Maybe something similar would be useful/needed for images in portlets, but I did not check. Do scales of images fields in portlets even work today?)

This will also make future support for focal points easier: there will be just one scaling factory to fix, instead of two.

Files changed:
A news/104.feature
M plone/namedfile/scaling.py
M setup.py

b'diff --git a/news/104.feature b/news/104.feature\nnew file mode 100644\nindex 0000000..66667f2\n--- /dev/null\n+++ b/news/104.feature\n@@ -0,0 +1,2 @@\n+Add support for tiles in DefaultImageScalingFactory.\n+[maurits]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex d7cd7a4..279c2e8 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -36,6 +36,11 @@\n import six\n \n \n+try:\n+    from plone.tiles.interfaces import IPersistentTile\n+except ImportError:\n+    IPersistentTile = None\n+\n logger = logging.getLogger(__name__)\n _marker = object()\n \n@@ -186,6 +191,32 @@ def traverse(self, name, furtherPath):\n class DefaultImageScalingFactory(object):\n     def __init__(self, context):\n         self.context = context\n+        # fieldname will be set for real in the __call__ method.\n+        self.fieldname = None\n+        if IPersistentTile is not None and IPersistentTile.providedBy(context):\n+            self.is_tile = True\n+            # We get data from the tile:\n+            self.data_context = context.data\n+            # This is the actual content item (Page, News Item, etc):\n+            self.content_context = context.context\n+        else:\n+            self.is_tile = False\n+            self.data_context = context\n+            self.content_context = context\n+\n+    def get_original_value(self):\n+        if self.fieldname is None:\n+            return\n+        if self.is_tile:\n+            return self.data_context.get(self.fieldname)\n+        return getattr(self.content_context, self.fieldname, None)\n+\n+    def url(self):\n+        # The url is useful when logging a problem.\n+        base = self.content_context.absolute_url()\n+        if not self.is_tile:\n+            return base\n+        return "{}/@@{}/{}".format(base, self.context.__name__, self.context.id)\n \n     def get_quality(self):\n         """Get plone.app.imaging\'s quality setting"""\n@@ -211,7 +242,15 @@ def __call__(\n \n         """Factory for image scales`.\n         """\n-        orig_value = getattr(self.context, fieldname, None)\n+        if fieldname is None:\n+            primary = IPrimaryFieldInfo(self.context, None)\n+            if primary is None:\n+                return\n+            fieldname = primary.fieldname\n+        # Safe self.fieldname for use in self.get_original_value.\n+        self.fieldname = fieldname\n+\n+        orig_value = self.get_original_value()\n         if orig_value is None:\n             return\n \n@@ -258,7 +297,7 @@ def __call__(\n             except Exception:\n                 logger.exception(\n                     \'Could not scale "{0!r}" of {1!r}\'.format(\n-                        orig_value, self.context.absolute_url(),\n+                        orig_value, self.url(),\n                     ),\n                 )\n                 return\ndiff --git a/setup.py b/setup.py\nindex 2fb94f2..d7732ff 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = \'5.5.2.dev0\'\n+version = \'5.6.0.dev0\'\n \n description = \'File types and fields for images, files and blob files with \' \\\n               \'filenames\'\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2021-12-23T23:05:19+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/5fb1c8b2c88866c321661b49f21028f632a64f31

Make DefaultImageScalingFactory more flexible by splitting out methods.

Sub classes can override these.
This replaces adding support for tiles.

Files changed:
M news/104.feature
M plone/namedfile/scaling.py

b'diff --git a/news/104.feature b/news/104.feature\nindex 66667f2..c5752ff 100644\n--- a/news/104.feature\n+++ b/news/104.feature\n@@ -1,2 +1,2 @@\n-Add support for tiles in DefaultImageScalingFactory.\n+Make DefaultImageScalingFactory more flexible, with methods you can override.\n [maurits]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex 279c2e8..b5d50b1 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -36,11 +36,6 @@\n import six\n \n \n-try:\n-    from plone.tiles.interfaces import IPersistentTile\n-except ImportError:\n-    IPersistentTile = None\n-\n logger = logging.getLogger(__name__)\n _marker = object()\n \n@@ -193,30 +188,43 @@ def __init__(self, context):\n         self.context = context\n         # fieldname will be set for real in the __call__ method.\n         self.fieldname = None\n-        if IPersistentTile is not None and IPersistentTile.providedBy(context):\n-            self.is_tile = True\n-            # We get data from the tile:\n-            self.data_context = context.data\n-            # This is the actual content item (Page, News Item, etc):\n-            self.content_context = context.context\n-        else:\n-            self.is_tile = False\n-            self.data_context = context\n-            self.content_context = context\n \n     def get_original_value(self):\n+        """Get the image value.\n+\n+        In most cases this will be a NamedBlobImage field.\n+        """\n         if self.fieldname is None:\n+            primary = IPrimaryFieldInfo(self.context, None)\n+            if primary is None:\n+                return\n+            self.fieldname = primary.fieldname\n+        return getattr(self.context, self.fieldname, None)\n+\n+    def get_raw_data(self, orig_value):\n+        """Get the raw image data.\n+\n+        The result may be an open file, in which case it is the responsibility\n+        of the caller to close it.  Or it may be a string.\n+        """\n+        orig_data = None\n+        try:\n+            orig_data = orig_value.open()\n+        except AttributeError:\n+            orig_data = getattr(aq_base(orig_value), "data", orig_value)\n+        if not orig_data:\n             return\n-        if self.is_tile:\n-            return self.data_context.get(self.fieldname)\n-        return getattr(self.content_context, self.fieldname, None)\n+        # Handle cases where large image data is stored in FileChunks instead\n+        # of plain string\n+        if isinstance(orig_data, tuple(FILECHUNK_CLASSES)):\n+            # Convert data to 8-bit string\n+            # (FileChunk does not provide read() access)\n+            orig_data = str(orig_data)\n+        return orig_data\n \n     def url(self):\n-        # The url is useful when logging a problem.\n-        base = self.content_context.absolute_url()\n-        if not self.is_tile:\n-            return base\n-        return "{}/@@{}/{}".format(base, self.context.__name__, self.context.id)\n+        # url of the context\n+        return self.context.absolute_url()\n \n     def get_quality(self):\n         """Get plone.app.imaging\'s quality setting"""\n@@ -225,6 +233,15 @@ def get_quality(self):\n             return None\n         return getScaledImageQuality()\n \n+    def update_parameters(self, **parameters):\n+        # If quality wasn\'t in the parameters, try the site\'s default scaling\n+        # quality if it exists.\n+        if "quality" not in parameters:\n+            quality = self.get_quality()\n+            if quality:\n+                parameters["quality"] = quality\n+        return parameters\n+\n     def create_scale(self, data, direction, height, width, **parameters):\n         return scaleImage(\n             data, direction=direction, height=height, width=width, **parameters\n@@ -241,47 +258,39 @@ def __call__(\n     ):\n \n         """Factory for image scales`.\n+\n+        Note: the \'scale\' keyword argument is ignored.\n+        You should pass a height and width.\n         """\n-        if fieldname is None:\n-            primary = IPrimaryFieldInfo(self.context, None)\n-            if primary is None:\n-                return\n-            fieldname = primary.fieldname\n-        # Safe self.fieldname for use in self.get_original_value.\n+        # Save self.fieldname for use in self.get_original_value\n+        # and other methods where we do not pass the fieldname explicitly.\n         self.fieldname = fieldname\n-\n         orig_value = self.get_original_value()\n         if orig_value is None:\n             return\n \n         if height is None and width is None:\n+            # We don\'t seem to want an image, so we return nothing\n+            # as image value (the first argument).\n             dummy, format_ = orig_value.contentType.split("/", 1)\n             return None, format_, (orig_value._width, orig_value._height)\n-        elif not parameters and height and width \\\n-                and height == getattr(orig_value, "_height", None) \\\n-                and width == getattr(orig_value, "_width", None):\n+        if (\n+            not parameters\n+            and height\n+            and width\n+            and height == getattr(orig_value, "_height", None)\n+            and width == getattr(orig_value, "_width", None)\n+        ):\n+            # No special wishes, and the original image already has the\n+            # requested height and width.  Return the original.\n             dummy, format_ = orig_value.contentType.split("/", 1)\n             return orig_value, format_, (orig_value._width, orig_value._height)\n-        orig_data = None\n-        try:\n-            orig_data = orig_value.open()\n-        except AttributeError:\n-            orig_data = getattr(aq_base(orig_value), "data", orig_value)\n+\n+        orig_data = self.get_raw_data(orig_value)\n         if not orig_data:\n             return\n-        # Handle cases where large image data is stored in FileChunks instead\n-        # of plain string\n-        if isinstance(orig_data, tuple(FILECHUNK_CLASSES)):\n-            # Convert data to 8-bit string\n-            # (FileChunk does not provide read() access)\n-            orig_data = str(orig_data)\n \n-        # If quality wasn\'t in the parameters, try the site\'s default scaling\n-        # quality if it exists.\n-        if "quality" not in parameters:\n-            quality = self.get_quality()\n-            if quality:\n-                parameters["quality"] = quality\n+        parameters = self.update_parameters(**parameters)\n \n         if not getattr(orig_value, "contentType", "") == "image/svg+xml":\n             try:\n@@ -311,12 +320,14 @@ def __call__(\n \n             result = orig_data.read(), "svg+xml", (width, height)\n \n+        # Note: the format may differ from the original.\n+        # For example a TIFF may have been turned into a PNG.\n         data, format_, dimensions = result\n         mimetype = "image/{0}".format(format_.lower())\n         value = orig_value.__class__(\n             data, contentType=mimetype, filename=orig_value.filename,\n         )\n-        value.fieldname = fieldname\n+        value.fieldname = self.fieldname\n \n         # make sure the file is closed to avoid error:\n         # ZODB-5.5.1-py3.7.egg/ZODB/blob.py:339: ResourceWarning:\n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2021-12-23T23:05:19+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.namedfile/commit/b4f80204759703aa812d1db35589cd92e89ea108

Also factor out creating the scale or handling an svg.

Makes the __call__ method smaller.
And makes it easier to close the possibly open blob file.

Files changed:
M plone/namedfile/scaling.py

b'diff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex b5d50b1..30d7848 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -247,6 +247,35 @@ def create_scale(self, data, direction, height, width, **parameters):\n             data, direction=direction, height=height, width=width, **parameters\n         )\n \n+    def handle_image(\n+        self, orig_value, orig_data, direction, height, width, **parameters\n+    ):\n+        """Return a scaled image, its mimetype format, and width and height."""\n+        if getattr(orig_value, "contentType", "") == "image/svg+xml":\n+            # No need to scale, we can simply use the original data,\n+            # but report a different width and height.\n+            if isinstance(orig_data, (six.text_type)):\n+                orig_data = safe_encode(orig_data)\n+            if isinstance(orig_data, (bytes)):\n+                orig_data = BytesIO(orig_data)\n+            result = orig_data.read(), "svg+xml", (width, height)\n+            return result\n+        try:\n+            result = self.create_scale(\n+                orig_data, direction=direction, height=height, width=width, **parameters\n+            )\n+        except (ConflictError, KeyboardInterrupt):\n+            raise\n+        except Exception:\n+            logger.exception(\n+                \'Could not scale "{0!r}" of {1!r}\'.format(\n+                    orig_value,\n+                    self.url(),\n+                ),\n+            )\n+            return\n+        return result\n+\n     def __call__(\n         self,\n         fieldname=None,\n@@ -291,34 +320,18 @@ def __call__(\n             return\n \n         parameters = self.update_parameters(**parameters)\n-\n-        if not getattr(orig_value, "contentType", "") == "image/svg+xml":\n-            try:\n-                result = self.create_scale(\n-                    orig_data,\n-                    direction=direction,\n-                    height=height,\n-                    width=width,\n-                    **parameters\n-                )\n-            except (ConflictError, KeyboardInterrupt):\n-                raise\n-            except Exception:\n-                logger.exception(\n-                    \'Could not scale "{0!r}" of {1!r}\'.format(\n-                        orig_value, self.url(),\n-                    ),\n-                )\n-                return\n-            if result is None:\n-                return\n-        else:\n-            if isinstance(orig_data, (six.text_type)):\n-                orig_data = safe_encode(orig_data)\n-            if isinstance(orig_data, (bytes)):\n-                orig_data = BytesIO(orig_data)\n-\n-            result = orig_data.read(), "svg+xml", (width, height)\n+        try:\n+            result = self.handle_image(\n+                orig_value, orig_data, direction, height, width, **parameters\n+            )\n+        finally:\n+            # Make sure the file is closed to avoid error:\n+            # ZODB-5.5.1-py3.7.egg/ZODB/blob.py:339: ResourceWarning:\n+            # unclosed file <_io.FileIO ... mode=\'rb\' closefd=True>\n+            if isinstance(orig_data, BlobFile):\n+                orig_data.close()\n+        if result is None:\n+            return\n \n         # Note: the format may differ from the original.\n         # For example a TIFF may have been turned into a PNG.\n@@ -329,12 +342,6 @@ def __call__(\n         )\n         value.fieldname = self.fieldname\n \n-        # make sure the file is closed to avoid error:\n-        # ZODB-5.5.1-py3.7.egg/ZODB/blob.py:339: ResourceWarning:\n-        # unclosed file <_io.FileIO ... mode=\'rb\' closefd=True>\n-        if isinstance(orig_data, BlobFile):\n-            orig_data.close()\n-\n         return value, format_, dimensions\n \n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2021-12-25T17:08:30+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.namedfile/commit/e2b08309d73841822f68e9b25749263fed087a84

Merge pull request #104 from plone/maurits-tiles-support-in-scaling

Split DefaultImageScalingFactory into more methods for flexibility

Files changed:
A news/104.feature
M plone/namedfile/scaling.py
M setup.py

b'diff --git a/news/104.feature b/news/104.feature\nnew file mode 100644\nindex 0000000..c5752ff\n--- /dev/null\n+++ b/news/104.feature\n@@ -0,0 +1,2 @@\n+Make DefaultImageScalingFactory more flexible, with methods you can override.\n+[maurits]\ndiff --git a/plone/namedfile/scaling.py b/plone/namedfile/scaling.py\nindex d7cd7a4..30d7848 100644\n--- a/plone/namedfile/scaling.py\n+++ b/plone/namedfile/scaling.py\n@@ -186,6 +186,45 @@ def traverse(self, name, furtherPath):\n class DefaultImageScalingFactory(object):\n     def __init__(self, context):\n         self.context = context\n+        # fieldname will be set for real in the __call__ method.\n+        self.fieldname = None\n+\n+    def get_original_value(self):\n+        """Get the image value.\n+\n+        In most cases this will be a NamedBlobImage field.\n+        """\n+        if self.fieldname is None:\n+            primary = IPrimaryFieldInfo(self.context, None)\n+            if primary is None:\n+                return\n+            self.fieldname = primary.fieldname\n+        return getattr(self.context, self.fieldname, None)\n+\n+    def get_raw_data(self, orig_value):\n+        """Get the raw image data.\n+\n+        The result may be an open file, in which case it is the responsibility\n+        of the caller to close it.  Or it may be a string.\n+        """\n+        orig_data = None\n+        try:\n+            orig_data = orig_value.open()\n+        except AttributeError:\n+            orig_data = getattr(aq_base(orig_value), "data", orig_value)\n+        if not orig_data:\n+            return\n+        # Handle cases where large image data is stored in FileChunks instead\n+        # of plain string\n+        if isinstance(orig_data, tuple(FILECHUNK_CLASSES)):\n+            # Convert data to 8-bit string\n+            # (FileChunk does not provide read() access)\n+            orig_data = str(orig_data)\n+        return orig_data\n+\n+    def url(self):\n+        # url of the context\n+        return self.context.absolute_url()\n \n     def get_quality(self):\n         """Get plone.app.imaging\'s quality setting"""\n@@ -194,11 +233,49 @@ def get_quality(self):\n             return None\n         return getScaledImageQuality()\n \n+    def update_parameters(self, **parameters):\n+        # If quality wasn\'t in the parameters, try the site\'s default scaling\n+        # quality if it exists.\n+        if "quality" not in parameters:\n+            quality = self.get_quality()\n+            if quality:\n+                parameters["quality"] = quality\n+        return parameters\n+\n     def create_scale(self, data, direction, height, width, **parameters):\n         return scaleImage(\n             data, direction=direction, height=height, width=width, **parameters\n         )\n \n+    def handle_image(\n+        self, orig_value, orig_data, direction, height, width, **parameters\n+    ):\n+        """Return a scaled image, its mimetype format, and width and height."""\n+        if getattr(orig_value, "contentType", "") == "image/svg+xml":\n+            # No need to scale, we can simply use the original data,\n+            # but report a different width and height.\n+            if isinstance(orig_data, (six.text_type)):\n+                orig_data = safe_encode(orig_data)\n+            if isinstance(orig_data, (bytes)):\n+                orig_data = BytesIO(orig_data)\n+            result = orig_data.read(), "svg+xml", (width, height)\n+            return result\n+        try:\n+            result = self.create_scale(\n+                orig_data, direction=direction, height=height, width=width, **parameters\n+            )\n+        except (ConflictError, KeyboardInterrupt):\n+            raise\n+        except Exception:\n+            logger.exception(\n+                \'Could not scale "{0!r}" of {1!r}\'.format(\n+                    orig_value,\n+                    self.url(),\n+                ),\n+            )\n+            return\n+        return result\n+\n     def __call__(\n         self,\n         fieldname=None,\n@@ -210,80 +287,60 @@ def __call__(\n     ):\n \n         """Factory for image scales`.\n+\n+        Note: the \'scale\' keyword argument is ignored.\n+        You should pass a height and width.\n         """\n-        orig_value = getattr(self.context, fieldname, None)\n+        # Save self.fieldname for use in self.get_original_value\n+        # and other methods where we do not pass the fieldname explicitly.\n+        self.fieldname = fieldname\n+        orig_value = self.get_original_value()\n         if orig_value is None:\n             return\n \n         if height is None and width is None:\n+            # We don\'t seem to want an image, so we return nothing\n+            # as image value (the first argument).\n             dummy, format_ = orig_value.contentType.split("/", 1)\n             return None, format_, (orig_value._width, orig_value._height)\n-        elif not parameters and height and width \\\n-                and height == getattr(orig_value, "_height", None) \\\n-                and width == getattr(orig_value, "_width", None):\n+        if (\n+            not parameters\n+            and height\n+            and width\n+            and height == getattr(orig_value, "_height", None)\n+            and width == getattr(orig_value, "_width", None)\n+        ):\n+            # No special wishes, and the original image already has the\n+            # requested height and width.  Return the original.\n             dummy, format_ = orig_value.contentType.split("/", 1)\n             return orig_value, format_, (orig_value._width, orig_value._height)\n-        orig_data = None\n-        try:\n-            orig_data = orig_value.open()\n-        except AttributeError:\n-            orig_data = getattr(aq_base(orig_value), "data", orig_value)\n+\n+        orig_data = self.get_raw_data(orig_value)\n         if not orig_data:\n             return\n-        # Handle cases where large image data is stored in FileChunks instead\n-        # of plain string\n-        if isinstance(orig_data, tuple(FILECHUNK_CLASSES)):\n-            # Convert data to 8-bit string\n-            # (FileChunk does not provide read() access)\n-            orig_data = str(orig_data)\n \n-        # If quality wasn\'t in the parameters, try the site\'s default scaling\n-        # quality if it exists.\n-        if "quality" not in parameters:\n-            quality = self.get_quality()\n-            if quality:\n-                parameters["quality"] = quality\n-\n-        if not getattr(orig_value, "contentType", "") == "image/svg+xml":\n-            try:\n-                result = self.create_scale(\n-                    orig_data,\n-                    direction=direction,\n-                    height=height,\n-                    width=width,\n-                    **parameters\n-                )\n-            except (ConflictError, KeyboardInterrupt):\n-                raise\n-            except Exception:\n-                logger.exception(\n-                    \'Could not scale "{0!r}" of {1!r}\'.format(\n-                        orig_value, self.context.absolute_url(),\n-                    ),\n-                )\n-                return\n-            if result is None:\n-                return\n-        else:\n-            if isinstance(orig_data, (six.text_type)):\n-                orig_data = safe_encode(orig_data)\n-            if isinstance(orig_data, (bytes)):\n-                orig_data = BytesIO(orig_data)\n-\n-            result = orig_data.read(), "svg+xml", (width, height)\n+        parameters = self.update_parameters(**parameters)\n+        try:\n+            result = self.handle_image(\n+                orig_value, orig_data, direction, height, width, **parameters\n+            )\n+        finally:\n+            # Make sure the file is closed to avoid error:\n+            # ZODB-5.5.1-py3.7.egg/ZODB/blob.py:339: ResourceWarning:\n+            # unclosed file <_io.FileIO ... mode=\'rb\' closefd=True>\n+            if isinstance(orig_data, BlobFile):\n+                orig_data.close()\n+        if result is None:\n+            return\n \n+        # Note: the format may differ from the original.\n+        # For example a TIFF may have been turned into a PNG.\n         data, format_, dimensions = result\n         mimetype = "image/{0}".format(format_.lower())\n         value = orig_value.__class__(\n             data, contentType=mimetype, filename=orig_value.filename,\n         )\n-        value.fieldname = fieldname\n-\n-        # make sure the file is closed to avoid error:\n-        # ZODB-5.5.1-py3.7.egg/ZODB/blob.py:339: ResourceWarning:\n-        # unclosed file <_io.FileIO ... mode=\'rb\' closefd=True>\n-        if isinstance(orig_data, BlobFile):\n-            orig_data.close()\n+        value.fieldname = self.fieldname\n \n         return value, format_, dimensions\n \ndiff --git a/setup.py b/setup.py\nindex 2fb94f2..d7732ff 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -5,7 +5,7 @@\n import os\n \n \n-version = \'5.5.2.dev0\'\n+version = \'5.6.0.dev0\'\n \n description = \'File types and fields for images, files and blob files with \' \\\n               \'filenames\'\n'

