Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-08-13T22:10:23-07:00
Author: Katja SÃ¼ss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/719cf2f77284f46b16ab790e9a124d0359e15ebe

Fix broken relations info (#1673)

* Update add.py

* Fix broken relations info

- Additional info for broken: paths.
- Catch and ignore invalid/broken relations.
- Fix @id for relations, broken, and relation stats
- fix items_total for broken

* Create 1673.bugfix

* black

Files changed:
A news/1673.bugfix
M src/plone/restapi/services/relations/add.py
M src/plone/restapi/services/relations/get.py

b'diff --git a/news/1673.bugfix b/news/1673.bugfix\nnew file mode 100644\nindex 0000000000..fec8d4d327\n--- /dev/null\n+++ b/news/1673.bugfix\n@@ -0,0 +1 @@\n+Fix broken relations info. @ksuess\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/relations/add.py b/src/plone/restapi/services/relations/add.py\nindex a86eac0732..de9b186561 100644\n--- a/src/plone/restapi/services/relations/add.py\n+++ b/src/plone/restapi/services/relations/add.py\n@@ -25,7 +25,7 @@\n \n @implementer(IPublishTraverse)\n class PostRelations(Service):\n-    """Create new relations."""\n+    """Create new relations or rebuild relations."""\n \n     def __init__(self, context, request):\n         super().__init__(context, request)\ndiff --git a/src/plone/restapi/services/relations/get.py b/src/plone/restapi/services/relations/get.py\nindex ea79c96b5d..8ff4f424b7 100644\n--- a/src/plone/restapi/services/relations/get.py\n+++ b/src/plone/restapi/services/relations/get.py\n@@ -31,14 +31,6 @@\n     except ImportError:\n         get_relations_stats = None\n \n-try:\n-    from Products.CMFPlone.relationhelper import rebuild_relations\n-except ImportError:\n-    try:\n-        from collective.relationhelpers.api import rebuild_relations\n-    except ImportError:\n-        rebuild_relations = None\n-\n \n def make_summary(obj, request):\n     """Add UID to metadata_fields."""\n@@ -100,7 +92,8 @@ def get_relations(\n         except TypeError as e:\n             raise ValueError(str(e))\n     count = 0\n-    relations = relation_catalog.findRelations(query)\n+    relations = list(relation_catalog.findRelations(query))\n+\n     for relation in relations:\n         if relation.isBroken():\n             if not onlyBroken:\n@@ -125,11 +118,15 @@ def get_relations(\n         if onlyBroken:\n             results[relation.from_attribute].append(\n                 [\n-                    source_obj and source_obj.absolute_url() or "",\n-                    target_obj and target_obj.absolute_url() or "",\n+                    source_obj and source_obj.absolute_url() or relation.from_path,\n+                    target_obj and target_obj.absolute_url() or relation.to_path,\n                 ]\n             )\n         else:\n+            # Exclude relations without source or target.\n+            # Dispensable with https://github.com/zopefoundation/z3c.relationfield/pull/24\n+            if not source_obj or not target_obj:\n+                continue\n             results[relation.from_attribute].append(\n                 {\n                     "source": make_summary(source_obj, request),\n@@ -174,8 +171,6 @@ class GetRelations(Service):\n         onlyBroken: boolean: dictionary with broken relations per relation type\n         query_source: Restrict relations by path or SearchableText\n         query_target: Restrict relations by path or SearchableText\n-        rebuild: Rebuild relations\n-        flush: If rebuild, then this also flushes the intIds\n \n     Returns:\n         stats if no parameter, else relations\n@@ -188,7 +183,6 @@ def reply(self):\n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n-\n         source = self.request.get("source", None)\n         target = self.request.get("target", None)\n         relationship = self.request.get("relation", None)\n@@ -209,14 +203,14 @@ def reply(self):\n             if len(relationNames) == 0:\n                 return self.reply_no_content(status=204)\n             result = {\n-                "@id": f\'{self.request["SERVER_URL"]}{self.request.environ["REQUEST_URI"]}\',\n+                "@id": f"{self.context.absolute_url()}/@relations?onlyBroken=true",\n                 "relations": {},\n             }\n             for relationName in relationNames:\n                 rels = get_relations(relationship=relationName, onlyBroken=True)\n                 result["relations"][relationName] = {\n                     "items": rels[relationName],\n-                    "items_total": len(rels),\n+                    "items_total": len(rels[relationName]),\n                 }\n             return result\n \n@@ -224,9 +218,7 @@ def reply(self):\n         if not source and not target and not relationship:\n             try:\n                 stats = relation_stats()\n-                stats[\n-                    "@id"\n-                ] = f\'{self.request["SERVER_URL"]}{self.request.environ["REQUEST_URI"]}\'\n+                stats["@id"] = f"{self.context.absolute_url()}/@relations"\n                 return stats\n             except ImportError:\n                 self.request.response.setStatus(501)\n@@ -287,7 +279,7 @@ def reply(self):\n         )\n \n         result = {\n-            "@id": f\'{self.request["SERVER_URL"]}{self.request.environ["REQUEST_URI"]}\',\n+            "@id": f"{self.context.absolute_url()}/@relations?{self.request[\'QUERY_STRING\']}",\n             "relations": {},\n         }\n         if relationship and not data:\n'

