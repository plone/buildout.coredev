Repository: plone.app.testing


Branch: refs/heads/master
Date: 2020-10-02T16:27:32+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.testing/commit/37f569239bc49fb69106ae115fc1c55c7f83d4e8

Removed backwards compatibility code for old quickinstaller.

Current plone.app.testing is only for Plone 5.2+, so this code was no longer used.
See also PLIP 1775: https://github.com/plone/Products.CMFPlone/issues/1775.

Files changed:
A news/1775.feature
M docs/README.rst
M src/plone/app/testing/helpers.py
M src/plone/app/testing/helpers.rst
M src/plone/app/testing/layers.py

b'diff --git a/docs/README.rst b/docs/README.rst\nindex 093c605..3181d01 100644\n--- a/docs/README.rst\n+++ b/docs/README.rst\n@@ -505,11 +505,11 @@ Product and profile installation\n                     ...\n \n ``quickInstallProduct(portal, productName, reinstall=False)``\n-    Use this function to install a particular product into the given Plone\n-    site, using the ``portal_quickinstaller`` tool. If ``reinstall`` is\n-    ``False`` and the product is already installed, nothing will happen; if\n-    ``reinstall`` is ``True``, the product will be reinstalled. The\n-    ``productName`` should be a full dotted name, e.g. ``Products.MyProduct``,\n+    Use this function to install a particular product into the given Plone site,\n+    using the add-ons control panel code (portal setup).\n+    If ``reinstall`` is ``False`` and the product is already installed, nothing will happen.\n+    If ``reinstall`` is true, perform an uninstall and install if the product is installed already.\n+    The ``productName`` should be a full dotted name, e.g. ``Products.MyProduct``,\n     or ``my.product``.\n \n     For example::\n@@ -1143,13 +1143,13 @@ To apply a particular extension profile::\n This is the preferred method of installing a product\'s configuration.\n \n To install an add-on product into the Plone site using the\n-``portal_quickinstaller`` tool::\n+add-ons control panel::\n \n     from plone.app.testing import quickInstallProduct\n \n     quickInstallProduct(portal, \'my.product\')\n \n-To re-install a product using the quick-installer::\n+To uninstall and install a product using the add-ons control panel::\n \n     quickInstallProduct(portal, \'my.product\', reinstall=True)\n \n@@ -1164,10 +1164,10 @@ has been applied. Some of the more common such tests are shown below.\n To verify that a product has been installed (e.g. as a dependency via\n ``metadata.xml``)::\n \n-    from Products.CMFCore.utils import getToolByName\n+    from Products.CMFPlone.utils import get_installer\n \n-    quickinstaller = getToolByName(portal, \'portal_quickinstaller\')\n-    self.assertTrue(quickinstaller.isProductInstalled(\'my.product\'))\n+    qi = get_installer(portal)\n+    self.assertTrue(qi.is_product_installed(\'my.product\'))\n \n To verify that a particular content type has been installed (e.g. via\n ``types.xml``)::\ndiff --git a/news/1775.feature b/news/1775.feature\nnew file mode 100644\nindex 0000000..000f08d\n--- /dev/null\n+++ b/news/1775.feature\n@@ -0,0 +1,4 @@\n+Removed backwards compatibility code for old quickinstaller.\n+Current plone.app.testing is only for Plone 5.2+, so this code was no longer used.\n+See also `PLIP 1775 <https://github.com/plone/Products.CMFPlone/issues/1775>`_.\n+[maurits]\ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 506a46a..1d801fa 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -68,9 +68,10 @@ def tearDownMultiPluginRegistration(pluginName):\n \n \n def quickInstallProduct(portal, productName, reinstall=False):\n-    """Install a product using the ``portal_quickinstaller`` tool. If\n-    ``reinstall`` is false and the product is already installed, do nothing.\n-    If ``reinstall`` is true, perform an explicit reinstall if the product\n+    """Install a product using the add-ons control panel (portal setup).\n+\n+    If ``reinstall`` is false and the product is already installed, do nothing.\n+    If ``reinstall`` is true, perform an uninstall and install if the product\n     is installed already.\n     """\n \n@@ -83,28 +84,16 @@ def quickInstallProduct(portal, productName, reinstall=False):\n \n     zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n \n-    try:\n-        from Products.CMFPlone.utils import get_installer\n-    except ImportError:\n-        # BBB For Plone 5.0 and lower.\n-        qi = portal[\'portal_quickinstaller\']\n-        old_qi = True\n-    else:\n-        qi = get_installer(portal)\n-        old_qi = False\n+    from Products.CMFPlone.utils import get_installer\n+\n+    qi = get_installer(portal)\n \n     try:\n-        if old_qi:\n-            if not qi.isProductInstalled(productName):\n-                qi.installProduct(productName)\n-            elif reinstall:\n-                qi.reinstallProducts([productName])\n-        else:\n-            if not qi.is_product_installed(productName):\n-                qi.install_product(productName, allow_hidden=True)\n-            elif reinstall:\n-                qi.uninstall_product(productName)\n-                qi.install_product(productName, allow_hidden=True)\n+        if not qi.is_product_installed(productName):\n+            qi.install_product(productName, allow_hidden=True)\n+        elif reinstall:\n+            qi.uninstall_product(productName)\n+            qi.install_product(productName, allow_hidden=True)\n \n         portal.clearCurrentSkin()\n         portal.setupCurrentSkin(portal.REQUEST)\ndiff --git a/src/plone/app/testing/helpers.rst b/src/plone/app/testing/helpers.rst\nindex 7f1eac5..44368e1 100644\n--- a/src/plone/app/testing/helpers.rst\n+++ b/src/plone/app/testing/helpers.rst\n@@ -38,7 +38,7 @@ layer, we will perform the following setup:\n 4. Make some persistent changes, to illustrate how these are torn down when\n    we pop the ZODB ``DemoStorage``.\n \n-5. Install a product using the ``get_installer`` view (or the old ``portal_quickinstaller`` tool).\n+5. Install a product using the ``get_installer`` view.\n \n 6. Apply a named extension profile.\n \n@@ -50,15 +50,9 @@ course, if our setup had changed any other global or external state, we would\n need to tear that down as well.\n \n     >>> def is_installed(portal, product_name):\n-    ...     try:\n-    ...         from Products.CMFPlone.utils import get_installer\n-    ...     except ImportError:\n-    ...         # BBB For Plone 5.0 and lower.\n-    ...         qi = portal[\'portal_quickinstaller\']\n-    ...         return qi.isProductInstalled(product_name)\n-    ...     else:\n-    ...         qi = get_installer(portal)\n-    ...         return qi.is_product_installed(product_name)\n+    ...     from Products.CMFPlone.utils import get_installer\n+    ...     qi = get_installer(portal)\n+    ...     return qi.is_product_installed(product_name)\n \n     >>> from plone.testing import Layer\n     >>> from plone.testing import zca, zope, zodb\n@@ -106,7 +100,7 @@ need to tear that down as well.\n     ...             # Make some persistent changes\n     ...             portal.title = u"New title"\n     ...\n-    ...             # Install a product using portal_quickinstaller\n+    ...             # Install a product using the addons control panel\n     ...             helpers.quickInstallProduct(portal, \'plone.app.testing\')\n     ...             assert is_installed(portal, \'plone.app.testing\')\n     ...\n@@ -155,7 +149,7 @@ having taken effect.\n     ...     print(portal.title)\n     New title\n \n-We should also see our product installation in the quickinstaller tool\n+We should also see our product installation in the add-ons control panel\n and the results of the profile having been applied.\n \n     >>> from Products.GenericSetup.tool import UNKNOWN\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex c04dbd9..12d8154 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -81,19 +81,6 @@ class PloneFixture(Layer):\n         except ImportError:\n             pass\n \n-    # try:\n-    #    import Products.PasswordResetTool\n-    #    products = products + (\n-    #        (\'Products.PasswordResetTool\', {\'loadZCML\': True}, ),)\n-    # except ImportError:\n-    #    pass\n-    # try:\n-    #    import Products.CMFQuickInstallerTool\n-    #    products = products + (\n-    #        (\'Products.CMFQuickInstallerTool\', {\'loadZCML\': True}, ),)\n-    # except ImportError:\n-    #    pass\n-\n     # Extension profiles to be installed with site setup\n     extensionProfiles = (\n         \'plonetheme.barceloneta:default\',\n'

Repository: plone.app.testing


Branch: refs/heads/master
Date: 2020-10-02T22:09:23+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.testing/commit/5d36c613658aa7088517a6eae616c56a457d9e49

Merge pull request #71 from plone/maurits/no-qi

Removed backwards compatibility code for old quickinstaller.

Files changed:
A news/1775.feature
M docs/README.rst
M src/plone/app/testing/helpers.py
M src/plone/app/testing/helpers.rst
M src/plone/app/testing/layers.py

b'diff --git a/docs/README.rst b/docs/README.rst\nindex 093c605..3181d01 100644\n--- a/docs/README.rst\n+++ b/docs/README.rst\n@@ -505,11 +505,11 @@ Product and profile installation\n                     ...\n \n ``quickInstallProduct(portal, productName, reinstall=False)``\n-    Use this function to install a particular product into the given Plone\n-    site, using the ``portal_quickinstaller`` tool. If ``reinstall`` is\n-    ``False`` and the product is already installed, nothing will happen; if\n-    ``reinstall`` is ``True``, the product will be reinstalled. The\n-    ``productName`` should be a full dotted name, e.g. ``Products.MyProduct``,\n+    Use this function to install a particular product into the given Plone site,\n+    using the add-ons control panel code (portal setup).\n+    If ``reinstall`` is ``False`` and the product is already installed, nothing will happen.\n+    If ``reinstall`` is true, perform an uninstall and install if the product is installed already.\n+    The ``productName`` should be a full dotted name, e.g. ``Products.MyProduct``,\n     or ``my.product``.\n \n     For example::\n@@ -1143,13 +1143,13 @@ To apply a particular extension profile::\n This is the preferred method of installing a product\'s configuration.\n \n To install an add-on product into the Plone site using the\n-``portal_quickinstaller`` tool::\n+add-ons control panel::\n \n     from plone.app.testing import quickInstallProduct\n \n     quickInstallProduct(portal, \'my.product\')\n \n-To re-install a product using the quick-installer::\n+To uninstall and install a product using the add-ons control panel::\n \n     quickInstallProduct(portal, \'my.product\', reinstall=True)\n \n@@ -1164,10 +1164,10 @@ has been applied. Some of the more common such tests are shown below.\n To verify that a product has been installed (e.g. as a dependency via\n ``metadata.xml``)::\n \n-    from Products.CMFCore.utils import getToolByName\n+    from Products.CMFPlone.utils import get_installer\n \n-    quickinstaller = getToolByName(portal, \'portal_quickinstaller\')\n-    self.assertTrue(quickinstaller.isProductInstalled(\'my.product\'))\n+    qi = get_installer(portal)\n+    self.assertTrue(qi.is_product_installed(\'my.product\'))\n \n To verify that a particular content type has been installed (e.g. via\n ``types.xml``)::\ndiff --git a/news/1775.feature b/news/1775.feature\nnew file mode 100644\nindex 0000000..000f08d\n--- /dev/null\n+++ b/news/1775.feature\n@@ -0,0 +1,4 @@\n+Removed backwards compatibility code for old quickinstaller.\n+Current plone.app.testing is only for Plone 5.2+, so this code was no longer used.\n+See also `PLIP 1775 <https://github.com/plone/Products.CMFPlone/issues/1775>`_.\n+[maurits]\ndiff --git a/src/plone/app/testing/helpers.py b/src/plone/app/testing/helpers.py\nindex 506a46a..1d801fa 100644\n--- a/src/plone/app/testing/helpers.py\n+++ b/src/plone/app/testing/helpers.py\n@@ -68,9 +68,10 @@ def tearDownMultiPluginRegistration(pluginName):\n \n \n def quickInstallProduct(portal, productName, reinstall=False):\n-    """Install a product using the ``portal_quickinstaller`` tool. If\n-    ``reinstall`` is false and the product is already installed, do nothing.\n-    If ``reinstall`` is true, perform an explicit reinstall if the product\n+    """Install a product using the add-ons control panel (portal setup).\n+\n+    If ``reinstall`` is false and the product is already installed, do nothing.\n+    If ``reinstall`` is true, perform an uninstall and install if the product\n     is installed already.\n     """\n \n@@ -83,28 +84,16 @@ def quickInstallProduct(portal, productName, reinstall=False):\n \n     zope.login(app[\'acl_users\'], SITE_OWNER_NAME)\n \n-    try:\n-        from Products.CMFPlone.utils import get_installer\n-    except ImportError:\n-        # BBB For Plone 5.0 and lower.\n-        qi = portal[\'portal_quickinstaller\']\n-        old_qi = True\n-    else:\n-        qi = get_installer(portal)\n-        old_qi = False\n+    from Products.CMFPlone.utils import get_installer\n+\n+    qi = get_installer(portal)\n \n     try:\n-        if old_qi:\n-            if not qi.isProductInstalled(productName):\n-                qi.installProduct(productName)\n-            elif reinstall:\n-                qi.reinstallProducts([productName])\n-        else:\n-            if not qi.is_product_installed(productName):\n-                qi.install_product(productName, allow_hidden=True)\n-            elif reinstall:\n-                qi.uninstall_product(productName)\n-                qi.install_product(productName, allow_hidden=True)\n+        if not qi.is_product_installed(productName):\n+            qi.install_product(productName, allow_hidden=True)\n+        elif reinstall:\n+            qi.uninstall_product(productName)\n+            qi.install_product(productName, allow_hidden=True)\n \n         portal.clearCurrentSkin()\n         portal.setupCurrentSkin(portal.REQUEST)\ndiff --git a/src/plone/app/testing/helpers.rst b/src/plone/app/testing/helpers.rst\nindex 7f1eac5..44368e1 100644\n--- a/src/plone/app/testing/helpers.rst\n+++ b/src/plone/app/testing/helpers.rst\n@@ -38,7 +38,7 @@ layer, we will perform the following setup:\n 4. Make some persistent changes, to illustrate how these are torn down when\n    we pop the ZODB ``DemoStorage``.\n \n-5. Install a product using the ``get_installer`` view (or the old ``portal_quickinstaller`` tool).\n+5. Install a product using the ``get_installer`` view.\n \n 6. Apply a named extension profile.\n \n@@ -50,15 +50,9 @@ course, if our setup had changed any other global or external state, we would\n need to tear that down as well.\n \n     >>> def is_installed(portal, product_name):\n-    ...     try:\n-    ...         from Products.CMFPlone.utils import get_installer\n-    ...     except ImportError:\n-    ...         # BBB For Plone 5.0 and lower.\n-    ...         qi = portal[\'portal_quickinstaller\']\n-    ...         return qi.isProductInstalled(product_name)\n-    ...     else:\n-    ...         qi = get_installer(portal)\n-    ...         return qi.is_product_installed(product_name)\n+    ...     from Products.CMFPlone.utils import get_installer\n+    ...     qi = get_installer(portal)\n+    ...     return qi.is_product_installed(product_name)\n \n     >>> from plone.testing import Layer\n     >>> from plone.testing import zca, zope, zodb\n@@ -106,7 +100,7 @@ need to tear that down as well.\n     ...             # Make some persistent changes\n     ...             portal.title = u"New title"\n     ...\n-    ...             # Install a product using portal_quickinstaller\n+    ...             # Install a product using the addons control panel\n     ...             helpers.quickInstallProduct(portal, \'plone.app.testing\')\n     ...             assert is_installed(portal, \'plone.app.testing\')\n     ...\n@@ -155,7 +149,7 @@ having taken effect.\n     ...     print(portal.title)\n     New title\n \n-We should also see our product installation in the quickinstaller tool\n+We should also see our product installation in the add-ons control panel\n and the results of the profile having been applied.\n \n     >>> from Products.GenericSetup.tool import UNKNOWN\ndiff --git a/src/plone/app/testing/layers.py b/src/plone/app/testing/layers.py\nindex c04dbd9..12d8154 100644\n--- a/src/plone/app/testing/layers.py\n+++ b/src/plone/app/testing/layers.py\n@@ -81,19 +81,6 @@ class PloneFixture(Layer):\n         except ImportError:\n             pass\n \n-    # try:\n-    #    import Products.PasswordResetTool\n-    #    products = products + (\n-    #        (\'Products.PasswordResetTool\', {\'loadZCML\': True}, ),)\n-    # except ImportError:\n-    #    pass\n-    # try:\n-    #    import Products.CMFQuickInstallerTool\n-    #    products = products + (\n-    #        (\'Products.CMFQuickInstallerTool\', {\'loadZCML\': True}, ),)\n-    # except ImportError:\n-    #    pass\n-\n     # Extension profiles to be installed with site setup\n     extensionProfiles = (\n         \'plonetheme.barceloneta:default\',\n'

