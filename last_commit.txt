Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-09-13T08:28:28+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/1719fe7561dc55f8ca5d44b1bf48661cbd866c78

port robot test to use only browser library

Files changed:
M src/plone/app/multilingual/tests/robot/test_translate_content.robot

b'diff --git a/src/plone/app/multilingual/tests/robot/test_translate_content.robot b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\nindex 6c3a9d20..b7410ecd 100644\n--- a/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n@@ -1,16 +1,13 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/keywords.robot\n-Resource  plone/app/robotframework/saucelabs.robot\n-Resource  plone/app/robotframework/selenium.robot\n+Resource    plone/app/robotframework/browser.robot\n \n-Library  Remote  ${PLONE_URL}/RobotRemote\n+Library    Remote    ${PLONE_URL}/RobotRemote\n \n-Test Setup  Run Keywords  Plone test setup\n-Test Teardown  Run keywords  Plone test teardown\n+Test Setup    Run Keywords    Plone test setup\n+Test Teardown    Run keywords    Plone test teardown\n \n-\n-*** Test Cases ***\n+*** Test cases ***\n \n Scenario: As an editor I can translate a document\n     Given a site owner\n@@ -24,56 +21,44 @@ Scenario: As a visitor I can view the translation\n      When I switch to Catalan\n      Then I can view the document in Catalan\n \n-\n *** Keywords ***\n \n+Pause\n+    [Documentation]  Visually pause test execution with interactive dialog by\n+    ...              importing **Dialogs**-library and calling its\n+    ...              **Pause Execution**-keyword.\n+    Import library  Dialogs\n+    Pause execution\n+\n # Given\n \n a site owner\n   Enable autologin as  Manager\n \n-a visitor\n-  Disable autologin\n-\n a document in English\n-  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/en/\n-  ...  id=an-english-document\n-  ...  title=An English Document\n+  Create content    type=Document    container=/${PLONE_SITE_ID}/en/    id=an-english-document    title=An English Document\n \n a document in English with Catalan translation\n-  ${uid} =  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/en/\n-  ...  id=an-english-document\n-  ...  title=An English Document\n-  Create translation  ${uid}  ca\n-  ...  title=A Catalan Document\n-  Go to  ${PLONE_URL}/resolveuid/${uid}\n-  Wait until page contains  An English Document\n+  ${uid}=    Create content    type=Document    container=/${PLONE_SITE_ID}/en/    id=an-english-document    title=An English Document\n+  Create translation    ${uid}    ca    title=A Catalan Document\n+  Go to    ${PLONE_URL}/resolveuid/${uid}\n+  Get Element    //h1[1][text()=\'An English Document\']\n \n # When\n \n I translate the document into Catalan\n-  Go to  ${PLONE_URL}/en/an-english-document/@@create_translation?language=ca\n-  Capture page screenshot\n-  Input Text  form.widgets.IDublinCore.title  A Catalan Document\n-  Click Link  Dates  # workaround for of TinyMCE editor field problem\n-  Capture page screenshot\n-  Click button  css=#form-buttons-save\n-\n-  # Wait until page contains  Element creat\n-  # (Catalan translations not currently available)\n-\n-  Wait until page contains  A Catalan Document\n+  Go to    ${PLONE_URL}/en/an-english-document/@@create_translation?language=ca\n+  Take screenshot\n+  Type Text    //input[@name="form.widgets.IDublinCore.title"]    A Catalan Document\n+  Take screenshot\n+  Click    //button[@id="form-buttons-save"]\n \n I switch to Catalan\n-  Click Link  xpath=//a[@title=\'Catal\xc3\xa0\']\n-  Wait until page contains  A Catalan Document\n+  Click    //a[@title=\'Catal\xc3\xa0\']\n+  Get Element    //h1[1][text()=\'A Catalan Document\']\n \n # Then\n \n I can view the document in Catalan\n-  Page Should Contain Element\n-  ...  xpath=//h1[1][text()=\'A Catalan Document\']\n-  Page Should Contain Element\n-  ...  xpath=//ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'Catal\xc3\xa0\']\n+  Get Element    //h1[1][text()=\'A Catalan Document\']\n+  Get Element    //ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'Catal\xc3\xa0\']\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-09-13T09:14:54+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/0dc4a7272d7b33538b13caf7d5dc211efb7d6e98

port robot test to use browser library

Files changed:
M src/plone/app/multilingual/tests/robot/test_schemaeditor.robot

b'diff --git a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\nindex 0ce75781..bda8cfc3 100644\n--- a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n@@ -1,16 +1,13 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/keywords.robot\n-Resource  plone/app/robotframework/saucelabs.robot\n-Resource  plone/app/robotframework/selenium.robot\n+Resource    plone/app/robotframework/browser.robot\n \n-Library  Remote  ${PLONE_URL}/RobotRemote\n+Library    Remote    ${PLONE_URL}/RobotRemote\n \n-Test Setup  Run Keywords  Plone test setup\n-Test Teardown  Run keywords  Plone test teardown\n+Test Setup    Run Keywords    Plone test setup\n+Test Teardown    Run keywords    Plone test teardown\n \n-\n-*** Test Cases ***\n+*** Test cases ***\n \n Scenario: As a site owner I can see language independent field setting\n     Given a site owner\n@@ -42,54 +39,54 @@ Scenario: As a site owner I can unset field from being language independent\n # Given\n \n a site owner\n-  Enable autologin as  Manager\n+    Enable autologin as    Manager\n \n a dexterity content type with a TTW field\n-  Create content type  Custom\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/@@fields\n-  Wait until page contains element  css=body.template-fields\n+    Create content type    Custom\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/@@fields\n+    Get Element    //body[contains(@class, "template-fields")]\n \n a dexterity content type field settings form\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/@@fields\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n-  Wait until page contains  Language independent field\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/@@fields\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/custom\n+    Get Text    //div[@id="form-widgets-IFieldLanguageIndependent-languageindependent"]    contains    Language independent field\n \n a dexterity content type with a language independent TTW field\n-  Create content type  Custom\n-  Set field language independent  Custom  custom  on\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/@@fields\n-  Wait until page contains element  css=body.template-fields\n+    Create content type    Custom\n+    Set field language independent    Custom    custom    on\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/@@fields\n+    Get Element    //body[contains(@class, "template-fields")]\n \n # When\n \n I open the field settings\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n-  Page should contain  Language independent field\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/custom\n+    Get Text    //div[@id="form-widgets-IFieldLanguageIndependent-languageindependent"]    contains    Language independent field\n \n I select the language independent field setting\n-  Select checkbox  form-widgets-IFieldLanguageIndependent-languageindependent-0\n-  Checkbox should be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Check Checkbox    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    checked\n \n I save the form\n-  Wait until page contains element  css=#form-buttons-save\n-  Click button  css=#form-buttons-save\n-  Wait until keyword succeeds  1  10  Element should not be visible  .plone-modal-wrapper\n+    Get Element    //*[@id="form-buttons-save"]\n+    Click    //*[@id="form-buttons-save"]\n+    Get Element Count    //div[contains(@class,"plone-modal-wrapper")]    should be    0\n \n I open the form again\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n-  Wait until page contains  Language independent field\n+    Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n+    Get Text    //div[@id="form-widgets-IFieldLanguageIndependent-languageindependent"]    contains    Language independent field\n \n I unselect the language independent field setting\n-  Unselect checkbox  form-widgets-IFieldLanguageIndependent-languageindependent-0\n-  Checkbox should not be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Uncheck Checkbox    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    unchecked\n \n # Then\n \n I can see the language independent field setting\n-  Wait until page contains element  id=form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Get Element    //*[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]\n \n the language independent field setting is selected\n-  Checkbox should be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    checked\n \n the language independent field setting is not selected\n-  Checkbox should not be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    unchecked\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-09-13T09:16:24+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/9d1ca059fc9f9b29fd628632bbced5139ac2eaff

remove unused keyword from robot test

Files changed:
M src/plone/app/multilingual/tests/robot/test_translate_content.robot

b'diff --git a/src/plone/app/multilingual/tests/robot/test_translate_content.robot b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\nindex b7410ecd..316062f2 100644\n--- a/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n@@ -23,13 +23,6 @@ Scenario: As a visitor I can view the translation\n \n *** Keywords ***\n \n-Pause\n-    [Documentation]  Visually pause test execution with interactive dialog by\n-    ...              importing **Dialogs**-library and calling its\n-    ...              **Pause Execution**-keyword.\n-    Import library  Dialogs\n-    Pause execution\n-\n # Given\n \n a site owner\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-09-13T11:31:46+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/76b13ac6a232e2b61445bd97afc83751d479df01

port robot test to use browser library

Files changed:
M src/plone/app/multilingual/tests/robot/test_add_translation.robot

b'diff --git a/src/plone/app/multilingual/tests/robot/test_add_translation.robot b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\nindex 46a5b9ac..236a49dd 100644\n--- a/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n@@ -1,14 +1,11 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/keywords.robot\n-Resource  plone/app/robotframework/saucelabs.robot\n-Resource  plone/app/robotframework/selenium.robot\n-Resource  Products/CMFPlone/tests/robot/keywords.robot\n+Resource    plone/app/robotframework/browser.robot\n \n-Library  Remote  ${PLONE_URL}/RobotRemote\n+Library    Remote    ${PLONE_URL}/RobotRemote\n \n-Test Setup  Run Keywords  Plone test setup\n-Test Teardown  Run keywords  Plone test teardown\n+Test Setup    Run Keywords    Plone test setup\n+Test Teardown    Run keywords    Plone test teardown\n \n *** Test Cases ***\n \n@@ -24,74 +21,45 @@ Scenario: As an editor I can add new translation\n \n *** Keywords ***\n \n-Setup test browser\n-  Set Selenium speed  0.5s\n-  Open test browser\n-  Set window size  1200  900\n-\n # Given\n \n a site owner\n-  Enable autologin as  Manager\n+    Enable autologin as    Manager\n \n a document in English\n-  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/en/\n-  ...  id=an-english-document\n-  ...  title=An English Document\n+    Create content    type=Document    container=/${PLONE_SITE_ID}/en/    id=an-english-document    title=An English Document\n \n a document in Catalan\n-  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/ca/\n-  ...  id=a-catalan-document\n-  ...  title=A Catalan Document\n+    Create content    type=Document    container=/${PLONE_SITE_ID}/ca/    id=a-catalan-document    title=A Catalan Document\n \n # When\n \n I view the Catalan document\n-  Go to  ${PLONE_URL}/ca/a-catalan-document\n-  Wait until page contains  A Catalan Document\n+    Go to    ${PLONE_URL}/ca/a-catalan-document\n+    Get Element    //h1[1][text()=\'A Catalan Document\']\n \n I link the document in English as a translation\n-  Page should contain element  css=#plone-contentmenu-multilingual a\n-  Capture page screenshot\n-  Element should be visible  css=#plone-contentmenu-multilingual a\n-  Click Element  css=#plone-contentmenu-multilingual a\n-  Wait until page contains element  css=#_modify_translations\n-  Wait until element is visible  css=#_modify_translations\n-\n-  Click Element  css=#_modify_translations\n-  Given patterns are loaded\n-  Wait until page contains element  css=#translations-overview .connectTranslationAction\n-\n-  Click Element  css=#translations-overview .connectTranslationAction\n-  Wait until page contains element  css=.select2-choices\n-  Wait until element is visible  css=.select2-choices\n-  Click Element  css=#formfield-form-widgets-content .pat-relateditems-container button.mode.search\n-  Input Text  css=#formfield-form-widgets-content .select2-input  en\n-  Wait until page contains element  xpath=(//span[contains(., \'An English Document\')])\n-  Wait until element is visible  xpath=(//span[contains(., \'An English Document\')])\n-  Click Element  xpath=(//span[contains(., \'An English Document\')])\n-  Wait until page contains  An English Document\n-\n-  # We need a complicated xpath, because for some reason a button with this id is there twice.\n-  # The first one is hidden.\n-  Click Element  xpath=(//*[contains(@class, \'modal-footer\')]//button[@id=\'form-buttons-connect_translation\'])\n-  Wait until page contains element  xpath=(//h3[@class="translationTitle"])\n-  Sleep  5\n-  Wait until element is visible  xpath=(//h3[@class="translationTitle"])\n-  Set Focus To Element  xpath=(//*[@id="translations-overview"]//a[contains(@href,"a-catalan-document")])\n-  Click Element  xpath=(//*[@id="translations-overview"]//a[contains(text(),\'/plone/ca/a-catalan-document\')])\n-  Wait until page contains  A Catalan Document\n+    Get Element    //li[@id="plone-contentmenu-multilingual"]/a\n+    Take Screenshot\n+    Get Element States    //li[@id="plone-contentmenu-multilingual"]/a     contains    visible\n+    Click    //li[@id="plone-contentmenu-multilingual"]/a\n+    Get Element States    //a[@id="_modify_translations"]     contains    visible\n+    Click    //a[@id="_modify_translations"]\n+    Click    //table[@id="translations-overview"]/tbody/tr[1]/td[3]/a[contains(@class,"connectTranslationAction")]\n+    Click    //div[@id="formfield-form-widgets-content"]//div[contains(@class,"pat-relateditems-container")]//button[contains(@class,"mode") and contains(@class,"search")]\n+    Type Text    //div[@id="formfield-form-widgets-content"]//input[contains(@class,"select2-input")]    en\n+    Click    //span[contains(., \'An English Document\')]\n+    Click    //*[contains(@class, \'modal-footer\')]//button[@id=\'form-buttons-connect_translation\']\n+    Get Text    //table[@id="translations-overview"]/tbody/tr[1]/td[2]/h3[@class="translationTitle"]    should be    An English Document\n+    Click    //table[@id="translations-overview"]//a[contains(text(),\'/plone/ca/a-catalan-document\')]\n+    Get Text    //*[@id="content"]/header/h1    should be    A Catalan Document\n \n I switch to English\n-  Click Link  xpath=//a[@title=\'English\']\n-  Wait until page contains  An English Document\n+    Click    //a[@title=\'English\']\n+    Get Element    //h1[1][contains(text(),\'An English Document\')]\n \n # Then\n \n I can view the document in English\n-  Wait until page contains element\n-  ...  xpath=//h1[1][contains(text(),\'English Document\')]\n-  Wait until page contains element\n-  ...  xpath=//ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'English\']\n+    Get Element    //h1[1][contains(text(),\'English Document\')]\n+    Get Element    //ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'English\']\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-09-13T11:35:52+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/a0980e68d5957a126efd70b40b0a4aea5831df67

add news

Files changed:
A news/459.tests

b'diff --git a/news/459.tests b/news/459.tests\nnew file mode 100644\nindex 000000000..049473239\n--- /dev/null\n+++ b/news/459.tests\n@@ -0,0 +1 @@\n+port robot tests to use the browser library [@1letter]\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-09-13T18:44:13+02:00
Author: 1letter (1letter) <1letter@gmx.de>
Commit: https://github.com/plone/plone.app.multilingual/commit/6a06ca51dc3e9834aa9ce4e83db360ca90863959

Update imports for test setup

Files changed:
M src/plone/app/multilingual/testing.py

b'diff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py\nindex 9e587dae..aa64c841 100644\n--- a/src/plone/app/multilingual/testing.py\n+++ b/src/plone/app/multilingual/testing.py\n@@ -18,7 +18,8 @@\n from plone.dexterity.utils import iterSchemataForType\n from plone.rfc822 import constructMessageFromSchemata\n from plone.rfc822 import initializeObjectFromSchemata\n-from plone.testing import z2\n+from plone.testing.layer import Layer\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n@@ -156,7 +157,7 @@ def setUpPloneSite(self, portal):\n )\n \n \n-class MultipleLanguagesLayer(z2.Layer):\n+class MultipleLanguagesLayer(Layer):\n     defaultBases = (PLONE_APP_MULTILINGUAL_PRESET_FIXTURE,)\n \n \n@@ -257,7 +258,11 @@ def create_translation(self, *args, **kwargs):\n )\n \n PLONE_APP_MULTILINGUAL_ROBOT_TESTING = FunctionalTesting(\n-    bases=(MULTIPLE_LANGUAGES_LAYER, REMOTE_LIBRARY_BUNDLE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(\n+        MULTIPLE_LANGUAGES_LAYER,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        WSGI_SERVER_FIXTURE,\n+    ),\n     name="plone.app.multilingual:Robot",\n )\n \n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-18T09:13:46+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/f0172cee868e81e353baf3ca5d79687453b2e766

Merge branch 'master' into port-robot-tests

Files changed:
A news/303.bugfix
A news/464.bugfix
M .pre-commit-config.yaml
M README.rst
M src/plone/app/multilingual/browser/images/gtranslate.png
M src/plone/app/multilingual/browser/javascript/babel_helper.js
M src/plone/app/multilingual/browser/stylesheet/multilingual.css
M src/plone/app/multilingual/browser/templates/modify_translations.pt
M src/plone/app/multilingual/browser/translate.py

b'diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex da56023f8..f70417dc5 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -7,7 +7,7 @@ ci:\n \n repos:\n -   repo: https://github.com/asottile/pyupgrade\n-    rev: v3.15.2\n+    rev: v3.17.0\n     hooks:\n     -   id: pyupgrade\n         args: [--py38-plus]\n@@ -16,7 +16,7 @@ repos:\n     hooks:\n     -   id: isort\n -   repo: https://github.com/psf/black\n-    rev: 24.4.2\n+    rev: 24.10.0\n     hooks:\n     -   id: black\n -   repo: https://github.com/collective/zpretty\n@@ -32,7 +32,7 @@ repos:\n #  """\n ##\n -   repo: https://github.com/PyCQA/flake8\n-    rev: 7.0.0\n+    rev: 7.1.1\n     hooks:\n     -   id: flake8\n \n@@ -71,7 +71,7 @@ repos:\n     -   id: check-python-versions\n         args: [\'--only\', \'setup.py,pyproject.toml\']\n -   repo: https://github.com/collective/i18ndude\n-    rev: "6.2.0"\n+    rev: "6.2.1"\n     hooks:\n     -   id: i18ndude\n \ndiff --git a/README.rst b/README.rst\nindex d69a5495a..6b563e3fb 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -313,7 +313,7 @@ In order to know if a content can be translated there is a marker interface::\n Source Code\n ===========\n \n-Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n+Contributors please read the document `Contribute to Plone 6 core <https://6.docs.plone.org/contributing/core/index.html>`_\n \n Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.app.multilingual>`_.\n \ndiff --git a/news/303.bugfix b/news/303.bugfix\nnew file mode 100644\nindex 000000000..ad85419a2\n--- /dev/null\n+++ b/news/303.bugfix\n@@ -0,0 +1,2 @@\n+Get the object to be translated correctly\n+[erral]\ndiff --git a/news/464.bugfix b/news/464.bugfix\nnew file mode 100644\nindex 000000000..6ec0f4267\n--- /dev/null\n+++ b/news/464.bugfix\n@@ -0,0 +1,2 @@\n+Take RichTextBehavior fields into account\n+[erral]\ndiff --git a/src/plone/app/multilingual/browser/images/gtranslate.png b/src/plone/app/multilingual/browser/images/gtranslate.png\nindex 9b6dec2ce..63617cf57 100644\nBinary files a/src/plone/app/multilingual/browser/images/gtranslate.png and b/src/plone/app/multilingual/browser/images/gtranslate.png differ\ndiff --git a/src/plone/app/multilingual/browser/javascript/babel_helper.js b/src/plone/app/multilingual/browser/javascript/babel_helper.js\nindex 331240322..2f42e8d1f 100644\n--- a/src/plone/app/multilingual/browser/javascript/babel_helper.js\n+++ b/src/plone/app/multilingual/browser/javascript/babel_helper.js\n@@ -1,173 +1,207 @@\n-/*global tinyMCE: false, document: false, window: false, jQuery: false */\n (function ($) {\n     "use strict";\n \n-    var original_fields = [],\n-        destination_fields = [],\n-        padding = 0;\n-\n-    function sync_element_vertically(original, destination, padding, first) {\n-        var default_props = {\n-            position: "",\n-            top: ""\n-        },\n-            original_top = 0,\n-            original_padding = 0,\n-            destination_top = 0,\n-            destination_padding = 0,\n-            shift = 0,\n-            more_padding = 0,\n-            images, new_distance;\n-\n-        function distance(a, b) {\n-            return b.position().top - a.position().top - a.height();\n+    let babel_selected = null;\n+    let orig_babel_selected = null;\n+\n+    function sync_heights(el1, el2) {\n+        if (el1.style.height != "auto") {\n+            // reset if previously set\n+            el1.style.height = "auto";\n         }\n-        if (destination.is(":visible")) {\n-            original.show();\n-            // reset fields\n-            if (original.css("position") === "relative") {\n-                original.css(default_props);\n-            }\n-            if (destination.css("position") === "relative") {\n-                destination.css(default_props);\n-            }\n-            original_top = original.position().top;\n-\n-            // Make images smaller\n-            images = original.find(\'img\');\n-            images.each(function (index, img) {\n-                var qimg = $(img);\n-                if (qimg.width() > original.width()) {\n-                    qimg.width(original.width() * 0.8);\n-                }\n-            });\n+        if (el2.style.height != "auto") {\n+            // reset if previously set\n+            el2.style.height = "auto";\n+        }\n+        const max_height = Math.max(\n+            el1.getBoundingClientRect().height,\n+            el2.getBoundingClientRect().height,\n+        );\n+        el1.style.height = `${max_height}px`;\n+        el2.style.height = `${max_height}px`;\n+    }\n \n-            destination_top = destination.position().top;\n-            shift = Math.abs(original_top - destination_top);\n-            if (original_top > destination_top) {\n-                destination_padding = shift;\n-            } else {\n-                original_padding = shift;\n-            }\n+    function sync_header_height() {\n+        // sync header and tab/button heights to ensure the fields are aligned synchronous\n+        sync_heights(\n+            document.querySelector("#babel-edit > div > h2"),\n+            document.querySelector("#header-translation h2"),\n+        )\n+\n+        // sync translation button and tab heights\n+        sync_heights(\n+            document.querySelector("#babel-edit #trans-selector"),\n+            document.querySelector("#form-target .autotoc-nav"),\n+        )\n+    }\n \n-            // The next calculation of padding is necessary if both elements\n-            // have to be shifted down.\n-            if (!first && original.prev().is(":visible")) {\n-                // Calculate distance between bottom of prev element and top\n-                // of current element. add Padding. If > 0, add to more_padding\n-                new_distance = distance(original.prev(), original);\n-                new_distance += original_padding;\n-                if (new_distance < padding) {\n-                    more_padding += padding - new_distance;\n-                }\n-                new_distance = distance(destination.prev(), destination);\n-                new_distance += destination_padding + more_padding;\n-                if (new_distance < padding) {\n-                    more_padding += padding - new_distance;\n-                }\n-            }\n-            original_padding += more_padding;\n-            destination_padding += more_padding;\n-            if (original_padding) {\n-                original.css({\n-                    position: \'relative\',\n-                    top: original_padding\n-                });\n-            } else {\n-                original.css(default_props);\n-            }\n-            if (destination_padding) {\n-                destination.css({\n-                    position: \'relative\',\n-                    top: destination_padding\n-                });\n-            } else {\n-                destination.css(default_props);\n+    function sync_focus(orig_field, focus_field, focus_tinymce) {\n+        const click_field = (field) => {\n+            if (babel_selected) {\n+                babel_selected.classList.remove("selected");\n+                orig_babel_selected.classList.remove("selected");\n             }\n+            babel_selected = focus_field;\n+            babel_selected.classList.add("selected");\n+            orig_babel_selected = orig_field;\n+            orig_babel_selected.classList.add("selected");\n+        };\n \n-        } else {\n-            original.hide();\n-            destination.css(default_props);\n-            original.css(default_props);\n+        /* select a field on both sides and change the color */\n+        focus_field.addEventListener("click", click_field);\n+\n+        if(focus_tinymce) {\n+            focus_tinymce.on("focus", click_field);\n         }\n-        // With all that padding, the form might need to be pushed down in\n-        // some cases.\n-        $([original, destination]).each(function (index, item) {\n-            var $item = $(item),\n-                outer_padding = 0,\n-                parent = $item.parent();\n-            outer_padding = Math.max($item.position().top + $item.height() - (parent.position().top + parent.height()) + padding, 0);\n-            if (outer_padding) {\n-                parent.height(parent.height() + outer_padding);\n-            }\n-        });\n     }\n \n     function update_view() {\n-        var order = 1,\n-            url_translate = $(\'input#url_translate\').val(),\n-            langSource = $(\'#frame-content #view_language\')[0].innerHTML;\n+        let order = 1;\n+        const url_translate = document.querySelector(\'input#url_translate\')?.value;\n+        const langSource = document.querySelector(\'#frame-content #view_language\').innerHTML;\n+\n+        sync_header_height();\n+\n+        const original_fields = document.querySelectorAll(\'#frame-content .field\');\n+        const destination_fields = document.querySelectorAll(\'#form-target fieldset .field\');\n+        const visible_destination_fields = [...destination_fields].filter(it => it.closest("fieldset.active") != null);\n+\n+        // show only fields of current tab\n+        original_fields.forEach((field) => {\n+            field.style.display = "none";\n+            visible_destination_fields.forEach((dst_fld) => {\n+                if (dst_fld.dataset.fieldname.endsWith(field.id)) {\n+                    field.style.display = "block";\n+                    return;\n+                }\n+            })\n+        });\n \n-        $(\'#form-target fieldset > div > .field\').unwrap();\n+        visible_destination_fields.forEach(dest_field => {\n+            var orig_field = [...original_fields].filter(it => dest_field.dataset.fieldname.endsWith(it.id));\n \n-        original_fields = $(\'#frame-content .field\');\n-        destination_fields = $(\'#form-target fieldset > .field\');\n+            if (!orig_field.length) {\n+                // field not found\n+                return;\n+            } else {\n+                orig_field = orig_field[0];\n+            }\n \n-        // Calculate the padding between fields as intended by css\n-        if (original_fields.length > 1) {\n-            padding = ($(original_fields[1]).position().top - $(original_fields[0]).position().top - $(original_fields[0]).height());\n-        }\n-        $.each(original_fields, function (index, value) {\n-            var original_field = $(value);\n-            var destination_field = $(destination_fields[index]);\n-            sync_element_vertically(original_field, destination_field, padding, index === 0);\n+            const gtranslate_enabled = document.getElementById("gtranslate_service_available");\n+            const target_el = dest_field.querySelector(\'textarea,input\');\n+            const target_tiny = tinymce.get(target_el.id);\n+\n+            sync_focus(orig_field, dest_field, target_tiny);\n+            sync_heights(orig_field, dest_field);\n \n             // Add the google translation field\n-            if ($(\'#gtranslate_service_available\').attr(\'value\') === "True" && ((original_field.find(\'.richtext-field, .textline-field, .text-field, .localstatic-field, .ArchetypesField-TextField\').length > 0) || ($(\'#at-babel-edit\').length > 0))) {\n-                original_field.prepend("<div class=\'translator-widget\' id=\'item_translation_" + order + "\'></div>");\n-                original_field.children(\'.translator-widget\').click(function () {\n-                    var field = $(value).attr("rel");\n-                    // Fetch source of text to translate.\n-                    var jsondata = {\n+            if (\n+                gtranslate_enabled.value === "True" && (\n+                    // it is either a text widget, a text area or rich widget\n+                    dest_field.querySelectorAll(\'.text-widget, .textarea-widget, .richTextWidget\').length ||\n+                    // or it is a tinymce richtextfield without wrapping CSS class\n+                    target_tiny !== null\n+                ) &&\n+                !orig_field.querySelector(".translator-widget")\n+            ) {\n+                const translator_widget = document.createElement("div");\n+\n+                translator_widget.classList.add("translator-widget");\n+                translator_widget.id = `item_translation_${order}`;\n+\n+                translator_widget.addEventListener("click", async function () {\n+                    var field = orig_field.getAttribute("rel");\n+\n+                    // we use the current URL to get the context\'s UID\n+                    var url_parts = document.location.pathname.split(\'++addtranslation++\');\n+\n+                    var postdata = new URLSearchParams({\n                         \'field\': field,\n-                        \'lang_source\': langSource\n-                    };\n-                    var targetelement = destination_field.find(\'textarea\');\n-                    var tiny_editor = destination_field.find("textarea.mce_editable");\n-                    if (!targetelement.length) {\n-                        targetelement = destination_field.find("input");\n-                    }\n+                        \'lang_source\': langSource,\n+                        // we use the second part of the url_parts, the uid itself\n+                        \'context_uid\': url_parts[1]\n+                    });\n+\n+                    const translate_service_url = url_translate + \'/gtranslation_service\';\n+\n                     // Now we call the data\n-                    $.ajax({\n-                        url: url_translate + \'/gtranslation_service\',\n-                        data: jsondata,\n-                        dataType: \'json\',\n-                        type: \'POST\',\n-                        success: function (data) {\n-                            var text_target = data.data;\n-                            if (tiny_editor.length > 0) {\n-                                tinyMCE.get(tiny_editor.attr(\'id\')).setContent(text_target);\n-                            } else {\n-                                targetelement.val(text_target); // Inserts translated text.\n-                            }\n-                        }\n+                    const response = await fetch(translate_service_url, {\n+                        method: "POST",\n+                        headers: {\n+                            "Content-type": "application/x-www-form-urlencoded; charset: utf-8",\n+                        },\n+                        body: postdata,\n                     });\n+\n+                    if (!response.ok) {\n+                        console.log(`Could not load ${translate_service_url}: ${response.statusText}`);\n+                        return;\n+                    }\n+\n+                    const json = await response.json();\n+                    var text_target = json.data;\n+\n+                    if (!text_target) {\n+                        return;\n+                    }\n+\n+                    if (target_tiny) {\n+                        // a TinyMCE editor is present\n+                        await target_tiny.setContent(text_target);\n+                    } else {\n+                        // set value of textarea\n+                        target_el.value = text_target;\n+                    }\n+                    // need to trigger "change" event to make validation (and tiny) happy\n+                    $(target_el).trigger("change");\n                 });\n-                original_field.children(\'.translator-widget\').hide();\n+\n+                orig_field.prepend(translator_widget);\n                 order += 1;\n             }\n         });\n     }\n \n-    $(window).on("load", function () {\n+    function init_tab_switch() {\n+        // init fieldset switch\n+        document.querySelector("#form-target form").querySelectorAll(".autotoc-nav a").forEach((item) => {\n+            // NOTE: the "clicked" event is triggered in pat-autotoc\n+            $(item).on("clicked", (e) => {\n+                update_view();\n+            });\n+        });\n+    }\n \n-        /* alert about language independent field */\n-        $(\'.languageindependent\').click(function () {\n-            $(this).css(\'opacity\', \'1\');\n+    function load_default_language() {\n+        // Fetch default language content\n+        const trans_buttons = document.querySelectorAll("#trans-selector button");\n+        const active_buttons = [...trans_buttons].filter(it => it.classList.contains("active"));\n+        const trans_select = document.querySelector("#trans-selector select");\n+\n+        let initialFetchUrl = "";\n+\n+        if (active_buttons.length) {\n+            initialFetchUrl = active_buttons[0].dataset.url;\n+        } else if (trans_buttons.length) {\n+            trans_buttons[0].classList.add("active");\n+            initialFetchUrl = trans_buttons[0].dataset.url;\n+        } else if (trans_select) {\n+            initialFetchUrl = trans_select.value;\n+        } else {\n+            // no chance to get original language content\n+            return;\n+        }\n+\n+        $(\'#frame-content\').load(initialFetchUrl, function () {\n+            // defer updating\n+            setTimeout(update_view, 500);\n         });\n+    }\n+\n+    function init_babel_view() {\n \n         /* change the language trigger */\n-        $(\'#trans-selector button\').click(function () {\n+        $(\'#trans-selector button\').on("click", function () {\n             var url = $(this).data(\'url\');\n             $(\'#frame-content\').load(url, function () {\n                 $("#frame-content fieldset legend").unwrap().remove();\n@@ -176,9 +210,10 @@\n             $(\'#trans-selector button.active\').removeClass(\'active\');\n             $(this).addClass(\'active\');\n         });\n+\n         /* change the language trigger, this time for the drop-down, which is\n         used when too many translations are present to fit into buttons */\n-        $(\'#trans-selector select\').change(function () {\n+        $(\'#trans-selector select\').on("change", function () {\n             var selected_elem = $(this).children(\'option\').eq(this.selectedIndex);\n             var url = selected_elem.val();\n             $(\'#frame-content\').load(url, function () {\n@@ -187,38 +222,30 @@\n             });\n         });\n \n-        /* select a field on both sides and change the color */\n-        var babel_selected = null,\n-            orig_babel_select = null;\n-        $(\'#babel-edit *[id^=fieldset] .field\').click(function () {\n-            var index = $(\'#form-target .field\').index($(this));\n-            if (babel_selected) {\n-                $(babel_selected).addClass(\'selected\');\n-                $(babel_selected).toggleClass("selected");\n-                $(orig_babel_select).toggleClass("selected");\n-                $(orig_babel_select).children(\'.translator-widget\').hide();\n-            }\n-            babel_selected = this;\n-            $(this).toggleClass("selected");\n-            orig_babel_select = $(\'#frame-content .field\')[index];\n-            $(orig_babel_select).toggleClass("selected");\n-            $(orig_babel_select).children(\'.translator-widget\').show();\n-        });\n-\n-        // Fetch default content\n-        var initialFetch = $(\'#trans-selector button.active\').data(\'url\');\n-        // Can be null if not buttons, but the drop-down is present\n-        if (initialFetch === null) {\n-            initialFetch = $(\'#trans-selector select option:selected\').val();\n-        }\n-        $(\'#frame-content\').load(initialFetch, function () {\n-            $("#frame-content fieldset legend").unwrap().remove();\n-            update_view();\n-        });\n+        // initialize tab change\n+        init_tab_switch();\n \n-        var intervalId = window.setInterval(function () {\n-            update_view();\n-        }, 1000);\n+        // load original language and update the view\n+        load_default_language();\n+    };\n \n+    let initInterval = null;\n+    initInterval = setInterval(() => {\n+        if (!document.querySelector("body.patterns-loaded")) {\n+            // wait for loaded patterns\n+            return;\n+        }\n+        clearInterval(initInterval);\n+        init_babel_view();\n+    }, 500);\n+\n+    // fix field alignment on window resize\n+    let deferResize = null;\n+    window.addEventListener("resize", () => {\n+        if (deferResize) {\n+            clearTimeout(deferResize);\n+        }\n+        deferResize = setTimeout(update_view, 500);\n     });\n+\n }(jQuery));\ndiff --git a/src/plone/app/multilingual/browser/stylesheet/multilingual.css b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\nindex 0cf9f6407..a2e591340 100644\n--- a/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n+++ b/src/plone/app/multilingual/browser/stylesheet/multilingual.css\n@@ -2,6 +2,14 @@\n     text-align: center;\n }\n \n+#babel-edit fieldset legend {\n+    display: none;\n+}\n+\n+#babel-edit fieldset .row {\n+    --bs-gutter-x: 0;\n+}\n+\n #babel-edit #trans-selector {\n     margin-top: 3px;\n     min-height: 26px;\n@@ -19,20 +27,28 @@\n     margin-right: 20px;\n }\n \n-#babel-edit .field, #babel-edit #frame-content .field  {\n+#babel-edit .field,\n+#babel-edit #frame-content .field {\n     background-color: #f1f1f1;\n     padding: 20px;\n+    margin-bottom: 1rem;\n }\n \n-#babel-edit .selected, #babel-edit #frame-content .selected{\n-    background-color: #99B0C4;\n-    color: #0A0909;\n+#babel-edit .selected,\n+#babel-edit #frame-content .selected {\n+    background-color: #99b0c4;\n+    color: #0a0909;\n }\n \n #babel-edit .selected .formHelp {\n     color: white;\n }\n \n+#babel-edit #frame-content .selected .translator-widget {\n+    display: block;\n+    cursor: pointer;\n+}\n+\n #babel-edit .richtext-field {\n     background-color: white;\n     color: black;\n@@ -54,24 +70,28 @@\n .translator-widget {\n     position: relative;\n     float: right;\n-    background: url(\'++resource++plone.app.multilingual.images/gtranslate.png\');\n+    background: url("++resource++plone.app.multilingual.images/gtranslate.png") no-repeat;\n+    background-size: contain;\n     min-height: 50px;\n     min-width: 50px;\n+    display: none;\n }\n \n .currentLanguage {\n     font-weight: bold;\n }\n /* Specific rule needed to fix a js error (position null in a field) */\n-#archetypes-fieldname-contributors{\n-    display:block;\n+#archetypes-fieldname-contributors {\n+    display: block;\n }\n \n a.contentmenuflags img {\n     margin-bottom: 2pt;\n }\n \n-.toolbar-menu-icon.icon-plone-contentmenu-multilingual:before { content: \'\\E81A\'; } /* \'\xee\xa0\xb6\' */\n+.toolbar-menu-icon.icon-plone-contentmenu-multilingual:before {\n+    content: "\\E81A";\n+} /* \'\xee\xa0\xb6\' */\n \n #translations-overview td {\n     line-height: 1;\n@@ -112,9 +132,9 @@ a.contentmenuflags img {\n #edit-zone nav > ul ul li.plonetoolbar-multilingual.actionSeparator {\n     margin: 0;\n     padding: 5px 0 0;\n-    border-top: 1px solid rgba(255,255,255,0.17);\n+    border-top: 1px solid rgba(255, 255, 255, 0.17);\n }\n-#edit-zone nav>ul ul li.plonetoolbar-multilingual.actionSeparator>span {\n+#edit-zone nav > ul ul li.plonetoolbar-multilingual.actionSeparator > span {\n     font-weight: 400;\n     color: #ccc;\n }\ndiff --git a/src/plone/app/multilingual/browser/templates/modify_translations.pt b/src/plone/app/multilingual/browser/templates/modify_translations.pt\nindex eb6576b88..b781b0383 100644\n--- a/src/plone/app/multilingual/browser/templates/modify_translations.pt\n+++ b/src/plone/app/multilingual/browser/templates/modify_translations.pt\n@@ -141,6 +141,9 @@\n                   <a class="pat-plone-modal addTranslationAction"\n                      href="#"\n                      title="Add translation"\n+                     data-pat-plone-modal=\'{\n+                      "modalSizeClass": "modal-xl"\n+                     }\'\n                      tal:attributes="\n                        href string:${context/absolute_url}/@@create_translation?language=${lang};\n                      "\ndiff --git a/src/plone/app/multilingual/browser/translate.py b/src/plone/app/multilingual/browser/translate.py\nindex cb702e41c..3337e204f 100644\n--- a/src/plone/app/multilingual/browser/translate.py\n+++ b/src/plone/app/multilingual/browser/translate.py\n@@ -2,6 +2,7 @@\n from plone.app.multilingual import _\n from plone.app.multilingual.interfaces import IMultiLanguageExtraOptionsSchema\n from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.app.uuid.utils import uuidToObject\n from plone.base.interfaces import ILanguage\n from plone.registry.interfaces import IRegistry\n from plone.uuid.interfaces import IUUID\n@@ -57,7 +58,17 @@ def __call__(self):\n         ):\n             return _("Need a field")\n         else:\n-            manager = ITranslationManager(self.context)\n+            context_uid = self.request.form.get("context_uid", None)\n+            if context_uid is None:\n+                # try with context if no translation uid is present\n+                manager = ITranslationManager(self.context)\n+            else:\n+                context = uuidToObject(context_uid)\n+                if context is not None:\n+                    manager = ITranslationManager(context)\n+                else:\n+                    manager = ITranslationManager(self.context)\n+\n             registry = getUtility(IRegistry)\n             settings = registry.forInterface(\n                 IMultiLanguageExtraOptionsSchema, prefix="plone"\n@@ -67,7 +78,7 @@ def __call__(self):\n             orig_object = manager.get_translation(lang_source)\n             field = self.request.form["field"].split(".")[-1]\n             if hasattr(orig_object, field):\n-                question = getattr(orig_object, field, "")\n+                question = getattr(orig_object, field, "") or ""\n                 if hasattr(question, "raw"):\n                     question = question.raw\n             else:\n'

Repository: plone.app.multilingual


Branch: refs/heads/master
Date: 2024-10-18T15:49:10+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.multilingual/commit/bab2212ea71e0223e87ea97d954323e50fd51869

Merge pull request #460 from plone/port-robot-tests

port robot tests

Files changed:
A news/459.tests
M src/plone/app/multilingual/testing.py
M src/plone/app/multilingual/tests/robot/test_add_translation.robot
M src/plone/app/multilingual/tests/robot/test_schemaeditor.robot
M src/plone/app/multilingual/tests/robot/test_translate_content.robot

b'diff --git a/news/459.tests b/news/459.tests\nnew file mode 100644\nindex 00000000..04947323\n--- /dev/null\n+++ b/news/459.tests\n@@ -0,0 +1 @@\n+port robot tests to use the browser library [@1letter]\ndiff --git a/src/plone/app/multilingual/testing.py b/src/plone/app/multilingual/testing.py\nindex 9e587dae..aa64c841 100644\n--- a/src/plone/app/multilingual/testing.py\n+++ b/src/plone/app/multilingual/testing.py\n@@ -18,7 +18,8 @@\n from plone.dexterity.utils import iterSchemataForType\n from plone.rfc822 import constructMessageFromSchemata\n from plone.rfc822 import initializeObjectFromSchemata\n-from plone.testing import z2\n+from plone.testing.layer import Layer\n+from plone.testing.zope import WSGI_SERVER_FIXTURE\n from plone.uuid.interfaces import IUUID\n from Products.CMFCore.utils import getToolByName\n from zope.configuration import xmlconfig\n@@ -156,7 +157,7 @@ def setUpPloneSite(self, portal):\n )\n \n \n-class MultipleLanguagesLayer(z2.Layer):\n+class MultipleLanguagesLayer(Layer):\n     defaultBases = (PLONE_APP_MULTILINGUAL_PRESET_FIXTURE,)\n \n \n@@ -257,7 +258,11 @@ def create_translation(self, *args, **kwargs):\n )\n \n PLONE_APP_MULTILINGUAL_ROBOT_TESTING = FunctionalTesting(\n-    bases=(MULTIPLE_LANGUAGES_LAYER, REMOTE_LIBRARY_BUNDLE_FIXTURE, z2.ZSERVER_FIXTURE),\n+    bases=(\n+        MULTIPLE_LANGUAGES_LAYER,\n+        REMOTE_LIBRARY_BUNDLE_FIXTURE,\n+        WSGI_SERVER_FIXTURE,\n+    ),\n     name="plone.app.multilingual:Robot",\n )\n \ndiff --git a/src/plone/app/multilingual/tests/robot/test_add_translation.robot b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\nindex 46a5b9ac..236a49dd 100644\n--- a/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_add_translation.robot\n@@ -1,14 +1,11 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/keywords.robot\n-Resource  plone/app/robotframework/saucelabs.robot\n-Resource  plone/app/robotframework/selenium.robot\n-Resource  Products/CMFPlone/tests/robot/keywords.robot\n+Resource    plone/app/robotframework/browser.robot\n \n-Library  Remote  ${PLONE_URL}/RobotRemote\n+Library    Remote    ${PLONE_URL}/RobotRemote\n \n-Test Setup  Run Keywords  Plone test setup\n-Test Teardown  Run keywords  Plone test teardown\n+Test Setup    Run Keywords    Plone test setup\n+Test Teardown    Run keywords    Plone test teardown\n \n *** Test Cases ***\n \n@@ -24,74 +21,45 @@ Scenario: As an editor I can add new translation\n \n *** Keywords ***\n \n-Setup test browser\n-  Set Selenium speed  0.5s\n-  Open test browser\n-  Set window size  1200  900\n-\n # Given\n \n a site owner\n-  Enable autologin as  Manager\n+    Enable autologin as    Manager\n \n a document in English\n-  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/en/\n-  ...  id=an-english-document\n-  ...  title=An English Document\n+    Create content    type=Document    container=/${PLONE_SITE_ID}/en/    id=an-english-document    title=An English Document\n \n a document in Catalan\n-  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/ca/\n-  ...  id=a-catalan-document\n-  ...  title=A Catalan Document\n+    Create content    type=Document    container=/${PLONE_SITE_ID}/ca/    id=a-catalan-document    title=A Catalan Document\n \n # When\n \n I view the Catalan document\n-  Go to  ${PLONE_URL}/ca/a-catalan-document\n-  Wait until page contains  A Catalan Document\n+    Go to    ${PLONE_URL}/ca/a-catalan-document\n+    Get Element    //h1[1][text()=\'A Catalan Document\']\n \n I link the document in English as a translation\n-  Page should contain element  css=#plone-contentmenu-multilingual a\n-  Capture page screenshot\n-  Element should be visible  css=#plone-contentmenu-multilingual a\n-  Click Element  css=#plone-contentmenu-multilingual a\n-  Wait until page contains element  css=#_modify_translations\n-  Wait until element is visible  css=#_modify_translations\n-\n-  Click Element  css=#_modify_translations\n-  Given patterns are loaded\n-  Wait until page contains element  css=#translations-overview .connectTranslationAction\n-\n-  Click Element  css=#translations-overview .connectTranslationAction\n-  Wait until page contains element  css=.select2-choices\n-  Wait until element is visible  css=.select2-choices\n-  Click Element  css=#formfield-form-widgets-content .pat-relateditems-container button.mode.search\n-  Input Text  css=#formfield-form-widgets-content .select2-input  en\n-  Wait until page contains element  xpath=(//span[contains(., \'An English Document\')])\n-  Wait until element is visible  xpath=(//span[contains(., \'An English Document\')])\n-  Click Element  xpath=(//span[contains(., \'An English Document\')])\n-  Wait until page contains  An English Document\n-\n-  # We need a complicated xpath, because for some reason a button with this id is there twice.\n-  # The first one is hidden.\n-  Click Element  xpath=(//*[contains(@class, \'modal-footer\')]//button[@id=\'form-buttons-connect_translation\'])\n-  Wait until page contains element  xpath=(//h3[@class="translationTitle"])\n-  Sleep  5\n-  Wait until element is visible  xpath=(//h3[@class="translationTitle"])\n-  Set Focus To Element  xpath=(//*[@id="translations-overview"]//a[contains(@href,"a-catalan-document")])\n-  Click Element  xpath=(//*[@id="translations-overview"]//a[contains(text(),\'/plone/ca/a-catalan-document\')])\n-  Wait until page contains  A Catalan Document\n+    Get Element    //li[@id="plone-contentmenu-multilingual"]/a\n+    Take Screenshot\n+    Get Element States    //li[@id="plone-contentmenu-multilingual"]/a     contains    visible\n+    Click    //li[@id="plone-contentmenu-multilingual"]/a\n+    Get Element States    //a[@id="_modify_translations"]     contains    visible\n+    Click    //a[@id="_modify_translations"]\n+    Click    //table[@id="translations-overview"]/tbody/tr[1]/td[3]/a[contains(@class,"connectTranslationAction")]\n+    Click    //div[@id="formfield-form-widgets-content"]//div[contains(@class,"pat-relateditems-container")]//button[contains(@class,"mode") and contains(@class,"search")]\n+    Type Text    //div[@id="formfield-form-widgets-content"]//input[contains(@class,"select2-input")]    en\n+    Click    //span[contains(., \'An English Document\')]\n+    Click    //*[contains(@class, \'modal-footer\')]//button[@id=\'form-buttons-connect_translation\']\n+    Get Text    //table[@id="translations-overview"]/tbody/tr[1]/td[2]/h3[@class="translationTitle"]    should be    An English Document\n+    Click    //table[@id="translations-overview"]//a[contains(text(),\'/plone/ca/a-catalan-document\')]\n+    Get Text    //*[@id="content"]/header/h1    should be    A Catalan Document\n \n I switch to English\n-  Click Link  xpath=//a[@title=\'English\']\n-  Wait until page contains  An English Document\n+    Click    //a[@title=\'English\']\n+    Get Element    //h1[1][contains(text(),\'An English Document\')]\n \n # Then\n \n I can view the document in English\n-  Wait until page contains element\n-  ...  xpath=//h1[1][contains(text(),\'English Document\')]\n-  Wait until page contains element\n-  ...  xpath=//ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'English\']\n+    Get Element    //h1[1][contains(text(),\'English Document\')]\n+    Get Element    //ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'English\']\ndiff --git a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\nindex 0ce75781..bda8cfc3 100644\n--- a/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_schemaeditor.robot\n@@ -1,16 +1,13 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/keywords.robot\n-Resource  plone/app/robotframework/saucelabs.robot\n-Resource  plone/app/robotframework/selenium.robot\n+Resource    plone/app/robotframework/browser.robot\n \n-Library  Remote  ${PLONE_URL}/RobotRemote\n+Library    Remote    ${PLONE_URL}/RobotRemote\n \n-Test Setup  Run Keywords  Plone test setup\n-Test Teardown  Run keywords  Plone test teardown\n+Test Setup    Run Keywords    Plone test setup\n+Test Teardown    Run keywords    Plone test teardown\n \n-\n-*** Test Cases ***\n+*** Test cases ***\n \n Scenario: As a site owner I can see language independent field setting\n     Given a site owner\n@@ -42,54 +39,54 @@ Scenario: As a site owner I can unset field from being language independent\n # Given\n \n a site owner\n-  Enable autologin as  Manager\n+    Enable autologin as    Manager\n \n a dexterity content type with a TTW field\n-  Create content type  Custom\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/@@fields\n-  Wait until page contains element  css=body.template-fields\n+    Create content type    Custom\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/@@fields\n+    Get Element    //body[contains(@class, "template-fields")]\n \n a dexterity content type field settings form\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/@@fields\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n-  Wait until page contains  Language independent field\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/@@fields\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/custom\n+    Get Text    //div[@id="form-widgets-IFieldLanguageIndependent-languageindependent"]    contains    Language independent field\n \n a dexterity content type with a language independent TTW field\n-  Create content type  Custom\n-  Set field language independent  Custom  custom  on\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/@@fields\n-  Wait until page contains element  css=body.template-fields\n+    Create content type    Custom\n+    Set field language independent    Custom    custom    on\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/@@fields\n+    Get Element    //body[contains(@class, "template-fields")]\n \n # When\n \n I open the field settings\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n-  Page should contain  Language independent field\n+    Go to    ${PLONE_URL}/dexterity-types/Custom/custom\n+    Get Text    //div[@id="form-widgets-IFieldLanguageIndependent-languageindependent"]    contains    Language independent field\n \n I select the language independent field setting\n-  Select checkbox  form-widgets-IFieldLanguageIndependent-languageindependent-0\n-  Checkbox should be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Check Checkbox    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    checked\n \n I save the form\n-  Wait until page contains element  css=#form-buttons-save\n-  Click button  css=#form-buttons-save\n-  Wait until keyword succeeds  1  10  Element should not be visible  .plone-modal-wrapper\n+    Get Element    //*[@id="form-buttons-save"]\n+    Click    //*[@id="form-buttons-save"]\n+    Get Element Count    //div[contains(@class,"plone-modal-wrapper")]    should be    0\n \n I open the form again\n-  Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n-  Wait until page contains  Language independent field\n+    Go to  ${PLONE_URL}/dexterity-types/Custom/custom\n+    Get Text    //div[@id="form-widgets-IFieldLanguageIndependent-languageindependent"]    contains    Language independent field\n \n I unselect the language independent field setting\n-  Unselect checkbox  form-widgets-IFieldLanguageIndependent-languageindependent-0\n-  Checkbox should not be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Uncheck Checkbox    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    unchecked\n \n # Then\n \n I can see the language independent field setting\n-  Wait until page contains element  id=form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Get Element    //*[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]\n \n the language independent field setting is selected\n-  Checkbox should be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    checked\n \n the language independent field setting is not selected\n-  Checkbox should not be selected  form-widgets-IFieldLanguageIndependent-languageindependent-0\n+    Get Checkbox State    //input[@id="form-widgets-IFieldLanguageIndependent-languageindependent-0"]    ==    unchecked\ndiff --git a/src/plone/app/multilingual/tests/robot/test_translate_content.robot b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\nindex 6c3a9d20..316062f2 100644\n--- a/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n+++ b/src/plone/app/multilingual/tests/robot/test_translate_content.robot\n@@ -1,16 +1,13 @@\n *** Settings ***\n \n-Resource  plone/app/robotframework/keywords.robot\n-Resource  plone/app/robotframework/saucelabs.robot\n-Resource  plone/app/robotframework/selenium.robot\n+Resource    plone/app/robotframework/browser.robot\n \n-Library  Remote  ${PLONE_URL}/RobotRemote\n+Library    Remote    ${PLONE_URL}/RobotRemote\n \n-Test Setup  Run Keywords  Plone test setup\n-Test Teardown  Run keywords  Plone test teardown\n+Test Setup    Run Keywords    Plone test setup\n+Test Teardown    Run keywords    Plone test teardown\n \n-\n-*** Test Cases ***\n+*** Test cases ***\n \n Scenario: As an editor I can translate a document\n     Given a site owner\n@@ -24,7 +21,6 @@ Scenario: As a visitor I can view the translation\n      When I switch to Catalan\n      Then I can view the document in Catalan\n \n-\n *** Keywords ***\n \n # Given\n@@ -32,48 +28,30 @@ Scenario: As a visitor I can view the translation\n a site owner\n   Enable autologin as  Manager\n \n-a visitor\n-  Disable autologin\n-\n a document in English\n-  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/en/\n-  ...  id=an-english-document\n-  ...  title=An English Document\n+  Create content    type=Document    container=/${PLONE_SITE_ID}/en/    id=an-english-document    title=An English Document\n \n a document in English with Catalan translation\n-  ${uid} =  Create content  type=Document\n-  ...  container=/${PLONE_SITE_ID}/en/\n-  ...  id=an-english-document\n-  ...  title=An English Document\n-  Create translation  ${uid}  ca\n-  ...  title=A Catalan Document\n-  Go to  ${PLONE_URL}/resolveuid/${uid}\n-  Wait until page contains  An English Document\n+  ${uid}=    Create content    type=Document    container=/${PLONE_SITE_ID}/en/    id=an-english-document    title=An English Document\n+  Create translation    ${uid}    ca    title=A Catalan Document\n+  Go to    ${PLONE_URL}/resolveuid/${uid}\n+  Get Element    //h1[1][text()=\'An English Document\']\n \n # When\n \n I translate the document into Catalan\n-  Go to  ${PLONE_URL}/en/an-english-document/@@create_translation?language=ca\n-  Capture page screenshot\n-  Input Text  form.widgets.IDublinCore.title  A Catalan Document\n-  Click Link  Dates  # workaround for of TinyMCE editor field problem\n-  Capture page screenshot\n-  Click button  css=#form-buttons-save\n-\n-  # Wait until page contains  Element creat\n-  # (Catalan translations not currently available)\n-\n-  Wait until page contains  A Catalan Document\n+  Go to    ${PLONE_URL}/en/an-english-document/@@create_translation?language=ca\n+  Take screenshot\n+  Type Text    //input[@name="form.widgets.IDublinCore.title"]    A Catalan Document\n+  Take screenshot\n+  Click    //button[@id="form-buttons-save"]\n \n I switch to Catalan\n-  Click Link  xpath=//a[@title=\'Catal\xc3\xa0\']\n-  Wait until page contains  A Catalan Document\n+  Click    //a[@title=\'Catal\xc3\xa0\']\n+  Get Element    //h1[1][text()=\'A Catalan Document\']\n \n # Then\n \n I can view the document in Catalan\n-  Page Should Contain Element\n-  ...  xpath=//h1[1][text()=\'A Catalan Document\']\n-  Page Should Contain Element\n-  ...  xpath=//ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'Catal\xc3\xa0\']\n+  Get Element    //h1[1][text()=\'A Catalan Document\']\n+  Get Element    //ul[@id=\'portal-languageselector\']/li[contains(@class, \'currentLanguage\')]/a[@title=\'Catal\xc3\xa0\']\n'

