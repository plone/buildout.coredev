Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-11T16:43:46+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/1c2963997942db9028c90a688af42eff44238b30

Use the global request

Use the zope global request if available as a fallback if the context does not have it

Fixes #17

Files changed:
A news/17.feature
M plone/memoize/view.py
M plone/memoize/view.rst
M setup.py

b'diff --git a/news/17.feature b/news/17.feature\nnew file mode 100644\nindex 0000000..59ae812\n--- /dev/null\n+++ b/news/17.feature\n@@ -0,0 +1 @@\n+Use the zope global request if available as a fallback if the context does not have it [ale-rt]\ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex 1c5200d..549df62 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -7,6 +7,14 @@\n from zope.annotation.interfaces import IAnnotations\n \n \n+try:\n+    from zope.globalrequest import getRequest\n+except ImportError:\n+\n+    def getRequest():\n+        return None\n+\n+\n class ViewMemo(object):\n \n     key = "plone.memoize"\n@@ -17,9 +25,12 @@ def memogetter(*args, **kwargs):\n             instance = args[0]\n \n             context = getattr(instance, "context", None)\n-            request = getattr(instance, "request", None)\n+            try:\n+                request = instance.request\n+            except AttributeError:\n+                request = getRequest()\n \n-            annotations = IAnnotations(request)\n+            annotations = IAnnotations(request, {})\n             if self.key not in annotations:\n                 annotations[self.key] = dict()\n             cache = annotations[self.key]\n@@ -52,10 +63,18 @@ def memogetter(*args, **kwargs):\n \n     def memoize_contextless(self, func):\n         def memogetter(*args, **kwargs):\n-            instance = args[0]\n-            request = getattr(instance, "request", None)\n \n-            annotations = IAnnotations(request)\n+            if args:\n+                instance = args[0]\n+            else:\n+                instance = None\n+\n+            try:\n+                request = instance.request\n+            except AttributeError:\n+                request = getRequest()\n+\n+            annotations = IAnnotations(request, {})\n             if self.key not in annotations:\n                 annotations[self.key] = dict()\n             cache = annotations[self.key]\ndiff --git a/plone/memoize/view.rst b/plone/memoize/view.rst\nindex 75da470..e9ad76f 100644\n--- a/plone/memoize/view.rst\n+++ b/plone/memoize/view.rst\n@@ -176,3 +176,72 @@ based on parameters, but not on context::\n     >>> print(msg2.getAnotherMsg(\'J.D.\', **{\'raise\':\'roofbeams\'}))\n     J.D.: so long, cruel world& raise--roofbeams\n \n+There is also support for using a global request\n+if zope.globalrequest is available.\n+With that you can cache also functions.\n+\n+If the global request is missing nothing changes:\n+\n+    >>> a = "foo"\n+    >>> @view.memoize_contextless\n+    ... def memoized_function():\n+    ...     return a\n+    >>> memoized_function()\n+    \'foo\'\n+    >>> a = "bar"\n+    >>> memoized_function()\n+    \'bar\'\n+\n+Now we provide a global request which supports annotations:\n+\n+    >>> from zope.globalrequest import setRequest\n+    >>> from zope.interface import alsoProvides\n+    >>> from zope.annotation import IAttributeAnnotatable\n+    >>> global_request = TestRequest()\n+    >>> alsoProvides(global_request, IAttributeAnnotatable)\n+    >>> setRequest(global_request)\n+\n+With that in place the results are cached:\n+    >>> a = "foo"\n+    >>> memoized_function()\n+    \'foo\'\n+    >>> a = "bar"\n+    >>> memoized_function()\n+    \'foo\'\n+\n+\n+The same is true for an adapter:\n+\n+    >>> class Adapter(object):\n+    ...\n+    ...     msg = "foo"\n+    ...\n+    ...     def __init__(self, context):\n+    ...         self.context = context\n+    ...\n+    ...     @view.memoize\n+    ...     def context_aware_function(self):\n+    ...         return self.msg\n+    ...\n+    ...     @view.memoize_contextless\n+    ...     def context_unaware_function(self):\n+    ...         return self.msg\n+\n+We now instatiate two objects:\n+    >>> instance1 = Adapter(Dummy())\n+    >>> instance2 = Adapter(Dummy())\n+    >>> instance1.context_aware_function()\n+    \'foo\'\n+    >>> instance1.context_unaware_function()\n+    \'foo\'\n+\n+Let\'s verify that the cache depends on the context:\n+    >>> Adapter.msg = "bar"\n+    >>> instance2.context_aware_function()\n+    \'bar\'\n+    >>> instance1.context_unaware_function()\n+    \'foo\'\n+\n+Still instance1 is not aware of the change:\n+    >>> instance1.context_aware_function()\n+    \'foo\'\ndiff --git a/setup.py b/setup.py\nindex be8e128..b4a624c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -50,7 +50,9 @@ def read(*rnames):\n     include_package_data=True,\n     zip_safe=False,\n     test_suite="plone.memoize.tests.test_suite",\n-    extras_require=dict(test=["zope.configuration", "zope.publisher",]),\n+    extras_require=dict(\n+        test=["zope.configuration", "zope.globalrequest", "zope.publisher",]\n+    ),\n     install_requires=[\n         "setuptools",\n         "six",\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-11T23:16:20+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/f378dc665252fc1801eee70c51bec511b5dbf872

Merge pull request #22 from plone/17-use-global-request

Use the global request

Files changed:
A news/17.feature
M plone/memoize/view.py
M plone/memoize/view.rst
M setup.py

b'diff --git a/news/17.feature b/news/17.feature\nnew file mode 100644\nindex 0000000..59ae812\n--- /dev/null\n+++ b/news/17.feature\n@@ -0,0 +1 @@\n+Use the zope global request if available as a fallback if the context does not have it [ale-rt]\ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex 1c5200d..549df62 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -7,6 +7,14 @@\n from zope.annotation.interfaces import IAnnotations\n \n \n+try:\n+    from zope.globalrequest import getRequest\n+except ImportError:\n+\n+    def getRequest():\n+        return None\n+\n+\n class ViewMemo(object):\n \n     key = "plone.memoize"\n@@ -17,9 +25,12 @@ def memogetter(*args, **kwargs):\n             instance = args[0]\n \n             context = getattr(instance, "context", None)\n-            request = getattr(instance, "request", None)\n+            try:\n+                request = instance.request\n+            except AttributeError:\n+                request = getRequest()\n \n-            annotations = IAnnotations(request)\n+            annotations = IAnnotations(request, {})\n             if self.key not in annotations:\n                 annotations[self.key] = dict()\n             cache = annotations[self.key]\n@@ -52,10 +63,18 @@ def memogetter(*args, **kwargs):\n \n     def memoize_contextless(self, func):\n         def memogetter(*args, **kwargs):\n-            instance = args[0]\n-            request = getattr(instance, "request", None)\n \n-            annotations = IAnnotations(request)\n+            if args:\n+                instance = args[0]\n+            else:\n+                instance = None\n+\n+            try:\n+                request = instance.request\n+            except AttributeError:\n+                request = getRequest()\n+\n+            annotations = IAnnotations(request, {})\n             if self.key not in annotations:\n                 annotations[self.key] = dict()\n             cache = annotations[self.key]\ndiff --git a/plone/memoize/view.rst b/plone/memoize/view.rst\nindex 75da470..e9ad76f 100644\n--- a/plone/memoize/view.rst\n+++ b/plone/memoize/view.rst\n@@ -176,3 +176,72 @@ based on parameters, but not on context::\n     >>> print(msg2.getAnotherMsg(\'J.D.\', **{\'raise\':\'roofbeams\'}))\n     J.D.: so long, cruel world& raise--roofbeams\n \n+There is also support for using a global request\n+if zope.globalrequest is available.\n+With that you can cache also functions.\n+\n+If the global request is missing nothing changes:\n+\n+    >>> a = "foo"\n+    >>> @view.memoize_contextless\n+    ... def memoized_function():\n+    ...     return a\n+    >>> memoized_function()\n+    \'foo\'\n+    >>> a = "bar"\n+    >>> memoized_function()\n+    \'bar\'\n+\n+Now we provide a global request which supports annotations:\n+\n+    >>> from zope.globalrequest import setRequest\n+    >>> from zope.interface import alsoProvides\n+    >>> from zope.annotation import IAttributeAnnotatable\n+    >>> global_request = TestRequest()\n+    >>> alsoProvides(global_request, IAttributeAnnotatable)\n+    >>> setRequest(global_request)\n+\n+With that in place the results are cached:\n+    >>> a = "foo"\n+    >>> memoized_function()\n+    \'foo\'\n+    >>> a = "bar"\n+    >>> memoized_function()\n+    \'foo\'\n+\n+\n+The same is true for an adapter:\n+\n+    >>> class Adapter(object):\n+    ...\n+    ...     msg = "foo"\n+    ...\n+    ...     def __init__(self, context):\n+    ...         self.context = context\n+    ...\n+    ...     @view.memoize\n+    ...     def context_aware_function(self):\n+    ...         return self.msg\n+    ...\n+    ...     @view.memoize_contextless\n+    ...     def context_unaware_function(self):\n+    ...         return self.msg\n+\n+We now instatiate two objects:\n+    >>> instance1 = Adapter(Dummy())\n+    >>> instance2 = Adapter(Dummy())\n+    >>> instance1.context_aware_function()\n+    \'foo\'\n+    >>> instance1.context_unaware_function()\n+    \'foo\'\n+\n+Let\'s verify that the cache depends on the context:\n+    >>> Adapter.msg = "bar"\n+    >>> instance2.context_aware_function()\n+    \'bar\'\n+    >>> instance1.context_unaware_function()\n+    \'foo\'\n+\n+Still instance1 is not aware of the change:\n+    >>> instance1.context_aware_function()\n+    \'foo\'\ndiff --git a/setup.py b/setup.py\nindex be8e128..b4a624c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -50,7 +50,9 @@ def read(*rnames):\n     include_package_data=True,\n     zip_safe=False,\n     test_suite="plone.memoize.tests.test_suite",\n-    extras_require=dict(test=["zope.configuration", "zope.publisher",]),\n+    extras_require=dict(\n+        test=["zope.configuration", "zope.globalrequest", "zope.publisher",]\n+    ),\n     install_requires=[\n         "setuptools",\n         "six",\n'

