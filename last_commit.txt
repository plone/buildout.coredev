Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-10-06T09:24:05+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/c84458dcf63ba9f38958cff61bb91d4a1d21adac

Restore webdav support when the webdav library is importable

Fixes #141

Files changed:
A news/141.fixed
M plone/dexterity/bbb.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_webdav.py

b'diff --git a/news/141.fixed b/news/141.fixed\nnew file mode 100644\nindex 0000000..9e295af\n--- /dev/null\n+++ b/news/141.fixed\n@@ -0,0 +1 @@\n+Restore webdav support when the webdav library is importable [ale-rt]\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nindex 218faa4..d92c75f 100644\n--- a/plone/dexterity/bbb.py\n+++ b/plone/dexterity/bbb.py\n@@ -1,12 +1,21 @@\n # -*- coding: utf-8 -*-\n-import pkg_resources\n+import zope.deferredimport\n \n \n-HAS_ZSERVER = True\n+zope.deferredimport.initialize()\n+\n+\n+HAS_WEBDAV = True\n try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n+    import webdav as _  # noqa: F401\n+except ImportError:\n+    HAS_WEBDAV = False\n+\n+\n+zope.deferredimport.deprecated(\n+    "Import HAS_WEBDAV instead.", HAS_ZSERVER="plone.dexterity:bbb.HAS_WEBDAV"\n+)\n+\n \n NullResource = None\n \ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 970b305..719945a 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -15,7 +15,7 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n-if bbb.HAS_ZSERVER:\n+if bbb.HAS_WEBDAV:\n     from webdav.NullResource import NullResource\n else:\n     NullResource = bbb.NullResource\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 5e9bf7a..c0ed037 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -4,7 +4,6 @@\n from Acquisition import aq_base\n from Acquisition import Implicit\n from email.message import Message\n-from email.parser import FeedParser\n from plone.dexterity import bbb\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n@@ -37,12 +36,19 @@\n import tempfile\n \n \n-if bbb.HAS_ZSERVER:\n+if bbb.HAS_WEBDAV:\n     from webdav.Resource import Resource\n else:\n     Resource = bbb.Resource\n \n \n+try:\n+    from email.parser import BytesFeedParser\n+except:\n+    # Python 2.7 compatibility\n+    from email.parser import FeedParser as BytesFeedParser\n+\n+\n class DAVResourceMixin(object):\n     """Mixin class for WebDAV resource support.\n \n@@ -783,7 +789,7 @@ def __init__(self, context):\n         self._closed = False\n         self._name = None\n         self._written = 0\n-        self._parser = FeedParser()\n+        self._parser = BytesFeedParser()\n         self._message = None\n \n     @property\n@@ -842,6 +848,8 @@ def close(self):\n     def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n+        if isinstance(data, six.text_type):\n+            data = data.encode()\n         self._written += len(data)\n         self._parser.feed(data)\n \n@@ -857,7 +865,7 @@ def truncate(self, size=None):\n             )\n         if self._closed:\n             raise ValueError("File is closed")\n-        self._parser = FeedParser()\n+        self._parser = BytesFeedParser()\n         self._written = 0\n \n     def flush(self):\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 56bbdac..04fb32e 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,18 +1,13 @@\n # -*- coding: utf-8 -*-\n+from plone.dexterity.bbb import HAS_WEBDAV\n+\n import gc\n-import pkg_resources\n import six\n import unittest\n import zope.component\n import zope.component.testing\n \n \n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n-\n try:\n     from unittest.mock import Mock\n except ImportError:\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex d496a54..a204e1f 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,13 +1,12 @@\n # -*- coding: utf-8 -*-\n-from .case import HAS_ZSERVER\n+from .case import HAS_WEBDAV\n from .case import MockTestCase\n \n \n-if HAS_ZSERVER:\n+if HAS_WEBDAV:\n \n     from .case import ItemDummy\n     from email.message import Message\n-    from mock import Mock\n     from OFS.Folder import Folder\n     from OFS.SimpleItem import SimpleItem\n     from plone.autoform.interfaces import IFormFieldProvider\n@@ -47,6 +46,19 @@\n     from ZPublisher.Iterators import IStreamIterator\n \n     import re\n+    import six\n+\n+    try:\n+        from unittest.mock import Mock\n+    except ImportError:\n+        from mock import Mock\n+\n+\n+    if six.PY2:\n+        # cope with upstream library changes in rendering the XML prolog\n+        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n+    else:\n+        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n \n     @provider(IFormFieldProvider)\n@@ -512,8 +524,7 @@ def content_type(self):\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n+            body = XML_PROLOG + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -550,11 +561,10 @@ def content_type(self):\n \n             result = response.getBody()\n             result = re.sub(\n-                r\'<n:getlastmodified>.+</n:getlastmodified>\',\n-                \'<n:getlastmodified>...</n:getlastmodified>\',\n+                br\'<n:getlastmodified>.+</n:getlastmodified>\',\n+                br\'<n:getlastmodified>...</n:getlastmodified>\',\n                 result\n             )\n-\n             self.assertEqual(result.strip(), body.strip())\n \n         def test_PROPPATCH(self):\n@@ -599,8 +609,7 @@ def content_type(self):\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n+            body = XML_PROLOG + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -618,6 +627,7 @@ def content_type(self):\n """\n \n             result = response.getBody()\n+\n             self.assertEqual(body.strip(), result.strip())\n \n         def test_LOCK(self):\n@@ -1083,7 +1093,7 @@ class ITest(Interface):\n             from plone.rfc822 import constructMessageFromSchemata\n             self.patch_global(constructMessageFromSchemata, return_value=message)\n \n-            body = """\\\n+            body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1102,26 +1112,26 @@ class ITest(Interface):\n \n             readfile.seek(2)\n             self.assertEqual(2, readfile.tell())\n-            self.assertEqual(\'tl\', readfile.read(2))\n+            self.assertEqual(b\'tl\', readfile.read(2))\n             self.assertEqual(4, readfile.tell())\n \n             readfile.seek(0, 2)\n             self.assertEqual(69, readfile.tell())\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', readfile.readlines()[1])\n+            self.assertEqual(b\'foo: 10\\n\', readfile.readlines()[1])\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', readfile.readlines(100)[1])\n+            self.assertEqual(b\'foo: 10\\n\', readfile.readlines(100)[1])\n \n             readfile.seek(0)\n-            self.assertEqual(\'title: Test title\\n\', readfile.readline())\n+            self.assertEqual(b\'title: Test title\\n\', readfile.readline())\n \n             readfile.seek(0)\n-            self.assertEqual(\'title: Test title\\n\', readfile.readline(100))\n+            self.assertEqual(b\'title: Test title\\n\', readfile.readline(100))\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', list(iter(readfile))[1])\n+            self.assertEqual(b\'foo: 10\\n\', list(iter(readfile))[1])\n \n             self.assertEqual(False, readfile.closed)\n             readfile.close()\n@@ -1148,7 +1158,7 @@ class ITest(Interface):\n \n             writefile = DefaultWriteFile(item)\n \n-            body = """\\\n+            body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-10-06T10:26:59+02:00
Author: Wolfgang Thomas (pysailor) <thomas@syslab.com>
Commit: https://github.com/plone/plone.dexterity/commit/d0eb2eb482f9b3c597b276cfae3ff7ea0a3fde38

Merge pull request #142 from plone/141-webdav

Restore webdav support when the webdav library is importable

Files changed:
A news/141.fixed
M plone/dexterity/bbb.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_webdav.py

b'diff --git a/news/141.fixed b/news/141.fixed\nnew file mode 100644\nindex 0000000..9e295af\n--- /dev/null\n+++ b/news/141.fixed\n@@ -0,0 +1 @@\n+Restore webdav support when the webdav library is importable [ale-rt]\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nindex 218faa4..d92c75f 100644\n--- a/plone/dexterity/bbb.py\n+++ b/plone/dexterity/bbb.py\n@@ -1,12 +1,21 @@\n # -*- coding: utf-8 -*-\n-import pkg_resources\n+import zope.deferredimport\n \n \n-HAS_ZSERVER = True\n+zope.deferredimport.initialize()\n+\n+\n+HAS_WEBDAV = True\n try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n+    import webdav as _  # noqa: F401\n+except ImportError:\n+    HAS_WEBDAV = False\n+\n+\n+zope.deferredimport.deprecated(\n+    "Import HAS_WEBDAV instead.", HAS_ZSERVER="plone.dexterity:bbb.HAS_WEBDAV"\n+)\n+\n \n NullResource = None\n \ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 970b305..719945a 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -15,7 +15,7 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n-if bbb.HAS_ZSERVER:\n+if bbb.HAS_WEBDAV:\n     from webdav.NullResource import NullResource\n else:\n     NullResource = bbb.NullResource\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 5e9bf7a..c0ed037 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -4,7 +4,6 @@\n from Acquisition import aq_base\n from Acquisition import Implicit\n from email.message import Message\n-from email.parser import FeedParser\n from plone.dexterity import bbb\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n@@ -37,12 +36,19 @@\n import tempfile\n \n \n-if bbb.HAS_ZSERVER:\n+if bbb.HAS_WEBDAV:\n     from webdav.Resource import Resource\n else:\n     Resource = bbb.Resource\n \n \n+try:\n+    from email.parser import BytesFeedParser\n+except:\n+    # Python 2.7 compatibility\n+    from email.parser import FeedParser as BytesFeedParser\n+\n+\n class DAVResourceMixin(object):\n     """Mixin class for WebDAV resource support.\n \n@@ -783,7 +789,7 @@ def __init__(self, context):\n         self._closed = False\n         self._name = None\n         self._written = 0\n-        self._parser = FeedParser()\n+        self._parser = BytesFeedParser()\n         self._message = None\n \n     @property\n@@ -842,6 +848,8 @@ def close(self):\n     def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n+        if isinstance(data, six.text_type):\n+            data = data.encode()\n         self._written += len(data)\n         self._parser.feed(data)\n \n@@ -857,7 +865,7 @@ def truncate(self, size=None):\n             )\n         if self._closed:\n             raise ValueError("File is closed")\n-        self._parser = FeedParser()\n+        self._parser = BytesFeedParser()\n         self._written = 0\n \n     def flush(self):\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 56bbdac..04fb32e 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,18 +1,13 @@\n # -*- coding: utf-8 -*-\n+from plone.dexterity.bbb import HAS_WEBDAV\n+\n import gc\n-import pkg_resources\n import six\n import unittest\n import zope.component\n import zope.component.testing\n \n \n-HAS_ZSERVER = True\n-try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n-\n try:\n     from unittest.mock import Mock\n except ImportError:\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex d496a54..a204e1f 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,13 +1,12 @@\n # -*- coding: utf-8 -*-\n-from .case import HAS_ZSERVER\n+from .case import HAS_WEBDAV\n from .case import MockTestCase\n \n \n-if HAS_ZSERVER:\n+if HAS_WEBDAV:\n \n     from .case import ItemDummy\n     from email.message import Message\n-    from mock import Mock\n     from OFS.Folder import Folder\n     from OFS.SimpleItem import SimpleItem\n     from plone.autoform.interfaces import IFormFieldProvider\n@@ -47,6 +46,19 @@\n     from ZPublisher.Iterators import IStreamIterator\n \n     import re\n+    import six\n+\n+    try:\n+        from unittest.mock import Mock\n+    except ImportError:\n+        from mock import Mock\n+\n+\n+    if six.PY2:\n+        # cope with upstream library changes in rendering the XML prolog\n+        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n+    else:\n+        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n \n     @provider(IFormFieldProvider)\n@@ -512,8 +524,7 @@ def content_type(self):\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n+            body = XML_PROLOG + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -550,11 +561,10 @@ def content_type(self):\n \n             result = response.getBody()\n             result = re.sub(\n-                r\'<n:getlastmodified>.+</n:getlastmodified>\',\n-                \'<n:getlastmodified>...</n:getlastmodified>\',\n+                br\'<n:getlastmodified>.+</n:getlastmodified>\',\n+                br\'<n:getlastmodified>...</n:getlastmodified>\',\n                 result\n             )\n-\n             self.assertEqual(result.strip(), body.strip())\n \n         def test_PROPPATCH(self):\n@@ -599,8 +609,7 @@ def content_type(self):\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n+            body = XML_PROLOG + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -618,6 +627,7 @@ def content_type(self):\n """\n \n             result = response.getBody()\n+\n             self.assertEqual(body.strip(), result.strip())\n \n         def test_LOCK(self):\n@@ -1083,7 +1093,7 @@ class ITest(Interface):\n             from plone.rfc822 import constructMessageFromSchemata\n             self.patch_global(constructMessageFromSchemata, return_value=message)\n \n-            body = """\\\n+            body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1102,26 +1112,26 @@ class ITest(Interface):\n \n             readfile.seek(2)\n             self.assertEqual(2, readfile.tell())\n-            self.assertEqual(\'tl\', readfile.read(2))\n+            self.assertEqual(b\'tl\', readfile.read(2))\n             self.assertEqual(4, readfile.tell())\n \n             readfile.seek(0, 2)\n             self.assertEqual(69, readfile.tell())\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', readfile.readlines()[1])\n+            self.assertEqual(b\'foo: 10\\n\', readfile.readlines()[1])\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', readfile.readlines(100)[1])\n+            self.assertEqual(b\'foo: 10\\n\', readfile.readlines(100)[1])\n \n             readfile.seek(0)\n-            self.assertEqual(\'title: Test title\\n\', readfile.readline())\n+            self.assertEqual(b\'title: Test title\\n\', readfile.readline())\n \n             readfile.seek(0)\n-            self.assertEqual(\'title: Test title\\n\', readfile.readline(100))\n+            self.assertEqual(b\'title: Test title\\n\', readfile.readline(100))\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', list(iter(readfile))[1])\n+            self.assertEqual(b\'foo: 10\\n\', list(iter(readfile))[1])\n \n             self.assertEqual(False, readfile.closed)\n             readfile.close()\n@@ -1148,7 +1158,7 @@ class ITest(Interface):\n \n             writefile = DefaultWriteFile(item)\n \n-            body = """\\\n+            body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n'

