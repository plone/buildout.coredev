Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T22:44:24+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/08f90b7aa1988652bb27a0b166255f91e850f90f

Bump docs Python to 3.11, modernize tox config for docs, add livehtml environment

Files changed:
M .github/workflows/docs.yml
M tox.ini

b'diff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 9a0e79c3..68135d1c 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -6,7 +6,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        python-version: [3.9]\n+        python-version: [3.11]\n \n     steps:\n       # git checkout\ndiff --git a/tox.ini b/tox.ini\nindex 701ba2af..cc85d042 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -257,17 +257,15 @@ allowlist_externals =\n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n # See [testenv:docs] for classic documentation\n-basepython = python3.9\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\n     tests\n-\n deps =\n     -r requirements-docs.txt\n-\n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/plone6docs\n@@ -294,9 +292,9 @@ whitelist_externals =\n     mkdir\n \n [testenv:linkcheck]\n-basepython = python\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\n@@ -308,6 +306,21 @@ commands =\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n+[testenv:livehtml]\n+basepython = python3.11\n+skip_install = False\n+package = editable\n+allowlist_externals =\n+    mkdir\n+extras =\n+    {[testenv:plone6docs]extras}\n+deps =\n+    {[testenv:plone6docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-autobuild -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n+\n ##\n # Add extra configuration options in .meta.toml:\n #  [tox]\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T22:45:42+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/c12735772cbf6d5b9075111696bae8416011c554

Reorganize conf.py, add intersphinx and linkify extensions

Files changed:
M docs/conf.py

b'diff --git a/docs/conf.py b/docs/conf.py\nindex 9492f0a8..c20fbc67 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -16,13 +16,14 @@\n }\n \n extensions = [\n-    "sphinx.ext.doctest",\n-    "sphinx.ext.coverage",\n+    "myst_parser",\n     "sphinx.ext.autodoc",\n-    "sphinx.ext.viewcode",\n     "sphinx.ext.autosummary",\n-    "myst_parser",\n+    "sphinx.ext.coverage",\n+    "sphinx.ext.doctest",\n+    "sphinx.ext.intersphinx",\n     "sphinx.ext.todo",\n+    "sphinx.ext.viewcode",\n ]\n master_doc = "index"\n \n@@ -67,11 +68,12 @@ def __getattr__(cls, name):\n     sys.modules[mod_name] = Mock()\n \n \n-# -- Options for myST markdown conversion to html -----------------------------\n+# -- Options for MyST markdown conversion to HTML -----------------------------\n \n myst_enable_extensions = [\n     "colon_fence",\n     "deflist",\n+    "linkify",  # Identify "bare" web URLs and add hyperlinks.\n ]\n \n \n@@ -81,3 +83,25 @@ def __getattr__(cls, name):\n # a list of builtin themes.\n #\n html_theme = "sphinx_book_theme"\n+\n+\n+# -- Intersphinx configuration ----------------------------------\n+\n+# This extension can generate automatic links to the documentation of objects\n+# in other projects. Usage is simple: whenever Sphinx encounters a\n+# cross-reference that has no matching target in the current documentation set,\n+# it looks for targets in the documentation sets configured in\n+# intersphinx_mapping. A reference like :py:class:`zipfile.ZipFile` can then\n+# linkto the Python documentation for the ZipFile class, without you having to\n+# specify where it is located exactly.\n+#\n+# https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html\n+#\n+# Note that Plone Documentation imports documentation from several remote repositories.\n+# These projects need to build their docs as part of their CI/CD and testing.\n+# We use Intersphinx to resolve targets when either the individual project\'s or\n+# the entire Plone Documentation is built.\n+intersphinx_mapping = {\n+    "plone": ("https://6.docs.plone.org/", None),  # for imported packages\n+    "plone5": ("https://5.docs.plone.org/", None),\n+}\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T22:46:33+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/abee0be8c816dc267f3fe233b9cc03e400bc84aa

Remove Makefile in favor of tox

Files changed:
D Makefile

b'diff --git a/Makefile b/Makefile\ndeleted file mode 100644\nindex 31094091..00000000\n--- a/Makefile\n+++ /dev/null\n@@ -1,62 +0,0 @@\n-SHELL := /bin/bash\n-CURRENT_DIR:="$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))"\n-\n-version = 3\n-\n-# We like colors\n-# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n-RED=`tput setaf 1`\n-GREEN=`tput setaf 2`\n-RESET=`tput sgr0`\n-YELLOW=`tput setaf 3`\n-\n-\n-# all: .installed.cfg\n-\n-# Add the following \'help\' target to your Makefile\n-# And add help text after each target name starting with \'\\#\\#\'\n-.PHONY: help\n-help: ## This help message\n-\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n-\n-\n-\n-bin/python bin/pip:\n-\tpython$(version) -m venv . || virtualenv --python=python$(version) .\n-\tbin/python -m pip install --upgrade pip\n-\n-\n-# Documentation\n-# ----------------------------------------------------------------------\n-\n-# TODO Remove complete Makefile when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n-\n-# Just a developer helper. Can be replaced by \'tox -e docs\' (\'tox -e plone6docs\') \n-.PHONY: docs-html\n-docs-html: bin/python bin/pip ## Build documentation\n-\tbin/pip install tox\n-\tbin/tox -e plone6docs\n-\t@echo\n-\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n-\n-.PHONY: livehtml\n-livehtml:\n-\tsphinx-autobuild  -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html $(O)\n-\n-# TODO Remove when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n-.PHONY: netlify\n-netlify: bin/python bin/pip ## Build documentation (Netlfy style)\n-\tbin/pip install tox\n-\tbin/tox -e plone6docs\n-\t@echo\n-\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n-\n-## Run conversion of documentation from restructuredText to myST\n-# TODO Remove later when MyST documentation is settled.\n-.PHONY: conversion-to-myst\n-conversion-to-myst: bin/python bin/pip\n-\tbin/pip install "rst-to-myst[sphinx]"\n-\t-bin/rst2myst convert -R docs/*.rst\n-\t-bin/rst2myst convert -R docs/**/*.rst\n-\tpython fix-converted-myst.py\n-\tmake netlify\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T22:47:17+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/ab92564a644ecec007f8cdaf54d912a3452efb8c

Update links to new Plone 6 core contributing documentation

Files changed:
M CONTRIBUTING.rst
M README.md

b"diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\nindex 505f3ce7..116ef6d3 100644\n--- a/CONTRIBUTING.rst\n+++ b/CONTRIBUTING.rst\n@@ -1 +1 @@\n-Please see https://5.docs.plone.org/develop/coredev/docs/guidelines.html\n+Please see [Contributing to Plone](https://6.docs.plone.org/contributing/index.html) and [Contributing to `plone.api`](https://6.docs.plone.org/plone.api/contribute/index.html).\ndiff --git a/README.md b/README.md\nindex ec224189..481eec7e 100644\n--- a/README.md\n+++ b/README.md\n@@ -29,8 +29,7 @@ Recipes try to assume the user does not have extensive knowledge about Plone int\n \n \n Contributors\n-    Please read the document [Process for Plone core's development](https://5.docs.plone.org/develop/coredev/docs/index.html).\n-    Also consult the section about contribution in the [plone.api contributors documentation](https://5.docs.plone.org/develop/plone.api/docs/contribute/index.html).\n+    Please read [Contributing to Plone](https://6.docs.plone.org/contributing/index.html) and [Contributing to `plone.api`](https://6.docs.plone.org/plone.api/contribute/index.html).\n \n Source Code\n     at the [Plone code repository hosted at GitHub](https://github.com/plone/plone.api).\n"

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T23:04:09+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/c3fe7d4b26cf55ae7248d4f84afd42e8e0a2e8c4

Sync .meta.toml with tox.ini

Files changed:
M .meta.toml

b'diff --git a/.meta.toml b/.meta.toml\nindex d0ae1c53..79351086 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -79,17 +79,15 @@ allowlist_externals =\n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n # See [testenv:docs] for classic documentation\n-basepython = python3.9\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\n     tests\n-\n deps =\n     -r requirements-docs.txt\n-\n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/plone6docs\n@@ -116,9 +114,9 @@ whitelist_externals =\n     mkdir\n \n [testenv:linkcheck]\n-basepython = python\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T23:29:19+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/91f906524e1c73517f2c22850f0d46e8d7629450

Simplify contributing documentation

Files changed:
A docs/contribute.md
M docs/index.md
D docs/contribute/develop.md
D docs/contribute/index.md

b'diff --git a/docs/contribute.md b/docs/contribute.md\nnew file mode 100644\nindex 00000000..2b55c84a\n--- /dev/null\n+++ b/docs/contribute.md\n@@ -0,0 +1,227 @@\n+---\n+myst:\n+  html_meta:\n+    "description": "Contribute to plone.api"\n+    "property=og:description": "Contribute to plone.api"\n+    "property=og:title": "Contribute to plone.api"\n+    "keywords": "plone.api, contribute, Plone, API, development"\n+---\n+\n+# Contribute to `plone.api`\n+\n+This section describes how to contribute to the `plone.api` project.\n+It extends {doc}`plone:contributing/index`.\n+\n+\n+## Pre-requisites\n+\n+Prepare your system by installing pre-requisites.\n+\n+\n+### System libraries\n+\n+See {ref}`plone:plone-pre-requisites-label`.\n+\n+\n+### tox\n+\n+[tox](https://tox.wiki/en/stable/index.html) automates and standardizes testing in Python.\n+Install tox into your Python user space with the following command.\n+\n+```shell\n+python -m pip install --user tox\n+```\n+\n+\n+## Create development environment\n+\n+After satisfying the pre-requisites, you are ready to create your development environment.\n+`plone.api` uses `tox` as a wrapper around `coredev.buildout` to simplify development, whereas Plone core uses `coredev.buildout` directly.\n+\n+Start by changing your working directory to your project folder, and download the latest `plone.api` source code.\n+\n+```shell\n+cd <your_project_folder>\n+git clone https://github.com/plone/plone.api.git\n+```\n+\n+Next go into the newly created directory, and build your environment.\n+\n+```shell\n+cd plone.api\n+tox\n+```\n+\n+Go make some tea while `tox` runs all tasks listed by issuing the command `tox -l`.\n+\n+Open `tox.ini` in your code editor to see all configured commands and what they do.\n+Some helpful `tox` commands are shown below.\n+\n+```shell\n+tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n+tox -e plone6docs     # build documentation\n+tox -e livehtml       # build, serve, and reload changes to documentation\n+tox -l                # list all tox environments\n+```\n+\n+\n+(git-workflow)=\n+\n+## git\n+\n+Use the following git branches when contributing to `plone.api`.\n+\n+feature branches\n+:   All development for a new feature or bug fix must be done on a new branch.\n+\n+`master`\n+:   Pull requests should be made from a feature branch against the `master` branch.\n+    When features and bug fixes are complete and approved, they are merged into the `master` branch.\n+\n+```{seealso}\n+{ref}`plone:contributing-core-work-with-git-label`\n+```\n+\n+\n+## Continuous integration\n+\n+`plone.api` uses GitHub workflows for continuous integration.\n+On every push to the `master` branch, GitHub runs its workflows for all tests and code quality checks.\n+GitHub workflows are configured in the directory `.github/workflows` at the root of this package.\n+\n+\n+## Documentation\n+\n+For every feature change or addition to `plone.api`, you should add documentation of it.\n+`plone.api` uses [MyST](https://myst-parser.readthedocs.io/en/latest/) for documentation syntax.\n+\n+```{seealso}\n+{doc}`plone:contributing/documentation/index`\n+```\n+\n+After adding or modifying documentation, you can build the documentation with the following command.\n+\n+```shell\n+tox -e plone6docs\n+```\n+\n+Alternatively, you can automatically reload changes to the documentation as you edit it in a web browser.\n+\n+```shell\n+tox -e livehtml\n+```\n+\n+The [`plone.api` documentation](https://6.docs.plone.org/plone.api) is automatically generated from the documentation source files when its submodule is updated in the [main Plone `documentation` repository](https://github.com/plone/documentation/).\n+\n+\n+### Add a function to an existing module\n+\n+This section describes how to add a new function `foo` to `plone.api`.\n+\n+The function would go in the module `plone.api.content`, located in the file {file}`src/plone/api/content.py`.\n+\n+% invisible-code-block: python\n+%\n+% from plone.api.validation import at_least_one_of\n+% from plone.api.validation import mutually_exclusive_parameters\n+\n+```python\n+@mutually_exclusive_parameters(\'path\', \'UID\')\n+@at_least_one_of(\'path\', \'UID\')\n+def foo(path=None, UID=None):\n+    """Do foo.\n+\n+    :param path: Path to the object we want to get,\n+        relative to the portal root.\n+    :type path: string\n+\n+    :param UID: UID of the object we want to get.\n+    :type UID: string\n+\n+    :returns: String\n+    :raises:\n+        :class:`~plone.api.exc.MissingParameterError`,\n+        :class:`~plone.api.exc.InvalidParameterError`\n+    :Example: :ref:`content-foo-example`\n+    """\n+    return "foo"\n+```\n+\n+% invisible-code-block: python\n+%\n+% bar = foo(\'/plone/blog\')\n+% self.assertEqual(bar,"foo")\n+%\n+% from plone.api.exc import InvalidParameterError\n+% self.assertRaises(\n+%     InvalidParameterError,\n+%     lambda: foo("/plone/blog", "abcd001")\n+% )\n+\n+Add documentation in {file}`docs/api/content.md`.\n+Narrative documentation should describe what your function does.\n+\n+You should also write some tests in code blocks.\n+`TestCase` methods, such as `self.assertEqual()`, are available in `doctests`.\n+See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n+The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in `plone.api`\'s test setup.\n+The package `manuel` allows you to write doctests as common Python code in code blocks.\n+\n+The following example shows narrative documentation and doctests.\n+\n+````markdown\n+(content-foo-example)=\n+\n+## Get the foo of an object\n+\n+You can use the {meth}`api.content.foo` function to get the `foo` of an object.\n+\n+```python\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+````\n+\n+Code blocks are rendered in documentation.\n+\n+````markdown\n+```python\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n+```\n+````\n+\n+Invisible code blocks are not rendered in documentation and can be used for tests.\n+\n+```markdown\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+```\n+\n+Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n+\n+```markdown\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+```\n+\n+Functions and examples in documentation are mutually referenced.\n+The function references the narrative documentation via the label `content-foo-example`.\n+The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.\n+The documentation is rendered with a link from the API reference to the narrative documentation, which in turn links back to the API reference.\n+\n+\n+## Resources\n+\n+-   {doc}`plone:index`\n+-   [Source code](https://github.com/plone/plone.api)\n+-   [Issue tracker](https://github.com/plone/plone.api/issues)\n+-   [Code Coverage](https://coveralls.io/github/plone/plone.api)\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\ndeleted file mode 100644\nindex c2b0a699..00000000\n--- a/docs/contribute/develop.md\n+++ /dev/null\n@@ -1,299 +0,0 @@\n----\n-myst:\n-  html_meta:\n-    "description": "How to set up your development environment to contribute"\n-    "property=og:description": "How to set up your development environment to contribute"\n-    "property=og:title": "Development environment"\n-    "keywords": "contribute, Plone, API, development"\n----\n-\n-# Development environment\n-\n-{sub-ref}`today`\n-\n-This section is meant for contributors to the `plone.api` project.\n-Its purpose is to guide them through the steps needed to start contributing.\n-\n-```{note}\n-This HowTo is written for Linux and OS X users.\n-If you are running Windows, we suggest using either Windows Subsystem for Linux, VMWare or a similar virtualization tool to install Ubuntu Linux on a virtual machine, or installing Ubuntu Linux as a secondary operating system on your machine.\n-Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n-Plone does run on Windows, but it\'s not completely trivial to set it up.\n-```\n-\n-## Locations of information and tools\n-\n-- [Documentation @ 6.docs.plone.org](https://6.docs.plone.org)\n-- [Source code @ GitHub](https://github.com/plone/plone.api)\n-- [Issues @ GitHub](https://github.com/plone/plone.api/issues)\n-- [Code Coverage @ Coveralls.io](https://coveralls.io/github/plone/plone.api)\n-\n-## Prerequisites\n-\n-### System libraries\n-\n-First let\'s look at \'system\' libraries and applications that are normally installed with your OS packet manager, such as apt, aptitude, yum, etc.:\n-\n-- `libxml2` - An xml parser written in C.\n-- `libxslt` - XSLT library written in C.\n-- `git` - Version control system.\n-- `gcc` - The GNU Compiler Collection.\n-- `g++` - The C++ extensions for gcc.\n-- `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n-- `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n-- `Python 3` - It is recommended to use a Python virtual environment, using tools such as pyenv or venv, to get a clean Python version.\n-\n-### Python tools\n-\n-tox automation\n-: `tox` aims to automate and standardize testing in Python.\n-  It is part of a larger vision of easing the packaging, testing, and release process of Python software.\n-  Install with `pip install tox`.\n-\n-\n-### Further information\n-\n-If you experience problems, read through the following links as almost all of the above steps are required for a default Plone development environment:\n-\n-- <https://5.docs.plone.org/manage/index.html>\n-- <https://pypi.org/project/zc.buildout/>\n-- <https://pypi.org/project/setuptools/>\n-- <https://plone.org/download>\n-\n-\n-(git-workflow)=\n-\n-## Git workflow & branching model\n-\n-Our repository on GitHub has the following layout:\n-\n-- **feature branches**: all development for new features must be done in\n-  dedicated branches, normally one branch per feature,\n-- **master branch**: when features get completed they are merged into the\n-  master branch; bugfixes are committed directly on the master branch,\n-- **tags**: whenever we create a new release we tag the repository so we can\n-  later re-trace our steps, re-release versions, etc.\n-\n-### Squashing commits\n-\n-In order to keep a clear and concise git history, it is good practice to squash commits before merging.\n-Use `git rebase --interactive` to squash all commits that you think are unnecessary.\n-\n-## Creating and using the development environment\n-\n-Go to your projects folder and download the latest `plone.api` code:\n-\n-```shell\n-cd <your_work_folder>\n-git clone https://github.com/plone/plone.api.git\n-```\n-\n-Now `cd` into the newly created directory and build your environment:\n-\n-```shell\n-cd plone.api\n-pip install tox\n-tox\n-```\n-\n-Go make some tea while `tox` runs all tasks listed under `tox -l`.\n-\n-- runs all checks and tests\n-- generates documentation so you can open it locally later on\n-\n-Other commands that you may want to run:\n-\n-```shell\n-tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n-tox -e plone6docs     # re-generate documentation\n-```\n-\n-Run `tox -l` to list all tox environments.\n-Open `tox.ini` in your favorite code editor to see all possible commands and what they do.\n-Read <https://tox.wiki/en/latest/> to learn more about `tox`.\n-\n-\n-(working-on-an-issue)=\n-\n-## Working on an issue\n-\n-Our GitHub account contains a [list of open issues](https://github.com/plone/plone.api/issues).\n-Click on one that catches your attention.\n-If the issue description says `No one is assigned` it means no-one is already working on it and you can claim it as your own.\n-Click on the button next to the text and make yourself the one assigned for this issue.\n-\n-Based on our {ref}`git-workflow` all new features must be developed in separate git branches.\n-So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*.\n-This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n-Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n-\n-```shell\n-git checkout master       # go to master branch\n-git switch -c issue_17    # create a feature branch\n-# replace 17 with the issue number you are working on\n-\n-# change code here\n-\n-git add -p && git commit  # commit my changes\n-git push origin issue_17  # push my branch to GitHub\n-```\n-\n-At this point, others can see your changes, but they don\'t get affected by them.\n-In other words, others can comment on your code without your code changing their development environments.\n-\n-Read more about Git branching at <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches> and on our Git workflow at [Working with Git and GitHub](https://5.docs.plone.org/develop/coredev/docs/git.html).\n-\n-Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n-Open a browser and point it to `https://github.com/plone/plone.api/tree/issue_<ISSUE_NUMBER>`.\n-There you should see a `Pull Request` button.\n-Click on it, write some text about what you did and anything else you would like to tell the one who will review your work, and finally click `Send pull request`.\n-Now wait that someone comes by and merges your branch (don\'t do it yourself, even if you have permissions to do so).\n-\n-An example pull request text:\n-\n-```\n-Please merge my branch that resolves issue #13,\n-where I added the get_navigation_root() method.\n-```\n-\n-## Commit checklist\n-\n-Before every commit you should:\n-\n-- Run unit tests and syntax validation checks.\n-- Add an entry to `/news/` (if applicable).\n-\n-All syntax checks and all tests can be run with a single command.\n-This command also re-generates your documentation.\n-\n-```shell\n-tox\n-```\n-\n-```{note}\n-It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file\n-(or use `flake8` which combines both).\n-This saves you lots of time in the long run.\n-```\n-\n-\n-## GitHub Continuous Integration\n-\n-On every push GitHub runs all tests and syntax validation checks.\n-GitHub CI is configured in `.github/workflow` in the root of this package.\n-\n-\n-## Sphinx Documentation\n-\n-```{note}\n-Un-documented code is broken code.\n-```\n-\n-For every feature you add to the codebase, you should also add documentation of it to `docs/`.\n-\n-After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n-\n-Publicly available documentation on [6.docs.plone.org/plone.api](https://6.docs.plone.org/plone.api) is automatically generated from these source files when its submodule is updated in the [main Plone `documentation` repository](https://github.com/plone/documentation/).\n-\n-For writing documentation, read [Contributing to documentation](https://6.docs.plone.org/contributing/index.html).\n-\n-### Adding a function to an existing module\n-\n-Example: Add a new function `plone.api.content.foo`.\n-\n-The function would go in the module `plone.api.content`.\n-Therefore you would add your function in `/src/plone/api/content.py`.\n-\n-% invisible-code-block: python\n-%\n-% from plone.api.validation import at_least_one_of\n-% from plone.api.validation import mutually_exclusive_parameters\n-\n-```python\n-@mutually_exclusive_parameters(\'path\', \'UID\')\n-@at_least_one_of(\'path\', \'UID\')\n-def foo(path=None, UID=None):\n-    """Do foo.\n-\n-    :param path: Path to the object we want to get,\n-        relative to the portal root.\n-    :type path: string\n-\n-    :param UID: UID of the object we want to get.\n-    :type UID: string\n-\n-    :returns: String\n-    :raises:\n-        :class:`~plone.api.exc.MissingParameterError`,\n-        :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content-foo-example`\n-    """\n-    return "foo"\n-```\n-\n-% invisible-code-block: python\n-%\n-% bar = foo(\'/plone/blog\')\n-% self.assertEqual(bar,"foo")\n-%\n-% from plone.api.exc import InvalidParameterError\n-% self.assertRaises(\n-%     InvalidParameterError,\n-%     lambda: foo("/plone/blog", "abcd001")\n-% )\n-\n-Add documentation in `/docs/content.md`.\n-Describe what your function does, and write some tests in code blocks.\n-`TestCase` methods such as `self.assertEqual()` are available in `doctests`.\n-See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n-The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in `plone.api` testing set up.\n-The package `manuel` allows you to write doctests as common Python code in code blocks.\n-\n-````markdown\n-(content-foo-example)=\n-\n-## Get the foo of an object\n-\n-You can use the {meth}`api.content.foo` function to get the `foo` of an object.\n-\n-```python\n-from plone import api\n-blog_foo = api.content.foo(path="/plone/blog")\n-```\n-\n-% invisible-code-block: python\n-%\n-% self.assertEqual(blog_foo,"foo")\n-````\n-\n-Code blocks are rendered in documentation.\n-\n-````markdown\n-```python\n-from plone import api\n-blog_foo = api.content.foo(path="/plone/blog")\n-```\n-````\n-\n-Invisible code blocks are not rendered in documentation and can be used for tests.\n-\n-```markdown\n-% invisible-code-block: python\n-%\n-% self.assertEqual(blog_foo,"foo")\n-```\n-\n-Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n-\n-```markdown\n-% invisible-code-block: python\n-%\n-% portal = api.portal.get()\n-% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n-% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n-```\n-\n-Functions and examples in documentation are mutually referenced.\n-The function references the narrative documentation via label `content-foo-example`.\n-The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.\n-The documentation is rendered with a link from the API reference to the narrative documentation, which in turn links back to the API reference.\ndiff --git a/docs/contribute/index.md b/docs/contribute/index.md\ndeleted file mode 100644\nindex 9d73c418..00000000\n--- a/docs/contribute/index.md\n+++ /dev/null\n@@ -1,24 +0,0 @@\n----\n-myst:\n-  html_meta:\n-    "description": "How to contribute to plone.api"\n-    "property=og:description": "How to contribute to plone.api"\n-    "property=og:title": "Contributing to plone.api"\n-    "keywords": "Plone, API, development, contribute"\n----\n-\n-# Contributing to `plone.api`\n-\n-## Conventions\n-\n-For rules and guidelines on syntax style, development process, repository workflow, etc see [The Plone Styleguides](https://5.docs.plone.org/develop/styleguide/) and [Working with Git and GitHub](https://5.docs.plone.org/develop/coredev/docs/git.html)\n-\n-## Local development environment\n-\n-Setting up and using the local development environment.\n-\n-```{toctree}\n-:maxdepth: 2\n-\n-develop\n-```\ndiff --git a/docs/index.md b/docs/index.md\nindex 71fbcb6b..eacc7178 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -72,7 +72,7 @@ api/index\n ```{toctree}\n :maxdepth: 2\n \n-contribute/index\n+contribute\n ```\n \n ## Indices and tables\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T23:45:47+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/3c3942672d5144ed0cc3bbe8e4a2aee6adc71ef6

Add project_urls to improve PyPI rendering

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 351b3f63..5d9ed052 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -80,4 +80,9 @@\n         "Programming Language :: Python :: 3.11",\n     ],\n     platforms="Any",\n+    project_urls={\n+        "Documentation": "https://6.docs.plone.org/plone.api/index.html",\n+        "Changelog": "https://github.com/plone/plone.api/blob/master/CHANGES.rst",\n+        "Issue Tracker": "https://github.com/plone/plone.api/issues",\n+    },\n )\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-20T23:50:10+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/17bea469ebddbc4a30297ba210d26c8f6956f2ab

Add pre-commit documentation

Files changed:
M docs/contribute.md

b'diff --git a/docs/contribute.md b/docs/contribute.md\nindex 2b55c84a..96b1246d 100644\n--- a/docs/contribute.md\n+++ b/docs/contribute.md\n@@ -32,6 +32,23 @@ Install tox into your Python user space with the following command.\n python -m pip install --user tox\n ```\n \n+### pre-commit\n+\n+`plone.api` uses [pre-commit](https://pre-commit.com/) to automate code quality checks before every commit.\n+\n+Install pre-commit either with your system package manager.\n+Alternatively you can install pre-commit into your Python user.\n+\n+```shell\n+python -m pip install --user pre-commit\n+```\n+\n+Once installed, set up the git hook scripts to run on every commit.\n+\n+```shell\n+pre-commit install\n+```\n+\n \n ## Create development environment\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-21T00:01:12+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/bb15d686f4ef340d93ce1a04f138af0966f27b70

news

Files changed:
A news/539.documentation

b'diff --git a/news/539.documentation b/news/539.documentation\nnew file mode 100644\nindex 00000000..2ae5f3d8\n--- /dev/null\n+++ b/news/539.documentation\n@@ -0,0 +1 @@\n+Overhaul contributing documentation for Plone 6. @stevepiercy\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-22T04:29:29+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/b8ef69dd9ddb54f9e317e4cdf8012e2eaca51659

Switch to plone-sphinx-theme

Files changed:
M requirements-docs.txt

b'diff --git a/requirements-docs.txt b/requirements-docs.txt\nindex 8038479c..694c282c 100644\n--- a/requirements-docs.txt\n+++ b/requirements-docs.txt\n@@ -1,20 +1,12 @@\n-docutils<0.17,>=0.15  # sphinx-book-theme 0.2.0 has requirement docutils<0.17,>=0.15\n-Sphinx<5,>=3  # sphinx-book-theme 0.3.3 has requirement sphinx<5,>=3\n lesscpy\n linkify-it-py\n myst-parser\n+plone-sphinx-theme\n sphinx-autobuild\n-pydata-sphinx-theme<=0.8.99\n-sphinx-book-theme==0.3.3\n sphinx-copybutton\n sphinx-sitemap\n sphinx-togglebutton\n sphinxcontrib-spelling\n sphinxext-opengraph\n-sphinxcontrib-applehelp==1.0.4  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-devhelp==1.0.2  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-htmlhelp==2.0.1  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-qthelp==1.0.3  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-serializinghtml==1.1.5  # https://github.com/plone/documentation/issues/1604\n sphinxcontrib-video\n vale==2.30.0\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-22T23:00:09+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/1c064d5368946b9e246c6cb93ea1d8568b47e88a

s/should/must

Files changed:
M docs/contribute.md

b'diff --git a/docs/contribute.md b/docs/contribute.md\nindex 96b1246d..7b992c68 100644\n--- a/docs/contribute.md\n+++ b/docs/contribute.md\n@@ -109,7 +109,7 @@ GitHub workflows are configured in the directory `.github/workflows` at the root\n \n ## Documentation\n \n-For every feature change or addition to `plone.api`, you should add documentation of it.\n+For every feature change or addition to `plone.api`, you must add documentation of it.\n `plone.api` uses [MyST](https://myst-parser.readthedocs.io/en/latest/) for documentation syntax.\n \n ```{seealso}\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-22T23:13:03+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/3e1477095710c6d82e02477d4fba28b1f07f9186

Exclude GNU make as a requirement, as we use tox instead

Files changed:
M docs/contribute.md

b'diff --git a/docs/contribute.md b/docs/contribute.md\nindex 7b992c68..948db798 100644\n--- a/docs/contribute.md\n+++ b/docs/contribute.md\n@@ -20,7 +20,7 @@ Prepare your system by installing pre-requisites.\n \n ### System libraries\n \n-See {ref}`plone:plone-pre-requisites-label`.\n+You need to install system libraries, as described in {ref}`plone:plone-pre-requisites-label`, with the exception of GNU make.\n \n \n ### tox\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-22T23:14:44+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/b4e53e8c081d08906b3e5092017d72a424f2c991

Promote heading one level higher

Files changed:
M docs/contribute.md

b'diff --git a/docs/contribute.md b/docs/contribute.md\nindex 948db798..b5f869c6 100644\n--- a/docs/contribute.md\n+++ b/docs/contribute.md\n@@ -131,7 +131,7 @@ tox -e livehtml\n The [`plone.api` documentation](https://6.docs.plone.org/plone.api) is automatically generated from the documentation source files when its submodule is updated in the [main Plone `documentation` repository](https://github.com/plone/documentation/).\n \n \n-### Add a function to an existing module\n+## Add a function to an existing module\n \n This section describes how to add a new function `foo` to `plone.api`.\n \n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-07-23T12:10:54+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.api/commit/dcde26b4fd6a5d1b3032cf4fe0e62aa4154befc2

Merge pull request #539 from plone/contributing-plone-6

Overhaul contributing documentation for Plone 6

Files changed:
A docs/contribute.md
A news/539.documentation
M .github/workflows/docs.yml
M .meta.toml
M CONTRIBUTING.rst
M README.md
M docs/conf.py
M docs/index.md
M requirements-docs.txt
M setup.py
M tox.ini
D Makefile
D docs/contribute/develop.md
D docs/contribute/index.md

b'diff --git a/.github/workflows/docs.yml b/.github/workflows/docs.yml\nindex 9a0e79c3..68135d1c 100644\n--- a/.github/workflows/docs.yml\n+++ b/.github/workflows/docs.yml\n@@ -6,7 +6,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        python-version: [3.9]\n+        python-version: [3.11]\n \n     steps:\n       # git checkout\ndiff --git a/.meta.toml b/.meta.toml\nindex d0ae1c53..79351086 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -79,17 +79,15 @@ allowlist_externals =\n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n # See [testenv:docs] for classic documentation\n-basepython = python3.9\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\n     tests\n-\n deps =\n     -r requirements-docs.txt\n-\n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/plone6docs\n@@ -116,9 +114,9 @@ whitelist_externals =\n     mkdir\n \n [testenv:linkcheck]\n-basepython = python\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\ndiff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\nindex 505f3ce7..116ef6d3 100644\n--- a/CONTRIBUTING.rst\n+++ b/CONTRIBUTING.rst\n@@ -1 +1 @@\n-Please see https://5.docs.plone.org/develop/coredev/docs/guidelines.html\n+Please see [Contributing to Plone](https://6.docs.plone.org/contributing/index.html) and [Contributing to `plone.api`](https://6.docs.plone.org/plone.api/contribute/index.html).\ndiff --git a/Makefile b/Makefile\ndeleted file mode 100644\nindex 31094091..00000000\n--- a/Makefile\n+++ /dev/null\n@@ -1,62 +0,0 @@\n-SHELL := /bin/bash\n-CURRENT_DIR:="$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))"\n-\n-version = 3\n-\n-# We like colors\n-# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n-RED=`tput setaf 1`\n-GREEN=`tput setaf 2`\n-RESET=`tput sgr0`\n-YELLOW=`tput setaf 3`\n-\n-\n-# all: .installed.cfg\n-\n-# Add the following \'help\' target to your Makefile\n-# And add help text after each target name starting with \'\\#\\#\'\n-.PHONY: help\n-help: ## This help message\n-\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n-\n-\n-\n-bin/python bin/pip:\n-\tpython$(version) -m venv . || virtualenv --python=python$(version) .\n-\tbin/python -m pip install --upgrade pip\n-\n-\n-# Documentation\n-# ----------------------------------------------------------------------\n-\n-# TODO Remove complete Makefile when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n-\n-# Just a developer helper. Can be replaced by \'tox -e docs\' (\'tox -e plone6docs\') \n-.PHONY: docs-html\n-docs-html: bin/python bin/pip ## Build documentation\n-\tbin/pip install tox\n-\tbin/tox -e plone6docs\n-\t@echo\n-\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n-\n-.PHONY: livehtml\n-livehtml:\n-\tsphinx-autobuild  -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html $(O)\n-\n-# TODO Remove when Netlify build command is switched from \'make netlify\' to \'tox -e docs\'.\n-.PHONY: netlify\n-netlify: bin/python bin/pip ## Build documentation (Netlfy style)\n-\tbin/pip install tox\n-\tbin/tox -e plone6docs\n-\t@echo\n-\t@echo "Build of documentation finished. The HTML pages are in _build/plone6docs/html."\n-\n-## Run conversion of documentation from restructuredText to myST\n-# TODO Remove later when MyST documentation is settled.\n-.PHONY: conversion-to-myst\n-conversion-to-myst: bin/python bin/pip\n-\tbin/pip install "rst-to-myst[sphinx]"\n-\t-bin/rst2myst convert -R docs/*.rst\n-\t-bin/rst2myst convert -R docs/**/*.rst\n-\tpython fix-converted-myst.py\n-\tmake netlify\ndiff --git a/README.md b/README.md\nindex ec224189..481eec7e 100644\n--- a/README.md\n+++ b/README.md\n@@ -29,8 +29,7 @@ Recipes try to assume the user does not have extensive knowledge about Plone int\n \n \n Contributors\n-    Please read the document [Process for Plone core\'s development](https://5.docs.plone.org/develop/coredev/docs/index.html).\n-    Also consult the section about contribution in the [plone.api contributors documentation](https://5.docs.plone.org/develop/plone.api/docs/contribute/index.html).\n+    Please read [Contributing to Plone](https://6.docs.plone.org/contributing/index.html) and [Contributing to `plone.api`](https://6.docs.plone.org/plone.api/contribute/index.html).\n \n Source Code\n     at the [Plone code repository hosted at GitHub](https://github.com/plone/plone.api).\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 9492f0a8..c20fbc67 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -16,13 +16,14 @@\n }\n \n extensions = [\n-    "sphinx.ext.doctest",\n-    "sphinx.ext.coverage",\n+    "myst_parser",\n     "sphinx.ext.autodoc",\n-    "sphinx.ext.viewcode",\n     "sphinx.ext.autosummary",\n-    "myst_parser",\n+    "sphinx.ext.coverage",\n+    "sphinx.ext.doctest",\n+    "sphinx.ext.intersphinx",\n     "sphinx.ext.todo",\n+    "sphinx.ext.viewcode",\n ]\n master_doc = "index"\n \n@@ -67,11 +68,12 @@ def __getattr__(cls, name):\n     sys.modules[mod_name] = Mock()\n \n \n-# -- Options for myST markdown conversion to html -----------------------------\n+# -- Options for MyST markdown conversion to HTML -----------------------------\n \n myst_enable_extensions = [\n     "colon_fence",\n     "deflist",\n+    "linkify",  # Identify "bare" web URLs and add hyperlinks.\n ]\n \n \n@@ -81,3 +83,25 @@ def __getattr__(cls, name):\n # a list of builtin themes.\n #\n html_theme = "sphinx_book_theme"\n+\n+\n+# -- Intersphinx configuration ----------------------------------\n+\n+# This extension can generate automatic links to the documentation of objects\n+# in other projects. Usage is simple: whenever Sphinx encounters a\n+# cross-reference that has no matching target in the current documentation set,\n+# it looks for targets in the documentation sets configured in\n+# intersphinx_mapping. A reference like :py:class:`zipfile.ZipFile` can then\n+# linkto the Python documentation for the ZipFile class, without you having to\n+# specify where it is located exactly.\n+#\n+# https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html\n+#\n+# Note that Plone Documentation imports documentation from several remote repositories.\n+# These projects need to build their docs as part of their CI/CD and testing.\n+# We use Intersphinx to resolve targets when either the individual project\'s or\n+# the entire Plone Documentation is built.\n+intersphinx_mapping = {\n+    "plone": ("https://6.docs.plone.org/", None),  # for imported packages\n+    "plone5": ("https://5.docs.plone.org/", None),\n+}\ndiff --git a/docs/contribute.md b/docs/contribute.md\nnew file mode 100644\nindex 00000000..b5f869c6\n--- /dev/null\n+++ b/docs/contribute.md\n@@ -0,0 +1,244 @@\n+---\n+myst:\n+  html_meta:\n+    "description": "Contribute to plone.api"\n+    "property=og:description": "Contribute to plone.api"\n+    "property=og:title": "Contribute to plone.api"\n+    "keywords": "plone.api, contribute, Plone, API, development"\n+---\n+\n+# Contribute to `plone.api`\n+\n+This section describes how to contribute to the `plone.api` project.\n+It extends {doc}`plone:contributing/index`.\n+\n+\n+## Pre-requisites\n+\n+Prepare your system by installing pre-requisites.\n+\n+\n+### System libraries\n+\n+You need to install system libraries, as described in {ref}`plone:plone-pre-requisites-label`, with the exception of GNU make.\n+\n+\n+### tox\n+\n+[tox](https://tox.wiki/en/stable/index.html) automates and standardizes testing in Python.\n+Install tox into your Python user space with the following command.\n+\n+```shell\n+python -m pip install --user tox\n+```\n+\n+### pre-commit\n+\n+`plone.api` uses [pre-commit](https://pre-commit.com/) to automate code quality checks before every commit.\n+\n+Install pre-commit either with your system package manager.\n+Alternatively you can install pre-commit into your Python user.\n+\n+```shell\n+python -m pip install --user pre-commit\n+```\n+\n+Once installed, set up the git hook scripts to run on every commit.\n+\n+```shell\n+pre-commit install\n+```\n+\n+\n+## Create development environment\n+\n+After satisfying the pre-requisites, you are ready to create your development environment.\n+`plone.api` uses `tox` as a wrapper around `coredev.buildout` to simplify development, whereas Plone core uses `coredev.buildout` directly.\n+\n+Start by changing your working directory to your project folder, and download the latest `plone.api` source code.\n+\n+```shell\n+cd <your_project_folder>\n+git clone https://github.com/plone/plone.api.git\n+```\n+\n+Next go into the newly created directory, and build your environment.\n+\n+```shell\n+cd plone.api\n+tox\n+```\n+\n+Go make some tea while `tox` runs all tasks listed by issuing the command `tox -l`.\n+\n+Open `tox.ini` in your code editor to see all configured commands and what they do.\n+Some helpful `tox` commands are shown below.\n+\n+```shell\n+tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n+tox -e plone6docs     # build documentation\n+tox -e livehtml       # build, serve, and reload changes to documentation\n+tox -l                # list all tox environments\n+```\n+\n+\n+(git-workflow)=\n+\n+## git\n+\n+Use the following git branches when contributing to `plone.api`.\n+\n+feature branches\n+:   All development for a new feature or bug fix must be done on a new branch.\n+\n+`master`\n+:   Pull requests should be made from a feature branch against the `master` branch.\n+    When features and bug fixes are complete and approved, they are merged into the `master` branch.\n+\n+```{seealso}\n+{ref}`plone:contributing-core-work-with-git-label`\n+```\n+\n+\n+## Continuous integration\n+\n+`plone.api` uses GitHub workflows for continuous integration.\n+On every push to the `master` branch, GitHub runs its workflows for all tests and code quality checks.\n+GitHub workflows are configured in the directory `.github/workflows` at the root of this package.\n+\n+\n+## Documentation\n+\n+For every feature change or addition to `plone.api`, you must add documentation of it.\n+`plone.api` uses [MyST](https://myst-parser.readthedocs.io/en/latest/) for documentation syntax.\n+\n+```{seealso}\n+{doc}`plone:contributing/documentation/index`\n+```\n+\n+After adding or modifying documentation, you can build the documentation with the following command.\n+\n+```shell\n+tox -e plone6docs\n+```\n+\n+Alternatively, you can automatically reload changes to the documentation as you edit it in a web browser.\n+\n+```shell\n+tox -e livehtml\n+```\n+\n+The [`plone.api` documentation](https://6.docs.plone.org/plone.api) is automatically generated from the documentation source files when its submodule is updated in the [main Plone `documentation` repository](https://github.com/plone/documentation/).\n+\n+\n+## Add a function to an existing module\n+\n+This section describes how to add a new function `foo` to `plone.api`.\n+\n+The function would go in the module `plone.api.content`, located in the file {file}`src/plone/api/content.py`.\n+\n+% invisible-code-block: python\n+%\n+% from plone.api.validation import at_least_one_of\n+% from plone.api.validation import mutually_exclusive_parameters\n+\n+```python\n+@mutually_exclusive_parameters(\'path\', \'UID\')\n+@at_least_one_of(\'path\', \'UID\')\n+def foo(path=None, UID=None):\n+    """Do foo.\n+\n+    :param path: Path to the object we want to get,\n+        relative to the portal root.\n+    :type path: string\n+\n+    :param UID: UID of the object we want to get.\n+    :type UID: string\n+\n+    :returns: String\n+    :raises:\n+        :class:`~plone.api.exc.MissingParameterError`,\n+        :class:`~plone.api.exc.InvalidParameterError`\n+    :Example: :ref:`content-foo-example`\n+    """\n+    return "foo"\n+```\n+\n+% invisible-code-block: python\n+%\n+% bar = foo(\'/plone/blog\')\n+% self.assertEqual(bar,"foo")\n+%\n+% from plone.api.exc import InvalidParameterError\n+% self.assertRaises(\n+%     InvalidParameterError,\n+%     lambda: foo("/plone/blog", "abcd001")\n+% )\n+\n+Add documentation in {file}`docs/api/content.md`.\n+Narrative documentation should describe what your function does.\n+\n+You should also write some tests in code blocks.\n+`TestCase` methods, such as `self.assertEqual()`, are available in `doctests`.\n+See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n+The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in `plone.api`\'s test setup.\n+The package `manuel` allows you to write doctests as common Python code in code blocks.\n+\n+The following example shows narrative documentation and doctests.\n+\n+````markdown\n+(content-foo-example)=\n+\n+## Get the foo of an object\n+\n+You can use the {meth}`api.content.foo` function to get the `foo` of an object.\n+\n+```python\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n+```\n+\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+````\n+\n+Code blocks are rendered in documentation.\n+\n+````markdown\n+```python\n+from plone import api\n+blog_foo = api.content.foo(path="/plone/blog")\n+```\n+````\n+\n+Invisible code blocks are not rendered in documentation and can be used for tests.\n+\n+```markdown\n+% invisible-code-block: python\n+%\n+% self.assertEqual(blog_foo,"foo")\n+```\n+\n+Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n+\n+```markdown\n+% invisible-code-block: python\n+%\n+% portal = api.portal.get()\n+% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n+% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n+```\n+\n+Functions and examples in documentation are mutually referenced.\n+The function references the narrative documentation via the label `content-foo-example`.\n+The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.\n+The documentation is rendered with a link from the API reference to the narrative documentation, which in turn links back to the API reference.\n+\n+\n+## Resources\n+\n+-   {doc}`plone:index`\n+-   [Source code](https://github.com/plone/plone.api)\n+-   [Issue tracker](https://github.com/plone/plone.api/issues)\n+-   [Code Coverage](https://coveralls.io/github/plone/plone.api)\ndiff --git a/docs/contribute/develop.md b/docs/contribute/develop.md\ndeleted file mode 100644\nindex c2b0a699..00000000\n--- a/docs/contribute/develop.md\n+++ /dev/null\n@@ -1,299 +0,0 @@\n----\n-myst:\n-  html_meta:\n-    "description": "How to set up your development environment to contribute"\n-    "property=og:description": "How to set up your development environment to contribute"\n-    "property=og:title": "Development environment"\n-    "keywords": "contribute, Plone, API, development"\n----\n-\n-# Development environment\n-\n-{sub-ref}`today`\n-\n-This section is meant for contributors to the `plone.api` project.\n-Its purpose is to guide them through the steps needed to start contributing.\n-\n-```{note}\n-This HowTo is written for Linux and OS X users.\n-If you are running Windows, we suggest using either Windows Subsystem for Linux, VMWare or a similar virtualization tool to install Ubuntu Linux on a virtual machine, or installing Ubuntu Linux as a secondary operating system on your machine.\n-Alternatively, you can browse Plone\'s documentation on how to get Plone development environment up and running on Windows.\n-Plone does run on Windows, but it\'s not completely trivial to set it up.\n-```\n-\n-## Locations of information and tools\n-\n-- [Documentation @ 6.docs.plone.org](https://6.docs.plone.org)\n-- [Source code @ GitHub](https://github.com/plone/plone.api)\n-- [Issues @ GitHub](https://github.com/plone/plone.api/issues)\n-- [Code Coverage @ Coveralls.io](https://coveralls.io/github/plone/plone.api)\n-\n-## Prerequisites\n-\n-### System libraries\n-\n-First let\'s look at \'system\' libraries and applications that are normally installed with your OS packet manager, such as apt, aptitude, yum, etc.:\n-\n-- `libxml2` - An xml parser written in C.\n-- `libxslt` - XSLT library written in C.\n-- `git` - Version control system.\n-- `gcc` - The GNU Compiler Collection.\n-- `g++` - The C++ extensions for gcc.\n-- `GNU tar` - The (un)archiving tool for extracting downloaded archives.\n-- `bzip2` and `gzip` decompression packages - `gzip` is nearly standard, however some platforms will require that `bzip2` be installed.\n-- `Python 3` - It is recommended to use a Python virtual environment, using tools such as pyenv or venv, to get a clean Python version.\n-\n-### Python tools\n-\n-tox automation\n-: `tox` aims to automate and standardize testing in Python.\n-  It is part of a larger vision of easing the packaging, testing, and release process of Python software.\n-  Install with `pip install tox`.\n-\n-\n-### Further information\n-\n-If you experience problems, read through the following links as almost all of the above steps are required for a default Plone development environment:\n-\n-- <https://5.docs.plone.org/manage/index.html>\n-- <https://pypi.org/project/zc.buildout/>\n-- <https://pypi.org/project/setuptools/>\n-- <https://plone.org/download>\n-\n-\n-(git-workflow)=\n-\n-## Git workflow & branching model\n-\n-Our repository on GitHub has the following layout:\n-\n-- **feature branches**: all development for new features must be done in\n-  dedicated branches, normally one branch per feature,\n-- **master branch**: when features get completed they are merged into the\n-  master branch; bugfixes are committed directly on the master branch,\n-- **tags**: whenever we create a new release we tag the repository so we can\n-  later re-trace our steps, re-release versions, etc.\n-\n-### Squashing commits\n-\n-In order to keep a clear and concise git history, it is good practice to squash commits before merging.\n-Use `git rebase --interactive` to squash all commits that you think are unnecessary.\n-\n-## Creating and using the development environment\n-\n-Go to your projects folder and download the latest `plone.api` code:\n-\n-```shell\n-cd <your_work_folder>\n-git clone https://github.com/plone/plone.api.git\n-```\n-\n-Now `cd` into the newly created directory and build your environment:\n-\n-```shell\n-cd plone.api\n-pip install tox\n-tox\n-```\n-\n-Go make some tea while `tox` runs all tasks listed under `tox -l`.\n-\n-- runs all checks and tests\n-- generates documentation so you can open it locally later on\n-\n-Other commands that you may want to run:\n-\n-```shell\n-tox -e py39-plone-60  # run all tests for Python 3.9 and Plone 6\n-tox -e plone6docs     # re-generate documentation\n-```\n-\n-Run `tox -l` to list all tox environments.\n-Open `tox.ini` in your favorite code editor to see all possible commands and what they do.\n-Read <https://tox.wiki/en/latest/> to learn more about `tox`.\n-\n-\n-(working-on-an-issue)=\n-\n-## Working on an issue\n-\n-Our GitHub account contains a [list of open issues](https://github.com/plone/plone.api/issues).\n-Click on one that catches your attention.\n-If the issue description says `No one is assigned` it means no-one is already working on it and you can claim it as your own.\n-Click on the button next to the text and make yourself the one assigned for this issue.\n-\n-Based on our {ref}`git-workflow` all new features must be developed in separate git branches.\n-So if you are not doing a very trivial fix, but rather adding new features/enhancements, you should create a *feature branch*.\n-This way your work is kept in an isolated place where you can receive feedback on it, improve it, etc.\n-Once we are happy with your implementation, your branch gets merged into *master* at which point everyone else starts using your code.\n-\n-```shell\n-git checkout master       # go to master branch\n-git switch -c issue_17    # create a feature branch\n-# replace 17 with the issue number you are working on\n-\n-# change code here\n-\n-git add -p && git commit  # commit my changes\n-git push origin issue_17  # push my branch to GitHub\n-```\n-\n-At this point, others can see your changes, but they don\'t get affected by them.\n-In other words, others can comment on your code without your code changing their development environments.\n-\n-Read more about Git branching at <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches> and on our Git workflow at [Working with Git and GitHub](https://5.docs.plone.org/develop/coredev/docs/git.html).\n-\n-Once you are done with your work and you would like us to merge your changes into master, go to GitHub to do a *pull request*.\n-Open a browser and point it to `https://github.com/plone/plone.api/tree/issue_<ISSUE_NUMBER>`.\n-There you should see a `Pull Request` button.\n-Click on it, write some text about what you did and anything else you would like to tell the one who will review your work, and finally click `Send pull request`.\n-Now wait that someone comes by and merges your branch (don\'t do it yourself, even if you have permissions to do so).\n-\n-An example pull request text:\n-\n-```\n-Please merge my branch that resolves issue #13,\n-where I added the get_navigation_root() method.\n-```\n-\n-## Commit checklist\n-\n-Before every commit you should:\n-\n-- Run unit tests and syntax validation checks.\n-- Add an entry to `/news/` (if applicable).\n-\n-All syntax checks and all tests can be run with a single command.\n-This command also re-generates your documentation.\n-\n-```shell\n-tox\n-```\n-\n-```{note}\n-It pays off to invest a little time to make your editor run `pep8` and `pyflakes` on a file every time you save that file\n-(or use `flake8` which combines both).\n-This saves you lots of time in the long run.\n-```\n-\n-\n-## GitHub Continuous Integration\n-\n-On every push GitHub runs all tests and syntax validation checks.\n-GitHub CI is configured in `.github/workflow` in the root of this package.\n-\n-\n-## Sphinx Documentation\n-\n-```{note}\n-Un-documented code is broken code.\n-```\n-\n-For every feature you add to the codebase, you should also add documentation of it to `docs/`.\n-\n-After adding or modifying documentation, run `tox -e plone6docs` to re-generate your documentation.\n-\n-Publicly available documentation on [6.docs.plone.org/plone.api](https://6.docs.plone.org/plone.api) is automatically generated from these source files when its submodule is updated in the [main Plone `documentation` repository](https://github.com/plone/documentation/).\n-\n-For writing documentation, read [Contributing to documentation](https://6.docs.plone.org/contributing/index.html).\n-\n-### Adding a function to an existing module\n-\n-Example: Add a new function `plone.api.content.foo`.\n-\n-The function would go in the module `plone.api.content`.\n-Therefore you would add your function in `/src/plone/api/content.py`.\n-\n-% invisible-code-block: python\n-%\n-% from plone.api.validation import at_least_one_of\n-% from plone.api.validation import mutually_exclusive_parameters\n-\n-```python\n-@mutually_exclusive_parameters(\'path\', \'UID\')\n-@at_least_one_of(\'path\', \'UID\')\n-def foo(path=None, UID=None):\n-    """Do foo.\n-\n-    :param path: Path to the object we want to get,\n-        relative to the portal root.\n-    :type path: string\n-\n-    :param UID: UID of the object we want to get.\n-    :type UID: string\n-\n-    :returns: String\n-    :raises:\n-        :class:`~plone.api.exc.MissingParameterError`,\n-        :class:`~plone.api.exc.InvalidParameterError`\n-    :Example: :ref:`content-foo-example`\n-    """\n-    return "foo"\n-```\n-\n-% invisible-code-block: python\n-%\n-% bar = foo(\'/plone/blog\')\n-% self.assertEqual(bar,"foo")\n-%\n-% from plone.api.exc import InvalidParameterError\n-% self.assertRaises(\n-%     InvalidParameterError,\n-%     lambda: foo("/plone/blog", "abcd001")\n-% )\n-\n-Add documentation in `/docs/content.md`.\n-Describe what your function does, and write some tests in code blocks.\n-`TestCase` methods such as `self.assertEqual()` are available in `doctests`.\n-See [unittest.TestCase assert methods](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug) for all available methods.\n-The file is linked in `/src/plone/api/tests/doctests/`, which includes the doctests in `plone.api` testing set up.\n-The package `manuel` allows you to write doctests as common Python code in code blocks.\n-\n-````markdown\n-(content-foo-example)=\n-\n-## Get the foo of an object\n-\n-You can use the {meth}`api.content.foo` function to get the `foo` of an object.\n-\n-```python\n-from plone import api\n-blog_foo = api.content.foo(path="/plone/blog")\n-```\n-\n-% invisible-code-block: python\n-%\n-% self.assertEqual(blog_foo,"foo")\n-````\n-\n-Code blocks are rendered in documentation.\n-\n-````markdown\n-```python\n-from plone import api\n-blog_foo = api.content.foo(path="/plone/blog")\n-```\n-````\n-\n-Invisible code blocks are not rendered in documentation and can be used for tests.\n-\n-```markdown\n-% invisible-code-block: python\n-%\n-% self.assertEqual(blog_foo,"foo")\n-```\n-\n-Invisible code blocks are also handy for enriching the namespace without cluttering the narrative documentation.\n-\n-```markdown\n-% invisible-code-block: python\n-%\n-% portal = api.portal.get()\n-% image = api.content.create(type=\'Image\', id=\'image\', container=portal)\n-% blog = api.content.create(type=\'Link\', id=\'blog\', container=portal)\n-```\n-\n-Functions and examples in documentation are mutually referenced.\n-The function references the narrative documentation via label `content-foo-example`.\n-The narrative documentation references the API function documentation via `` {meth}`api.content.foo` ``.\n-The documentation is rendered with a link from the API reference to the narrative documentation, which in turn links back to the API reference.\ndiff --git a/docs/contribute/index.md b/docs/contribute/index.md\ndeleted file mode 100644\nindex 9d73c418..00000000\n--- a/docs/contribute/index.md\n+++ /dev/null\n@@ -1,24 +0,0 @@\n----\n-myst:\n-  html_meta:\n-    "description": "How to contribute to plone.api"\n-    "property=og:description": "How to contribute to plone.api"\n-    "property=og:title": "Contributing to plone.api"\n-    "keywords": "Plone, API, development, contribute"\n----\n-\n-# Contributing to `plone.api`\n-\n-## Conventions\n-\n-For rules and guidelines on syntax style, development process, repository workflow, etc see [The Plone Styleguides](https://5.docs.plone.org/develop/styleguide/) and [Working with Git and GitHub](https://5.docs.plone.org/develop/coredev/docs/git.html)\n-\n-## Local development environment\n-\n-Setting up and using the local development environment.\n-\n-```{toctree}\n-:maxdepth: 2\n-\n-develop\n-```\ndiff --git a/docs/index.md b/docs/index.md\nindex 71fbcb6b..eacc7178 100644\n--- a/docs/index.md\n+++ b/docs/index.md\n@@ -72,7 +72,7 @@ api/index\n ```{toctree}\n :maxdepth: 2\n \n-contribute/index\n+contribute\n ```\n \n ## Indices and tables\ndiff --git a/news/539.documentation b/news/539.documentation\nnew file mode 100644\nindex 00000000..2ae5f3d8\n--- /dev/null\n+++ b/news/539.documentation\n@@ -0,0 +1 @@\n+Overhaul contributing documentation for Plone 6. @stevepiercy\ndiff --git a/requirements-docs.txt b/requirements-docs.txt\nindex 8038479c..694c282c 100644\n--- a/requirements-docs.txt\n+++ b/requirements-docs.txt\n@@ -1,20 +1,12 @@\n-docutils<0.17,>=0.15  # sphinx-book-theme 0.2.0 has requirement docutils<0.17,>=0.15\n-Sphinx<5,>=3  # sphinx-book-theme 0.3.3 has requirement sphinx<5,>=3\n lesscpy\n linkify-it-py\n myst-parser\n+plone-sphinx-theme\n sphinx-autobuild\n-pydata-sphinx-theme<=0.8.99\n-sphinx-book-theme==0.3.3\n sphinx-copybutton\n sphinx-sitemap\n sphinx-togglebutton\n sphinxcontrib-spelling\n sphinxext-opengraph\n-sphinxcontrib-applehelp==1.0.4  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-devhelp==1.0.2  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-htmlhelp==2.0.1  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-qthelp==1.0.3  # https://github.com/plone/documentation/issues/1604\n-sphinxcontrib-serializinghtml==1.1.5  # https://github.com/plone/documentation/issues/1604\n sphinxcontrib-video\n vale==2.30.0\ndiff --git a/setup.py b/setup.py\nindex 351b3f63..5d9ed052 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -80,4 +80,9 @@\n         "Programming Language :: Python :: 3.11",\n     ],\n     platforms="Any",\n+    project_urls={\n+        "Documentation": "https://6.docs.plone.org/plone.api/index.html",\n+        "Changelog": "https://github.com/plone/plone.api/blob/master/CHANGES.rst",\n+        "Issue Tracker": "https://github.com/plone/plone.api/issues",\n+    },\n )\ndiff --git a/tox.ini b/tox.ini\nindex 701ba2af..cc85d042 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -257,17 +257,15 @@ allowlist_externals =\n [testenv:plone6docs]\n # New docs with sphinx-book-theme\n # See [testenv:docs] for classic documentation\n-basepython = python3.9\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\n     tests\n-\n deps =\n     -r requirements-docs.txt\n-\n commands =\n     python -VV\n     mkdir -p {toxinidir}/_build/plone6docs\n@@ -294,9 +292,9 @@ whitelist_externals =\n     mkdir\n \n [testenv:linkcheck]\n-basepython = python\n+basepython = python3.11\n skip_install = False\n-usedevelop = True\n+package = editable\n allowlist_externals =\n     mkdir\n extras =\n@@ -308,6 +306,21 @@ commands =\n     mkdir -p {toxinidir}/_build/plone6docs\n     sphinx-build -b linkcheck -d _build/plone6docs/doctrees docs _build/plone6docs/linkcheck\n \n+[testenv:livehtml]\n+basepython = python3.11\n+skip_install = False\n+package = editable\n+allowlist_externals =\n+    mkdir\n+extras =\n+    {[testenv:plone6docs]extras}\n+deps =\n+    {[testenv:plone6docs]deps}\n+commands =\n+    python -VV\n+    mkdir -p {toxinidir}/_build/plone6docs\n+    sphinx-autobuild -b html -d _build/plone6docs/doctrees docs _build/plone6docs/html\n+\n ##\n # Add extra configuration options in .meta.toml:\n #  [tox]\n'

