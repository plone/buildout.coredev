Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-01-31T19:48:55+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/544c00635a1dbd4ba99fcb47f0ba7e894934bf3f

More Python 2 / 3 compatibility adjustments

Files changed:
M CHANGES.rst
M plone/app/caching/purge.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d9e07ec..a929e00 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,12 +10,12 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Prepare for Python 2 / 3 compatibility
+  [b4oshany, davilima6]
 
 Bug fixes:
 
-- Imports are Python3 compatible.
-  [b4oshany]
+- *add item here*
 
 
 1.2.19 (2017-11-24)
diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py
index ff811a7..0c56f71 100644
--- a/plone/app/caching/purge.py
+++ b/plone/app/caching/purge.py
@@ -27,6 +27,9 @@
 from zope.schema import getFieldsInOrder
 
 
+import six
+
+
 try:
     from plone.app.blob.interfaces import IBlobField
     from Products.Archetypes.interfaces import IBaseObject
@@ -212,7 +215,7 @@ def fieldFilter():
                     yield '{0}/@@download/{1}'.format(prefix, field)
             else:
                 filename = value.filename
-                if isinstance(filename, unicode):
+                if isinstance(filename, six.text_type):
                     filename = filename.encode('utf-8')
                 yield '{0}/view/{1}.{2}/@@download/{3}'.format(
                     prefix, '++widget++form.widgets', field, filename)


Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-02-01T00:07:53+01:00
Author: Davi Lima (davilima6) <davilima6@gmail.com>
Commit: https://github.com/plone/plone.app.caching/commit/c6285bfc5632ce23358e04515c1a11676bbbe00a

Reduce from 193 to 24 pep8 violations

Files changed:
M plone/app/caching/browser/controlpanel.py
M plone/app/caching/browser/edit.py
M plone/app/caching/interfaces.py
M plone/app/caching/lookup.py
M plone/app/caching/operations/default.py
M plone/app/caching/operations/utils.py
M plone/app/caching/purge.py
M plone/app/caching/testing.py
M plone/app/caching/tests/test_etags.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_lookup.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py

diff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py
index 94f033b..baa103f 100644
--- a/plone/app/caching/browser/controlpanel.py
+++ b/plone/app/caching/browser/controlpanel.py
@@ -127,7 +127,7 @@ def publishTraverse(self, request, name):
                     self.context,
                     self.request,
                     self.editOperationName,
-                    operation
+                    operation,
                 )
             elif self.editRuleset:
                 return self  # traverse again to get ruleset name
@@ -164,8 +164,8 @@ def update(self):
             elif 'form.button.Cancel' in self.request.form:
                 self.request.response.redirect(
                     '{0}/@@overview-controlpanel'.format(
-                        self.context.absolute_url()
-                    )
+                        self.context.absolute_url(),
+                    ),
                 )
 
     def processSave(self):
@@ -227,19 +227,19 @@ def processSave(self):
 
                 if contentType in contentTypeRulesetMapping:
                     self.errors.setdefault(
-                        'contenttypes', {}
+                        'contenttypes', {},
                     )[ruleset] = _(
                         u'Content type ${contentType} is already mapped to '
                         u'the rule ${ruleset}.',
                         mapping={
                             'contentType': self.contentTypesLookup.get(
-                                contentType, {}
+                                contentType, {},
                             ).get(
                                 'title',
-                                contentType
+                                contentType,
                             ),
-                            'ruleset': contentTypeRulesetMapping[contentType]
-                        }
+                            'ruleset': contentTypeRulesetMapping[contentType],
+                        },
                     )
                 else:
                     contentTypeRulesetMapping[contentType] = ruleset
@@ -262,14 +262,14 @@ def processSave(self):
 
                 if template in templateRulesetMapping:
                     self.errors.setdefault(
-                        'templates', {}
+                        'templates', {},
                     )[ruleset] = _(
                         u'Template ${template} is already mapped to the rule '
                         u'${ruleset}.',
                         mapping={
                             'template': template,
-                            'ruleset': templateRulesetMapping[template]
-                        }
+                            'ruleset': templateRulesetMapping[template],
+                        },
                     )
                 else:
                     templateRulesetMapping[template] = ruleset
@@ -283,7 +283,7 @@ def processSave(self):
             if not _isuri(domain):
                 self.errors['domain'] = _(
                     u'Invalid URL: ${url}',
-                    mapping={'url': domain}
+                    mapping={'url': domain},
                 )
 
         # RAM cache settings
@@ -294,7 +294,7 @@ def processSave(self):
         else:
             if ramCacheMaxEntries < 0:
                 self.errors['ramCacheMaxEntries'] = _(
-                    u'A positive number is required.'
+                    u'A positive number is required.',
                 )
         try:
             ramCacheMaxAge = int(ramCacheMaxAge)
@@ -303,19 +303,19 @@ def processSave(self):
         else:
             if ramCacheMaxAge < 0:
                 self.errors['ramCacheMaxAge'] = _(
-                    u'A positive number is required.'
+                    u'A positive number is required.',
                 )
 
         try:
             ramCacheCleanupInterval = int(ramCacheCleanupInterval)
         except (ValueError, TypeError,):
             self.errors['ramCacheCleanupInterval'] = _(
-                u'An integer is required.'
+                u'An integer is required.',
             )
         else:
             if ramCacheMaxAge < 0:
                 self.errors['ramCacheCleanupInterval'] = _(
-                    u'A positive number is required.'
+                    u'A positive number is required.',
                 )
 
         # Check for errors
@@ -340,12 +340,12 @@ def processSave(self):
         self.ramCache.update(
             ramCacheMaxEntries,
             ramCacheMaxAge,
-            ramCacheCleanupInterval
+            ramCacheCleanupInterval,
         )
 
         IStatusMessage(self.request).addStatusMessage(
             _(u'Changes saved.'),
-            'info'
+            'info',
         )
 
     # Rule types - used as the index column
@@ -357,7 +357,7 @@ def ruleTypes(self):
             types.append(dict(name=type_.name,
                               title=type_.title or type_.name,
                               description=type_.description,
-                              safeName=type_.name.replace('.', '-')))
+                              safeName=type_.name.replace('.', '-'), ))
         types.sort(lambda x, y: cmp(x['title'], y['title']))
         return types
 
@@ -369,7 +369,7 @@ def ruleTypes(self):
     def operationMapping(self):
         return dict(
             [(k.replace('.', '-'), v,)
-             for k, v in (self.settings.operationMapping or {}).items()]
+             for k, v in (self.settings.operationMapping or {}).items()],
         )
 
     @property
@@ -380,7 +380,7 @@ def templateMapping(self):
                 for k, v in (
                     self.ploneSettings.templateRulesetMapping or {}
                 ).items()
-            ]
+            ],
         )
 
     @property
@@ -391,7 +391,7 @@ def contentTypeMapping(self):
                 for k, v in (
                     self.ploneSettings.contentTypeRulesetMapping or {}
                 ).items()
-            ]
+            ],
         )
 
     # Type lookups (for accessing settings)
@@ -420,7 +420,7 @@ def contentTypesLookup(self):
         portal_types = getToolByName(self.context, 'portal_types')
         for fti in portal_types.objectValues():
             types[fti.id] = dict(title=fti.title or fti.id,
-                                 description=fti.description)
+                                 description=fti.description, )
         return types
 
     # Sorted lists (e.g. for drop-downs)
@@ -440,7 +440,7 @@ def contentTypes(self):
             dict(
                 name=name,
                 title=info['title'],
-                description=info['description']
+                description=info['description'],
             ) for name, info in self.contentTypesLookup.items()
         ]
         types.sort(lambda x, y: cmp(x['title'], y['title']))
@@ -493,7 +493,7 @@ def hasRulesetOptions(self, operationType, ruleset):
             return False
 
         for option in options:
-            if '{0}.{1}.{2}'.format(prefix, ruleset, option,) in self.registry:
+            if '{0}.{1}.{2}'.format(prefix, ruleset, option) in self.registry:
                 return True
 
         return False
@@ -530,11 +530,11 @@ def processImport(self):
 
         # Import the new profile
         portal_setup.runAllImportStepsFromProfile(
-            'profile-{0}'.format(profile)
+            'profile-{0}'.format(profile),
         )
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u'Import complete.'), 'info')
+            _(u'Import complete.'), 'info'),
 
     @property
     @memoize
diff --git a/plone/app/caching/browser/edit.py b/plone/app/caching/browser/edit.py
index f7e72d7..2429de7 100644
--- a/plone/app/caching/browser/edit.py
+++ b/plone/app/caching/browser/edit.py
@@ -66,7 +66,7 @@ def __init__(
         operationName,
         operation,
         rulesetName=None,
-        ruleset=None
+        ruleset=None,
     ):
         self.context = context
         self.request = request
@@ -226,11 +226,11 @@ def cloneField(self, field):
     @property
     def title(self):
         if self.rulesetName:
-            return _(u"Edit ${operation} options for Ruleset: ${ruleset}",
+            return _(u'Edit ${operation} options for Ruleset: ${ruleset}',
                      mapping={'operation': self.operation.title,
                               'ruleset': self.ruleset.title})
         else:
-            return _(u"Edit ${operation} options",
+            return _(u'Edit ${operation} options',
                      mapping={'operation': self.operation.title})
 
     @property
@@ -250,19 +250,19 @@ def save(self, action):
             _(u'Changes saved.'), 'info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
-                self.context.absolute_url()
-            )
+                self.context.absolute_url(),
+            ),
         )
         return ''
 
     @button.buttonAndHandler(_(u'Cancel'), name='cancel')
     def cancel(self, action):
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Edit cancelled."), type='info')
+            _(u'Edit cancelled.'), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
-                self.context.absolute_url()
-            )
+                self.context.absolute_url(),
+            ),
         )
         return ''
 
@@ -282,10 +282,10 @@ def clear(self, action):
                 del self.registry.records[key]
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Ruleset-specific settings removed."), type='info')
+            _(u'Ruleset-specific settings removed.'), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
-                self.context.absolute_url()
-            )
+                self.context.absolute_url(),
+            ),
         )
         return ''
diff --git a/plone/app/caching/interfaces.py b/plone/app/caching/interfaces.py
index e6eac09..f8f3e08 100644
--- a/plone/app/caching/interfaces.py
+++ b/plone/app/caching/interfaces.py
@@ -38,33 +38,33 @@ class IPloneCacheSettings(Interface):
     """
 
     templateRulesetMapping = schema.Dict(
-        title=_(u"Page template/ruleset mapping"),
-        description=_(u"Maps skin layer page template names to ruleset names"),
-        key_type=schema.ASCIILine(title=_(u"Page template name")),
-        value_type=schema.DottedName(title=_(u"Ruleset name")),
+        title=_(u'Page template/ruleset mapping'),
+        description=_(u'Maps skin layer page template names to ruleset names'),
+        key_type=schema.ASCIILine(title=_(u'Page template name')),
+        value_type=schema.DottedName(title=_(u'Ruleset name')),
     )
 
     contentTypeRulesetMapping = schema.Dict(
-        title=_(u"Content type/ruleset mapping"),
-        description=_(u"Maps content type names to ruleset names"),
-        key_type=schema.ASCIILine(title=_(u"Content type name")),
-        value_type=schema.DottedName(title=_(u"Ruleset name")),
+        title=_(u'Content type/ruleset mapping'),
+        description=_(u'Maps content type names to ruleset names'),
+        key_type=schema.ASCIILine(title=_(u'Content type name')),
+        value_type=schema.DottedName(title=_(u'Ruleset name')),
     )
 
     purgedContentTypes = schema.Tuple(
-        title=_(u"Content types to purge"),
+        title=_(u'Content types to purge'),
         description=_(
-            u"List content types which should be purged when modified"),
-        value_type=schema.ASCIILine(title=_(u"Content type name")),
+            u'List content types which should be purged when modified'),
+        value_type=schema.ASCIILine(title=_(u'Content type name')),
         default=('File', 'Image', 'News Item', ),
     )
 
     cacheStopRequestVariables = schema.Tuple(
-        title=_(u"Request variables that prevent caching"),
+        title=_(u'Request variables that prevent caching'),
         description=_(
-            u"Variables in the request that prevent caching if present"),
-        value_type=schema.ASCIILine(title=_(u"Request variables")),
-        default=('statusmessages', 'SearchableText',),
+            u'Variables in the request that prevent caching if present'),
+        value_type=schema.ASCIILine(title=_(u'Request variables')),
+        default=('statusmessages', 'SearchableText', ),
     )
 
 
diff --git a/plone/app/caching/lookup.py b/plone/app/caching/lookup.py
index c044141..7a12e58 100644
--- a/plone/app/caching/lookup.py
+++ b/plone/app/caching/lookup.py
@@ -102,7 +102,7 @@ def __call__(self):
         if ploneCacheSettings.contentTypeRulesetMapping is not None:
             ruleset = ploneCacheSettings.contentTypeRulesetMapping.get(
                 parentPortalType,
-                None
+                None,
             )
             if ruleset is not None:
                 return ruleset
diff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py
index b5c6c1a..053d2ee 100644
--- a/plone/app/caching/operations/default.py
+++ b/plone/app/caching/operations/default.py
@@ -117,7 +117,7 @@ def interceptResponse(self, rulename, response, class_=None):
                 self.request,
                 response,
                 etag=etag,
-                lastModified=lastModified
+                lastModified=lastModified,
             )
 
         # Check if this is in the ram cache
@@ -170,7 +170,7 @@ def modifyResponse(self, rulename, response, class_=None):
                     self.published,
                     self.request,
                     response,
-                    etag=etag
+                    etag=etag,
                 )
             # XXX: should there be an else here? Last modified works without
             #      extra headers.
@@ -192,7 +192,7 @@ def modifyResponse(self, rulename, response, class_=None):
                     context = getContext(self.published)
                     portal_state = getMultiAdapter(
                         (context, self.request),
-                        name=u'plone_portal_state'
+                        name=u'plone_portal_state',
                     )
                     public = portal_state.anonymous()
             public = public and visibleToRole(self.published, role='Anonymous')
@@ -209,7 +209,7 @@ def modifyResponse(self, rulename, response, class_=None):
             smaxage=smaxage,
             etag=etag,
             lastModified=lastModified,
-            vary=vary
+            vary=vary,
         )
 
         if ramCache and public:
@@ -310,7 +310,7 @@ class ResourceRegistriesCaching(StrongCaching):
         def interceptResponse(self, rulename, response):
             return super(
                 ResourceRegistriesCaching,
-                self
+                self,
             ).interceptResponse(rulename, response, class_=StrongCaching)
 
         def modifyResponse(self, rulename, response):
@@ -336,9 +336,9 @@ class NoCaching(object):
     out of all caches.
     """
 
-    title = _(u"No caching")
-    description = _(u"Use this operation to keep the response "
-                    u"out of all caches.")
+    title = _(u'No caching')
+    description = _(u'Use this operation to keep the response '
+                    u'out of all caches.')
     prefix = 'plone.app.caching.noCaching'
     sort = 4
     options = ()
diff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py
index 7fc8f23..b659184 100644
--- a/plone/app/caching/operations/utils.py
+++ b/plone/app/caching/operations/utils.py
@@ -56,7 +56,7 @@ def setCacheHeaders(
     smaxage=None,
     etag=None,
     lastModified=None,
-    vary=None
+    vary=None,
 ):
     """General purpose dispatcher to set various cache headers
 
@@ -76,7 +76,7 @@ def setCacheHeaders(
             smaxage=smaxage,
             etag=etag,
             lastModified=lastModified,
-            vary=vary
+            vary=vary,
         )
 
     elif smaxage:
@@ -87,7 +87,7 @@ def setCacheHeaders(
             smaxage,
             etag=etag,
             lastModified=lastModified,
-            vary=vary
+            vary=vary,
         )
 
     elif etag or lastModified:
@@ -96,7 +96,7 @@ def setCacheHeaders(
             request,
             response,
             etag=etag,
-            lastModified=lastModified
+            lastModified=lastModified,
         )
 
     else:
@@ -150,7 +150,7 @@ def cacheInProxy(
     smaxage,
     etag=None,
     lastModified=None,
-    vary=None
+    vary=None,
 ):
     """Set headers to cache the response in a caching proxy.
 
@@ -163,7 +163,7 @@ def cacheInProxy(
     if lastModified is not None:
         response.setHeader(
             'Last-Modified',
-            formatDateTime(lastModified)
+            formatDateTime(lastModified),
         )
     elif response.getHeader('Last-Modified'):
         del response.headers['last-modified']
@@ -189,7 +189,7 @@ def cacheInBrowserAndProxy(
     smaxage=None,
     etag=None,
     lastModified=None,
-    vary=None
+    vary=None,
 ):
     """Set headers to cache the response in the browser and caching proxy if
     applicable.
@@ -222,7 +222,7 @@ def cacheInBrowserAndProxy(
     # https://bugs.webkit.org/show_bug.cgi?id=13128
     response.setHeader(
         'Cache-Control',
-        'max-age={0}, proxy-revalidate, public'.format(maxage)
+        'max-age={0}, proxy-revalidate, public'.format(maxage),
     )
 
 
@@ -232,7 +232,7 @@ def cacheInRAM(
     response,
     etag=None,
     lastModified=None,
-    annotationsKey=PAGE_CACHE_ANNOTATION_KEY
+    annotationsKey=PAGE_CACHE_ANNOTATION_KEY,
 ):
     """Set a flag indicating that the response for the given request
     should be cached in RAM.
@@ -269,7 +269,7 @@ def cachedResponse(
     status,
     headers,
     body,
-    gzip=False
+    gzip=False,
 ):
     """Returned a cached page. Modifies the response (status and headers)
     and returns the cached body.
@@ -748,7 +748,7 @@ def storeResponseInRAMCache(
     response,
     result,
     globalKey=PAGE_CACHE_KEY,
-    annotationsKey=PAGE_CACHE_ANNOTATION_KEY
+    annotationsKey=PAGE_CACHE_ANNOTATION_KEY,
 ):
     """Store the given response in the RAM cache.
 
@@ -799,7 +799,7 @@ def fetchFromRAMCache(
     etag=None,
     lastModified=None,
     globalKey=PAGE_CACHE_KEY,
-    default=None
+    default=None,
 ):
     """Return a page cached in RAM, or None if it cannot be found.
 
diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py
index 0c56f71..b9bb821 100644
--- a/plone/app/caching/purge.py
+++ b/plone/app/caching/purge.py
@@ -26,7 +26,6 @@
 from zope.lifecycleevent.interfaces import IObjectMovedEvent
 from zope.schema import getFieldsInOrder
 
-
 import six
 
 
diff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py
index 1c76fa6..1a4a7d5 100644
--- a/plone/app/caching/testing.py
+++ b/plone/app/caching/testing.py
@@ -67,11 +67,11 @@ def tearDownZope(self, app):
 PLONE_APP_CACHING_FIXTURE = PloneAppCaching()
 PLONE_APP_CACHING_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CACHING_FIXTURE,),
-    name='PloneAppCaching:Integration'
+    name='PloneAppCaching:Integration',
 )
 PLONE_APP_CACHING_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CACHING_FIXTURE,),
-    name='PloneAppCaching:Functional'
+    name='PloneAppCaching:Functional',
 )
 
 
diff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py
index 0b9fd84..dd6ba71 100644
--- a/plone/app/caching/tests/test_etags.py
+++ b/plone/app/caching/tests/test_etags.py
@@ -51,7 +51,7 @@ def __init__(self, context, request):
             def member(self):
                 return None
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -80,7 +80,7 @@ def __init__(self, context, request):
             def member(self):
                 return DummyMember()
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -109,7 +109,7 @@ def anonymous(self):
             def member(self):
                 return None
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -141,7 +141,7 @@ def anonymous(self):
             def member(self):
                 return DummyMember()
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -195,7 +195,7 @@ def __init__(self, context, request):
             def language(self):
                 return 'en'
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -290,7 +290,7 @@ def __init__(self, context, request):
             def catalog(self):
                 return DummyCatalog()
 
-        provideAdapter(DummyTools, name=u"plone_tools")
+        provideAdapter(DummyTools, name=u'plone_tools')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -316,7 +316,7 @@ def __init__(self, context, request):
             def is_locked(self):
                 return True
 
-        provideAdapter(DummyContextState, name=u"plone_context_state")
+        provideAdapter(DummyContextState, name=u'plone_context_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -340,7 +340,7 @@ def __init__(self, context, request):
             def is_locked(self):
                 return False
 
-        provideAdapter(DummyContextState, name=u"plone_context_state")
+        provideAdapter(DummyContextState, name=u'plone_context_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
diff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py
index 9f9cbf4..fcd58df 100644
--- a/plone/app/caching/tests/test_integration.py
+++ b/plone/app/caching/tests/test_integration.py
@@ -85,8 +85,8 @@ def test_disabled(self):
 
         # Folder content
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Publish the folder
@@ -94,12 +94,12 @@ def test_disabled(self):
 
         # Non-folder content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         self.portal['f1']['d1'].text = RichTextValue(
-            u"<p>Body one</p>",
-            'text/plain',
-            'text/html'
+            u'<p>Body one</p>',
+            u'text/plain',
+            u'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -109,16 +109,16 @@ def test_disabled(self):
 
         # Content image
         self.portal['f1'].invokeFactory('Image', 'i1')
-        self.portal['f1']['i1'].title = u"Image one"
-        self.portal['f1']['i1'].description = u"Image one description"
+        self.portal['f1']['i1'].title = u'Image one'
+        self.portal['f1']['i1'].description = u'Image one description'
         self.portal['f1']['i1'].image = NamedImage(
             open(TEST_IMAGE, 'rb'), 'image/gif', u'test.gif')
         self.portal['f1']['i1'].reindexObject()
 
         # Content file
         self.portal['f1'].invokeFactory('File', 'f1')
-        self.portal['f1']['f1'].title = u"File one"
-        self.portal['f1']['f1'].description = u"File one description"
+        self.portal['f1']['f1'].title = u'File one'
+        self.portal['f1']['f1'].description = u'File one description'
         self.portal['f1']['f1'].file = OFS.Image.File(
             'test.gif', 'test.gif', open(TEST_FILE, 'rb'))
         self.portal['f1']['f1'].reindexObject()
@@ -127,7 +127,7 @@ def test_disabled(self):
         OFS.Image.manage_addImage(
             self.portal['portal_skins']['custom'],
             'test.gif',
-            open(TEST_IMAGE, 'rb')
+            open(TEST_IMAGE, 'rb'),
         )
 
         setRoles(self.portal, TEST_USER_ID, ('Member',))
@@ -170,12 +170,12 @@ def test_auto_purge_content_types(self):
 
         # Non-folder content
         self.portal.invokeFactory('Document', 'd1')
-        self.portal['d1'].title = u"Document one"
-        self.portal['d1'].description = u"Document one description"
+        self.portal['d1'].title = u'Document one'
+        self.portal['d1'].description = u'Document one description'
         self.portal['d1'].text = RichTextValue(
-            u"<p>Body one</p>",
-            'text/plain',
-            'text/html'
+            u'<p>Body one</p>',
+            u'text/plain',
+            u'text/html',
         )
         self.portal['d1'].reindexObject()
 
@@ -188,7 +188,7 @@ def test_auto_purge_content_types(self):
 
         editURL = '{0}/edit?_authenticator={1}'.format(
             self.portal['d1'].absolute_url(),
-            getToken(TEST_USER_NAME)
+            getToken(TEST_USER_NAME),
         )
 
         import transaction
@@ -204,7 +204,7 @@ def test_auto_purge_content_types(self):
         browser.open(editURL)
 
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 1"
+            name='form.widgets.IDublinCore.title').value = u'Title 1'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
@@ -220,7 +220,7 @@ def test_auto_purge_content_types(self):
 
         browser.open(editURL)
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 2"
+            name='form.widgets.IDublinCore.title').value = u'Title 2'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
@@ -236,7 +236,7 @@ def test_auto_purge_content_types(self):
 
         browser.open(editURL)
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 3"
+            name='form.widgets.IDublinCore.title').value = u'Title 3'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
@@ -252,7 +252,7 @@ def test_auto_purge_content_types(self):
 
         browser.open(editURL)
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 4"
+            name='form.widgets.IDublinCore.title').value = u'Title 4'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
diff --git a/plone/app/caching/tests/test_lookup.py b/plone/app/caching/tests/test_lookup.py
index 84773f5..4518269 100644
--- a/plone/app/caching/tests/test_lookup.py
+++ b/plone/app/caching/tests/test_lookup.py
@@ -256,8 +256,8 @@ def test_parent_not_IBrowserDefault_actiononly(self):
         published = ZopePageTemplate('defaultView').__of__(
             DummyNotBrowserDefault(
                 'testtype',
-                'string:${object_url}/defaultView'
-            )
+                'string:${object_url}/defaultView',
+            ),
         )
         request = DummyRequest(published, DummyResponse())
 
diff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py
index ac9c5a2..51d2344 100644
--- a/plone/app/caching/tests/test_operation_default.py
+++ b/plone/app/caching/tests/test_operation_default.py
@@ -43,8 +43,8 @@ def test_last_modified_no_etags(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         self.cacheSettings.operationMapping = {
@@ -62,8 +62,7 @@ def test_last_modified_no_etags(self):
             'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
         )
         browser.open('{0}/++add++Document'.format(
-            self.portal['f1'].absolute_url())
-        )
+            self.portal['f1'].absolute_url()),)
         browser.getControl(
             name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
diff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py
index fbca715..5bbb5f4 100644
--- a/plone/app/caching/tests/test_operation_parameters.py
+++ b/plone/app/caching/tests/test_operation_parameters.py
@@ -40,19 +40,19 @@ def test_anon_only(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add page content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
diff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py
index 1f6867e..ea0039a 100644
--- a/plone/app/caching/tests/test_operation_utils.py
+++ b/plone/app/caching/tests/test_operation_utils.py
@@ -81,7 +81,7 @@ def test_doNotCache_deletes_last_modified(self):
         now = datetime.datetime.now(dateutil.tz.tzlocal())
         response.setHeader(
             'Last-Modified',
-            wsgiref.handlers.format_date_time(time.mktime(now.timetuple()))
+            wsgiref.handlers.format_date_time(time.mktime(now.timetuple())),
         )
 
         doNotCache(published, request, response)
@@ -287,7 +287,7 @@ def test_cacheInBrowserAndProxy_full(self):
             maxage=60,
             etag=etag,
             lastModified=now,
-            vary=vary
+            vary=vary,
         )
 
         self.assertEqual(200, response.getStatus())
@@ -301,12 +301,12 @@ def test_cacheInBrowserAndProxy_full(self):
         delta = datetime.timedelta(seconds=58)
         self.assertFalse(
             timedelta < delta,
-            '{0} is not < {1}'.format(timedelta, delta)
+            '{0} is not < {1}'.format(timedelta, delta),
         )
         delta = datetime.timedelta(seconds=61)
         self.assertFalse(
             timedelta > delta,
-            '{0} is not > {1}'.format(timedelta, delta)
+            '{0} is not > {1}'.format(timedelta, delta),
         )
 
     # cacheInRAM()
@@ -409,9 +409,9 @@ def test_cachedResponse(self):
         response.setStatus(200)
 
         body = cachedResponse(published, request,
-                              response, 404, headers, u"body")
+                              response, 404, headers, u'body')
 
-        self.assertEqual(u"body", body)
+        self.assertEqual(u'body', body)
         self.assertEqual(404, response.getStatus())
         self.assertEqual('foo', response.getHeader('X-Cache-Rule'))
         self.assertEqual('bar', response.getHeader('X-Foo'))
@@ -442,9 +442,9 @@ def test_cachedResponse_gzip_off(self):
         assert response.enableHTTPCompression(query=True)
 
         body = cachedResponse(published, request, response,
-                              404, headers, u"body", 0)
+                              404, headers, u'body', 0)
 
-        self.assertEqual(u"body", body)
+        self.assertEqual(u'body', body)
         self.assertEqual(404, response.getStatus())
         self.assertEqual('foo', response.getHeader('X-Cache-Rule'))
         self.assertEqual('bar', response.getHeader('X-Foo'))
@@ -477,9 +477,9 @@ def test_cachedResponse_gzip_on(self):
         assert not response.enableHTTPCompression(query=True)
 
         body = cachedResponse(published, request, response,
-                              404, headers, u"body", 1)
+                              404, headers, u'body', 1)
 
-        self.assertEqual(u"body", body)
+        self.assertEqual(u'body', body)
         self.assertEqual(404, response.getStatus())
         self.assertEqual('foo', response.getHeader('X-Cache-Rule'))
         self.assertEqual('bar', response.getHeader('X-Foo'))
@@ -502,7 +502,7 @@ def test_notModified_minimal(self):
 
         body = notModified(published, request, response)
 
-        self.assertEqual(u"", body)
+        self.assertEqual('', body)
         self.assertEqual(304, response.getStatus())
 
     def test_notModified_full(self):
@@ -521,7 +521,7 @@ def test_notModified_full(self):
         body = notModified(published, request, response,
                            etag=etag, lastModified=now)
 
-        self.assertEqual(u"", body)
+        self.assertEqual(u'', body)
         self.assertEqual(etag, response.getHeader('ETag', literal=1))
         self.assertIsNone(response.getHeader('Last-Modified'))
         self.assertIsNone(response.getHeader('Expires'))
@@ -736,8 +736,11 @@ def test_isModified_inm_match_update(self):
 
         etag = None
 
-        self.assertTrue(isModified(request, etag=etag,
-                                          lastModified='doesnt_really_matter'))
+        self.assertTrue(isModified(
+            request,
+            etag=etag,
+            lastModified='doesnt_really_matter'),
+        )
 
     def test_isModified_inm_match_multiple(self):
         from plone.app.caching.operations.utils import isModified
@@ -986,7 +989,7 @@ def __call__(self):
         published = DummyPublished()
         self.assertEqual(
             datetime.datetime(2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzlocal()),
-            getLastModified(published)
+            getLastModified(published),
         )
 
     def test_getLastModified_timezone(self):
@@ -1001,7 +1004,7 @@ def __init__(self, context):
 
             def __call__(self):
                 return datetime.datetime(
-                    2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc()
+                    2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc(),
                 )
 
         provideAdapter(DummyLastModified)
@@ -1009,7 +1012,7 @@ def __call__(self):
         published = DummyPublished()
         self.assertEqual(
             datetime.datetime(2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc()),
-            getLastModified(published)
+            getLastModified(published),
         )
 
     # getExpiration()
@@ -1087,7 +1090,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return 'foo'
 
-        provideAdapter(FooETag, name=u"foo")
+        provideAdapter(FooETag, name=u'foo')
 
         @implementer(IETagValue)
         @adapter(DummyPublished, HTTPRequest)
@@ -1100,7 +1103,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return None
 
-        provideAdapter(BarETag, name=u"bar")
+        provideAdapter(BarETag, name=u'bar')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -1125,7 +1128,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return 'foo'
 
-        provideAdapter(FooETag, name=u"foo")
+        provideAdapter(FooETag, name=u'foo')
 
         @implementer(IETagValue)
         @adapter(DummyPublished, HTTPRequest)
@@ -1138,7 +1141,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return 'bar'
 
-        provideAdapter(BarETag, name=u"bar")
+        provideAdapter(BarETag, name=u'bar')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -1151,8 +1154,8 @@ def __call__(self):
                 published,
                 request,
                 keys=('foo', 'bar',),
-                extraTokens=('baz,qux',)
-            )
+                extraTokens=('baz,qux',),
+            ),
         )
 
     # parseETags()
@@ -1332,7 +1335,7 @@ def __call__(self, key):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         storeResponseInRAMCache(request, response, result)
@@ -1346,7 +1349,7 @@ def test_storeResponseInRAMCache_no_cache(self):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)[
@@ -1375,7 +1378,7 @@ def __call__(self, key):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)[
@@ -1411,7 +1414,7 @@ def __call__(self, key):
         request.environ['HTTP_ACCEPT_ENCODING'] = 'gzip; deflate'
         response.enableHTTPCompression(request)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)[
@@ -1444,7 +1447,7 @@ def __call__(self, key):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)['annkey'] = 'foo'
@@ -1524,7 +1527,7 @@ def __call__(self, key):
         request.environ['QUERY_STRING'] = ''
 
         cache['||a|b||http://example.com/foo/bar?'] = (
-            200, {'x-foo': 'bar'}, u'Body'
+            200, {'x-foo': 'bar'}, u'Body',
         )
 
         cached = normalize_response_cache(
diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py
index 831388b..a449706 100644
--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py
@@ -40,7 +40,7 @@ def test_image():
     filename = os.path.join(os.path.dirname(__file__), u'test.gif')
     return NamedBlobImage(
         data=open(filename, 'r').read(),
-        filename=filename
+        filename=filename,
     )
 
 
@@ -100,18 +100,18 @@ def test_composite_views(self):
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
         self.portal['f1'].title = 'one'
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add page content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -287,7 +287,7 @@ def test_composite_views(self):
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -415,14 +415,14 @@ def test_content_files(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add content image
         self.portal['f1'].invokeFactory('Image', 'i1')
-        self.portal['f1']['i1'].title = u"Image one"
-        self.portal['f1']['i1'].description = u"Image one description"
+        self.portal['f1']['i1'].title = u'Image one'
+        self.portal['f1']['i1'].description = u'Image one description'
         self.portal['f1']['i1'].image = test_image()
         self.portal['f1']['i1'].reindexObject()
 
diff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py
index cd7e5bb..a92f3c4 100644
--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py
@@ -37,7 +37,7 @@ def test_image():
     filename = os.path.join(os.path.dirname(__file__), u'test.gif')
     return NamedBlobImage(
         data=open(filename, 'r').read(),
-        filename=filename
+        filename=filename,
     )
 
 
@@ -91,19 +91,19 @@ def test_composite_views(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add page content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -288,7 +288,7 @@ def test_composite_views(self):
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -376,7 +376,7 @@ def test_content_feeds(self):
             'Authorization', 'Basic {0}:{1}'.format(
                 TEST_USER_NAME,
                 TEST_USER_PASSWORD,
-            )
+            ),
         )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
@@ -396,7 +396,7 @@ def test_content_feeds(self):
             'Authorization', 'Basic {0}:{1}'.format(
                 TEST_USER_NAME,
                 TEST_USER_PASSWORD,
-            )
+            ),
         )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
@@ -410,14 +410,14 @@ def test_content_files(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add content image
         self.portal['f1'].invokeFactory('Image', 'i1')
-        self.portal['f1']['i1'].title = u"Image one"
-        self.portal['f1']['i1'].description = u"Image one description"
+        self.portal['f1']['i1'].title = u'Image one'
+        self.portal['f1']['i1'].description = u'Image one description'
         self.portal['f1']['i1'].image = test_image()
         self.portal['f1']['i1'].reindexObject()
 
diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py
index bdb6fa7..dc46aa3 100644
--- a/plone/app/caching/tests/test_purge.py
+++ b/plone/app/caching/tests/test_purge.py
@@ -197,7 +197,7 @@ def test_parent_not_default_view(self):
 
         self.assertEqual(
             ['/bar/foo/', '/bar/foo/view', '/bar/foo/default-view'],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -211,9 +211,9 @@ def test_parent_default_view(self):
                 '/bar/default-view/default-view',
                 '/bar',
                 '/bar/',
-                '/bar/view'
+                '/bar/view',
             ],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -362,9 +362,9 @@ class ATMultipleFields(atapi.BaseContent):
                 '/foo/image2_mini',
                 '/foo/image2_normal',
                 '/foo/at_download/blob1',
-                '/foo/blob1'
+                '/foo/blob1',
             ],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -396,9 +396,9 @@ class ATMultipleFields(atapi.BaseContent):
                 '/foo/at_download/image2',
                 '/foo/image2',
                 '/foo/image2_mini',
-                '/foo/image2_normal'
+                '/foo/image2_normal',
             ],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -448,5 +448,5 @@ def test_scale_purge_paths_unicode(self):
             list(purge.getRelativePaths()),
             ['/plone/media/file/view/++widget++form.widgets.file/@@download/' +
              'data/t\xc3\xb6stfile.csv',
-             '/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv']
+             '/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv'],
         )


Repository: plone.app.caching


Branch: refs/heads/master
Date: 2018-02-01T13:32:02+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.caching/commit/19ee2c59a308c75f0dca07c5ee93553b2acfd7db

Merge pull request #41 from plone/python3

More Python 2 / 3 compatibility adjustments

Files changed:
M CHANGES.rst
M plone/app/caching/browser/controlpanel.py
M plone/app/caching/browser/edit.py
M plone/app/caching/interfaces.py
M plone/app/caching/lookup.py
M plone/app/caching/operations/default.py
M plone/app/caching/operations/utils.py
M plone/app/caching/purge.py
M plone/app/caching/testing.py
M plone/app/caching/tests/test_etags.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_lookup.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_operation_utils.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py

diff --git a/CHANGES.rst b/CHANGES.rst
index d9e07ec..a929e00 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,12 +10,12 @@ Breaking changes:
 
 New features:
 
-- *add item here*
+- Prepare for Python 2 / 3 compatibility
+  [b4oshany, davilima6]
 
 Bug fixes:
 
-- Imports are Python3 compatible.
-  [b4oshany]
+- *add item here*
 
 
 1.2.19 (2017-11-24)
diff --git a/plone/app/caching/browser/controlpanel.py b/plone/app/caching/browser/controlpanel.py
index 94f033b..baa103f 100644
--- a/plone/app/caching/browser/controlpanel.py
+++ b/plone/app/caching/browser/controlpanel.py
@@ -127,7 +127,7 @@ def publishTraverse(self, request, name):
                     self.context,
                     self.request,
                     self.editOperationName,
-                    operation
+                    operation,
                 )
             elif self.editRuleset:
                 return self  # traverse again to get ruleset name
@@ -164,8 +164,8 @@ def update(self):
             elif 'form.button.Cancel' in self.request.form:
                 self.request.response.redirect(
                     '{0}/@@overview-controlpanel'.format(
-                        self.context.absolute_url()
-                    )
+                        self.context.absolute_url(),
+                    ),
                 )
 
     def processSave(self):
@@ -227,19 +227,19 @@ def processSave(self):
 
                 if contentType in contentTypeRulesetMapping:
                     self.errors.setdefault(
-                        'contenttypes', {}
+                        'contenttypes', {},
                     )[ruleset] = _(
                         u'Content type ${contentType} is already mapped to '
                         u'the rule ${ruleset}.',
                         mapping={
                             'contentType': self.contentTypesLookup.get(
-                                contentType, {}
+                                contentType, {},
                             ).get(
                                 'title',
-                                contentType
+                                contentType,
                             ),
-                            'ruleset': contentTypeRulesetMapping[contentType]
-                        }
+                            'ruleset': contentTypeRulesetMapping[contentType],
+                        },
                     )
                 else:
                     contentTypeRulesetMapping[contentType] = ruleset
@@ -262,14 +262,14 @@ def processSave(self):
 
                 if template in templateRulesetMapping:
                     self.errors.setdefault(
-                        'templates', {}
+                        'templates', {},
                     )[ruleset] = _(
                         u'Template ${template} is already mapped to the rule '
                         u'${ruleset}.',
                         mapping={
                             'template': template,
-                            'ruleset': templateRulesetMapping[template]
-                        }
+                            'ruleset': templateRulesetMapping[template],
+                        },
                     )
                 else:
                     templateRulesetMapping[template] = ruleset
@@ -283,7 +283,7 @@ def processSave(self):
             if not _isuri(domain):
                 self.errors['domain'] = _(
                     u'Invalid URL: ${url}',
-                    mapping={'url': domain}
+                    mapping={'url': domain},
                 )
 
         # RAM cache settings
@@ -294,7 +294,7 @@ def processSave(self):
         else:
             if ramCacheMaxEntries < 0:
                 self.errors['ramCacheMaxEntries'] = _(
-                    u'A positive number is required.'
+                    u'A positive number is required.',
                 )
         try:
             ramCacheMaxAge = int(ramCacheMaxAge)
@@ -303,19 +303,19 @@ def processSave(self):
         else:
             if ramCacheMaxAge < 0:
                 self.errors['ramCacheMaxAge'] = _(
-                    u'A positive number is required.'
+                    u'A positive number is required.',
                 )
 
         try:
             ramCacheCleanupInterval = int(ramCacheCleanupInterval)
         except (ValueError, TypeError,):
             self.errors['ramCacheCleanupInterval'] = _(
-                u'An integer is required.'
+                u'An integer is required.',
             )
         else:
             if ramCacheMaxAge < 0:
                 self.errors['ramCacheCleanupInterval'] = _(
-                    u'A positive number is required.'
+                    u'A positive number is required.',
                 )
 
         # Check for errors
@@ -340,12 +340,12 @@ def processSave(self):
         self.ramCache.update(
             ramCacheMaxEntries,
             ramCacheMaxAge,
-            ramCacheCleanupInterval
+            ramCacheCleanupInterval,
         )
 
         IStatusMessage(self.request).addStatusMessage(
             _(u'Changes saved.'),
-            'info'
+            'info',
         )
 
     # Rule types - used as the index column
@@ -357,7 +357,7 @@ def ruleTypes(self):
             types.append(dict(name=type_.name,
                               title=type_.title or type_.name,
                               description=type_.description,
-                              safeName=type_.name.replace('.', '-')))
+                              safeName=type_.name.replace('.', '-'), ))
         types.sort(lambda x, y: cmp(x['title'], y['title']))
         return types
 
@@ -369,7 +369,7 @@ def ruleTypes(self):
     def operationMapping(self):
         return dict(
             [(k.replace('.', '-'), v,)
-             for k, v in (self.settings.operationMapping or {}).items()]
+             for k, v in (self.settings.operationMapping or {}).items()],
         )
 
     @property
@@ -380,7 +380,7 @@ def templateMapping(self):
                 for k, v in (
                     self.ploneSettings.templateRulesetMapping or {}
                 ).items()
-            ]
+            ],
         )
 
     @property
@@ -391,7 +391,7 @@ def contentTypeMapping(self):
                 for k, v in (
                     self.ploneSettings.contentTypeRulesetMapping or {}
                 ).items()
-            ]
+            ],
         )
 
     # Type lookups (for accessing settings)
@@ -420,7 +420,7 @@ def contentTypesLookup(self):
         portal_types = getToolByName(self.context, 'portal_types')
         for fti in portal_types.objectValues():
             types[fti.id] = dict(title=fti.title or fti.id,
-                                 description=fti.description)
+                                 description=fti.description, )
         return types
 
     # Sorted lists (e.g. for drop-downs)
@@ -440,7 +440,7 @@ def contentTypes(self):
             dict(
                 name=name,
                 title=info['title'],
-                description=info['description']
+                description=info['description'],
             ) for name, info in self.contentTypesLookup.items()
         ]
         types.sort(lambda x, y: cmp(x['title'], y['title']))
@@ -493,7 +493,7 @@ def hasRulesetOptions(self, operationType, ruleset):
             return False
 
         for option in options:
-            if '{0}.{1}.{2}'.format(prefix, ruleset, option,) in self.registry:
+            if '{0}.{1}.{2}'.format(prefix, ruleset, option) in self.registry:
                 return True
 
         return False
@@ -530,11 +530,11 @@ def processImport(self):
 
         # Import the new profile
         portal_setup.runAllImportStepsFromProfile(
-            'profile-{0}'.format(profile)
+            'profile-{0}'.format(profile),
         )
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u'Import complete.'), 'info')
+            _(u'Import complete.'), 'info'),
 
     @property
     @memoize
diff --git a/plone/app/caching/browser/edit.py b/plone/app/caching/browser/edit.py
index f7e72d7..2429de7 100644
--- a/plone/app/caching/browser/edit.py
+++ b/plone/app/caching/browser/edit.py
@@ -66,7 +66,7 @@ def __init__(
         operationName,
         operation,
         rulesetName=None,
-        ruleset=None
+        ruleset=None,
     ):
         self.context = context
         self.request = request
@@ -226,11 +226,11 @@ def cloneField(self, field):
     @property
     def title(self):
         if self.rulesetName:
-            return _(u"Edit ${operation} options for Ruleset: ${ruleset}",
+            return _(u'Edit ${operation} options for Ruleset: ${ruleset}',
                      mapping={'operation': self.operation.title,
                               'ruleset': self.ruleset.title})
         else:
-            return _(u"Edit ${operation} options",
+            return _(u'Edit ${operation} options',
                      mapping={'operation': self.operation.title})
 
     @property
@@ -250,19 +250,19 @@ def save(self, action):
             _(u'Changes saved.'), 'info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
-                self.context.absolute_url()
-            )
+                self.context.absolute_url(),
+            ),
         )
         return ''
 
     @button.buttonAndHandler(_(u'Cancel'), name='cancel')
     def cancel(self, action):
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Edit cancelled."), type='info')
+            _(u'Edit cancelled.'), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
-                self.context.absolute_url()
-            )
+                self.context.absolute_url(),
+            ),
         )
         return ''
 
@@ -282,10 +282,10 @@ def clear(self, action):
                 del self.registry.records[key]
 
         IStatusMessage(self.request).addStatusMessage(
-            _(u"Ruleset-specific settings removed."), type='info')
+            _(u'Ruleset-specific settings removed.'), type='info')
         self.request.response.redirect(
             '{0}/@@caching-controlpanel#detailed-settings'.format(
-                self.context.absolute_url()
-            )
+                self.context.absolute_url(),
+            ),
         )
         return ''
diff --git a/plone/app/caching/interfaces.py b/plone/app/caching/interfaces.py
index e6eac09..f8f3e08 100644
--- a/plone/app/caching/interfaces.py
+++ b/plone/app/caching/interfaces.py
@@ -38,33 +38,33 @@ class IPloneCacheSettings(Interface):
     """
 
     templateRulesetMapping = schema.Dict(
-        title=_(u"Page template/ruleset mapping"),
-        description=_(u"Maps skin layer page template names to ruleset names"),
-        key_type=schema.ASCIILine(title=_(u"Page template name")),
-        value_type=schema.DottedName(title=_(u"Ruleset name")),
+        title=_(u'Page template/ruleset mapping'),
+        description=_(u'Maps skin layer page template names to ruleset names'),
+        key_type=schema.ASCIILine(title=_(u'Page template name')),
+        value_type=schema.DottedName(title=_(u'Ruleset name')),
     )
 
     contentTypeRulesetMapping = schema.Dict(
-        title=_(u"Content type/ruleset mapping"),
-        description=_(u"Maps content type names to ruleset names"),
-        key_type=schema.ASCIILine(title=_(u"Content type name")),
-        value_type=schema.DottedName(title=_(u"Ruleset name")),
+        title=_(u'Content type/ruleset mapping'),
+        description=_(u'Maps content type names to ruleset names'),
+        key_type=schema.ASCIILine(title=_(u'Content type name')),
+        value_type=schema.DottedName(title=_(u'Ruleset name')),
     )
 
     purgedContentTypes = schema.Tuple(
-        title=_(u"Content types to purge"),
+        title=_(u'Content types to purge'),
         description=_(
-            u"List content types which should be purged when modified"),
-        value_type=schema.ASCIILine(title=_(u"Content type name")),
+            u'List content types which should be purged when modified'),
+        value_type=schema.ASCIILine(title=_(u'Content type name')),
         default=('File', 'Image', 'News Item', ),
     )
 
     cacheStopRequestVariables = schema.Tuple(
-        title=_(u"Request variables that prevent caching"),
+        title=_(u'Request variables that prevent caching'),
         description=_(
-            u"Variables in the request that prevent caching if present"),
-        value_type=schema.ASCIILine(title=_(u"Request variables")),
-        default=('statusmessages', 'SearchableText',),
+            u'Variables in the request that prevent caching if present'),
+        value_type=schema.ASCIILine(title=_(u'Request variables')),
+        default=('statusmessages', 'SearchableText', ),
     )
 
 
diff --git a/plone/app/caching/lookup.py b/plone/app/caching/lookup.py
index c044141..7a12e58 100644
--- a/plone/app/caching/lookup.py
+++ b/plone/app/caching/lookup.py
@@ -102,7 +102,7 @@ def __call__(self):
         if ploneCacheSettings.contentTypeRulesetMapping is not None:
             ruleset = ploneCacheSettings.contentTypeRulesetMapping.get(
                 parentPortalType,
-                None
+                None,
             )
             if ruleset is not None:
                 return ruleset
diff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py
index b5c6c1a..053d2ee 100644
--- a/plone/app/caching/operations/default.py
+++ b/plone/app/caching/operations/default.py
@@ -117,7 +117,7 @@ def interceptResponse(self, rulename, response, class_=None):
                 self.request,
                 response,
                 etag=etag,
-                lastModified=lastModified
+                lastModified=lastModified,
             )
 
         # Check if this is in the ram cache
@@ -170,7 +170,7 @@ def modifyResponse(self, rulename, response, class_=None):
                     self.published,
                     self.request,
                     response,
-                    etag=etag
+                    etag=etag,
                 )
             # XXX: should there be an else here? Last modified works without
             #      extra headers.
@@ -192,7 +192,7 @@ def modifyResponse(self, rulename, response, class_=None):
                     context = getContext(self.published)
                     portal_state = getMultiAdapter(
                         (context, self.request),
-                        name=u'plone_portal_state'
+                        name=u'plone_portal_state',
                     )
                     public = portal_state.anonymous()
             public = public and visibleToRole(self.published, role='Anonymous')
@@ -209,7 +209,7 @@ def modifyResponse(self, rulename, response, class_=None):
             smaxage=smaxage,
             etag=etag,
             lastModified=lastModified,
-            vary=vary
+            vary=vary,
         )
 
         if ramCache and public:
@@ -310,7 +310,7 @@ class ResourceRegistriesCaching(StrongCaching):
         def interceptResponse(self, rulename, response):
             return super(
                 ResourceRegistriesCaching,
-                self
+                self,
             ).interceptResponse(rulename, response, class_=StrongCaching)
 
         def modifyResponse(self, rulename, response):
@@ -336,9 +336,9 @@ class NoCaching(object):
     out of all caches.
     """
 
-    title = _(u"No caching")
-    description = _(u"Use this operation to keep the response "
-                    u"out of all caches.")
+    title = _(u'No caching')
+    description = _(u'Use this operation to keep the response '
+                    u'out of all caches.')
     prefix = 'plone.app.caching.noCaching'
     sort = 4
     options = ()
diff --git a/plone/app/caching/operations/utils.py b/plone/app/caching/operations/utils.py
index 7fc8f23..b659184 100644
--- a/plone/app/caching/operations/utils.py
+++ b/plone/app/caching/operations/utils.py
@@ -56,7 +56,7 @@ def setCacheHeaders(
     smaxage=None,
     etag=None,
     lastModified=None,
-    vary=None
+    vary=None,
 ):
     """General purpose dispatcher to set various cache headers
 
@@ -76,7 +76,7 @@ def setCacheHeaders(
             smaxage=smaxage,
             etag=etag,
             lastModified=lastModified,
-            vary=vary
+            vary=vary,
         )
 
     elif smaxage:
@@ -87,7 +87,7 @@ def setCacheHeaders(
             smaxage,
             etag=etag,
             lastModified=lastModified,
-            vary=vary
+            vary=vary,
         )
 
     elif etag or lastModified:
@@ -96,7 +96,7 @@ def setCacheHeaders(
             request,
             response,
             etag=etag,
-            lastModified=lastModified
+            lastModified=lastModified,
         )
 
     else:
@@ -150,7 +150,7 @@ def cacheInProxy(
     smaxage,
     etag=None,
     lastModified=None,
-    vary=None
+    vary=None,
 ):
     """Set headers to cache the response in a caching proxy.
 
@@ -163,7 +163,7 @@ def cacheInProxy(
     if lastModified is not None:
         response.setHeader(
             'Last-Modified',
-            formatDateTime(lastModified)
+            formatDateTime(lastModified),
         )
     elif response.getHeader('Last-Modified'):
         del response.headers['last-modified']
@@ -189,7 +189,7 @@ def cacheInBrowserAndProxy(
     smaxage=None,
     etag=None,
     lastModified=None,
-    vary=None
+    vary=None,
 ):
     """Set headers to cache the response in the browser and caching proxy if
     applicable.
@@ -222,7 +222,7 @@ def cacheInBrowserAndProxy(
     # https://bugs.webkit.org/show_bug.cgi?id=13128
     response.setHeader(
         'Cache-Control',
-        'max-age={0}, proxy-revalidate, public'.format(maxage)
+        'max-age={0}, proxy-revalidate, public'.format(maxage),
     )
 
 
@@ -232,7 +232,7 @@ def cacheInRAM(
     response,
     etag=None,
     lastModified=None,
-    annotationsKey=PAGE_CACHE_ANNOTATION_KEY
+    annotationsKey=PAGE_CACHE_ANNOTATION_KEY,
 ):
     """Set a flag indicating that the response for the given request
     should be cached in RAM.
@@ -269,7 +269,7 @@ def cachedResponse(
     status,
     headers,
     body,
-    gzip=False
+    gzip=False,
 ):
     """Returned a cached page. Modifies the response (status and headers)
     and returns the cached body.
@@ -748,7 +748,7 @@ def storeResponseInRAMCache(
     response,
     result,
     globalKey=PAGE_CACHE_KEY,
-    annotationsKey=PAGE_CACHE_ANNOTATION_KEY
+    annotationsKey=PAGE_CACHE_ANNOTATION_KEY,
 ):
     """Store the given response in the RAM cache.
 
@@ -799,7 +799,7 @@ def fetchFromRAMCache(
     etag=None,
     lastModified=None,
     globalKey=PAGE_CACHE_KEY,
-    default=None
+    default=None,
 ):
     """Return a page cached in RAM, or None if it cannot be found.
 
diff --git a/plone/app/caching/purge.py b/plone/app/caching/purge.py
index ff811a7..b9bb821 100644
--- a/plone/app/caching/purge.py
+++ b/plone/app/caching/purge.py
@@ -26,6 +26,8 @@
 from zope.lifecycleevent.interfaces import IObjectMovedEvent
 from zope.schema import getFieldsInOrder
 
+import six
+
 
 try:
     from plone.app.blob.interfaces import IBlobField
@@ -212,7 +214,7 @@ def fieldFilter():
                     yield '{0}/@@download/{1}'.format(prefix, field)
             else:
                 filename = value.filename
-                if isinstance(filename, unicode):
+                if isinstance(filename, six.text_type):
                     filename = filename.encode('utf-8')
                 yield '{0}/view/{1}.{2}/@@download/{3}'.format(
                     prefix, '++widget++form.widgets', field, filename)
diff --git a/plone/app/caching/testing.py b/plone/app/caching/testing.py
index 1c76fa6..1a4a7d5 100644
--- a/plone/app/caching/testing.py
+++ b/plone/app/caching/testing.py
@@ -67,11 +67,11 @@ def tearDownZope(self, app):
 PLONE_APP_CACHING_FIXTURE = PloneAppCaching()
 PLONE_APP_CACHING_INTEGRATION_TESTING = IntegrationTesting(
     bases=(PLONE_APP_CACHING_FIXTURE,),
-    name='PloneAppCaching:Integration'
+    name='PloneAppCaching:Integration',
 )
 PLONE_APP_CACHING_FUNCTIONAL_TESTING = FunctionalTesting(
     bases=(PLONE_APP_CACHING_FIXTURE,),
-    name='PloneAppCaching:Functional'
+    name='PloneAppCaching:Functional',
 )
 
 
diff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py
index 0b9fd84..dd6ba71 100644
--- a/plone/app/caching/tests/test_etags.py
+++ b/plone/app/caching/tests/test_etags.py
@@ -51,7 +51,7 @@ def __init__(self, context, request):
             def member(self):
                 return None
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -80,7 +80,7 @@ def __init__(self, context, request):
             def member(self):
                 return DummyMember()
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -109,7 +109,7 @@ def anonymous(self):
             def member(self):
                 return None
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -141,7 +141,7 @@ def anonymous(self):
             def member(self):
                 return DummyMember()
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -195,7 +195,7 @@ def __init__(self, context, request):
             def language(self):
                 return 'en'
 
-        provideAdapter(DummyPortalState, name=u"plone_portal_state")
+        provideAdapter(DummyPortalState, name=u'plone_portal_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -290,7 +290,7 @@ def __init__(self, context, request):
             def catalog(self):
                 return DummyCatalog()
 
-        provideAdapter(DummyTools, name=u"plone_tools")
+        provideAdapter(DummyTools, name=u'plone_tools')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -316,7 +316,7 @@ def __init__(self, context, request):
             def is_locked(self):
                 return True
 
-        provideAdapter(DummyContextState, name=u"plone_context_state")
+        provideAdapter(DummyContextState, name=u'plone_context_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -340,7 +340,7 @@ def __init__(self, context, request):
             def is_locked(self):
                 return False
 
-        provideAdapter(DummyContextState, name=u"plone_context_state")
+        provideAdapter(DummyContextState, name=u'plone_context_state')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
diff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py
index 9f9cbf4..fcd58df 100644
--- a/plone/app/caching/tests/test_integration.py
+++ b/plone/app/caching/tests/test_integration.py
@@ -85,8 +85,8 @@ def test_disabled(self):
 
         # Folder content
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Publish the folder
@@ -94,12 +94,12 @@ def test_disabled(self):
 
         # Non-folder content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         self.portal['f1']['d1'].text = RichTextValue(
-            u"<p>Body one</p>",
-            'text/plain',
-            'text/html'
+            u'<p>Body one</p>',
+            u'text/plain',
+            u'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -109,16 +109,16 @@ def test_disabled(self):
 
         # Content image
         self.portal['f1'].invokeFactory('Image', 'i1')
-        self.portal['f1']['i1'].title = u"Image one"
-        self.portal['f1']['i1'].description = u"Image one description"
+        self.portal['f1']['i1'].title = u'Image one'
+        self.portal['f1']['i1'].description = u'Image one description'
         self.portal['f1']['i1'].image = NamedImage(
             open(TEST_IMAGE, 'rb'), 'image/gif', u'test.gif')
         self.portal['f1']['i1'].reindexObject()
 
         # Content file
         self.portal['f1'].invokeFactory('File', 'f1')
-        self.portal['f1']['f1'].title = u"File one"
-        self.portal['f1']['f1'].description = u"File one description"
+        self.portal['f1']['f1'].title = u'File one'
+        self.portal['f1']['f1'].description = u'File one description'
         self.portal['f1']['f1'].file = OFS.Image.File(
             'test.gif', 'test.gif', open(TEST_FILE, 'rb'))
         self.portal['f1']['f1'].reindexObject()
@@ -127,7 +127,7 @@ def test_disabled(self):
         OFS.Image.manage_addImage(
             self.portal['portal_skins']['custom'],
             'test.gif',
-            open(TEST_IMAGE, 'rb')
+            open(TEST_IMAGE, 'rb'),
         )
 
         setRoles(self.portal, TEST_USER_ID, ('Member',))
@@ -170,12 +170,12 @@ def test_auto_purge_content_types(self):
 
         # Non-folder content
         self.portal.invokeFactory('Document', 'd1')
-        self.portal['d1'].title = u"Document one"
-        self.portal['d1'].description = u"Document one description"
+        self.portal['d1'].title = u'Document one'
+        self.portal['d1'].description = u'Document one description'
         self.portal['d1'].text = RichTextValue(
-            u"<p>Body one</p>",
-            'text/plain',
-            'text/html'
+            u'<p>Body one</p>',
+            u'text/plain',
+            u'text/html',
         )
         self.portal['d1'].reindexObject()
 
@@ -188,7 +188,7 @@ def test_auto_purge_content_types(self):
 
         editURL = '{0}/edit?_authenticator={1}'.format(
             self.portal['d1'].absolute_url(),
-            getToken(TEST_USER_NAME)
+            getToken(TEST_USER_NAME),
         )
 
         import transaction
@@ -204,7 +204,7 @@ def test_auto_purge_content_types(self):
         browser.open(editURL)
 
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 1"
+            name='form.widgets.IDublinCore.title').value = u'Title 1'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
@@ -220,7 +220,7 @@ def test_auto_purge_content_types(self):
 
         browser.open(editURL)
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 2"
+            name='form.widgets.IDublinCore.title').value = u'Title 2'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
@@ -236,7 +236,7 @@ def test_auto_purge_content_types(self):
 
         browser.open(editURL)
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 3"
+            name='form.widgets.IDublinCore.title').value = u'Title 3'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
@@ -252,7 +252,7 @@ def test_auto_purge_content_types(self):
 
         browser.open(editURL)
         browser.getControl(
-            name='form.widgets.IDublinCore.title').value = u"Title 4"
+            name='form.widgets.IDublinCore.title').value = u'Title 4'
         browser.getControl('Save').click()
 
         self.assertEqual([], self.purger._sync)
diff --git a/plone/app/caching/tests/test_lookup.py b/plone/app/caching/tests/test_lookup.py
index 84773f5..4518269 100644
--- a/plone/app/caching/tests/test_lookup.py
+++ b/plone/app/caching/tests/test_lookup.py
@@ -256,8 +256,8 @@ def test_parent_not_IBrowserDefault_actiononly(self):
         published = ZopePageTemplate('defaultView').__of__(
             DummyNotBrowserDefault(
                 'testtype',
-                'string:${object_url}/defaultView'
-            )
+                'string:${object_url}/defaultView',
+            ),
         )
         request = DummyRequest(published, DummyResponse())
 
diff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py
index ac9c5a2..51d2344 100644
--- a/plone/app/caching/tests/test_operation_default.py
+++ b/plone/app/caching/tests/test_operation_default.py
@@ -43,8 +43,8 @@ def test_last_modified_no_etags(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         self.cacheSettings.operationMapping = {
@@ -62,8 +62,7 @@ def test_last_modified_no_etags(self):
             'Basic {0}:{1}'.format(TEST_USER_NAME, TEST_USER_PASSWORD, ),
         )
         browser.open('{0}/++add++Document'.format(
-            self.portal['f1'].absolute_url())
-        )
+            self.portal['f1'].absolute_url()),)
         browser.getControl(
             name='form.widgets.IDublinCore.title').value = 'dummy content'
         browser.getControl('Save').click()
diff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py
index fbca715..5bbb5f4 100644
--- a/plone/app/caching/tests/test_operation_parameters.py
+++ b/plone/app/caching/tests/test_operation_parameters.py
@@ -40,19 +40,19 @@ def test_anon_only(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add page content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
diff --git a/plone/app/caching/tests/test_operation_utils.py b/plone/app/caching/tests/test_operation_utils.py
index 1f6867e..ea0039a 100644
--- a/plone/app/caching/tests/test_operation_utils.py
+++ b/plone/app/caching/tests/test_operation_utils.py
@@ -81,7 +81,7 @@ def test_doNotCache_deletes_last_modified(self):
         now = datetime.datetime.now(dateutil.tz.tzlocal())
         response.setHeader(
             'Last-Modified',
-            wsgiref.handlers.format_date_time(time.mktime(now.timetuple()))
+            wsgiref.handlers.format_date_time(time.mktime(now.timetuple())),
         )
 
         doNotCache(published, request, response)
@@ -287,7 +287,7 @@ def test_cacheInBrowserAndProxy_full(self):
             maxage=60,
             etag=etag,
             lastModified=now,
-            vary=vary
+            vary=vary,
         )
 
         self.assertEqual(200, response.getStatus())
@@ -301,12 +301,12 @@ def test_cacheInBrowserAndProxy_full(self):
         delta = datetime.timedelta(seconds=58)
         self.assertFalse(
             timedelta < delta,
-            '{0} is not < {1}'.format(timedelta, delta)
+            '{0} is not < {1}'.format(timedelta, delta),
         )
         delta = datetime.timedelta(seconds=61)
         self.assertFalse(
             timedelta > delta,
-            '{0} is not > {1}'.format(timedelta, delta)
+            '{0} is not > {1}'.format(timedelta, delta),
         )
 
     # cacheInRAM()
@@ -409,9 +409,9 @@ def test_cachedResponse(self):
         response.setStatus(200)
 
         body = cachedResponse(published, request,
-                              response, 404, headers, u"body")
+                              response, 404, headers, u'body')
 
-        self.assertEqual(u"body", body)
+        self.assertEqual(u'body', body)
         self.assertEqual(404, response.getStatus())
         self.assertEqual('foo', response.getHeader('X-Cache-Rule'))
         self.assertEqual('bar', response.getHeader('X-Foo'))
@@ -442,9 +442,9 @@ def test_cachedResponse_gzip_off(self):
         assert response.enableHTTPCompression(query=True)
 
         body = cachedResponse(published, request, response,
-                              404, headers, u"body", 0)
+                              404, headers, u'body', 0)
 
-        self.assertEqual(u"body", body)
+        self.assertEqual(u'body', body)
         self.assertEqual(404, response.getStatus())
         self.assertEqual('foo', response.getHeader('X-Cache-Rule'))
         self.assertEqual('bar', response.getHeader('X-Foo'))
@@ -477,9 +477,9 @@ def test_cachedResponse_gzip_on(self):
         assert not response.enableHTTPCompression(query=True)
 
         body = cachedResponse(published, request, response,
-                              404, headers, u"body", 1)
+                              404, headers, u'body', 1)
 
-        self.assertEqual(u"body", body)
+        self.assertEqual(u'body', body)
         self.assertEqual(404, response.getStatus())
         self.assertEqual('foo', response.getHeader('X-Cache-Rule'))
         self.assertEqual('bar', response.getHeader('X-Foo'))
@@ -502,7 +502,7 @@ def test_notModified_minimal(self):
 
         body = notModified(published, request, response)
 
-        self.assertEqual(u"", body)
+        self.assertEqual('', body)
         self.assertEqual(304, response.getStatus())
 
     def test_notModified_full(self):
@@ -521,7 +521,7 @@ def test_notModified_full(self):
         body = notModified(published, request, response,
                            etag=etag, lastModified=now)
 
-        self.assertEqual(u"", body)
+        self.assertEqual(u'', body)
         self.assertEqual(etag, response.getHeader('ETag', literal=1))
         self.assertIsNone(response.getHeader('Last-Modified'))
         self.assertIsNone(response.getHeader('Expires'))
@@ -736,8 +736,11 @@ def test_isModified_inm_match_update(self):
 
         etag = None
 
-        self.assertTrue(isModified(request, etag=etag,
-                                          lastModified='doesnt_really_matter'))
+        self.assertTrue(isModified(
+            request,
+            etag=etag,
+            lastModified='doesnt_really_matter'),
+        )
 
     def test_isModified_inm_match_multiple(self):
         from plone.app.caching.operations.utils import isModified
@@ -986,7 +989,7 @@ def __call__(self):
         published = DummyPublished()
         self.assertEqual(
             datetime.datetime(2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzlocal()),
-            getLastModified(published)
+            getLastModified(published),
         )
 
     def test_getLastModified_timezone(self):
@@ -1001,7 +1004,7 @@ def __init__(self, context):
 
             def __call__(self):
                 return datetime.datetime(
-                    2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc()
+                    2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc(),
                 )
 
         provideAdapter(DummyLastModified)
@@ -1009,7 +1012,7 @@ def __call__(self):
         published = DummyPublished()
         self.assertEqual(
             datetime.datetime(2010, 11, 24, 3, 4, 5, 6, dateutil.tz.tzutc()),
-            getLastModified(published)
+            getLastModified(published),
         )
 
     # getExpiration()
@@ -1087,7 +1090,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return 'foo'
 
-        provideAdapter(FooETag, name=u"foo")
+        provideAdapter(FooETag, name=u'foo')
 
         @implementer(IETagValue)
         @adapter(DummyPublished, HTTPRequest)
@@ -1100,7 +1103,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return None
 
-        provideAdapter(BarETag, name=u"bar")
+        provideAdapter(BarETag, name=u'bar')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -1125,7 +1128,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return 'foo'
 
-        provideAdapter(FooETag, name=u"foo")
+        provideAdapter(FooETag, name=u'foo')
 
         @implementer(IETagValue)
         @adapter(DummyPublished, HTTPRequest)
@@ -1138,7 +1141,7 @@ def __init__(self, published, request):
             def __call__(self):
                 return 'bar'
 
-        provideAdapter(BarETag, name=u"bar")
+        provideAdapter(BarETag, name=u'bar')
 
         environ = {'SERVER_NAME': 'example.com', 'SERVER_PORT': '80'}
         response = HTTPResponse()
@@ -1151,8 +1154,8 @@ def __call__(self):
                 published,
                 request,
                 keys=('foo', 'bar',),
-                extraTokens=('baz,qux',)
-            )
+                extraTokens=('baz,qux',),
+            ),
         )
 
     # parseETags()
@@ -1332,7 +1335,7 @@ def __call__(self, key):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         storeResponseInRAMCache(request, response, result)
@@ -1346,7 +1349,7 @@ def test_storeResponseInRAMCache_no_cache(self):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)[
@@ -1375,7 +1378,7 @@ def __call__(self, key):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)[
@@ -1411,7 +1414,7 @@ def __call__(self, key):
         request.environ['HTTP_ACCEPT_ENCODING'] = 'gzip; deflate'
         response.enableHTTPCompression(request)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)[
@@ -1444,7 +1447,7 @@ def __call__(self, key):
         response = HTTPResponse()
         request = HTTPRequest(StringIO(), environ, response)
 
-        result = u"Body"
+        result = u'Body'
         response.setHeader('X-Foo', 'bar')
 
         IAnnotations(request)['annkey'] = 'foo'
@@ -1524,7 +1527,7 @@ def __call__(self, key):
         request.environ['QUERY_STRING'] = ''
 
         cache['||a|b||http://example.com/foo/bar?'] = (
-            200, {'x-foo': 'bar'}, u'Body'
+            200, {'x-foo': 'bar'}, u'Body',
         )
 
         cached = normalize_response_cache(
diff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py
index 831388b..a449706 100644
--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py
@@ -40,7 +40,7 @@ def test_image():
     filename = os.path.join(os.path.dirname(__file__), u'test.gif')
     return NamedBlobImage(
         data=open(filename, 'r').read(),
-        filename=filename
+        filename=filename,
     )
 
 
@@ -100,18 +100,18 @@ def test_composite_views(self):
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
         self.portal['f1'].title = 'one'
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add page content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -287,7 +287,7 @@ def test_composite_views(self):
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -415,14 +415,14 @@ def test_content_files(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add content image
         self.portal['f1'].invokeFactory('Image', 'i1')
-        self.portal['f1']['i1'].title = u"Image one"
-        self.portal['f1']['i1'].description = u"Image one description"
+        self.portal['f1']['i1'].title = u'Image one'
+        self.portal['f1']['i1'].description = u'Image one description'
         self.portal['f1']['i1'].image = test_image()
         self.portal['f1']['i1'].reindexObject()
 
diff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py
index cd7e5bb..a92f3c4 100644
--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py
+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py
@@ -37,7 +37,7 @@ def test_image():
     filename = os.path.join(os.path.dirname(__file__), u'test.gif')
     return NamedBlobImage(
         data=open(filename, 'r').read(),
-        filename=filename
+        filename=filename,
     )
 
 
@@ -91,19 +91,19 @@ def test_composite_views(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add page content
         self.portal['f1'].invokeFactory('Document', 'd1')
-        self.portal['f1']['d1'].title = u"Document one"
-        self.portal['f1']['d1'].description = u"Document one description"
+        self.portal['f1']['d1'].title = u'Document one'
+        self.portal['f1']['d1'].description = u'Document one description'
         testText = 'Testing... body one'
         self.portal['f1']['d1'].text = RichTextValue(
             testText,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -288,7 +288,7 @@ def test_composite_views(self):
         self.portal['f1']['d1'].text = RichTextValue(
             testText2,
             'text/plain',
-            'text/html'
+            'text/html',
         )
         self.portal['f1']['d1'].reindexObject()
 
@@ -376,7 +376,7 @@ def test_content_feeds(self):
             'Authorization', 'Basic {0}:{1}'.format(
                 TEST_USER_NAME,
                 TEST_USER_PASSWORD,
-            )
+            ),
         )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
@@ -396,7 +396,7 @@ def test_content_feeds(self):
             'Authorization', 'Basic {0}:{1}'.format(
                 TEST_USER_NAME,
                 TEST_USER_PASSWORD,
-            )
+            ),
         )
         browser.open(self.portal.absolute_url() + '/RSS')
         self.assertEqual('plone.content.feed', browser.headers['X-Cache-Rule'])
@@ -410,14 +410,14 @@ def test_content_files(self):
         # Add folder content
         setRoles(self.portal, TEST_USER_ID, ('Manager',))
         self.portal.invokeFactory('Folder', 'f1')
-        self.portal['f1'].title = u"Folder one"
-        self.portal['f1'].description = u"Folder one description"
+        self.portal['f1'].title = u'Folder one'
+        self.portal['f1'].description = u'Folder one description'
         self.portal['f1'].reindexObject()
 
         # Add content image
         self.portal['f1'].invokeFactory('Image', 'i1')
-        self.portal['f1']['i1'].title = u"Image one"
-        self.portal['f1']['i1'].description = u"Image one description"
+        self.portal['f1']['i1'].title = u'Image one'
+        self.portal['f1']['i1'].description = u'Image one description'
         self.portal['f1']['i1'].image = test_image()
         self.portal['f1']['i1'].reindexObject()
 
diff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py
index bdb6fa7..dc46aa3 100644
--- a/plone/app/caching/tests/test_purge.py
+++ b/plone/app/caching/tests/test_purge.py
@@ -197,7 +197,7 @@ def test_parent_not_default_view(self):
 
         self.assertEqual(
             ['/bar/foo/', '/bar/foo/view', '/bar/foo/default-view'],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -211,9 +211,9 @@ def test_parent_default_view(self):
                 '/bar/default-view/default-view',
                 '/bar',
                 '/bar/',
-                '/bar/view'
+                '/bar/view',
             ],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -362,9 +362,9 @@ class ATMultipleFields(atapi.BaseContent):
                 '/foo/image2_mini',
                 '/foo/image2_normal',
                 '/foo/at_download/blob1',
-                '/foo/blob1'
+                '/foo/blob1',
             ],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -396,9 +396,9 @@ class ATMultipleFields(atapi.BaseContent):
                 '/foo/at_download/image2',
                 '/foo/image2',
                 '/foo/image2_mini',
-                '/foo/image2_normal'
+                '/foo/image2_normal',
             ],
-            list(purger.getRelativePaths())
+            list(purger.getRelativePaths()),
         )
         self.assertEqual([], list(purger.getAbsolutePaths()))
 
@@ -448,5 +448,5 @@ def test_scale_purge_paths_unicode(self):
             list(purge.getRelativePaths()),
             ['/plone/media/file/view/++widget++form.widgets.file/@@download/' +
              'data/t\xc3\xb6stfile.csv',
-             '/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv']
+             '/plone/media/file/@@download/file/data/t\xc3\xb6stfile.csv'],
         )


