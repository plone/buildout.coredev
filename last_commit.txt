Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-08-27T20:31:53+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/605b079d38ec0c9e5f00d6610c0e3eeebee50af3

Controlpanels Plone4 support

Files changed:
A src/plone/restapi/controlpanels/registry.py
M src/plone/restapi/controlpanels/__init__.py
M src/plone/restapi/controlpanels/types.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/services/controlpanels/configure.zcml

b'diff --git a/src/plone/restapi/controlpanels/__init__.py b/src/plone/restapi/controlpanels/__init__.py\nindex 8585ab2af..ca4be6e04 100644\n--- a/src/plone/restapi/controlpanels/__init__.py\n+++ b/src/plone/restapi/controlpanels/__init__.py\n@@ -1,25 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IDateAndTimeSchema\n-from Products.CMFPlone.interfaces.controlpanel import IEditingSchema\n-from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.interfaces.controlpanel import IMarkupSchema\n-from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISearchSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISecuritySchema\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISocialMediaSchema\n-from zope.component import adapter\n from zope.interface import implementer\n-from zope.interface import Interface\n from zope.publisher.interfaces import NotFound\n from plone.restapi.controlpanels.interfaces import IControlpanel\n-\n-try:\n-    from plone.i18n.interfaces import ILanguageSchema\n-except ImportError:  # pragma: no cover\n-    from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n+from Products.CMFCore.utils import getToolByName\n \n \n @implementer(IControlpanel)\n@@ -67,89 +50,3 @@ def update(self, names):\n \n     def delete(self, names):\n         raise NotFound(self.context, names, self.request)\n-\n-\n-# General\n-\n-\n-@adapter(Interface, Interface)\n-class DateTimeControlpanel(RegistryConfigletPanel):\n-    schema = IDateAndTimeSchema\n-    configlet_id = "DateAndTime"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class LanguageControlpanel(RegistryConfigletPanel):\n-    schema = ILanguageSchema\n-    configlet_id = "LanguageSettings"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class MailControlpanel(RegistryConfigletPanel):\n-    schema = IMailSchema\n-    configlet_id = "MailHost"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class NavigationControlpanel(RegistryConfigletPanel):\n-    schema = INavigationSchema\n-    configlet_id = "NavigationSettings"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class SiteControlpanel(RegistryConfigletPanel):\n-    schema = ISiteSchema\n-    configlet_id = "PloneReconfig"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class SearchControlpanel(RegistryConfigletPanel):\n-    schema = ISearchSchema\n-    configlet_id = "SearchSettings"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class SocialMediaControlpanel(RegistryConfigletPanel):\n-    schema = ISocialMediaSchema\n-    configlet_id = "socialmedia"\n-    configlet_category_id = "plone-general"\n-\n-\n-# Content\n-\n-\n-@adapter(Interface, Interface)\n-class EditingControlpanel(RegistryConfigletPanel):\n-    schema = IEditingSchema\n-    configlet_id = "EditingSettings"\n-    configlet_category_id = "plone-content"\n-\n-\n-@adapter(Interface, Interface)\n-class ImagingControlpanel(RegistryConfigletPanel):\n-    schema = IImagingSchema\n-    configlet_id = "ImagingSettings"\n-    configlet_category_id = "plone-content"\n-\n-\n-@adapter(Interface, Interface)\n-class MarkupControlpanel(RegistryConfigletPanel):\n-    schema = IMarkupSchema\n-    configlet_id = "MarkupSettings"\n-    configlet_category_id = "plone-content"\n-\n-\n-# Security\n-\n-\n-@adapter(Interface, Interface)\n-class SecurityControlpanel(RegistryConfigletPanel):\n-    schema = ISecuritySchema\n-    configlet_id = "SecuritySettings"\n-    configlet_category_id = "plone-security"\ndiff --git a/src/plone/restapi/controlpanels/registry.py b/src/plone/restapi/controlpanels/registry.py\nnew file mode 100644\nindex 000000000..47185b990\n--- /dev/null\n+++ b/src/plone/restapi/controlpanels/registry.py\n@@ -0,0 +1,106 @@\n+# -*- coding: utf-8 -*-\n+from zope.component import adapter\n+from zope.interface import Interface\n+from Products.CMFPlone.interfaces.controlpanel import IDateAndTimeSchema\n+from Products.CMFPlone.interfaces.controlpanel import IEditingSchema\n+from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n+from Products.CMFPlone.interfaces.controlpanel import IMarkupSchema\n+from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n+from Products.CMFPlone.interfaces.controlpanel import ISearchSchema\n+from Products.CMFPlone.interfaces.controlpanel import ISecuritySchema\n+from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from Products.CMFPlone.interfaces.controlpanel import ISocialMediaSchema\n+from plone.restapi.controlpanels import RegistryConfigletPanel\n+\n+try:\n+    from plone.i18n.interfaces import ILanguageSchema\n+except ImportError:  # pragma: no cover\n+    from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n+\n+\n+\n+# General\n+\n+\n+@adapter(Interface, Interface)\n+class DateTimeControlpanel(RegistryConfigletPanel):\n+    schema = IDateAndTimeSchema\n+    configlet_id = "DateAndTime"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class LanguageControlpanel(RegistryConfigletPanel):\n+    schema = ILanguageSchema\n+    configlet_id = "LanguageSettings"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class MailControlpanel(RegistryConfigletPanel):\n+    schema = IMailSchema\n+    configlet_id = "MailHost"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class NavigationControlpanel(RegistryConfigletPanel):\n+    schema = INavigationSchema\n+    configlet_id = "NavigationSettings"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class SiteControlpanel(RegistryConfigletPanel):\n+    schema = ISiteSchema\n+    configlet_id = "PloneReconfig"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class SearchControlpanel(RegistryConfigletPanel):\n+    schema = ISearchSchema\n+    configlet_id = "SearchSettings"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class SocialMediaControlpanel(RegistryConfigletPanel):\n+    schema = ISocialMediaSchema\n+    configlet_id = "socialmedia"\n+    configlet_category_id = "plone-general"\n+\n+\n+# Content\n+\n+\n+@adapter(Interface, Interface)\n+class EditingControlpanel(RegistryConfigletPanel):\n+    schema = IEditingSchema\n+    configlet_id = "EditingSettings"\n+    configlet_category_id = "plone-content"\n+\n+\n+@adapter(Interface, Interface)\n+class ImagingControlpanel(RegistryConfigletPanel):\n+    schema = IImagingSchema\n+    configlet_id = "ImagingSettings"\n+    configlet_category_id = "plone-content"\n+\n+\n+@adapter(Interface, Interface)\n+class MarkupControlpanel(RegistryConfigletPanel):\n+    schema = IMarkupSchema\n+    configlet_id = "MarkupSettings"\n+    configlet_category_id = "plone-content"\n+\n+\n+# Security\n+\n+\n+@adapter(Interface, Interface)\n+class SecurityControlpanel(RegistryConfigletPanel):\n+    schema = ISecuritySchema\n+    configlet_id = "SecuritySettings"\n+    configlet_category_id = "plone-security"\ndiff --git a/src/plone/restapi/controlpanels/types.py b/src/plone/restapi/controlpanels/types.py\nindex 2e6dc96a9..6338fa58d 100644\n--- a/src/plone/restapi/controlpanels/types.py\n+++ b/src/plone/restapi/controlpanels/types.py\n@@ -14,14 +14,16 @@\n import plone.protect.interfaces\n from zope.interface import noLongerProvides\n from plone.restapi.interfaces import IPloneRestapiLayer\n+from Products.CMFPlone.utils import getFSVersionTuple\n \n+PLONE5 = getFSVersionTuple()[0] >= 5\n \n @adapter(Interface, IPloneRestapiLayer)\n @implementer(IDexterityTypesControlpanel)\n class DexterityTypesControlpanel(RegistryConfigletPanel):\n     schema = Interface\n     configlet_id = "dexterity-types"\n-    configlet_category_id = "plone-content"\n+    configlet_category_id = "plone-content" if PLONE5 else \'Plone\'\n \n     def add(self, names):\n         data = json_body(self.request)\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 192924757..6f48a5dd5 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -44,8 +44,6 @@\n     <adapter factory=".atfields.ReferenceFieldDeserializer" />\n   </configure>\n \n-  <configure zcml:condition="have plone-5">\n-    <include package=".controlpanels" />\n-  </configure>\n+  <include package=".controlpanels" />\n \n </configure>\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 19bee244f..956a8ed85 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -6,7 +6,7 @@\n     <adapter factory=".site.SerializeSiteRootToJson" />\n     <adapter factory=".dxcontent.SerializeToJson" />\n     <adapter factory=".dxcontent.SerializeFolderToJson" />\n-    <adapter \n+    <adapter\n         factory=".dxcontent.DexterityObjectPrimaryFieldTarget" />\n \n     <configure zcml:condition="installed plone.app.contenttypes">\n@@ -99,8 +99,6 @@\n         <adapter factory=".tile.TileSerializeToJson" />\n     </configure>\n \n-    <configure zcml:condition="have plone-5">\n-        <include package=".controlpanels" />\n-    </configure>\n+    <include package=".controlpanels" />\n \n </configure>\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 254d310c9..090c3059d 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -7,13 +7,10 @@\n \n   <include package=".auth" />\n   <include package=".actions" />\n-  <include package=".addons"\n-      zcml:condition="have plone-5"/>\n+  <include package=".addons" />\n   <include package=".breadcrumbs"/>\n   <include package=".content"/>\n-  <configure zcml:condition="have plone-5">\n-    <include package=".controlpanels" />\n-  </configure>\n+  <include package=".controlpanels" />\n   <include package=".copymove"/>\n   <include package=".database"/>\n   <include package=".discussion"/>\ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex d17f8ee14..db3cf356c 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -45,57 +45,62 @@\n     permission="plone.app.controlpanel.Overview"\n     />\n \n-<!-- General -->\n+  <!-- Dexterity Types Controlpanel -->\n   <adapter\n-    factory="plone.restapi.controlpanels.DateTimeControlpanel"\n-    name="date-and-time" />\n+    factory="plone.restapi.controlpanels.types.DexterityTypesControlpanel"\n+    provides="plone.restapi.controlpanels.interfaces.IDexterityTypesControlpanel"\n+    name="dexterity-types" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.LanguageControlpanel"\n-    name="language" />\n+  <configure zcml:condition="have plone-5">\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.MailControlpanel"\n-    name="mail" />\n+    <!-- General -->\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.DateTimeControlpanel"\n+      name="date-and-time" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.NavigationControlpanel"\n-    name="navigation" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.LanguageControlpanel"\n+      name="language" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.SiteControlpanel"\n-    name="site" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.MailControlpanel"\n+      name="mail" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.SearchControlpanel"\n-    name="search" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.NavigationControlpanel"\n+      name="navigation" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.SocialMediaControlpanel"\n-    name="socialmedia" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SiteControlpanel"\n+      name="site" />\n \n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SearchControlpanel"\n+      name="search" />\n \n-<!-- Content -->\n-  <adapter\n-    factory="plone.restapi.controlpanels.EditingControlpanel"\n-    name="editing" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SocialMediaControlpanel"\n+      name="socialmedia" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.ImagingControlpanel"\n-    name="imaging" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.MarkupControlpanel"\n-    name="markup" />\n+    <!-- Content -->\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.EditingControlpanel"\n+      name="editing" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.types.DexterityTypesControlpanel"\n-    provides="plone.restapi.controlpanels.interfaces.IDexterityTypesControlpanel"\n-    name="dexterity-types" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.ImagingControlpanel"\n+      name="imaging" />\n \n-<!-- Security -->\n-  <adapter\n-    factory="plone.restapi.controlpanels.SecurityControlpanel"\n-    name="security" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.MarkupControlpanel"\n+      name="markup" />\n+\n+    <!-- Security -->\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SecurityControlpanel"\n+      name="security" />\n+\n+  </configure>\n \n </configure>\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-08-27T20:34:23+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/3dda68ac614c80341d40ffdc389c9a5b0c8d7dbd

Flake8

Files changed:
M src/plone/restapi/controlpanels/registry.py
M src/plone/restapi/controlpanels/types.py

b'diff --git a/src/plone/restapi/controlpanels/registry.py b/src/plone/restapi/controlpanels/registry.py\nindex 47185b990..f9bbce70a 100644\n--- a/src/plone/restapi/controlpanels/registry.py\n+++ b/src/plone/restapi/controlpanels/registry.py\n@@ -19,10 +19,7 @@\n     from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n \n \n-\n # General\n-\n-\n @adapter(Interface, Interface)\n class DateTimeControlpanel(RegistryConfigletPanel):\n     schema = IDateAndTimeSchema\ndiff --git a/src/plone/restapi/controlpanels/types.py b/src/plone/restapi/controlpanels/types.py\nindex 6338fa58d..58783cd0e 100644\n--- a/src/plone/restapi/controlpanels/types.py\n+++ b/src/plone/restapi/controlpanels/types.py\n@@ -18,6 +18,7 @@\n \n PLONE5 = getFSVersionTuple()[0] >= 5\n \n+\n @adapter(Interface, IPloneRestapiLayer)\n @implementer(IDexterityTypesControlpanel)\n class DexterityTypesControlpanel(RegistryConfigletPanel):\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-08-27T20:43:15+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/a957c8137b4a797d7727179974cd44e82f2fbbda

Update changelog

Files changed:
A news/984.feature

b'diff --git a/news/984.feature b/news/984.feature\nnew file mode 100644\nindex 000000000..6597d0702\n--- /dev/null\n+++ b/news/984.feature\n@@ -0,0 +1 @@\n+- Enable Plone 4 Control Panels: Add-ons, Dexterity Content Types [avoinea]\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-08-27T21:09:33+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/2ec991c64c18cc6d2f844c00ca35cef374268883

Black

Files changed:
M src/plone/restapi/controlpanels/types.py

b'diff --git a/src/plone/restapi/controlpanels/types.py b/src/plone/restapi/controlpanels/types.py\nindex 58783cd0e..ab9bcf315 100644\n--- a/src/plone/restapi/controlpanels/types.py\n+++ b/src/plone/restapi/controlpanels/types.py\n@@ -24,7 +24,7 @@\n class DexterityTypesControlpanel(RegistryConfigletPanel):\n     schema = Interface\n     configlet_id = "dexterity-types"\n-    configlet_category_id = "plone-content" if PLONE5 else \'Plone\'\n+    configlet_category_id = "plone-content" if PLONE5 else "Plone"\n \n     def add(self, names):\n         data = json_body(self.request)\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-08-27T21:39:47+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/878c37a3ab3ce7a3731106d7bb5cd71b2496cca6

Enable DX CPanel tests on Plone 4

Files changed:
M src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py

b'diff --git a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\nindex f67a8cd11..e520bb1b2 100644\n--- a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n+++ b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n@@ -5,19 +5,9 @@\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n-\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n-@unittest.skipIf(not PLONE5, "Endpoint works for Plone 5 only")\n class TestDexterityTypesControlpanel(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-08-28T14:19:32+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/b256af7a384b6c788ecf027624d35bf97c336bc4

Merge branch 'master' into eea-plone4-cpanels

Files changed:
M src/plone/restapi/batching.py
M src/plone/restapi/controlpanels/interfaces.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/controlpanels/__init__.py
M src/plone/restapi/deserializer/local_roles.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/exceptions.py
M src/plone/restapi/interfaces.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/serializer/controlpanels/__init__.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/serializer/tile.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/services/__init__.py
M src/plone/restapi/services/addons/addons.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/auth/logout.py
M src/plone/restapi/services/auth/renew.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/delete.py
M src/plone/restapi/services/content/get.py
M src/plone/restapi/services/content/sharing.py
M src/plone/restapi/services/content/update.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/utils.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/locking/locking.py
M src/plone/restapi/services/multilingual/locator.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/querystringsearch/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/languages.py
M src/plone/restapi/tests/statictime.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_upgrade_ordering.py
M src/plone/restapi/types/utils.py
M src/plone/restapi/upgrades/to0002.py
M src/plone/restapi/upgrades/to0003.py
M src/plone/restapi/upgrades/to0004.py
M src/plone/restapi/upgrades/to0005.py
M src/plone/restapi/upgrades/to0006.py

b'diff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex e612f9a2c..2cab0e619 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -22,14 +22,12 @@ def __init__(self, request, results):\n         self.batch = Batch(results, self.b_size, self.b_start)\n \n     def __iter__(self):\n-        """Iterate over items in current batch.\n-        """\n+        """Iterate over items in current batch."""\n         return iter(self.batch)\n \n     @property\n     def items_total(self):\n-        """Return the number of total items in underlying sequence.\n-        """\n+        """Return the number of total items in underlying sequence."""\n         return self.batch.sequence_length\n \n     @property\n@@ -63,8 +61,7 @@ def current_batch_url(self):\n \n     @property\n     def links(self):\n-        """Get a dictionary with batching links.\n-        """\n+        """Get a dictionary with batching links."""\n         # Don\'t provide batching links if resultset isn\'t batched\n         if self.items_total <= self.b_size:\n             return None\n@@ -89,16 +86,14 @@ def links(self):\n         return links\n \n     def _batch_for_page(self, pagenumber):\n-        """Return a new Batch object for the given pagenumber.\n-        """\n+        """Return a new Batch object for the given pagenumber."""\n         new_batch = Batch.fromPagenumber(\n             self.batch._sequence, pagesize=self.b_size, pagenumber=pagenumber\n         )\n         return new_batch\n \n     def _url_for_batch(self, batch):\n-        """Return URL that points to the given batch.\n-        """\n+        """Return URL that points to the given batch."""\n         # Calculate the start for the new batch page.\n         # Make sure we account for plone.batching\'s one-based indexing and\n         # that the start never drops below zero\ndiff --git a/src/plone/restapi/controlpanels/interfaces.py b/src/plone/restapi/controlpanels/interfaces.py\nindex 681cfaa63..55b9852ea 100644\n--- a/src/plone/restapi/controlpanels/interfaces.py\n+++ b/src/plone/restapi/controlpanels/interfaces.py\n@@ -15,20 +15,16 @@ class IControlpanel(Interface):\n     )  # noqa\n \n     def add(names):\n-        """ Create controlpanel children by names\n-        """\n+        """Create controlpanel children by names"""\n \n     def get(names):\n-        """ Read controlpanel children by names\n-        """\n+        """Read controlpanel children by names"""\n \n     def update(names):\n-        """ Update controlpanel children by names\n-        """\n+        """Update controlpanel children by names"""\n \n     def delete(names):\n-        """ Remove controlpanel children by names\n-        """\n+        """Remove controlpanel children by names"""\n \n \n class IDexterityTypesControlpanel(IControlpanel):\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex 63bc7d8cc..9c34ad46b 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -20,8 +20,7 @@\n @implementer(IDeserializeFromJson)\n @adapter(IBaseObject, Interface)\n class DeserializeFromJson(OrderingMixin, object):\n-    """JSON deserializer for Archetypes content types\n-    """\n+    """JSON deserializer for Archetypes content types"""\n \n     notifies_create = True\n \n@@ -127,8 +126,7 @@ def validate(self):\n \n \n class ValidationRequest(dict):\n-    """A fake request for validation purposes.\n-    """\n+    """A fake request for validation purposes."""\n \n     def __init__(self, request, context):\n         self.request = request\n@@ -151,8 +149,7 @@ def get(self, key, default=None):\n \n \n class ValidationRequestForm(dict):\n-    """A request form dict that returns values from the content object.\n-    """\n+    """A request form dict that returns values from the content object."""\n \n     def __init__(self, request, context):\n         self.request = request\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex ecd4b4d0b..b6275c3c6 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -77,7 +77,7 @@ def __call__(self, value):\n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class ResolveUIDDeserializer(object):\n-    """ The "url" smart block field.\n+    """The "url" smart block field.\n \n     This is a generic handler. In all blocks, it converts any "url"\n     field from using resolveuid to an "absolute" URL\ndiff --git a/src/plone/restapi/deserializer/controlpanels/__init__.py b/src/plone/restapi/deserializer/controlpanels/__init__.py\nindex 9a8b01eb2..5301caa9b 100644\n--- a/src/plone/restapi/deserializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/deserializer/controlpanels/__init__.py\n@@ -17,8 +17,7 @@\n \n @implementer(IDexterityContent)\n class FakeDXContext(object):\n-    """Fake DX content class, so we can re-use the DX field deserializers\n-    """\n+    """Fake DX content class, so we can re-use the DX field deserializers"""\n \n \n @implementer(IDeserializeFromJson)\ndiff --git a/src/plone/restapi/deserializer/local_roles.py b/src/plone/restapi/deserializer/local_roles.py\nindex 8f0b02bee..9943b87b0 100644\n--- a/src/plone/restapi/deserializer/local_roles.py\n+++ b/src/plone/restapi/deserializer/local_roles.py\n@@ -26,8 +26,7 @@\n @implementer(IDeserializeFromJson)\n @adapter(IRoleManager, Interface)\n class DeserializeFromJson(object):\n-    """JSON deserializer for local roles\n-    """\n+    """JSON deserializer for local roles"""\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 60558848e..790e91fcb 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -13,8 +13,7 @@\n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n class DeserializeSiteRootFromJson(OrderingMixin, object):\n-    """JSON deserializer for the Plone site root\n-    """\n+    """JSON deserializer for the Plone site root"""\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/restapi/exceptions.py b/src/plone/restapi/exceptions.py\nindex e80e674e7..b81344505 100644\n--- a/src/plone/restapi/exceptions.py\n+++ b/src/plone/restapi/exceptions.py\n@@ -1,12 +1,10 @@\n # -*- coding: utf-8 -*-\n class APIError(Exception):\n-    """Base class for exceptions raised by plone.restapi.\n-    """\n+    """Base class for exceptions raised by plone.restapi."""\n \n \n class DeserializationError(Exception):\n-    """An error happened during deserialization of content.\n-    """\n+    """An error happened during deserialization of content."""\n \n     def __init__(self, msg):\n         self.msg = msg\n@@ -16,5 +14,4 @@ def __str__(self):\n \n \n class QueryParsingError(Exception):\n-    """An error happened while parsing a search query.\n-    """\n+    """An error happened while parsing a search query."""\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex a6f26b754..0efb341c3 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -14,8 +14,7 @@ class IPloneRestapiLayer(IDefaultBrowserLayer):\n \n \n class ISerializeToJson(Interface):\n-    """Adapter to serialize a Dexterity object into a JSON object.\n-    """\n+    """Adapter to serialize a Dexterity object into a JSON object."""\n \n \n class ISerializeToJsonSummary(Interface):\n@@ -25,17 +24,14 @@ class ISerializeToJsonSummary(Interface):\n \n \n class IJsonCompatible(Interface):\n-    """Convert a value to a JSON compatible data structure.\n-    """\n+    """Convert a value to a JSON compatible data structure."""\n \n \n class IContextawareJsonCompatible(IJsonCompatible):\n-    """Convert a value to a JSON compatible data structure, using a context.\n-    """\n+    """Convert a value to a JSON compatible data structure, using a context."""\n \n     def __init__(value, context):\n-        """Adapts value and a context\n-        """\n+        """Adapts value and a context"""\n \n \n class IFieldSerializer(Interface):\n@@ -44,12 +40,10 @@ class IFieldSerializer(Interface):\n     """\n \n     def __init__(field, context, request):\n-        """Adapts field, context and request.\n-        """\n+        """Adapts field, context and request."""\n \n     def __call__():\n-        """Returns JSON compatible python data.\n-        """\n+        """Returns JSON compatible python data."""\n \n \n class IPrimaryFieldTarget(Interface):\n@@ -59,12 +53,10 @@ class IPrimaryFieldTarget(Interface):\n     """\n \n     def __init__(field, context, request):\n-        """Adapts field, context and request.\n-        """\n+        """Adapts field, context and request."""\n \n     def __call__():\n-        """Returns a URL.\n-        """\n+        """Returns a URL."""\n \n \n class IObjectPrimaryFieldTarget(Interface):\n@@ -73,12 +65,10 @@ class IObjectPrimaryFieldTarget(Interface):\n     """\n \n     def __init__(field, context, request):\n-        """Adapts field, context and request.\n-        """\n+        """Adapts field, context and request."""\n \n     def __call__():\n-        """Returns a URL.\n-        """\n+        """Returns a URL."""\n \n \n class IDeserializeFromJson(Interface):\n@@ -86,21 +76,17 @@ class IDeserializeFromJson(Interface):\n \n \n class IFieldDeserializer(Interface):\n-    """An adapter to deserialize a JSON value into a field value.\n-    """\n+    """An adapter to deserialize a JSON value into a field value."""\n \n     def __init__(field, context, request):\n-        """Adapts a field, it\'s context and the request.\n-        """\n+        """Adapts a field, it\'s context and the request."""\n \n     def __call__(value):\n-        """Convert the provided JSON value to a field value.\n-        """\n+        """Convert the provided JSON value to a field value."""\n \n \n class IBlockFieldDeserializationTransformer(Interface):\n-    """Convert/adjust raw block deserialized value into block value.\n-    """\n+    """Convert/adjust raw block deserialized value into block value."""\n \n     block_type = Attribute(\n         "A string with the type of block, the @type from " "the block value"\n@@ -110,17 +96,14 @@ class IBlockFieldDeserializationTransformer(Interface):\n     )\n \n     def __init__(field, context, request):\n-        """Adapts context and the request.\n-        """\n+        """Adapts context and the request."""\n \n     def __call__(value):\n-        """Convert the provided raw Python value to a block value.\n-        """\n+        """Convert the provided raw Python value to a block value."""\n \n \n class IBlockFieldSerializationTransformer(Interface):\n-    """Transform block value before final JSON serialization\n-    """\n+    """Transform block value before final JSON serialization"""\n \n     block_type = Attribute(\n         "A string with the type of block, the @type from " "the block value"\n@@ -131,22 +114,19 @@ class IBlockFieldSerializationTransformer(Interface):\n     )\n \n     def __init__(field, context, request):\n-        """Adapts context and the request.\n-        """\n+        """Adapts context and the request."""\n \n     def __call__(value):\n-        """Convert the provided raw Python value to a block value.\n-        """\n+        """Convert the provided raw Python value to a block value."""\n \n \n class IExpandableElement(Interface):\n     """A named adapter that deserializes an element in expanded or collapsed\n-       form.\n+    form.\n     """\n \n     def __call__(expand=False):\n-        """\n-        """\n+        """"""\n \n \n class IZCatalogCompatibleQuery(Interface):\n@@ -166,12 +146,10 @@ class IZCatalogCompatibleQuery(Interface):\n     )\n \n     def __init__(context, request):\n-        """Adapts context and request.\n-        """\n+        """Adapts context and request."""\n \n     def __call__(query):\n-        """Returns a ZCatalog compatible query (Python dictionary).\n-        """\n+        """Returns a ZCatalog compatible query (Python dictionary)."""\n \n \n class IIndexQueryParser(Interface):\n@@ -201,8 +179,7 @@ class IIndexQueryParser(Interface):\n     )\n \n     def __init__(index, context, request):\n-        """Adapts a ZCatalog index, context and request.\n-        """\n+        """Adapts a ZCatalog index, context and request."""\n \n     def parse(idx_query):\n         """Takes a query against a single index (the value part of a\n@@ -221,15 +198,13 @@ def parse(idx_query):\n \n \n class IBlockSearchableText(Interface):\n-    """ Allow blocks to provide text for the SearchableText index\n+    """Allow blocks to provide text for the SearchableText index\n \n     Register as a named adapter, where the name is the block @type\n     """\n \n     def __init__(field, context, request):\n-        """Adapts a context and the request.\n-        """\n+        """Adapts a context and the request."""\n \n     def __call__(value):\n-        """Extract text from the block value. Returns text\n-        """\n+        """Extract text from the block value. Returns text"""\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 58a34564f..420fabbd9 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -27,8 +27,7 @@\n \n \n def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n-    """Add a JWT authentication plugin\n-    """\n+    """Add a JWT authentication plugin"""\n     plugin = JWTAuthenticationPlugin(id_, title)\n     self._setObject(plugin.getId(), plugin)\n \n@@ -42,8 +41,7 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n \n @implementer(IAuthenticationPlugin, IChallengePlugin, IExtractionPlugin)\n class JWTAuthenticationPlugin(BasePlugin):\n-    """Plone PAS plugin for authentication with JSON web tokens (JWT).\n-    """\n+    """Plone PAS plugin for authentication with JSON web tokens (JWT)."""\n \n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n@@ -127,8 +125,7 @@ def authenticateCredentials(self, credentials):\n \n     @postonly\n     def manage_updateConfig(self, REQUEST):\n-        """Update configuration of JWT Authentication Plugin.\n-        """\n+        """Update configuration of JWT Authentication Plugin."""\n         response = REQUEST.response\n \n         self.token_timeout = int(REQUEST.form.get("token_timeout", self.token_timeout))\ndiff --git a/src/plone/restapi/serializer/controlpanels/__init__.py b/src/plone/restapi/serializer/controlpanels/__init__.py\nindex 04f9a567d..e4f3885fd 100644\n--- a/src/plone/restapi/serializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/serializer/controlpanels/__init__.py\n@@ -39,8 +39,7 @@ def __call__(self):\n \n \n def get_jsonschema_for_controlpanel(controlpanel, context, request, form=None):\n-    """Build a complete JSON schema for the given controlpanel.\n-    """\n+    """Build a complete JSON schema for the given controlpanel."""\n     if not form:\n         schema = controlpanel.schema\n         fieldsets = utils.get_fieldsets(context, request, schema)\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex 552c233d7..07360fcb7 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -6,8 +6,7 @@\n \n \n def expandable_elements(context, request):\n-    """Returns a dict containing all expandable elements.\n-    """\n+    """Returns a dict containing all expandable elements."""\n     expands = request.form.get("expand", "").split(",")\n     elements = getAdapters((context, request), IExpandableElement)\n     res = {}\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex ee52e57d0..8f23013cc 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -89,8 +89,7 @@ def metadata_fields(self):\n @implementer(ISerializeToJsonSummary)\n @adapter(IPloneSiteRoot, Interface)\n class SiteRootJSONSummarySerializer(object):\n-    """ISerializeToJsonSummary adapter for the Plone Site root.\n-    """\n+    """ISerializeToJsonSummary adapter for the Plone Site root."""\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\nindex 567a99960..4e5cdd549 100644\n--- a/src/plone/restapi/serializer/tile.py\n+++ b/src/plone/restapi/serializer/tile.py\n@@ -31,8 +31,7 @@ def __call__(self):\n \n \n def get_jsonschema_for_tile(tile, context, request):\n-    """Build a complete JSON schema for the given tile.\n-    """\n+    """Build a complete JSON schema for the given tile."""\n     schema = tile.schema\n \n     fieldsets = utils.get_fieldsets(context, request, schema)\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex ac63d18e9..ce88e23ad 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -74,14 +74,12 @@ def __call__(self, vocabulary_id):\n \n @adapter(IVocabulary, Interface)\n class SerializeVocabularyToJson(SerializeVocabLikeToJson):\n-    """Serializes IVocabulary to JSON.\n-    """\n+    """Serializes IVocabulary to JSON."""\n \n \n @adapter(IIterableSource, Interface)\n class SerializeSourceToJson(SerializeVocabLikeToJson):\n-    """Serializes IIterableSource to JSON.\n-    """\n+    """Serializes IIterableSource to JSON."""\n \n \n @implementer(ISerializeToJson)\ndiff --git a/src/plone/restapi/services/__init__.py b/src/plone/restapi/services/__init__.py\nindex 8111751e7..454571df2 100644\n--- a/src/plone/restapi/services/__init__.py\n+++ b/src/plone/restapi/services/__init__.py\n@@ -11,8 +11,7 @@\n \n \n class Service(RestService):\n-    """Base class for Plone REST API services\n-    """\n+    """Base class for Plone REST API services"""\n \n     content_type = "application/json"\n \n@@ -32,7 +31,7 @@ def check_permission(self):\n \n     def reply(self):\n         """Process the request and return a JSON serializable data structure or\n-           the no content marker if the response body should be empty.\n+        the no content marker if the response body should be empty.\n         """\n         return _no_content_marker\n \ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 0d68affa7..e47f219ac 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -20,9 +20,9 @@\n \n class Addons(object):\n     """Performs install/upgrade/uninstall functions on an addon.\n-       Pulled, mostly intact, from Plone 5.1\'s products control panel.\n-       If we reach the point when plone.restapi isn\'t supporting releases\n-       prior to 5.1, we might be able to remove this as duplicate code.\n+    Pulled, mostly intact, from Plone 5.1\'s products control panel.\n+    If we reach the point when plone.restapi isn\'t supporting releases\n+    prior to 5.1, we might be able to remove this as duplicate code.\n     """\n \n     def __init__(self, context, request):\n@@ -68,7 +68,13 @@ def _install_profile_info(self, product_id):\n             prof\n             for prof in profiles\n             if prof["type"] == EXTENSION\n-            and (prof["product"] in (product_id, "Products.{0}".format(product_id),))\n+            and (\n+                prof["product"]\n+                in (\n+                    product_id,\n+                    "Products.{0}".format(product_id),\n+                )\n+            )\n         ]\n         return profiles\n \ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex 2f0bae47d..260d37df9 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -12,8 +12,7 @@\n \n \n class Login(Service):\n-    """Handles login and returns a JSON web token (JWT).\n-    """\n+    """Handles login and returns a JSON web token (JWT)."""\n \n     def reply(self):\n         data = json_body(self.request)\n@@ -73,7 +72,7 @@ def reply(self):\n \n     def _find_userfolder(self, userid):\n         """Try to find a user folder that contains a user with the given\n-           userid.\n+        userid.\n         """\n         uf_parent = aq_inner(self.context)\n         info = None\ndiff --git a/src/plone/restapi/services/auth/logout.py b/src/plone/restapi/services/auth/logout.py\nindex f24ab14bf..feacecb82 100644\n--- a/src/plone/restapi/services/auth/logout.py\n+++ b/src/plone/restapi/services/auth/logout.py\n@@ -5,8 +5,7 @@\n \n \n class Logout(Service):\n-    """Handles logout by invalidating the JWT\n-    """\n+    """Handles logout by invalidating the JWT"""\n \n     def reply(self):\n         plugin = None\ndiff --git a/src/plone/restapi/services/auth/renew.py b/src/plone/restapi/services/auth/renew.py\nindex 013622449..464c51968 100644\n--- a/src/plone/restapi/services/auth/renew.py\n+++ b/src/plone/restapi/services/auth/renew.py\n@@ -10,8 +10,7 @@\n \n \n class Renew(Service):\n-    """Renew authentication token\n-    """\n+    """Renew authentication token"""\n \n     def reply(self):\n         plugin = None\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex cdf691509..a2a9718fd 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -31,8 +31,7 @@\n \n \n class FolderPost(Service):\n-    """Creates a new content object.\n-    """\n+    """Creates a new content object."""\n \n     def reply(self):\n         data = json_body(self.request)\ndiff --git a/src/plone/restapi/services/content/delete.py b/src/plone/restapi/services/content/delete.py\nindex 8d4f59d70..e9820dd18 100644\n--- a/src/plone/restapi/services/content/delete.py\n+++ b/src/plone/restapi/services/content/delete.py\n@@ -5,8 +5,7 @@\n \n \n class ContentDelete(Service):\n-    """Deletes a content object.\n-    """\n+    """Deletes a content object."""\n \n     def reply(self):\n \ndiff --git a/src/plone/restapi/services/content/get.py b/src/plone/restapi/services/content/get.py\nindex e8ce4354a..ecc311b4b 100644\n--- a/src/plone/restapi/services/content/get.py\n+++ b/src/plone/restapi/services/content/get.py\n@@ -5,8 +5,7 @@\n \n \n class ContentGet(Service):\n-    """Returns a serialized content object.\n-    """\n+    """Returns a serialized content object."""\n \n     def reply(self):\n         serializer = queryMultiAdapter((self.context, self.request), ISerializeToJson)\ndiff --git a/src/plone/restapi/services/content/sharing.py b/src/plone/restapi/services/content/sharing.py\nindex f432ea0a5..382986b99 100644\n--- a/src/plone/restapi/services/content/sharing.py\n+++ b/src/plone/restapi/services/content/sharing.py\n@@ -11,8 +11,7 @@\n \n \n class SharingGet(Service):\n-    """Returns a serialized content object.\n-    """\n+    """Returns a serialized content object."""\n \n     def reply(self):\n         # return 403 Forbidden if the user has no DelegateRoles permission\ndiff --git a/src/plone/restapi/services/content/update.py b/src/plone/restapi/services/content/update.py\nindex a37e28e69..00a445222 100644\n--- a/src/plone/restapi/services/content/update.py\n+++ b/src/plone/restapi/services/content/update.py\n@@ -8,8 +8,7 @@\n \n \n class ContentPatch(Service):\n-    """Updates an existing content object.\n-    """\n+    """Updates an existing content object."""\n \n     def reply(self):\n \ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex 05e9374f7..b3731693b 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -13,8 +13,7 @@\n \n \n class BaseCopyMove(Service):\n-    """Base service for copy/move operations.\n-    """\n+    """Base service for copy/move operations."""\n \n     def __init__(self, context, request):\n         super(BaseCopyMove, self).__init__(context, request)\n@@ -108,8 +107,7 @@ def clipboard(self, parent, ids):\n \n \n class Copy(BaseCopyMove):\n-    """Copies existing content objects.\n-    """\n+    """Copies existing content objects."""\n \n     is_moving = False\n \n@@ -118,8 +116,7 @@ def clipboard(self, parent, ids):\n \n \n class Move(BaseCopyMove):\n-    """Moves existing content objects.\n-    """\n+    """Moves existing content objects."""\n \n     is_moving = True\n \ndiff --git a/src/plone/restapi/services/discussion/utils.py b/src/plone/restapi/services/discussion/utils.py\nindex 2375c43f4..43519adbd 100644\n--- a/src/plone/restapi/services/discussion/utils.py\n+++ b/src/plone/restapi/services/discussion/utils.py\n@@ -30,8 +30,7 @@ def permission_exists(permission_id):\n \n \n def can_review(comment):\n-    """Returns true if current user has the \'Review comments\' permission.\n-    """\n+    """Returns true if current user has the \'Review comments\' permission."""\n     return bool(\n         getSecurityManager().checkPermission("Review comments", aq_inner(comment))\n     )\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex 825fa4982..958a39e2f 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -12,8 +12,7 @@\n \n \n class GroupsPost(Service):\n-    """Creates a new group.\n-    """\n+    """Creates a new group."""\n \n     def reply(self):\n         portal = getSite()\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex aa4365ee6..528240468 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -9,8 +9,7 @@\n \n @implementer(IPublishTraverse)\n class GroupsDelete(Service):\n-    """Deletes a user.\n-    """\n+    """Deletes a user."""\n \n     def __init__(self, context, request):\n         super(GroupsDelete, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex b8a713c63..8892505c4 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -13,8 +13,7 @@\n \n @implementer(IPublishTraverse)\n class GroupsPatch(Service):\n-    """Updates an existing group.\n-    """\n+    """Updates an existing group."""\n \n     def __init__(self, context, request):\n         super(GroupsPatch, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/locking/locking.py b/src/plone/restapi/services/locking/locking.py\nindex 981d7447c..81a7acbfd 100644\n--- a/src/plone/restapi/services/locking/locking.py\n+++ b/src/plone/restapi/services/locking/locking.py\n@@ -113,7 +113,7 @@ def webdav_lock(obj):\n \n def is_locked(obj, request):\n     """Returns true if the object is locked and the request doesn\'t contain\n-       the lock token.\n+    the lock token.\n     """\n     lockable = ILockable(obj, None)\n     if lockable is None:\ndiff --git a/src/plone/restapi/services/multilingual/locator.py b/src/plone/restapi/services/multilingual/locator.py\nindex 76f6c1ac5..72753a173 100644\n--- a/src/plone/restapi/services/multilingual/locator.py\n+++ b/src/plone/restapi/services/multilingual/locator.py\n@@ -4,8 +4,7 @@\n \n \n class TranslationLocator(Service):\n-    """ Get translation locator placements information\n-    """\n+    """Get translation locator placements information"""\n \n     def reply(self):\n         target_language = self.request.form["target_language"]\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 8bd78ab87..57cb784e9 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -45,8 +45,7 @@ def __call__(self, expand=False):\n \n \n class TranslationInfo(Service):\n-    """ Get translation information\n-    """\n+    """Get translation information"""\n \n     def reply(self):\n         translations = Translations(self.context, self.request)\n@@ -54,8 +53,7 @@ def reply(self):\n \n \n class LinkTranslations(Service):\n-    """ Link two content objects as translations of each other\n-    """\n+    """Link two content objects as translations of each other"""\n \n     def __init__(self, context, request):\n         super(LinkTranslations, self).__init__(context, request)\n@@ -123,8 +121,7 @@ def get_object(self, key):\n \n \n class UnlinkTranslations(Service):\n-    """ Unlink the translations for a content object\n-    """\n+    """Unlink the translations for a content object"""\n \n     def reply(self):\n         # Disable CSRF protection\ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex e3fbeddac..753353d7c 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -13,8 +13,7 @@\n \n \n class NavigationTreeQueryBuilder(NavtreeQueryBuilder):\n-    """Build a folder tree query\n-    """\n+    """Build a folder tree query"""\n \n     def __init__(self, context, depth):\n         NavtreeQueryBuilder.__init__(self, context)\n@@ -26,8 +25,7 @@ def __init__(self, context, depth):\n \n \n class CustomNavtreeStrategy(SitemapNavtreeStrategy):\n-    """The navtree strategy used for the default navigation portlet\n-    """\n+    """The navtree strategy used for the default navigation portlet"""\n \n     def __init__(self, context):\n         SitemapNavtreeStrategy.__init__(self, context, None)\ndiff --git a/src/plone/restapi/services/querystringsearch/get.py b/src/plone/restapi/services/querystringsearch/get.py\nindex e687b7b1b..9d620adff 100644\n--- a/src/plone/restapi/services/querystringsearch/get.py\n+++ b/src/plone/restapi/services/querystringsearch/get.py\n@@ -15,8 +15,7 @@\n \n \n class QuerystringSearchPost(Service):\n-    """Returns the querystring search results given a p.a.querystring data.\n-    """\n+    """Returns the querystring search results given a p.a.querystring data."""\n \n     def reply(self):\n         data = json_body(self.request)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 9c213ffb4..82c9093a9 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -39,8 +39,7 @@\n \n @implementer(IPublishTraverse)\n class UsersPost(Service):\n-    """Creates a new user.\n-    """\n+    """Creates a new user."""\n \n     def __init__(self, context, request):\n         super(UsersPost, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex fca9be19b..fad9171c6 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -8,8 +8,7 @@\n \n @implementer(IPublishTraverse)\n class UsersDelete(Service):\n-    """Deletes a user.\n-    """\n+    """Deletes a user."""\n \n     def __init__(self, context, request):\n         super(UsersDelete, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 8958a4685..c637271b7 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -28,8 +28,7 @@\n \n @implementer(IPublishTraverse)\n class UsersPatch(Service):\n-    """Updates an existing user.\n-    """\n+    """Updates an existing user."""\n \n     def __init__(self, context, request):\n         super(UsersPatch, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex be6b3305a..b729eb4d0 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -75,8 +75,7 @@ def __call__(self, expand=False):\n \n \n class WorkflowInfoService(Service):\n-    """Get workflow information\n-    """\n+    """Get workflow information"""\n \n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 6f17989f3..a830a63d6 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -22,8 +22,7 @@\n \n @implementer(IPublishTraverse)\n class WorkflowTransition(Service):\n-    """Trigger workflow transition\n-    """\n+    """Trigger workflow transition"""\n \n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex 850c6cea7..d25b3669d 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -46,8 +46,7 @@ def install_pas_plugin(context):\n \n \n def import_various(context):\n-    """Miscellanous steps import handle\n-    """\n+    """Miscellanous steps import handle"""\n     if context.readDataFile("plone.restapi_various.txt") is None:\n         return\n \ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex ae976a3ed..2016cd0ec 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -86,8 +86,7 @@ def set_available_languages():\n \n \n def set_supported_languages(portal):\n-    """Set supported languages to the same predictable set for all test layers.\n-    """\n+    """Set supported languages to the same predictable set for all test layers."""\n     language_tool = getToolByName(portal, "portal_languages")\n     for lang in ENABLED_LANGUAGES:\n         language_tool.addSupportedLanguage(lang)\ndiff --git a/src/plone/restapi/tests/languages.py b/src/plone/restapi/tests/languages.py\nindex 3eea79c5d..686942199 100644\n--- a/src/plone/restapi/tests/languages.py\n+++ b/src/plone/restapi/tests/languages.py\n@@ -21,8 +21,7 @@ class ModifiableLanguages(object):\n     """\n \n     def getLanguages(self, combined=False):\n-        """Return a sequence of Language objects for available languages.\n-        """\n+        """Return a sequence of Language objects for available languages."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\n@@ -33,8 +32,7 @@ def getLanguages(self, combined=False):\n         return languages\n \n     def getLanguageListing(self, combined=False):\n-        """Return a sequence of language code and language name tuples.\n-        """\n+        """Return a sequence of language code and language name tuples."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\ndiff --git a/src/plone/restapi/tests/statictime.py b/src/plone/restapi/tests/statictime.py\nindex 2545793a3..9f4e140cc 100644\n--- a/src/plone/restapi/tests/statictime.py\n+++ b/src/plone/restapi/tests/statictime.py\n@@ -92,8 +92,7 @@ def __init__(\n         """\n \n     def start(self):\n-        """Patch the respective getters so that they return static times.\n-        """\n+        """Patch the respective getters so that they return static times."""\n         # Patch created and modified times for DexterityContent.\n         # creation_date and modification_date are instance-level attributes\n         # on DX object that get initialized with datetime.now() during\n@@ -128,8 +127,7 @@ def start(self):\n         TTWLockable.lock_info = static_lock_info_factory(self.static_modified)\n \n     def stop(self):\n-        """Undo all the patches.\n-        """\n+        """Undo all the patches."""\n         TTWLockable.lock_info = _originals["TTWLockable.lock_info"]\n         ContentHistoryViewlet.fullHistory = _originals[\n             "ContentHistoryViewlet.fullHistory"\ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 6eee18046..d336e0c94 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -96,8 +96,8 @@ def test_serializer_includes_collection_items(self):\n         )\n \n     def test_serializer_includes_collection_fullobjects(self):\n-        """ when using the fullobjects parameter, the collection needs to\n-            serialize its contents with the standard object serializer"""\n+        """when using the fullobjects parameter, the collection needs to\n+        serialize its contents with the standard object serializer"""\n         folder = self.portal[\n             self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n         ]\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex 16f46af0a..4c3b0b660 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -33,7 +33,8 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.portal.invokeFactory(\n-            "Document", id=u"doc1",\n+            "Document",\n+            id=u"doc1",\n         )\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image-1", title="Target image")\n@@ -66,7 +67,8 @@ def __call__(self, value):\n                 return value\n \n         provideSubscriptionAdapter(\n-            TestAdapter, (IDexterityItem, IBrowserRequest),\n+            TestAdapter,\n+            (IDexterityItem, IBrowserRequest),\n         )\n \n         self.deserialize(blocks={"123": {"@type": "test", "value": u"text"}})\n@@ -110,11 +112,13 @@ def __call__(self, value):\n                 return value\n \n         provideSubscriptionAdapter(\n-            TestAdapterB, (IDexterityItem, IBrowserRequest),\n+            TestAdapterB,\n+            (IDexterityItem, IBrowserRequest),\n         )\n \n         provideSubscriptionAdapter(\n-            TestAdapterA, (IDexterityItem, IBrowserRequest),\n+            TestAdapterA,\n+            (IDexterityItem, IBrowserRequest),\n         )\n \n         self.deserialize(blocks={"123": {"@type": "test_multi", "value": u"a"}})\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 44a930e67..ffaaa3fb3 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -125,7 +125,8 @@ def test_comment_with_no_author_image(self):\n \n         serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n         self.assertEqual(\n-            None, serializer().get("author_image"),\n+            None,\n+            serializer().get("author_image"),\n         )\n \n     def test_comment_with_mimetype_text_plain(self):\n@@ -140,7 +141,8 @@ def test_comment_with_mimetype_text_plain(self):\n \n         # serializer should return HTML with a clickable link\n         self.assertEqual(\n-            "Hey, I am plain text!", serializer()["text"]["data"],\n+            "Hey, I am plain text!",\n+            serializer()["text"]["data"],\n         )\n         # serializer should return mimetype = text/x-web-intelligent\n         self.assertEqual("text/plain", serializer()["text"]["mime-type"])\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex 181397994..ab4a3e261 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -69,8 +69,7 @@ def test_sharing_search(self):\n         self.assertNotEqual(len(non_search_entries), len(search_entries))\n \n     def test_sharing_search_roundtrip(self):\n-        """Search for a user and use save roles\n-        """\n+        """Search for a user and use save roles"""\n         # Make sure we don\'t already have admin\n         response = requests.get(\n             self.portal.folder1.absolute_url() + "/@sharing",\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 6b169c330..6e1a2bdf3 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -32,8 +32,7 @@\n \n \n class AdapterCM(object):\n-    """Context manager that will temporarily register an adapter\n-    """\n+    """Context manager that will temporarily register an adapter"""\n \n     def __init__(self, adapter, from_, provides):\n         self.adapter = adapter\n@@ -411,13 +410,13 @@ def test_nextprev_unordered_folder(self):\n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n \n-           We define a ITransformer, which returns the contexts portal_type.\n-           This is then verfied.\n+        We define a ITransformer, which returns the contexts portal_type.\n+        This is then verfied.\n         """\n \n         class RichtextTransform(object):\n             """RichttextValue to show that the context is correctly passed\n-               in throughout the stack.\n+            in throughout the stack.\n             """\n \n             def __init__(self, context):\n@@ -592,7 +591,9 @@ def setUp(self):\n         )\n \n         self.portal.invokeFactory(\n-            "DXTestDocument", id=u"doc2", test_primary_namedfile_field=None,\n+            "DXTestDocument",\n+            id=u"doc2",\n+            test_primary_namedfile_field=None,\n         )\n \n         self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 46ee9d9b7..424c22a5b 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -22,8 +22,7 @@\n \n \n class RequiredField(object):\n-    """Context manager that will make a field required and back to old state.\n-    """\n+    """Context manager that will make a field required and back to old state."""\n \n     def __init__(self, field):\n         self.field = field\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 8777becca..d23a980ea 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -153,7 +153,8 @@ def test_list_field_with_vocabulary_choice_serialization_no_valid_term(self):\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n-            [{u"token": u"token3", u"title": u"title3"}], value,\n+            [{u"token": u"token3", u"title": u"title3"}],\n+            value,\n         )\n \n     def test_set_field_serialization_returns_list(self):\n@@ -347,8 +348,8 @@ def serialize(self, fieldname, value):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in JPEG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in JPEG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -417,8 +418,8 @@ def test_namedimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -444,8 +445,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in JPEG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in JPEG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -514,8 +515,8 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -570,8 +571,8 @@ def serialize(self, fieldname, value):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone == 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in PNG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in PNG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -640,8 +641,8 @@ def test_namedimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -667,8 +668,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone = 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in PNG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in PNG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -737,8 +738,8 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -793,8 +794,8 @@ def serialize(self, fieldname, value):\n \n     def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n         """In Plone >= 5.2 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           the actual original image in its original format """\n+        scale with the same width and height of the original image is\n+        the actual original image in its original format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -863,8 +864,8 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n             )\n \n     def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ In Plone >= 5.2 the original image file is not a "scale", so its url\n-            is returned as is and we need to check it, but the scales should be empty"""\n+        """In Plone >= 5.2 the original image file is not a "scale", so its url\n+        is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -894,8 +895,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n \n     def test_namedblobimage_field_serialization_returns_dict_with_original_scale(self):\n         """In Plone >= 5.2 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           the actual original image in its original format"""\n+        scale with the same width and height of the original image is\n+        the actual original image in its original format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -964,8 +965,8 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n             )\n \n     def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ In Plone >= 5.2 the original image file is not a "scale", so its url\n-            is returned as is and we need to check it, but the scales should be empty"""\n+        """In Plone >= 5.2 the original image file is not a "scale", so its url\n+        is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex c37dfbae2..40b37fe80 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -247,7 +247,7 @@ def test_add_anon_user_sends_properties_are_saved(self):\n \n     def test_add_anon_no_roles(self):\n         """Make sure anonymous users cannot set their own roles.\n-           Allowing so would make them Manager.\n+        Allowing so would make them Manager.\n         """\n         security_settings = getAdapter(self.portal, ISecuritySchema)\n         security_settings.enable_self_reg = True\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex 886aa1d3d..f3037996a 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -25,8 +25,8 @@ def setUp(self):\n         self.portal = self.layer["portal"]\n \n     def test_product_is_installed(self):\n-        """ Validate that our products GS profile has been run and the product\n-            installed\n+        """Validate that our products GS profile has been run and the product\n+        installed\n         """\n         if HAS_INSTALLER:\n             qi = get_installer(self.portal)\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex eaadd936c..e745112a4 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -90,8 +90,7 @@ def test_get_jsonschema_for_fti(self):\n         self.assertNotIn("title", list(jsonschema["properties"]))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n-        """Make sure FTIs without lookupSchema are supported.\n-        """\n+        """Make sure FTIs without lookupSchema are supported."""\n         fti = self.portal.portal_types["Discussion Item"]\n         self.assertFalse(hasattr(fti, "lookupSchema"))\n \ndiff --git a/src/plone/restapi/tests/test_upgrade_ordering.py b/src/plone/restapi/tests/test_upgrade_ordering.py\nindex 49f9772f0..736221acc 100644\n--- a/src/plone/restapi/tests/test_upgrade_ordering.py\n+++ b/src/plone/restapi/tests/test_upgrade_ordering.py\n@@ -36,7 +36,12 @@ def test_upgrade_ensure_child_ordering_object_ids_are_native_strings(self):\n         ensure_child_ordering_object_ids_are_native_strings(self.folder)\n \n         self.assertEqual(\n-            ["doc2", "doc3", "doc1",], self.folder.objectIds(),  # noqa\n+            [\n+                "doc2",\n+                "doc3",\n+                "doc1",\n+            ],\n+            self.folder.objectIds(),  # noqa\n         )\n \n         # upgrade helper should ensure bytestring ids in python2 and do nothing\n@@ -61,7 +66,12 @@ def test_upgrade_view(self):\n         view()\n \n         self.assertEqual(\n-            ["doc2", "doc3", "doc1",], self.folder.objectIds(),  # noqa\n+            [\n+                "doc2",\n+                "doc3",\n+                "doc1",\n+            ],\n+            self.folder.objectIds(),  # noqa\n         )\n \n         # upgrade helper should ensure bytestring ids in python2 and do nothing\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex cc0595b34..017a377b2 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -58,8 +58,7 @@ def iter_fields(fieldsets):\n \n \n def get_form_fieldsets(form):\n-    """ Get fieldsets from form\n-    """\n+    """Get fieldsets from form"""\n     fieldsets = []\n     form_fields = getattr(form, "fields", {})\n     fields_values = list(form_fields.values())\n@@ -161,8 +160,7 @@ def get_widget_params(schemas):\n \n \n def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n-    """Build a complete JSON schema for the given FTI.\n-    """\n+    """Build a complete JSON schema for the given FTI."""\n     if excluded_fields is None:\n         excluded_fields = []\n \n@@ -205,8 +203,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n \n \n def get_jsonschema_for_portal_type(portal_type, context, request, excluded_fields=None):\n-    """Build a complete JSON schema for the given portal_type.\n-    """\n+    """Build a complete JSON schema for the given portal_type."""\n     ttool = getToolByName(context, "portal_types")\n     fti = ttool[portal_type]\n     return get_jsonschema_for_fti(\ndiff --git a/src/plone/restapi/upgrades/to0002.py b/src/plone/restapi/upgrades/to0002.py\nindex 0231f2fce..fd99981e6 100644\n--- a/src/plone/restapi/upgrades/to0002.py\n+++ b/src/plone/restapi/upgrades/to0002.py\n@@ -2,8 +2,7 @@\n \n \n def assign_use_api_permission(setup_context):\n-    """Assign the \'plone.restapi: Use REST API\' permission to Anonymous.\n-    """\n+    """Assign the \'plone.restapi: Use REST API\' permission to Anonymous."""\n     setup_context.runImportStepFromProfile(\n         "profile-plone.restapi.upgrades:0002",\n         "rolemap",\ndiff --git a/src/plone/restapi/upgrades/to0003.py b/src/plone/restapi/upgrades/to0003.py\nindex 132f97554..117dde47f 100644\n--- a/src/plone/restapi/upgrades/to0003.py\n+++ b/src/plone/restapi/upgrades/to0003.py\n@@ -4,7 +4,6 @@\n \n \n def install_pas_plugin_in_zope_root(setup_context):\n-    """Install PAS plugin in Zope root\n-    """\n+    """Install PAS plugin in Zope root"""\n     portal = getToolByName(setup_context, "portal_url").getPortalObject()\n     install_pas_plugin(portal)\ndiff --git a/src/plone/restapi/upgrades/to0004.py b/src/plone/restapi/upgrades/to0004.py\nindex 6fac3ce7f..576520e36 100644\n--- a/src/plone/restapi/upgrades/to0004.py\n+++ b/src/plone/restapi/upgrades/to0004.py\n@@ -3,7 +3,7 @@\n \n def assign_get_users_permission(setup_context):\n     """Assign the \'plone.restapi: Access Plone user information\' permission\n-       to Managers by default.\n+    to Managers by default.\n     """\n     setup_context.runImportStepFromProfile(\n         "profile-plone.restapi.upgrades:0004",\ndiff --git a/src/plone/restapi/upgrades/to0005.py b/src/plone/restapi/upgrades/to0005.py\nindex 32ad4f302..d3c639378 100644\n--- a/src/plone/restapi/upgrades/to0005.py\n+++ b/src/plone/restapi/upgrades/to0005.py\n@@ -13,8 +13,7 @@\n \n \n def rename_tiles_to_blocks(setup_context):\n-    """Rename tiles and tiles_layout fields from Tiles behavior to blocks and blocks_layout\n-    """\n+    """Rename tiles and tiles_layout fields from Tiles behavior to blocks and blocks_layout"""\n     pt = api.portal.get_tool("portal_types")\n \n     types_with_tiles_behavior = []\ndiff --git a/src/plone/restapi/upgrades/to0006.py b/src/plone/restapi/upgrades/to0006.py\nindex 80aea10e9..cd3752449 100644\n--- a/src/plone/restapi/upgrades/to0006.py\n+++ b/src/plone/restapi/upgrades/to0006.py\n@@ -12,8 +12,7 @@\n \n \n def rename_iface_to_name_in_blocks_behavior(setup_context):\n-    """Rename iface name to the short name in blocks\n-    """\n+    """Rename iface name to the short name in blocks"""\n     pt = api.portal.get_tool("portal_types")\n \n     for _type in pt.objectIds():\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-09-04T18:17:36+03:00
Author: Alin Voinea (avoinea) <contact@avoinea.com>
Commit: https://github.com/plone/plone.restapi/commit/6c64afadb1b49f9bc161c385e032be13d22bc2f1

Merge remote-tracking branch 'origin/master' into eea-plone4-cpanels

Files changed:
A news/975.bugfix
A performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-anonymous-read-namedfile-5.3.1.png
A performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-read-namedfile-5.3.1.png
A performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.2.1.png
A performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.0.png
A performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.1.png
A performance/volto-page-with-images-p.namedfile-5.2.1.png
A performance/volto-page-with-images-p.namedfile-5.3.1.png
A performance/volto-page-with-news-items-p.namedfile-5.2.1.png
A performance/volto-page-with-news-items-p.namedfile-5.3.1.png
A src/plone/restapi/services/types/add.py
A src/plone/restapi/services/types/delete.py
A src/plone/restapi/services/types/put.py
A src/plone/restapi/services/types/update.py
A src/plone/restapi/tests/http-examples/types_document_delete_field.req
A src/plone/restapi/tests/http-examples/types_document_delete_field.resp
A src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req
A src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp
A src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.req
A src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.resp
A src/plone/restapi/tests/http-examples/types_document_get_field.req
A src/plone/restapi/tests/http-examples/types_document_get_field.resp
A src/plone/restapi/tests/http-examples/types_document_get_fieldset.req
A src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp
A src/plone/restapi/tests/http-examples/types_document_patch.req
A src/plone/restapi/tests/http-examples/types_document_patch.resp
A src/plone/restapi/tests/http-examples/types_document_patch_field.req
A src/plone/restapi/tests/http-examples/types_document_patch_field.resp
A src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req
A src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp
A src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req
A src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp
A src/plone/restapi/tests/http-examples/types_document_patch_properites.req
A src/plone/restapi/tests/http-examples/types_document_patch_properites.resp
A src/plone/restapi/tests/http-examples/types_document_post_field.req
A src/plone/restapi/tests/http-examples/types_document_post_field.resp
A src/plone/restapi/tests/http-examples/types_document_post_fieldset.req
A src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp
A src/plone/restapi/tests/http-examples/types_document_put.req
A src/plone/restapi/tests/http-examples/types_document_put.resp
A src/plone/restapi/tests/http-examples/vocabularies_get_fields.req
A src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp
M CHANGES.rst
M docs/source/addons.rst
M docs/source/controlpanels.rst
M docs/source/types.rst
M plone-4.3.x.cfg
M plone-5.0.x.cfg
M plone-5.1.x.cfg
M plone-5.2.x.cfg
M setup.py
M src/plone/restapi/services/types/configure.zcml
M src/plone/restapi/services/types/get.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp
M src/plone/restapi/tests/http-examples/controlpanels_get_item.resp
M src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req
M src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp
M src/plone/restapi/tests/http-examples/registry_get_list.resp
M src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp
M src/plone/restapi/tests/http-examples/types_document.resp
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_serializer_summary.py
M src/plone/restapi/tests/test_services_types.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/types/adapters.py
M src/plone/restapi/types/utils.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 60b4fe53c..89fc330dd 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -13,12 +13,11 @@ Changelog\n \n New features:\n \n-\n-- Improved blocks transformers: now we can handle generic transformers \n+- Improved blocks transformers: now we can handle generic transformers\n   [cekk]\n-- Add generic block transformer for handle resolveuid in all blocks that have a *url* or *href* field \n+- Add generic block transformer for handle resolveuid in all blocks that have a *url* or *href* field\n   [cekk]\n-- Add "smart fields" concept: if block has a *searchableText* field, this will be indexed in Plone \n+- Add "smart fields" concept: if block has a *searchableText* field, this will be indexed in Plone\n   [cekk, tiberiuichim] (#952)\n \n \n@@ -74,6 +73,13 @@ New features:\n   serialization.\n   [buchi,timo,cekk] (#808)\n \n+6.14.0 (2020-08-28)\n+-------------------\n+\n+New features:\n+\n+- Add @types endpoint to be able to add/edit/delete CT schema [Petchesi-Iulian, avoinea] (#951)\n+\n \n 6.13.8 (2020-08-20)\n -------------------\ndiff --git a/docs/source/addons.rst b/docs/source/addons.rst\nindex 25157f2d5..37e4024f4 100644\n--- a/docs/source/addons.rst\n+++ b/docs/source/addons.rst\n@@ -60,7 +60,7 @@ An individual addon can be installed by issuing a ``POST`` to the given URL:\n \n \n Uninstalling an addon\n--------------------\n+---------------------\n \n An individual addon can be uninstalled by issuing a ``POST`` to the given URL:\n \ndiff --git a/docs/source/controlpanels.rst b/docs/source/controlpanels.rst\nindex cc6a51559..aa39fda97 100644\n--- a/docs/source/controlpanels.rst\n+++ b/docs/source/controlpanels.rst\n@@ -82,6 +82,8 @@ Control Panels not based on plone.registry\n \n Control panel which are not based on plone.registry have a custom ``@controlpanels/:panel`` endpoint implementation.\n \n+.. _dexterity-types:\n+\n Dexterity Types\n ^^^^^^^^^^^^^^^\n \ndiff --git a/docs/source/types.rst b/docs/source/types.rst\nindex ff9c3e9e8..8451dc69a 100644\n--- a/docs/source/types.rst\n+++ b/docs/source/types.rst\n@@ -16,8 +16,72 @@ Available content types in a Plone site can be listed and queried by accessing t\n    :language: http\n \n \n+The API consumer can create, read, update, and delete a content-types schema.\n+\n+======= =============================================== =====================================================================\n+Verb    URL                                             Action\n+======= =============================================== =====================================================================\n+POST    ``/@types/{type}``                              Add field/fieldset to content type schema\n+GET     ``/@types/{type}``                              Get the schema of a content type\n+PATCH   ``/@types/{type}``                              Update existing schema fields/fieldsets properties\n+PUT     ``/@types/{type}``                              Replace content-type schema\n+======= =============================================== =====================================================================\n+\n+In addition to the above methods we can also do:\n+\n+======= =============================================== =====================================================================\n+Verb    URL                                             Action\n+======= =============================================== =====================================================================\n+GET     ``/@type/{type}/{field/fieldset}``              Get field/fieldset properties\n+PATCH   ``/@type/{type}/{field/fieldset}``              Update field/fieldset properties\n+DELETE  ``/@type/{type}/{field/fieldset}``              Remove field/fieldset from schema\n+======= =============================================== =====================================================================\n \n-To get the schema of a content type, access the ``/@types`` endpoint  with the name of the content type, e.g. \'/plone/@types/Document\':\n+.. note::\n+\n+  Schema fields/fieldsets defined by `behaviors <https://docs.plone.org/external/plone.app.dexterity/docs/behaviors/index.html>`_\n+  are immutable and can NOT be changed via this RestAPI endpoint. See :ref:`dexterity-types` controlpanel RestAPI endpoint\n+  for enabling/disabling behaviors.\n+\n+\n+Add schema fieldset/field with POST\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+To create a new **fieldset**, send a POST request to the ``/@types/Document`` endpoint.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp\n+   :language: http\n+\n+\n+To create a new **field**, send a POST request to the ``/@types/Document`` endpoint.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_post_field.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_post_field.resp\n+   :language: http\n+\n+For a complete list of available field **@types** you can access **/@vocabularies/Fields** endpoint.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp\n+   :language: http\n+\n+Get the schema with GET\n+~~~~~~~~~~~~~~~~~~~~~~~\n+\n+To get the schema of a content type, access the ``/@types`` endpoint  with the name of the content type, e.g. ``plone/@types/Document``:\n \n ..  http:example:: curl httpie python-requests\n     :request: ../../src/plone/restapi/tests/http-examples/types_document.req\n@@ -39,3 +103,102 @@ For ``Choice`` fields, their vocabulary or source will be linked to in a ``vocab\n See :ref:`vocabularies` for details on these endpoints.\n \n See :ref:`types-schema` for a detailed documentation about the available field types.\n+\n+To get one schema **fieldset** properties, access ``@types/Document/{fieldset}`` endpoint:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp\n+   :language: http\n+\n+To get one schema **field** properties, access ``@types/Document/{field}`` endpoint:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_get_field.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_get_field.resp\n+   :language: http\n+\n+\n+Update schema with PATCH\n+~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+To update content type schema defaults we send a PATCH request to the server.\n+PATCH allows to provide just a subset of the resource (the values you actually want to change).\n+\n+To update one or more schema **field** properties:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_properites.resp\n+   :language: http\n+\n+To change one or more **fieldsets** properties:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp\n+   :language: http\n+\n+\n+To update one **fieldset** settings, we can also send a PATCH request to ``@types/Document/{fieldset}`` endpoint:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp\n+   :language: http\n+\n+To update one **field** settings, we can also send a PATCH request to ``@types/Document/{field}`` endpoint:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_patch_field.resp\n+   :language: http\n+\n+Update schema with PUT\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+Use PUT when more changes are needed in one call, like create new fields/fieldsets, move fields to fieldset, remove multiple fields, etc.\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_put.req\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_put.resp\n+   :language: http\n+\n+Removing schema field/fieldset with DELETE\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Delete an existing schema **field** by sending a DELETE request to the URL of an existing schema field:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_delete_field.resp\n+   :language: http\n+\n+\n+Delete an existing schema **fieldset** by sending a DELETE request to the URL of an existing schema fieldset:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req\n+\n+Response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp\n+   :language: http\ndiff --git a/news/975.bugfix b/news/975.bugfix\nnew file mode 100644\nindex 000000000..14319d376\n--- /dev/null\n+++ b/news/975.bugfix\n@@ -0,0 +1,3 @@\n+Fixed deprecation warnings for ``zope.site.hooks``, ``CMFPlone.interfaces.ILanguageSchema``\n+and ``plone.dexterity.utils.splitSchemaName``.\n+[maurits]\ndiff --git a/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-anonymous-read-namedfile-5.3.1.png b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-anonymous-read-namedfile-5.3.1.png\nnew file mode 100644\nindex 000000000..21cacd810\nBinary files /dev/null and b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-anonymous-read-namedfile-5.3.1.png differ\ndiff --git a/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-read-namedfile-5.3.1.png b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-read-namedfile-5.3.1.png\nnew file mode 100644\nindex 000000000..ed475dc9f\nBinary files /dev/null and b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-read-namedfile-5.3.1.png differ\ndiff --git a/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.2.1.png b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.2.1.png\nnew file mode 100644\nindex 000000000..28bbc9328\nBinary files /dev/null and b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.2.1.png differ\ndiff --git a/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.0.png b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.0.png\nnew file mode 100644\nindex 000000000..f60dc18d8\nBinary files /dev/null and b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.0.png differ\ndiff --git a/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.1.png b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.1.png\nnew file mode 100644\nindex 000000000..d5b1302b8\nBinary files /dev/null and b/performance/plone-5.2.1-py3-imac-pro-20200404/jmeter-authenticated-write-namedfile-5.3.1.png differ\ndiff --git a/performance/volto-page-with-images-p.namedfile-5.2.1.png b/performance/volto-page-with-images-p.namedfile-5.2.1.png\nnew file mode 100644\nindex 000000000..a6d2c33d1\nBinary files /dev/null and b/performance/volto-page-with-images-p.namedfile-5.2.1.png differ\ndiff --git a/performance/volto-page-with-images-p.namedfile-5.3.1.png b/performance/volto-page-with-images-p.namedfile-5.3.1.png\nnew file mode 100644\nindex 000000000..7017223c2\nBinary files /dev/null and b/performance/volto-page-with-images-p.namedfile-5.3.1.png differ\ndiff --git a/performance/volto-page-with-news-items-p.namedfile-5.2.1.png b/performance/volto-page-with-news-items-p.namedfile-5.2.1.png\nnew file mode 100644\nindex 000000000..a044f17ec\nBinary files /dev/null and b/performance/volto-page-with-news-items-p.namedfile-5.2.1.png differ\ndiff --git a/performance/volto-page-with-news-items-p.namedfile-5.3.1.png b/performance/volto-page-with-news-items-p.namedfile-5.3.1.png\nnew file mode 100644\nindex 000000000..970b8af0c\nBinary files /dev/null and b/performance/volto-page-with-news-items-p.namedfile-5.3.1.png differ\ndiff --git a/plone-4.3.x.cfg b/plone-4.3.x.cfg\nindex 1f704eecc..3298939e9 100644\n--- a/plone-4.3.x.cfg\n+++ b/plone-4.3.x.cfg\n@@ -6,6 +6,7 @@ extends =\n \n [versions]\n plone.restapi =\n+plone.schema = 1.2.1\n pytz = 2017.3\n zope.interface = 4.1.0\n # fixes zlib failure: https://stackoverflow.com/questions/34631806/fail-during-installation-of-pillow-python-module-in-linux\ndiff --git a/plone-5.0.x.cfg b/plone-5.0.x.cfg\nindex 6ac63ad3b..aa972690c 100644\n--- a/plone-5.0.x.cfg\n+++ b/plone-5.0.x.cfg\n@@ -6,5 +6,6 @@ extends =\n \n [versions]\n plone.restapi =\n+plone.schema = 1.2.1\n pytz = 2017.3\n zope.interface = 4.1.0\ndiff --git a/plone-5.1.x.cfg b/plone-5.1.x.cfg\nindex 6873e1182..c56b99a1d 100644\n--- a/plone-5.1.x.cfg\n+++ b/plone-5.1.x.cfg\n@@ -10,7 +10,7 @@ plone.restapi =\n zipp = 0.5.2\n \n # plone.restapi specific\n-plone.schema = 1.2.0\n+plone.schema = 1.2.1\n \n # zest.releaser\n zest.releaser = 6.20.1\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 871e02a85..9ba3532db 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -6,4 +6,14 @@ find-links += https://dist.plone.org/thirdparty/\n versions=versions\n \n [versions]\n-plone.restapi =\n\\ No newline at end of file\n+plone.restapi =\n+plone.namedfile = 5.3.1\n+astunparse = 1.6.2\n+\n+# requirement for jsonfield\n+plone.schema = 1.2.1\n+\n+# requirement for the @types endpoint enhancements\n+# https://github.com/plone/plone.restapi/pull/951\n+# https://github.com/plone/plone.schemaeditor/pull/77\n+plone.schemaeditor = 3.0.1\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex fddbc2cb3..b5c639cb7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -88,7 +88,7 @@ def read(filename):\n         "python-dateutil",\n         "plone.behavior>=1.1",  # adds name to behavior directive\n         "plone.rest >= 1.0a6",  # json renderer moved to plone.restapi\n-        "plone.schema >= 1.2.0",  # new json field\n+        "plone.schema >= 1.2.1",  # new/fixed json field\n         "PyJWT",\n         "pytz",\n     ],\ndiff --git a/src/plone/restapi/services/types/add.py b/src/plone/restapi/services/types/add.py\nnew file mode 100644\nindex 000000000..a9162f835\n--- /dev/null\n+++ b/src/plone/restapi/services/types/add.py\n@@ -0,0 +1,59 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.services import Service\n+from plone.restapi.types.utils import add_field\n+from plone.restapi.types.utils import add_fieldset\n+from zExceptions import BadRequest\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import noLongerProvides\n+from zope.publisher.interfaces import IPublishTraverse\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class TypesPost(Service):\n+    """Creates a new field/fieldset"""\n+\n+    def __init__(self, context, request):\n+        super(TypesPost, self).__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@types as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        if not self.params:\n+            raise BadRequest("Missing parameter typename")\n+\n+        data = json_body(self.request)\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        # Make sure we get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        name = self.params.pop()\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+        context = context.publishTraverse(self.request, name)\n+\n+        factory = data.get("factory", None)\n+        if not factory:\n+            raise BadRequest("Missing parameter: \'factory\'")\n+\n+        if factory == "fieldset":\n+            res = add_fieldset(context, self.request, data)\n+        else:\n+            res = add_field(context, self.request, data)\n+\n+        self.request.response.setStatus(201)\n+        return res\ndiff --git a/src/plone/restapi/services/types/configure.zcml b/src/plone/restapi/services/types/configure.zcml\nindex 8d2de276b..e3cb7301b 100644\n--- a/src/plone/restapi/services/types/configure.zcml\n+++ b/src/plone/restapi/services/types/configure.zcml\n@@ -11,6 +11,39 @@\n     permission="zope2.View"\n     />\n \n+  <plone:service\n+    method="PATCH"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".update.TypesUpdate"\n+    name="@types"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n+\n+  <plone:service\n+    method="POST"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".add.TypesPost"\n+    name="@types"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n+\n+  <plone:service\n+    method="DELETE"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".delete.TypesDelete"\n+    name="@types"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n+\n+  <plone:service\n+    method="PUT"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    factory=".put.TypesPut"\n+    name="@types"\n+    permission="plone.app.controlpanel.Overview"\n+    />\n+\n+\n   <adapter factory=".get.TypesInfo" name="types"/>\n \n </configure>\ndiff --git a/src/plone/restapi/services/types/delete.py b/src/plone/restapi/services/types/delete.py\nnew file mode 100644\nindex 000000000..908017492\n--- /dev/null\n+++ b/src/plone/restapi/services/types/delete.py\n@@ -0,0 +1,60 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.services import Service\n+from plone.restapi.types.utils import delete_field\n+from plone.restapi.types.utils import delete_fieldset\n+from zExceptions import BadRequest\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import noLongerProvides\n+from zope.publisher.interfaces import IPublishTraverse\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class TypesDelete(Service):\n+    """Deletes a field/fieldset from content type"""\n+\n+    def __init__(self, context, request):\n+        super(TypesDelete, self).__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@types as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        if not self.params:\n+            raise BadRequest("Missing parameter typename")\n+        if len(self.params) < 2:\n+            raise BadRequest("Missing parameter fieldname")\n+        if len(self.params) > 2:\n+            raise BadRequest("Too many parameters")\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        # Make sure we don\'t get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+\n+        # Get content type SchemaContext\n+        name = self.params.pop(0)\n+        context = context.publishTraverse(self.request, name)\n+\n+        name = self.params.pop(0)\n+        try:\n+            context.publishTraverse(self.request, name)\n+        except AttributeError:\n+            delete_fieldset(context, self.request, name)\n+        else:\n+            delete_field(context, self.request, name)\n+\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/types/get.py b/src/plone/restapi/services/types/get.py\nindex 24b0edacc..52d8a3e8e 100644\n--- a/src/plone/restapi/services/types/get.py\n+++ b/src/plone/restapi/services/types/get.py\n@@ -1,17 +1,21 @@\n # -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityContent\n from plone.restapi.interfaces import IExpandableElement\n+from plone.restapi.interfaces import IPloneRestapiLayer\n from plone.restapi.services import Service\n-from plone.restapi.types.utils import get_jsonschema_for_portal_type\n+from plone.restapi.types.utils import get_info_for_type\n+from plone.restapi.types.utils import get_info_for_field\n+from plone.restapi.types.utils import get_info_for_fieldset\n from Products.CMFCore.interfaces import IFolderish\n from Products.CMFCore.utils import getToolByName\n from zExceptions import Unauthorized\n from zope.component import adapter\n-from zope.component import getMultiAdapter\n+from zope.component import getMultiAdapter, queryMultiAdapter\n from zope.component import getUtility\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n+from zope.interface import noLongerProvides\n from zope.publisher.interfaces import IPublishTraverse\n from zope.schema.interfaces import IVocabularyFactory\n \n@@ -71,7 +75,6 @@ def __call__(self, expand=False):\n         return result\n \n \n-# @implementer(IExpandableElement)\n @implementer(IPublishTraverse)\n class TypesGet(Service):\n     def __init__(self, context, request):\n@@ -94,23 +97,86 @@ def _get_record_name(self):\n         return self.params[0]\n \n     def reply(self):\n-        if self.params and len(self.params) > 0:\n-            # Return schema for a specific type\n-            check_security(self.context)\n-            self.content_type = "application/json+schema"\n-            try:\n-                portal_type = self.params.pop()\n-                return get_jsonschema_for_portal_type(\n-                    portal_type, self.context, self.request\n-                )\n-            except KeyError:\n-                self.content_type = "application/json"\n-                self.request.response.setStatus(404)\n-                return {\n-                    "type": "NotFound",\n-                    "message": \'Type "{}" could not be found.\'.format(portal_type),\n-                }\n-\n-        # List type info, including addable_types\n-        info = TypesInfo(self.context, self.request)\n-        return info(expand=True)["types"]\n+        if not self.params:\n+            # List type info, including addable_types\n+            info = TypesInfo(self.context, self.request)\n+            return info(expand=True)["types"]\n+\n+        if len(self.params) == 1:\n+            return self.reply_for_type()\n+\n+        if len(self.params) == 2:\n+            return self.reply_for_field()\n+\n+    def reply_for_type(self):\n+        check_security(self.context)\n+        portal_type = self.params.pop()\n+\n+        # Make sure we get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        try:\n+            dtool = queryMultiAdapter(\n+                (self.context, self.request), name="dexterity-types"\n+            )\n+            dtype = dtool.publishTraverse(self.request, portal_type)\n+        except Exception:\n+            dtype = self.context\n+\n+        try:\n+            schema = get_info_for_type(dtype, self.request, portal_type)\n+        except KeyError:\n+            self.content_type = "application/json"\n+            self.request.response.setStatus(404)\n+            return {\n+                "type": "NotFound",\n+                "message": "Type \'%s\' could not be found." % portal_type,\n+            }\n+\n+        self.content_type = "application/json+schema"\n+        return schema\n+\n+    def reply_for_field(self):\n+        check_security(self.context)\n+        name = self.params[0]\n+        field_name = self.params[1]\n+\n+        # Make sure we get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+        context = context.publishTraverse(self.request, name)\n+\n+        try:\n+            # Get field\n+            return get_info_for_field(context, self.request, field_name)\n+        except (KeyError, AttributeError):\n+            # Get fieldset\n+            return self.reply_for_fieldset()\n+\n+    def reply_for_fieldset(self):\n+        name = self.params[0]\n+        field_name = self.params[1]\n+\n+        # Make sure we get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+        context = context.publishTraverse(self.request, name)\n+\n+        try:\n+            return get_info_for_fieldset(context, self.request, field_name)\n+        except KeyError:\n+            self.content_type = "application/json"\n+            self.request.response.setStatus(404)\n+            return {\n+                "type": "NotFound",\n+                "message": "Field(set) \'%s\' could not be found." % field_name,\n+            }\ndiff --git a/src/plone/restapi/services/types/put.py b/src/plone/restapi/services/types/put.py\nnew file mode 100644\nindex 000000000..b3f0a9ed3\n--- /dev/null\n+++ b/src/plone/restapi/services/types/put.py\n@@ -0,0 +1,129 @@\n+# -*- coding: utf-8 -*-\n+from collections import OrderedDict\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.services import Service\n+from plone.restapi.types.utils import add_field\n+from plone.restapi.types.utils import add_fieldset\n+from plone.restapi.types.utils import delete_field\n+from plone.restapi.types.utils import delete_fieldset\n+from plone.restapi.types.utils import get_info_for_type\n+from plone.restapi.types.utils import serializeSchema\n+from plone.restapi.types.utils import update_field\n+from plone.restapi.types.utils import update_fieldset\n+from plone.supermodel.interfaces import FIELDSETS_KEY\n+from Products.CMFCore.utils import getToolByName\n+from zExceptions import BadRequest\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import noLongerProvides\n+from zope.publisher.interfaces import IPublishTraverse\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class TypesPut(Service):\n+    def __init__(self, context, request):\n+        super(TypesPut, self).__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@types as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def update_layouts(self, name, data):\n+        layouts = data.get("layouts", [])\n+        if not layouts:\n+            return\n+\n+        ttool = getToolByName(self.context, "portal_types")\n+        ttool[name].view_methods = tuple(layouts)\n+\n+    def remove_fieldsets(self, ctype, data):\n+        fieldsets = [f.get("id") for f in data.get("fieldsets", [])]\n+        existing = set(\n+            f.__name__ for f in ctype.schema.queryTaggedValue(FIELDSETS_KEY, [])\n+        )\n+\n+        for fieldset in existing:\n+            if fieldset not in fieldsets:\n+                delete_fieldset(ctype, self.request, fieldset)\n+\n+    def add_fieldsets(self, ctype, data):\n+        fieldsets = OrderedDict((f.get("id"), f) for f in data.get("fieldsets", []))\n+        info = get_info_for_type(ctype, self.request, ctype.getId())\n+        existing = set(f.get("id") for f in info.get("fieldsets", []))\n+        for name, fieldset in fieldsets.items():\n+            if name not in existing:\n+                add_fieldset(ctype, self.request, fieldset)\n+\n+    def remove_fields(self, ctype, data):\n+        fields = data.get("properties", {})\n+        existing = set(name for name in ctype.schema)\n+        for name in existing:\n+            if name not in fields:\n+                delete_field(ctype, self.request, name)\n+\n+    def add_fields(self, ctype, data):\n+        allow = [ctype.schema.__identifier__, ""]\n+        required = data.get("required", [])\n+        for name, field in data.get("properties", {}).items():\n+            if name in ctype.schema:\n+                continue\n+\n+            behavior = field.get("behavior", "")\n+            if behavior not in allow:\n+                continue\n+\n+            if name in required:\n+                field["required"] = True\n+            field["id"] = name\n+            add_field(ctype, self.request, field)\n+\n+    def update_fieldsets(self, ctype, data):\n+        existing = set(\n+            f.__name__ for f in ctype.schema.queryTaggedValue(FIELDSETS_KEY, [])\n+        )\n+        existing.add("default")\n+        for fieldset in data.get("fieldsets", []):\n+            if fieldset.get("id") not in existing:\n+                continue\n+            update_fieldset(ctype, self.request, fieldset)\n+\n+    def update_fields(self, ctype, data):\n+        for name, field in data.get("properties", {}).items():\n+            if name not in ctype.schema:\n+                continue\n+\n+            field["id"] = name\n+            update_field(ctype, self.request, field)\n+\n+    def reply(self):\n+        if not self.params:\n+            raise BadRequest("Missing parameter typename")\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        # Make sure we get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        data = json_body(self.request)\n+        name = self.params.pop()\n+        dtypes = queryMultiAdapter((self.context, self.request), name="dexterity-types")\n+        ctype = dtypes.publishTraverse(self.request, name)\n+\n+        self.update_layouts(name, data)\n+        self.remove_fields(ctype, data)\n+        self.remove_fieldsets(ctype, data)\n+        self.add_fields(ctype, data)\n+        self.add_fieldsets(ctype, data)\n+        self.update_fields(ctype, data)\n+        self.update_fieldsets(ctype, data)\n+\n+        serializeSchema(ctype.schema)\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/services/types/update.py b/src/plone/restapi/services/types/update.py\nnew file mode 100644\nindex 000000000..2ab1259b0\n--- /dev/null\n+++ b/src/plone/restapi/services/types/update.py\n@@ -0,0 +1,115 @@\n+# -*- coding: utf-8 -*-\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.interfaces import IPloneRestapiLayer\n+from plone.restapi.services import Service\n+from plone.restapi.types.utils import serializeSchema\n+from plone.restapi.types.utils import add_field\n+from plone.restapi.types.utils import add_fieldset\n+from plone.restapi.types.utils import get_info_for_type\n+from plone.restapi.types.utils import update_field\n+from plone.restapi.types.utils import update_fieldset\n+from zExceptions import BadRequest\n+from zope.component import queryMultiAdapter\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import noLongerProvides\n+from zope.publisher.interfaces import IPublishTraverse\n+import plone.protect.interfaces\n+\n+\n+@implementer(IPublishTraverse)\n+class TypesUpdate(Service):\n+    def __init__(self, context, request):\n+        super(TypesUpdate, self).__init__(context, request)\n+        self.params = []\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@types as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        if not self.params:\n+            raise BadRequest("Missing parameter typename")\n+\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        # Make sure we get the right dexterity-types adapter\n+        if IPloneRestapiLayer.providedBy(self.request):\n+            noLongerProvides(self.request, IPloneRestapiLayer)\n+\n+        data = json_body(self.request)\n+        if len(self.params) == 1:\n+            name = self.params.pop(0)\n+        elif len(self.params) == 2:\n+            name = self.params.pop(0)\n+            fname = self.params.pop(0)\n+            if "fields" in data:\n+                return self.reply_for_fieldset(name, fname, data)\n+            return self.reply_for_field(name, fname, data)\n+        else:\n+            raise BadRequest("Too many parameters")\n+\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+\n+        # Get content type SchemaContext\n+        context = context.publishTraverse(self.request, name)\n+\n+        # Update Field properties\n+        properties = data.get("properties", {})\n+        for key, value in properties.items():\n+            self.reply_for_field(name, key, value, create=True)\n+\n+        # Update Fieldset properties\n+        fieldsets = data.get("fieldsets", [])\n+        for fieldset in fieldsets:\n+            fname = fieldset.get("id")\n+            self.reply_for_fieldset(name, fname, fieldset, create=True)\n+\n+        return self.reply_no_content()\n+\n+    def reply_for_fieldset(self, name, fieldset_name, data, create=False):\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+\n+        # Get content type SchemaContext\n+        context = context.publishTraverse(self.request, name)\n+\n+        data["id"] = fieldset_name\n+\n+        if create:\n+            info = get_info_for_type(context, self.request, name)\n+            existing = set(f.get("id") for f in info.get("fieldsets", []))\n+            if fieldset_name not in existing:\n+                add_fieldset(context, self.request, data)\n+        update_fieldset(context, self.request, data)\n+\n+        serializeSchema(context.schema)\n+        return self.reply_no_content()\n+\n+    def reply_for_field(self, name, field_name, data, create=False):\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+\n+        # Get content type SchemaContext\n+        context = context.publishTraverse(self.request, name)\n+\n+        data["id"] = field_name\n+\n+        if create:\n+            info = get_info_for_type(context, self.request, name)\n+            existing = info.get("properties", {})\n+            if field_name not in existing:\n+                add_field(context, self.request, data)\n+\n+        if field_name in context.schema:\n+            update_field(context, self.request, data)\n+\n+        serializeSchema(context.schema)\n+        return self.reply_no_content()\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 2016cd0ec..82e71fade 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -99,7 +99,12 @@ def enable_request_language_negotiation(portal):\n     pieces of content in different languages.\n     """\n     if PLONE_5:\n-        from Products.CMFPlone.interfaces import ILanguageSchema\n+        try:\n+            # Plone 5.2+\n+            from plone.i18n.interfaces import ILanguageSchema\n+        except ImportError:  # pragma: no cover\n+            # Plone 5.0/5.1\n+            from Products.CMFPlone.interfaces import ILanguageSchema\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ILanguageSchema, prefix="plone")\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\nindex 97bd29bbb..7a732e207 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_dexterity_item.resp\n@@ -46,6 +46,7 @@ Content-Type: application/json\n   "schema": {\n     "fieldsets": [\n       {\n+        "behavior": "plone", \n         "fields": [\n           "title", \n           "description", \n@@ -56,6 +57,7 @@ Content-Type: application/json\n         "title": "Default"\n       }, \n       {\n+        "behavior": "plone", \n         "fields": [\n           "plone.allowdiscussion", \n           "plone.basic", \n@@ -97,8 +99,10 @@ Content-Type: application/json\n       "allowed_content_types": {\n         "additionalItems": true, \n         "description": "", \n+        "factory": "Multiple Choice", \n         "items": {\n           "description": "", \n+          "factory": "Choice", \n           "title": "", \n           "type": "string", \n           "vocabulary": {\n@@ -111,6 +115,7 @@ Content-Type: application/json\n       }, \n       "description": {\n         "description": "", \n+        "factory": "Text", \n         "title": "Description", \n         "type": "string", \n         "widget": "textarea"\n@@ -142,6 +147,7 @@ Content-Type: application/json\n           null, \n           null\n         ], \n+        "factory": "Choice", \n         "title": "Filter Contained Types", \n         "type": "string", \n         "vocabulary": {\n@@ -150,161 +156,193 @@ Content-Type: application/json\n       }, \n       "plone.allowdiscussion": {\n         "description": "Allow discussion on this item", \n+        "factory": "Yes/No", \n         "title": "Allow discussion", \n         "type": "boolean"\n       }, \n       "plone.basic": {\n         "description": "Adds title and description fields.", \n+        "factory": "Yes/No", \n         "title": "Basic metadata", \n         "type": "boolean"\n       }, \n       "plone.categorization": {\n         "description": "Adds keywords and language fields.", \n+        "factory": "Yes/No", \n         "title": "Categorization", \n         "type": "boolean"\n       }, \n       "plone.collection": {\n         "description": "Adds collection behavior", \n+        "factory": "Yes/No", \n         "title": "Collection", \n         "type": "boolean"\n       }, \n       "plone.constraintypes": {\n         "description": "Restrict the content types that can be added to folderish content", \n+        "factory": "Yes/No", \n         "title": "Folder Addable Constrains", \n         "type": "boolean"\n       }, \n       "plone.dublincore": {\n         "description": "Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)", \n+        "factory": "Yes/No", \n         "title": "Dublin Core metadata", \n         "type": "boolean"\n       }, \n       "plone.eventattendees": {\n         "description": "Attendees extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Attendees", \n         "type": "boolean"\n       }, \n       "plone.eventbasic": {\n         "description": "Basic Event schema.", \n+        "factory": "Yes/No", \n         "title": "Event Basic", \n         "type": "boolean"\n       }, \n       "plone.eventcontact": {\n         "description": "Contact extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Contact", \n         "type": "boolean"\n       }, \n       "plone.eventlocation": {\n         "description": "Location extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Location", \n         "type": "boolean"\n       }, \n       "plone.eventrecurrence": {\n         "description": "Recurrence extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Recurrence", \n         "type": "boolean"\n       }, \n       "plone.excludefromnavigation": {\n         "description": "Allow items to be excluded from navigation", \n+        "factory": "Yes/No", \n         "title": "Exclude From navigation", \n         "type": "boolean"\n       }, \n       "plone.leadimage": {\n         "description": "Adds image and image caption fields", \n+        "factory": "Yes/No", \n         "title": "Lead Image", \n         "type": "boolean"\n       }, \n       "plone.locking": {\n         "description": "Locking support for dexterity", \n+        "factory": "Yes/No", \n         "title": "Locking", \n         "type": "boolean"\n       }, \n       "plone.namefromfilename": {\n         "description": "Automatically generate short URL name for content based on its primary field file name", \n+        "factory": "Yes/No", \n         "title": "Name from file name", \n         "type": "boolean"\n       }, \n       "plone.namefromtitle": {\n         "description": "Automatically generate short URL name for content based on its initial title", \n+        "factory": "Yes/No", \n         "title": "Name from title", \n         "type": "boolean"\n       }, \n       "plone.navigationroot": {\n         "description": "Make all items of this type a navigation root", \n+        "factory": "Yes/No", \n         "title": "Navigation root", \n         "type": "boolean"\n       }, \n       "plone.nextpreviousenabled": {\n         "description": "Enable next previous navigation for all items of this type", \n+        "factory": "Yes/No", \n         "title": "Next previous navigation", \n         "type": "boolean"\n       }, \n       "plone.nextprevioustoggle": {\n         "description": "Allow items to have next previous navigation enabled", \n+        "factory": "Yes/No", \n         "title": "Next previous navigation toggle", \n         "type": "boolean"\n       }, \n       "plone.ownership": {\n         "description": "Adds creator, contributor, and rights fields.", \n+        "factory": "Yes/No", \n         "title": "Ownership", \n         "type": "boolean"\n       }, \n       "plone.publication": {\n         "description": "Adds effective date and expiration date fields.", \n+        "factory": "Yes/No", \n         "title": "Date range", \n         "type": "boolean"\n       }, \n       "plone.relateditems": {\n         "description": "Adds the ability to assign related items", \n+        "factory": "Yes/No", \n         "title": "Related items", \n         "type": "boolean"\n       }, \n       "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": {\n         "description": "Schema-only behavior using annotations", \n+        "factory": "Yes/No", \n         "title": "Test Annotations Behavior", \n         "type": "boolean"\n       }, \n       "plone.restapi.tests.dxtypes.ITestBehavior": {\n         "description": "Schema-only behavior using attributes", \n+        "factory": "Yes/No", \n         "title": "Test Behavior", \n         "type": "boolean"\n       }, \n       "plone.richtext": {\n         "description": "Adds richtext behavior", \n+        "factory": "Yes/No", \n         "title": "RichText", \n         "type": "boolean"\n       }, \n       "plone.shortname": {\n         "description": "Gives the ability to rename an item from its edit form.", \n+        "factory": "Yes/No", \n         "title": "Short name", \n         "type": "boolean"\n       }, \n       "plone.tableofcontents": {\n         "description": "Adds a table of contents", \n+        "factory": "Yes/No", \n         "title": "Table of contents", \n         "type": "boolean"\n       }, \n       "plone.thumb_icon": {\n         "description": "Options to suppress thumbs and/or icons and to override thumb size in listings, tables etc.", \n+        "factory": "Yes/No", \n         "title": "Thumbs and icon handling", \n         "type": "boolean"\n       }, \n       "plone.translatable": {\n         "description": "Make this content type multilingual aware", \n+        "factory": "Yes/No", \n         "title": "Multilingual Support", \n         "type": "boolean"\n       }, \n       "plone.versioning": {\n         "description": "Versioning support with CMFEditions", \n+        "factory": "Yes/No", \n         "title": "Versioning", \n         "type": "boolean"\n       }, \n       "title": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "Type Name", \n         "type": "string"\n       }, \n       "volto.blocks": {\n         "description": "Enables Volto Blocks support", \n+        "factory": "Yes/No", \n         "title": "Blocks", \n         "type": "boolean"\n       }\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\nindex ea53e5077..771668a5f 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_get_item.resp\n@@ -21,6 +21,7 @@ Content-Type: application/json\n   "schema": {\n     "fieldsets": [\n       {\n+        "behavior": "plone", \n         "fields": [\n           "available_editors", \n           "default_editor", \n@@ -41,8 +42,10 @@ Content-Type: application/json\n           "None"\n         ], \n         "description": "Available editors in the portal.", \n+        "factory": "List", \n         "items": {\n           "description": "", \n+          "factory": "Text line (String)", \n           "title": "", \n           "type": "string"\n         }, \n@@ -53,6 +56,7 @@ Content-Type: application/json\n       "default_editor": {\n         "default": "TinyMCE", \n         "description": "Select the default wysiwyg editor. Users will be able to choose their own or select to use the site default.", \n+        "factory": "Choice", \n         "title": "Default editor", \n         "type": "string", \n         "vocabulary": {\n@@ -62,24 +66,28 @@ Content-Type: application/json\n       "enable_link_integrity_checks": {\n         "default": true, \n         "description": "Determines if the users should get warnings when they delete or move content that is linked from inside the site.", \n+        "factory": "Yes/No", \n         "title": "Enable link integrity checks", \n         "type": "boolean"\n       }, \n       "ext_editor": {\n         "default": false, \n         "description": "Determines if the external editor feature is enabled. This feature requires a special client-side application installed. The users also have to enable this in their preferences.", \n+        "factory": "Yes/No", \n         "title": "Enable External Editor feature", \n         "type": "boolean"\n       }, \n       "lock_on_ttw_edit": {\n         "default": true, \n         "description": "Disabling locking here will only affect users editing content through the Plone web UI.  Content edited via WebDAV clients will still be subject to locking.", \n+        "factory": "Yes/No", \n         "title": "Enable locking for through-the-web edits", \n         "type": "boolean"\n       }, \n       "subjects_of_navigation_root": {\n         "default": false, \n         "description": "Limit tags aka keywords vocabulary used for Tags field and in searches to the terms used inside the subtree of the current navigation root. This can be used together with Plone\'s multilingual extension plone.app.multilingual to only offer keywords of the current selected language. Other addons may utilize this feature for its specific purposes.", \n+        "factory": "Yes/No", \n         "title": "Limit tags/keywords to the current navigation root", \n         "type": "boolean"\n       }\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req b/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\nindex b69233417..3baa48250 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_patch_dexterity_item.req\n@@ -5,5 +5,7 @@ Content-Type: application/json\n \n {\n     "description": "A content-type",\n+    "plone.richtext": true,\n+    "plone.versioning": true,\n     "title": "My Content Type"\n }\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\nindex 5748a4d42..2f0311763 100644\n--- a/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n+++ b/src/plone/restapi/tests/http-examples/controlpanels_post_dexterity_item.resp\n@@ -47,6 +47,7 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n   "schema": {\n     "fieldsets": [\n       {\n+        "behavior": "plone", \n         "fields": [\n           "title", \n           "description", \n@@ -57,6 +58,7 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n         "title": "Default"\n       }, \n       {\n+        "behavior": "plone", \n         "fields": [\n           "plone.allowdiscussion", \n           "plone.basic", \n@@ -98,8 +100,10 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n       "allowed_content_types": {\n         "additionalItems": true, \n         "description": "", \n+        "factory": "Multiple Choice", \n         "items": {\n           "description": "", \n+          "factory": "Choice", \n           "title": "", \n           "type": "string", \n           "vocabulary": {\n@@ -112,6 +116,7 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n       }, \n       "description": {\n         "description": "", \n+        "factory": "Text", \n         "title": "Description", \n         "type": "string", \n         "widget": "textarea"\n@@ -143,6 +148,7 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n           null, \n           null\n         ], \n+        "factory": "Choice", \n         "title": "Filter Contained Types", \n         "type": "string", \n         "vocabulary": {\n@@ -151,161 +157,193 @@ Location: http://localhost:55001/plone/@controlpanels/dexterity-types/my_custom_\n       }, \n       "plone.allowdiscussion": {\n         "description": "Allow discussion on this item", \n+        "factory": "Yes/No", \n         "title": "Allow discussion", \n         "type": "boolean"\n       }, \n       "plone.basic": {\n         "description": "Adds title and description fields.", \n+        "factory": "Yes/No", \n         "title": "Basic metadata", \n         "type": "boolean"\n       }, \n       "plone.categorization": {\n         "description": "Adds keywords and language fields.", \n+        "factory": "Yes/No", \n         "title": "Categorization", \n         "type": "boolean"\n       }, \n       "plone.collection": {\n         "description": "Adds collection behavior", \n+        "factory": "Yes/No", \n         "title": "Collection", \n         "type": "boolean"\n       }, \n       "plone.constraintypes": {\n         "description": "Restrict the content types that can be added to folderish content", \n+        "factory": "Yes/No", \n         "title": "Folder Addable Constrains", \n         "type": "boolean"\n       }, \n       "plone.dublincore": {\n         "description": "Adds standard metadata fields (equals Basic metadata + Categorization + Effective range + Ownership)", \n+        "factory": "Yes/No", \n         "title": "Dublin Core metadata", \n         "type": "boolean"\n       }, \n       "plone.eventattendees": {\n         "description": "Attendees extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Attendees", \n         "type": "boolean"\n       }, \n       "plone.eventbasic": {\n         "description": "Basic Event schema.", \n+        "factory": "Yes/No", \n         "title": "Event Basic", \n         "type": "boolean"\n       }, \n       "plone.eventcontact": {\n         "description": "Contact extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Contact", \n         "type": "boolean"\n       }, \n       "plone.eventlocation": {\n         "description": "Location extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Location", \n         "type": "boolean"\n       }, \n       "plone.eventrecurrence": {\n         "description": "Recurrence extension for Events.", \n+        "factory": "Yes/No", \n         "title": "Event Recurrence", \n         "type": "boolean"\n       }, \n       "plone.excludefromnavigation": {\n         "description": "Allow items to be excluded from navigation", \n+        "factory": "Yes/No", \n         "title": "Exclude From navigation", \n         "type": "boolean"\n       }, \n       "plone.leadimage": {\n         "description": "Adds image and image caption fields", \n+        "factory": "Yes/No", \n         "title": "Lead Image", \n         "type": "boolean"\n       }, \n       "plone.locking": {\n         "description": "Locking support for dexterity", \n+        "factory": "Yes/No", \n         "title": "Locking", \n         "type": "boolean"\n       }, \n       "plone.namefromfilename": {\n         "description": "Automatically generate short URL name for content based on its primary field file name", \n+        "factory": "Yes/No", \n         "title": "Name from file name", \n         "type": "boolean"\n       }, \n       "plone.namefromtitle": {\n         "description": "Automatically generate short URL name for content based on its initial title", \n+        "factory": "Yes/No", \n         "title": "Name from title", \n         "type": "boolean"\n       }, \n       "plone.navigationroot": {\n         "description": "Make all items of this type a navigation root", \n+        "factory": "Yes/No", \n         "title": "Navigation root", \n         "type": "boolean"\n       }, \n       "plone.nextpreviousenabled": {\n         "description": "Enable next previous navigation for all items of this type", \n+        "factory": "Yes/No", \n         "title": "Next previous navigation", \n         "type": "boolean"\n       }, \n       "plone.nextprevioustoggle": {\n         "description": "Allow items to have next previous navigation enabled", \n+        "factory": "Yes/No", \n         "title": "Next previous navigation toggle", \n         "type": "boolean"\n       }, \n       "plone.ownership": {\n         "description": "Adds creator, contributor, and rights fields.", \n+        "factory": "Yes/No", \n         "title": "Ownership", \n         "type": "boolean"\n       }, \n       "plone.publication": {\n         "description": "Adds effective date and expiration date fields.", \n+        "factory": "Yes/No", \n         "title": "Date range", \n         "type": "boolean"\n       }, \n       "plone.relateditems": {\n         "description": "Adds the ability to assign related items", \n+        "factory": "Yes/No", \n         "title": "Related items", \n         "type": "boolean"\n       }, \n       "plone.restapi.tests.dxtypes.ITestAnnotationsBehavior": {\n         "description": "Schema-only behavior using annotations", \n+        "factory": "Yes/No", \n         "title": "Test Annotations Behavior", \n         "type": "boolean"\n       }, \n       "plone.restapi.tests.dxtypes.ITestBehavior": {\n         "description": "Schema-only behavior using attributes", \n+        "factory": "Yes/No", \n         "title": "Test Behavior", \n         "type": "boolean"\n       }, \n       "plone.richtext": {\n         "description": "Adds richtext behavior", \n+        "factory": "Yes/No", \n         "title": "RichText", \n         "type": "boolean"\n       }, \n       "plone.shortname": {\n         "description": "Gives the ability to rename an item from its edit form.", \n+        "factory": "Yes/No", \n         "title": "Short name", \n         "type": "boolean"\n       }, \n       "plone.tableofcontents": {\n         "description": "Adds a table of contents", \n+        "factory": "Yes/No", \n         "title": "Table of contents", \n         "type": "boolean"\n       }, \n       "plone.thumb_icon": {\n         "description": "Options to suppress thumbs and/or icons and to override thumb size in listings, tables etc.", \n+        "factory": "Yes/No", \n         "title": "Thumbs and icon handling", \n         "type": "boolean"\n       }, \n       "plone.translatable": {\n         "description": "Make this content type multilingual aware", \n+        "factory": "Yes/No", \n         "title": "Multilingual Support", \n         "type": "boolean"\n       }, \n       "plone.versioning": {\n         "description": "Versioning support with CMFEditions", \n+        "factory": "Yes/No", \n         "title": "Versioning", \n         "type": "boolean"\n       }, \n       "title": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "Type Name", \n         "type": "string"\n       }, \n       "volto.blocks": {\n         "description": "Enables Volto Blocks support", \n+        "factory": "Yes/No", \n         "title": "Blocks", \n         "type": "boolean"\n       }\ndiff --git a/src/plone/restapi/tests/http-examples/registry_get_list.resp b/src/plone/restapi/tests/http-examples/registry_get_list.resp\nindex 21e57f1cd..e89ba0cc3 100644\n--- a/src/plone/restapi/tests/http-examples/registry_get_list.resp\n+++ b/src/plone/restapi/tests/http-examples/registry_get_list.resp\n@@ -15,6 +15,7 @@ Content-Type: application/json\n       "schema": {\n         "properties": {\n           "description": "Override the translation machinery", \n+          "factory": "Yes/No", \n           "title": "Enabled", \n           "type": "boolean"\n         }\n@@ -26,6 +27,7 @@ Content-Type: application/json\n       "schema": {\n         "properties": {\n           "description": "Default value: %Y-%m-%d %H:%M (2038-01-19 03:14)", \n+          "factory": "Text line (String)", \n           "title": "old ZMI property: localLongTimeFormat", \n           "type": "string"\n         }\n@@ -37,6 +39,7 @@ Content-Type: application/json\n       "schema": {\n         "properties": {\n           "description": "Default value: %Y-%m-%d (2038-01-19)", \n+          "factory": "Text line (String)", \n           "title": "old ZMI property: localTimeFormat", \n           "type": "string"\n         }\n@@ -48,6 +51,7 @@ Content-Type: application/json\n       "schema": {\n         "properties": {\n           "description": "Default value: %H:%M (03:14)", \n+          "factory": "Text line (String)", \n           "title": "old ZMI property: localTimeOnlyFormat", \n           "type": "string"\n         }\n@@ -60,6 +64,7 @@ Content-Type: application/json\n         "properties": {\n           "default": true, \n           "description": "Allow syndication for collections and folders on site.", \n+          "factory": "Yes/No", \n           "title": "Allowed", \n           "type": "boolean"\n         }\n@@ -78,8 +83,10 @@ Content-Type: application/json\n             "itunes.xml|iTunes"\n           ], \n           "description": "Separate view name and title by \'|\'", \n+          "factory": "Tuple", \n           "items": {\n             "description": "", \n+            "factory": "Text line (String)", \n             "title": "", \n             "type": "string"\n           }, \n@@ -101,6 +108,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "If syndication should be enabled by default for all folders and collections.", \n+          "factory": "Yes/No", \n           "title": "Enabled by default", \n           "type": "boolean"\n         }\n@@ -113,6 +121,7 @@ Content-Type: application/json\n         "properties": {\n           "default": 15, \n           "description": "Maximum number of items that will be syndicated.", \n+          "factory": "Integer", \n           "minimum": 1, \n           "title": "Maximum items", \n           "type": "integer"\n@@ -126,6 +135,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "If body text available for item, render it, otherwise use description.", \n+          "factory": "Yes/No", \n           "title": "Render Body", \n           "type": "boolean"\n         }\n@@ -138,6 +148,7 @@ Content-Type: application/json\n         "properties": {\n           "default": true, \n           "description": "Allows users to subscribe to feeds of search results", \n+          "factory": "Yes/No", \n           "title": "Search RSS enabled", \n           "type": "boolean"\n         }\n@@ -150,6 +161,7 @@ Content-Type: application/json\n         "properties": {\n           "default": true, \n           "description": "Should feeds include author information", \n+          "factory": "Yes/No", \n           "title": "Show author info", \n           "type": "boolean"\n         }\n@@ -161,6 +173,7 @@ Content-Type: application/json\n       "schema": {\n         "properties": {\n           "description": "Makes it possible to customize syndication settings for particular folders and collections ", \n+          "factory": "Yes/No", \n           "title": "Show settings button", \n           "type": "boolean"\n         }\n@@ -172,6 +185,7 @@ Content-Type: application/json\n       "schema": {\n         "properties": {\n           "description": "Enable RSS link document action on the syndication content item.", \n+          "factory": "Yes/No", \n           "title": "Show feed link", \n           "type": "boolean"\n         }\n@@ -187,8 +201,10 @@ Content-Type: application/json\n             "/news/aggregator"\n           ], \n           "description": "Paths to folders and collections to link to at the portal root.", \n+          "factory": "Tuple", \n           "items": {\n             "description": "", \n+            "factory": "Choice", \n             "title": "", \n             "type": "string", \n             "vocabulary": {\n@@ -216,8 +232,10 @@ Content-Type: application/json\n             "Justify|alignjustify|alignjustify"\n           ], \n           "description": "Name|format|icon", \n+          "factory": "List", \n           "items": {\n             "description": "", \n+            "factory": "Text line (String)", \n             "title": "", \n             "type": "string"\n           }, \n@@ -239,6 +257,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "If not selected only logged-in users will be able to view information about who created an item and when it was modified.", \n+          "factory": "Yes/No", \n           "title": "Allow anyone to view \'about\' information", \n           "type": "boolean"\n         }\n@@ -252,8 +271,10 @@ Content-Type: application/json\n           "additionalItems": true, \n           "default": [], \n           "description": "", \n+          "factory": "Tuple", \n           "items": {\n             "description": "", \n+            "factory": "Text line (String)", \n             "title": "", \n             "type": "string"\n           }, \n@@ -279,8 +300,10 @@ Content-Type: application/json\n             "listing 16:16"\n           ], \n           "description": "Specify all allowed maximum image dimensions, one per line. The required format is &lt;name&gt; &lt;width&gt;:&lt;height&gt;.", \n+          "factory": "List", \n           "items": {\n             "description": "", \n+            "factory": "Text line (String)", \n             "title": "", \n             "type": "string"\n           }, \n@@ -309,8 +332,10 @@ Content-Type: application/json\n             "text/x-web-textile"\n           ], \n           "description": "Select which formats are available for users as alternative to the default format. Note that if new formats are installed, they will be enabled for text fields by default unless explicitly turned off here or by the relevant installer.", \n+          "factory": "Tuple", \n           "items": {\n             "description": "", \n+            "factory": "Choice", \n             "title": "", \n             "type": "string", \n             "vocabulary": {\n@@ -333,6 +358,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "", \n+          "factory": "Yes/No", \n           "title": "Always show language selector", \n           "type": "boolean"\n         }\n@@ -345,6 +371,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "If selected, anonymous users are able to post comments without logging in. It is highly recommended to use a captcha solution to prevent spam if this setting is enabled.", \n+          "factory": "Yes/No", \n           "title": "Enable anonymous comments", \n           "type": "boolean"\n         }\n@@ -357,6 +384,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "If selected, anonymous user will have to give their email.", \n+          "factory": "Yes/No", \n           "title": "Enable anonymous email field", \n           "type": "boolean"\n         }\n@@ -369,6 +397,7 @@ Content-Type: application/json\n         "properties": {\n           "default": "disabled", \n           "description": "Use this setting to enable or disable Captcha validation for comments. Install plone.formwidget.captcha, plone.formwidget.recaptcha, collective.akismet, or collective.z3cform.norobots if there are no options available.", \n+          "factory": "Choice", \n           "title": "Captcha", \n           "type": "string", \n           "vocabulary": {\n@@ -384,6 +413,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "If selected, supports deleting of own comments for users with the \\"Delete own comments\\" permission.", \n+          "factory": "Yes/No", \n           "title": "Enable deleting own comments", \n           "type": "boolean"\n         }\n@@ -396,6 +426,7 @@ Content-Type: application/json\n         "properties": {\n           "default": false, \n           "description": "If selected, supports editing of comments for users with the \\"Edit comments\\" permission.", \n+          "factory": "Yes/No", \n           "title": "Enable editing of comments", \n           "type": "boolean"\n         }\ndiff --git a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\nindex 750076c20..5937d0f05 100644\n--- a/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/translated_messages_types_folder.resp\n@@ -4,6 +4,7 @@ Content-Type: application/json+schema\n {\n   "fieldsets": [\n     {\n+      "behavior": "plone", \n       "fields": [\n         "title", \n         "description"\n@@ -12,6 +13,7 @@ Content-Type: application/json+schema\n       "title": "Por defecto"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "subjects", \n         "language", \n@@ -21,6 +23,7 @@ Content-Type: application/json+schema\n       "title": "Categorizaci\\u00f3n"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "effective", \n         "expires"\n@@ -29,6 +32,7 @@ Content-Type: application/json+schema\n       "title": "Fechas"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "creators", \n         "contributors", \n@@ -38,6 +42,7 @@ Content-Type: application/json+schema\n       "title": "Propiedad"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "allow_discussion", \n         "exclude_from_nav", \n@@ -58,6 +63,7 @@ Content-Type: application/json+schema\n   ], \n   "properties": {\n     "allow_discussion": {\n+      "behavior": "plone.allowdiscussion", \n       "choices": [\n         [\n           "True", \n@@ -77,6 +83,7 @@ Content-Type: application/json+schema\n         "S\\u00ed", \n         "No"\n       ], \n+      "factory": "Choice", \n       "title": "Permitir comentarios", \n       "type": "string", \n       "vocabulary": {\n@@ -85,9 +92,12 @@ Content-Type: application/json+schema\n     }, \n     "contributors": {\n       "additionalItems": true, \n+      "behavior": "plone.dublincore", \n       "description": "Los nombres de las personas que han contribuido a este elemento. Cada colaborador deber\\u00eda estar en una l\\u00ednea independiente.", \n+      "factory": "Tuple", \n       "items": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "", \n         "type": "string"\n       }, \n@@ -102,9 +112,12 @@ Content-Type: application/json+schema\n     }, \n     "creators": {\n       "additionalItems": true, \n+      "behavior": "plone.dublincore", \n       "description": "Personas responsables de la creaci\\u00f3n del contenido de este elemento. Por favor, introduzca una lista de nombres de usuario, uno por l\\u00ednea. El autor principal deber\\u00eda ser el primero.", \n+      "factory": "Tuple", \n       "items": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "", \n         "type": "string"\n       }, \n@@ -118,37 +131,49 @@ Content-Type: application/json+schema\n       }\n     }, \n     "description": {\n+      "behavior": "plone.dublincore", \n       "description": "Usado en listados de elementos y resultados de b\\u00fasquedas.", \n+      "factory": "Text", \n       "title": "Descripci\\u00f3n", \n       "type": "string", \n       "widget": "textarea"\n     }, \n     "effective": {\n+      "behavior": "plone.dublincore", \n       "description": "La fecha en la que el documento ser\\u00e1 publicado. Si no selecciona ninguna fecha, el documento ser\\u00e1 publicado inmediatamente.", \n+      "factory": "Date/Time", \n       "title": "Fecha de Publicaci\\u00f3n", \n       "type": "string", \n       "widget": "datetime"\n     }, \n     "exclude_from_nav": {\n+      "behavior": "plone.excludefromnavigation", \n       "default": false, \n       "description": "Si est\\u00e1 marcado, este elemento no aparecer\\u00e1 en el \\u00e1rbol de navegaci\\u00f3n", \n+      "factory": "Yes/No", \n       "title": "Excluir de la navegaci\\u00f3n", \n       "type": "boolean"\n     }, \n     "expires": {\n+      "behavior": "plone.dublincore", \n       "description": "La fecha en la que expira el documento. Esto har\\u00e1 autom\\u00e1ticamente el documento invisible a otros a una fecha dada. Si no elije ninguna fecha, nunca expirar\\u00e1.", \n+      "factory": "Date/Time", \n       "title": "Fecha de Terminaci\\u00f3n", \n       "type": "string", \n       "widget": "datetime"\n     }, \n     "id": {\n+      "behavior": "plone.shortname", \n       "description": "Este nombre se mostrar\\u00e1 en la URL.", \n+      "factory": "Text line (String)", \n       "title": "Nombre corto", \n       "type": "string"\n     }, \n     "language": {\n+      "behavior": "plone.dublincore", \n       "default": "en", \n       "description": "", \n+      "factory": "Choice", \n       "title": "Idioma", \n       "type": "string", \n       "vocabulary": {\n@@ -156,17 +181,22 @@ Content-Type: application/json+schema\n       }\n     }, \n     "nextPreviousEnabled": {\n+      "behavior": "plone.nextprevioustoggle", \n       "default": false, \n       "description": "Esto habilita el widget siguiente/pr\\u00f3ximo en los elementos contenidos en esta carpeta.", \n+      "factory": "Yes/No", \n       "title": "Habilitar la navegaci\\u00f3n siguiente/anterior", \n       "type": "boolean"\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n+      "behavior": "plone.relateditems", \n       "default": [], \n       "description": "", \n+      "factory": "Relation List", \n       "items": {\n         "description": "", \n+        "factory": "Relation Choice", \n         "title": "Related", \n         "type": "string", \n         "vocabulary": {\n@@ -186,16 +216,21 @@ Content-Type: application/json+schema\n       }\n     }, \n     "rights": {\n+      "behavior": "plone.dublincore", \n       "description": "Declaraci\\u00f3n de copyright o informaci\\u00f3n de otros derechos sobre este elemento.", \n+      "factory": "Text", \n       "title": "Derechos de Autor", \n       "type": "string", \n       "widget": "textarea"\n     }, \n     "subjects": {\n       "additionalItems": true, \n+      "behavior": "plone.dublincore", \n       "description": "Las etiquetas suelen utilizarse para la organizaci\\u00f3n a medida del contenido.", \n+      "factory": "Tuple", \n       "items": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "", \n         "type": "string"\n       }, \n@@ -209,7 +244,9 @@ Content-Type: application/json+schema\n       }\n     }, \n     "title": {\n+      "behavior": "plone.dublincore", \n       "description": "", \n+      "factory": "Text line (String)", \n       "title": "T\\u00edtulo", \n       "type": "string"\n     }\ndiff --git a/src/plone/restapi/tests/http-examples/types_document.resp b/src/plone/restapi/tests/http-examples/types_document.resp\nindex e627b352f..5d832022b 100644\n--- a/src/plone/restapi/tests/http-examples/types_document.resp\n+++ b/src/plone/restapi/tests/http-examples/types_document.resp\n@@ -4,9 +4,11 @@ Content-Type: application/json+schema\n {\n   "fieldsets": [\n     {\n+      "behavior": "plone", \n       "fields": [\n         "title", \n         "description", \n+        "author_email", \n         "text", \n         "changeNote"\n       ], \n@@ -14,6 +16,7 @@ Content-Type: application/json+schema\n       "title": "Default"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "allow_discussion", \n         "exclude_from_nav", \n@@ -25,6 +28,7 @@ Content-Type: application/json+schema\n       "title": "Settings"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "subjects", \n         "language", \n@@ -34,6 +38,7 @@ Content-Type: application/json+schema\n       "title": "Categorization"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "effective", \n         "expires"\n@@ -42,6 +47,7 @@ Content-Type: application/json+schema\n       "title": "Dates"\n     }, \n     {\n+      "behavior": "plone", \n       "fields": [\n         "creators", \n         "contributors", \n@@ -49,6 +55,13 @@ Content-Type: application/json+schema\n       ], \n       "id": "ownership", \n       "title": "Ownership"\n+    }, \n+    {\n+      "behavior": "plone.dexterity.schema.generated", \n+      "description": "Contact information", \n+      "fields": [], \n+      "id": "contact_info", \n+      "title": "Contact Info"\n     }\n   ], \n   "layouts": [\n@@ -56,6 +69,7 @@ Content-Type: application/json+schema\n   ], \n   "properties": {\n     "allow_discussion": {\n+      "behavior": "plone.allowdiscussion", \n       "choices": [\n         [\n           "True", \n@@ -75,22 +89,36 @@ Content-Type: application/json+schema\n         "Yes", \n         "No"\n       ], \n+      "factory": "Choice", \n       "title": "Allow discussion", \n       "type": "string", \n       "vocabulary": {\n         "@id": "http://localhost:55001/plone/@sources/allow_discussion"\n       }\n     }, \n+    "author_email": {\n+      "behavior": "plone.dexterity.schema.generated.plone_0_Document", \n+      "description": "Email of the author", \n+      "factory": "Email", \n+      "title": "Author email", \n+      "type": "string", \n+      "widget": "email"\n+    }, \n     "changeNote": {\n+      "behavior": "plone.versioning", \n       "description": "Enter a comment that describes the changes you made.", \n+      "factory": "Text line (String)", \n       "title": "Change Note", \n       "type": "string"\n     }, \n     "contributors": {\n       "additionalItems": true, \n+      "behavior": "plone.dublincore", \n       "description": "The names of people that have contributed to this item. Each contributor should be on a separate line.", \n+      "factory": "Tuple", \n       "items": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "", \n         "type": "string"\n       }, \n@@ -105,9 +133,12 @@ Content-Type: application/json+schema\n     }, \n     "creators": {\n       "additionalItems": true, \n+      "behavior": "plone.dublincore", \n       "description": "Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.", \n+      "factory": "Tuple", \n       "items": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "", \n         "type": "string"\n       }, \n@@ -121,37 +152,49 @@ Content-Type: application/json+schema\n       }\n     }, \n     "description": {\n+      "behavior": "plone.dublincore", \n       "description": "Used in item listings and search results.", \n+      "factory": "Text", \n       "title": "Summary", \n       "type": "string", \n       "widget": "textarea"\n     }, \n     "effective": {\n+      "behavior": "plone.dublincore", \n       "description": "If this date is in the future, the content will not show up in listings and searches until this date.", \n+      "factory": "Date/Time", \n       "title": "Publishing Date", \n       "type": "string", \n       "widget": "datetime"\n     }, \n     "exclude_from_nav": {\n+      "behavior": "plone.excludefromnavigation", \n       "default": false, \n       "description": "If selected, this item will not appear in the navigation tree", \n+      "factory": "Yes/No", \n       "title": "Exclude from navigation", \n       "type": "boolean"\n     }, \n     "expires": {\n+      "behavior": "plone.dublincore", \n       "description": "When this date is reached, the content will no longer be visible in listings and searches.", \n+      "factory": "Date/Time", \n       "title": "Expiration Date", \n       "type": "string", \n       "widget": "datetime"\n     }, \n     "id": {\n+      "behavior": "plone.shortname", \n       "description": "This name will be displayed in the URL.", \n+      "factory": "Text line (String)", \n       "title": "Short name", \n       "type": "string"\n     }, \n     "language": {\n+      "behavior": "plone.dublincore", \n       "default": "en", \n       "description": "", \n+      "factory": "Choice", \n       "title": "Language", \n       "type": "string", \n       "vocabulary": {\n@@ -160,10 +203,13 @@ Content-Type: application/json+schema\n     }, \n     "relatedItems": {\n       "additionalItems": true, \n+      "behavior": "plone.relateditems", \n       "default": [], \n       "description": "", \n+      "factory": "Relation List", \n       "items": {\n         "description": "", \n+        "factory": "Relation Choice", \n         "title": "Related", \n         "type": "string", \n         "vocabulary": {\n@@ -183,16 +229,21 @@ Content-Type: application/json+schema\n       }\n     }, \n     "rights": {\n+      "behavior": "plone.dublincore", \n       "description": "Copyright statement or other rights information on this item.", \n+      "factory": "Text", \n       "title": "Rights", \n       "type": "string", \n       "widget": "textarea"\n     }, \n     "subjects": {\n       "additionalItems": true, \n+      "behavior": "plone.dublincore", \n       "description": "Tags are commonly used for ad-hoc organization of content.", \n+      "factory": "Tuple", \n       "items": {\n         "description": "", \n+        "factory": "Text line (String)", \n         "title": "", \n         "type": "string"\n       }, \n@@ -206,30 +257,39 @@ Content-Type: application/json+schema\n       }\n     }, \n     "table_of_contents": {\n+      "behavior": "plone.tableofcontents", \n       "description": "If selected, this will show a table of contents at the top of the page.", \n+      "factory": "Yes/No", \n       "title": "Table of contents", \n       "type": "boolean"\n     }, \n     "text": {\n+      "behavior": "plone.richtext", \n       "description": "", \n+      "factory": "Rich Text", \n       "title": "Text", \n       "type": "string", \n       "widget": "richtext"\n     }, \n     "title": {\n+      "behavior": "plone.dublincore", \n       "description": "", \n+      "factory": "Text line (String)", \n       "title": "Title", \n       "type": "string"\n     }, \n     "versioning_enabled": {\n+      "behavior": "plone.versioning", \n       "default": true, \n       "description": "Enable/disable versioning for this document.", \n+      "factory": "Yes/No", \n       "title": "Versioning enabled", \n       "type": "boolean"\n     }\n   }, \n   "required": [\n-    "title"\n+    "title", \n+    "author_email"\n   ], \n   "title": "Page", \n   "type": "object"\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_delete_field.req b/src/plone/restapi/tests/http-examples/types_document_delete_field.req\nnew file mode 100644\nindex 000000000..5d3be6da8\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_delete_field.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/@types/Document/author_email HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_delete_field.resp b/src/plone/restapi/tests/http-examples/types_document_delete_field.resp\nnew file mode 100644\nindex 000000000..460c22596\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_delete_field.resp\n@@ -0,0 +1,3 @@\n+HTTP/1.1 204 No Content\n+Content-Type: application/json\n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req\nnew file mode 100644\nindex 000000000..f3f01089c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/@types/Document/contact_info HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.req b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.req\nnew file mode 100644\nindex 000000000..f3f01089c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.req\n@@ -0,0 +1,3 @@\n+DELETE /plone/@types/Document/contact_info HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.resp b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.resp\nnew file mode 100644\nindex 000000000..517978b74\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_delete_fieldset_error.resp\n@@ -0,0 +1,3 @@\n+HTTP/1.1 204 No Content\n+Location: \n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_get_field.req b/src/plone/restapi/tests/http-examples/types_document_get_field.req\nnew file mode 100644\nindex 000000000..d4e0291f0\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_get_field.req\n@@ -0,0 +1,3 @@\n+GET /plone/@types/Document/author_email HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_get_field.resp b/src/plone/restapi/tests/http-examples/types_document_get_field.resp\nnew file mode 100644\nindex 000000000..88fd00268\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_get_field.resp\n@@ -0,0 +1,11 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "behavior": "plone.dexterity.schema.generated.plone_0_Document", \n+  "description": "Email of the author", \n+  "factory": "Email", \n+  "title": "Author email", \n+  "type": "string", \n+  "widget": "email"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_get_fieldset.req b/src/plone/restapi/tests/http-examples/types_document_get_fieldset.req\nnew file mode 100644\nindex 000000000..39fee8f10\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_get_fieldset.req\n@@ -0,0 +1,3 @@\n+GET /plone/@types/Document/contact_info HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp b/src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp\nnew file mode 100644\nindex 000000000..81cfcdafb\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_get_fieldset.resp\n@@ -0,0 +1,10 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "behavior": "plone.dexterity.schema.generated", \n+  "description": "Contact information", \n+  "fields": [], \n+  "id": "contact_info", \n+  "title": "Contact Info"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch.req b/src/plone/restapi/tests/http-examples/types_document_patch.req\nnew file mode 100644\nindex 000000000..7ceb8b2a1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch.req\n@@ -0,0 +1,14 @@\n+PATCH /plone/@types/Document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "properties": {\n+        "author_email": {\n+            "default": "foo@bar.com",\n+            "maxLength": 10,\n+            "minLength": 5\n+        }\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch.resp b/src/plone/restapi/tests/http-examples/types_document_patch.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_field.req b/src/plone/restapi/tests/http-examples/types_document_patch_field.req\nnew file mode 100644\nindex 000000000..c2d5bdd63\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_field.req\n@@ -0,0 +1,12 @@\n+PATCH /plone/@types/Document/author_email HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "description": "The e-mail address of the author",\n+    "maxLength": 20,\n+    "minLength": 10,\n+    "required": true,\n+    "title": "Author e-mail"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_field.resp b/src/plone/restapi/tests/http-examples/types_document_patch_field.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_field.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req b/src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req\nnew file mode 100644\nindex 000000000..3d86e2ac4\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_fieldset.req\n@@ -0,0 +1,12 @@\n+PATCH /plone/@types/Document/contact_info HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "description": "Contact information",\n+    "fields": [\n+        "author_email"\n+    ],\n+    "title": "Contact information"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp b/src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_fieldset.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req b/src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req\nnew file mode 100644\nindex 000000000..669cd53ed\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.req\n@@ -0,0 +1,16 @@\n+PATCH /plone/@types/Document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "fieldsets": [\n+        {\n+            "fields": [\n+                "author_email"\n+            ],\n+            "id": "contact_info",\n+            "title": "Contact info"\n+        }\n+    ]\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp b/src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_fieldsets.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_properites.req b/src/plone/restapi/tests/http-examples/types_document_patch_properites.req\nnew file mode 100644\nindex 000000000..0792c6a3f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_properites.req\n@@ -0,0 +1,14 @@\n+PATCH /plone/@types/Document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "properties": {\n+        "author_email": {\n+            "default": "foo@bar.com",\n+            "maxLength": 20,\n+            "minLength": 5\n+        }\n+    }\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_patch_properites.resp b/src/plone/restapi/tests/http-examples/types_document_patch_properites.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_patch_properites.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_post_field.req b/src/plone/restapi/tests/http-examples/types_document_post_field.req\nnew file mode 100644\nindex 000000000..9fa52bff6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_post_field.req\n@@ -0,0 +1,11 @@\n+POST /plone/@types/Document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "description": "Email of the author",\n+    "factory": "Email",\n+    "required": true,\n+    "title": "Author email"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_post_field.resp b/src/plone/restapi/tests/http-examples/types_document_post_field.resp\nnew file mode 100644\nindex 000000000..30127f62f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_post_field.resp\n@@ -0,0 +1,11 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+  "behavior": "plone.dexterity.schema.generated.plone_0_Document", \n+  "description": "Email of the author", \n+  "factory": "Email", \n+  "title": "Author email", \n+  "type": "string", \n+  "widget": "email"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_post_fieldset.req b/src/plone/restapi/tests/http-examples/types_document_post_fieldset.req\nnew file mode 100644\nindex 000000000..adf8ab9e4\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_post_fieldset.req\n@@ -0,0 +1,10 @@\n+POST /plone/@types/Document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "description": "Contact information",\n+    "factory": "fieldset",\n+    "title": "Contact Info"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp b/src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp\nnew file mode 100644\nindex 000000000..6a6aceaa7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_post_fieldset.resp\n@@ -0,0 +1,10 @@\n+HTTP/1.1 201 Created\n+Content-Type: application/json\n+\n+{\n+  "behavior": "plone.dexterity.schema.generated", \n+  "description": "Contact information", \n+  "fields": [], \n+  "id": "contact_info", \n+  "title": "Contact Info"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_put.req b/src/plone/restapi/tests/http-examples/types_document_put.req\nnew file mode 100644\nindex 000000000..dfddf3c0f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_put.req\n@@ -0,0 +1,265 @@\n+PUT /plone/@types/Document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "fieldsets": [\n+        {\n+            "fields": [\n+                "author_email",\n+                "author_url",\n+                "author_name"\n+            ],\n+            "id": "author",\n+            "title": "Contact the author"\n+        },\n+        {\n+            "fields": [],\n+            "id": "contact_info",\n+            "title": "Contact info"\n+        }\n+    ],\n+    "layouts": [\n+        "thumbnail_view",\n+        "table_view"\n+    ],\n+    "properties": {\n+        "allow_discussion": {\n+            "behavior": "plone.allowdiscussion",\n+            "choices": [\n+                [\n+                    "True",\n+                    "Yes"\n+                ],\n+                [\n+                    "False",\n+                    "No"\n+                ]\n+            ],\n+            "description": "Allow discussion for this content object.",\n+            "enum": [\n+                "True",\n+                "False"\n+            ],\n+            "enumNames": [\n+                "Yes",\n+                "No"\n+            ],\n+            "factory": "Choice",\n+            "title": "Allow discussion",\n+            "type": "string",\n+            "vocabulary": {\n+                "@id": "http://localhost:55001/plone/@sources/allow_discussion"\n+            }\n+        },\n+        "author_email": {\n+            "behavior": "plone.dexterity.schema.generated.plone_0_Document",\n+            "description": "Email of the author",\n+            "factory": "Email",\n+            "title": "Author email",\n+            "type": "string",\n+            "widget": "email"\n+        },\n+        "author_name": {\n+            "description": "Name of the author",\n+            "factory": "Text line (String)",\n+            "title": "Author name"\n+        },\n+        "author_url": {\n+            "description": "Author webpage",\n+            "factory": "URL",\n+            "maxLength": 30,\n+            "minLength": 5,\n+            "title": "Author website"\n+        },\n+        "changeNote": {\n+            "behavior": "plone.versioning",\n+            "description": "Enter a comment that describes the changes you made.",\n+            "factory": "Text line (String)",\n+            "title": "Change Note",\n+            "type": "string"\n+        },\n+        "contributors": {\n+            "additionalItems": true,\n+            "behavior": "plone.dublincore",\n+            "description": "The names of people that have contributed to this item. Each contributor should be on a separate line.",\n+            "factory": "Tuple",\n+            "items": {\n+                "description": "",\n+                "factory": "Text line (String)",\n+                "title": "",\n+                "type": "string"\n+            },\n+            "title": "Contributors",\n+            "type": "array",\n+            "uniqueItems": true,\n+            "widgetOptions": {\n+                "vocabulary": {\n+                    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+                }\n+            }\n+        },\n+        "creators": {\n+            "additionalItems": true,\n+            "behavior": "plone.dublincore",\n+            "description": "Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.",\n+            "factory": "Tuple",\n+            "items": {\n+                "description": "",\n+                "factory": "Text line (String)",\n+                "title": "",\n+                "type": "string"\n+            },\n+            "title": "Creators",\n+            "type": "array",\n+            "uniqueItems": true,\n+            "widgetOptions": {\n+                "vocabulary": {\n+                    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Users"\n+                }\n+            }\n+        },\n+        "description": {\n+            "behavior": "plone.dublincore",\n+            "description": "Used in item listings and search results.",\n+            "factory": "Text",\n+            "title": "Summary",\n+            "type": "string",\n+            "widget": "textarea"\n+        },\n+        "effective": {\n+            "behavior": "plone.dublincore",\n+            "description": "If this date is in the future, the content will not show up in listings and searches until this date.",\n+            "factory": "Date/Time",\n+            "title": "Publishing Date",\n+            "type": "string",\n+            "widget": "datetime"\n+        },\n+        "exclude_from_nav": {\n+            "behavior": "plone.excludefromnavigation",\n+            "default": false,\n+            "description": "If selected, this item will not appear in the navigation tree",\n+            "factory": "Yes/No",\n+            "title": "Exclude from navigation",\n+            "type": "boolean"\n+        },\n+        "expires": {\n+            "behavior": "plone.dublincore",\n+            "description": "When this date is reached, the content will no longer be visible in listings and searches.",\n+            "factory": "Date/Time",\n+            "title": "Expiration Date",\n+            "type": "string",\n+            "widget": "datetime"\n+        },\n+        "id": {\n+            "behavior": "plone.shortname",\n+            "description": "This name will be displayed in the URL.",\n+            "factory": "Text line (String)",\n+            "title": "Short name",\n+            "type": "string"\n+        },\n+        "language": {\n+            "behavior": "plone.dublincore",\n+            "default": "en",\n+            "description": "",\n+            "factory": "Choice",\n+            "title": "Language",\n+            "type": "string",\n+            "vocabulary": {\n+                "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.SupportedContentLanguages"\n+            }\n+        },\n+        "relatedItems": {\n+            "additionalItems": true,\n+            "behavior": "plone.relateditems",\n+            "default": [],\n+            "description": "",\n+            "factory": "Relation List",\n+            "items": {\n+                "description": "",\n+                "factory": "Relation Choice",\n+                "title": "Related",\n+                "type": "string",\n+                "vocabulary": {\n+                    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+                }\n+            },\n+            "title": "Related Items",\n+            "type": "array",\n+            "uniqueItems": true,\n+            "widgetOptions": {\n+                "pattern_options": {\n+                    "recentlyUsed": true\n+                },\n+                "vocabulary": {\n+                    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Catalog"\n+                }\n+            }\n+        },\n+        "rights": {\n+            "behavior": "plone.dublincore",\n+            "description": "Copyright statement or other rights information on this item.",\n+            "factory": "Text",\n+            "title": "Rights",\n+            "type": "string",\n+            "widget": "textarea"\n+        },\n+        "subjects": {\n+            "additionalItems": true,\n+            "behavior": "plone.dublincore",\n+            "description": "Tags are commonly used for ad-hoc organization of content.",\n+            "factory": "Tuple",\n+            "items": {\n+                "description": "",\n+                "factory": "Text line (String)",\n+                "title": "",\n+                "type": "string"\n+            },\n+            "title": "Tags",\n+            "type": "array",\n+            "uniqueItems": true,\n+            "widgetOptions": {\n+                "vocabulary": {\n+                    "@id": "http://localhost:55001/plone/@vocabularies/plone.app.vocabularies.Keywords"\n+                }\n+            }\n+        },\n+        "table_of_contents": {\n+            "behavior": "plone.tableofcontents",\n+            "description": "If selected, this will show a table of contents at the top of the page.",\n+            "factory": "Yes/No",\n+            "title": "Table of contents",\n+            "type": "boolean"\n+        },\n+        "text": {\n+            "behavior": "plone.richtext",\n+            "description": "",\n+            "factory": "Rich Text",\n+            "title": "Text",\n+            "type": "string",\n+            "widget": "richtext"\n+        },\n+        "title": {\n+            "behavior": "plone.dublincore",\n+            "description": "",\n+            "factory": "Text line (String)",\n+            "title": "Title",\n+            "type": "string"\n+        },\n+        "versioning_enabled": {\n+            "behavior": "plone.versioning",\n+            "default": true,\n+            "description": "Enable/disable versioning for this document.",\n+            "factory": "Yes/No",\n+            "title": "Versioning enabled",\n+            "type": "boolean"\n+        }\n+    },\n+    "required": [\n+        "title",\n+        "author_email"\n+    ],\n+    "title": "Page",\n+    "type": "object"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/types_document_put.resp b/src/plone/restapi/tests/http-examples/types_document_put.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/types_document_put.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_fields.req b/src/plone/restapi/tests/http-examples/vocabularies_get_fields.req\nnew file mode 100644\nindex 000000000..f8181e264\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_fields.req\n@@ -0,0 +1,3 @@\n+GET /plone/@vocabularies/Fields HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp b/src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp\nnew file mode 100644\nindex 000000000..ea6d5b023\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/vocabularies_get_fields.resp\n@@ -0,0 +1,89 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/@vocabularies/Fields", \n+  "items": [\n+    {\n+      "title": "Choice", \n+      "token": "label_choice_field"\n+    }, \n+    {\n+      "title": "Date", \n+      "token": "label_date_field"\n+    }, \n+    {\n+      "title": "Date/Time", \n+      "token": "label_datetime_field"\n+    }, \n+    {\n+      "title": "Email", \n+      "token": "Email"\n+    }, \n+    {\n+      "title": "Email", \n+      "token": "label_email"\n+    }, \n+    {\n+      "title": "File Upload", \n+      "token": "File Upload"\n+    }, \n+    {\n+      "title": "Floating-point number", \n+      "token": "label_float_field"\n+    }, \n+    {\n+      "title": "Full Name", \n+      "token": "label_full_name"\n+    }, \n+    {\n+      "title": "Image", \n+      "token": "Image"\n+    }, \n+    {\n+      "title": "Integer", \n+      "token": "label_integer_field"\n+    }, \n+    {\n+      "title": "JSONField", \n+      "token": "JSONField"\n+    }, \n+    {\n+      "title": "Multiple Choice", \n+      "token": "label_multi_choice_field"\n+    }, \n+    {\n+      "title": "Password", \n+      "token": "label_password_field"\n+    }, \n+    {\n+      "title": "Relation Choice", \n+      "token": "Relation Choice"\n+    }, \n+    {\n+      "title": "Relation List", \n+      "token": "Relation List"\n+    }, \n+    {\n+      "title": "Rich Text", \n+      "token": "Rich Text"\n+    }, \n+    {\n+      "title": "Text", \n+      "token": "label_text_field"\n+    }, \n+    {\n+      "title": "Text line (String)", \n+      "token": "label_textline_field"\n+    }, \n+    {\n+      "title": "URL", \n+      "token": "URL"\n+    }, \n+    {\n+      "title": "Yes/No", \n+      "token": "label_boolean_field"\n+    }\n+  ], \n+  "items_total": 20\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex ecb407e22..1c2e9a4de 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -33,7 +33,7 @@\n from zope.component import createObject\n from zope.component import getUtility\n from zope.interface import alsoProvides\n-from zope.site.hooks import getSite\n+from zope.component.hooks import getSite\n \n import collections\n import json\n@@ -519,9 +519,155 @@ def test_documentation_types(self):\n         response = self.api_session.get("/@types")\n         save_request_and_response_for_docs("types", response)\n \n-    def test_documentation_types_document(self):\n-        response = self.api_session.get("@types/Document")\n+    def test_documentation_types_document_crud(self):\n+        #\n+        # POST\n+        #\n+\n+        # Add fieldset\n+        response = self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "fieldset",\n+                "title": "Contact Info",\n+                "description": "Contact information",\n+            },\n+        )\n+        save_request_and_response_for_docs("types_document_post_fieldset", response)\n+\n+        # Add field\n+        response = self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "Email",\n+                "title": "Author email",\n+                "description": "Email of the author",\n+                "required": True,\n+            },\n+        )\n+        save_request_and_response_for_docs("types_document_post_field", response)\n+\n+        #\n+        # GET\n+        #\n+\n+        # Document\n+        response = self.api_session.get("/@types/Document")\n         save_request_and_response_for_docs("types_document", response)\n+        doc_json = json.loads(response.content)\n+\n+        # Get fieldset\n+        response = self.api_session.get("/@types/Document/contact_info")\n+        save_request_and_response_for_docs("types_document_get_fieldset", response)\n+\n+        # Get field\n+        response = self.api_session.get("/@types/Document/author_email")\n+        save_request_and_response_for_docs("types_document_get_field", response)\n+\n+        #\n+        # PATCH\n+        #\n+\n+        # Update Document defaults\n+        response = self.api_session.patch(\n+            "/@types/Document",\n+            json={\n+                "properties": {\n+                    "author_email": {\n+                        "default": "foo@bar.com",\n+                        "minLength": 5,\n+                        "maxLength": 20,\n+                    }\n+                }\n+            },\n+        )\n+        save_request_and_response_for_docs("types_document_patch_properites", response)\n+\n+        # Change field tab / order\n+        response = self.api_session.patch(\n+            "/@types/Document",\n+            json={\n+                "fieldsets": [\n+                    {\n+                        "id": "contact_info",\n+                        "title": "Contact info",\n+                        "fields": ["author_email"],\n+                    }\n+                ]\n+            },\n+        )\n+        save_request_and_response_for_docs("types_document_patch_fieldsets", response)\n+\n+        # Update fieldset settings\n+        response = self.api_session.patch(\n+            "/@types/Document/contact_info",\n+            json={\n+                "title": "Contact information",\n+                "description": "Contact information",\n+                "fields": ["author_email"],\n+            },\n+        )\n+        save_request_and_response_for_docs("types_document_patch_fieldset", response)\n+\n+        # Update field settings\n+        response = self.api_session.patch(\n+            "/@types/Document/author_email",\n+            json={\n+                "title": "Author e-mail",\n+                "description": "The e-mail address of the author",\n+                "minLength": 10,\n+                "maxLength": 20,\n+                "required": True,\n+            },\n+        )\n+        save_request_and_response_for_docs("types_document_patch_field", response)\n+\n+        doc_json["layouts"] = ["thumbnail_view", "table_view"]\n+        doc_json["fieldsets"] = [\n+            {\n+                "id": "author",\n+                "title": "Contact the author",\n+                "fields": [\n+                    "author_email",\n+                    "author_url",\n+                    "author_name",\n+                ],\n+            },\n+            {"id": "contact_info", "title": "Contact info", "fields": []},\n+        ]\n+\n+        doc_json["properties"]["author_name"] = {\n+            "description": "Name of the author",\n+            "factory": "Text line (String)",\n+            "title": "Author name",\n+        }\n+\n+        doc_json["properties"]["author_url"] = {\n+            "description": "Author webpage",\n+            "factory": "URL",\n+            "title": "Author website",\n+            "minLength": 5,\n+            "maxLength": 30,\n+        }\n+\n+        response = self.api_session.put("/@types/Document", json=doc_json)\n+        save_request_and_response_for_docs("types_document_put", response)\n+\n+        #\n+        # DELETE\n+        #\n+\n+        # Remove field\n+        response = self.api_session.delete(\n+            "/@types/Document/author_email",\n+        )\n+        save_request_and_response_for_docs("types_document_delete_field", response)\n+\n+        # Remove fieldset\n+        response = self.api_session.delete(\n+            "/@types/Document/contact_info",\n+        )\n+        save_request_and_response_for_docs("types_document_delete_fieldset", response)\n \n     def test_documentation_jwt_login(self):\n         self.portal.acl_users.jwt_auth._secret = "secret"\n@@ -1093,6 +1239,10 @@ def test_documentation_vocabularies_get(self):\n         )\n         save_request_and_response_for_docs("vocabularies_get", response)\n \n+    def test_documentation_vocabularies_get_fields(self):\n+        response = self.api_session.get("/@vocabularies/Fields")\n+        save_request_and_response_for_docs("vocabularies_get_fields", response)\n+\n     def test_documentation_vocabularies_get_filtered_by_title(self):\n         response = self.api_session.get(\n             "/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes?" "title=doc"\n@@ -1628,7 +1778,12 @@ def test_controlpanels_crud_dexterity(self):\n         # PATCH\n         response = self.api_session.patch(\n             "/@controlpanels/dexterity-types/my_custom_content_type",\n-            json={"title": "My Content Type", "description": "A content-type"},\n+            json={\n+                "title": "My Content Type",\n+                "description": "A content-type",\n+                "plone.richtext": True,\n+                "plone.versioning": True,\n+            },\n         )\n         save_request_and_response_for_docs(\n             "controlpanels_patch_dexterity_item", response\ndiff --git a/src/plone/restapi/tests/test_serializer_summary.py b/src/plone/restapi/tests/test_serializer_summary.py\nindex 2b102fc97..f8884e7d8 100644\n--- a/src/plone/restapi/tests/test_serializer_summary.py\n+++ b/src/plone/restapi/tests/test_serializer_summary.py\n@@ -13,7 +13,7 @@\n from plone.restapi.testing import register_static_uuid_utility\n from Products.CMFCore.utils import getToolByName\n from zope.component import getMultiAdapter\n-from zope.site.hooks import getSite\n+from zope.component.hooks import getSite\n \n import Missing\n import unittest\ndiff --git a/src/plone/restapi/tests/test_services_types.py b/src/plone/restapi/tests/test_services_types.py\nindex 6c3b25745..75c13383d 100644\n--- a/src/plone/restapi/tests/test_services_types.py\n+++ b/src/plone/restapi/tests/test_services_types.py\n@@ -25,11 +25,51 @@ def setUp(self):\n         self.api_session.headers.update({"Accept": "application/json"})\n         self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n \n+        self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "fieldset",\n+                "title": "Contact Info",\n+                "description": "Contact information",\n+            },\n+        )\n+\n+        self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "fieldset",\n+                "title": "Location",\n+                "description": "Location",\n+            },\n+        )\n+\n+        self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "Email",\n+                "title": "Author email",\n+                "description": "Email of the author",\n+            },\n+        )\n+\n+        self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "URL",\n+                "title": "Author url",\n+                "description": "Website of the author",\n+            },\n+        )\n+\n     def tearDown(self):\n+        # Remove all custom changed on Document\n+        self.api_session.put("/@types/Document", json={})\n         self.api_session.close()\n \n     def test_get_types(self):\n-        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n+        response = self.api_session.get(\n+            "{}/@types".format(self.portal.absolute_url())\n+        )  # noqa\n \n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n@@ -56,6 +96,357 @@ def test_get_types_document(self):\n             + \'"{}"\'.format(response.headers.get("Content-Type")),\n         )\n \n+    def test_get_types_document_edit(self):\n+        response = self.api_session.get("/@types/Document")\n+\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Fields are present\n+        self.assertIn("author_email", response.json().get("properties"))\n+        self.assertIn("author_url", response.json().get("properties"))\n+\n+        # All fieldsets are present even empty ones\n+        self.assertIn(\n+            "location", [f["id"] for f in response.json().get("fieldsets")]\n+        )  # noqa\n+        self.assertIn(\n+            "contact_info", [f["id"] for f in response.json().get("fieldsets")]\n+        )  # noqa\n+\n+    def test_types_document_get_fieldset(self):\n+        response = self.api_session.get("/@types/Document/contact_info")\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual("Contact Info", response.json().get("title"))\n+        self.assertEqual(\n+            "Contact information", response.json().get("description")\n+        )  # noqa\n+        self.assertEqual("contact_info", response.json().get("id"))\n+        self.assertEqual([], response.json().get("fields"))\n+\n+    def test_types_document_get_field(self):\n+        response = self.api_session.get("/@types/Document/author_email")\n+\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual("Author email", response.json().get("title"))  # noqa\n+        self.assertEqual(\n+            "Email of the author", response.json().get("description")\n+        )  # noqa\n+        self.assertEqual(\n+            "plone.dexterity.schema.generated.plone_0_Document",\n+            response.json().get("behavior"),\n+        )  # noqa\n+        self.assertEqual("string", response.json().get("type"))\n+        self.assertEqual("email", response.json().get("widget"))\n+\n+    def test_types_document_post_fieldset(self):\n+        response = self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "fieldset",\n+                "title": "Foo bar",\n+                "description": "Foo bar tab",\n+            },\n+        )\n+\n+        self.assertEqual(response.status_code, 201)\n+        self.assertEqual("Foo bar", response.json().get("title"))\n+        self.assertEqual("Foo bar tab", response.json().get("description"))  # noqa\n+        self.assertEqual("foo_bar", response.json().get("id"))\n+        self.assertEqual([], response.json().get("fields"))\n+\n+    def test_types_document_post_field(self):\n+        response = self.api_session.post(\n+            "/@types/Document",\n+            json={\n+                "factory": "Email",\n+                "title": "Email",\n+                "description": "Foo bar email",\n+                "required": True,\n+            },\n+        )\n+\n+        self.assertEqual(response.status_code, 201)\n+        self.assertEqual("Email", response.json().get("title"))\n+        self.assertEqual("Foo bar email", response.json().get("description"))\n+        self.assertEqual(\n+            "plone.dexterity.schema.generated.plone_0_Document",\n+            response.json().get("behavior"),\n+        )  # noqa\n+        self.assertEqual("string", response.json().get("type"))\n+        self.assertEqual("email", response.json().get("widget"))\n+\n+    def test_types_document_patch_properties(self):\n+        response = self.api_session.patch(\n+            "/@types/Document",\n+            json={\n+                "properties": {\n+                    "author_email": {\n+                        "default": "foo@bar.com",\n+                        "minLength": 5,\n+                        "maxLength": 100,\n+                    }\n+                }\n+            },\n+        )\n+        # PATCH returns no content\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document/author_email")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual("foo@bar.com", response.json().get("default"))\n+        self.assertEqual(5, response.json().get("minLength"))\n+        self.assertEqual(100, response.json().get("maxLength"))\n+\n+    def test_types_document_patch_fieldsets(self):\n+        response = self.api_session.patch(\n+            "/@types/Document",\n+            json={\n+                "fieldsets": [\n+                    {\n+                        "id": "contact_info",\n+                        "title": "Contact information",\n+                        "fields": ["author_email"],\n+                    }\n+                ]\n+            },\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document/contact_info")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual("Contact information", response.json().get("title"))\n+        self.assertEqual(["author_email"], response.json().get("fields"))\n+\n+    def test_types_document_patch_one_fieldset(self):\n+        response = self.api_session.patch(\n+            "/@types/Document/contact_info",\n+            json={\n+                "title": "Contact the author",\n+                "description": "Reach the author",\n+                "fields": [\n+                    "author_url",\n+                    "author_email",\n+                ],\n+            },\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document/contact_info")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual("Contact the author", response.json().get("title"))\n+        self.assertEqual("Reach the author", response.json().get("description"))  # noqa\n+        self.assertEqual(\n+            ["author_url", "author_email"], response.json().get("fields")\n+        )  # noqa\n+\n+    def test_types_document_patch_one_field(self):\n+        response = self.api_session.patch(\n+            "/@types/Document/author_email",\n+            json={\n+                "title": "Author e-mail",\n+                "description": "The e-mail address of the author",\n+                "minLength": 10,\n+                "maxLength": 200,\n+                "required": False,\n+            },\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document/author_email")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual("Author e-mail", response.json().get("title"))\n+        self.assertEqual(\n+            "The e-mail address of the author", response.json().get("description")\n+        )  # noqa\n+        self.assertEqual(10, response.json().get("minLength"))\n+        self.assertEqual(200, response.json().get("maxLength"))\n+\n+    def test_types_document_patch_create_missing(self):\n+        response = self.api_session.patch(\n+            "/@types/Document",\n+            json={\n+                "fieldsets": [\n+                    {"title": "Layout", "fields": ["blocks", "blocks_layout"]}\n+                ],\n+                "properties": {\n+                    "blocks": {\n+                        "title": "Blocks",\n+                        "type": "dict",\n+                        "widget": "json",\n+                        "factory": "JSONField",\n+                        "default": {\n+                            "230bdd04-6a0d-4cd2-ab60-4c09b315cc2c": {"@type": "title"},\n+                            "338013ce-acca-454f-a6f4-14113c187dca": {\n+                                "@type": "text",\n+                                "text": {\n+                                    "blocks": [\n+                                        {\n+                                            "data": {},\n+                                            "depth": 0,\n+                                            "entityRanges": [],\n+                                            "inlineStyleRanges": [],\n+                                            "key": "99pvk",\n+                                            "text": "Book summary",\n+                                            "type": "unstyled",\n+                                        }\n+                                    ],\n+                                    "entityMap": {},\n+                                },\n+                            },\n+                            "5060e030-727b-47bc-8023-b80b7cccd96f": {"@type": "image"},\n+                            "e3d8f8e4-8fee-47e7-9451-28724bf74a90": {"@type": "text"},\n+                        },\n+                    },\n+                    "blocks_layout": {\n+                        "title": "Blocks Layout",\n+                        "type": "dict",\n+                        "widget": "json",\n+                        "factory": "JSONField",\n+                        "default": {\n+                            "items": [\n+                                "230bdd04-6a0d-4cd2-ab60-4c09b315cc2c",\n+                                "338013ce-acca-454f-a6f4-14113c187dca",\n+                                "5060e030-727b-47bc-8023-b80b7cccd96f",\n+                                "e3d8f8e4-8fee-47e7-9451-28724bf74a90",\n+                            ]\n+                        },\n+                    },\n+                },\n+            },\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document")\n+        self.assertEqual(200, response.status_code)\n+\n+        self.assertIn("blocks", response.json().get("properties"))\n+        self.assertIn("blocks_layout", response.json().get("properties"))\n+        fieldsets = [\n+            f for f in response.json().get("fieldsets") if f.get("id") == "layout"\n+        ]  # noqa\n+        self.assertTrue(len(fieldsets) == 1)\n+        self.assertTrue(["blocks", "blocks_layout"], fieldsets[0].get("fields"))  # noqa\n+\n+    def test_types_document_update_min_max(self):\n+        response = self.api_session.patch(\n+            "/@types/Document",\n+            json={\n+                "properties": {\n+                    "custom_text": {\n+                        "factory": "Text line (String)",\n+                        "minLength": 2,\n+                        "maxLength": 20,\n+                        "title": "Custom text",\n+                    },\n+                    "custom_float": {\n+                        "title": "Custom float",\n+                        "factory": "Floating-point number",\n+                        "minimum": 2.0,\n+                        "maximum": 14.0,\n+                    },\n+                }\n+            },\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document/custom_text")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(2, response.json().get("minLength"))\n+        self.assertEqual(20, response.json().get("maxLength"))\n+\n+        response = self.api_session.get("/@types/Document/custom_float")\n+        self.assertEqual(200, response.status_code)\n+        self.assertEqual(2, response.json().get("minimum"))\n+        self.assertEqual(14.0, response.json().get("maximum"))\n+\n+    def test_types_document_put(self):\n+        response = self.api_session.get("/@types/Document")\n+        doc_json = response.json()\n+        doc_json["layouts"] = ["thumbnail_view", "table_view"]\n+        doc_json["fieldsets"] = [\n+            {\n+                "id": "author",\n+                "title": "Contact the author",\n+                "fields": ["author_email", "author_name"],\n+            },\n+            {"id": "contact_info", "title": "Contact info", "fields": []},\n+        ]\n+\n+        doc_json["properties"]["author_name"] = {\n+            "description": "Name of the author",\n+            "factory": "Text line (String)",\n+            "title": "Author name",\n+        }\n+        doc_json["properties"].pop("author_url")\n+\n+        doc_json["properties"]["author_email"] = {\n+            "minLength": 0,\n+            "maxLength": 100,\n+            "default": None,\n+        }\n+\n+        response = self.api_session.put("/@types/Document", json=doc_json)\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document")\n+        self.assertEqual(200, response.status_code)\n+\n+        # Layouts updated\n+        self.assertEqual(\n+            ["thumbnail_view", "table_view"], response.json().get("layouts")\n+        )  # noqa\n+\n+        # Field added\n+        self.assertIn("author_name", response.json().get("properties"))\n+\n+        # Field removed\n+        self.assertTrue("author_url" not in response.json().get("properties"))\n+\n+        # Field updated\n+        self.assertEqual(\n+            None, response.json().get("properties").get("author_email").get("default")\n+        )  # noqa\n+\n+        # Fieldset added\n+        self.assertIn(\n+            "author", [f["id"] for f in response.json().get("fieldsets")]\n+        )  # noqa\n+\n+        # Fieldset removed\n+        self.assertTrue(\n+            "location" not in [f["id"] for f in response.json().get("fieldsets")]\n+        )  # noqa\n+\n+        # Fieldset updated\n+        self.assertIn(\n+            "contact_info", [f["id"] for f in response.json().get("fieldsets")]\n+        )  # noqa\n+\n+    def test_types_document_remove_field(self):\n+        response = self.api_session.delete(\n+            "/@types/Document/author_email",\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document")\n+        self.assertEqual(200, response.status_code)\n+\n+        self.assertTrue("author_email" not in response.json().get("properties"))  # noqa\n+\n+    def test_types_document_remove_fieldset(self):\n+        response = self.api_session.delete(\n+            "/@types/Document/contact_info",\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@types/Document")\n+        self.assertEqual(200, response.status_code)\n+\n+        self.assertTrue(\n+            "contact_info" not in [f["id"] for f in response.json().get("fieldsets")]\n+        )  # noqa\n+\n     def test_get_types_with_unknown_type(self):\n         response = self.api_session.get(\n             "{}/@types/UnknownType".format(self.portal.absolute_url())\n@@ -72,11 +463,15 @@ def test_get_types_with_unknown_type(self):\n \n     def test_types_endpoint_only_accessible_for_authenticated_users(self):\n         self.api_session.auth = ()\n-        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n+        response = self.api_session.get(\n+            "{}/@types".format(self.portal.absolute_url())\n+        )  # noqa\n         self.assertEqual(response.status_code, 401)\n \n     def test_contextaware_addable(self):\n-        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n+        response = self.api_session.get(\n+            "{}/@types".format(self.portal.absolute_url())\n+        )  # noqa\n \n         allowed_ids = [x.getId() for x in self.portal.allowedContentTypes()]\n \n@@ -93,13 +488,15 @@ def test_image_type(self):\n         response = self.api_session.get("/@types/Image")\n         response = response.json()\n         self.assertIn("fieldsets", response)\n-        self.assertIn("image.data", response["properties"]["image"]["properties"])\n+        self.assertIn(\n+            "image.data", response["properties"]["image"]["properties"]\n+        )  # noqa\n \n     def test_file_type(self):\n         response = self.api_session.get("/@types/File")\n         response = response.json()\n         self.assertIn("fieldsets", response)\n-        self.assertIn("file.data", response["properties"]["file"]["properties"])\n+        self.assertIn("file.data", response["properties"]["file"]["properties"])  # noqa\n \n     def test_event_type(self):\n         response = self.api_session.get("/@types/Event")\n@@ -171,7 +568,9 @@ def tearDown(self):\n         self.api_session.close()\n \n     def test_get_types_translated(self):\n-        response = self.api_session.get("{}/@types".format(self.portal.absolute_url()))\n+        response = self.api_session.get(\n+            "{}/@types".format(self.portal.absolute_url())\n+        )  # noqa\n \n         self.assertEqual(response.status_code, 200)\n \ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex e745112a4..89cc1dfd5 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -66,8 +66,18 @@ def test_get_jsonschema_properties(self):\n         fieldsets = get_fieldsets(self.portal, self.request, IDummySchema)\n         info = get_jsonschema_properties(self.portal, self.request, fieldsets)\n         expected = {\n-            "field1": {"title": u"Foo", "description": u"", "type": "boolean"},\n-            "field2": {"title": u"Bar", "description": u"", "type": "string"},\n+            "field1": {\n+                "title": u"Foo",\n+                "description": u"",\n+                "factory": "Yes/No",\n+                "type": "boolean",\n+            },\n+            "field2": {\n+                "title": u"Bar",\n+                "description": u"",\n+                "factory": "Text line (String)",\n+                "type": "string",\n+            },\n         }\n         self.assertEqual(info, expected)\n \n@@ -222,6 +232,7 @@ def uppercased_title_default(context):\n             {\n                 "type": "string",\n                 "title": u"My field",\n+                "factory": u"Text line (String)",\n                 "description": u"My great field",\n                 "default": u"MY FOLDER",\n             },\n@@ -240,6 +251,7 @@ def test_textline(self):\n             {\n                 "type": "string",\n                 "title": u"My field",\n+                "factory": u"Text line (String)",\n                 "description": u"My great field",\n                 "default": u"foobar",\n             },\n@@ -262,6 +274,7 @@ def test_text(self):\n                 "type": "string",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": u"Text",\n                 "widget": "textarea",\n                 "default": u"Lorem ipsum dolor sit amet",\n                 "minLength": 10,\n@@ -282,6 +295,7 @@ def test_bool(self):\n                 "type": "boolean",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": u"Yes/No",\n                 "default": False,\n             },\n             adapter.get_schema(),\n@@ -306,6 +320,7 @@ def test_float(self):\n                 "type": "number",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": u"Floating-point number",\n                 "default": 0.5,\n             },\n             adapter.get_schema(),\n@@ -328,6 +343,7 @@ def test_email(self):\n                 "type": "string",\n                 "title": "Email",\n                 "description": "Email field",\n+                "factory": "Email",\n                 "widget": "email",\n                 "default": "foo@bar.com",\n                 "minLength": 10,\n@@ -353,6 +369,7 @@ def test_password(self):\n                 "type": "string",\n                 "title": "Password",\n                 "description": "Password field",\n+                "factory": "Password",\n                 "widget": "password",\n                 "default": "secret",\n                 "minLength": 4,\n@@ -378,6 +395,7 @@ def test_uri(self):\n                 "type": "string",\n                 "title": "URI",\n                 "description": "URI field",\n+                "factory": "URL",\n                 "widget": "url",\n                 "default": "http://foo.bar",\n                 "minLength": 10,\n@@ -403,6 +421,7 @@ def test_decimal(self):\n                 "minimum": 0.0,\n                 "maximum": 1.0,\n                 "type": "number",\n+                "factory": "Floating-point number",\n                 "title": u"My field",\n                 "description": u"My great field",\n                 "default": 0.5,\n@@ -423,8 +442,9 @@ def test_int(self):\n                 "minimum": 0,\n                 "maximum": 100,\n                 "type": "integer",\n-                "title": u"My field",\n-                "description": u"My great field",\n+                "title": "My field",\n+                "description": "My great field",\n+                "factory": "Integer",\n                 "default": 50,\n             },\n             adapter.get_schema(),\n@@ -446,6 +466,7 @@ def test_choice(self):\n                 "type": "string",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": ["Foo", "Bar"],\n                 "choices": [("foo", "Foo"), ("bar", "Bar")],\n@@ -471,6 +492,7 @@ def test_choice_inline_array(self):\n                 "type": "string",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": [None, None],\n                 "choices": [("foo", None), ("bar", None)],\n@@ -494,6 +516,7 @@ def test_choice_named_vocab(self):\n                 "type": "string",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": "Choice",\n                 "vocabulary": {\n                     "@id": u"http://nohost/plone/@vocabularies/plone.app.vocabularies.ReallyUserFriendlyTypes"\n                 },  # noqa\n@@ -517,6 +540,7 @@ def test_choice_source_vocab(self):\n                 "type": "string",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": "Choice",\n                 "enum": ["foo", "bar"],\n                 "enumNames": ["Foo", "Bar"],\n                 "choices": [("foo", "Foo"), ("bar", "Bar")],\n@@ -544,6 +568,7 @@ def test_collection(self):\n                 "type": "array",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": "List",\n                 "default": ["foobar"],\n                 "minItems": 1,\n                 "uniqueItems": False,\n@@ -552,6 +577,7 @@ def test_collection(self):\n                     "type": "string",\n                     "title": u"Text",\n                     "description": u"Text field",\n+                    "factory": "Text line (String)",\n                     "default": u"Default text",\n                 },\n             },\n@@ -569,9 +595,15 @@ def test_collection(self):\n                 "type": "array",\n                 "title": u"My field",\n                 "description": u"",\n+                "factory": "Tuple",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n-                "items": {"title": u"", "description": u"", "type": "integer"},\n+                "items": {\n+                    "title": u"",\n+                    "description": u"",\n+                    "type": "integer",\n+                    "factory": "Integer",\n+                },\n                 "default": (1, 2),\n             },\n             adapter.get_schema(),\n@@ -588,9 +620,15 @@ def test_collection(self):\n                 "type": "array",\n                 "title": u"My field",\n                 "description": u"",\n+                "factory": "Multiple Choice",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n-                "items": {"title": u"", "description": u"", "type": "string"},\n+                "items": {\n+                    "title": u"",\n+                    "description": u"",\n+                    "factory": "Text line (String)",\n+                    "type": "string",\n+                },\n             },\n             adapter.get_schema(),\n         )\n@@ -610,11 +648,13 @@ def test_collection(self):\n                 "type": "array",\n                 "title": u"My field",\n                 "description": u"",\n+                "factory": "List",\n                 "uniqueItems": True,\n                 "additionalItems": True,\n                 "items": {\n                     "title": u"",\n                     "description": u"",\n+                    "factory": "Choice",\n                     "type": "string",\n                     "enum": ["foo", "bar"],\n                     "enumNames": ["Foo", "Bar"],\n@@ -638,9 +678,20 @@ def test_object(self):\n                 "type": "object",\n                 "title": u"My field",\n                 "description": u"My great field",\n+                "factory": "File",\n                 "properties": {\n-                    "field1": {"title": u"Foo", "description": u"", "type": "boolean"},\n-                    "field2": {"title": u"Bar", "description": u"", "type": "string"},\n+                    "field1": {\n+                        "title": u"Foo",\n+                        "description": u"",\n+                        "factory": u"Yes/No",\n+                        "type": "boolean",\n+                    },\n+                    "field2": {\n+                        "title": u"Bar",\n+                        "description": u"",\n+                        "factory": u"Text line (String)",\n+                        "type": "string",\n+                    },\n                 },\n             },\n             adapter.get_schema(),\n@@ -656,6 +707,7 @@ def test_richtext(self):\n             {\n                 "type": "string",\n                 "title": u"My field",\n+                "factory": u"Rich Text",\n                 "description": u"My great field",\n                 "widget": "richtext",\n             },\n@@ -674,6 +726,7 @@ def test_date(self):\n             {\n                 "type": "string",\n                 "title": u"My field",\n+                "factory": u"Date",\n                 "description": u"My great field",\n                 "default": date(2016, 1, 1),\n                 "widget": u"date",\n@@ -691,6 +744,7 @@ def test_datetime(self):\n             {\n                 "type": "string",\n                 "title": u"My field",\n+                "factory": u"Date/Time",\n                 "description": u"My great field",\n                 "widget": u"datetime",\n             },\ndiff --git a/src/plone/restapi/types/adapters.py b/src/plone/restapi/types/adapters.py\nindex a6602411f..1bbc91a50 100644\n--- a/src/plone/restapi/types/adapters.py\n+++ b/src/plone/restapi/types/adapters.py\n@@ -76,6 +76,10 @@ def get_schema(self):\n         if widget:\n             schema["widget"] = widget\n \n+        factory = self.get_factory()\n+        if factory:\n+            schema["factory"] = factory\n+\n         widget_options = self.get_widget_params()\n         if widget_options:\n             schema["widgetOptions"] = widget_options\n@@ -89,6 +93,9 @@ def get_schema(self):\n     def get_type(self):\n         raise NotImplementedError\n \n+    def get_factory(self):\n+        return None\n+\n     def get_widget(self):\n         return None\n \n@@ -109,6 +116,9 @@ class BytesLineJsonSchemaProvider(DefaultJsonSchemaProvider):\n     def get_type(self):\n         return "string"\n \n+    def get_factory(self):\n+        return "Text line (String)"\n+\n \n @adapter(ITextLine, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -126,6 +136,9 @@ def additional(self):\n     def get_type(self):\n         return "string"\n \n+    def get_factory(self):\n+        return "Text line (String)"\n+\n \n @adapter(IText, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -133,6 +146,9 @@ class TextJsonSchemaProvider(TextLineJsonSchemaProvider):\n     def get_widget(self):\n         return "textarea"\n \n+    def get_factory(self):\n+        return "Text"\n+\n \n @adapter(IEmail, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -140,6 +156,9 @@ class EmailJsonSchemaProvider(TextLineJsonSchemaProvider):\n     def get_widget(self):\n         return "email"\n \n+    def get_factory(self):\n+        return "Email"\n+\n \n @adapter(IPassword, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -147,6 +166,9 @@ class PasswordJsonSchemaProvider(TextLineJsonSchemaProvider):\n     def get_widget(self):\n         return "password"\n \n+    def get_factory(self):\n+        return "Password"\n+\n \n @adapter(IURI, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -154,6 +176,9 @@ class URIJsonSchemaProvider(TextLineJsonSchemaProvider):\n     def get_widget(self):\n         return "url"\n \n+    def get_factory(self):\n+        return "URL"\n+\n \n @adapter(IASCII, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -183,11 +208,13 @@ def additional(self):\n \n         return info\n \n+    def get_factory(self):\n+        return "Floating-point number"\n+\n \n @adapter(IDecimal, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n class DecimalJsonSchemaProvider(FloatJsonSchemaProvider):\n-\n     pass\n \n \n@@ -197,6 +224,9 @@ class IntegerJsonSchemaProvider(FloatJsonSchemaProvider):\n     def get_type(self):\n         return "integer"\n \n+    def get_factory(self):\n+        return "Integer"\n+\n \n @adapter(IBool, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -204,6 +234,9 @@ class BoolJsonSchemaProvider(DefaultJsonSchemaProvider):\n     def get_type(self):\n         return "boolean"\n \n+    def get_factory(self):\n+        return "Yes/No"\n+\n \n @adapter(ICollection, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -211,6 +244,20 @@ class CollectionJsonSchemaProvider(DefaultJsonSchemaProvider):\n     def get_type(self):\n         return "array"\n \n+    def get_factory(self):\n+        map = {\n+            "RelationList": "Relation List",\n+            "Set": "Multiple Choice",\n+            "List": "List",\n+            "Tuple": "Tuple",\n+        }\n+\n+        for key, value in map.items():\n+            if key in self.field.__repr__():\n+                return value\n+\n+        return "Collection"\n+\n     def get_items(self):\n         """Get items properties."""\n         value_type_adapter = getMultiAdapter(\n@@ -272,6 +319,14 @@ class ChoiceJsonSchemaProvider(DefaultJsonSchemaProvider):\n     def get_type(self):\n         return "string"\n \n+    def get_factory(self):\n+        map = {"RelationChoice": "Relation Choice", "Choice": "Choice"}\n+\n+        for key, value in map.items():\n+            if key in self.field.__repr__():\n+                return value\n+        return "Choice"\n+\n     def additional(self):\n         # Named global vocabulary\n         vocab_name = getattr(self.field, "vocabularyName", None)\n@@ -338,6 +393,12 @@ class ObjectJsonSchemaProvider(DefaultJsonSchemaProvider):\n     def get_type(self):\n         return "object"\n \n+    def get_factory(self):\n+        if self.field.schema.__name__ == "INamedBlobImage":\n+            return "Image"\n+        else:\n+            return "File"\n+\n     def get_properties(self):\n         if self.prefix:\n             prefix = ".".join([self.prefix, self.field.__name__])\n@@ -392,6 +453,9 @@ def get_type(self):\n     def get_widget(self):\n         return "richtext"\n \n+    def get_factory(self):\n+        return "Rich Text"\n+\n \n @adapter(IDate, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -412,6 +476,9 @@ def additional(self):\n     def get_widget(self):\n         return "date"\n \n+    def get_factory(self):\n+        return "Date"\n+\n \n @adapter(IDatetime, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -419,6 +486,9 @@ class DatetimeJsonSchemaProvider(DateJsonSchemaProvider):\n     def get_widget(self):\n         return "datetime"\n \n+    def get_factory(self):\n+        return "Date/Time"\n+\n \n @adapter(ITuple, Interface, Interface)\n @implementer(IJsonSchemaProvider)\n@@ -434,3 +504,6 @@ def get_type(self):\n \n     def get_widget(self):\n         return "json"\n+\n+    def get_factory(self):\n+        return "JSONField"\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 017a377b2..bac7e0f24 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -18,17 +18,53 @@\n from plone.autoform.form import AutoExtensibleForm\n from plone.autoform.interfaces import IParameterizedWidget\n from plone.autoform.interfaces import WIDGETS_KEY\n+from plone.behavior.interfaces import IBehavior\n+from plone.dexterity.interfaces import IDexterityContent\n+from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\n+from plone.i18n.normalizer import idnormalizer\n+from plone.restapi.interfaces import IFieldDeserializer\n from plone.restapi.serializer.converters import IJsonCompatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n+from plone.supermodel import serializeModel\n+from plone.supermodel.interfaces import FIELDSETS_KEY\n from plone.supermodel.utils import mergedTaggedValueDict\n+from plone.supermodel.utils import syncSchema\n from Products.CMFCore.utils import getToolByName\n from z3c.form import form as z3c_form\n+from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n from zope.component import queryMultiAdapter\n+from zope.component import queryUtility\n from zope.component.hooks import getSite\n from zope.globalrequest import getRequest\n from zope.i18n import translate\n+from zope.interface import implementer\n+from zope.schema.interfaces import IVocabularyFactory\n+\n+try:\n+    # Plone 5.1+\n+    from plone.dexterity.schema import splitSchemaName\n+except ImportError:\n+    # Plone 4.3\n+    from plone.dexterity.utils import splitSchemaName\n+\n+\n+_marker = []  # Create a new marker object.\n+\n+FIELD_PROPERTIES_MAPPING = {\n+    "minLength": "min_length",\n+    "maxLength": "max_length",\n+    "minItems": "min_length",\n+    "maxItems": "max_length",\n+    "minimum": "min",\n+    "maximum": "max",\n+}\n+\n+\n+@implementer(IDexterityContent)\n+class FakeDXContext(object):\n+    """Fake DX content class, so we can re-use the DX field deserializers"""\n \n \n def create_form(context, request, base_schema, additional_schemata=None):\n@@ -73,6 +109,7 @@ def get_form_fieldsets(form):\n                     context=getRequest(),\n                 ),\n                 "fields": fields_values,\n+                "behavior": "plone",\n             }\n         )\n \n@@ -82,6 +119,7 @@ def get_form_fieldsets(form):\n             "id": group.__name__,\n             "title": translate(group.label, context=getRequest()),\n             "fields": list(group.fields.values()),\n+            "behavior": "plone",\n         }\n         fieldsets.append(fieldset)\n     return fieldsets\n@@ -181,16 +219,23 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n         context, request, fieldsets, excluded_fields=excluded_fields\n     )\n \n-    # Determine required fields\n     required = []\n     for field in iter_fields(fieldsets):\n+        name = field.field.getName()\n+        # Determine required fields\n         if field.field.required:\n-            required.append(field.field.getName())\n+            required.append(name)\n \n-    # Include field modes\n-    for field in iter_fields(fieldsets):\n+        # Include field modes\n         if field.mode:\n-            properties[field.field.getName()]["mode"] = field.mode\n+            properties[name]["mode"] = field.mode\n+\n+        # Include behavior\n+        if name in properties:\n+            behavior = queryUtility(IBehavior, name=field.interface.__identifier__)\n+            properties[name]["behavior"] = (\n+                getattr(behavior, "name", None) or field.interface.__identifier__\n+            )\n \n     return {\n         "type": "object",\n@@ -230,3 +275,235 @@ def get_querysource_url(field, context, request):\n \n def get_source_url(field, context, request):\n     return get_vocab_like_url("@sources", field.getName(), context, request)\n+\n+\n+def serializeSchema(schema):\n+    """Taken from plone.app.dexterity.serialize\n+    Finds the FTI and model associated with a schema, and synchronizes\n+    the schema to the FTI model_source attribute.\n+    """\n+\n+    # determine portal_type\n+    try:\n+        prefix, portal_type, schemaName = splitSchemaName(schema.__name__)\n+    except ValueError:\n+        # not a dexterity schema\n+        return\n+\n+    # find the FTI and model\n+    fti = queryUtility(IDexterityFTI, name=portal_type)\n+    model = fti.lookupModel()\n+\n+    # synchronize changes to the model\n+    syncSchema(schema, model.schemata[schemaName], overwrite=True)\n+    fti.model_source = serializeModel(model)\n+\n+\n+def get_info_for_type(context, request, name):\n+    """Get JSON info for the given portal type"""\n+    schema = get_jsonschema_for_portal_type(name, getSite(), request)\n+\n+    if not hasattr(context, "schema"):\n+        return schema\n+\n+    # Get the empty fieldsets\n+    existing = set(f.get("id") for f in schema.get("fieldsets", []))\n+    generated = set()\n+    for fieldset in context.schema.queryTaggedValue(FIELDSETS_KEY, []):\n+        name = fieldset.__name__\n+        generated.add(name)\n+\n+        if name not in existing:\n+            info = get_info_for_fieldset(context, request, name)\n+            schema["fieldsets"].append(info)\n+            continue\n+\n+    # Update fieldset behavior\n+    for idx, tab in enumerate(schema.get("fieldsets", [])):\n+        if tab.get("id") in generated:\n+            schema["fieldsets"][idx]["behavior"] = "plone.dexterity.schema.generated"\n+\n+    return schema\n+\n+\n+def get_info_for_field(context, request, name):\n+    """Get JSON info for the given field name."""\n+    field = context.publishTraverse(request, name)\n+    adapter = queryMultiAdapter(\n+        (field.field, context, request), interface=IJsonSchemaProvider\n+    )\n+\n+    schema = adapter.get_schema()\n+    schema["behavior"] = context.schema.__identifier__\n+    return IJsonCompatible(schema)\n+\n+\n+def get_info_for_fieldset(context, request, name):\n+    """Get JSON info for the given fieldset name."""\n+    properties = {}\n+    for fieldset in context.schema.queryTaggedValue(FIELDSETS_KEY, []):\n+        if name != fieldset.__name__:\n+            continue\n+\n+        properties = {\n+            "id": fieldset.__name__,\n+            "title": fieldset.label,\n+            "description": fieldset.description,\n+            "fields": fieldset.fields,\n+            "behavior": "plone.dexterity.schema.generated",\n+        }\n+    return IJsonCompatible(properties)\n+\n+\n+def delete_field(context, request, name):\n+    field = context.publishTraverse(request, name)\n+    delete = queryMultiAdapter((field, request), name="delete")\n+    delete()\n+\n+\n+def delete_fieldset(context, request, name):\n+    """Taken from plone.schemaeditor 2.x `DeleteFieldset`"""\n+    new_fieldsets = []\n+    fieldsets = context.schema.queryTaggedValue(FIELDSETS_KEY, [])\n+    for fieldset in fieldsets:\n+        if fieldset.__name__ == name:\n+            # Can\'t delete fieldsets with fields\n+            if fieldset.fields:\n+                return\n+            continue\n+        new_fieldsets.append(fieldset)\n+\n+    # Nothing changed\n+    if len(fieldsets) == len(new_fieldsets):\n+        return\n+\n+    context.schema.setTaggedValue(FIELDSETS_KEY, new_fieldsets)\n+    serializeSchema(context.schema)\n+\n+\n+def add_fieldset(context, request, data):\n+    name = data.get("id", None)\n+    title = data.get("title", None)\n+    description = data.get("description", None)\n+\n+    if not name:\n+        name = idnormalizer.normalize(title).replace("-", "_")\n+\n+    # Default is reserved\n+    if name == "default":\n+        return {}\n+\n+    add = queryMultiAdapter((context, request), name="add-fieldset")\n+    properties = {"__name__": name, "label": title, "description": description}\n+    fieldset = add.form_instance.create(data=properties)\n+    add.form_instance.add(fieldset)\n+\n+    return get_info_for_fieldset(context, request, name)\n+\n+\n+def add_field(context, request, data):\n+    factory = data.get("factory", None)\n+    title = data.get("title", None)\n+    description = data.get("description", None)\n+    required = data.get("required", False)\n+    name = data.get("id", None)\n+    if not name:\n+        name = idnormalizer.normalize(title).replace("-", "_")\n+\n+    klass = None\n+    vocabulary = queryUtility(IVocabularyFactory, name="Fields")\n+    for term in vocabulary(context):\n+        if factory not in (term.title, term.token):\n+            continue\n+\n+        klass = term.value\n+        break\n+\n+    if not klass:\n+        raise BadRequest("Missing/Invalid parameter factory: %s" % factory)\n+\n+    add = queryMultiAdapter((context, request), name="add-field")\n+    properties = {\n+        "title": title,\n+        "__name__": name,\n+        "description": description,\n+        "factory": klass,\n+        "required": required,\n+    }\n+\n+    field = add.form_instance.create(data=properties)\n+    add.form_instance.add(field)\n+\n+    return get_info_for_field(context, request, name)\n+\n+\n+def update_fieldset(context, request, data):\n+    name = data.get("id", None)\n+    title = data.get("title", None)\n+    description = data.get("description", None)\n+    fields = data.get("fields", None)\n+\n+    if not name:\n+        name = idnormalizer.normalize(title).replace("-", "_")\n+\n+    # We can only re-order fields within the default fieldset\n+    if name == "default":\n+        pos = 0\n+        for field_name in fields:\n+            if field_name not in context.schema:\n+                continue\n+\n+            field = context.publishTraverse(request, field_name)\n+            order = queryMultiAdapter((field, request), name="order")\n+            order.move(pos, 0)\n+            pos += 1\n+        return\n+\n+    # Update fieldset\n+    fieldsets = context.schema.queryTaggedValue(FIELDSETS_KEY, [])\n+    for idx, fieldset in enumerate(fieldsets):\n+        if name != fieldset.__name__:\n+            continue\n+\n+        if title:\n+            fieldset.label = title\n+\n+        if description:\n+            fieldset.description = description\n+\n+        pos = 0\n+        for field_name in fields:\n+            if field_name not in context.schema:\n+                continue\n+\n+            field = context.publishTraverse(request, field_name)\n+            order = queryMultiAdapter((field, request), name="order")\n+            order.move(pos, idx + 1)\n+            pos += 1\n+\n+\n+def update_field(context, request, data):\n+    field = context.publishTraverse(request, data.pop("id"))\n+    edit = queryMultiAdapter((field, request), name="edit")\n+    default = data.pop("default", _marker)\n+\n+    properties = {}\n+    for key, value in data.items():\n+        key = FIELD_PROPERTIES_MAPPING.get(key, key)\n+        properties[key] = value\n+\n+    # clear current min/max to avoid range errors\n+    if "min" in properties:\n+        edit.form_instance.field.min = None\n+    if "max" in properties:\n+        edit.form_instance.field.max = None\n+\n+    edit.form_instance.updateFields()\n+    edit.form_instance.applyChanges(properties)\n+\n+    if default is not _marker:\n+        fake_context = FakeDXContext()\n+        deserializer = queryMultiAdapter(\n+            (field.field, fake_context, request), IFieldDeserializer\n+        )\n+        setattr(field.field, "default", deserializer(default))\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-09-15T14:52:43+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/f01ec6b8896a76d2877bb0ef3a29fb7964fac3f3

Merge pull request #985 from plone/eea-plone4-cpanels

Control Panels Plone 4 support

Files changed:
A news/984.feature
A src/plone/restapi/controlpanels/registry.py
M src/plone/restapi/controlpanels/__init__.py
M src/plone/restapi/controlpanels/types.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/services/controlpanels/configure.zcml
M src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py

b'diff --git a/news/984.feature b/news/984.feature\nnew file mode 100644\nindex 000000000..6597d0702\n--- /dev/null\n+++ b/news/984.feature\n@@ -0,0 +1 @@\n+- Enable Plone 4 Control Panels: Add-ons, Dexterity Content Types [avoinea]\ndiff --git a/src/plone/restapi/controlpanels/__init__.py b/src/plone/restapi/controlpanels/__init__.py\nindex 8585ab2af..ca4be6e04 100644\n--- a/src/plone/restapi/controlpanels/__init__.py\n+++ b/src/plone/restapi/controlpanels/__init__.py\n@@ -1,25 +1,8 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.interfaces.controlpanel import IDateAndTimeSchema\n-from Products.CMFPlone.interfaces.controlpanel import IEditingSchema\n-from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n-from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n-from Products.CMFPlone.interfaces.controlpanel import IMarkupSchema\n-from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISearchSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISecuritySchema\n-from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n-from Products.CMFPlone.interfaces.controlpanel import ISocialMediaSchema\n-from zope.component import adapter\n from zope.interface import implementer\n-from zope.interface import Interface\n from zope.publisher.interfaces import NotFound\n from plone.restapi.controlpanels.interfaces import IControlpanel\n-\n-try:\n-    from plone.i18n.interfaces import ILanguageSchema\n-except ImportError:  # pragma: no cover\n-    from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n+from Products.CMFCore.utils import getToolByName\n \n \n @implementer(IControlpanel)\n@@ -67,89 +50,3 @@ def update(self, names):\n \n     def delete(self, names):\n         raise NotFound(self.context, names, self.request)\n-\n-\n-# General\n-\n-\n-@adapter(Interface, Interface)\n-class DateTimeControlpanel(RegistryConfigletPanel):\n-    schema = IDateAndTimeSchema\n-    configlet_id = "DateAndTime"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class LanguageControlpanel(RegistryConfigletPanel):\n-    schema = ILanguageSchema\n-    configlet_id = "LanguageSettings"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class MailControlpanel(RegistryConfigletPanel):\n-    schema = IMailSchema\n-    configlet_id = "MailHost"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class NavigationControlpanel(RegistryConfigletPanel):\n-    schema = INavigationSchema\n-    configlet_id = "NavigationSettings"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class SiteControlpanel(RegistryConfigletPanel):\n-    schema = ISiteSchema\n-    configlet_id = "PloneReconfig"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class SearchControlpanel(RegistryConfigletPanel):\n-    schema = ISearchSchema\n-    configlet_id = "SearchSettings"\n-    configlet_category_id = "plone-general"\n-\n-\n-@adapter(Interface, Interface)\n-class SocialMediaControlpanel(RegistryConfigletPanel):\n-    schema = ISocialMediaSchema\n-    configlet_id = "socialmedia"\n-    configlet_category_id = "plone-general"\n-\n-\n-# Content\n-\n-\n-@adapter(Interface, Interface)\n-class EditingControlpanel(RegistryConfigletPanel):\n-    schema = IEditingSchema\n-    configlet_id = "EditingSettings"\n-    configlet_category_id = "plone-content"\n-\n-\n-@adapter(Interface, Interface)\n-class ImagingControlpanel(RegistryConfigletPanel):\n-    schema = IImagingSchema\n-    configlet_id = "ImagingSettings"\n-    configlet_category_id = "plone-content"\n-\n-\n-@adapter(Interface, Interface)\n-class MarkupControlpanel(RegistryConfigletPanel):\n-    schema = IMarkupSchema\n-    configlet_id = "MarkupSettings"\n-    configlet_category_id = "plone-content"\n-\n-\n-# Security\n-\n-\n-@adapter(Interface, Interface)\n-class SecurityControlpanel(RegistryConfigletPanel):\n-    schema = ISecuritySchema\n-    configlet_id = "SecuritySettings"\n-    configlet_category_id = "plone-security"\ndiff --git a/src/plone/restapi/controlpanels/registry.py b/src/plone/restapi/controlpanels/registry.py\nnew file mode 100644\nindex 000000000..f9bbce70a\n--- /dev/null\n+++ b/src/plone/restapi/controlpanels/registry.py\n@@ -0,0 +1,103 @@\n+# -*- coding: utf-8 -*-\n+from zope.component import adapter\n+from zope.interface import Interface\n+from Products.CMFPlone.interfaces.controlpanel import IDateAndTimeSchema\n+from Products.CMFPlone.interfaces.controlpanel import IEditingSchema\n+from Products.CMFPlone.interfaces.controlpanel import IImagingSchema\n+from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n+from Products.CMFPlone.interfaces.controlpanel import IMarkupSchema\n+from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n+from Products.CMFPlone.interfaces.controlpanel import ISearchSchema\n+from Products.CMFPlone.interfaces.controlpanel import ISecuritySchema\n+from Products.CMFPlone.interfaces.controlpanel import ISiteSchema\n+from Products.CMFPlone.interfaces.controlpanel import ISocialMediaSchema\n+from plone.restapi.controlpanels import RegistryConfigletPanel\n+\n+try:\n+    from plone.i18n.interfaces import ILanguageSchema\n+except ImportError:  # pragma: no cover\n+    from Products.CMFPlone.interfaces.controlpanel import ILanguageSchema\n+\n+\n+# General\n+@adapter(Interface, Interface)\n+class DateTimeControlpanel(RegistryConfigletPanel):\n+    schema = IDateAndTimeSchema\n+    configlet_id = "DateAndTime"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class LanguageControlpanel(RegistryConfigletPanel):\n+    schema = ILanguageSchema\n+    configlet_id = "LanguageSettings"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class MailControlpanel(RegistryConfigletPanel):\n+    schema = IMailSchema\n+    configlet_id = "MailHost"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class NavigationControlpanel(RegistryConfigletPanel):\n+    schema = INavigationSchema\n+    configlet_id = "NavigationSettings"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class SiteControlpanel(RegistryConfigletPanel):\n+    schema = ISiteSchema\n+    configlet_id = "PloneReconfig"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class SearchControlpanel(RegistryConfigletPanel):\n+    schema = ISearchSchema\n+    configlet_id = "SearchSettings"\n+    configlet_category_id = "plone-general"\n+\n+\n+@adapter(Interface, Interface)\n+class SocialMediaControlpanel(RegistryConfigletPanel):\n+    schema = ISocialMediaSchema\n+    configlet_id = "socialmedia"\n+    configlet_category_id = "plone-general"\n+\n+\n+# Content\n+\n+\n+@adapter(Interface, Interface)\n+class EditingControlpanel(RegistryConfigletPanel):\n+    schema = IEditingSchema\n+    configlet_id = "EditingSettings"\n+    configlet_category_id = "plone-content"\n+\n+\n+@adapter(Interface, Interface)\n+class ImagingControlpanel(RegistryConfigletPanel):\n+    schema = IImagingSchema\n+    configlet_id = "ImagingSettings"\n+    configlet_category_id = "plone-content"\n+\n+\n+@adapter(Interface, Interface)\n+class MarkupControlpanel(RegistryConfigletPanel):\n+    schema = IMarkupSchema\n+    configlet_id = "MarkupSettings"\n+    configlet_category_id = "plone-content"\n+\n+\n+# Security\n+\n+\n+@adapter(Interface, Interface)\n+class SecurityControlpanel(RegistryConfigletPanel):\n+    schema = ISecuritySchema\n+    configlet_id = "SecuritySettings"\n+    configlet_category_id = "plone-security"\ndiff --git a/src/plone/restapi/controlpanels/types.py b/src/plone/restapi/controlpanels/types.py\nindex 2e6dc96a9..ab9bcf315 100644\n--- a/src/plone/restapi/controlpanels/types.py\n+++ b/src/plone/restapi/controlpanels/types.py\n@@ -14,6 +14,9 @@\n import plone.protect.interfaces\n from zope.interface import noLongerProvides\n from plone.restapi.interfaces import IPloneRestapiLayer\n+from Products.CMFPlone.utils import getFSVersionTuple\n+\n+PLONE5 = getFSVersionTuple()[0] >= 5\n \n \n @adapter(Interface, IPloneRestapiLayer)\n@@ -21,7 +24,7 @@\n class DexterityTypesControlpanel(RegistryConfigletPanel):\n     schema = Interface\n     configlet_id = "dexterity-types"\n-    configlet_category_id = "plone-content"\n+    configlet_category_id = "plone-content" if PLONE5 else "Plone"\n \n     def add(self, names):\n         data = json_body(self.request)\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 192924757..6f48a5dd5 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -44,8 +44,6 @@\n     <adapter factory=".atfields.ReferenceFieldDeserializer" />\n   </configure>\n \n-  <configure zcml:condition="have plone-5">\n-    <include package=".controlpanels" />\n-  </configure>\n+  <include package=".controlpanels" />\n \n </configure>\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 19bee244f..956a8ed85 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -6,7 +6,7 @@\n     <adapter factory=".site.SerializeSiteRootToJson" />\n     <adapter factory=".dxcontent.SerializeToJson" />\n     <adapter factory=".dxcontent.SerializeFolderToJson" />\n-    <adapter \n+    <adapter\n         factory=".dxcontent.DexterityObjectPrimaryFieldTarget" />\n \n     <configure zcml:condition="installed plone.app.contenttypes">\n@@ -99,8 +99,6 @@\n         <adapter factory=".tile.TileSerializeToJson" />\n     </configure>\n \n-    <configure zcml:condition="have plone-5">\n-        <include package=".controlpanels" />\n-    </configure>\n+    <include package=".controlpanels" />\n \n </configure>\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 254d310c9..090c3059d 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -7,13 +7,10 @@\n \n   <include package=".auth" />\n   <include package=".actions" />\n-  <include package=".addons"\n-      zcml:condition="have plone-5"/>\n+  <include package=".addons" />\n   <include package=".breadcrumbs"/>\n   <include package=".content"/>\n-  <configure zcml:condition="have plone-5">\n-    <include package=".controlpanels" />\n-  </configure>\n+  <include package=".controlpanels" />\n   <include package=".copymove"/>\n   <include package=".database"/>\n   <include package=".discussion"/>\ndiff --git a/src/plone/restapi/services/controlpanels/configure.zcml b/src/plone/restapi/services/controlpanels/configure.zcml\nindex d17f8ee14..db3cf356c 100644\n--- a/src/plone/restapi/services/controlpanels/configure.zcml\n+++ b/src/plone/restapi/services/controlpanels/configure.zcml\n@@ -45,57 +45,62 @@\n     permission="plone.app.controlpanel.Overview"\n     />\n \n-<!-- General -->\n+  <!-- Dexterity Types Controlpanel -->\n   <adapter\n-    factory="plone.restapi.controlpanels.DateTimeControlpanel"\n-    name="date-and-time" />\n+    factory="plone.restapi.controlpanels.types.DexterityTypesControlpanel"\n+    provides="plone.restapi.controlpanels.interfaces.IDexterityTypesControlpanel"\n+    name="dexterity-types" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.LanguageControlpanel"\n-    name="language" />\n+  <configure zcml:condition="have plone-5">\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.MailControlpanel"\n-    name="mail" />\n+    <!-- General -->\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.DateTimeControlpanel"\n+      name="date-and-time" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.NavigationControlpanel"\n-    name="navigation" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.LanguageControlpanel"\n+      name="language" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.SiteControlpanel"\n-    name="site" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.MailControlpanel"\n+      name="mail" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.SearchControlpanel"\n-    name="search" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.NavigationControlpanel"\n+      name="navigation" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.SocialMediaControlpanel"\n-    name="socialmedia" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SiteControlpanel"\n+      name="site" />\n \n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SearchControlpanel"\n+      name="search" />\n \n-<!-- Content -->\n-  <adapter\n-    factory="plone.restapi.controlpanels.EditingControlpanel"\n-    name="editing" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SocialMediaControlpanel"\n+      name="socialmedia" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.ImagingControlpanel"\n-    name="imaging" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.MarkupControlpanel"\n-    name="markup" />\n+    <!-- Content -->\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.EditingControlpanel"\n+      name="editing" />\n \n-  <adapter\n-    factory="plone.restapi.controlpanels.types.DexterityTypesControlpanel"\n-    provides="plone.restapi.controlpanels.interfaces.IDexterityTypesControlpanel"\n-    name="dexterity-types" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.ImagingControlpanel"\n+      name="imaging" />\n \n-<!-- Security -->\n-  <adapter\n-    factory="plone.restapi.controlpanels.SecurityControlpanel"\n-    name="security" />\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.MarkupControlpanel"\n+      name="markup" />\n+\n+    <!-- Security -->\n+    <adapter\n+      factory="plone.restapi.controlpanels.registry.SecurityControlpanel"\n+      name="security" />\n+\n+  </configure>\n \n </configure>\ndiff --git a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\nindex f67a8cd11..e520bb1b2 100644\n--- a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n+++ b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n@@ -5,19 +5,9 @@\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n-\n import unittest\n \n \n-try:\n-    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n-except ImportError:\n-    PLONE5 = False\n-else:\n-    PLONE5 = True\n-\n-\n-@unittest.skipIf(not PLONE5, "Endpoint works for Plone 5 only")\n class TestDexterityTypesControlpanel(unittest.TestCase):\n \n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n'

