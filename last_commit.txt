Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-07-12T18:42:14+02:00
Author: Roman (folix-01) <72063601+folix-01@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/2100a4503769a51852d64d4d3b18823ca84dc4d9

Use plone.app.multilingual conditionally (#1643)

* Removed the hard code dependencies on plone.app.multilingual, now it is
being used conditionally

* Add changelog

* Code formatting

* Update src/plone/restapi/services/configure.zcml

Co-authored-by: Jens W. Klein &lt;jk@kleinundpartner.at&gt;

* Zprettied

* Update test_documentation.py

* cleanup

* remove leftovers for Plone 4 BBB while at it

---------

Co-authored-by: Jens W. Klein &lt;jk@kleinundpartner.at&gt;
Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;

Files changed:
A news/1639.bugfix
M src/plone/restapi/__init__.py
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/services/content/add.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_translations.py
M src/plone/restapi/types/utils.py

b'diff --git a/news/1639.bugfix b/news/1639.bugfix\nnew file mode 100644\nindex 000000000..4923c63d3\n--- /dev/null\n+++ b/news/1639.bugfix\n@@ -0,0 +1,2 @@\n+Remove the hard code dependency by plone.app.multilingual, use it conditionaly instead\n+[@folix-01]\ndiff --git a/src/plone/restapi/__init__.py b/src/plone/restapi/__init__.py\nindex 303836933..ba8cb1604 100644\n--- a/src/plone/restapi/__init__.py\n+++ b/src/plone/restapi/__init__.py\n@@ -4,6 +4,13 @@\n from Products.PluggableAuthService.PluggableAuthService import registerMultiPlugin\n from zope.i18nmessageid import MessageFactory\n \n+import pkg_resources\n+\n+try:\n+    pkg_resources.get_distribution("plone.app.multilingual")\n+    HAS_MULTILINGUAL = True\n+except pkg_resources.DistributionNotFound:\n+    HAS_MULTILINGUAL = False\n \n _ = MessageFactory("plone.restapi")\n PROJECT_NAME = "plone.restapi"\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex f22f4a207..2096fd818 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -48,10 +48,9 @@\n       package=".workingcopy"\n       zcml:condition="installed plone.app.iterate"\n       />\n-  <include\n-      package=".multilingual"\n-      zcml:condition="have plone-5"\n-      />\n+  <configure zcml:condition="installed plone.app.multilingual">\n+    <include package=".multilingual" />\n+  </configure>\n   <include\n       package=".email_notification"\n       zcml:condition="have plone-5"\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex cdceab057..572fbbbed 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -1,8 +1,7 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from Acquisition.interfaces import IAcquirer\n-from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n-from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.restapi import HAS_MULTILINGUAL\n from plone.restapi.bbb import safe_hasattr\n from plone.restapi.deserializer import json_body\n from plone.restapi.exceptions import DeserializationError\n@@ -23,6 +22,10 @@\n \n import plone.protect.interfaces\n \n+if HAS_MULTILINGUAL:\n+    from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled\n+    from plone.app.multilingual.interfaces import ITranslationManager\n+\n \n class FolderPost(Service):\n     """Creates a new content object."""\n@@ -94,7 +97,8 @@ def reply(self):\n \n         # Link translation given the translation_of property\n         if (\n-            IPloneAppMultilingualInstalled.providedBy(self.request)\n+            HAS_MULTILINGUAL\n+            and IPloneAppMultilingualInstalled.providedBy(self.request)\n             and translation_of\n             and language\n         ):\ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex 75950efe6..7ed7c0358 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -115,7 +115,6 @@ def tearDown(self):\n \n \n class PloneRestApiDXLayer(PloneSandboxLayer):\n-\n     defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE)\n \n     def setUpZope(self, app, configurationContext):\n@@ -159,7 +158,6 @@ def setUpPloneSite(self, portal):\n \n \n class PloneRestApiTestWorkflowsLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\n@@ -174,7 +172,6 @@ def setUpPloneSite(self, portal):\n \n \n class PloneRestApiDXPAMLayer(PloneSandboxLayer):\n-\n     defaultBases = (DATE_TIME_FIXTURE, PLONE_APP_CONTENTTYPES_FIXTURE)\n \n     def setUpZope(self, app, configurationContext):\n@@ -217,7 +214,6 @@ def setUpPloneSite(self, portal):\n if PloneAppCachingBase is not None:\n     # condition and fallback can be removed in a Plone 6.0 only scenario\n     class PloneRestApiCachingLayer(PloneAppCachingBase):\n-\n         defaultBases = [\n             PLONE_RESTAPI_DX_PAM_FIXTURE,\n         ]\n@@ -240,7 +236,6 @@ class PloneRestApiCachingLayer(PloneAppCachingBase):\n \n \n class PloneRestApiDXIterateLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONEAPPITERATEDEX_FIXTURE,)\n \n     def setUpZope(self, app, configurationContext):\n@@ -264,7 +259,6 @@ def setUpZope(self, app, configurationContext):\n \n \n class PloneRestApIBlocksLayer(PloneSandboxLayer):\n-\n     defaultBases = (PLONE_RESTAPI_DX_FIXTURE,)\n \n     def setUpPloneSite(self, portal):\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 0a057161a..a99b84856 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -7,6 +7,7 @@\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n from plone.app.multilingual.interfaces import ITranslationManager\n+from plone.app.testing import applyProfile\n from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n@@ -35,6 +36,7 @@\n from plone.app.testing import pushGlobalRegistry\n from plone.restapi.testing import register_static_uuid_utility\n from zope.component.hooks import getSite\n+\n import collections\n import json\n import os\n@@ -213,7 +215,6 @@ def tearDown(self):\n \n \n class TestDocumentation(TestDocumentationBase):\n-\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n@@ -1746,7 +1747,6 @@ def test_site_get(self):\n \n \n class TestDocumentationMessageTranslations(TestDocumentationBase):\n-\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n@@ -1803,7 +1803,6 @@ def test_translate_messages_addons(self):\n \n \n class TestCommenting(TestDocumentationBase):\n-\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\n@@ -2072,7 +2071,6 @@ def test_aliases_root_filter(self):\n \n \n class TestControlPanelDocumentation(TestDocumentationBase):\n-\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def test_controlpanels_get_listing(self):\n@@ -2130,13 +2128,20 @@ def test_controlpanels_crud_dexterity(self):\n \n \n class TestPAMDocumentation(TestDocumentationBase):\n-\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         super().setUp()\n \n-        #\n+        language_tool = api.portal.get_tool("portal_languages")\n+        language_tool.addSupportedLanguage("en")\n+        language_tool.addSupportedLanguage("es")\n+        language_tool.addSupportedLanguage("de")\n+        if api.portal.get().portal_setup.profileExists(\n+            "plone.app.multilingual:default"\n+        ):\n+            applyProfile(self.portal, "plone.app.multilingual:default")\n+\n         # We manually set the UIDs for LRFs here because the static uuid\n         # generator is not applied for LRFs.\n         # When we have tried to apply it for LRFs we have had several\n@@ -2248,7 +2253,6 @@ def test_site_expansion_navroot_language_folder_content(self):\n \n \n class TestIterateDocumentation(TestDocumentationBase):\n-\n     layer = PLONE_RESTAPI_ITERATE_FUNCTIONAL_TESTING\n \n     def setUp(self):\n@@ -2352,7 +2356,6 @@ def test_documentation_schema_user(self):\n \n \n class TestRules(TestDocumentationBase):\n-\n     layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n \n     def setUp(self):\ndiff --git a/src/plone/restapi/tests/test_translations.py b/src/plone/restapi/tests/test_translations.py\nindex 3ad6b7865..c32f72eff 100644\n--- a/src/plone/restapi/tests/test_translations.py\n+++ b/src/plone/restapi/tests/test_translations.py\n@@ -5,6 +5,7 @@\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi import HAS_MULTILINGUAL\n from plone.restapi.bbb import ILanguage\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING\n@@ -17,10 +18,12 @@\n \n \n class TestTranslationInfo(unittest.TestCase):\n-\n     layer = PLONE_RESTAPI_DX_PAM_INTEGRATION_TESTING\n \n     def setUp(self):\n+        if not HAS_MULTILINGUAL:\n+            return self.skipTest("The plone.app.multilingual is not installed")\n+\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n@@ -35,7 +38,8 @@ def setUp(self):\n \n     def test_translation_info_includes_translations(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request), name="GET_application_json_@translations"\n+            (self.en_content, self.request),\n+            name="GET_application_json_@translations",\n         )\n \n         info = tinfo.reply()\n@@ -44,7 +48,8 @@ def test_translation_info_includes_translations(self):\n \n     def test_correct_translation_information(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request), name="GET_application_json_@translations"\n+            (self.en_content, self.request),\n+            name="GET_application_json_@translations",\n         )\n \n         info = tinfo.reply()\n@@ -56,7 +61,8 @@ def test_correct_translation_information(self):\n \n     def test_translation_info_includes_root_translations(self):\n         tinfo = getMultiAdapter(\n-            (self.en_content, self.request), name="GET_application_json_@translations"\n+            (self.en_content, self.request),\n+            name="GET_application_json_@translations",\n         )\n \n         info = tinfo.reply()\n@@ -68,6 +74,9 @@ class TestLinkContentsAsTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_MULTILINGUAL:\n+            return self.skipTest("The plone.app.multilingual is not installed")\n+\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n@@ -171,7 +180,9 @@ def test_get_translations_on_content_with_no_permissions(self):\n         response = response.json()\n         self.assertTrue(len(response["items"]) == 0)\n \n-    def test_link_translation_with_an_already_translated_content_returns_400(self):\n+    def test_link_translation_with_an_already_translated_content_returns_400(\n+        self,\n+    ):\n         ITranslationManager(self.en_content).register_translation("es", self.es_content)\n         transaction.commit()\n         response = requests.post(\n@@ -228,6 +239,9 @@ class TestUnLinkContentTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_MULTILINGUAL:\n+            return self.skipTest("The plone.app.multilingual is not installed")\n+\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n@@ -252,7 +266,8 @@ def test_translation_unlinking_succeeds(self):\n         transaction.begin()\n         manager = ITranslationManager(self.en_content)\n         self.assertNotIn(\n-            ILanguage(self.es_content).get_language(), list(manager.get_translations())\n+            ILanguage(self.es_content).get_language(),\n+            list(manager.get_translations()),\n         )\n \n     def test_calling_endpoint_without_language_gives_400(self):\n@@ -293,6 +308,9 @@ class TestCreateContentsAsTranslations(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_MULTILINGUAL:\n+            return self.skipTest("The plone.app.multilingual is not installed")\n+\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n         alsoProvides(self.layer["request"], IPloneAppMultilingualInstalled)\n@@ -332,6 +350,9 @@ class TestTranslationLocator(unittest.TestCase):\n     layer = PLONE_RESTAPI_DX_PAM_FUNCTIONAL_TESTING\n \n     def setUp(self):\n+        if not HAS_MULTILINGUAL:\n+            return self.skipTest("The plone.app.multilingual is not installed")\n+\n         self.portal = self.layer["portal"]\n         self.portal_url = self.portal.absolute_url()\n         self.request = self.layer["request"]\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex 2977ef6e1..b3f78c991 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -14,7 +14,6 @@\n \n from collections import OrderedDict\n from copy import copy\n-from plone.app.multilingual.dx.interfaces import MULTILINGUAL_KEY\n from plone.autoform.form import AutoExtensibleForm\n from plone.autoform.interfaces import IParameterizedWidget\n from plone.autoform.interfaces import WIDGETS_KEY\n@@ -22,10 +21,12 @@\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\n+from plone.dexterity.schema import splitSchemaName\n from plone.i18n.normalizer import idnormalizer\n from plone.restapi.interfaces import IFieldDeserializer\n from plone.restapi.serializer.converters import IJsonCompatible\n from plone.restapi.types.interfaces import IJsonSchemaProvider\n+from plone.restapi import HAS_MULTILINGUAL\n from plone.supermodel import serializeModel\n from plone.supermodel.interfaces import FIELDSETS_KEY\n from plone.supermodel.utils import mergedTaggedValueDict\n@@ -43,14 +44,8 @@\n from zope.interface import implementer\n from zope.schema.interfaces import IVocabularyFactory\n \n-\n-try:\n-    # Plone 5.1+\n-    from plone.dexterity.schema import splitSchemaName\n-except ImportError:\n-    # Plone 4.3\n-    from plone.dexterity.utils import splitSchemaName\n-\n+if HAS_MULTILINGUAL:\n+    from plone.app.multilingual.dx.interfaces import MULTILINGUAL_KEY\n \n _marker = []  # Create a new marker object.\n \n@@ -203,6 +198,8 @@ def get_widget_params(schemas):\n \n \n def get_multilingual_directives(schemas):\n+    if not HAS_MULTILINGUAL:\n+        return {}\n     params = {}\n     for schema in schemas:\n         if not schema:\n'

