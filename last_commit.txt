Repository: plone.app.theming


Branch: refs/heads/4.1.x
Date: 2022-07-29T14:45:14-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/3fbb0b3cc6f5e18d5b8153187319acd25dd351ef

Make sure Parameters Expressions are string when saving custom styles. fixes gh-209

Files changed:
A news/209.bugfix
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py

b'diff --git a/news/209.bugfix b/news/209.bugfix\nnew file mode 100644\nindex 00000000..0b6f1767\n--- /dev/null\n+++ b/news/209.bugfix\n@@ -0,0 +1,2 @@\n+Make sure Parameters Expressions are string when saving custom styles\n+[frapell]\ndiff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex 89665e7d..6dd226c5 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -488,9 +488,7 @@\n \n                     <div\n                         tal:define="error errors/parameterExpressions | nothing;\n-                                    parameterExpressions python:view.theme_settings.parameterExpressions or {};\n-                                    parameterExpressions python:[\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()];\n-                                    parameterExpressions python:request.get(\'parameterExpressions\', parameterExpressions)"\n+                                    parameterExpressions view/parameterExpressions"\n                         tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                         <label for="parameterExpressions" i18n:translate="label_parameter_expressions">Parameter expressions</label>\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 746d6ea4..b9d74e97 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -68,6 +68,18 @@ def hostname_blacklist(self):\n             return hostname_blacklist\n         return [safe_nativestring(host) for host in hostname_blacklist]\n \n+    @property\n+    def parameterExpressions(self):\n+        parameterExpressions = self.theme_settings.parameterExpressions or {}\n+        parameterExpressions = [\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()]\n+        parameterExpressions = self.request.get(\'parameterExpressions\', parameterExpressions)\n+        results = list()\n+        for elem in parameterExpressions:\n+            if isinstance(elem, six.binary_type):\n+                elem = elem.decode(\'utf-8\')\n+            results.append(elem)\n+        return results\n+\n     def __call__(self):\n         self.pskin = getToolByName(self.context, \'portal_skins\')\n         if self.update():\n@@ -188,6 +200,8 @@ def update(self):\n \n             for line in parameterExpressionsList:\n                 try:\n+                    if isinstance(line, six.binary_type):\n+                        line = line.decode(\'utf-8\')\n                     name, expression = line.split(\'=\', 1)\n                     name = str(name.strip())\n                     expression = str(expression.strip())\n'

Repository: plone.app.theming


Branch: refs/heads/4.1.x
Date: 2022-08-25T09:21:48-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/4e7d6a10767d66a21627a967f7a97830471b75ec

Only call `.decode()` when on Py3

Files changed:
M src/plone/app/theming/browser/controlpanel.py

b"diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex b9d74e9..78e0a01 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -200,7 +200,7 @@ def update(self):\n \n             for line in parameterExpressionsList:\n                 try:\n-                    if isinstance(line, six.binary_type):\n+                    if six.PY3 and isinstance(line, six.binary_type):\n                         line = line.decode('utf-8')\n                     name, expression = line.split('=', 1)\n                     name = str(name.strip())\n"

Repository: plone.app.theming


Branch: refs/heads/4.1.x
Date: 2022-08-25T10:28:17-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/plone.app.theming/commit/9841ce23bd68fec9454380be26daf0d81083df53

Merge pull request #210 from plone/frapell-bytes-params

Make sure Parameters Expressions are string when saving custom styles

Files changed:
A news/209.bugfix
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py

b'diff --git a/news/209.bugfix b/news/209.bugfix\nnew file mode 100644\nindex 00000000..0b6f1767\n--- /dev/null\n+++ b/news/209.bugfix\n@@ -0,0 +1,2 @@\n+Make sure Parameters Expressions are string when saving custom styles\n+[frapell]\ndiff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex 89665e7d..6dd226c5 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -488,9 +488,7 @@\n \n                     <div\n                         tal:define="error errors/parameterExpressions | nothing;\n-                                    parameterExpressions python:view.theme_settings.parameterExpressions or {};\n-                                    parameterExpressions python:[\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()];\n-                                    parameterExpressions python:request.get(\'parameterExpressions\', parameterExpressions)"\n+                                    parameterExpressions view/parameterExpressions"\n                         tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                         <label for="parameterExpressions" i18n:translate="label_parameter_expressions">Parameter expressions</label>\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 746d6ea4..78e0a014 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -68,6 +68,18 @@ def hostname_blacklist(self):\n             return hostname_blacklist\n         return [safe_nativestring(host) for host in hostname_blacklist]\n \n+    @property\n+    def parameterExpressions(self):\n+        parameterExpressions = self.theme_settings.parameterExpressions or {}\n+        parameterExpressions = [\'%s = %s\' % (k,v) for k,v in parameterExpressions.items()]\n+        parameterExpressions = self.request.get(\'parameterExpressions\', parameterExpressions)\n+        results = list()\n+        for elem in parameterExpressions:\n+            if isinstance(elem, six.binary_type):\n+                elem = elem.decode(\'utf-8\')\n+            results.append(elem)\n+        return results\n+\n     def __call__(self):\n         self.pskin = getToolByName(self.context, \'portal_skins\')\n         if self.update():\n@@ -188,6 +200,8 @@ def update(self):\n \n             for line in parameterExpressionsList:\n                 try:\n+                    if six.PY3 and isinstance(line, six.binary_type):\n+                        line = line.decode(\'utf-8\')\n                     name, expression = line.split(\'=\', 1)\n                     name = str(name.strip())\n                     expression = str(expression.strip())\n'

