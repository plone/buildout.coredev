Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2021-09-08T16:18:39+02:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.app.discussion/commit/6f3fa11f10cad4163ed37a4f13ae638244cadf9a

Implement events for Comment (ICommentModifiedEvent) and Reply(IReplyModifiedEvent) modification

Files changed:
A news/183.feature
M plone/app/discussion/comment.py
M plone/app/discussion/events.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/subscribers.zcml
M plone/app/discussion/tests/test_events.py

b'diff --git a/news/183.feature b/news/183.feature\nnew file mode 100644\nindex 00000000..013640b0\n--- /dev/null\n+++ b/news/183.feature\n@@ -0,0 +1 @@\n+Implement events for Comment (ICommentModifiedEvent) and Reply(IReplyModifiedEvent) modification [ericof]\n\\ No newline at end of file\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 41d430fa..cc1099f9 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -13,8 +13,10 @@\n from persistent import Persistent\n from plone.app.discussion import _\n from plone.app.discussion.events import CommentAddedEvent\n+from plone.app.discussion.events import CommentModifiedEvent\n from plone.app.discussion.events import CommentRemovedEvent\n from plone.app.discussion.events import ReplyAddedEvent\n+from plone.app.discussion.events import ReplyModifiedEvent\n from plone.app.discussion.events import ReplyRemovedEvent\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n@@ -258,6 +260,16 @@ def notify_comment_added(obj, event):\n     return notify(CommentAddedEvent(context, obj))\n \n \n+def notify_comment_modified(obj, event):\n+    """ Notify custom discussion events when a comment, or a reply, is modified\n+    """\n+    conversation = aq_parent(obj)\n+    context = aq_parent(conversation)\n+    if getattr(obj, \'in_reply_to\', None):\n+        return notify(ReplyModifiedEvent(context, obj))\n+    return notify(CommentModifiedEvent(context, obj))\n+\n+\n def notify_comment_removed(obj, event):\n     """ Notify custom discussion events when a comment or reply is removed\n     """\ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex 08925bb7..e2ecc023 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -2,12 +2,14 @@\n """ Custom discussion events\n """\n from plone.app.discussion.interfaces import ICommentAddedEvent\n+from plone.app.discussion.interfaces import ICommentModifiedEvent\n from plone.app.discussion.interfaces import ICommentRemovedEvent\n from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import ICommentDeletedEvent\n from plone.app.discussion.interfaces import ICommentPublishedEvent\n from plone.app.discussion.interfaces import ICommentTransitionEvent\n from plone.app.discussion.interfaces import IReplyAddedEvent\n+from plone.app.discussion.interfaces import IReplyModifiedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\n from zope.interface import implementer\n \n@@ -35,6 +37,12 @@ class CommentAddedEvent(DiscussionEvent):\n     """\n \n \n+@implementer(ICommentModifiedEvent)\n+class CommentModifiedEvent(DiscussionEvent):\n+    """ Event to be triggered when a Comment is modified\n+    """\n+\n+\n @implementer(ICommentRemovedEvent)\n class CommentRemovedEvent(DiscussionEvent):\n     """ Event to be triggered when a Comment is removed\n@@ -47,6 +55,12 @@ class ReplyAddedEvent(DiscussionEvent):\n     """\n \n \n+@implementer(IReplyModifiedEvent)\n+class ReplyModifiedEvent(DiscussionEvent):\n+    """ Event to be triggered when a Comment reply is modified\n+    """\n+\n+\n @implementer(IReplyRemovedEvent)\n class ReplyRemovedEvent(DiscussionEvent):\n     """ Event to be triggered when a Comment reply is removed\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex c03c0bbc..76a0cee5 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -399,6 +399,11 @@ class ICommentAddedEvent(IDiscussionEvent):\n     """\n \n \n+class ICommentModifiedEvent(IDiscussionEvent):\n+    """ Comment modified\n+    """\n+\n+\n class ICommentRemovedEvent(IDiscussionEvent):\n     """ Comment removed\n     """\n@@ -409,6 +414,11 @@ class IReplyAddedEvent(IDiscussionEvent):\n     """\n \n \n+class IReplyModifiedEvent(IDiscussionEvent):\n+    """ Comment reply modified\n+    """\n+\n+\n class IReplyRemovedEvent(IDiscussionEvent):\n     """ Comment reply removed\n     """\ndiff --git a/plone/app/discussion/subscribers.zcml b/plone/app/discussion/subscribers.zcml\nindex 20e1b7f5..85e74e2a 100644\n--- a/plone/app/discussion/subscribers.zcml\n+++ b/plone/app/discussion/subscribers.zcml\n@@ -9,6 +9,12 @@\n         handler=".comment.notify_workflow"\n         />\n \n+    <subscriber\n+        for="plone.app.discussion.interfaces.IComment\n+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+        handler=".comment.notify_comment_modified"\n+        />\n+\n     <subscriber\n         for="plone.app.discussion.interfaces.IComment\n              zope.lifecycleevent.interfaces.IObjectAddedEvent"\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex 860e6de4..3742c768 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -6,6 +6,8 @@\n from plone.app.testing import TEST_USER_ID\n from Zope2.App import zcml\n from zope.component import createObject\n+from zope.event import notify\n+from zope.lifecycleevent import ObjectModifiedEvent\n \n import Products.Five\n import unittest\n@@ -20,8 +22,10 @@ class EventsRegistry(object):\n     """ Fake registry to be used while testing discussion events\n     """\n     commentAdded = False\n+    commentModified = False\n     commentRemoved = False\n     replyAdded = False\n+    replyModified = False\n     replyRemoved = False\n \n #\n@@ -33,6 +37,10 @@ def comment_added(doc, evt):\n     EventsRegistry.commentAdded = True\n \n \n+def comment_modified(doc, evt):\n+    EventsRegistry.commentModified = True\n+\n+\n def comment_removed(doc, evt):\n     EventsRegistry.commentRemoved = True\n \n@@ -41,6 +49,10 @@ def reply_added(doc, evt):\n     EventsRegistry.replyAdded = True\n \n \n+def reply_modified(doc, evt):\n+    EventsRegistry.replyModified = True\n+\n+\n def reply_removed(doc, evt):\n     EventsRegistry.replyRemoved = True\n \n@@ -78,6 +90,12 @@ def setUp(self):\n             handler="plone.app.discussion.tests.test_events.comment_added"\n             />\n \n+          <subscriber\n+            for="plone.app.discussion.interfaces.IComment\n+                 zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+            handler="plone.app.discussion.tests.test_events.comment_modified"\n+            />\n+\n           <subscriber\n             for="OFS.interfaces.ISimpleItem\n                  plone.app.discussion.interfaces.ICommentRemovedEvent"\n@@ -96,6 +114,18 @@ def test_addEvent(self):\n         conversation.addComment(comment)\n         self.assertTrue(self.registry.commentAdded)\n \n+    def test_modifyEvent(self):\n+        self.assertFalse(self.registry.commentModified)\n+        comment = createObject(\'plone.Comment\')\n+        conversation = IConversation(self.document)\n+        new_id = conversation.addComment(comment)\n+        comment = self.document.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id),\n+        )\n+        comment.text = "foo"\n+        notify(ObjectModifiedEvent(comment))\n+        self.assertTrue(self.registry.commentModified)\n+\n     def test_removedEvent(self):\n         self.assertFalse(self.registry.commentRemoved)\n         comment = createObject(\'plone.Comment\')\n@@ -131,6 +161,12 @@ def setUp(self):\n             handler="plone.app.discussion.tests.test_events.reply_added"\n             />\n \n+          <subscriber\n+            for="plone.app.discussion.interfaces.IComment\n+                 zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+            handler="plone.app.discussion.tests.test_events.reply_modified"\n+            />\n+\n           <subscriber\n             for="OFS.interfaces.ISimpleItem\n                  plone.app.discussion.interfaces.IReplyRemovedEvent"\n@@ -163,6 +199,26 @@ def test_addEvent(self):\n \n         self.assertTrue(self.registry.replyAdded)\n \n+    def test_modifyEvent(self):\n+        self.assertFalse(self.registry.replyModified)\n+\n+        conversation = IConversation(self.document)\n+        replies = IReplies(conversation)\n+        comment = createObject(\'plone.Comment\')\n+        comment.text = \'Comment text\'\n+        comment_id = replies.addComment(comment)\n+        comment = self.document.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(comment_id),\n+        )\n+        re_comment = createObject(\'plone.Comment\')\n+        re_comment.text = \'Comment text\'\n+        replies = IReplies(comment)\n+        new_id = replies.addComment(re_comment)\n+        reply = replies[new_id]\n+        reply.text = "Another text"\n+        notify(ObjectModifiedEvent(reply))\n+        self.assertTrue(self.registry.replyModified)\n+\n     def test_removedEvent(self):\n         self.assertFalse(self.registry.replyRemoved)\n \n'

Repository: plone.app.discussion


Branch: refs/heads/master
Date: 2021-09-08T20:31:28+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.discussion/commit/c4fb82ee57ada5e2b6fbf12467ba260f34e0f431

Merge pull request #185 from plone/issue-183-new-events-6

Events for Comment and Reply modification

Files changed:
A news/183.feature
M plone/app/discussion/comment.py
M plone/app/discussion/events.py
M plone/app/discussion/interfaces.py
M plone/app/discussion/subscribers.zcml
M plone/app/discussion/tests/test_events.py

b'diff --git a/news/183.feature b/news/183.feature\nnew file mode 100644\nindex 00000000..013640b0\n--- /dev/null\n+++ b/news/183.feature\n@@ -0,0 +1 @@\n+Implement events for Comment (ICommentModifiedEvent) and Reply(IReplyModifiedEvent) modification [ericof]\n\\ No newline at end of file\ndiff --git a/plone/app/discussion/comment.py b/plone/app/discussion/comment.py\nindex 41d430fa..cc1099f9 100644\n--- a/plone/app/discussion/comment.py\n+++ b/plone/app/discussion/comment.py\n@@ -13,8 +13,10 @@\n from persistent import Persistent\n from plone.app.discussion import _\n from plone.app.discussion.events import CommentAddedEvent\n+from plone.app.discussion.events import CommentModifiedEvent\n from plone.app.discussion.events import CommentRemovedEvent\n from plone.app.discussion.events import ReplyAddedEvent\n+from plone.app.discussion.events import ReplyModifiedEvent\n from plone.app.discussion.events import ReplyRemovedEvent\n from plone.app.discussion.interfaces import IComment\n from plone.app.discussion.interfaces import IConversation\n@@ -258,6 +260,16 @@ def notify_comment_added(obj, event):\n     return notify(CommentAddedEvent(context, obj))\n \n \n+def notify_comment_modified(obj, event):\n+    """ Notify custom discussion events when a comment, or a reply, is modified\n+    """\n+    conversation = aq_parent(obj)\n+    context = aq_parent(conversation)\n+    if getattr(obj, \'in_reply_to\', None):\n+        return notify(ReplyModifiedEvent(context, obj))\n+    return notify(CommentModifiedEvent(context, obj))\n+\n+\n def notify_comment_removed(obj, event):\n     """ Notify custom discussion events when a comment or reply is removed\n     """\ndiff --git a/plone/app/discussion/events.py b/plone/app/discussion/events.py\nindex 08925bb7..e2ecc023 100644\n--- a/plone/app/discussion/events.py\n+++ b/plone/app/discussion/events.py\n@@ -2,12 +2,14 @@\n """ Custom discussion events\n """\n from plone.app.discussion.interfaces import ICommentAddedEvent\n+from plone.app.discussion.interfaces import ICommentModifiedEvent\n from plone.app.discussion.interfaces import ICommentRemovedEvent\n from plone.app.discussion.interfaces import IDiscussionEvent\n from plone.app.discussion.interfaces import ICommentDeletedEvent\n from plone.app.discussion.interfaces import ICommentPublishedEvent\n from plone.app.discussion.interfaces import ICommentTransitionEvent\n from plone.app.discussion.interfaces import IReplyAddedEvent\n+from plone.app.discussion.interfaces import IReplyModifiedEvent\n from plone.app.discussion.interfaces import IReplyRemovedEvent\n from zope.interface import implementer\n \n@@ -35,6 +37,12 @@ class CommentAddedEvent(DiscussionEvent):\n     """\n \n \n+@implementer(ICommentModifiedEvent)\n+class CommentModifiedEvent(DiscussionEvent):\n+    """ Event to be triggered when a Comment is modified\n+    """\n+\n+\n @implementer(ICommentRemovedEvent)\n class CommentRemovedEvent(DiscussionEvent):\n     """ Event to be triggered when a Comment is removed\n@@ -47,6 +55,12 @@ class ReplyAddedEvent(DiscussionEvent):\n     """\n \n \n+@implementer(IReplyModifiedEvent)\n+class ReplyModifiedEvent(DiscussionEvent):\n+    """ Event to be triggered when a Comment reply is modified\n+    """\n+\n+\n @implementer(IReplyRemovedEvent)\n class ReplyRemovedEvent(DiscussionEvent):\n     """ Event to be triggered when a Comment reply is removed\ndiff --git a/plone/app/discussion/interfaces.py b/plone/app/discussion/interfaces.py\nindex c03c0bbc..76a0cee5 100644\n--- a/plone/app/discussion/interfaces.py\n+++ b/plone/app/discussion/interfaces.py\n@@ -399,6 +399,11 @@ class ICommentAddedEvent(IDiscussionEvent):\n     """\n \n \n+class ICommentModifiedEvent(IDiscussionEvent):\n+    """ Comment modified\n+    """\n+\n+\n class ICommentRemovedEvent(IDiscussionEvent):\n     """ Comment removed\n     """\n@@ -409,6 +414,11 @@ class IReplyAddedEvent(IDiscussionEvent):\n     """\n \n \n+class IReplyModifiedEvent(IDiscussionEvent):\n+    """ Comment reply modified\n+    """\n+\n+\n class IReplyRemovedEvent(IDiscussionEvent):\n     """ Comment reply removed\n     """\ndiff --git a/plone/app/discussion/subscribers.zcml b/plone/app/discussion/subscribers.zcml\nindex 20e1b7f5..85e74e2a 100644\n--- a/plone/app/discussion/subscribers.zcml\n+++ b/plone/app/discussion/subscribers.zcml\n@@ -9,6 +9,12 @@\n         handler=".comment.notify_workflow"\n         />\n \n+    <subscriber\n+        for="plone.app.discussion.interfaces.IComment\n+             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+        handler=".comment.notify_comment_modified"\n+        />\n+\n     <subscriber\n         for="plone.app.discussion.interfaces.IComment\n              zope.lifecycleevent.interfaces.IObjectAddedEvent"\ndiff --git a/plone/app/discussion/tests/test_events.py b/plone/app/discussion/tests/test_events.py\nindex 860e6de4..3742c768 100644\n--- a/plone/app/discussion/tests/test_events.py\n+++ b/plone/app/discussion/tests/test_events.py\n@@ -6,6 +6,8 @@\n from plone.app.testing import TEST_USER_ID\n from Zope2.App import zcml\n from zope.component import createObject\n+from zope.event import notify\n+from zope.lifecycleevent import ObjectModifiedEvent\n \n import Products.Five\n import unittest\n@@ -20,8 +22,10 @@ class EventsRegistry(object):\n     """ Fake registry to be used while testing discussion events\n     """\n     commentAdded = False\n+    commentModified = False\n     commentRemoved = False\n     replyAdded = False\n+    replyModified = False\n     replyRemoved = False\n \n #\n@@ -33,6 +37,10 @@ def comment_added(doc, evt):\n     EventsRegistry.commentAdded = True\n \n \n+def comment_modified(doc, evt):\n+    EventsRegistry.commentModified = True\n+\n+\n def comment_removed(doc, evt):\n     EventsRegistry.commentRemoved = True\n \n@@ -41,6 +49,10 @@ def reply_added(doc, evt):\n     EventsRegistry.replyAdded = True\n \n \n+def reply_modified(doc, evt):\n+    EventsRegistry.replyModified = True\n+\n+\n def reply_removed(doc, evt):\n     EventsRegistry.replyRemoved = True\n \n@@ -78,6 +90,12 @@ def setUp(self):\n             handler="plone.app.discussion.tests.test_events.comment_added"\n             />\n \n+          <subscriber\n+            for="plone.app.discussion.interfaces.IComment\n+                 zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+            handler="plone.app.discussion.tests.test_events.comment_modified"\n+            />\n+\n           <subscriber\n             for="OFS.interfaces.ISimpleItem\n                  plone.app.discussion.interfaces.ICommentRemovedEvent"\n@@ -96,6 +114,18 @@ def test_addEvent(self):\n         conversation.addComment(comment)\n         self.assertTrue(self.registry.commentAdded)\n \n+    def test_modifyEvent(self):\n+        self.assertFalse(self.registry.commentModified)\n+        comment = createObject(\'plone.Comment\')\n+        conversation = IConversation(self.document)\n+        new_id = conversation.addComment(comment)\n+        comment = self.document.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(new_id),\n+        )\n+        comment.text = "foo"\n+        notify(ObjectModifiedEvent(comment))\n+        self.assertTrue(self.registry.commentModified)\n+\n     def test_removedEvent(self):\n         self.assertFalse(self.registry.commentRemoved)\n         comment = createObject(\'plone.Comment\')\n@@ -131,6 +161,12 @@ def setUp(self):\n             handler="plone.app.discussion.tests.test_events.reply_added"\n             />\n \n+          <subscriber\n+            for="plone.app.discussion.interfaces.IComment\n+                 zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+            handler="plone.app.discussion.tests.test_events.reply_modified"\n+            />\n+\n           <subscriber\n             for="OFS.interfaces.ISimpleItem\n                  plone.app.discussion.interfaces.IReplyRemovedEvent"\n@@ -163,6 +199,26 @@ def test_addEvent(self):\n \n         self.assertTrue(self.registry.replyAdded)\n \n+    def test_modifyEvent(self):\n+        self.assertFalse(self.registry.replyModified)\n+\n+        conversation = IConversation(self.document)\n+        replies = IReplies(conversation)\n+        comment = createObject(\'plone.Comment\')\n+        comment.text = \'Comment text\'\n+        comment_id = replies.addComment(comment)\n+        comment = self.document.restrictedTraverse(\n+            \'++conversation++default/{0}\'.format(comment_id),\n+        )\n+        re_comment = createObject(\'plone.Comment\')\n+        re_comment.text = \'Comment text\'\n+        replies = IReplies(comment)\n+        new_id = replies.addComment(re_comment)\n+        reply = replies[new_id]\n+        reply.text = "Another text"\n+        notify(ObjectModifiedEvent(reply))\n+        self.assertTrue(self.registry.replyModified)\n+\n     def test_removedEvent(self):\n         self.assertFalse(self.registry.replyRemoved)\n \n'

