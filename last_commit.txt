Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-30T23:45:15+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/23d0ef0acb06080960846f7d80877aa3c8930aa3

hide shutdown

Files changed:
A news/3967.bugfix
M Products/CMFPlone/controlpanel/browser/maintenance.pt
M Products/CMFPlone/controlpanel/browser/maintenance.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/maintenance.pt b/Products/CMFPlone/controlpanel/browser/maintenance.pt\nindex 5440bff8fe..6123e04c33 100644\n--- a/Products/CMFPlone/controlpanel/browser/maintenance.pt\n+++ b/Products/CMFPlone/controlpanel/browser/maintenance.pt\n@@ -45,7 +45,8 @@\n \n         <div id="content-core">\n \n-            <form action="."\n+            <form tal:condition="python:view.isShutdownable() or view.isRestartable()"\n+                  action="."\n                   tal:attributes="action request/URL"\n                   method="post"\n                   class="edit-form"\n@@ -58,7 +59,8 @@\n \n                     <div id="actionsView" class="formControls">\n                         <span class="actionButtons">\n-                            <button type="submit"\n+                            <button tal:condition="view/isShutdownable"\n+                                   type="submit"\n                                    id="form.buttons.shutdown"\n                                    name="form.buttons.shutdown"\n                                    value="Shut down"\ndiff --git a/Products/CMFPlone/controlpanel/browser/maintenance.py b/Products/CMFPlone/controlpanel/browser/maintenance.py\nindex 9d64f2f6a3..239e9e98c7 100644\n--- a/Products/CMFPlone/controlpanel/browser/maintenance.py\n+++ b/Products/CMFPlone/controlpanel/browser/maintenance.py\n@@ -90,7 +90,7 @@ def handle_shutdown_action(self, action):\n         if LIFETIME:\n             shutdown(0)\n         else:\n-            raise\n+            raise NotImplementedError("Lifetime is not available.")\n         # TODO: returning html has no effect in button handlers\n         self.request.response.setHeader("X-Theme-Disabled", "True")\n         return """<html><head></head><body>{}</body></html>""".format(\n@@ -137,6 +137,9 @@ def isRestartable(self):\n             return True\n         return False\n \n+    def isShutdownable(self):\n+        return LIFETIME\n+\n     def isDevelopmentMode(self):\n         return bool(getConfiguration().debug_mode)\n \ndiff --git a/news/3967.bugfix b/news/3967.bugfix\nnew file mode 100644\nindex 0000000000..8cbd922fef\n--- /dev/null\n+++ b/news/3967.bugfix\n@@ -0,0 +1,3 @@\n+Fix: Traceback in maintenance control panel on shutdown if feature is not available.\n+Hide button if action is not possible.\n+[@jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-31T01:10:52+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/f018cd4ca8b31adf7939782f0ec3447caa1f41b9

Merge branch 'master' into hide-shutdown

Files changed:
A news/3966.bugfix
M Products/CMFPlone/controlpanel/browser/maintenance.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/maintenance.py b/Products/CMFPlone/controlpanel/browser/maintenance.py\nindex 239e9e98c7..f62f174b15 100644\n--- a/Products/CMFPlone/controlpanel/browser/maintenance.py\n+++ b/Products/CMFPlone/controlpanel/browser/maintenance.py\n@@ -2,6 +2,7 @@\n from AccessControl.Permissions import view_management_screens\n from Acquisition import aq_inner\n from App.config import getConfiguration\n+from html import escape\n from plone.autoform.form import AutoExtensibleForm\n from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import IMaintenanceSchema\n@@ -24,12 +25,6 @@\n except ImportError:\n     LIFETIME = False\n \n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n-\n-\n logger = logging.getLogger(__file__)\n \n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\nindex 0216c1077c..d77160ce90 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n@@ -1,4 +1,3 @@\n-from pkg_resources import get_distribution\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing.zope import Browser\n@@ -8,9 +7,6 @@\n import unittest\n \n \n-has_zope4 = get_distribution("Zope2").version.startswith("4")\n-\n-\n class MaintenanceControlPanelFunctionalTest(unittest.TestCase):\n     """Test that changes in the maintenance control panel are actually\n     stored in the registry.\ndiff --git a/news/3966.bugfix b/news/3966.bugfix\nnew file mode 100644\nindex 0000000000..1c962a9e34\n--- /dev/null\n+++ b/news/3966.bugfix\n@@ -0,0 +1 @@\n+Remove unused leftover reference to the Zope2 package from test. [@jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-31T01:24:50+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/8ec539e165692d255172c83606f4b0fafcdc0750

refactor test and move over to controlpanel

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
M Products/CMFPlone/tests/csrf.txt

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\nindex d77160ce90..9bf825009f 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n@@ -2,9 +2,11 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing.zope import Browser\n from plone.testing.zope import login\n+from Products.CMFPlone.controlpanel.browser.maintenance import LIFETIME\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n import unittest\n+import zExceptions\n \n \n class MaintenanceControlPanelFunctionalTest(unittest.TestCase):\n@@ -80,3 +82,18 @@ def pack(self, t=None, days=0):\n         self.assertTrue(self.browser.url.endswith("maintenance-controlpanel"))\n         self.assertTrue("Packed the database." in self.browser.contents)\n         db.pack = original_pack\n+\n+    @unittest.skipIf(not LIFETIME, "Lifetime for shutdown not available")\n+    def test_maintenance_shutdown_CSRF_protection(self):\n+        login(self.app["acl_users"], "app")\n+        import transaction\n+\n+        transaction.commit()\n+        self.browser.handleErrors = False\n+        self.browser.addHeader("Authorization", f"Basic app:{TEST_USER_PASSWORD}")\n+        self.browser.open("/@@overview-controlpanel")\n+        self.browser.getLink("Maintenance").click()\n+        self.browser.getControl(name="_authenticator", index=0).value = "invalid!"\n+        self.browser.getControl(name="_authenticator", index=1).value = "invalid!"\n+        with self.asserRaises(zExceptions.Forbidden):\n+            self.browser.getControl("Shut down").click()\ndiff --git a/Products/CMFPlone/tests/csrf.txt b/Products/CMFPlone/tests/csrf.txt\nindex f03dbbb376..b18c93b87d 100644\n--- a/Products/CMFPlone/tests/csrf.txt\n+++ b/Products/CMFPlone/tests/csrf.txt\n@@ -417,23 +417,3 @@ Traceback (most recent call last):\n ...\n zExceptions.Forbidden: Form authenticator is invalid.\n \n-Exceptions to the rule is the "Maintenance" configlet, which is tested\n-separately. The "Maintenance" configlet has some special security\n-limitations, which is why we need to log in as the portal owner first:\n-\n-  >>> app_browser = Browser(app)\n-  >>> app_browser.handleErrors = False\n-  >>> app.acl_users.userFolderAddUser(\'app\', TEST_USER_PASSWORD, [\'Manager\'], [])\n-  >>> from plone.testing import zope\n-  >>> zope.logout()\n-  >>> zope.login(app[\'acl_users\'], \'app\')\n-  >>> import transaction; transaction.commit()\n-  >>> app_browser.addHeader(\'Authorization\', f\'Basic app:{TEST_USER_PASSWORD}\')\n-  >>> app_browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n-  >>> app_browser.getLink(\'Maintenance\').click()\n-  >>> app_browser.getControl(name=\'_authenticator\', index=0).value = \'invalid!\'\n-  >>> app_browser.getControl(name=\'_authenticator\', index=1).value = \'invalid!\'\n-  >>> app_browser.getControl(\'Shut down\').click()\n-  Traceback (most recent call last):\n-  ...\n-  zExceptions.Forbidden: Form authenticator is invalid.\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-31T02:17:12+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/ab84546173490cf2ba722a89a57a8b7a92c4e2bc

Merge pull request #3967 from plone/hide-shutdown

Hide shutdown if not possible.

Files changed:
A news/3967.bugfix
M Products/CMFPlone/controlpanel/browser/maintenance.pt
M Products/CMFPlone/controlpanel/browser/maintenance.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
M Products/CMFPlone/tests/csrf.txt

b'diff --git a/Products/CMFPlone/controlpanel/browser/maintenance.pt b/Products/CMFPlone/controlpanel/browser/maintenance.pt\nindex 5440bff8fe..6123e04c33 100644\n--- a/Products/CMFPlone/controlpanel/browser/maintenance.pt\n+++ b/Products/CMFPlone/controlpanel/browser/maintenance.pt\n@@ -45,7 +45,8 @@\n \n         <div id="content-core">\n \n-            <form action="."\n+            <form tal:condition="python:view.isShutdownable() or view.isRestartable()"\n+                  action="."\n                   tal:attributes="action request/URL"\n                   method="post"\n                   class="edit-form"\n@@ -58,7 +59,8 @@\n \n                     <div id="actionsView" class="formControls">\n                         <span class="actionButtons">\n-                            <button type="submit"\n+                            <button tal:condition="view/isShutdownable"\n+                                   type="submit"\n                                    id="form.buttons.shutdown"\n                                    name="form.buttons.shutdown"\n                                    value="Shut down"\ndiff --git a/Products/CMFPlone/controlpanel/browser/maintenance.py b/Products/CMFPlone/controlpanel/browser/maintenance.py\nindex 2d8c2603de..f62f174b15 100644\n--- a/Products/CMFPlone/controlpanel/browser/maintenance.py\n+++ b/Products/CMFPlone/controlpanel/browser/maintenance.py\n@@ -85,7 +85,7 @@ def handle_shutdown_action(self, action):\n         if LIFETIME:\n             shutdown(0)\n         else:\n-            raise\n+            raise NotImplementedError("Lifetime is not available.")\n         # TODO: returning html has no effect in button handlers\n         self.request.response.setHeader("X-Theme-Disabled", "True")\n         return """<html><head></head><body>{}</body></html>""".format(\n@@ -132,6 +132,9 @@ def isRestartable(self):\n             return True\n         return False\n \n+    def isShutdownable(self):\n+        return LIFETIME\n+\n     def isDevelopmentMode(self):\n         return bool(getConfiguration().debug_mode)\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\nindex d77160ce90..9bf825009f 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n@@ -2,9 +2,11 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing.zope import Browser\n from plone.testing.zope import login\n+from Products.CMFPlone.controlpanel.browser.maintenance import LIFETIME\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n import unittest\n+import zExceptions\n \n \n class MaintenanceControlPanelFunctionalTest(unittest.TestCase):\n@@ -80,3 +82,18 @@ def pack(self, t=None, days=0):\n         self.assertTrue(self.browser.url.endswith("maintenance-controlpanel"))\n         self.assertTrue("Packed the database." in self.browser.contents)\n         db.pack = original_pack\n+\n+    @unittest.skipIf(not LIFETIME, "Lifetime for shutdown not available")\n+    def test_maintenance_shutdown_CSRF_protection(self):\n+        login(self.app["acl_users"], "app")\n+        import transaction\n+\n+        transaction.commit()\n+        self.browser.handleErrors = False\n+        self.browser.addHeader("Authorization", f"Basic app:{TEST_USER_PASSWORD}")\n+        self.browser.open("/@@overview-controlpanel")\n+        self.browser.getLink("Maintenance").click()\n+        self.browser.getControl(name="_authenticator", index=0).value = "invalid!"\n+        self.browser.getControl(name="_authenticator", index=1).value = "invalid!"\n+        with self.asserRaises(zExceptions.Forbidden):\n+            self.browser.getControl("Shut down").click()\ndiff --git a/Products/CMFPlone/tests/csrf.txt b/Products/CMFPlone/tests/csrf.txt\nindex f03dbbb376..b18c93b87d 100644\n--- a/Products/CMFPlone/tests/csrf.txt\n+++ b/Products/CMFPlone/tests/csrf.txt\n@@ -417,23 +417,3 @@ Traceback (most recent call last):\n ...\n zExceptions.Forbidden: Form authenticator is invalid.\n \n-Exceptions to the rule is the "Maintenance" configlet, which is tested\n-separately. The "Maintenance" configlet has some special security\n-limitations, which is why we need to log in as the portal owner first:\n-\n-  >>> app_browser = Browser(app)\n-  >>> app_browser.handleErrors = False\n-  >>> app.acl_users.userFolderAddUser(\'app\', TEST_USER_PASSWORD, [\'Manager\'], [])\n-  >>> from plone.testing import zope\n-  >>> zope.logout()\n-  >>> zope.login(app[\'acl_users\'], \'app\')\n-  >>> import transaction; transaction.commit()\n-  >>> app_browser.addHeader(\'Authorization\', f\'Basic app:{TEST_USER_PASSWORD}\')\n-  >>> app_browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n-  >>> app_browser.getLink(\'Maintenance\').click()\n-  >>> app_browser.getControl(name=\'_authenticator\', index=0).value = \'invalid!\'\n-  >>> app_browser.getControl(name=\'_authenticator\', index=1).value = \'invalid!\'\n-  >>> app_browser.getControl(\'Shut down\').click()\n-  Traceback (most recent call last):\n-  ...\n-  zExceptions.Forbidden: Form authenticator is invalid.\ndiff --git a/news/3967.bugfix b/news/3967.bugfix\nnew file mode 100644\nindex 0000000000..8cbd922fef\n--- /dev/null\n+++ b/news/3967.bugfix\n@@ -0,0 +1,3 @@\n+Fix: Traceback in maintenance control panel on shutdown if feature is not available.\n+Hide button if action is not possible.\n+[@jensens]\n'

