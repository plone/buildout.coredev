Repository: plone.restapi


Branch: refs/heads/main
Date: 2023-08-25T20:58:33+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/eac02a701a42fd5853f9ec4b62d2d17dec283186

Remove plone.tiles and the `@tiles` endpoint (#1688)

* Remove plone.tiles

* Run tests on py 3.9

* Update news/1308.breaking

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Add upgrade guide section

---------

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

Files changed:
A news/1308.breaking
M docs/source/endpoints/index.md
M docs/source/upgrade-guide.md
M setup.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/services/configure.zcml
D docs/source/endpoints/tiles.md
D src/plone/restapi/serializer/tile.py
D src/plone/restapi/services/tiles/__init__.py
D src/plone/restapi/services/tiles/configure.zcml
D src/plone/restapi/services/tiles/get.py
D src/plone/restapi/tests/test_services_tiles.py

b'diff --git a/docs/source/endpoints/index.md b/docs/source/endpoints/index.md\nindex 62452b712d..76105b0d82 100644\n--- a/docs/source/endpoints/index.md\n+++ b/docs/source/endpoints/index.md\n@@ -46,7 +46,6 @@ roles\n searching\n site\n system\n-tiles\n transactions\n translations\n tusupload\ndiff --git a/docs/source/endpoints/tiles.md b/docs/source/endpoints/tiles.md\ndeleted file mode 100644\nindex 3e7d422809..0000000000\n--- a/docs/source/endpoints/tiles.md\n+++ /dev/null\n@@ -1,94 +0,0 @@\n----\n-myst:\n-  html_meta:\n-    "description": "A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos. The tiles endpoint is deprecated and will be removed in plone.restapi 9."\n-    "property=og:description": "A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos. The tiles endpoint is deprecated and will be removed in plone.restapi 9."\n-    "property=og:title": "Tiles"\n-    "keywords": "Plone, plone.restapi, REST, API, Tiles"\n----\n-\n-# Tiles\n-\n-```{warning}\n-The tiles endpoint is deprecated and will be removed in `plone.restapi` 9.\n-```\n-\n-```{note}\n-The tiles endpoint currently matches only partially, specifically the `GET` endpoints, the default Plone implementation.\n-```\n-\n-A tile in Plone is an HTML snippet that can contain arbitrary content, such as text, images, or videos.\n-\n-\n-## Listing available tiles\n-\n-```{note}\n-This endpoint currently does not return any data.\n-The functionality needs to be implemented.\n-```\n-\n-List all available tiles types by sending a `GET` request to the `@tiles` endpoint on the portal root:\n-\n-```\n-GET /plone/@tiles HTTP/1.1\n-Accept: application/json\n-Authorization: Basic YWRtaW46c2VjcmV0\n-```\n-\n-The server responds with a {term}`200 OK` status and lists all available tiles:\n-\n-```\n-HTTP/1.1 200 OK\n-Content-Type: application/json\n-[\n-  {\n-    "@id": "http://localhost:55001/plone/@tiles/title",\n-    "title": "Title tile",\n-    "description": "A field tile that will show the title of the content object",\n-  },\n-  {\n-    "@id": "http://localhost:55001/plone/@tiles/description",\n-    "title": "Description tile",\n-    "description": "A field tile that will show the description of the content object",\n-  },\n-]\n-```\n-\n-\n-## Retrieve JSON schema of an individual tile\n-\n-```{note}\n-This endpoint currently does not return any data.\n-The functionality needs to be implemented.\n-```\n-\n-Retrieve the JSON schema of a specific tile by calling the `@tiles` endpoint with the ID of the tile:\n-\n-```\n-GET /plone/@tiles/title HTTP/1.1\n-Accept: application/json\n-Authorization: Basic YWRtaW46c2VjcmV0\n-```\n-\n-The server responds with a JSON schema definition for that particular tile:\n-\n-```\n-HTTP/1.1 200 OK\n-Content-Type: application/json+schema\n-\n-{\n-  "properties": {\n-    "title": {\n-      "description": "",\n-      "title": "Title",\n-      "type": "string"\n-    },\n-    ...\n-  },\n-  "required": [\n-    "title",\n-  ],\n-  "title": "Title Tile",\n-  "type": "object"\n-}\n-```\ndiff --git a/docs/source/upgrade-guide.md b/docs/source/upgrade-guide.md\nindex da73d71c7a..ec2a26e50f 100644\n--- a/docs/source/upgrade-guide.md\n+++ b/docs/source/upgrade-guide.md\n@@ -37,6 +37,14 @@ In `plone.restapi` 9.0.0, the following response would be returned with a `breac\n ]\n ```\n \n+Pull Request: https://github.com/plone/plone.restapi/pull/1636\n+\n+### Remove plone.tiles and the @tiles endpoint\n+\n+`plone.restapi` 9 removed the @tiles endpoint and removed the dependency to plone.tiles. The @tiles endpoint was deprecated since `plone.restapi` 8.\n+\n+Pull Request: https://github.com/plone/plone.restapi/pull/1688\n+\n ## Upgrading to `plone.restapi` 8.x\n \n `plone.restapi` 8.x dropped support for Python 2 and Plone 5.1 and 4.3.\ndiff --git a/news/1308.breaking b/news/1308.breaking\nnew file mode 100644\nindex 0000000000..43ed746184\n--- /dev/null\n+++ b/news/1308.breaking\n@@ -0,0 +1 @@\n+Remove `plone.tiles` and the `@tiles` endpoint. @tisto\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex 10d68292e6..1c18881064 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -47,7 +47,6 @@ def read(filename):\n     "plone.app.testing [robot] >= 4.2.2",  # ROBOT_TEST_LEVEL added\n     "plone.api",\n     "requests",\n-    "plone.tiles",\n     "mock",\n ]\n \ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 7531f6aca0..614f3d4152 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -110,11 +110,6 @@\n   <adapter factory=".discussion.ConversationSerializer" />\n   <adapter factory=".discussion.CommentSerializer" />\n \n-  <configure zcml:condition="installed plone.tiles">\n-    <adapter factory=".tile.TileSummarySerializeToJson" />\n-    <adapter factory=".tile.TileSerializeToJson" />\n-  </configure>\n-\n   <include package=".controlpanels" />\n \n   <!-- Summary Serializer Metadata -->\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\ndeleted file mode 100644\nindex 195e3ee319..0000000000\n--- a/src/plone/restapi/serializer/tile.py\n+++ /dev/null\n@@ -1,72 +0,0 @@\n-from plone.restapi.interfaces import ISerializeToJson\n-from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.types import utils\n-from plone.tiles.interfaces import ITileType\n-from zope.component import adapter\n-from zope.component.hooks import getSite\n-from zope.interface import implementer\n-from zope.interface import Interface\n-\n-\n-SERVICE_ID = "@tiles"\n-\n-\n-@implementer(ISerializeToJsonSummary)\n-@adapter(ITileType, Interface)\n-class TileSummarySerializeToJson:\n-    def __init__(self, tile, request):\n-        self.tile = tile\n-\n-    def __call__(self):\n-        portal = getSite()\n-        return {\n-            "@id": "{}/{}/{}".format(\n-                portal.absolute_url(), SERVICE_ID, self.tile.__name__\n-            ),\n-            "title": self.tile.title,\n-            "description": self.tile.description,\n-            "icon": self.tile.icon,\n-        }\n-\n-\n-def get_jsonschema_for_tile(tile, context, request):\n-    """Build a complete JSON schema for the given tile."""\n-    schema = tile.schema\n-\n-    fieldsets = utils.get_fieldsets(context, request, schema)\n-\n-    # Build JSON schema properties\n-    properties = utils.get_jsonschema_properties(context, request, fieldsets)\n-\n-    # Determine required fields\n-    required = []\n-    for field in utils.iter_fields(fieldsets):\n-        if field.field.required:\n-            required.append(field.field.getName())\n-\n-    # Include field modes\n-    for field in utils.iter_fields(fieldsets):\n-        if field.mode:\n-            properties[field.field.getName()]["mode"] = field.mode\n-\n-    return {\n-        "type": "object",\n-        "title": tile.title,\n-        "properties": properties,\n-        "required": required,\n-        "fieldsets": utils.get_fieldset_infos(fieldsets),\n-    }\n-\n-\n-@implementer(ISerializeToJson)\n-@adapter(ITileType, Interface)\n-class TileSerializeToJson:\n-    def __init__(self, tile, request):\n-        self.tile = tile\n-        self.request = request\n-        self.schema = self.tile.schema\n-\n-    def __call__(self):\n-        portal = getSite()\n-\n-        return get_jsonschema_for_tile(self.tile, portal, self.request)\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 2096fd8188..ed31ccf121 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -59,10 +59,6 @@\n       package=".email_send"\n       zcml:condition="have plone-5"\n       />\n-  <include\n-      package=".tiles"\n-      zcml:condition="installed plone.tiles"\n-      />\n   <include\n       package=".rules"\n       zcml:condition="installed plone.app.contentrules"\ndiff --git a/src/plone/restapi/services/tiles/__init__.py b/src/plone/restapi/services/tiles/__init__.py\ndeleted file mode 100644\nindex e69de29bb2..0000000000\ndiff --git a/src/plone/restapi/services/tiles/configure.zcml b/src/plone/restapi/services/tiles/configure.zcml\ndeleted file mode 100644\nindex d65165e83b..0000000000\n--- a/src/plone/restapi/services/tiles/configure.zcml\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-<configure\n-    xmlns="http://namespaces.zope.org/zope"\n-    xmlns:plone="http://namespaces.plone.org/plone"\n-    >\n-\n-  <plone:service\n-      method="GET"\n-      factory=".get.TilesGet"\n-      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n-      permission="zope2.View"\n-      name="@tiles"\n-      />\n-\n-</configure>\ndiff --git a/src/plone/restapi/services/tiles/get.py b/src/plone/restapi/services/tiles/get.py\ndeleted file mode 100644\nindex fb2918976a..0000000000\n--- a/src/plone/restapi/services/tiles/get.py\n+++ /dev/null\n@@ -1,61 +0,0 @@\n-from AccessControl.security import checkPermission\n-from plone.restapi.interfaces import ISerializeToJson\n-from plone.restapi.interfaces import ISerializeToJsonSummary\n-from plone.restapi.services import Service\n-from plone.tiles.interfaces import ITileType\n-from zope.component import getMultiAdapter\n-from zope.component import getUtilitiesFor\n-from zope.component import getUtility\n-from zope.deprecation import deprecated\n-from zope.interface import implementer\n-from zope.publisher.interfaces import IPublishTraverse\n-\n-import sys\n-import warnings\n-import zope.deprecation\n-\n-\n-sys.modules["plone.restapi.services.tiles"] = deprecated(\n-    zope.deprecation,\n-    "``plone.restapi.services.tiles`` is deprecated and will be removed in plone.restapi 9.",\n-)\n-\n-\n-@implementer(IPublishTraverse)\n-class TilesGet(Service):\n-    def __init__(self, context, request):\n-        super().__init__(context, request)\n-        self.params = []\n-\n-    def publishTraverse(self, request, name):\n-        # Treat any path segments after /@types as parameters\n-        self.params.append(name)\n-        return self\n-\n-    def reply(self):\n-        warnings.warn(\n-            "``plone.restapi.services.tiles`` is deprecated and will be removed in plone.restapi 9.",\n-            DeprecationWarning,\n-        )\n-\n-        if self.params and len(self.params) > 0:\n-            self.content_type = "application/json+schema"\n-            try:\n-                tile = getUtility(ITileType, name=self.params[0])\n-                return getMultiAdapter((tile, self.request), ISerializeToJson)()\n-            except KeyError:\n-                self.content_type = "application/json"\n-                self.request.response.setStatus(404)\n-                return {\n-                    "type": "NotFound",\n-                    "message": f\'Tile "{self.params[0]}" could not be found.\',\n-                }\n-\n-        result = []\n-        tiles = getUtilitiesFor(ITileType, context=self.context)\n-        for name, tile in tiles:\n-            serializer = getMultiAdapter((tile, self.request), ISerializeToJsonSummary)\n-            if checkPermission(tile.add_permission, self.context):\n-                result.append(serializer())\n-\n-        return result\ndiff --git a/src/plone/restapi/tests/test_services_tiles.py b/src/plone/restapi/tests/test_services_tiles.py\ndeleted file mode 100644\nindex eda99cc444..0000000000\n--- a/src/plone/restapi/tests/test_services_tiles.py\n+++ /dev/null\n@@ -1,93 +0,0 @@\n-from plone.app.testing import setRoles\n-from plone.app.testing import SITE_OWNER_NAME\n-from plone.app.testing import SITE_OWNER_PASSWORD\n-from plone.app.testing import TEST_USER_ID\n-from plone.dexterity.interfaces import IDexterityFTI\n-from plone.dexterity.utils import createContentInContainer\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n-from plone.restapi.testing import RelativeSession\n-from plone.tiles import Tile\n-from plone.tiles.interfaces import IBasicTile\n-from plone.tiles.type import TileType\n-from zope.component import provideAdapter\n-from zope.component import provideUtility\n-from zope.component import queryUtility\n-from zope.interface import Interface\n-\n-import transaction\n-import unittest\n-import zope.schema\n-\n-\n-class ISampleTile(Interface):\n-    title = zope.schema.TextLine(title="Title", required=False)\n-\n-\n-class SampleTile(Tile):\n-\n-    __name__ = "sample.tile"  # would normally be set by a ZCML handler\n-\n-    def __call__(self):\n-        return "<html><body><b>My tile</b></body></html>"\n-\n-\n-class TestServicesTiles(unittest.TestCase):\n-\n-    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n-\n-    def setUp(self):\n-        self.app = self.layer["app"]\n-        self.portal = self.layer["portal"]\n-        self.portal_url = self.portal.absolute_url()\n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-\n-        self.api_session = RelativeSession(self.portal_url, test=self)\n-        self.api_session.headers.update({"Accept": "application/json"})\n-        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n-\n-        fti = queryUtility(IDexterityFTI, name="Document")\n-        behavior_list = [a for a in fti.behaviors]\n-        behavior_list.append("plone.leadimage")\n-        fti.behaviors = tuple(behavior_list)\n-\n-        self.doc = createContentInContainer(\n-            self.portal, "Document", id="doc", title="A document"\n-        )\n-        transaction.commit()\n-\n-        sampleTileType = TileType(\n-            "sample.tile",\n-            "Sample tile",\n-            "cmf.ModifyPortalContent",\n-            "zope.Public",\n-            description="A tile used for testing",\n-            schema=ISampleTile,\n-            icon="testicon",\n-        )\n-        provideUtility(sampleTileType, name="sample.tile")\n-        provideAdapter(\n-            SampleTile, (Interface, Interface), IBasicTile, name="sample.tile"\n-        )\n-\n-    def tearDown(self):\n-        self.api_session.close()\n-\n-    def test_get_available_tiles(self):\n-        response = self.api_session.get("/@tiles")\n-\n-        self.assertEqual(response.status_code, 200)\n-        response = response.json()\n-        self.assertEqual(len(response), 1)\n-        self.assertEqual(response[0]["@id"], self.portal_url + "/@tiles/sample.tile")\n-        self.assertEqual(response[0]["title"], "Sample tile")\n-        self.assertEqual(response[0]["description"], "A tile used for testing")\n-        self.assertEqual(response[0]["icon"], "testicon")\n-\n-    def test_get_tile(self):\n-        response = self.api_session.get("/@tiles/sample.tile")\n-\n-        self.assertEqual(response.status_code, 200)\n-        response = response.json()\n-        self.assertEqual(response["title"], "Sample tile")\n-        self.assertEqual(response["properties"]["title"]["title"], "Title")\n-        self.assertEqual(response["properties"]["title"]["type"], "string")\n'

