Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-09-12T08:08:00+05:00
Author: Faakhir30 (Faakhir30) <zahidfaakhir@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/0dc28a0aac69bf0c9950153777d193dd52416aa6

Added start and end filters in redirectionSet.

Files changed:
A news/4009.feature
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 46b128ca75..9ddd6a2f97 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,4 +1,5 @@\n from csv import writer\n+import warnings\n from DateTime import DateTime\n from DateTime.interfaces import DateTimeError\n from io import StringIO\n@@ -163,7 +164,7 @@ def view_url(self):\n \n \n class RedirectionSet:\n-    def __init__(self, query="", created="", manual=""):\n+    def __init__(self, query="", created="", manual="", start="", end=""):\n         self.storage = getUtility(IRedirectionStorage)\n \n         portal = getSite()\n@@ -190,20 +191,35 @@ def __init__(self, query="", created="", manual=""):\n             else:\n                 manual = ""\n         if created:\n+            end = created\n+            warnings.warn(\n+                "The \'created\' parameter is deprecated. Use \'end\' parameter instead.",\n+                DeprecationWarning,\n+            )\n+        if start:\n+            try:\n+                start = DateTime(start)\n+            except DateTimeError:\n+                logger.warning("Failed to parse as DateTime: %s", start)\n+                start = ""\n+        if end:\n             try:\n-                created = DateTime(created)\n+                end = DateTime(end)\n             except DateTimeError:\n-                logger.warning("Failed to parse as DateTime: %s", created)\n-                created = ""\n-        if created or manual != "":\n+                logger.warning("Failed to parse as DateTime: %s", end)\n+                end = ""\n+        if start or end or manual != "":\n             chosen = []\n             for redirect in self.data:\n                 info = self.storage.get_full(redirect)\n                 if manual != "":\n                     if info[2] != manual:\n                         continue\n-                if created and info[1]:\n-                    if info[1] >= created:\n+                if start and info[1]:\n+                    if info[1] < start:\n+                        continue\n+                if end and info[1]:\n+                    if info[1] >= end:\n                         continue\n                 chosen.append(redirect)\n             self.data = chosen\n@@ -256,6 +272,8 @@ def redirects(self):\n             RedirectionSet(\n                 query=self.request.form.get("q", ""),\n                 created=self.request.form.get("datetime", ""),\n+                start=self.request.form.get("start", ""),\n+                end=self.request.form.get("end", ""),\n                 manual=self.request.form.get("manual", ""),\n             ),\n             int(self.request.form.get("b_size", "15")),\n@@ -280,9 +298,17 @@ def __call__(self):\n             else:\n                 query = self.request.form.get("q", "")\n                 created = self.request.form.get("datetime", "")\n+                start = self.request.form.get("start", "")\n+                end = self.request.form.get("end", "")\n                 manual = self.request.form.get("manual", "")\n-                if created or manual or (query and query != "/"):\n-                    rset = RedirectionSet(query=query, created=created, manual=manual)\n+                if created or start or end or manual or (query and query != "/"):\n+                    rset = RedirectionSet(\n+                        query=query,\n+                        created=created,\n+                        manual=manual,\n+                        start=start,\n+                        end=end,\n+                    )\n                     redirects = list(rset.data)\n                 else:\n                     redirects = []\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 4099a0f60f..8e8d3057ab 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -336,7 +336,7 @@ def test_redirection_controlpanel_filter_date(self):\n \n         redirects = RedirectionSet()\n         self.assertEqual(len(redirects), 400)\n-        # created can be anything that can be parsed by DateTime.\n+        # created can be anything that can be parsed by DateTime. (deprecated)\n         # Otherwise it is ignored.\n         self.assertEqual(len(RedirectionSet(created="2019-01-01")), 400)\n         self.assertEqual(len(RedirectionSet(created="1999-01-01")), 0)\n@@ -346,38 +346,57 @@ def test_redirection_controlpanel_filter_date(self):\n         self.assertEqual(len(RedirectionSet(created="2001-02-01 00:00:00")), 31)\n         self.assertEqual(len(RedirectionSet(created="2001-02-01 00:00:01")), 32)\n         self.assertEqual(len(RedirectionSet(created="badvalue")), 400)\n+        # start is inclusive and can be anything that can be parsed by DateTime.\n+        # Otherwise it is ignored.\n+        self.assertEqual(len(RedirectionSet(start="2019-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(start="2001-01-02")), 399)\n+        self.assertEqual(len(RedirectionSet(start="2001-02-01 00:00:00")), 369)\n+        self.assertEqual(len(RedirectionSet(start="2001-02-01 00:00:01")), 368)\n+        self.assertEqual(len(RedirectionSet(start="badvalue")), 400)\n+\n+        # End is exclisive and can be anything that can be parsed by DateTime.\n+        # Otherwise it is ignored.\n+        self.assertEqual(len(RedirectionSet(end="1999-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(end="2000-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(end="2001-02-01")), 31)\n+        self.assertEqual(len(RedirectionSet(end="2001-02-01 00:00:00")), 31)\n+        self.assertEqual(len(RedirectionSet(end="2001-02-01 00:00:01")), 32)\n+        self.assertEqual(len(RedirectionSet(end="badvalue")), 400)\n+\n+        self.assertEqual(len(RedirectionSet(start="2001-01-01", end="2001-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(start="2001-01-01", end="2001-01-02")), 1)\n \n         # DateTime(\'2002-01-01\') results in a timezone GMT+0\n-        self.assertEqual(len(RedirectionSet(created="2002-01-01")), 365)\n+        self.assertEqual(len(RedirectionSet(end="2002-01-01")), 365)\n         # DateTime(\'2002/01/01\') results in a timezone GMT+1 for me,\n         # or a different zone depending on where in the world you are.\n         # So we need to be lenient in the tests.\n-        self.assertGreaterEqual(len(RedirectionSet(created="2002/01/01")), 364)\n-        self.assertLessEqual(len(RedirectionSet(created="2002/01/01")), 366)\n+        self.assertGreaterEqual(len(RedirectionSet(end="2002/01/01")), 364)\n+        self.assertLessEqual(len(RedirectionSet(end="2002/01/01")), 366)\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = ""\n+        request.form["start"] = ""\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(400 / 15.0))\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = "2001-01-27"\n+        request.form["end"] = "2001-01-27"\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(27 / 15.0))\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = "2002-01-01"\n+        request.form["end"] = "2002-01-01"\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(365 / 15.0))\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = "2019-01-01"\n+        request.form["end"] = "2019-01-01"\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\ndiff --git a/news/4009.feature b/news/4009.feature\nnew file mode 100644\nindex 0000000000..1a58fdb77f\n--- /dev/null\n+++ b/news/4009.feature\n@@ -0,0 +1 @@\n+Redirection control panel: Added support for start and end filters. @Faakhir30\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-09-12T08:48:25+05:00
Author: Faakhir Zahid (Faakhir30) <110815427+Faakhir30@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3c4df5da328b00e9c6434c1d70517362ed15a3b9

Merge pull request #4009 from Faakhir30/add_date_filters

Added start and end filters in redirectionSet.

Files changed:
A news/4009.feature
M Products/CMFPlone/controlpanel/browser/redirects.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/redirects.py b/Products/CMFPlone/controlpanel/browser/redirects.py\nindex 46b128ca75..9ddd6a2f97 100644\n--- a/Products/CMFPlone/controlpanel/browser/redirects.py\n+++ b/Products/CMFPlone/controlpanel/browser/redirects.py\n@@ -1,4 +1,5 @@\n from csv import writer\n+import warnings\n from DateTime import DateTime\n from DateTime.interfaces import DateTimeError\n from io import StringIO\n@@ -163,7 +164,7 @@ def view_url(self):\n \n \n class RedirectionSet:\n-    def __init__(self, query="", created="", manual=""):\n+    def __init__(self, query="", created="", manual="", start="", end=""):\n         self.storage = getUtility(IRedirectionStorage)\n \n         portal = getSite()\n@@ -190,20 +191,35 @@ def __init__(self, query="", created="", manual=""):\n             else:\n                 manual = ""\n         if created:\n+            end = created\n+            warnings.warn(\n+                "The \'created\' parameter is deprecated. Use \'end\' parameter instead.",\n+                DeprecationWarning,\n+            )\n+        if start:\n+            try:\n+                start = DateTime(start)\n+            except DateTimeError:\n+                logger.warning("Failed to parse as DateTime: %s", start)\n+                start = ""\n+        if end:\n             try:\n-                created = DateTime(created)\n+                end = DateTime(end)\n             except DateTimeError:\n-                logger.warning("Failed to parse as DateTime: %s", created)\n-                created = ""\n-        if created or manual != "":\n+                logger.warning("Failed to parse as DateTime: %s", end)\n+                end = ""\n+        if start or end or manual != "":\n             chosen = []\n             for redirect in self.data:\n                 info = self.storage.get_full(redirect)\n                 if manual != "":\n                     if info[2] != manual:\n                         continue\n-                if created and info[1]:\n-                    if info[1] >= created:\n+                if start and info[1]:\n+                    if info[1] < start:\n+                        continue\n+                if end and info[1]:\n+                    if info[1] >= end:\n                         continue\n                 chosen.append(redirect)\n             self.data = chosen\n@@ -256,6 +272,8 @@ def redirects(self):\n             RedirectionSet(\n                 query=self.request.form.get("q", ""),\n                 created=self.request.form.get("datetime", ""),\n+                start=self.request.form.get("start", ""),\n+                end=self.request.form.get("end", ""),\n                 manual=self.request.form.get("manual", ""),\n             ),\n             int(self.request.form.get("b_size", "15")),\n@@ -280,9 +298,17 @@ def __call__(self):\n             else:\n                 query = self.request.form.get("q", "")\n                 created = self.request.form.get("datetime", "")\n+                start = self.request.form.get("start", "")\n+                end = self.request.form.get("end", "")\n                 manual = self.request.form.get("manual", "")\n-                if created or manual or (query and query != "/"):\n-                    rset = RedirectionSet(query=query, created=created, manual=manual)\n+                if created or start or end or manual or (query and query != "/"):\n+                    rset = RedirectionSet(\n+                        query=query,\n+                        created=created,\n+                        manual=manual,\n+                        start=start,\n+                        end=end,\n+                    )\n                     redirects = list(rset.data)\n                 else:\n                     redirects = []\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 4099a0f60f..8e8d3057ab 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -336,7 +336,7 @@ def test_redirection_controlpanel_filter_date(self):\n \n         redirects = RedirectionSet()\n         self.assertEqual(len(redirects), 400)\n-        # created can be anything that can be parsed by DateTime.\n+        # created can be anything that can be parsed by DateTime. (deprecated)\n         # Otherwise it is ignored.\n         self.assertEqual(len(RedirectionSet(created="2019-01-01")), 400)\n         self.assertEqual(len(RedirectionSet(created="1999-01-01")), 0)\n@@ -346,38 +346,57 @@ def test_redirection_controlpanel_filter_date(self):\n         self.assertEqual(len(RedirectionSet(created="2001-02-01 00:00:00")), 31)\n         self.assertEqual(len(RedirectionSet(created="2001-02-01 00:00:01")), 32)\n         self.assertEqual(len(RedirectionSet(created="badvalue")), 400)\n+        # start is inclusive and can be anything that can be parsed by DateTime.\n+        # Otherwise it is ignored.\n+        self.assertEqual(len(RedirectionSet(start="2019-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(start="2001-01-02")), 399)\n+        self.assertEqual(len(RedirectionSet(start="2001-02-01 00:00:00")), 369)\n+        self.assertEqual(len(RedirectionSet(start="2001-02-01 00:00:01")), 368)\n+        self.assertEqual(len(RedirectionSet(start="badvalue")), 400)\n+\n+        # End is exclisive and can be anything that can be parsed by DateTime.\n+        # Otherwise it is ignored.\n+        self.assertEqual(len(RedirectionSet(end="1999-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(end="2000-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(end="2001-02-01")), 31)\n+        self.assertEqual(len(RedirectionSet(end="2001-02-01 00:00:00")), 31)\n+        self.assertEqual(len(RedirectionSet(end="2001-02-01 00:00:01")), 32)\n+        self.assertEqual(len(RedirectionSet(end="badvalue")), 400)\n+\n+        self.assertEqual(len(RedirectionSet(start="2001-01-01", end="2001-01-01")), 0)\n+        self.assertEqual(len(RedirectionSet(start="2001-01-01", end="2001-01-02")), 1)\n \n         # DateTime(\'2002-01-01\') results in a timezone GMT+0\n-        self.assertEqual(len(RedirectionSet(created="2002-01-01")), 365)\n+        self.assertEqual(len(RedirectionSet(end="2002-01-01")), 365)\n         # DateTime(\'2002/01/01\') results in a timezone GMT+1 for me,\n         # or a different zone depending on where in the world you are.\n         # So we need to be lenient in the tests.\n-        self.assertGreaterEqual(len(RedirectionSet(created="2002/01/01")), 364)\n-        self.assertLessEqual(len(RedirectionSet(created="2002/01/01")), 366)\n+        self.assertGreaterEqual(len(RedirectionSet(end="2002/01/01")), 364)\n+        self.assertLessEqual(len(RedirectionSet(end="2002/01/01")), 366)\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = ""\n+        request.form["start"] = ""\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(400 / 15.0))\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = "2001-01-27"\n+        request.form["end"] = "2001-01-27"\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(27 / 15.0))\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = "2002-01-01"\n+        request.form["end"] = "2002-01-01"\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\n         self.assertEqual(view.redirects().numpages, math.ceil(365 / 15.0))\n \n         request = self.layer["request"].clone()\n-        request.form["datetime"] = "2019-01-01"\n+        request.form["end"] = "2019-01-01"\n         view = getMultiAdapter(\n             (self.layer["portal"], request), name="redirection-controlpanel"\n         )\ndiff --git a/news/4009.feature b/news/4009.feature\nnew file mode 100644\nindex 0000000000..1a58fdb77f\n--- /dev/null\n+++ b/news/4009.feature\n@@ -0,0 +1 @@\n+Redirection control panel: Added support for start and end filters. @Faakhir30\n'

