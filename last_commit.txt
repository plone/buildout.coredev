Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2021-11-18T16:01:53+01:00
Author: Antoine DuchÃªne (duchenean) <antoine.duchene@imio.be>
Commit: https://github.com/plone/plone.app.textfield/commit/bab78507a73f5aaba4e1cadfdb0c214b8d892c7d

Fix usage of wysiwyg editor settings

In Plone 5 wysiwyg editor settings have moved from portal_properties to registry

Files changed:
A news/wysiwyg_editor_settings.bugfix
A plone/app/textfield/richtext_widget.rst
M plone/app/textfield/tests.py
M plone/app/textfield/utils.py
M plone/app/textfield/widget.py
M plone/app/textfield/widget_input.pt

b'diff --git a/news/wysiwyg_editor_settings.bugfix b/news/wysiwyg_editor_settings.bugfix\nnew file mode 100644\nindex 0000000..ac6f8c6\n--- /dev/null\n+++ b/news/wysiwyg_editor_settings.bugfix\n@@ -0,0 +1,2 @@\n+Fix usage of wysiwyg editor settings from portal_properties to registry\n+[duchenean, gotcha]\n\\ No newline at end of file\ndiff --git a/plone/app/textfield/richtext_widget.rst b/plone/app/textfield/richtext_widget.rst\nnew file mode 100644\nindex 0000000..ea12d85\n--- /dev/null\n+++ b/plone/app/textfield/richtext_widget.rst\n@@ -0,0 +1,62 @@\n+==============\n+RichTextWidget\n+==============\n+\n+The widget can render a rich text field for a text:\n+\n+  >>> from zope.interface.verify import verifyClass\n+  >>> from z3c.form import interfaces\n+  >>> from plone.app.textfield.widget import RichTextWidget\n+\n+The ``RichTextWidget`` is a widget:\n+\n+  >>> verifyClass(interfaces.IWidget, RichTextWidget)\n+  True\n+\n+The widget can render a input field only by adapting a request:\n+\n+  >>> from z3c.form.testing import TestRequest\n+  >>> request = TestRequest()\n+  >>> request.form[\'text\'] = "<p>Hello world</p>"\n+  >>> request.form[\'text.mimetype\'] = "text/html"\n+  >>> widget = RichTextWidget(request)\n+  >>> widget.context = layer[\'portal\']\n+  >>> widget.name = \'text\'\n+  >>> from plone.app.textfield import RichText\n+  >>> widget.field = RichText(allowed_mime_types=[\'text/html\'])\n+\n+Such a widget provides IWidget:\n+\n+  >>> interfaces.IWidget.providedBy(widget)\n+  True\n+\n+We also need to register the template for at least the widget and request:\n+\n+  >>> import os.path\n+  >>> import zope.interface\n+  >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n+  >>> from zope.pagetemplate.interfaces import IPageTemplate\n+  >>> import plone.app.textfield\n+  >>> import z3c.form.widget\n+  >>> template = os.path.join(os.path.dirname(plone.app.textfield.__file__),\n+  ...     \'widget_input.pt\')\n+  >>> factory = z3c.form.widget.WidgetTemplateFactory(template)\n+  >>> zope.component.provideAdapter(factory,\n+  ...     (zope.interface.Interface, IDefaultBrowserLayer, None, None, None),\n+  ...     IPageTemplate, name=\'input\')\n+\n+If we render the widget we get the HTML:\n+  >>> widget.update()\n+  >>> print(widget.render())\n+  <div xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" class="richTextWidget">\n+    <input type="hidden" id="text_text_format" name="text.mimeType" value="text/html"/>\n+    <div>\n+      <textarea name="text" rows="25" class="pat-tinymce" id="text">&lt;p&gt;Hello world&lt;/p&gt;</textarea>\n+    </div>\n+  </div>\n+  >>> from zope.component import getGlobalSiteManager\n+  >>> gsm = getGlobalSiteManager()\n+  >>> gsm.unregisterAdapter(factory,\n+  ...     (zope.interface.Interface, IDefaultBrowserLayer, None, None, None),\n+  ...     IPageTemplate, name=\'input\')\n+  True\ndiff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py\nindex 3acf11f..ea88521 100644\n--- a/plone/app/textfield/tests.py\n+++ b/plone/app/textfield/tests.py\n@@ -382,7 +382,23 @@ def check_output(self, want, got, optionflags):\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n+class TestTextfield(unittest.TestCase):\n+    def test_getWysiwygEditor(self):\n+        from plone.app.textfield.utils import getWysiwygEditor\n+        editor = getWysiwygEditor(None, [], u"TinyMCE")\n+        self.assertEquals(editor, u"tinymce")\n+        editor = getWysiwygEditor(u"None", [], u"TinyMCE")\n+        self.assertEquals(editor, u"plaintexteditor")\n+        editor = getWysiwygEditor(u"TinyMCE", [u"TinyMCE", u"None"], u"TinyMCE")\n+        self.assertEquals(editor, u"tinymce")\n+        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"None"], u"TinyMCE")\n+        self.assertEquals(editor, u"tinymce")\n+        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"CKeditor", u"None"], u"TinyMCE")\n+        self.assertEquals(editor, u"ckeditor")\n+\n+\n def test_suite():\n+\n     suite = unittest.makeSuite(TestIntegration)\n     for doctestfile in ["field.rst", "handler.rst", "marshaler.rst"]:\n         suite.addTest(\n@@ -393,4 +409,11 @@ def test_suite():\n                 layer=testing.PLONE_FIXTURE,\n             )\n         )\n+    flags = \\\n+        doctest.NORMALIZE_WHITESPACE | \\\n+        doctest.ELLIPSIS | \\\n+        doctest.IGNORE_EXCEPTION_DETAIL\n+    suite.addTest(layered(\n+        doctest.DocFileSuite("richtext_widget.rst", optionflags=flags),\n+        layer=testing.PLONE_INTEGRATION_TESTING))\n     return suite\ndiff --git a/plone/app/textfield/utils.py b/plone/app/textfield/utils.py\nindex 8ce90d9..03988e8 100644\n--- a/plone/app/textfield/utils.py\n+++ b/plone/app/textfield/utils.py\n@@ -7,6 +7,7 @@\n \n \n try:\n+    from Products.CMFPlone.interfaces import IEditingSchema\n     from Products.CMFPlone.interfaces import IMarkupSchema\n except ImportError:\n     IMarkupSchema = None\n@@ -55,3 +56,38 @@ def getAllowedContentTypes():\n         allowed_types = allowed - forbidden\n \n     return allowed_types\n+\n+\n+def getDefaultWysiwygEditor():\n+    registry = getUtility(IRegistry)\n+    try:\n+        records = registry.forInterface(IEditingSchema, check=False,\n+                                        prefix=\'plone\')\n+        default_editor = records.default_editor.lower()\n+    except AttributeError:\n+        default_editor = \'tinymce\'\n+    return default_editor\n+\n+\n+def getAvailableWysiwygEditors():\n+    registry = getUtility(IRegistry)\n+    try:\n+        records = registry.forInterface(IEditingSchema, check=False,\n+                                        prefix=\'plone\')\n+        available = records.available_editors\n+    except AttributeError:\n+        available = [\'TinyMCE\']\n+    return available\n+\n+\n+def getWysiwygEditor(member_editor, available_editors, default_editor):\n+    if member_editor is None:\n+        return default_editor.lower()\n+    elif member_editor == u\'None\':\n+        return u\'plaintexteditor\'\n+    elif member_editor in available_editors:\n+        return member_editor.lower()\n+    else:\n+        # Member\'s wysiwyg_editor property holds\n+        # wysiwyg_editor that has been uninstalled\n+        return default_editor.lower()\n\\ No newline at end of file\ndiff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py\nindex 165c22f..39b80b9 100644\n--- a/plone/app/textfield/widget.py\n+++ b/plone/app/textfield/widget.py\n@@ -1,8 +1,12 @@\n # -*- coding: utf-8 -*-\n from Acquisition import ImplicitAcquisitionWrapper\n+from Products.CMFCore.utils import getToolByName\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.utils import getAllowedContentTypes\n+from plone.app.textfield.utils import getDefaultWysiwygEditor\n+from plone.app.textfield.utils import getAvailableWysiwygEditors\n+from plone.app.textfield.utils import getWysiwygEditor\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.utils import closest_content\n from z3c.form.browser.textarea import TextAreaWidget\n@@ -77,6 +81,14 @@ def allowedMimeTypes(self):\n             allowed = getAllowedContentTypes()\n         return list(allowed)\n \n+    def getWysiwygEditor(self):\n+        tool = getToolByName(self.wrapped_context(), \'portal_membership\')\n+        member = tool.getAuthenticatedMember()\n+        member_editor = member.getProperty(\'wysiwyg_editor\')\n+        available_editors = getAvailableWysiwygEditors()\n+        default_editor = getDefaultWysiwygEditor()\n+        return getWysiwygEditor(member_editor, available_editors, default_editor)\n+\n \n @adapter(IRichText, IFormLayer)\n @implementer(IFieldWidget)\ndiff --git a/plone/app/textfield/widget_input.pt b/plone/app/textfield/widget_input.pt\nindex 087d54f..9063160 100644\n--- a/plone/app/textfield/widget_input.pt\n+++ b/plone/app/textfield/widget_input.pt\n@@ -56,9 +56,7 @@\n                         here_url           request/getURL;\n                         member context/portal_membership/getAuthenticatedMember;\n                         isAnon context/@@plone_portal_state/anonymous;\n-                        member_editor python: not isAnon and member.getProperty(\'wysiwyg_editor\').lower() or \'\';\n-                        default_editor python: context.portal_properties.site_properties.getProperty(\'default_editor\', \'\').lower();\n-                        editor python: member_editor==\'\' and default_editor or member_editor;\n+                        editor view/getWysiwygEditor;\n                         support_path string:nocall:here/@@${editor}_wysiwyg_support|here/${editor}_wysiwyg_support|here/${editor}/wysiwyg_support|here/portal_skins/plone_wysiwyg/wysiwyg_support;\n                         support python: path(support_path);\n                         tabindex           nothing;\n'

Repository: plone.app.textfield


Branch: refs/heads/master
Date: 2021-11-25T22:30:37+01:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.textfield/commit/36a2b2e8fba3518f60d2bbdb61a5a24428b9623e

Merge pull request #45 from gotcha/ckeditor

Fix access to wysiwyg editor settings

Files changed:
A news/wysiwyg_editor_settings.bugfix
A plone/app/textfield/richtext_widget.rst
M plone/app/textfield/tests.py
M plone/app/textfield/utils.py
M plone/app/textfield/widget.py
M plone/app/textfield/widget_input.pt

b'diff --git a/news/wysiwyg_editor_settings.bugfix b/news/wysiwyg_editor_settings.bugfix\nnew file mode 100644\nindex 0000000..ac6f8c6\n--- /dev/null\n+++ b/news/wysiwyg_editor_settings.bugfix\n@@ -0,0 +1,2 @@\n+Fix usage of wysiwyg editor settings from portal_properties to registry\n+[duchenean, gotcha]\n\\ No newline at end of file\ndiff --git a/plone/app/textfield/richtext_widget.rst b/plone/app/textfield/richtext_widget.rst\nnew file mode 100644\nindex 0000000..ea12d85\n--- /dev/null\n+++ b/plone/app/textfield/richtext_widget.rst\n@@ -0,0 +1,62 @@\n+==============\n+RichTextWidget\n+==============\n+\n+The widget can render a rich text field for a text:\n+\n+  >>> from zope.interface.verify import verifyClass\n+  >>> from z3c.form import interfaces\n+  >>> from plone.app.textfield.widget import RichTextWidget\n+\n+The ``RichTextWidget`` is a widget:\n+\n+  >>> verifyClass(interfaces.IWidget, RichTextWidget)\n+  True\n+\n+The widget can render a input field only by adapting a request:\n+\n+  >>> from z3c.form.testing import TestRequest\n+  >>> request = TestRequest()\n+  >>> request.form[\'text\'] = "<p>Hello world</p>"\n+  >>> request.form[\'text.mimetype\'] = "text/html"\n+  >>> widget = RichTextWidget(request)\n+  >>> widget.context = layer[\'portal\']\n+  >>> widget.name = \'text\'\n+  >>> from plone.app.textfield import RichText\n+  >>> widget.field = RichText(allowed_mime_types=[\'text/html\'])\n+\n+Such a widget provides IWidget:\n+\n+  >>> interfaces.IWidget.providedBy(widget)\n+  True\n+\n+We also need to register the template for at least the widget and request:\n+\n+  >>> import os.path\n+  >>> import zope.interface\n+  >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n+  >>> from zope.pagetemplate.interfaces import IPageTemplate\n+  >>> import plone.app.textfield\n+  >>> import z3c.form.widget\n+  >>> template = os.path.join(os.path.dirname(plone.app.textfield.__file__),\n+  ...     \'widget_input.pt\')\n+  >>> factory = z3c.form.widget.WidgetTemplateFactory(template)\n+  >>> zope.component.provideAdapter(factory,\n+  ...     (zope.interface.Interface, IDefaultBrowserLayer, None, None, None),\n+  ...     IPageTemplate, name=\'input\')\n+\n+If we render the widget we get the HTML:\n+  >>> widget.update()\n+  >>> print(widget.render())\n+  <div xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" class="richTextWidget">\n+    <input type="hidden" id="text_text_format" name="text.mimeType" value="text/html"/>\n+    <div>\n+      <textarea name="text" rows="25" class="pat-tinymce" id="text">&lt;p&gt;Hello world&lt;/p&gt;</textarea>\n+    </div>\n+  </div>\n+  >>> from zope.component import getGlobalSiteManager\n+  >>> gsm = getGlobalSiteManager()\n+  >>> gsm.unregisterAdapter(factory,\n+  ...     (zope.interface.Interface, IDefaultBrowserLayer, None, None, None),\n+  ...     IPageTemplate, name=\'input\')\n+  True\ndiff --git a/plone/app/textfield/tests.py b/plone/app/textfield/tests.py\nindex 3acf11f..ea88521 100644\n--- a/plone/app/textfield/tests.py\n+++ b/plone/app/textfield/tests.py\n@@ -382,7 +382,23 @@ def check_output(self, want, got, optionflags):\n         return doctest.OutputChecker.check_output(self, want, got, optionflags)\n \n \n+class TestTextfield(unittest.TestCase):\n+    def test_getWysiwygEditor(self):\n+        from plone.app.textfield.utils import getWysiwygEditor\n+        editor = getWysiwygEditor(None, [], u"TinyMCE")\n+        self.assertEquals(editor, u"tinymce")\n+        editor = getWysiwygEditor(u"None", [], u"TinyMCE")\n+        self.assertEquals(editor, u"plaintexteditor")\n+        editor = getWysiwygEditor(u"TinyMCE", [u"TinyMCE", u"None"], u"TinyMCE")\n+        self.assertEquals(editor, u"tinymce")\n+        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"None"], u"TinyMCE")\n+        self.assertEquals(editor, u"tinymce")\n+        editor = getWysiwygEditor(u"CKeditor", [u"TinyMCE", u"CKeditor", u"None"], u"TinyMCE")\n+        self.assertEquals(editor, u"ckeditor")\n+\n+\n def test_suite():\n+\n     suite = unittest.makeSuite(TestIntegration)\n     for doctestfile in ["field.rst", "handler.rst", "marshaler.rst"]:\n         suite.addTest(\n@@ -393,4 +409,11 @@ def test_suite():\n                 layer=testing.PLONE_FIXTURE,\n             )\n         )\n+    flags = \\\n+        doctest.NORMALIZE_WHITESPACE | \\\n+        doctest.ELLIPSIS | \\\n+        doctest.IGNORE_EXCEPTION_DETAIL\n+    suite.addTest(layered(\n+        doctest.DocFileSuite("richtext_widget.rst", optionflags=flags),\n+        layer=testing.PLONE_INTEGRATION_TESTING))\n     return suite\ndiff --git a/plone/app/textfield/utils.py b/plone/app/textfield/utils.py\nindex 8ce90d9..03988e8 100644\n--- a/plone/app/textfield/utils.py\n+++ b/plone/app/textfield/utils.py\n@@ -7,6 +7,7 @@\n \n \n try:\n+    from Products.CMFPlone.interfaces import IEditingSchema\n     from Products.CMFPlone.interfaces import IMarkupSchema\n except ImportError:\n     IMarkupSchema = None\n@@ -55,3 +56,38 @@ def getAllowedContentTypes():\n         allowed_types = allowed - forbidden\n \n     return allowed_types\n+\n+\n+def getDefaultWysiwygEditor():\n+    registry = getUtility(IRegistry)\n+    try:\n+        records = registry.forInterface(IEditingSchema, check=False,\n+                                        prefix=\'plone\')\n+        default_editor = records.default_editor.lower()\n+    except AttributeError:\n+        default_editor = \'tinymce\'\n+    return default_editor\n+\n+\n+def getAvailableWysiwygEditors():\n+    registry = getUtility(IRegistry)\n+    try:\n+        records = registry.forInterface(IEditingSchema, check=False,\n+                                        prefix=\'plone\')\n+        available = records.available_editors\n+    except AttributeError:\n+        available = [\'TinyMCE\']\n+    return available\n+\n+\n+def getWysiwygEditor(member_editor, available_editors, default_editor):\n+    if member_editor is None:\n+        return default_editor.lower()\n+    elif member_editor == u\'None\':\n+        return u\'plaintexteditor\'\n+    elif member_editor in available_editors:\n+        return member_editor.lower()\n+    else:\n+        # Member\'s wysiwyg_editor property holds\n+        # wysiwyg_editor that has been uninstalled\n+        return default_editor.lower()\n\\ No newline at end of file\ndiff --git a/plone/app/textfield/widget.py b/plone/app/textfield/widget.py\nindex 165c22f..39b80b9 100644\n--- a/plone/app/textfield/widget.py\n+++ b/plone/app/textfield/widget.py\n@@ -1,8 +1,12 @@\n # -*- coding: utf-8 -*-\n from Acquisition import ImplicitAcquisitionWrapper\n+from Products.CMFCore.utils import getToolByName\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.interfaces import IRichTextValue\n from plone.app.textfield.utils import getAllowedContentTypes\n+from plone.app.textfield.utils import getDefaultWysiwygEditor\n+from plone.app.textfield.utils import getAvailableWysiwygEditors\n+from plone.app.textfield.utils import getWysiwygEditor\n from plone.app.textfield.value import RichTextValue\n from plone.app.z3cform.utils import closest_content\n from z3c.form.browser.textarea import TextAreaWidget\n@@ -77,6 +81,14 @@ def allowedMimeTypes(self):\n             allowed = getAllowedContentTypes()\n         return list(allowed)\n \n+    def getWysiwygEditor(self):\n+        tool = getToolByName(self.wrapped_context(), \'portal_membership\')\n+        member = tool.getAuthenticatedMember()\n+        member_editor = member.getProperty(\'wysiwyg_editor\')\n+        available_editors = getAvailableWysiwygEditors()\n+        default_editor = getDefaultWysiwygEditor()\n+        return getWysiwygEditor(member_editor, available_editors, default_editor)\n+\n \n @adapter(IRichText, IFormLayer)\n @implementer(IFieldWidget)\ndiff --git a/plone/app/textfield/widget_input.pt b/plone/app/textfield/widget_input.pt\nindex 087d54f..9063160 100644\n--- a/plone/app/textfield/widget_input.pt\n+++ b/plone/app/textfield/widget_input.pt\n@@ -56,9 +56,7 @@\n                         here_url           request/getURL;\n                         member context/portal_membership/getAuthenticatedMember;\n                         isAnon context/@@plone_portal_state/anonymous;\n-                        member_editor python: not isAnon and member.getProperty(\'wysiwyg_editor\').lower() or \'\';\n-                        default_editor python: context.portal_properties.site_properties.getProperty(\'default_editor\', \'\').lower();\n-                        editor python: member_editor==\'\' and default_editor or member_editor;\n+                        editor view/getWysiwygEditor;\n                         support_path string:nocall:here/@@${editor}_wysiwyg_support|here/${editor}_wysiwyg_support|here/${editor}/wysiwyg_support|here/portal_skins/plone_wysiwyg/wysiwyg_support;\n                         support python: path(support_path);\n                         tabindex           nothing;\n'

