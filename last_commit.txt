Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2021-03-12T11:49:12+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/400009c0e12206ecfb03b9ae064224c2e7a2ba87

no need to use buildout for dev/testing here

Files changed:
M CONTRIBUTING.rst
D bootstrap.py
D buildout.cfg

b'diff --git a/CONTRIBUTING.rst b/CONTRIBUTING.rst\nindex fc637ac..4b71d82 100644\n--- a/CONTRIBUTING.rst\n+++ b/CONTRIBUTING.rst\n@@ -1 +1,8 @@\n Please see http://docs.plone.org/develop/coredev/docs/guidelines.html\n+\n+For development create a Python virtual environment and install one of the both ``requirements-testing-zope*.txt``::\n+\n+    python3 -m venv .\n+    bin/pip install -r requirements-testing-zope5.txt\n+    zope-testrunner --test-path=src\n+    \n\\ No newline at end of file\ndiff --git a/bootstrap.py b/bootstrap.py\ndeleted file mode 100644\nindex 1f59b21..0000000\n--- a/bootstrap.py\n+++ /dev/null\n@@ -1,210 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = \'2015-07-01\'\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix=\'bootstrap-\')\n-\n-usage = \'\'\'\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-\'\'\'\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option("--version",\n-                  action="store_true", default=False,\n-                  help=("Return bootstrap.py version."))\n-parser.add_option("-t", "--accept-buildout-test-releases",\n-                  dest=\'accept_buildout_test_releases\',\n-                  action="store_true", default=False,\n-                  help=("Normally, if you do not specify a --buildout-version, "\n-                        "the bootstrap script and buildout gets the newest "\n-                        "*final* versions of zc.buildout and its recipes and "\n-                        "extensions for you.  If you use this flag, "\n-                        "bootstrap and buildout will get the newest releases "\n-                        "even if they are alphas or betas."))\n-parser.add_option("-c", "--config-file",\n-                  help=("Specify the path to the buildout configuration "\n-                        "file to be used."))\n-parser.add_option("-f", "--find-links",\n-                  help=("Specify a URL to search for buildout releases"))\n-parser.add_option("--allow-site-packages",\n-                  action="store_true", default=False,\n-                  help=("Let bootstrap.py use existing site packages"))\n-parser.add_option("--buildout-version",\n-                  help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version",\n-                  help="Use a specific setuptools version")\n-parser.add_option("--setuptools-to-dir",\n-                  help=("Allow for re-use of existing directory of "\n-                        "setuptools versions"))\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists(\'ez_setup.py\'):\n-    exec(open(\'ez_setup.py\').read(), ez)\n-else:\n-    exec(urlopen(\'https://bootstrap.pypa.io/ez_setup.py\').read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, \'getsitepackages\'):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path\n-                               if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args[\'version\'] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args[\'to_dir\'] = options.setuptools_to_dir\n-\n-ez[\'use_setuptools\'](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(\n-    pkg_resources.Requirement.parse(\'setuptools\')).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [sys.executable, \'-c\',\n-       \'import sys; sys.path[0:0] = [%r]; \' % setuptools_path +\n-       \'from setuptools.command.easy_install import main; main()\',\n-       \'-mZqNxd\', tmpeggs]\n-\n-find_links = os.environ.get(\n-    \'bootstrap-testing-find-links\',\n-    options.find_links or\n-    (\'http://downloads.buildout.org/\'\n-     if options.accept_buildout_test_releases else None)\n-    )\n-if find_links:\n-    cmd.extend([\'-f\', find_links])\n-\n-requirement = \'zc.buildout\'\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-    _final_parts = \'*final-\', \'*final\'\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == \'*\') and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(\n-        search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = \'==\'.join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-if subprocess.call(cmd) != 0:\n-    raise Exception(\n-        "Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if \'=\' not in a]:\n-    args.append(\'bootstrap\')\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = [\'-c\', options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex bcc8f23..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-[buildout]\n-index = https://pypi.python.org/simple/\n-extends = https://zopefoundation.github.io/Zope/releases/master/versions-prod.cfg\n-versions = versions\n-develop = .\n-parts = test\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs = plone.recipe.zope2instance\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2021-03-12T11:50:02+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/1d413eff7800499f6474985808e043178f55a7fb

fix test, needs sentry-sdk installed beforehand

Files changed:
M setup.py

b"diff --git a/setup.py b/setup.py\nindex 7f5cc2b..206ffe9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -54,6 +54,7 @@\n     extras_require={\n         'test': [\n             'zope.testrunner',\n+            'sentry-sdk',\n         ],\n         'sentry': [\n             'sentry-sdk',\n"

