Repository: plone.resource


Branch: refs/heads/master
Date: 2020-09-16T22:28:53+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.resource/commit/fad2e06d9c5bb7f6bfcdc84c1bf813aa40f2b944

Fixed deprecation warning for SafeConfigParser.

Files changed:
A news/3130.bugfix
M plone/resource/manifest.py

b"diff --git a/news/3130.bugfix b/news/3130.bugfix\nnew file mode 100644\nindex 0000000..c15ce3a\n--- /dev/null\n+++ b/news/3130.bugfix\n@@ -0,0 +1,2 @@\n+Fixed various warnings.\n+[maurits]\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex f869070..96fea44 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -31,12 +31,18 @@\n from plone.resource.directory import FILTERS\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.utils import iterDirectoriesOfType\n-from six.moves.configparser import SafeConfigParser\n from zope.component import getUtility\n \n import logging\n import six\n \n+try:\n+    # Python 3\n+    from configparser import ConfigParser\n+except ImportError:\n+    # Python 2\n+    from ConfigParser import SafeConfigParser as ConfigParser\n+\n \n MANIFEST_FILENAME = 'manifest.cfg'\n \n@@ -79,7 +85,7 @@ def getManifest(fp, format, defaults=None):\n     if defaults is None:\n         defaults = format.defaults\n \n-    parser = SafeConfigParser()\n+    parser = ConfigParser()\n     if six.PY2:\n         parser.readfp(fp)\n     else:\n"

Repository: plone.resource


Branch: refs/heads/master
Date: 2020-09-16T23:02:29+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.resource/commit/77f3eda4822e380674a3ccb103e546ef13c75663

Fixed possibly unclosed files in tests.

Files changed:
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_manifest.py

b'diff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex 695ae26..b9c1943 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -274,8 +274,8 @@ def test_contains(self):\n \n     def test_openFile(self):\n         dir = self._makeOne()\n-        file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(b\'asdf\', file.read())\n+        with dir.openFile(\'demo/foo/test.html\') as fp:\n+            self.assertEqual(b\'asdf\', fp.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n@@ -294,9 +294,8 @@ def test_listDirectory_filters_by_name(self):\n         name = \'.dummy\'\n         file_path = os.path.join(dir.directory, name)\n         if name not in os.listdir(dir.directory):\n-            f = open(file_path, \'w\')\n-            f.write("")\n-            f.close()\n+            with open(file_path, \'w\') as fp:\n+                fp.write("")\n         self.assertTrue(name in os.listdir(dir.directory))\n         self.assertEqual([\'demo\'], dir.listDirectory())\n         # Cleanup created file.\ndiff --git a/plone/resource/tests/test_manifest.py b/plone/resource/tests/test_manifest.py\nindex 3bcae53..f03979d 100644\n--- a/plone/resource/tests/test_manifest.py\n+++ b/plone/resource/tests/test_manifest.py\n@@ -33,36 +33,30 @@ def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_get_manifest(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT)\n-        self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-        self.assertEqual(manifest[\'description\'], None)\n-        self.assertEqual(manifest[\'bar\'], \'baz\')\n-\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT)\n+            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n+            self.assertEqual(manifest[\'description\'], None)\n+            self.assertEqual(manifest[\'bar\'], \'baz\')\n \n     def test_get_manifest_params(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT_PARAMS)\n-        self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-        self.assertEqual(manifest[\'description\'], None)\n-        self.assertEqual(manifest[\'bar\'], \'baz\')\n-        self.assertEqual(manifest[\'params\'], {\'alpha\': \'beta\', \'delta\': \'theta\'})\n-\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT_PARAMS)\n+            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n+            self.assertEqual(manifest[\'description\'], None)\n+            self.assertEqual(manifest[\'bar\'], \'baz\')\n+            self.assertEqual(manifest[\'params\'], {\'alpha\': \'beta\', \'delta\': \'theta\'})\n \n     def test_get_manifest_ignores_extra(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT)\n-        self.assertFalse(\'baz\' in manifest)\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT)\n+            self.assertFalse(\'baz\' in manifest)\n \n     def test_get_manifest_override_defaults(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT, {\'bar\': \'foo\', \'title\': \'foo\'})\n-        self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-        self.assertEqual(manifest[\'bar\'], \'foo\')\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT, {\'bar\': \'foo\', \'title\': \'foo\'})\n+            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n+            self.assertEqual(manifest[\'bar\'], \'foo\')\n \n     def test_extract_from_zip_file(self):\n         zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'normal.zip\'))\n'

Repository: plone.resource


Branch: refs/heads/master
Date: 2020-09-17T17:33:52+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.resource/commit/9cd3efff981715deda1b8a6906bf43d9b1a4f233

First try Python 2 ConfigParser module.

Some tests in other packages started failing on Python 2, for example plone.app.theming.
The ImportError for 'from configparser import ConfigParser' was never raised,
because we got a backport.
And that meant we got the ConfigParser class instead of the required SafeConfigParser.
On Python 3 they are the same.

Files changed:
M plone/resource/manifest.py

b"diff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex 96fea44..267194a 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -37,11 +37,13 @@\n import six\n \n try:\n-    # Python 3\n-    from configparser import ConfigParser\n-except ImportError:\n-    # Python 2\n+    # On Python 2 we must have the SafeConfigParser\n     from ConfigParser import SafeConfigParser as ConfigParser\n+except ImportError:\n+    # On Python 3 we want the standard ConfigParser,\n+    # to avoid a deprecation warning.\n+    # Note that on Python 2 configparser can come from a backport.\n+    from configparser import ConfigParser\n \n \n MANIFEST_FILENAME = 'manifest.cfg'\n"

Repository: plone.resource


Branch: refs/heads/master
Date: 2020-09-18T09:40:17+02:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.resource/commit/8f73ef973766bab0a3b17d4aebc9ca62302ae3ba

Merge pull request #30 from plone/maurits/fix-warnings

Fix various warnings

Files changed:
A news/3130.bugfix
M plone/resource/manifest.py
M plone/resource/tests/test_directory.py
M plone/resource/tests/test_manifest.py

b'diff --git a/news/3130.bugfix b/news/3130.bugfix\nnew file mode 100644\nindex 0000000..c15ce3a\n--- /dev/null\n+++ b/news/3130.bugfix\n@@ -0,0 +1,2 @@\n+Fixed various warnings.\n+[maurits]\ndiff --git a/plone/resource/manifest.py b/plone/resource/manifest.py\nindex f869070..267194a 100644\n--- a/plone/resource/manifest.py\n+++ b/plone/resource/manifest.py\n@@ -31,12 +31,20 @@\n from plone.resource.directory import FILTERS\n from plone.resource.interfaces import IResourceDirectory\n from plone.resource.utils import iterDirectoriesOfType\n-from six.moves.configparser import SafeConfigParser\n from zope.component import getUtility\n \n import logging\n import six\n \n+try:\n+    # On Python 2 we must have the SafeConfigParser\n+    from ConfigParser import SafeConfigParser as ConfigParser\n+except ImportError:\n+    # On Python 3 we want the standard ConfigParser,\n+    # to avoid a deprecation warning.\n+    # Note that on Python 2 configparser can come from a backport.\n+    from configparser import ConfigParser\n+\n \n MANIFEST_FILENAME = \'manifest.cfg\'\n \n@@ -79,7 +87,7 @@ def getManifest(fp, format, defaults=None):\n     if defaults is None:\n         defaults = format.defaults\n \n-    parser = SafeConfigParser()\n+    parser = ConfigParser()\n     if six.PY2:\n         parser.readfp(fp)\n     else:\ndiff --git a/plone/resource/tests/test_directory.py b/plone/resource/tests/test_directory.py\nindex 695ae26..b9c1943 100644\n--- a/plone/resource/tests/test_directory.py\n+++ b/plone/resource/tests/test_directory.py\n@@ -274,8 +274,8 @@ def test_contains(self):\n \n     def test_openFile(self):\n         dir = self._makeOne()\n-        file = dir.openFile(\'demo/foo/test.html\')\n-        self.assertEqual(b\'asdf\', file.read())\n+        with dir.openFile(\'demo/foo/test.html\') as fp:\n+            self.assertEqual(b\'asdf\', fp.read())\n \n     def test_readFile(self):\n         dir = self._makeOne()\n@@ -294,9 +294,8 @@ def test_listDirectory_filters_by_name(self):\n         name = \'.dummy\'\n         file_path = os.path.join(dir.directory, name)\n         if name not in os.listdir(dir.directory):\n-            f = open(file_path, \'w\')\n-            f.write("")\n-            f.close()\n+            with open(file_path, \'w\') as fp:\n+                fp.write("")\n         self.assertTrue(name in os.listdir(dir.directory))\n         self.assertEqual([\'demo\'], dir.listDirectory())\n         # Cleanup created file.\ndiff --git a/plone/resource/tests/test_manifest.py b/plone/resource/tests/test_manifest.py\nindex 3bcae53..f03979d 100644\n--- a/plone/resource/tests/test_manifest.py\n+++ b/plone/resource/tests/test_manifest.py\n@@ -33,36 +33,30 @@ def tearDown(self):\n         zca.popGlobalRegistry()\n \n     def test_get_manifest(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT)\n-        self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-        self.assertEqual(manifest[\'description\'], None)\n-        self.assertEqual(manifest[\'bar\'], \'baz\')\n-\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT)\n+            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n+            self.assertEqual(manifest[\'description\'], None)\n+            self.assertEqual(manifest[\'bar\'], \'baz\')\n \n     def test_get_manifest_params(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT_PARAMS)\n-        self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-        self.assertEqual(manifest[\'description\'], None)\n-        self.assertEqual(manifest[\'bar\'], \'baz\')\n-        self.assertEqual(manifest[\'params\'], {\'alpha\': \'beta\', \'delta\': \'theta\'})\n-\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT_PARAMS)\n+            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n+            self.assertEqual(manifest[\'description\'], None)\n+            self.assertEqual(manifest[\'bar\'], \'baz\')\n+            self.assertEqual(manifest[\'params\'], {\'alpha\': \'beta\', \'delta\': \'theta\'})\n \n     def test_get_manifest_ignores_extra(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT)\n-        self.assertFalse(\'baz\' in manifest)\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT)\n+            self.assertFalse(\'baz\' in manifest)\n \n     def test_get_manifest_override_defaults(self):\n-        fp = open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\'))\n-        manifest = getManifest(fp, TEST_FORMAT, {\'bar\': \'foo\', \'title\': \'foo\'})\n-        self.assertEqual(manifest[\'title\'], \'Manifest test\')\n-        self.assertEqual(manifest[\'bar\'], \'foo\')\n-        fp.close()\n+        with open(os.path.join(test_dir_path, \'demo\', \'manifest-test\', \'manifest.cfg\')) as fp:\n+            manifest = getManifest(fp, TEST_FORMAT, {\'bar\': \'foo\', \'title\': \'foo\'})\n+            self.assertEqual(manifest[\'title\'], \'Manifest test\')\n+            self.assertEqual(manifest[\'bar\'], \'foo\')\n \n     def test_extract_from_zip_file(self):\n         zf = zipfile.ZipFile(os.path.join(base_path, \'zipfiles\', \'normal.zip\'))\n'

