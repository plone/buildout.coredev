Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-06-14T13:17:58-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.querystring/commit/b244f49e19bf1a8f7f7b58569bee7e5ca62ca457

Fix int operations to actually accept integers

Files changed:
M plone/app/querystring/queryparser.py
M plone/app/querystring/tests/testQueryParser.py

b'diff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex d32e1ea..bdc5175 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -112,11 +112,13 @@ def _intEqual(context, row):\n             values = [int(v) for v in row.values]\n         except (ValueError, TypeError, AttributeError):\n             pass\n-    elif not isinstance(row.values, int):\n+    else:\n         try:\n             values = int(row.values)\n         except (ValueError, TypeError, AttributeError):\n             pass\n+    if values is None:\n+        return {}\n     return {row.index: {"query": values}}\n \n \n@@ -154,19 +156,16 @@ def _largerThan(context, row):\n \n \n def _intLargerThan(context, row):\n-    value = None\n-    if not isinstance(row.values, int):\n-        try:\n-            value = int(row.values)\n-        except (ValueError, TypeError, AttributeError):\n-            pass\n-    tmp = {\n+    try:\n+        value = int(row.values)\n+    except (ValueError, TypeError, AttributeError):\n+        return {}\n+    return {\n         row.index: {\n             "query": value,\n             "range": "min",\n         },\n     }\n-    return tmp\n \n \n def _lessThan(context, row):\n@@ -180,20 +179,16 @@ def _lessThan(context, row):\n \n \n def _intLessThan(context, row):\n-    value = None\n-    if not isinstance(row.values, int):\n-        try:\n-            value = int(row.values)\n-        except (ValueError, TypeError, AttributeError):\n-            # value = 0\n-            pass\n-    tmp = {\n+    try:\n+        value = int(row.values)\n+    except (ValueError, TypeError, AttributeError):\n+        return {}\n+    return {\n         row.index: {\n             "query": value,\n             "range": "max",\n         },\n     }\n-    return tmp\n \n \n def _currentUser(context, row):\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex f2e2e04..c183398 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -327,6 +327,18 @@ def test__equal(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intEqual(self):\n+        # int\n+        data = Row(index="modified", operator="_intEqual", values=20)\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {"modified": {"query": 20}}\n+        self.assertEqual(parsed, expected)\n+\n+        # list of ints\n+        data = Row(index="modified", operator="_intEqual", values=[20, 21])\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {"modified": {"query": [20, 21]}}\n+        self.assertEqual(parsed, expected)\n+\n         # bytes\n         data = Row(index="modified", operator="_intEqual", values=b"20")\n         parsed = queryparser._intEqual(MockSite(), data)\n@@ -354,7 +366,7 @@ def test__intEqual(self):\n         # bad text\n         data = Row(index="modified", operator="_intEqual", values="bad")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {"modified": {"query": None}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n         # list of bad text\n@@ -362,7 +374,7 @@ def test__intEqual(self):\n             index="modified", operator="_intEqual", values=[b"bad", "text", "values"]\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {"modified": {"query": None}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n     def test__lessThan(self):\n@@ -372,6 +384,12 @@ def test__lessThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLessThan(self):\n+        # int\n+        data = Row(index="modified", operator="_intLessThan", values=20)\n+        parsed = queryparser._intLessThan(MockSite(), data)\n+        expected = {"modified": {"query": 20, "range": "max"}}\n+        self.assertEqual(parsed, expected)\n+\n         # bytes\n         data = Row(index="modified", operator="_intLessThan", values=b"20")\n         parsed = queryparser._intLessThan(MockSite(), data)\n@@ -387,7 +405,7 @@ def test__intLessThan(self):\n         # bad value\n         data = Row(index="modified", operator="_intLessThan", values="bad")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {"modified": {"query": None, "range": "max"}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n     def test__largerThan(self):\n@@ -397,6 +415,12 @@ def test__largerThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLargerThan(self):\n+        # int\n+        data = Row(index="modified", operator="_intLargerThan", values=20)\n+        parsed = queryparser._intLargerThan(MockSite(), data)\n+        expected = {"modified": {"query": 20, "range": "min"}}\n+        self.assertEqual(parsed, expected)\n+\n         # bytes\n         data = Row(index="modified", operator="_intLargerThan", values=b"20")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n@@ -412,7 +436,7 @@ def test__intLargerThan(self):\n         # bad value\n         data = Row(index="modified", operator="_intLargerThan", values="bad")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {"modified": {"query": None, "range": "min"}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n     def test__currentUser(self):\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-06-14T13:20:03-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.querystring/commit/1c34acb488379428d1827126de6240ae892546fd

changelog

Files changed:
A news/131.bugfix

b'diff --git a/news/131.bugfix b/news/131.bugfix\nnew file mode 100644\nindex 0000000..fc7541d\n--- /dev/null\n+++ b/news/131.bugfix\n@@ -0,0 +1,2 @@\n+Fix integer operations to accept integers. @davisagli\n+Fix integer operations to avoid adding None to the query when the input is not valid. @davisagli\n'

Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2023-06-15T07:19:45-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.querystring/commit/11fc4cd1e48efce4e753a2c162b7cb86b1aadc06

Merge pull request #131 from plone/fix-int-ops

Fix int operations to actually accept integers

Files changed:
A news/131.bugfix
M plone/app/querystring/queryparser.py
M plone/app/querystring/tests/testQueryParser.py

b'diff --git a/news/131.bugfix b/news/131.bugfix\nnew file mode 100644\nindex 0000000..fc7541d\n--- /dev/null\n+++ b/news/131.bugfix\n@@ -0,0 +1,2 @@\n+Fix integer operations to accept integers. @davisagli\n+Fix integer operations to avoid adding None to the query when the input is not valid. @davisagli\ndiff --git a/plone/app/querystring/queryparser.py b/plone/app/querystring/queryparser.py\nindex d32e1ea..bdc5175 100644\n--- a/plone/app/querystring/queryparser.py\n+++ b/plone/app/querystring/queryparser.py\n@@ -112,11 +112,13 @@ def _intEqual(context, row):\n             values = [int(v) for v in row.values]\n         except (ValueError, TypeError, AttributeError):\n             pass\n-    elif not isinstance(row.values, int):\n+    else:\n         try:\n             values = int(row.values)\n         except (ValueError, TypeError, AttributeError):\n             pass\n+    if values is None:\n+        return {}\n     return {row.index: {"query": values}}\n \n \n@@ -154,19 +156,16 @@ def _largerThan(context, row):\n \n \n def _intLargerThan(context, row):\n-    value = None\n-    if not isinstance(row.values, int):\n-        try:\n-            value = int(row.values)\n-        except (ValueError, TypeError, AttributeError):\n-            pass\n-    tmp = {\n+    try:\n+        value = int(row.values)\n+    except (ValueError, TypeError, AttributeError):\n+        return {}\n+    return {\n         row.index: {\n             "query": value,\n             "range": "min",\n         },\n     }\n-    return tmp\n \n \n def _lessThan(context, row):\n@@ -180,20 +179,16 @@ def _lessThan(context, row):\n \n \n def _intLessThan(context, row):\n-    value = None\n-    if not isinstance(row.values, int):\n-        try:\n-            value = int(row.values)\n-        except (ValueError, TypeError, AttributeError):\n-            # value = 0\n-            pass\n-    tmp = {\n+    try:\n+        value = int(row.values)\n+    except (ValueError, TypeError, AttributeError):\n+        return {}\n+    return {\n         row.index: {\n             "query": value,\n             "range": "max",\n         },\n     }\n-    return tmp\n \n \n def _currentUser(context, row):\ndiff --git a/plone/app/querystring/tests/testQueryParser.py b/plone/app/querystring/tests/testQueryParser.py\nindex f2e2e04..c183398 100644\n--- a/plone/app/querystring/tests/testQueryParser.py\n+++ b/plone/app/querystring/tests/testQueryParser.py\n@@ -327,6 +327,18 @@ def test__equal(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intEqual(self):\n+        # int\n+        data = Row(index="modified", operator="_intEqual", values=20)\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {"modified": {"query": 20}}\n+        self.assertEqual(parsed, expected)\n+\n+        # list of ints\n+        data = Row(index="modified", operator="_intEqual", values=[20, 21])\n+        parsed = queryparser._intEqual(MockSite(), data)\n+        expected = {"modified": {"query": [20, 21]}}\n+        self.assertEqual(parsed, expected)\n+\n         # bytes\n         data = Row(index="modified", operator="_intEqual", values=b"20")\n         parsed = queryparser._intEqual(MockSite(), data)\n@@ -354,7 +366,7 @@ def test__intEqual(self):\n         # bad text\n         data = Row(index="modified", operator="_intEqual", values="bad")\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {"modified": {"query": None}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n         # list of bad text\n@@ -362,7 +374,7 @@ def test__intEqual(self):\n             index="modified", operator="_intEqual", values=[b"bad", "text", "values"]\n         )\n         parsed = queryparser._intEqual(MockSite(), data)\n-        expected = {"modified": {"query": None}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n     def test__lessThan(self):\n@@ -372,6 +384,12 @@ def test__lessThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLessThan(self):\n+        # int\n+        data = Row(index="modified", operator="_intLessThan", values=20)\n+        parsed = queryparser._intLessThan(MockSite(), data)\n+        expected = {"modified": {"query": 20, "range": "max"}}\n+        self.assertEqual(parsed, expected)\n+\n         # bytes\n         data = Row(index="modified", operator="_intLessThan", values=b"20")\n         parsed = queryparser._intLessThan(MockSite(), data)\n@@ -387,7 +405,7 @@ def test__intLessThan(self):\n         # bad value\n         data = Row(index="modified", operator="_intLessThan", values="bad")\n         parsed = queryparser._intLessThan(MockSite(), data)\n-        expected = {"modified": {"query": None, "range": "max"}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n     def test__largerThan(self):\n@@ -397,6 +415,12 @@ def test__largerThan(self):\n         self.assertEqual(parsed, expected)\n \n     def test__intLargerThan(self):\n+        # int\n+        data = Row(index="modified", operator="_intLargerThan", values=20)\n+        parsed = queryparser._intLargerThan(MockSite(), data)\n+        expected = {"modified": {"query": 20, "range": "min"}}\n+        self.assertEqual(parsed, expected)\n+\n         # bytes\n         data = Row(index="modified", operator="_intLargerThan", values=b"20")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n@@ -412,7 +436,7 @@ def test__intLargerThan(self):\n         # bad value\n         data = Row(index="modified", operator="_intLargerThan", values="bad")\n         parsed = queryparser._intLargerThan(MockSite(), data)\n-        expected = {"modified": {"query": None, "range": "min"}}\n+        expected = {}\n         self.assertEqual(parsed, expected)\n \n     def test__currentUser(self):\n'

