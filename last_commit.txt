Repository: plone.restapi


Branch: refs/heads/main
Date: 2024-04-01T18:06:55-03:00
Author: Wesley Barroso Lopes (wesleybl) <wesleybl@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/b9bda7b8edb5b692bc11e0291538f2879545ae39

In Plone 6, uses plone.textindexer to add block texts to the SearchableText index (#1766)

* In Plone 6, uses plone.textindexer to add block texts to the
SearchableText index

This ensures that behaviors can add fields to SearchableText with
plone.textindexer.

IBlocks now inherits from IDexterityTextIndexer, so there is no need to
add the plone.textindexer behavior to the types to enable indexing. The
content simply needs to have the IBlocks behavior.

* Simplify definition of IBlocks

* Avoid conditional import

---------

Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;

Files changed:
A news/1744.bugfix
M src/plone/restapi/behaviors.py
M src/plone/restapi/indexers.py
M src/plone/restapi/indexers.zcml
M src/plone/restapi/tests/test_blocks_searchable_text.py
M src/plone/restapi/tests/test_indexers.py

b'diff --git a/news/1744.bugfix b/news/1744.bugfix\nnew file mode 100644\nindex 000000000..6e261c32d\n--- /dev/null\n+++ b/news/1744.bugfix\n@@ -0,0 +1 @@\n+In Plone 6, uses ``plone.textindexer`` to add block texts to the SearchableText index, instead of ``plone.indexer``. This ensures that behaviors can add fields to SearchableText with ``plone.textindexer``. @wesleybl\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/behaviors.py b/src/plone/restapi/behaviors.py\nindex a544f0fbd..e9389db3d 100644\n--- a/src/plone/restapi/behaviors.py\n+++ b/src/plone/restapi/behaviors.py\n@@ -2,11 +2,19 @@\n from plone.restapi import _\n from plone.schema import JSONField\n from plone.supermodel import model\n+from zope.interface import Interface\n from zope.interface import provider\n \n import json\n \n \n+# In Plone 6, IBlocks implicitly enables the IDexterityTextIndexer behavior\n+# to handle full-text indexing. In Plone 5, it is not available.\n+try:\n+    from plone.app.dexterity.textindexer.behavior import IDexterityTextIndexer\n+except ImportError:\n+    IDexterityTextIndexer = Interface\n+\n BLOCKS_SCHEMA = json.dumps({"type": "object", "properties": {}})\n \n LAYOUT_SCHEMA = json.dumps(\n@@ -18,7 +26,7 @@\n \n \n @provider(IFormFieldProvider)\n-class IBlocks(model.Schema):\n+class IBlocks(model.Schema, IDexterityTextIndexer):\n \n     model.fieldset("layout", label=_("Layout"), fields=["blocks", "blocks_layout"])\n \ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex cfb65587e..536219246 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -1,12 +1,6 @@\n-# XXX: EXPERIMENTAL!!!\n-# This is an experimental feature meant for use in Volto only!\n-# This code is likely to change in the future, even within minor releases.\n-# We will make sure plone.restapi latest always works with the latest Volto release.\n-# This code is planned to being refactored into plone.volto before CMFPlone 6.0 is out.\n-# <tisto@plone.org>\n-\n from plone.app.contenttypes.indexers import SearchableText\n from plone.indexer.decorator import indexer\n+from plone.restapi import HAS_PLONE_6\n from plone.restapi.behaviors import IBlocks\n from plone.restapi.blocks import visit_subblocks\n from plone.restapi.interfaces import IBlockSearchableText\n@@ -88,7 +82,6 @@ def extract_text(block, obj, request):\n     :param request: Current request.\n     :returns: A string with text found in the block.\n     """\n-    result = ""\n     block_type = block.get("@type", "")\n     # searchableText is the conventional way of storing\n     # searchable info in a block\n@@ -107,8 +100,7 @@ def extract_text(block, obj, request):\n     return result\n \n \n-@indexer(IBlocks)\n-def SearchableText_blocks(obj):\n+def get_blocks_text(obj):\n     """Extract text to be used by the SearchableText index in the Catalog."""\n     request = getRequest()\n     blocks = obj.blocks\n@@ -117,8 +109,35 @@ def SearchableText_blocks(obj):\n     for block_id in blocks_layout.get("items", []):\n         block = blocks.get(block_id, {})\n         blocks_text.append(extract_text(block, obj, request))\n-\n-    # Extract text using the base plone.app.contenttypes indexer\n-    std_text = SearchableText(obj)\n-    blocks_text.append(std_text)\n-    return " ".join([text.strip() for text in blocks_text if text.strip()])\n+    return blocks_text\n+\n+\n+def text_strip(text_list):\n+    return " ".join([text.strip() for text in text_list if text.strip()])\n+\n+\n+if HAS_PLONE_6:\n+    # In Plone 6, uses IDynamicTextIndexExtender to index block texts.\n+    # This ensures that indexing with plone.textindexer continues to work. See:\n+    # https://github.com/plone/plone.restapi/issues/1744\n+    from plone.app.dexterity import textindexer\n+\n+    @implementer(textindexer.IDynamicTextIndexExtender)\n+    @adapter(IBlocks)\n+    class BlocksSearchableTextExtender(object):\n+        def __init__(self, context):\n+            self.context = context\n+\n+        def __call__(self):\n+            return text_strip(get_blocks_text(self.context))\n+\n+else:\n+    # BBB: Plone 5.2 does not have plone.app.dexterity.textindexer.\n+    # So we need to index with plone.indexer.\n+    @indexer(IBlocks)\n+    def SearchableText_blocks(obj):\n+        blocks_text = get_blocks_text(obj)\n+        # Extract text using the base plone.app.contenttypes indexer\n+        std_text = SearchableText(obj)\n+        blocks_text.append(std_text)\n+        return text_strip(blocks_text)\ndiff --git a/src/plone/restapi/indexers.zcml b/src/plone/restapi/indexers.zcml\nindex 345a065ec..3d5c78ffd 100644\n--- a/src/plone/restapi/indexers.zcml\n+++ b/src/plone/restapi/indexers.zcml\n@@ -4,23 +4,27 @@\n     i18n_domain="plone"\n     >\n \n-  <configure zcml:condition="installed plone.app.contenttypes">\n-    <adapter\n-        factory=".indexers.SearchableText_blocks"\n-        name="SearchableText"\n-        />\n-    <adapter\n-        factory=".indexers.TextBlockSearchableText"\n-        name="text"\n-        />\n-    <adapter\n-        factory=".indexers.SlateTextIndexer"\n-        name="slate"\n-        />\n-    <adapter\n-        factory=".indexers.TableBlockSearchableText"\n-        name="table"\n-        />\n-  </configure>\n+  <adapter\n+      factory=".indexers.BlocksSearchableTextExtender"\n+      name="IBlocks"\n+      zcml:condition="have plone-60"\n+      />\n+  <adapter\n+      factory=".indexers.SearchableText_blocks"\n+      name="SearchableText"\n+      zcml:condition="not-have plone-60"\n+      />\n+  <adapter\n+      factory=".indexers.TextBlockSearchableText"\n+      name="text"\n+      />\n+  <adapter\n+      factory=".indexers.SlateTextIndexer"\n+      name="slate"\n+      />\n+  <adapter\n+      factory=".indexers.TableBlockSearchableText"\n+      name="table"\n+      />\n \n </configure>\ndiff --git a/src/plone/restapi/tests/test_blocks_searchable_text.py b/src/plone/restapi/tests/test_blocks_searchable_text.py\nindex e979dce99..5f82129fb 100644\n--- a/src/plone/restapi/tests/test_blocks_searchable_text.py\n+++ b/src/plone/restapi/tests/test_blocks_searchable_text.py\n@@ -7,7 +7,7 @@\n from plone.dexterity.utils import createContentInContainer\n from plone.restapi.behaviors import IBlocks\n from plone.restapi.interfaces import IBlockSearchableText\n-from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n from zope.component import adapter\n from zope.component import provideAdapter\n@@ -21,7 +21,7 @@\n \n class TestSearchTextInBlocks(unittest.TestCase):\n \n-    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+    layer = PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         self.app = self.layer["app"]\ndiff --git a/src/plone/restapi/tests/test_indexers.py b/src/plone/restapi/tests/test_indexers.py\nindex 0e227a4c9..671a6836b 100644\n--- a/src/plone/restapi/tests/test_indexers.py\n+++ b/src/plone/restapi/tests/test_indexers.py\n@@ -1,6 +1,6 @@\n from plone.dexterity.interfaces import IDexterityFTI\n-from plone.restapi.indexers import SearchableText_blocks\n-from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n+from Products.CMFCore.utils import getToolByName\n from uuid import uuid4\n from zope.component import queryUtility\n \n@@ -89,11 +89,12 @@\n \n class TestSearchableTextIndexer(unittest.TestCase):\n \n-    layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+    layer = PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n \n     def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n+        self.catalog = getToolByName(self.portal, "portal_catalog")\n         fti = queryUtility(IDexterityFTI, name="Document")\n         behavior_list = [a for a in fti.behaviors]\n         behavior_list.append("volto.blocks")\n@@ -108,10 +109,12 @@ def setUp(self):\n         )\n         self.document = self.portal["doc1"]\n \n-    @staticmethod\n-    def _extract_searchable_text(obj):\n-        indexer = SearchableText_blocks(obj)\n-        return indexer()\n+    def _extract_searchable_text(self, obj):\n+        query = {"path": {"query": "/".join(obj.getPhysicalPath()), "depth": 0}}\n+        brains = self.catalog(query)\n+        brain = brains[0]\n+        data = self.catalog.getIndexDataForRID(brain.getRID())\n+        return " ".join(data["SearchableText"])\n \n     @staticmethod\n     def _add_blocks(obj, raw_blocks):\n@@ -119,11 +122,12 @@ def _add_blocks(obj, raw_blocks):\n         layout = list(blocks.keys())\n         obj.blocks = blocks\n         obj.blocks_layout["items"] = layout\n+        obj.reindexObject()\n \n     def test_indexer_no_blocks(self):\n         result = self._extract_searchable_text(self.document)\n-        self.assertIn("Title is here", result)\n-        self.assertIn("Description is there", result)\n+        self.assertIn("title is here", result)\n+        self.assertIn("description is there", result)\n \n     def test_indexer_block_has_searchableText(self):\n         document = self.document\n@@ -132,8 +136,8 @@ def test_indexer_block_has_searchableText(self):\n             [{"@type": "new-block", "attribute": "bar", "searchableText": "Foo Bar"}],\n         )\n         result = self._extract_searchable_text(document)\n-        self.assertIn("Title is here Description is there", result)\n-        self.assertIn("Foo Bar", result)\n+        self.assertIn("title is here description is there", result)\n+        self.assertIn("foo bar", result)\n \n     def test_indexer_multiple_blocks(self):\n         document = self.document\n@@ -145,7 +149,7 @@ def test_indexer_multiple_blocks(self):\n             ],\n         )\n         result = self._extract_searchable_text(document)\n-        self.assertIn("Plone is a CMS ", result)\n+        self.assertIn("plone is a cms", result)\n \n     def test_indexer_block_slate_bbb(self):\n         document = self.document\n@@ -156,8 +160,8 @@ def test_indexer_block_slate_bbb(self):\n             ],\n         )\n         result = self._extract_searchable_text(document)\n-        self.assertIn("Title is here Description is there", result)\n-        self.assertIn("Follow Plone Conference", result)\n+        self.assertIn("title is here description is there", result)\n+        self.assertIn("follow plone conference", result)\n \n     def test_indexer_block_text(self):\n         document = self.document\n@@ -168,8 +172,8 @@ def test_indexer_block_text(self):\n             ],\n         )\n         result = self._extract_searchable_text(document)\n-        self.assertIn("Title is here Description is there", result)\n-        self.assertIn("Plone is a powerful content management system", result)\n+        self.assertIn("title is here description is there", result)\n+        self.assertIn("plone is a powerful content management system", result)\n \n     def test_indexer_block_table(self):\n         document = self.document\n@@ -180,8 +184,8 @@ def test_indexer_block_table(self):\n             ],\n         )\n         result = self._extract_searchable_text(document)\n-        self.assertIn("Title is here Description is there", result)\n-        self.assertIn("My data", result)\n+        self.assertIn("title is here description is there", result)\n+        self.assertIn("my data", result)\n \n     def test_indexer_block_with_subblocks(self):\n         document = self.document\n@@ -208,8 +212,8 @@ def test_indexer_block_with_subblocks(self):\n         )\n         result = self._extract_searchable_text(document)\n         # From Slate sub block\n-        self.assertIn("Follow Plone Conference", result)\n+        self.assertIn("follow plone conference", result)\n         # From DraftJS\n-        self.assertIn("Plone is a powerful content management system", result)\n+        self.assertIn("plone is a powerful content management system", result)\n         # From Table block\n-        self.assertIn("My data", result)\n+        self.assertIn("my data", result)\n'

