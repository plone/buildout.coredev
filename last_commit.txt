Repository: plone.event


Branch: refs/heads/master
Date: 2023-09-18T16:07:30+02:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.event/commit/186c0708b166e419b1b018eaaada6023025ce310

ignore dtstart and until time in rrule (#23)

Ignore dtstart and until time in rrule in recurrence_sequence_ical.

In recurrence_sequence_ical, the DTSTART in the recrule is used for all occurrences that follow the first one. This is a design issue because the start time is a mandatory parameter, and its time must be used for every occurrence, by design.

For the same reason, the time in the UNTIL field must always be ignored.

Problems occur, for example, with the rrule widget in Volto (see also plone/volto#5002), which consistently returns a DTSTART and UNTIL field inside the recrule with a timezone (UTC).

Files changed:
A news/23.bugfix
M plone/event/recurrence.py
M plone/event/tests/test_recurrence_sequence_ical.py

b'diff --git a/news/23.bugfix b/news/23.bugfix\nnew file mode 100644\nindex 0000000..abd78be\n--- /dev/null\n+++ b/news/23.bugfix\n@@ -0,0 +1 @@\n+Ignore dtstart and until time in rrule in recurrence_sequence_ical [mamico]\ndiff --git a/plone/event/recurrence.py b/plone/event/recurrence.py\nindex 2900837..34a6ffe 100644\n--- a/plone/event/recurrence.py\n+++ b/plone/event/recurrence.py\n@@ -72,6 +72,14 @@ def recurrence_sequence_ical(\n         duration = datetime.timedelta(0)\n \n     if recrule:\n+        # We want the recurrence be calculated ignoring the DTSTART,\n+        # which is defined by the event\'s own start.\n+        # \xe2\x80\x8c Also set the UNTIL time to the end of the day to include the last\n+        # occurrence for sure.\n+        #\n+        # start is a mandatory parameter for this function, remove DTSTART\n+        # from recrule\n+        recrule = re.sub(r"DTSTART:[^;\\n]*[;\\n]", "", recrule, re.MULTILINE)\n         # TODO BUGFIX WRONG TIME DEFINITIONS\n         # THIS HACK ensures, that UNTIL, RDATE and EXDATE definitions with\n         # incorrect time (currently always set to 0:00 by the recurrence\n@@ -93,9 +101,9 @@ def recurrence_sequence_ical(\n         # subbing if the start time is already 000000.\n         if t0str != "T000000":\n             recrule = re.sub(r"T000000", t0str, recrule)\n-        # Then, replace incorrect until times with the end of the day\n+        # Then, replace each until times with the end of the day\n         recrule = re.sub(\n-            r"(UNTIL[^T]*[0-9]{8})T(000000)",\n+            r"(UNTIL[^T]*[0-9]{8})T([0-9]{6}Z?)",\n             r"\\1T235959",\n             recrule,\n         )\ndiff --git a/plone/event/tests/test_recurrence_sequence_ical.py b/plone/event/tests/test_recurrence_sequence_ical.py\nindex 25f1887..6dbe2cf 100644\n--- a/plone/event/tests/test_recurrence_sequence_ical.py\n+++ b/plone/event/tests/test_recurrence_sequence_ical.py\n@@ -180,3 +180,18 @@ def test_recrule_until_with_timezone(self):\n         recrule = "RRULE:FREQ=DAILY;UNTIL=20111130T000000Z"\n         seq = list(recurrence_sequence_ical(start, recrule=recrule))\n         self.assertEqual(len(seq), 7)\n+\n+    def test_recrule_with_dtstart(self):\n+        from datetime import datetime\n+        from plone.event.recurrence import recurrence_sequence_ical\n+\n+        import pytz\n+\n+        at = pytz.timezone("Europe/Vienna")\n+        start = at.localize(datetime(2023, 9, 4, 1, 0))\n+        # DTSTART is ignored, because start is ever explicitly given\n+        recrule = "DTSTART:20230903T180000Z\\nRRULE:FREQ=DAILY;UNTIL=20230905T230000Z"\n+        seq = list(recurrence_sequence_ical(start, recrule=recrule))\n+        self.assertEqual(len(seq), 2)\n+        self.assertEqual(seq[0], at.localize(datetime(2023, 9, 4, 1, 0)))\n+        self.assertEqual(seq[1], at.localize(datetime(2023, 9, 5, 1, 0)))\n'

