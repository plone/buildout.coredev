Repository: plone.api


Branch: refs/heads/master
Date: 2024-06-16T00:43:54+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.api/commit/91116db81545f9e208aba66c03b8a75e44d95077

Removed portal_properties from documentation and tests.

Files changed:
A news/125.bugfix
M docs/about.md
M docs/user.md
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py

b'diff --git a/docs/about.md b/docs/about.md\nindex cf7a7316..e476b0b7 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -70,12 +70,7 @@ In general, importing and using an API looks something like this:\n % invisible-code-block: python\n %\n % from plone import api\n-% from plone.api.exc import InvalidParameterError\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = True\n+% api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n \n ```python\n from plone import api\ndiff --git a/docs/user.md b/docs/user.md\nindex 11362b43..c04ccd0b 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -26,12 +26,7 @@ If your portal is configured to use emails as usernames, you just need to pass i\n % invisible-code-block: python\n %\n % from plone import api\n-% from plone.api.exc import InvalidParameterError\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = True\n+% api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n \n ```python\n from plone import api\n@@ -47,11 +42,7 @@ Otherwise, you also need to pass in the username of the new user.\n \n % invisible-code-block: python\n %\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = False\n+% api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n \n ```python\n user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\ndiff --git a/news/125.bugfix b/news/125.bugfix\nnew file mode 100644\nindex 00000000..1e1def71\n--- /dev/null\n+++ b/news/125.bugfix\n@@ -0,0 +1,2 @@\n+Removed `portal_properties` from documentation and tests.\n+[maurits]\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 39992127..32bfa810 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -100,32 +100,23 @@ def setUp(self):\n \n     def _set_localization_date_format(self):\n         """Set the expected localized date format."""\n-        from plone.api.exc import InvalidParameterError\n-\n         name_root = "Products.CMFPlone.i18nl10n.override_dateformat."\n-        try:\n-            portal.set_registry_record(\n-                name=name_root + "Enabled",\n-                value=True,\n-            )\n-            portal.set_registry_record(\n-                name=name_root + "date_format_long",\n-                value="%b %d, %Y %I:%M %p",\n-            )\n-            portal.set_registry_record(\n-                name=name_root + "time_format",\n-                value="%I:%M %p",\n-            )\n-            portal.set_registry_record(\n-                name=name_root + "date_format_short",\n-                value="%b %d, %Y",\n-            )\n-        except InvalidParameterError:\n-            # before Plone 4.3, date formats were stored in portal_properties\n-            properties = portal.get_tool("portal_properties")\n-            properties.localLongTimeFormat = "%b %d, %Y %I:%M %p"\n-            properties.localTimeOnlyFormat = "%I:%M %p"\n-            properties.localTimeFormat = "%b %d, %Y"\n+        portal.set_registry_record(\n+            name=name_root + "Enabled",\n+            value=True,\n+        )\n+        portal.set_registry_record(\n+            name=name_root + "date_format_long",\n+            value="%b %d, %Y %I:%M %p",\n+        )\n+        portal.set_registry_record(\n+            name=name_root + "time_format",\n+            value="%I:%M %p",\n+        )\n+        portal.set_registry_record(\n+            name=name_root + "date_format_short",\n+            value="%b %d, %Y",\n+        )\n \n     def test_get(self):\n         """Test getting the portal object."""\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex bfc770e3..f876e07a 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -42,13 +42,7 @@ def _check_userid_and_username_different(self):\n         self.assertNotEqual(userid, username)\n \n     def _set_emaillogin(self, value):\n-        from plone.api.exc import InvalidParameterError\n-\n-        try:\n-            api.portal.set_registry_record("plone.use_email_as_login", value)\n-        except InvalidParameterError:\n-            portal = api.portal.get()\n-            portal.portal_properties.site_properties.use_email_as_login = value\n+        api.portal.set_registry_record("plone.use_email_as_login", value)\n \n     def test_create_no_email(self):\n         """Test that exception is raised if no email is given."""\n'

Repository: plone.api


Branch: refs/heads/master
Date: 2024-06-16T10:56:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@py76.be>
Commit: https://github.com/plone/plone.api/commit/b114c588c6b3b3984c2d682db4098912e87d0a48

Merge pull request #536 from plone/remove-portal_properties

Removed portal_properties from documentation and tests.

Files changed:
A news/125.bugfix
M docs/about.md
M docs/user.md
M src/plone/api/tests/test_portal.py
M src/plone/api/tests/test_user.py

b'diff --git a/docs/about.md b/docs/about.md\nindex cf7a7316..e476b0b7 100644\n--- a/docs/about.md\n+++ b/docs/about.md\n@@ -70,12 +70,7 @@ In general, importing and using an API looks something like this:\n % invisible-code-block: python\n %\n % from plone import api\n-% from plone.api.exc import InvalidParameterError\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = True\n+% api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n \n ```python\n from plone import api\ndiff --git a/docs/user.md b/docs/user.md\nindex 11362b43..c04ccd0b 100644\n--- a/docs/user.md\n+++ b/docs/user.md\n@@ -26,12 +26,7 @@ If your portal is configured to use emails as usernames, you just need to pass i\n % invisible-code-block: python\n %\n % from plone import api\n-% from plone.api.exc import InvalidParameterError\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = True\n+% api.portal.set_registry_record(\'plone.use_email_as_login\', True)\n \n ```python\n from plone import api\n@@ -47,11 +42,7 @@ Otherwise, you also need to pass in the username of the new user.\n \n % invisible-code-block: python\n %\n-% try:\n-%     api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n-% except InvalidParameterError:\n-%     portal = api.portal.get()\n-%     portal.portal_properties.site_properties.use_email_as_login = False\n+% api.portal.set_registry_record(\'plone.use_email_as_login\', False)\n \n ```python\n user = api.user.create(email=\'jane@plone.org\', username=\'jane\')\ndiff --git a/news/125.bugfix b/news/125.bugfix\nnew file mode 100644\nindex 00000000..1e1def71\n--- /dev/null\n+++ b/news/125.bugfix\n@@ -0,0 +1,2 @@\n+Removed `portal_properties` from documentation and tests.\n+[maurits]\ndiff --git a/src/plone/api/tests/test_portal.py b/src/plone/api/tests/test_portal.py\nindex 39992127..32bfa810 100644\n--- a/src/plone/api/tests/test_portal.py\n+++ b/src/plone/api/tests/test_portal.py\n@@ -100,32 +100,23 @@ def setUp(self):\n \n     def _set_localization_date_format(self):\n         """Set the expected localized date format."""\n-        from plone.api.exc import InvalidParameterError\n-\n         name_root = "Products.CMFPlone.i18nl10n.override_dateformat."\n-        try:\n-            portal.set_registry_record(\n-                name=name_root + "Enabled",\n-                value=True,\n-            )\n-            portal.set_registry_record(\n-                name=name_root + "date_format_long",\n-                value="%b %d, %Y %I:%M %p",\n-            )\n-            portal.set_registry_record(\n-                name=name_root + "time_format",\n-                value="%I:%M %p",\n-            )\n-            portal.set_registry_record(\n-                name=name_root + "date_format_short",\n-                value="%b %d, %Y",\n-            )\n-        except InvalidParameterError:\n-            # before Plone 4.3, date formats were stored in portal_properties\n-            properties = portal.get_tool("portal_properties")\n-            properties.localLongTimeFormat = "%b %d, %Y %I:%M %p"\n-            properties.localTimeOnlyFormat = "%I:%M %p"\n-            properties.localTimeFormat = "%b %d, %Y"\n+        portal.set_registry_record(\n+            name=name_root + "Enabled",\n+            value=True,\n+        )\n+        portal.set_registry_record(\n+            name=name_root + "date_format_long",\n+            value="%b %d, %Y %I:%M %p",\n+        )\n+        portal.set_registry_record(\n+            name=name_root + "time_format",\n+            value="%I:%M %p",\n+        )\n+        portal.set_registry_record(\n+            name=name_root + "date_format_short",\n+            value="%b %d, %Y",\n+        )\n \n     def test_get(self):\n         """Test getting the portal object."""\ndiff --git a/src/plone/api/tests/test_user.py b/src/plone/api/tests/test_user.py\nindex bfc770e3..f876e07a 100644\n--- a/src/plone/api/tests/test_user.py\n+++ b/src/plone/api/tests/test_user.py\n@@ -42,13 +42,7 @@ def _check_userid_and_username_different(self):\n         self.assertNotEqual(userid, username)\n \n     def _set_emaillogin(self, value):\n-        from plone.api.exc import InvalidParameterError\n-\n-        try:\n-            api.portal.set_registry_record("plone.use_email_as_login", value)\n-        except InvalidParameterError:\n-            portal = api.portal.get()\n-            portal.portal_properties.site_properties.use_email_as_login = value\n+        api.portal.set_registry_record("plone.use_email_as_login", value)\n \n     def test_create_no_email(self):\n         """Test that exception is raised if no email is given."""\n'

