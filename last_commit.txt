Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2020-08-18T09:54:29+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/180e350d3163a0dbe97b9caa0b9e6f5e987a5778

Add GitHub Actions test setup and adapt tox setup.

Files changed:
A .github/workflows/testing.yml
A requirements-testing.txt
M tox.ini

b'diff --git a/.github/workflows/testing.yml b/.github/workflows/testing.yml\nnew file mode 100644\nindex 0000000..cd64de3\n--- /dev/null\n+++ b/.github/workflows/testing.yml\n@@ -0,0 +1,38 @@\n+name: Test\n+\n+on: [push]\n+\n+jobs:\n+  build:\n+    strategy:\n+      matrix:\n+        python-version:\n+        - "2.7"\n+        - "3.6"\n+        - "3.7"\n+        - "3.8"\n+        os:\n+        - ubuntu-latest\n+        - windows-latest\n+    runs-on: ${{ matrix.os }}\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Setup Python\n+        uses: actions/setup-python@v2\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v1\n+        id: cache\n+        with:\n+          path: .cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'requirements-testing.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-test\n+      - name: Install dependencies\n+        run: |\n+          pip install -U pip\n+          pip install -r requirements-testing.txt\n+      - name: Run Tests\n+        run: |\n+          zope-testrunner --test-path=src\ndiff --git a/requirements-testing.txt b/requirements-testing.txt\nnew file mode 100644\nindex 0000000..5f9f855\n--- /dev/null\n+++ b/requirements-testing.txt\n@@ -0,0 +1 @@\n+-e .[test] -c https://zopefoundation.github.io/Zope/releases/4.5/requirements-full.txt\n\\ No newline at end of file\ndiff --git a/tox.ini b/tox.ini\nindex f81780a..f67f8fe 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -16,7 +16,7 @@ commands =\n     coverage run {envbindir}/zope-testrunner --test-path=src []\n extras = test\n deps =\n-    -rhttps://zopefoundation.github.io/Zope/releases/4.1/requirements-full.txt\n+    -rrequirements-testing.txt\n     coverage\n setenv =\n     COVERAGE_FILE=.coverage.{envname}\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2020-08-18T09:54:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/0107e9be920c970ee97a540724c73d7a0153e137

on windows install pywin32

Files changed:
M requirements-testing.txt

b"diff --git a/requirements-testing.txt b/requirements-testing.txt\nindex 5f9f855..dca0cb2 100644\n--- a/requirements-testing.txt\n+++ b/requirements-testing.txt\n@@ -1 +1,5 @@\n--e .[test] -c https://zopefoundation.github.io/Zope/releases/4.5/requirements-full.txt\n\\ No newline at end of file\n+-e .[test] -c https://zopefoundation.github.io/Zope/releases/4.5/requirements-full.txt\n+\n+# Windows specific down here (has to be installed here, fails in buildout)\n+# Dependency of zope.sendmail:\n+pywin32 ; platform_system == 'Windows'\n"

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2020-08-18T09:56:10+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/f5d7f8e89b6f6091de13296d3ee721d6cdbe4789

Fix tests on windows, add Zope and refactor tests.

Includes:
- backslash handling in paths
- conditional instance generation
- reflect different wsgi configuration
- fixed unclosed files warning
- split tests for better handling
- add Zope 5 to GH test matrix

Files changed:
A requirements-testing-zope-4.txt
A requirements-testing-zope-5.txt
A src/plone/recipe/zope2instance/tests/wsgi.rst
A src/plone/recipe/zope2instance/tests/zope2instance_base.rst
A src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst
A src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_zserver.rst
M .github/workflows/testing.yml
M setup.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M tox.ini
D requirements-testing.txt
D src/plone/recipe/zope2instance/tests/wsgi.txt
D src/plone/recipe/zope2instance/tests/zope2instance.txt
D src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt

b'diff --git a/.github/workflows/testing.yml b/.github/workflows/testing.yml\nindex cd64de3..2a69a16 100644\n--- a/.github/workflows/testing.yml\n+++ b/.github/workflows/testing.yml\n@@ -11,9 +11,18 @@ jobs:\n         - "3.6"\n         - "3.7"\n         - "3.8"\n+        zope-version:\n+        - "zope-4"\n+        - "zope-5"\n         os:\n         - ubuntu-latest\n         - windows-latest\n+        exclude:\n+        - os: windows-latest\n+          python-version: "2.7"\n+        - zope-version: "zope-5"\n+          python-version: "2.7"\n+\n     runs-on: ${{ matrix.os }}\n     steps:\n       - uses: actions/checkout@v2\n@@ -26,13 +35,13 @@ jobs:\n         id: cache\n         with:\n           path: .cache/pip\n-          key: ${{ runner.os }}-pip-${{ hashFiles(\'requirements-testing.txt\') }}\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'requirements-testing-*.txt\') }}\n           restore-keys: |\n             ${{ runner.os }}-test\n       - name: Install dependencies\n         run: |\n           pip install -U pip\n-          pip install -r requirements-testing.txt\n+          pip install -r requirements-testing-${{ matrix.zope-version }}.txt\n       - name: Run Tests\n         run: |\n           zope-testrunner --test-path=src\ndiff --git a/requirements-testing.txt b/requirements-testing-zope-4.txt\nsimilarity index 100%\nrename from requirements-testing.txt\nrename to requirements-testing-zope-4.txt\ndiff --git a/requirements-testing-zope-5.txt b/requirements-testing-zope-5.txt\nnew file mode 100644\nindex 0000000..b77017e\n--- /dev/null\n+++ b/requirements-testing-zope-5.txt\n@@ -0,0 +1,5 @@\n+-e .[test] -c https://zopefoundation.github.io/Zope/releases/5.0a2/requirements-full.txt\n+\n+# Windows specific down here (has to be installed here, fails in buildout)\n+# Dependency of zope.sendmail:\n+pywin32 ; platform_system == \'Windows\'\ndiff --git a/setup.py b/setup.py\nindex fd820a2..5030343 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,8 +22,10 @@\n         "Framework :: Buildout",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: Zope Public License",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2",\ndiff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py\nindex 4cabb04..1ed2993 100644\n--- a/src/plone/recipe/zope2instance/tests/test_docs.py\n+++ b/src/plone/recipe/zope2instance/tests/test_docs.py\n@@ -44,15 +44,22 @@ def test_suite():\n         doctest.REPORT_NDIFF)\n \n     suite.append(doctest.DocFileSuite(\n-        \'zope2instance.txt\',\n-        \'wsgi.txt\',\n+        \'zope2instance_base.rst\',\n+        \'zope2instance_beforestorage.rst\',\n+        \'zope2instance_blobstorage.rst\',\n+        \'zope2instance_demostorage.rst\',\n+        \'zope2instance_relstorage.rst\',\n+        \'zope2instance_tempstorage_off.rst\',\n+        \'zope2instance_zeostorage.rst\',\n+        \'zope2instance_zlibstorage.rst\',\n+        \'wsgi.rst\',\n         optionflags=flags,\n         setUp=setUp,\n         tearDown=tearDown))\n \n     if six.PY2:\n         suite.append(doctest.DocFileSuite(\n-            \'zope2instance_zserver.txt\',\n+            \'zope2instance_zserver.rst\',\n             optionflags=flags,\n             setUp=setUp,\n             tearDown=tearDown))\ndiff --git a/src/plone/recipe/zope2instance/tests/wsgi.txt b/src/plone/recipe/zope2instance/tests/wsgi.rst\nsimilarity index 78%\nrename from src/plone/recipe/zope2instance/tests/wsgi.txt\nrename to src/plone/recipe/zope2instance/tests/wsgi.rst\nindex aace517..34ab42c 100644\n--- a/src/plone/recipe/zope2instance/tests/wsgi.txt\n+++ b/src/plone/recipe/zope2instance/tests/wsgi.rst\n@@ -10,6 +10,7 @@ Test default configuration\n     >>> from os.path import join\n     >>> import sys, os\n     >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n \n Let\'s create a minimum buildout that uses the current\n plone.recipe.zope2instance::\n@@ -28,14 +29,19 @@ plone.recipe.zope2instance::\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Installing instance.\n-    Generated script \'...instance\'...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script \'" in output and \'instance\' in output\n+    True\n+\n \n We should have an instance part, with a basic zope.conf::\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n     >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n     >>> print(zope_conf)\n     %define INSTANCEHOME .../sample-buildout/parts/instance\n@@ -75,13 +81,20 @@ We should have an instance part, with a basic zope.conf::\n The buildout has also created an INI file containing the waitress configuration:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> WINDOWS or \'fast-listen = 0.0.0.0:8080\' in wsgi_ini\n+    True\n+\n+    >>> WINDOWS or \'use = egg:plone.recipe.zope2instance#main\' in wsgi_ini\n+    True\n+\n+    >>> not WINDOWS or \'use = egg:waitress#main\' in wsgi_ini\n+    True\n+\n+    >>> print(wsgi_ini.replace(\'\\\\\', \'/\'))\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n-    fast-listen = 0.0.0.0:8080\n-    threads = 4\n+    ...\n     <BLANKLINE>\n     [app:zope]\n     use = egg:Zope#main\n@@ -180,25 +193,26 @@ Let\'s create another buildout configuring a custom port and a custom number of w\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n-    [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n-    fast-listen = localhost:6543\n-    threads = 3\n-    <BLANKLINE>\n-    [app:zope]\n-    ...\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> WINDOWS or \'fast-listen = localhost:6543\' in wsgi_ini\n+    True\n+\n+    >>> WINDOWS or \'threads = 3\' in wsgi_ini\n+    True\n \n You can also specify multiple http-address and/or specify only the port\n (the host part will be assumed to be 0.0.0.0):\n@@ -222,12 +236,10 @@ You can also specify multiple http-address and/or specify only the port\n \n The buildout has updated our INI file:\n \n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n-    [server:main]\n-    ...\n-    fast-listen = localhost:6543 127.0.0.1:6544 0.0.0.0:8080\n-    ...\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> WINDOWS or \'fast-listen = localhost:6543 127.0.0.1:6544 0.0.0.0:8080\' in wsgi_ini\n+    True\n \n Custom logging\n ==============\n@@ -253,20 +265,23 @@ Let\'s create a buildout:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> print(wsgi_ini.replace(\'\\\\\', \'/\'))\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [logger_root]\n     level = ERROR\n@@ -326,20 +341,23 @@ Next we want to disable access logging (but keep an event log file):\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [pipeline:main]\n     pipeline =\n@@ -365,20 +383,23 @@ Now we also want to disable event logging:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [pipeline:main]\n     pipeline =\n@@ -428,22 +449,23 @@ Let\'s create a buildout:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Getting distribution for \'sentry-sdk\'.\n-    ...\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [filter:sentry]\n     use = egg:plone.recipe.zope2instance#sentry\n@@ -483,20 +505,20 @@ Let\'s update our buildout with some Sentry options:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [filter:sentry]\n     use = egg:plone.recipe.zope2instance#sentry\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt\ndeleted file mode 100644\nindex bbcf308..0000000\n--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt\n+++ /dev/null\n@@ -1,1822 +0,0 @@\n-==========================\n-plone.recipe.zope2instance\n-==========================\n-\n-\n-This is the doctest for plone.recipe.zope2instance. It ensures the template\n-works fine. It is based on zc.buildout testing module::\n-\n-    >>> from __future__ import print_function\n-    >>> from zc.buildout.testing import *\n-    >>> from os.path import join\n-    >>> import sys, os\n-    >>> options = globals()\n-    >>> WINDOWS = sys.platform == \'win32\'\n-\n-Let\'s create a minimum buildout that uses the current\n-plone.recipe.zope2instance::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    instancehome $INSTANCEHOME\n-    %define CLIENTHOME .../sample-buildout/var/instance\n-    clienthome $CLIENTHOME\n-    debug-mode off\n-    security-policy-implementation C\n-    verbose-security off\n-    default-zpublisher-encoding utf-8\n-    <environment>\n-        CHAMELEON_CACHE .../var/cache\n-    </environment>\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/filestorage/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    <zodb_db temporary>\n-        # Temporary storage database (for sessions)\n-        <temporarystorage>\n-          name temporary storage for sessioning\n-        </temporarystorage>\n-        mount-point /temp_folder\n-        container-class Products.TemporaryFolder.TemporaryContainer\n-    </zodb_db>\n-    python-check-interval 1000\n-\n-We should have a blobstorage directory.\n-\n-    >>> ls(\'var\')\n-    d  blobstorage\n-    d  cache\n-    d  filestorage\n-    d  instance\n-    d  log\n-\n-The blobstorage directory should only be readable by the current user,\n-otherwise you get a warning when the zope instance starts up.  The\n-(POSIX) path mode bits should be 0700.\n-\n-    >>> (os.stat(os.path.join(\'var\', \'blobstorage\')).st_mode & 0o077) == 0\n-    True\n-\n-\n-FTP and WebDAV\n-==============\n-\n-With wsgi there is no FTP and WebDAV. Use Python 2 and ``wsgi = off`` for that.\n-\n-\n-Turning off ZODB temporary storage\n-==================================\n-Zope 4 does not ship with the required packages anymore, so to avoid breakage\n-the creation of the ZODB temporary storage definition can be turned off:\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zodb-temporary-storage = off\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-The generated configuration has no temporary storage section anymore:\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    instancehome $INSTANCEHOME\n-    %define CLIENTHOME .../sample-buildout/var/instance\n-    clienthome $CLIENTHOME\n-    debug-mode off\n-    security-policy-implementation C\n-    verbose-security off\n-    default-zpublisher-encoding utf-8\n-    <environment>\n-        CHAMELEON_CACHE .../var/cache\n-    </environment>\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/filestorage/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    python-check-interval 1000\n-\n-\n-DemoStorage\n-===========\n-\n-To have a DemoStorage configuration, you can use demo-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = on\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage>\n-          path .../sample-buildout/var/newfs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that demostorage can be disable::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = off\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf without demostorage::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/newfs/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can add file storage to the demo-storage to be able to keep\n-changes::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = on\n-    ... demo-file-storage = demofs/Data.fs\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage base>\n-          path .../sample-buildout/var/newfs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage changes>\n-          path .../sample-buildout/var/demofs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can add a blob storage to the demo-storage as well::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... blob-storage = ${buildout:directory}/var/blob\n-    ... demo-storage = on\n-    ... demo-file-storage = demofs/Data.fs\n-    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-        <blobstorage base>\n-          blob-dir .../sample-buildout/var/blob\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/newfs/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-    ...\n-        <blobstorage changes>\n-          blob-dir .../sample-buildout/var/demoblob\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/demofs/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-    ...\n-\n-Finally, you can add only a blob storage. Changes will then not be\n-persisted on disk, but blob support will be available separately (it\'s\n-not supported by the in-memory demostorage)::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = on\n-    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage base>\n-          path .../sample-buildout/var/newfs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        # Blob-enabled FileStorage database\n-        <blobstorage changes>\n-          blob-dir .../sample-buildout/var/demoblob\n-          <demostorage />\n-        </blobstorage>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-\n-\n-ZlibStorage\n-===========\n-\n-To have a ZlibStorage configuration, you can use zlib-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... zlib-storage = active\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-    <BLANKLINE>\n-          %import zc.zlibstorage\n-          # ZlibStorage wrapper\n-          <zlibstorage>\n-            compress true\n-    <BLANKLINE>\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-    <BLANKLINE>\n-          </zlibstorage>\n-    <BLANKLINE>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-To have a ZlibStorage configuration with no active compression, you\n-can set the ``zlib-storage`` option to \'passive\'::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... zlib-storage = passive\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-    <BLANKLINE>\n-          %import zc.zlibstorage\n-          # ZlibStorage wrapper\n-          <zlibstorage>\n-            compress false\n-    <BLANKLINE>\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-    <BLANKLINE>\n-          </zlibstorage>\n-    <BLANKLINE>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-\n-BeforeStorage\n-=============\n-\n-To have a BeforeStorage configuration, you can use before-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... before-storage = now\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    %import zc.beforestorage\n-        # BeforeStorage\n-        <before>\n-          before now\n-    <BLANKLINE>\n-          # Blob-enabled FileStorage database\n-          <blobstorage>\n-            blob-dir .../sample-buildout/var/blobstorage\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-          </blobstorage>\n-    <BLANKLINE>\n-        </before>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-The before-storage option can be combined with a demo-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... before-storage = now\n-    ... demo-storage = on\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-        # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        %import zc.beforestorage\n-        # BeforeStorage\n-        <before>\n-          before now\n-    <BLANKLINE>\n-          # Blob-enabled FileStorage database\n-          <blobstorage>\n-            blob-dir .../sample-buildout/var/blobstorage\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-          </blobstorage>\n-    <BLANKLINE>\n-        </before>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-BlobStorage\n-===========\n-\n-To have a BlobStorage configuration, you can use blob-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... blob-storage = ${buildout:directory}/var/blob\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blob\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/filestorage/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-\n-RelStorage\n-==========\n-\n-To have a RelStorage configuration, you can use rel-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... rel-storage =\n-    ...   type postgresql\n-    ...   dbname zodb\n-    ...   user tarek\n-    ...   host example.com\n-    ...   password secret space\n-    ...   keep-history false\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    %import relstorage\n-        <relstorage>\n-            keep-history false\n-            <postgresql>\n-                dsn dbname=\'zodb\' user=\'tarek\' host=\'example.com\' password=\'secret space\'\n-            </postgresql>\n-        </relstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Relstorage and sqlite3::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... wsgi = off\n-    ... eggs =\n-    ... user = me:me\n-    ... rel-storage =\n-    ...   type sqlite3\n-    ...   data-dir %(sample_buildout)s/var/db\n-    ...   pragmas-synchronous off\n-    ...   pragmas-checkpoint_fullfsync off\n-    ... \'\'\' % options)\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        %import relstorage\n-        <relstorage>\n-            <sqlite3>\n-                data-dir .../sample-buildout/var/db\n-                <pragmas>\n-                    checkpoint_fullfsync off\n-                    synchronous off\n-                </pragmas>\n-            </sqlite3>\n-        </relstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-ZEO storage\n-===========\n-\n-If you want to connect to a zeo server you specify some additional properties\n-for the plone.recipe.zope2instance recipe.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-If `zeo-client-client` and other relevant ZEO options such as\n-`zeo-client-blob-cache-size` and `zeo-client-blob-cache-size-check` are\n-specified, they should get included in that section as well.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... zeo-client-client = persistentcache88\n-    ... min-disconnect-poll = 10\n-    ... max-disconnect-poll = 20\n-    ... zeo-client-blob-cache-size = 5GB\n-    ... zeo-client-blob-cache-size-check = 50\n-    ... zeo-client-read-only-fallback = true\n-    ... zeo-var = %(sample_buildout)s/var\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback true\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-            blob-cache-size 5GB\n-            blob-cache-size-check 50\n-    <BLANKLINE>\n-            var .../sample-buildout/var\n-            client persistentcache88\n-            min-disconnect-poll 10\n-            max-disconnect-poll 20\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that demo-storage is correctly applied\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... demo-storage = yes\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        # DemoStorage\n-        <demostorage>\n-        # ZEOStorage database\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        </demostorage>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that blob-storage is correctly applied\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... blob-storage = ${buildout:directory}/var/blob\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-    # Blob-enabled ZEOStorage database\n-        <zeoclient>\n-          read-only false\n-          read-only-fallback false\n-          blob-dir .../sample-buildout/var/blob\n-          shared-blob-dir no\n-          server 8100\n-          storage 1\n-          name zeostorage\n-          cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that demo-storage is correctly applied together with\n-before-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... demo-storage = yes\n-    ... before-storage = now\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        %import zc.beforestorage\n-        # BeforeStorage\n-        <before>\n-          before now\n-        # Blob-enabled ZEOStorage database\n-          <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-          </zeoclient>\n-        </before>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can get specific zeo server address using `zeo-address`.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... zeo-address = 127.0.0.1:8101\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 127.0.0.1:8101\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can also set multiple zeo server addresses using `zeo-address`.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... zeo-address = 127.0.0.1:8101 127.0.0.1:8102\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 127.0.0.1:8101\n-            server 127.0.0.1:8102\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Custom storage wrapper\n-======================\n-\n-To add custom configuration around the storage,\n-use the `storage-wrapper` option::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... storage-wrapper =\n-    ...   <foo>\n-    ...   %%s\n-    ...   </foo>\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Now zope.conf should include the custom storage wrapper::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <foo>\n-            # Blob-enabled FileStorage database\n-            ...\n-        </foo>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-\n-Custom Event log\n-================\n-\n-`event-log-custom` is only supported for ZServer (Python 2 only).\n-\n-\n-Mailing logger\n-==============\n-\n-`mailinglogger` is only supported for ZServer (Python 2 only).\n-\n-\n-Custom access log\n-=================\n-\n-`access-log-custom`  is only supported for ZServer (Python 2 only).\n-\n-\n-Custom site.zcml file\n-=====================\n-\n-`site-zcml` is a new option that allows you to create a custom site.zcml file.\n-When this option is used the `zcml` option is ignored. Let\'s try it::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... # the zcml option will be ignored when a site-zcml option is given\n-    ... zcml =\n-    ...       test.example\n-    ...\n-    ... site-zcml =\n-    ...       <configure xmlns="http://namespaces.zope.org/zope"\n-    ...                  xmlns:five="http://namespaces.zope.org/five">\n-    ...           <include package="Products.Five" />\n-    ...           <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n-    ...           <include package="test.example" />\n-    ...       </configure>\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run the buildout::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Now let\'s check that we have a zope instance, with the custom site.zcml::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> print(open(os.path.join(instance, \'etc\', \'site.zcml\')).read())\n-    <configure xmlns="http://namespaces.zope.org/zope"\n-               xmlns:five="http://namespaces.zope.org/five">\n-        <include package="Products.Five" />\n-        <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n-        <include package="test.example" />\n-    </configure>\n-    <BLANKLINE>\n-\n-\n-Environment Variables\n-=====================\n-\n-We can specify environment variables for Zope.  Sometimes it is\n-useful to set the TZ variable if our instance will be moving\n-between several servers::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... environment-vars = TZ US/Eastern\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our environment variables should be set now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <environment>\n-      TZ US/Eastern\n-    CHAMELEON_CACHE .../var/cache\n-    </environment>\n-    ...\n-\n-Now let\'s add several environment variables::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... environment-vars =\n-    ...     TZ US/Eastern\n-    ...     TMP /var/tmp\n-    ...     DISABLE_PTS True\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our environment variables should be set now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> import re\n-    >>> env_vars = re.compile(r"<environment>\\n\\s*(?P<vars>.*)\\n</environment>", re.M | re.S)\n-    >>> print(re.search(env_vars, zope_conf).group(\'vars\'))\n-    TZ US/Eastern\n-    TMP /var/tmp\n-    DISABLE_PTS True\n-    CHAMELEON_CACHE .../var/cache\n-\n-Several all on one line::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... template-cache = off\n-    ... environment-vars = TZ US/Eastern TMP /var/tmp DISABLE_PTS True\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our environment variables should be set now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> re.search(env_vars, zope_conf).group(\'vars\')\n-    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n-\n-\n-HTTP server\n-===========\n-\n-Http-server options are only supported for ZServer (Python 2 only).\n-\n-\n-Edge Cases\n-==========\n-\n-Some Linux distributions of Zope2 don\'t have the windows scripts.\n-Let\'s run a minimal buildout without them to make sure\n-we don\'t error::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Relative paths in scripts\n-=========================\n-\n-The recipe supports the generation of scripts with relative paths.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... relative-paths = true\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... \'\'\' % options)\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our generated script now has a reference to the relative path.\n-\n-    >>> import sys\n-    >>>\n-\n-    >>> instance_path = join(\'bin\', \'instance\')\n-    >>> if WINDOWS:\n-    ...     instance_path += \'-script.py\'\n-    >>> open(instance_path).read()\n-    "...base = ...__file__..."\n-\n-Custom Zope Conf\n-=================\n-\n-`zope-conf` is an option that allows you to use a specific Zope config file.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zope-conf = /some/path/my.conf\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance script with the custom config file::\n-\n-    >>> instance_path = join(\'bin\', \'instance\')\n-    >>> if WINDOWS:\n-    ...     instance_path += \'-script.py\'\n-    >>> open(instance_path).read()\n-    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\', \'-w\', \'...etc/wsgi.ini\']..."\n-\n-Custom Zope Conf Imports\n-========================\n-`zope-conf-imports` is an option that allows you to import python packages that\n-define custom zope.conf sections using ZConfig API.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zope-conf-imports =\n-    ...   mailinglogger\n-    ...   eea.graylogger\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with custom imports::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %import mailinglogger\n-    %import eea.graylogger\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <BLANKLINE>\n-\n-Custom WSGI configuration\n-=========================\n-\n-`wsgi` is an option that allows you to use a specific WSGI config file.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... wsgi = /some/path/service.ini\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance script with the custom config file::\n-\n-    >>> instance_path = join(\'bin\', \'instance\')\n-    >>> if WINDOWS:\n-    ...     instance_path += \'-script.py\'\n-    >>> open(instance_path).read()\n-    "...plone.recipe.zope2instance.ctl.main(...[...\'-w\', \'/some/path/service.ini\']..."\n-\n-\n-Resources directory\n-===================\n-\n-`resources` is an option that allows you to register a\n-plone.app.theming resources directory.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... resources = ${buildout:directory}/myresources\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-The directory should have been generated, and zope config created::\n-\n-    >>> \'myresources\' in os.listdir(os.curdir)\n-    True\n-    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n-    >>> ls(includes_path)\n-    -  998-resources-configure.zcml\n-    >>> cat(includes_path, \'998-resources-configure.zcml\')\n-    <configure xmlns="http://namespaces.zope.org/zope"\n-               xmlns:plone="http://namespaces.plone.org/plone">\n-        <include package="plone.resource" file="meta.zcml"/>\n-        <plone:static directory=".../sample-buildout/myresources"/>\n-    </configure>\n-\n-\n-Locales directory\n-===================\n-\n-`locales` is an option that allows you to register a\n-plone.app.theming locales directory.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... locales = ${buildout:directory}/mylocales\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-The directory should have been generated, and zope config created::\n-\n-    >>> \'mylocales\' in os.listdir(os.curdir)\n-    True\n-    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n-    >>> ls(includes_path)\n-    -  001-locales-configure.zcml\n-    >>> cat(includes_path, \'001-locales-configure.zcml\')\n-    <configure xmlns="http://namespaces.zope.org/zope"\n-               xmlns:i18n="http://namespaces.zope.org/i18n">\n-        <i18n:registerTranslations directory=".../sample-buildout/mylocales" />\n-    </configure>\n-\n-\n-Initialization\n-==============\n-\n-`initialization` is an option that allows you to add custom Python\n-code to the initialization process.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs = waitress\n-    ... user = me:me\n-    ... initialization =\n-    ...     print(\'Initialization complete! Hello %%(user)s!\')\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should see the given initialization commands included in the instance\n-script::\n-\n-    >>> instance = open(os.path.join(sample_buildout, \'bin\', \'instance\')).read()\n-    >>> "print(\'Initialization complete! Hello me:me!\')" in instance\n-    True\n-\n-    >>> waitress = open(os.path.join(sample_buildout, \'bin\', \'waitress-serve\')).read()\n-    >>> "print(\'Initialization complete! Hello me:me!\')" in waitress\n-    True\n-\n-\n-Exceptions debug mode\n-=====================\n-`debug-exceptions` disables exception views including\n-``standard_error_message`` and acts as a debugging aid during development.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... debug-exceptions = on\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Now zope.conf should include the debug-exceptions configuration:\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    debug-exceptions on\n-    ...\n-    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_base.rst b/src/plone/recipe/zope2instance/tests/zope2instance_base.rst\nnew file mode 100644\nindex 0000000..f331efd\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_base.rst\n@@ -0,0 +1,801 @@\n+======================================\n+plone.recipe.zope2instance BASIC USAGE\n+======================================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import ls, write\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+Let\'s create a minimum buildout that uses the current\n+plone.recipe.zope2instance::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    instancehome $INSTANCEHOME\n+    %define CLIENTHOME .../sample-buildout/var/instance\n+    clienthome $CLIENTHOME\n+    debug-mode off\n+    security-policy-implementation C\n+    verbose-security off\n+    default-zpublisher-encoding utf-8\n+    <environment>\n+        CHAMELEON_CACHE .../var/cache\n+    </environment>\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    <zodb_db temporary>\n+        # Temporary storage database (for sessions)\n+        <temporarystorage>\n+          name temporary storage for sessioning\n+        </temporarystorage>\n+        mount-point /temp_folder\n+        container-class Products.TemporaryFolder.TemporaryContainer\n+    </zodb_db>\n+    python-check-interval 1000\n+\n+We should have a blobstorage directory::\n+\n+    >>> ls(\'var\')\n+    d  blobstorage\n+    d  cache\n+    d  filestorage\n+    d  instance\n+    d  log\n+\n+The blobstorage directory should only be readable by the current user,\n+otherwise you get a warning when the zope instance starts up.  The\n+(POSIX) path mode bits should be 0700::\n+\n+    >>> WINDOWS or (os.stat(os.path.join(\'var\', \'blobstorage\')).st_mode & 0o077) == 0\n+    True\n+\n+\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+Custom storage wrapper\n+======================\n+\n+To add custom configuration around the storage,\n+use the `storage-wrapper` option::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... storage-wrapper =\n+    ...   <foo>\n+    ...   %%s\n+    ...   </foo>\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Now zope.conf should include the custom storage wrapper::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <foo>\n+            # Blob-enabled FileStorage database\n+            ...\n+        </foo>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Custom Event log\n+================\n+\n+`event-log-custom` is only supported for ZServer (Python 2 only).\n+\n+\n+Mailing logger\n+==============\n+\n+`mailinglogger` is only supported for ZServer (Python 2 only).\n+\n+\n+Custom access log\n+=================\n+\n+`access-log-custom`  is only supported for ZServer (Python 2 only).\n+\n+\n+Custom site.zcml file\n+=====================\n+\n+`site-zcml` is a new option that allows you to create a custom site.zcml file.\n+When this option is used the `zcml` option is ignored. Let\'s try it::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... # the zcml option will be ignored when a site-zcml option is given\n+    ... zcml =\n+    ...       test.example\n+    ...\n+    ... site-zcml =\n+    ...       <configure xmlns="http://namespaces.zope.org/zope"\n+    ...                  xmlns:five="http://namespaces.zope.org/five">\n+    ...           <include package="Products.Five" />\n+    ...           <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+    ...           <include package="test.example" />\n+    ...       </configure>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run the buildout::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Now let\'s check that we have a zope instance, with the custom site.zcml::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'site.zcml\')) as fd:\n+    ...     print(fd.read())\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:five="http://namespaces.zope.org/five">\n+        <include package="Products.Five" />\n+        <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+        <include package="test.example" />\n+    </configure>\n+    <BLANKLINE>\n+\n+\n+Environment Variables\n+=====================\n+\n+We can specify environment variables for Zope.  Sometimes it is\n+useful to set the TZ variable if our instance will be moving\n+between several servers::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars = TZ US/Eastern\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <environment>\n+      TZ US/Eastern\n+    CHAMELEON_CACHE .../var/cache\n+    </environment>\n+    ...\n+\n+Now let\'s add several environment variables::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars =\n+    ...     TZ US/Eastern\n+    ...     TMP /var/tmp\n+    ...     DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> import re\n+    >>> env_vars = re.compile(r"<environment>\\n\\s*(?P<vars>.*)\\n</environment>", re.M | re.S)\n+    >>> print(re.search(env_vars, zope_conf).group(\'vars\'))\n+    TZ US/Eastern\n+    TMP /var/tmp\n+    DISABLE_PTS True\n+    CHAMELEON_CACHE .../var/cache\n+\n+Several all on one line::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... template-cache = off\n+    ... environment-vars = TZ US/Eastern TMP /var/tmp DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> re.search(env_vars, zope_conf).group(\'vars\')\n+    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n+\n+\n+HTTP server\n+===========\n+\n+Http-server options are only supported for ZServer (Python 2 only).\n+\n+\n+Edge Cases\n+==========\n+\n+Some Linux distributions of Zope2 don\'t have the windows scripts.\n+Let\'s run a minimal buildout without them to make sure\n+we don\'t error::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Relative paths in scripts\n+=========================\n+\n+The recipe supports the generation of scripts with relative paths.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... relative-paths = true\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+    >>> if not WINDOWS:\n+    ...     with open(join(\'bin\', \'instance\')) as fd:\n+    ...         value = fd.read()\n+    ... else:\n+    ...     value = ""\n+    >>> WINDOWS or \'base\' in value and \'__file__\' in value\n+    True\n+\n+Custom Zope Conf\n+=================\n+\n+`zope-conf` is an option that allows you to use a specific Zope config file.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf = /some/path/my.conf\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance script with the custom config file::\n+\n+    >>> if not WINDOWS:\n+    ...     with open(join(\'bin\', \'instance\')) as fd:\n+    ...         value = fd.read()\n+    ... else:\n+    ...     value = ""\n+    >>> WINDOWS or \'plone.recipe.zope2instance.ctl.main(\' in value and "[\'-C\', \'/some/path/my.conf\', \'-p\', \'" in value and "/bin/interpreter\', \'-w\', \'" in value and "etc/wsgi.ini\']" in value\n+    True\n+\n+Custom Zope Conf Imports\n+========================\n+`zope-conf-imports` is an option that allows you to import python packages that\n+define custom zope.conf sections using ZConfig API.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf-imports =\n+    ...   mailinglogger\n+    ...   eea.graylogger\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with custom imports::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %import mailinglogger\n+    %import eea.graylogger\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <BLANKLINE>\n+\n+Custom WSGI configuration\n+=========================\n+\n+`wsgi` is an option that allows you to use a specific WSGI config file.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... wsgi = /some/path/service.ini\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance script with the custom config file::\n+\n+\n+    >>> if not WINDOWS:\n+    ...     with open(join(\'bin\', \'instance\')) as fd:\n+    ...         value = fd.read()\n+    ... else:\n+    ...     value = ""\n+    >>> WINDOWS or \'plone.recipe.zope2instance.ctl.main(\' in value and "\'-w\', \'/some/path/service.ini\']" in value\n+    True\n+\n+Resources directory\n+===================\n+\n+`resources` is an option that allows you to register a\n+plone.app.theming resources directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... resources = ${buildout:directory}/myresources\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'myresources\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  998-resources-configure.zcml\n+    >>> with open(os.path.join(includes_path, \'998-resources-configure.zcml\')) as fd:\n+    ...    print(fd.read().replace(\'\\\\\', \'/\'))\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:plone="http://namespaces.plone.org/plone">\n+        <include package="plone.resource" file="meta.zcml"/>\n+        <plone:static directory=".../sample-buildout/myresources"/>\n+    </configure>\n+\n+\n+Locales directory\n+===================\n+\n+`locales` is an option that allows you to register a\n+plone.app.theming locales directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... locales = ${buildout:directory}/mylocales\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'mylocales\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  001-locales-configure.zcml\n+    >>> with open(os.path.join(includes_path, \'001-locales-configure.zcml\')) as fd:\n+    ...    print(fd.read().replace(\'\\\\\', \'/\'))\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:i18n="http://namespaces.zope.org/i18n">\n+        <i18n:registerTranslations directory=".../sample-buildout/mylocales" />\n+    </configure>\n+\n+\n+Initialization\n+==============\n+\n+`initialization` is an option that allows you to add custom Python\n+code to the initialization process.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs = waitress\n+    ... user = me:me\n+    ... initialization =\n+    ...     print(\'Initialization complete! Hello %%(user)s!\')\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should see the given initialization commands included in the instance\n+script::\n+\n+    >>> if not WINDOWS:\n+    ...     with open(os.path.join(sample_buildout, \'bin\', \'instance\')) as fd:\n+    ...         instance = fd.read()\n+    ... else:\n+    ...     instance = ""\n+    >>> WINDOWS or "print(\'Initialization complete! Hello me:me!\')" in instance\n+    True\n+\n+    >>> waitress_path = os.path.join(sample_buildout, \'bin\', \'waitress-serve\')\n+    >>> if WINDOWS:\n+    ...     waitress_path += \'-script.py\'\n+    >>> with open(waitress_path) as fd:\n+    ...     waitress = fd.read()\n+    >>> "print(\'Initialization complete! Hello me:me!\')" in waitress\n+    True\n+\n+\n+Exceptions debug mode\n+=====================\n+`debug-exceptions` disables exception views including\n+``standard_error_message`` and acts as a debugging aid during development.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... debug-exceptions = on\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Now zope.conf should include the debug-exceptions configuration:\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    debug-exceptions on\n+    ...\n+    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst\nnew file mode 100644\nindex 0000000..384c0b1\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst\n@@ -0,0 +1,152 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+BeforeStorage\n+=============\n+\n+To have a BeforeStorage configuration, you can use before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+The before-storage option can be combined with a demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+        # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst\nnew file mode 100644\nindex 0000000..7a35a91\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst\n@@ -0,0 +1,72 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+BlobStorage\n+===========\n+\n+To have a BlobStorage configuration, you can use blob-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst\nnew file mode 100644\nindex 0000000..aae08f8\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst\n@@ -0,0 +1,329 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+DemoStorage\n+===========\n+\n+To have a DemoStorage configuration, you can use demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demostorage can be disable::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = off\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf without demostorage::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add file storage to the demo-storage to be able to keep\n+changes::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage changes>\n+          path .../sample-buildout/var/demofs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add a blob storage to the demo-storage as well::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+        <blobstorage base>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/demofs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+\n+Finally, you can add only a blob storage. Changes will then not be\n+persisted on disk, but blob support will be available separately (it\'s\n+not supported by the in-memory demostorage)::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # Blob-enabled FileStorage database\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          <demostorage />\n+        </blobstorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst\nnew file mode 100644\nindex 0000000..4cb746d\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst\n@@ -0,0 +1,134 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+RelStorage\n+==========\n+\n+To have a RelStorage configuration, you can use rel-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... rel-storage =\n+    ...   type postgresql\n+    ...   dbname zodb\n+    ...   user tarek\n+    ...   host example.com\n+    ...   password secret space\n+    ...   keep-history false\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    %import relstorage\n+        <relstorage>\n+            keep-history false\n+            <postgresql>\n+                dsn dbname=\'zodb\' user=\'tarek\' host=\'example.com\' password=\'secret space\'\n+            </postgresql>\n+        </relstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Relstorage and sqlite3::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... rel-storage =\n+    ...   type sqlite3\n+    ...   data-dir %(sample_buildout)s/var/db\n+    ...   pragmas-synchronous off\n+    ...   pragmas-checkpoint_fullfsync off\n+    ... \'\'\' % options)\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        %import relstorage\n+        <relstorage>\n+            <sqlite3>\n+                data-dir .../sample-buildout/var/db\n+                <pragmas>\n+                    checkpoint_fullfsync off\n+                    synchronous off\n+                </pragmas>\n+            </sqlite3>\n+        </relstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst b/src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst\nnew file mode 100644\nindex 0000000..9ca4b7d\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst\n@@ -0,0 +1,79 @@\n+================================================\n+plone.recipe.zope2instance TEMPORARY STORAGE OFF\n+================================================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+Turning off ZODB temporary storage\n+==================================\n+Zope 4 does not ship with the required packages anymore, so to avoid breakage\n+the creation of the ZODB temporary storage definition can be turned off:\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zodb-temporary-storage = off\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+The generated configuration has no temporary storage section anymore:\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    instancehome $INSTANCEHOME\n+    %define CLIENTHOME .../sample-buildout/var/instance\n+    clienthome $CLIENTHOME\n+    debug-mode off\n+    security-policy-implementation C\n+    verbose-security off\n+    default-zpublisher-encoding utf-8\n+    <environment>\n+        CHAMELEON_CACHE .../var/cache\n+    </environment>\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    python-check-interval 1000\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst\nnew file mode 100644\nindex 0000000..92623dc\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst\n@@ -0,0 +1,480 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+ZEO storage\n+===========\n+\n+If you want to connect to a zeo server you specify some additional properties\n+for the plone.recipe.zope2instance recipe.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+If `zeo-client-client` and other relevant ZEO options such as\n+`zeo-client-blob-cache-size` and `zeo-client-blob-cache-size-check` are\n+specified, they should get included in that section as well.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-client-client = persistentcache88\n+    ... min-disconnect-poll = 10\n+    ... max-disconnect-poll = 20\n+    ... zeo-client-blob-cache-size = 5GB\n+    ... zeo-client-blob-cache-size-check = 50\n+    ... zeo-client-read-only-fallback = true\n+    ... zeo-var = %(sample_buildout)s/var\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback true\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+            blob-cache-size 5GB\n+            blob-cache-size-check 50\n+    <BLANKLINE>\n+            var .../sample-buildout/var\n+            client persistentcache88\n+            min-disconnect-poll 10\n+            max-disconnect-poll 20\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        # DemoStorage\n+        <demostorage>\n+        # ZEOStorage database\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        </demostorage>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that blob-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+    # Blob-enabled ZEOStorage database\n+        <zeoclient>\n+          read-only false\n+          read-only-fallback false\n+          blob-dir .../sample-buildout/var/blob\n+          shared-blob-dir no\n+          server 8100\n+          storage 1\n+          name zeostorage\n+          cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied together with\n+before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... before-storage = now\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+        # Blob-enabled ZEOStorage database\n+          <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+          </zeoclient>\n+        </before>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can get specific zeo server address using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can also set multiple zeo server addresses using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101 127.0.0.1:8102\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            server 127.0.0.1:8102\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst\nnew file mode 100644\nindex 0000000..927ce81\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst\n@@ -0,0 +1,350 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+ZlibStorage\n+===========\n+\n+To have a ZlibStorage configuration, you can use zlib-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = active\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress true\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+To have a ZlibStorage configuration with no active compression, you\n+can set the ``zlib-storage`` option to \'passive\'::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = passive\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress false\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+BeforeStorage\n+=============\n+\n+To have a BeforeStorage configuration, you can use before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+The before-storage option can be combined with a demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+        # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+BlobStorage\n+===========\n+\n+To have a BlobStorage configuration, you can use blob-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt b/src/plone/recipe/zope2instance/tests/zope2instance_zserver.rst\nsimilarity index 100%\nrename from src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt\nrename to src/plone/recipe/zope2instance/tests/zope2instance_zserver.rst\ndiff --git a/tox.ini b/tox.ini\nindex f67f8fe..c2cf917 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -16,7 +16,7 @@ commands =\n     coverage run {envbindir}/zope-testrunner --test-path=src []\n extras = test\n deps =\n-    -rrequirements-testing.txt\n+    -rrequirements-testing-zope-4.txt\n     coverage\n setenv =\n     COVERAGE_FILE=.coverage.{envname}\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2020-08-18T10:02:28+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/1c1d3579b67c04e01c91a1eca442df48992e5c9b

document changes

Files changed:
A news/150.bugfix

b'diff --git a/news/150.bugfix b/news/150.bugfix\nnew file mode 100644\nindex 0000000..87e41e4\n--- /dev/null\n+++ b/news/150.bugfix\n@@ -0,0 +1,10 @@\n+Add GitHub Actions to project.\n+Run tests there in a matrix against Zope 4 and Zope 5, Windows and Linux, Python 27, 3.6, 3.7 and 3.8.\n+Testing Python 2.7 on Windows is skipped.\n+Refactor tox test setup slightly, do not use tox on GitHub.\n+Split up tests in smaller easier to maintain files.\n+Fix tests to run on Windows without tocuhing the recipe code (the Windows code is not perfect right now, but it test are reflecting current state).\n+This primary includes respecting path-handling (backslash vs slash), conditional instance generation and differences in wsgi configurations.\n+Also resolves "unclosed files" warnings.\n+Reflect Zope 5 and so Plone 6.0 support in troove classifiers.\n+[jensens]\n\\ No newline at end of file\n'

Repository: plone.recipe.zope2instance


Branch: refs/heads/master
Date: 2020-08-18T14:23:23+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.recipe.zope2instance/commit/28f0cf50996cb19c16332c2ef6ccc9d5cb2ceabc

Merge pull request #150 from plone/ghactions-testing

Add Github Actions Testing on Linux/Windows - fix tests for Windows

Files changed:
A .github/workflows/testing.yml
A news/150.bugfix
A requirements-testing-zope-4.txt
A requirements-testing-zope-5.txt
A src/plone/recipe/zope2instance/tests/wsgi.rst
A src/plone/recipe/zope2instance/tests/zope2instance_base.rst
A src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst
A src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst
A src/plone/recipe/zope2instance/tests/zope2instance_zserver.rst
M setup.py
M src/plone/recipe/zope2instance/tests/test_docs.py
M tox.ini
D src/plone/recipe/zope2instance/tests/wsgi.txt
D src/plone/recipe/zope2instance/tests/zope2instance.txt
D src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt

b'diff --git a/.github/workflows/testing.yml b/.github/workflows/testing.yml\nnew file mode 100644\nindex 0000000..2a69a16\n--- /dev/null\n+++ b/.github/workflows/testing.yml\n@@ -0,0 +1,47 @@\n+name: Test\n+\n+on: [push]\n+\n+jobs:\n+  build:\n+    strategy:\n+      matrix:\n+        python-version:\n+        - "2.7"\n+        - "3.6"\n+        - "3.7"\n+        - "3.8"\n+        zope-version:\n+        - "zope-4"\n+        - "zope-5"\n+        os:\n+        - ubuntu-latest\n+        - windows-latest\n+        exclude:\n+        - os: windows-latest\n+          python-version: "2.7"\n+        - zope-version: "zope-5"\n+          python-version: "2.7"\n+\n+    runs-on: ${{ matrix.os }}\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Setup Python\n+        uses: actions/setup-python@v2\n+        with:\n+          python-version: ${{ matrix.python-version }}\n+      - name: Cache packages\n+        uses: actions/cache@v1\n+        id: cache\n+        with:\n+          path: .cache/pip\n+          key: ${{ runner.os }}-pip-${{ hashFiles(\'requirements-testing-*.txt\') }}\n+          restore-keys: |\n+            ${{ runner.os }}-test\n+      - name: Install dependencies\n+        run: |\n+          pip install -U pip\n+          pip install -r requirements-testing-${{ matrix.zope-version }}.txt\n+      - name: Run Tests\n+        run: |\n+          zope-testrunner --test-path=src\ndiff --git a/news/150.bugfix b/news/150.bugfix\nnew file mode 100644\nindex 0000000..87e41e4\n--- /dev/null\n+++ b/news/150.bugfix\n@@ -0,0 +1,10 @@\n+Add GitHub Actions to project.\n+Run tests there in a matrix against Zope 4 and Zope 5, Windows and Linux, Python 27, 3.6, 3.7 and 3.8.\n+Testing Python 2.7 on Windows is skipped.\n+Refactor tox test setup slightly, do not use tox on GitHub.\n+Split up tests in smaller easier to maintain files.\n+Fix tests to run on Windows without tocuhing the recipe code (the Windows code is not perfect right now, but it test are reflecting current state).\n+This primary includes respecting path-handling (backslash vs slash), conditional instance generation and differences in wsgi configurations.\n+Also resolves "unclosed files" warnings.\n+Reflect Zope 5 and so Plone 6.0 support in troove classifiers.\n+[jensens]\n\\ No newline at end of file\ndiff --git a/requirements-testing-zope-4.txt b/requirements-testing-zope-4.txt\nnew file mode 100644\nindex 0000000..dca0cb2\n--- /dev/null\n+++ b/requirements-testing-zope-4.txt\n@@ -0,0 +1,5 @@\n+-e .[test] -c https://zopefoundation.github.io/Zope/releases/4.5/requirements-full.txt\n+\n+# Windows specific down here (has to be installed here, fails in buildout)\n+# Dependency of zope.sendmail:\n+pywin32 ; platform_system == \'Windows\'\ndiff --git a/requirements-testing-zope-5.txt b/requirements-testing-zope-5.txt\nnew file mode 100644\nindex 0000000..b77017e\n--- /dev/null\n+++ b/requirements-testing-zope-5.txt\n@@ -0,0 +1,5 @@\n+-e .[test] -c https://zopefoundation.github.io/Zope/releases/5.0a2/requirements-full.txt\n+\n+# Windows specific down here (has to be installed here, fails in buildout)\n+# Dependency of zope.sendmail:\n+pywin32 ; platform_system == \'Windows\'\ndiff --git a/setup.py b/setup.py\nindex fd820a2..5030343 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -22,8 +22,10 @@\n         "Framework :: Buildout",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: Zope Public License",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2",\ndiff --git a/src/plone/recipe/zope2instance/tests/test_docs.py b/src/plone/recipe/zope2instance/tests/test_docs.py\nindex 4cabb04..1ed2993 100644\n--- a/src/plone/recipe/zope2instance/tests/test_docs.py\n+++ b/src/plone/recipe/zope2instance/tests/test_docs.py\n@@ -44,15 +44,22 @@ def test_suite():\n         doctest.REPORT_NDIFF)\n \n     suite.append(doctest.DocFileSuite(\n-        \'zope2instance.txt\',\n-        \'wsgi.txt\',\n+        \'zope2instance_base.rst\',\n+        \'zope2instance_beforestorage.rst\',\n+        \'zope2instance_blobstorage.rst\',\n+        \'zope2instance_demostorage.rst\',\n+        \'zope2instance_relstorage.rst\',\n+        \'zope2instance_tempstorage_off.rst\',\n+        \'zope2instance_zeostorage.rst\',\n+        \'zope2instance_zlibstorage.rst\',\n+        \'wsgi.rst\',\n         optionflags=flags,\n         setUp=setUp,\n         tearDown=tearDown))\n \n     if six.PY2:\n         suite.append(doctest.DocFileSuite(\n-            \'zope2instance_zserver.txt\',\n+            \'zope2instance_zserver.rst\',\n             optionflags=flags,\n             setUp=setUp,\n             tearDown=tearDown))\ndiff --git a/src/plone/recipe/zope2instance/tests/wsgi.txt b/src/plone/recipe/zope2instance/tests/wsgi.rst\nsimilarity index 78%\nrename from src/plone/recipe/zope2instance/tests/wsgi.txt\nrename to src/plone/recipe/zope2instance/tests/wsgi.rst\nindex aace517..34ab42c 100644\n--- a/src/plone/recipe/zope2instance/tests/wsgi.txt\n+++ b/src/plone/recipe/zope2instance/tests/wsgi.rst\n@@ -10,6 +10,7 @@ Test default configuration\n     >>> from os.path import join\n     >>> import sys, os\n     >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n \n Let\'s create a minimum buildout that uses the current\n plone.recipe.zope2instance::\n@@ -28,14 +29,19 @@ plone.recipe.zope2instance::\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Installing instance.\n-    Generated script \'...instance\'...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script \'" in output and \'instance\' in output\n+    True\n+\n \n We should have an instance part, with a basic zope.conf::\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n     >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n     >>> print(zope_conf)\n     %define INSTANCEHOME .../sample-buildout/parts/instance\n@@ -75,13 +81,20 @@ We should have an instance part, with a basic zope.conf::\n The buildout has also created an INI file containing the waitress configuration:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> WINDOWS or \'fast-listen = 0.0.0.0:8080\' in wsgi_ini\n+    True\n+\n+    >>> WINDOWS or \'use = egg:plone.recipe.zope2instance#main\' in wsgi_ini\n+    True\n+\n+    >>> not WINDOWS or \'use = egg:waitress#main\' in wsgi_ini\n+    True\n+\n+    >>> print(wsgi_ini.replace(\'\\\\\', \'/\'))\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n-    fast-listen = 0.0.0.0:8080\n-    threads = 4\n+    ...\n     <BLANKLINE>\n     [app:zope]\n     use = egg:Zope#main\n@@ -180,25 +193,26 @@ Let\'s create another buildout configuring a custom port and a custom number of w\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n-    [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n-    fast-listen = localhost:6543\n-    threads = 3\n-    <BLANKLINE>\n-    [app:zope]\n-    ...\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> WINDOWS or \'fast-listen = localhost:6543\' in wsgi_ini\n+    True\n+\n+    >>> WINDOWS or \'threads = 3\' in wsgi_ini\n+    True\n \n You can also specify multiple http-address and/or specify only the port\n (the host part will be assumed to be 0.0.0.0):\n@@ -222,12 +236,10 @@ You can also specify multiple http-address and/or specify only the port\n \n The buildout has updated our INI file:\n \n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n-    [server:main]\n-    ...\n-    fast-listen = localhost:6543 127.0.0.1:6544 0.0.0.0:8080\n-    ...\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> WINDOWS or \'fast-listen = localhost:6543 127.0.0.1:6544 0.0.0.0:8080\' in wsgi_ini\n+    True\n \n Custom logging\n ==============\n@@ -253,20 +265,23 @@ Let\'s create a buildout:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n-    >>> print(wsgi_ini)\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n+    >>> print(wsgi_ini.replace(\'\\\\\', \'/\'))\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [logger_root]\n     level = ERROR\n@@ -326,20 +341,23 @@ Next we want to disable access logging (but keep an event log file):\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [pipeline:main]\n     pipeline =\n@@ -365,20 +383,23 @@ Now we also want to disable event logging:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [pipeline:main]\n     pipeline =\n@@ -428,22 +449,23 @@ Let\'s create a buildout:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Getting distribution for \'sentry-sdk\'.\n-    ...\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [filter:sentry]\n     use = egg:plone.recipe.zope2instance#sentry\n@@ -483,20 +505,20 @@ Let\'s update our buildout with some Sentry options:\n \n Let\'s run it::\n \n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'.../sample-buildout/bin/instance\'.\n-    ...\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n \n The buildout has updated our INI file:\n \n     >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> wsgi_ini = open(os.path.join(instance, \'etc\', \'wsgi.ini\')).read()\n+    >>> with open(os.path.join(instance, \'etc\', \'wsgi.ini\')) as fd:\n+    ...     wsgi_ini = fd.read()\n     >>> print(wsgi_ini)\n     [server:main]\n-    paste.server_factory = plone.recipe.zope2instance:main\n-    use = egg:plone.recipe.zope2instance#main\n     ...\n     [filter:sentry]\n     use = egg:plone.recipe.zope2instance#sentry\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance.txt b/src/plone/recipe/zope2instance/tests/zope2instance.txt\ndeleted file mode 100644\nindex bbcf308..0000000\n--- a/src/plone/recipe/zope2instance/tests/zope2instance.txt\n+++ /dev/null\n@@ -1,1822 +0,0 @@\n-==========================\n-plone.recipe.zope2instance\n-==========================\n-\n-\n-This is the doctest for plone.recipe.zope2instance. It ensures the template\n-works fine. It is based on zc.buildout testing module::\n-\n-    >>> from __future__ import print_function\n-    >>> from zc.buildout.testing import *\n-    >>> from os.path import join\n-    >>> import sys, os\n-    >>> options = globals()\n-    >>> WINDOWS = sys.platform == \'win32\'\n-\n-Let\'s create a minimum buildout that uses the current\n-plone.recipe.zope2instance::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    instancehome $INSTANCEHOME\n-    %define CLIENTHOME .../sample-buildout/var/instance\n-    clienthome $CLIENTHOME\n-    debug-mode off\n-    security-policy-implementation C\n-    verbose-security off\n-    default-zpublisher-encoding utf-8\n-    <environment>\n-        CHAMELEON_CACHE .../var/cache\n-    </environment>\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/filestorage/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    <zodb_db temporary>\n-        # Temporary storage database (for sessions)\n-        <temporarystorage>\n-          name temporary storage for sessioning\n-        </temporarystorage>\n-        mount-point /temp_folder\n-        container-class Products.TemporaryFolder.TemporaryContainer\n-    </zodb_db>\n-    python-check-interval 1000\n-\n-We should have a blobstorage directory.\n-\n-    >>> ls(\'var\')\n-    d  blobstorage\n-    d  cache\n-    d  filestorage\n-    d  instance\n-    d  log\n-\n-The blobstorage directory should only be readable by the current user,\n-otherwise you get a warning when the zope instance starts up.  The\n-(POSIX) path mode bits should be 0700.\n-\n-    >>> (os.stat(os.path.join(\'var\', \'blobstorage\')).st_mode & 0o077) == 0\n-    True\n-\n-\n-FTP and WebDAV\n-==============\n-\n-With wsgi there is no FTP and WebDAV. Use Python 2 and ``wsgi = off`` for that.\n-\n-\n-Turning off ZODB temporary storage\n-==================================\n-Zope 4 does not ship with the required packages anymore, so to avoid breakage\n-the creation of the ZODB temporary storage definition can be turned off:\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zodb-temporary-storage = off\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-The generated configuration has no temporary storage section anymore:\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    instancehome $INSTANCEHOME\n-    %define CLIENTHOME .../sample-buildout/var/instance\n-    clienthome $CLIENTHOME\n-    debug-mode off\n-    security-policy-implementation C\n-    verbose-security off\n-    default-zpublisher-encoding utf-8\n-    <environment>\n-        CHAMELEON_CACHE .../var/cache\n-    </environment>\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/filestorage/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    python-check-interval 1000\n-\n-\n-DemoStorage\n-===========\n-\n-To have a DemoStorage configuration, you can use demo-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = on\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage>\n-          path .../sample-buildout/var/newfs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that demostorage can be disable::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = off\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf without demostorage::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/newfs/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can add file storage to the demo-storage to be able to keep\n-changes::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = on\n-    ... demo-file-storage = demofs/Data.fs\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage base>\n-          path .../sample-buildout/var/newfs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage changes>\n-          path .../sample-buildout/var/demofs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can add a blob storage to the demo-storage as well::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... blob-storage = ${buildout:directory}/var/blob\n-    ... demo-storage = on\n-    ... demo-file-storage = demofs/Data.fs\n-    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-        <blobstorage base>\n-          blob-dir .../sample-buildout/var/blob\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/newfs/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-    ...\n-        <blobstorage changes>\n-          blob-dir .../sample-buildout/var/demoblob\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/demofs/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-    ...\n-\n-Finally, you can add only a blob storage. Changes will then not be\n-persisted on disk, but blob support will be available separately (it\'s\n-not supported by the in-memory demostorage)::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... demo-storage = on\n-    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        # FileStorage database\n-        <filestorage base>\n-          path .../sample-buildout/var/newfs/Data.fs\n-        </filestorage>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        # Blob-enabled FileStorage database\n-        <blobstorage changes>\n-          blob-dir .../sample-buildout/var/demoblob\n-          <demostorage />\n-        </blobstorage>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-\n-\n-ZlibStorage\n-===========\n-\n-To have a ZlibStorage configuration, you can use zlib-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... zlib-storage = active\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-    <BLANKLINE>\n-          %import zc.zlibstorage\n-          # ZlibStorage wrapper\n-          <zlibstorage>\n-            compress true\n-    <BLANKLINE>\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-    <BLANKLINE>\n-          </zlibstorage>\n-    <BLANKLINE>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-To have a ZlibStorage configuration with no active compression, you\n-can set the ``zlib-storage`` option to \'passive\'::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... zlib-storage = passive\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blobstorage\n-    <BLANKLINE>\n-          %import zc.zlibstorage\n-          # ZlibStorage wrapper\n-          <zlibstorage>\n-            compress false\n-    <BLANKLINE>\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-    <BLANKLINE>\n-          </zlibstorage>\n-    <BLANKLINE>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-\n-BeforeStorage\n-=============\n-\n-To have a BeforeStorage configuration, you can use before-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... before-storage = now\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    %import zc.beforestorage\n-        # BeforeStorage\n-        <before>\n-          before now\n-    <BLANKLINE>\n-          # Blob-enabled FileStorage database\n-          <blobstorage>\n-            blob-dir .../sample-buildout/var/blobstorage\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-          </blobstorage>\n-    <BLANKLINE>\n-        </before>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-The before-storage option can be combined with a demo-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... file-storage = newfs/Data.fs\n-    ... before-storage = now\n-    ... demo-storage = on\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-        # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        %import zc.beforestorage\n-        # BeforeStorage\n-        <before>\n-          before now\n-    <BLANKLINE>\n-          # Blob-enabled FileStorage database\n-          <blobstorage>\n-            blob-dir .../sample-buildout/var/blobstorage\n-            # FileStorage database\n-            <filestorage>\n-              path .../sample-buildout/var/newfs/Data.fs\n-            </filestorage>\n-          </blobstorage>\n-    <BLANKLINE>\n-        </before>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-BlobStorage\n-===========\n-\n-To have a BlobStorage configuration, you can use blob-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... blob-storage = ${buildout:directory}/var/blob\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        # Blob-enabled FileStorage database\n-        <blobstorage>\n-          blob-dir .../sample-buildout/var/blob\n-          # FileStorage database\n-          <filestorage>\n-            path .../sample-buildout/var/filestorage/Data.fs\n-          </filestorage>\n-        </blobstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-\n-RelStorage\n-==========\n-\n-To have a RelStorage configuration, you can use rel-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... rel-storage =\n-    ...   type postgresql\n-    ...   dbname zodb\n-    ...   user tarek\n-    ...   host example.com\n-    ...   password secret space\n-    ...   keep-history false\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    %import relstorage\n-        <relstorage>\n-            keep-history false\n-            <postgresql>\n-                dsn dbname=\'zodb\' user=\'tarek\' host=\'example.com\' password=\'secret space\'\n-            </postgresql>\n-        </relstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Relstorage and sqlite3::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... wsgi = off\n-    ... eggs =\n-    ... user = me:me\n-    ... rel-storage =\n-    ...   type sqlite3\n-    ...   data-dir %(sample_buildout)s/var/db\n-    ...   pragmas-synchronous off\n-    ...   pragmas-checkpoint_fullfsync off\n-    ... \'\'\' % options)\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-        %import relstorage\n-        <relstorage>\n-            <sqlite3>\n-                data-dir .../sample-buildout/var/db\n-                <pragmas>\n-                    checkpoint_fullfsync off\n-                    synchronous off\n-                </pragmas>\n-            </sqlite3>\n-        </relstorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-ZEO storage\n-===========\n-\n-If you want to connect to a zeo server you specify some additional properties\n-for the plone.recipe.zope2instance recipe.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-If `zeo-client-client` and other relevant ZEO options such as\n-`zeo-client-blob-cache-size` and `zeo-client-blob-cache-size-check` are\n-specified, they should get included in that section as well.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... zeo-client-client = persistentcache88\n-    ... min-disconnect-poll = 10\n-    ... max-disconnect-poll = 20\n-    ... zeo-client-blob-cache-size = 5GB\n-    ... zeo-client-blob-cache-size-check = 50\n-    ... zeo-client-read-only-fallback = true\n-    ... zeo-var = %(sample_buildout)s/var\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback true\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-            blob-cache-size 5GB\n-            blob-cache-size-check 50\n-    <BLANKLINE>\n-            var .../sample-buildout/var\n-            client persistentcache88\n-            min-disconnect-poll 10\n-            max-disconnect-poll 20\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that demo-storage is correctly applied\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... demo-storage = yes\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        # DemoStorage\n-        <demostorage>\n-        # ZEOStorage database\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        </demostorage>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that blob-storage is correctly applied\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... blob-storage = ${buildout:directory}/var/blob\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-    # Blob-enabled ZEOStorage database\n-        <zeoclient>\n-          read-only false\n-          read-only-fallback false\n-          blob-dir .../sample-buildout/var/blob\n-          shared-blob-dir no\n-          server 8100\n-          storage 1\n-          name zeostorage\n-          cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Verify that demo-storage is correctly applied together with\n-before-storage::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... demo-storage = yes\n-    ... before-storage = now\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        # Main database\n-        cache-size 30000\n-    <BLANKLINE>\n-    # DemoStorage\n-        <demostorage>\n-    <BLANKLINE>\n-        %import zc.beforestorage\n-        # BeforeStorage\n-        <before>\n-          before now\n-        # Blob-enabled ZEOStorage database\n-          <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 8100\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-          </zeoclient>\n-        </before>\n-    <BLANKLINE>\n-        </demostorage>\n-        mount-point /\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can get specific zeo server address using `zeo-address`.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... zeo-address = 127.0.0.1:8101\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 127.0.0.1:8101\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-You can also set multiple zeo server addresses using `zeo-address`.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zeo-client = yes\n-    ... zeo-address = 127.0.0.1:8101 127.0.0.1:8102\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with a basic zope.conf::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <zeoclient>\n-            read-only false\n-            read-only-fallback false\n-            blob-dir .../sample-buildout/var/blobcache\n-            shared-blob-dir no\n-            server 127.0.0.1:8101\n-            server 127.0.0.1:8102\n-            storage 1\n-            name zeostorage\n-            cache-size 128MB\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-    <BLANKLINE>\n-        </zeoclient>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-Custom storage wrapper\n-======================\n-\n-To add custom configuration around the storage,\n-use the `storage-wrapper` option::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... storage-wrapper =\n-    ...   <foo>\n-    ...   %%s\n-    ...   </foo>\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Now zope.conf should include the custom storage wrapper::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <zodb_db main>\n-        ...\n-        <foo>\n-            # Blob-enabled FileStorage database\n-            ...\n-        </foo>\n-        ...\n-    </zodb_db>\n-    ...\n-    <BLANKLINE>\n-\n-\n-Custom Event log\n-================\n-\n-`event-log-custom` is only supported for ZServer (Python 2 only).\n-\n-\n-Mailing logger\n-==============\n-\n-`mailinglogger` is only supported for ZServer (Python 2 only).\n-\n-\n-Custom access log\n-=================\n-\n-`access-log-custom`  is only supported for ZServer (Python 2 only).\n-\n-\n-Custom site.zcml file\n-=====================\n-\n-`site-zcml` is a new option that allows you to create a custom site.zcml file.\n-When this option is used the `zcml` option is ignored. Let\'s try it::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... # the zcml option will be ignored when a site-zcml option is given\n-    ... zcml =\n-    ...       test.example\n-    ...\n-    ... site-zcml =\n-    ...       <configure xmlns="http://namespaces.zope.org/zope"\n-    ...                  xmlns:five="http://namespaces.zope.org/five">\n-    ...           <include package="Products.Five" />\n-    ...           <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n-    ...           <include package="test.example" />\n-    ...       </configure>\n-    ...\n-    ... \'\'\' % options)\n-\n-Let\'s run the buildout::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Now let\'s check that we have a zope instance, with the custom site.zcml::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> print(open(os.path.join(instance, \'etc\', \'site.zcml\')).read())\n-    <configure xmlns="http://namespaces.zope.org/zope"\n-               xmlns:five="http://namespaces.zope.org/five">\n-        <include package="Products.Five" />\n-        <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n-        <include package="test.example" />\n-    </configure>\n-    <BLANKLINE>\n-\n-\n-Environment Variables\n-=====================\n-\n-We can specify environment variables for Zope.  Sometimes it is\n-useful to set the TZ variable if our instance will be moving\n-between several servers::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... environment-vars = TZ US/Eastern\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our environment variables should be set now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <environment>\n-      TZ US/Eastern\n-    CHAMELEON_CACHE .../var/cache\n-    </environment>\n-    ...\n-\n-Now let\'s add several environment variables::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... environment-vars =\n-    ...     TZ US/Eastern\n-    ...     TMP /var/tmp\n-    ...     DISABLE_PTS True\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our environment variables should be set now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> import re\n-    >>> env_vars = re.compile(r"<environment>\\n\\s*(?P<vars>.*)\\n</environment>", re.M | re.S)\n-    >>> print(re.search(env_vars, zope_conf).group(\'vars\'))\n-    TZ US/Eastern\n-    TMP /var/tmp\n-    DISABLE_PTS True\n-    CHAMELEON_CACHE .../var/cache\n-\n-Several all on one line::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... template-cache = off\n-    ... environment-vars = TZ US/Eastern TMP /var/tmp DISABLE_PTS True\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our environment variables should be set now::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> re.search(env_vars, zope_conf).group(\'vars\')\n-    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n-\n-\n-HTTP server\n-===========\n-\n-Http-server options are only supported for ZServer (Python 2 only).\n-\n-\n-Edge Cases\n-==========\n-\n-Some Linux distributions of Zope2 don\'t have the windows scripts.\n-Let\'s run a minimal buildout without them to make sure\n-we don\'t error::\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Relative paths in scripts\n-=========================\n-\n-The recipe supports the generation of scripts with relative paths.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... relative-paths = true\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... \'\'\' % options)\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Our generated script now has a reference to the relative path.\n-\n-    >>> import sys\n-    >>>\n-\n-    >>> instance_path = join(\'bin\', \'instance\')\n-    >>> if WINDOWS:\n-    ...     instance_path += \'-script.py\'\n-    >>> open(instance_path).read()\n-    "...base = ...__file__..."\n-\n-Custom Zope Conf\n-=================\n-\n-`zope-conf` is an option that allows you to use a specific Zope config file.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zope-conf = /some/path/my.conf\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance script with the custom config file::\n-\n-    >>> instance_path = join(\'bin\', \'instance\')\n-    >>> if WINDOWS:\n-    ...     instance_path += \'-script.py\'\n-    >>> open(instance_path).read()\n-    "...plone.recipe.zope2instance.ctl.main(...[\'-C\', \'/some/path/my.conf\', \'-p\', \'.../bin/interpreter\', \'-w\', \'...etc/wsgi.ini\']..."\n-\n-Custom Zope Conf Imports\n-========================\n-`zope-conf-imports` is an option that allows you to import python packages that\n-define custom zope.conf sections using ZConfig API.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... zope-conf-imports =\n-    ...   mailinglogger\n-    ...   eea.graylogger\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance, with custom imports::\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %import mailinglogger\n-    %import eea.graylogger\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    <BLANKLINE>\n-\n-Custom WSGI configuration\n-=========================\n-\n-`wsgi` is an option that allows you to use a specific WSGI config file.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... wsgi = /some/path/service.ini\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should have a zope instance script with the custom config file::\n-\n-    >>> instance_path = join(\'bin\', \'instance\')\n-    >>> if WINDOWS:\n-    ...     instance_path += \'-script.py\'\n-    >>> open(instance_path).read()\n-    "...plone.recipe.zope2instance.ctl.main(...[...\'-w\', \'/some/path/service.ini\']..."\n-\n-\n-Resources directory\n-===================\n-\n-`resources` is an option that allows you to register a\n-plone.app.theming resources directory.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... resources = ${buildout:directory}/myresources\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-The directory should have been generated, and zope config created::\n-\n-    >>> \'myresources\' in os.listdir(os.curdir)\n-    True\n-    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n-    >>> ls(includes_path)\n-    -  998-resources-configure.zcml\n-    >>> cat(includes_path, \'998-resources-configure.zcml\')\n-    <configure xmlns="http://namespaces.zope.org/zope"\n-               xmlns:plone="http://namespaces.plone.org/plone">\n-        <include package="plone.resource" file="meta.zcml"/>\n-        <plone:static directory=".../sample-buildout/myresources"/>\n-    </configure>\n-\n-\n-Locales directory\n-===================\n-\n-`locales` is an option that allows you to register a\n-plone.app.theming locales directory.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... locales = ${buildout:directory}/mylocales\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-The directory should have been generated, and zope config created::\n-\n-    >>> \'mylocales\' in os.listdir(os.curdir)\n-    True\n-    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n-    >>> ls(includes_path)\n-    -  001-locales-configure.zcml\n-    >>> cat(includes_path, \'001-locales-configure.zcml\')\n-    <configure xmlns="http://namespaces.zope.org/zope"\n-               xmlns:i18n="http://namespaces.zope.org/i18n">\n-        <i18n:registerTranslations directory=".../sample-buildout/mylocales" />\n-    </configure>\n-\n-\n-Initialization\n-==============\n-\n-`initialization` is an option that allows you to add custom Python\n-code to the initialization process.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs = waitress\n-    ... user = me:me\n-    ... initialization =\n-    ...     print(\'Initialization complete! Hello %%(user)s!\')\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-We should see the given initialization commands included in the instance\n-script::\n-\n-    >>> instance = open(os.path.join(sample_buildout, \'bin\', \'instance\')).read()\n-    >>> "print(\'Initialization complete! Hello me:me!\')" in instance\n-    True\n-\n-    >>> waitress = open(os.path.join(sample_buildout, \'bin\', \'waitress-serve\')).read()\n-    >>> "print(\'Initialization complete! Hello me:me!\')" in waitress\n-    True\n-\n-\n-Exceptions debug mode\n-=====================\n-`debug-exceptions` disables exception views including\n-``standard_error_message`` and acts as a debugging aid during development.\n-\n-    >>> write(\'buildout.cfg\',\n-    ... \'\'\'\n-    ... [buildout]\n-    ... parts = instance\n-    ... find-links = %(sample_buildout)s/eggs\n-    ...\n-    ... [instance]\n-    ... recipe = plone.recipe.zope2instance\n-    ... eggs =\n-    ... user = me:me\n-    ... debug-exceptions = on\n-    ... \'\'\' % options)\n-\n-Let\'s run it::\n-\n-    >>> print(system(join(\'bin\', \'buildout\'))),\n-    Uninstalling instance.\n-    Installing instance.\n-    Generated script \'...instance\'.\n-    Generated interpreter \'.../parts/instance/bin/interpreter\'...\n-\n-Now zope.conf should include the debug-exceptions configuration:\n-\n-    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n-    >>> zope_conf = open(os.path.join(instance, \'etc\', \'zope.conf\')).read()\n-    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n-    >>> print(zope_conf)\n-    %define INSTANCEHOME .../sample-buildout/parts/instance\n-    ...\n-    debug-exceptions on\n-    ...\n-    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_base.rst b/src/plone/recipe/zope2instance/tests/zope2instance_base.rst\nnew file mode 100644\nindex 0000000..f331efd\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_base.rst\n@@ -0,0 +1,801 @@\n+======================================\n+plone.recipe.zope2instance BASIC USAGE\n+======================================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import ls, write\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+Let\'s create a minimum buildout that uses the current\n+plone.recipe.zope2instance::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    instancehome $INSTANCEHOME\n+    %define CLIENTHOME .../sample-buildout/var/instance\n+    clienthome $CLIENTHOME\n+    debug-mode off\n+    security-policy-implementation C\n+    verbose-security off\n+    default-zpublisher-encoding utf-8\n+    <environment>\n+        CHAMELEON_CACHE .../var/cache\n+    </environment>\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    <zodb_db temporary>\n+        # Temporary storage database (for sessions)\n+        <temporarystorage>\n+          name temporary storage for sessioning\n+        </temporarystorage>\n+        mount-point /temp_folder\n+        container-class Products.TemporaryFolder.TemporaryContainer\n+    </zodb_db>\n+    python-check-interval 1000\n+\n+We should have a blobstorage directory::\n+\n+    >>> ls(\'var\')\n+    d  blobstorage\n+    d  cache\n+    d  filestorage\n+    d  instance\n+    d  log\n+\n+The blobstorage directory should only be readable by the current user,\n+otherwise you get a warning when the zope instance starts up.  The\n+(POSIX) path mode bits should be 0700::\n+\n+    >>> WINDOWS or (os.stat(os.path.join(\'var\', \'blobstorage\')).st_mode & 0o077) == 0\n+    True\n+\n+\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+Custom storage wrapper\n+======================\n+\n+To add custom configuration around the storage,\n+use the `storage-wrapper` option::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... storage-wrapper =\n+    ...   <foo>\n+    ...   %%s\n+    ...   </foo>\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Now zope.conf should include the custom storage wrapper::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <foo>\n+            # Blob-enabled FileStorage database\n+            ...\n+        </foo>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+Custom Event log\n+================\n+\n+`event-log-custom` is only supported for ZServer (Python 2 only).\n+\n+\n+Mailing logger\n+==============\n+\n+`mailinglogger` is only supported for ZServer (Python 2 only).\n+\n+\n+Custom access log\n+=================\n+\n+`access-log-custom`  is only supported for ZServer (Python 2 only).\n+\n+\n+Custom site.zcml file\n+=====================\n+\n+`site-zcml` is a new option that allows you to create a custom site.zcml file.\n+When this option is used the `zcml` option is ignored. Let\'s try it::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... # the zcml option will be ignored when a site-zcml option is given\n+    ... zcml =\n+    ...       test.example\n+    ...\n+    ... site-zcml =\n+    ...       <configure xmlns="http://namespaces.zope.org/zope"\n+    ...                  xmlns:five="http://namespaces.zope.org/five">\n+    ...           <include package="Products.Five" />\n+    ...           <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+    ...           <include package="test.example" />\n+    ...       </configure>\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run the buildout::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Now let\'s check that we have a zope instance, with the custom site.zcml::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'site.zcml\')) as fd:\n+    ...     print(fd.read())\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:five="http://namespaces.zope.org/five">\n+        <include package="Products.Five" />\n+        <meta:redefinePermission from="zope2.Public" to="zope.Public" />\n+        <include package="test.example" />\n+    </configure>\n+    <BLANKLINE>\n+\n+\n+Environment Variables\n+=====================\n+\n+We can specify environment variables for Zope.  Sometimes it is\n+useful to set the TZ variable if our instance will be moving\n+between several servers::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars = TZ US/Eastern\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <environment>\n+      TZ US/Eastern\n+    CHAMELEON_CACHE .../var/cache\n+    </environment>\n+    ...\n+\n+Now let\'s add several environment variables::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... environment-vars =\n+    ...     TZ US/Eastern\n+    ...     TMP /var/tmp\n+    ...     DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> import re\n+    >>> env_vars = re.compile(r"<environment>\\n\\s*(?P<vars>.*)\\n</environment>", re.M | re.S)\n+    >>> print(re.search(env_vars, zope_conf).group(\'vars\'))\n+    TZ US/Eastern\n+    TMP /var/tmp\n+    DISABLE_PTS True\n+    CHAMELEON_CACHE .../var/cache\n+\n+Several all on one line::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... template-cache = off\n+    ... environment-vars = TZ US/Eastern TMP /var/tmp DISABLE_PTS True\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Our environment variables should be set now::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> re.search(env_vars, zope_conf).group(\'vars\')\n+    \'TZ US/Eastern\\nTMP /var/tmp\\nDISABLE_PTS True\'\n+\n+\n+HTTP server\n+===========\n+\n+Http-server options are only supported for ZServer (Python 2 only).\n+\n+\n+Edge Cases\n+==========\n+\n+Some Linux distributions of Zope2 don\'t have the windows scripts.\n+Let\'s run a minimal buildout without them to make sure\n+we don\'t error::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Relative paths in scripts\n+=========================\n+\n+The recipe supports the generation of scripts with relative paths.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... relative-paths = true\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... \'\'\' % options)\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+    >>> if not WINDOWS:\n+    ...     with open(join(\'bin\', \'instance\')) as fd:\n+    ...         value = fd.read()\n+    ... else:\n+    ...     value = ""\n+    >>> WINDOWS or \'base\' in value and \'__file__\' in value\n+    True\n+\n+Custom Zope Conf\n+=================\n+\n+`zope-conf` is an option that allows you to use a specific Zope config file.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf = /some/path/my.conf\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance script with the custom config file::\n+\n+    >>> if not WINDOWS:\n+    ...     with open(join(\'bin\', \'instance\')) as fd:\n+    ...         value = fd.read()\n+    ... else:\n+    ...     value = ""\n+    >>> WINDOWS or \'plone.recipe.zope2instance.ctl.main(\' in value and "[\'-C\', \'/some/path/my.conf\', \'-p\', \'" in value and "/bin/interpreter\', \'-w\', \'" in value and "etc/wsgi.ini\']" in value\n+    True\n+\n+Custom Zope Conf Imports\n+========================\n+`zope-conf-imports` is an option that allows you to import python packages that\n+define custom zope.conf sections using ZConfig API.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zope-conf-imports =\n+    ...   mailinglogger\n+    ...   eea.graylogger\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with custom imports::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %import mailinglogger\n+    %import eea.graylogger\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <BLANKLINE>\n+\n+Custom WSGI configuration\n+=========================\n+\n+`wsgi` is an option that allows you to use a specific WSGI config file.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... wsgi = /some/path/service.ini\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance script with the custom config file::\n+\n+\n+    >>> if not WINDOWS:\n+    ...     with open(join(\'bin\', \'instance\')) as fd:\n+    ...         value = fd.read()\n+    ... else:\n+    ...     value = ""\n+    >>> WINDOWS or \'plone.recipe.zope2instance.ctl.main(\' in value and "\'-w\', \'/some/path/service.ini\']" in value\n+    True\n+\n+Resources directory\n+===================\n+\n+`resources` is an option that allows you to register a\n+plone.app.theming resources directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... resources = ${buildout:directory}/myresources\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'myresources\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  998-resources-configure.zcml\n+    >>> with open(os.path.join(includes_path, \'998-resources-configure.zcml\')) as fd:\n+    ...    print(fd.read().replace(\'\\\\\', \'/\'))\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:plone="http://namespaces.plone.org/plone">\n+        <include package="plone.resource" file="meta.zcml"/>\n+        <plone:static directory=".../sample-buildout/myresources"/>\n+    </configure>\n+\n+\n+Locales directory\n+===================\n+\n+`locales` is an option that allows you to register a\n+plone.app.theming locales directory.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... locales = ${buildout:directory}/mylocales\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+The directory should have been generated, and zope config created::\n+\n+    >>> \'mylocales\' in os.listdir(os.curdir)\n+    True\n+    >>> includes_path = join(\'parts\', \'instance\', \'etc\', \'package-includes\')\n+    >>> ls(includes_path)\n+    -  001-locales-configure.zcml\n+    >>> with open(os.path.join(includes_path, \'001-locales-configure.zcml\')) as fd:\n+    ...    print(fd.read().replace(\'\\\\\', \'/\'))\n+    <configure xmlns="http://namespaces.zope.org/zope"\n+               xmlns:i18n="http://namespaces.zope.org/i18n">\n+        <i18n:registerTranslations directory=".../sample-buildout/mylocales" />\n+    </configure>\n+\n+\n+Initialization\n+==============\n+\n+`initialization` is an option that allows you to add custom Python\n+code to the initialization process.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs = waitress\n+    ... user = me:me\n+    ... initialization =\n+    ...     print(\'Initialization complete! Hello %%(user)s!\')\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should see the given initialization commands included in the instance\n+script::\n+\n+    >>> if not WINDOWS:\n+    ...     with open(os.path.join(sample_buildout, \'bin\', \'instance\')) as fd:\n+    ...         instance = fd.read()\n+    ... else:\n+    ...     instance = ""\n+    >>> WINDOWS or "print(\'Initialization complete! Hello me:me!\')" in instance\n+    True\n+\n+    >>> waitress_path = os.path.join(sample_buildout, \'bin\', \'waitress-serve\')\n+    >>> if WINDOWS:\n+    ...     waitress_path += \'-script.py\'\n+    >>> with open(waitress_path) as fd:\n+    ...     waitress = fd.read()\n+    >>> "print(\'Initialization complete! Hello me:me!\')" in waitress\n+    True\n+\n+\n+Exceptions debug mode\n+=====================\n+`debug-exceptions` disables exception views including\n+``standard_error_message`` and acts as a debugging aid during development.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... debug-exceptions = on\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+Now zope.conf should include the debug-exceptions configuration:\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    debug-exceptions on\n+    ...\n+    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst\nnew file mode 100644\nindex 0000000..384c0b1\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_beforestorage.rst\n@@ -0,0 +1,152 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+BeforeStorage\n+=============\n+\n+To have a BeforeStorage configuration, you can use before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+The before-storage option can be combined with a demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+        # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst\nnew file mode 100644\nindex 0000000..7a35a91\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_blobstorage.rst\n@@ -0,0 +1,72 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+BlobStorage\n+===========\n+\n+To have a BlobStorage configuration, you can use blob-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst\nnew file mode 100644\nindex 0000000..aae08f8\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_demostorage.rst\n@@ -0,0 +1,329 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+DemoStorage\n+===========\n+\n+To have a DemoStorage configuration, you can use demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demostorage can be disable::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = off\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf without demostorage::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add file storage to the demo-storage to be able to keep\n+changes::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage changes>\n+          path .../sample-buildout/var/demofs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can add a blob storage to the demo-storage as well::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... demo-storage = on\n+    ... demo-file-storage = demofs/Data.fs\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+        <blobstorage base>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/newfs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/demofs/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+    ...\n+\n+Finally, you can add only a blob storage. Changes will then not be\n+persisted on disk, but blob support will be available separately (it\'s\n+not supported by the in-memory demostorage)::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... demo-storage = on\n+    ... demo-blob-storage = ${buildout:directory}/var/demoblob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        # FileStorage database\n+        <filestorage base>\n+          path .../sample-buildout/var/newfs/Data.fs\n+        </filestorage>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        # Blob-enabled FileStorage database\n+        <blobstorage changes>\n+          blob-dir .../sample-buildout/var/demoblob\n+          <demostorage />\n+        </blobstorage>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst\nnew file mode 100644\nindex 0000000..4cb746d\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_relstorage.rst\n@@ -0,0 +1,134 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+RelStorage\n+==========\n+\n+To have a RelStorage configuration, you can use rel-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... rel-storage =\n+    ...   type postgresql\n+    ...   dbname zodb\n+    ...   user tarek\n+    ...   host example.com\n+    ...   password secret space\n+    ...   keep-history false\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    %import relstorage\n+        <relstorage>\n+            keep-history false\n+            <postgresql>\n+                dsn dbname=\'zodb\' user=\'tarek\' host=\'example.com\' password=\'secret space\'\n+            </postgresql>\n+        </relstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Relstorage and sqlite3::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... wsgi = off\n+    ... eggs =\n+    ... user = me:me\n+    ... rel-storage =\n+    ...   type sqlite3\n+    ...   data-dir %(sample_buildout)s/var/db\n+    ...   pragmas-synchronous off\n+    ...   pragmas-checkpoint_fullfsync off\n+    ... \'\'\' % options)\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        %import relstorage\n+        <relstorage>\n+            <sqlite3>\n+                data-dir .../sample-buildout/var/db\n+                <pragmas>\n+                    checkpoint_fullfsync off\n+                    synchronous off\n+                </pragmas>\n+            </sqlite3>\n+        </relstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst b/src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst\nnew file mode 100644\nindex 0000000..9ca4b7d\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_tempstorage_off.rst\n@@ -0,0 +1,79 @@\n+================================================\n+plone.recipe.zope2instance TEMPORARY STORAGE OFF\n+================================================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+Turning off ZODB temporary storage\n+==================================\n+Zope 4 does not ship with the required packages anymore, so to avoid breakage\n+the creation of the ZODB temporary storage definition can be turned off:\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zodb-temporary-storage = off\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+The generated configuration has no temporary storage section anymore:\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    instancehome $INSTANCEHOME\n+    %define CLIENTHOME .../sample-buildout/var/instance\n+    clienthome $CLIENTHOME\n+    debug-mode off\n+    security-policy-implementation C\n+    verbose-security off\n+    default-zpublisher-encoding utf-8\n+    <environment>\n+        CHAMELEON_CACHE .../var/cache\n+    </environment>\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    python-check-interval 1000\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst\nnew file mode 100644\nindex 0000000..92623dc\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_zeostorage.rst\n@@ -0,0 +1,480 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+ZEO storage\n+===========\n+\n+If you want to connect to a zeo server you specify some additional properties\n+for the plone.recipe.zope2instance recipe.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+If `zeo-client-client` and other relevant ZEO options such as\n+`zeo-client-blob-cache-size` and `zeo-client-blob-cache-size-check` are\n+specified, they should get included in that section as well.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-client-client = persistentcache88\n+    ... min-disconnect-poll = 10\n+    ... max-disconnect-poll = 20\n+    ... zeo-client-blob-cache-size = 5GB\n+    ... zeo-client-blob-cache-size-check = 50\n+    ... zeo-client-read-only-fallback = true\n+    ... zeo-var = %(sample_buildout)s/var\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback true\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+            blob-cache-size 5GB\n+            blob-cache-size-check 50\n+    <BLANKLINE>\n+            var .../sample-buildout/var\n+            client persistentcache88\n+            min-disconnect-poll 10\n+            max-disconnect-poll 20\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        # DemoStorage\n+        <demostorage>\n+        # ZEOStorage database\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        </demostorage>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that blob-storage is correctly applied\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+    # Blob-enabled ZEOStorage database\n+        <zeoclient>\n+          read-only false\n+          read-only-fallback false\n+          blob-dir .../sample-buildout/var/blob\n+          shared-blob-dir no\n+          server 8100\n+          storage 1\n+          name zeostorage\n+          cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+Verify that demo-storage is correctly applied together with\n+before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... demo-storage = yes\n+    ... before-storage = now\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+        # Blob-enabled ZEOStorage database\n+          <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 8100\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+          </zeoclient>\n+        </before>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can get specific zeo server address using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+You can also set multiple zeo server addresses using `zeo-address`.\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... zeo-client = yes\n+    ... zeo-address = 127.0.0.1:8101 127.0.0.1:8102\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        ...\n+        <zeoclient>\n+            read-only false\n+            read-only-fallback false\n+            blob-dir .../sample-buildout/var/blobcache\n+            shared-blob-dir no\n+            server 127.0.0.1:8101\n+            server 127.0.0.1:8102\n+            storage 1\n+            name zeostorage\n+            cache-size 128MB\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </zeoclient>\n+        ...\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst b/src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst\nnew file mode 100644\nindex 0000000..927ce81\n--- /dev/null\n+++ b/src/plone/recipe/zope2instance/tests/zope2instance_zlibstorage.rst\n@@ -0,0 +1,350 @@\n+==========================\n+plone.recipe.zope2instance\n+==========================\n+\n+\n+This is the doctest for plone.recipe.zope2instance. It ensures the template\n+works fine. It is based on zc.buildout testing module::\n+\n+    >>> from __future__ import print_function\n+    >>> from zc.buildout.testing import *\n+    >>> from os.path import join\n+    >>> import sys, os\n+    >>> options = globals()\n+    >>> WINDOWS = sys.platform == \'win32\'\n+\n+\n+ZlibStorage\n+===========\n+\n+To have a ZlibStorage configuration, you can use zlib-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = active\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress true\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+To have a ZlibStorage configuration with no active compression, you\n+can set the ``zlib-storage`` option to \'passive\'::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... zlib-storage = passive\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blobstorage\n+    <BLANKLINE>\n+          %import zc.zlibstorage\n+          # ZlibStorage wrapper\n+          <zlibstorage>\n+            compress false\n+    <BLANKLINE>\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+    <BLANKLINE>\n+          </zlibstorage>\n+    <BLANKLINE>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+\n+BeforeStorage\n+=============\n+\n+To have a BeforeStorage configuration, you can use before-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+    %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+The before-storage option can be combined with a demo-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... file-storage = newfs/Data.fs\n+    ... before-storage = now\n+    ... demo-storage = on\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+    <BLANKLINE>\n+        # DemoStorage\n+        <demostorage>\n+    <BLANKLINE>\n+        %import zc.beforestorage\n+        # BeforeStorage\n+        <before>\n+          before now\n+    <BLANKLINE>\n+          # Blob-enabled FileStorage database\n+          <blobstorage>\n+            blob-dir .../sample-buildout/var/blobstorage\n+            # FileStorage database\n+            <filestorage>\n+              path .../sample-buildout/var/newfs/Data.fs\n+            </filestorage>\n+          </blobstorage>\n+    <BLANKLINE>\n+        </before>\n+    <BLANKLINE>\n+    <BLANKLINE>\n+        </demostorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\n+BlobStorage\n+===========\n+\n+To have a BlobStorage configuration, you can use blob-storage::\n+\n+    >>> write(\'buildout.cfg\',\n+    ... \'\'\'\n+    ... [buildout]\n+    ... parts = instance\n+    ... find-links = %(sample_buildout)s/eggs\n+    ...\n+    ... [instance]\n+    ... recipe = plone.recipe.zope2instance\n+    ... eggs =\n+    ... user = me:me\n+    ... blob-storage = ${buildout:directory}/var/blob\n+    ...\n+    ... \'\'\' % options)\n+\n+Let\'s run it::\n+\n+    >>> output = system(join(\'bin\', \'buildout\'))\n+    >>> "Uninstalling instance" in output\n+    True\n+\n+    >>> "Installing instance" in output\n+    True\n+\n+    >>> WINDOWS or "Generated script" in output\n+    True\n+\n+    >>> WINDOWS or "Generated interpreter" in output\n+    True\n+\n+We should have a zope instance, with a basic zope.conf::\n+\n+    >>> instance = os.path.join(sample_buildout, \'parts\', \'instance\')\n+    >>> with open(os.path.join(instance, \'etc\', \'zope.conf\')) as fd:\n+    ...     zope_conf = fd.read()\n+    >>> zope_conf = zope_conf.replace(\'\\\\\', \'/\')\n+    >>> print(zope_conf)\n+    %define INSTANCEHOME .../sample-buildout/parts/instance\n+    ...\n+    <zodb_db main>\n+        # Main database\n+        cache-size 30000\n+        # Blob-enabled FileStorage database\n+        <blobstorage>\n+          blob-dir .../sample-buildout/var/blob\n+          # FileStorage database\n+          <filestorage>\n+            path .../sample-buildout/var/filestorage/Data.fs\n+          </filestorage>\n+        </blobstorage>\n+        mount-point /\n+    </zodb_db>\n+    ...\n+    <BLANKLINE>\n+\ndiff --git a/src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt b/src/plone/recipe/zope2instance/tests/zope2instance_zserver.rst\nsimilarity index 100%\nrename from src/plone/recipe/zope2instance/tests/zope2instance_zserver.txt\nrename to src/plone/recipe/zope2instance/tests/zope2instance_zserver.rst\ndiff --git a/tox.ini b/tox.ini\nindex f81780a..c2cf917 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -16,7 +16,7 @@ commands =\n     coverage run {envbindir}/zope-testrunner --test-path=src []\n extras = test\n deps =\n-    -rhttps://zopefoundation.github.io/Zope/releases/4.1/requirements-full.txt\n+    -rrequirements-testing-zope-4.txt\n     coverage\n setenv =\n     COVERAGE_FILE=.coverage.{envname}\n'

