Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-06-06T13:14:51-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.restapi/commit/a93d70adf37adfd5ffeebe926fe7392c1bb5e395

Fix validation of querystring-search input (#1653)

* Fix validation of querystring-search input

* Handle empty query

* split tests

* changelog

Files changed:
A news/1653.bugfix
M src/plone/restapi/services/querystringsearch/get.py
M src/plone/restapi/tests/test_services_querystringsearch.py

b'diff --git a/news/1653.bugfix b/news/1653.bugfix\nnew file mode 100644\nindex 000000000..1ffb310b8\n--- /dev/null\n+++ b/news/1653.bugfix\n@@ -0,0 +1 @@\n+Validate input to the `@querystring-search` service. Input which can\'t be processed now results in a 400 response instead of 500. @davisagli\ndiff --git a/src/plone/restapi/services/querystringsearch/get.py b/src/plone/restapi/services/querystringsearch/get.py\nindex e59c9b5c8..acd9f3647 100644\n--- a/src/plone/restapi/services/querystringsearch/get.py\n+++ b/src/plone/restapi/services/querystringsearch/get.py\n@@ -2,9 +2,11 @@\n from pkg_resources import parse_version\n from plone.restapi.bbb import IPloneSiteRoot\n from plone.restapi.deserializer import json_body\n+from plone.restapi.exceptions import DeserializationError\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.services import Service\n from urllib import parse\n+from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n \n \n@@ -23,17 +25,30 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-        data = json_body(self.request)\n+        try:\n+            data = json_body(self.request)\n+        except DeserializationError as err:\n+            raise BadRequest(str(err))\n+\n         query = data.get("query", None)\n-        b_start = int(data.get("b_start", 0))\n-        b_size = int(data.get("b_size", 25))\n+        try:\n+            b_start = int(data.get("b_start", 0))\n+        except ValueError:\n+            raise BadRequest("Invalid b_start")\n+        try:\n+            b_size = int(data.get("b_size", 25))\n+        except ValueError:\n+            raise BadRequest("Invalid b_size")\n         sort_on = data.get("sort_on", None)\n         sort_order = data.get("sort_order", None)\n-        limit = int(data.get("limit", 1000))\n-        fullobjects = data.get("fullobjects", False)\n+        try:\n+            limit = int(data.get("limit", 1000))\n+        except ValueError:\n+            raise BadRequest("Invalid limit")\n+        fullobjects = bool(data.get("fullobjects", False))\n \n-        if query is None:\n-            raise Exception("No query supplied")\n+        if not query:\n+            raise BadRequest("No query supplied")\n \n         if sort_order:\n             sort_order = "descending" if sort_order == "descending" else "ascending"\n@@ -59,7 +74,13 @@ def __call__(self):\n                 dict(custom_query={"UID": {"not": self.context.UID()}})\n             )\n \n-        results = querybuilder(**querybuilder_parameters)\n+        try:\n+            results = querybuilder(**querybuilder_parameters)\n+        except KeyError:\n+            # This can happen if the query has an invalid operation,\n+            # but plone.app.querystring doesn\'t raise an exception\n+            # with specific info.\n+            raise BadRequest("Invalid query.")\n \n         results = getMultiAdapter((results, self.request), ISerializeToJson)(\n             fullobjects=fullobjects\ndiff --git a/src/plone/restapi/tests/test_services_querystringsearch.py b/src/plone/restapi/tests/test_services_querystringsearch.py\nindex 97199aeee..442935a7a 100644\n--- a/src/plone/restapi/tests/test_services_querystringsearch.py\n+++ b/src/plone/restapi/tests/test_services_querystringsearch.py\n@@ -319,3 +319,45 @@ def test_querystringsearch_sort(self):\n             response.json()["items"][-1]["@id"],\n             f"{self.portal.absolute_url()}/testdocument9",\n         )\n+\n+    def test_querystringsearch__bad_json(self):\n+        response = self.api_session.get("/@querystring-search?query={")\n+        self.assertEqual(response.status_code, 400)\n+\n+    def test_querystringsearch__empty_query(self):\n+        response = self.api_session.post(\n+            "/@querystring-search",\n+            json={"query": []},\n+        )\n+        self.assertEqual(response.status_code, 400)\n+\n+    def test_querystringsearch__bad_b_size(self):\n+        response = self.api_session.post(\n+            "/@querystring-search",\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type",\n+                        "o": "plone.app.querystring.operation.selection.is",\n+                        "v": ["Document"],\n+                    }\n+                ],\n+                "b_size": "x",\n+            },\n+        )\n+        self.assertEqual(response.status_code, 400)\n+\n+    def test_querystringsearch__bad_operation(self):\n+        response = self.api_session.post(\n+            "/@querystring-search",\n+            json={\n+                "query": [\n+                    {\n+                        "i": "portal_type",\n+                        "o": "BOGUS",\n+                        "v": ["Document"],\n+                    }\n+                ],\n+            },\n+        )\n+        self.assertEqual(response.status_code, 400)\n'

