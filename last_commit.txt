Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2023-10-31T20:50:53+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.dexterity/commit/e9466e82387c7c6c69610ba547c8cada231deee2

Make the dependency on plone.app.content conditional.

This is for `INameFromTitle`, which we want to move to `plone.base`.
See https://github.com/plone/plone.app.dexterity/pull/379#issuecomment-1787478995 for why this is not working yet, and we need this workaround.

Files changed:
A news/3858.internal
M .meta.toml
M plone/app/dexterity/behaviors/configure.zcml
M pyproject.toml
M setup.py

b'diff --git a/.meta.toml b/.meta.toml\nindex 46eeeeff..e6f53a10 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -7,7 +7,7 @@ commit-id = "55bda5c9"\n \n [pyproject]\n codespell_ignores = "hove"\n-dependencies_ignores = "[\'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']"\n+dependencies_ignores = "[\'plone.app.content\', \'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']"\n \n [flake8]\n extra_lines = """\ndiff --git a/news/3858.internal b/news/3858.internal\nnew file mode 100644\nindex 00000000..3fde256c\n--- /dev/null\n+++ b/news/3858.internal\n@@ -0,0 +1,3 @@\n+Make the dependency on ``plone.app.content`` conditional.\n+This is for ``INameFromTitle``, which we want to move to ``plone.base``.\n+[maurits]\ndiff --git a/plone/app/dexterity/behaviors/configure.zcml b/plone/app/dexterity/behaviors/configure.zcml\nindex c28738fe..625eeee8 100644\n--- a/plone/app/dexterity/behaviors/configure.zcml\n+++ b/plone/app/dexterity/behaviors/configure.zcml\n@@ -59,23 +59,25 @@\n       for="plone.dexterity.interfaces.IDexterityContent"\n       />\n \n-  <!-- Title-to-id -->\n-  <plone:behavior\n-      name="plone.namefromtitle"\n-      title="Name from title"\n-      description="Automatically generate short URL name for content based on its initial title"\n-      provides="plone.app.content.interfaces.INameFromTitle"\n-      />\n+  <configure zcml:condition="installed plone.app.content">\n+    <!-- Title-to-id -->\n+    <plone:behavior\n+        name="plone.namefromtitle"\n+        title="Name from title"\n+        description="Automatically generate short URL name for content based on its initial title"\n+        provides="plone.app.content.interfaces.INameFromTitle"\n+        />\n \n-  <!-- File-name-to-id -->\n-  <plone:behavior\n-      name="plone.namefromfilename"\n-      title="Name from file name"\n-      description="Automatically generate short URL name for content based on its primary field file name"\n-      provides=".filename.INameFromFileName"\n-      />\n+    <!-- File-name-to-id -->\n+    <plone:behavior\n+        name="plone.namefromfilename"\n+        title="Name from file name"\n+        description="Automatically generate short URL name for content based on its primary field file name"\n+        provides=".filename.INameFromFileName"\n+        />\n \n-  <adapter factory=".filename.NameFromFileName" />\n+    <adapter factory=".filename.NameFromFileName" />\n+  </configure>\n \n   <!-- Navigation root -->\n   <plone:behavior\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 6e0a8720..3aac14c1 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -92,7 +92,7 @@ Zope = [\n   \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n ]\n python-dateutil = [\'dateutil\']\n-ignore-packages = [\'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']\n+ignore-packages = [\'plone.app.content\', \'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']\n \n ##\n # Add extra configuration options in .meta.toml:\ndiff --git a/setup.py b/setup.py\nindex 43b15267..84f69e45 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -62,7 +62,6 @@\n         # Plone/Zope core\n         "lxml",\n         "plone.base",\n-        "plone.app.content",\n         "plone.app.uuid",\n         "plone.app.z3cform>=1.1.0",\n         "plone.autoform>=1.1",\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2023-10-31T22:17:23+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.dexterity/commit/d4ebbe14dd059e45d16d9a49e2c52051ac106e56

Test that both spellings of the plone.namefromtitle behavior work.

Both `plone.namefromtitle` and `plone.app.content.interfaces.INameFromTitle` work.
You cannot use `plone.base.interfaces.INameFromTitle` as behavior name, this was never supported.
Recommended is to use `plone.namefromtitle` in all supported Plone versions.
Using `plone.app.content.interfaces.INameFromTitle` as name will stop working in Plone 7.

Rewrote the `tests/namefromtitle.txt` doctest file as a unittest file, making it easier to test both behavior names.

Files changed:
A plone/app/dexterity/tests/test_namefromtitle.py
M plone/app/dexterity/behaviors/configure.zcml
M plone/app/dexterity/tests/test_doctests.py
D plone/app/dexterity/tests/namefromtitle.txt

b'diff --git a/plone/app/dexterity/behaviors/configure.zcml b/plone/app/dexterity/behaviors/configure.zcml\nindex 625eeee8..aee0d089 100644\n--- a/plone/app/dexterity/behaviors/configure.zcml\n+++ b/plone/app/dexterity/behaviors/configure.zcml\n@@ -61,6 +61,12 @@\n \n   <configure zcml:condition="installed plone.app.content">\n     <!-- Title-to-id -->\n+    <!-- Note: we must keep `plone.app.content.interfaces.INameFromTitle` as\n+         `provides`, instead of the new location in `plone.base`,\n+         as long as we want to avoid breaking sites that have the old interface\n+         in the behaviors list of a portal_type, instead of the named behavior.\n+         See https://github.com/plone/plone.app.dexterity/pull/379\n+         -->\n     <plone:behavior\n         name="plone.namefromtitle"\n         title="Name from title"\ndiff --git a/plone/app/dexterity/tests/namefromtitle.txt b/plone/app/dexterity/tests/namefromtitle.txt\ndeleted file mode 100644\nindex a2d0066f..00000000\n--- a/plone/app/dexterity/tests/namefromtitle.txt\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-Automatic title-to-id behavior\n-==============================\n-\n-Say we have a \'Dinosaur\' content type::\n-\n-  >>> portal = layer[\'portal\']\n-  >>> from plone.dexterity.fti import DexterityFTI\n-  >>> fti = DexterityFTI(\'dinosaur\')\n-  >>> portal.portal_types._setObject(\'dinosaur\', fti)\n-  \'dinosaur\'\n-  >>> fti.klass = \'plone.dexterity.content.Container\'\n-  >>> fti.filter_content_types = False\n-\n-We can declare that it supports the "name from title" behavior defined in\n-plone.app.content (normally this would be done via Generic Setup)::\n-\n-  >>> fti.behaviors = (\'plone.app.content.interfaces.INameFromTitle\',\n-  ...                  \'plone.app.dexterity.behaviors.metadata.IBasic\')\n-\n-Now let\'s fire up the browser and confirm that new content gets renamed\n-appropriately::\n-\n-  >>> from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD, setRoles\n-  >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-  >>> import transaction; transaction.commit()\n-  >>> from plone.testing.z2 import Browser\n-  >>> browser = Browser(layer[\'app\'])\n-  >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n-\n-  >>> browser.open(\'http://nohost/plone/++add++dinosaur\')\n-  >>> browser.getControl(\'Title\').value = \'Brachiosaurus\'\n-  >>> browser.getControl(\'Save\').click()\n-  >>> browser.url\n-  \'http://nohost/plone/brachiosaurus/view\'\n-\n-\n-Title-to-id within a Dexterity container\n-----------------------------------------\n-\n-Does it still work if we\'re adding content within a Dexterity container?  Let\'s\n-check::\n-\n-  >>> browser.open(\'http://nohost/plone/brachiosaurus/++add++dinosaur\')\n-  >>> browser.getControl(\'Title\').value = \'Baby Brachiosaurus\'\n-  >>> browser.getControl(\'Save\').click()\n-  >>> browser.url\n-  \'http://nohost/plone/brachiosaurus/baby-brachiosaurus/view\'\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex ecdfce99..6b361554 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -8,7 +8,6 @@\n tests = (\n     "discussion.txt",\n     "editing.rst",\n-    "namefromtitle.txt",\n     "metadata.txt",\n     "nextprevious.txt",\n     "filename.txt",\ndiff --git a/plone/app/dexterity/tests/test_namefromtitle.py b/plone/app/dexterity/tests/test_namefromtitle.py\nnew file mode 100644\nindex 00000000..94d137b7\n--- /dev/null\n+++ b/plone/app/dexterity/tests/test_namefromtitle.py\n@@ -0,0 +1,84 @@\n+from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n+from plone.dexterity.fti import DexterityFTI\n+from plone.testing.zope import Browser\n+\n+import transaction\n+import unittest\n+\n+\n+def add_dinosaur_type(portal, behavior_name):\n+    fti = DexterityFTI("dinosaur")\n+    portal.portal_types._setObject("dinosaur", fti)\n+    fti.klass = "plone.dexterity.content.Container"\n+    fti.filter_content_types = False\n+    fti.behaviors = (\n+        behavior_name,\n+        "plone.basic",\n+    )\n+    return fti\n+\n+\n+class NameFromTitleFunctionalTest(unittest.TestCase):\n+    """Test name-from-title using named behavior."""\n+\n+    layer = DEXTERITY_FUNCTIONAL_TESTING\n+    behavior_name = "plone.namefromtitle"\n+\n+    def setUp(self):\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal_url = self.portal.absolute_url()\n+\n+        # Say we have a \'Dinosaur\' content type:\n+        self.fti = add_dinosaur_type(self.portal, self.behavior_name)\n+\n+        transaction.commit()\n+        self.browser = Browser(app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                TEST_USER_NAME,\n+                TEST_USER_PASSWORD,\n+            ),\n+        )\n+\n+    def test_create(self):\n+        self.browser.open(f"{self.portal_url}/++add++dinosaur")\n+        self.browser.getControl("Title").value = "Brachiosaurus"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/brachiosaurus/view")\n+\n+        # Does it still work if we are adding content within a container?\n+        self.browser.open(f"{self.portal_url}/brachiosaurus/++add++dinosaur")\n+        self.browser.getControl("Title").value = "Baby Brachiosaurus"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(\n+            self.browser.url,\n+            f"{self.portal_url}/brachiosaurus/baby-brachiosaurus/view",\n+        )\n+\n+\n+class PloneAppContentNameFromTitleFunctionalTest(NameFromTitleFunctionalTest):\n+    """Test name-from-title using old plone.app.content behavior interface."""\n+\n+    behavior_name = "plone.app.content.interfaces.INameFromTitle"\n+\n+\n+# We could test that you can use the new interface location as behavior name,\n+# but this fails, and this is fine: it was never supported.\n+# In all cases the named behavior is recommended.\n+#\n+# class PloneBaseNameFromTitleFunctionalTest(NameFromTitleFunctionalTest):\n+#     """Test name-from-title using new plone.base behavior interface."""\n+#     behavior_name = "plone.base.interfaces.INameFromTitle"\n+\n+\n+def test_suite():\n+    return unittest.defaultTestLoader.loadTestsFromName(__name__)\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2023-11-02T11:54:24+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.dexterity/commit/669e1e7ebf16339947f59c456760c9a49edfcacf

Merge pull request #380 from plone/maurits-plone-app-content-conditional

Make the dependency on plone.app.content conditional.

Files changed:
A news/3858.internal
A plone/app/dexterity/tests/test_namefromtitle.py
M .meta.toml
M plone/app/dexterity/behaviors/configure.zcml
M plone/app/dexterity/tests/test_doctests.py
M pyproject.toml
M setup.py
D plone/app/dexterity/tests/namefromtitle.txt

b'diff --git a/.meta.toml b/.meta.toml\nindex 46eeeeff..e6f53a10 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -7,7 +7,7 @@ commit-id = "55bda5c9"\n \n [pyproject]\n codespell_ignores = "hove"\n-dependencies_ignores = "[\'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']"\n+dependencies_ignores = "[\'plone.app.content\', \'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']"\n \n [flake8]\n extra_lines = """\ndiff --git a/news/3858.internal b/news/3858.internal\nnew file mode 100644\nindex 00000000..3fde256c\n--- /dev/null\n+++ b/news/3858.internal\n@@ -0,0 +1,3 @@\n+Make the dependency on ``plone.app.content`` conditional.\n+This is for ``INameFromTitle``, which we want to move to ``plone.base``.\n+[maurits]\ndiff --git a/plone/app/dexterity/behaviors/configure.zcml b/plone/app/dexterity/behaviors/configure.zcml\nindex c28738fe..aee0d089 100644\n--- a/plone/app/dexterity/behaviors/configure.zcml\n+++ b/plone/app/dexterity/behaviors/configure.zcml\n@@ -59,23 +59,31 @@\n       for="plone.dexterity.interfaces.IDexterityContent"\n       />\n \n-  <!-- Title-to-id -->\n-  <plone:behavior\n-      name="plone.namefromtitle"\n-      title="Name from title"\n-      description="Automatically generate short URL name for content based on its initial title"\n-      provides="plone.app.content.interfaces.INameFromTitle"\n-      />\n+  <configure zcml:condition="installed plone.app.content">\n+    <!-- Title-to-id -->\n+    <!-- Note: we must keep `plone.app.content.interfaces.INameFromTitle` as\n+         `provides`, instead of the new location in `plone.base`,\n+         as long as we want to avoid breaking sites that have the old interface\n+         in the behaviors list of a portal_type, instead of the named behavior.\n+         See https://github.com/plone/plone.app.dexterity/pull/379\n+         -->\n+    <plone:behavior\n+        name="plone.namefromtitle"\n+        title="Name from title"\n+        description="Automatically generate short URL name for content based on its initial title"\n+        provides="plone.app.content.interfaces.INameFromTitle"\n+        />\n \n-  <!-- File-name-to-id -->\n-  <plone:behavior\n-      name="plone.namefromfilename"\n-      title="Name from file name"\n-      description="Automatically generate short URL name for content based on its primary field file name"\n-      provides=".filename.INameFromFileName"\n-      />\n+    <!-- File-name-to-id -->\n+    <plone:behavior\n+        name="plone.namefromfilename"\n+        title="Name from file name"\n+        description="Automatically generate short URL name for content based on its primary field file name"\n+        provides=".filename.INameFromFileName"\n+        />\n \n-  <adapter factory=".filename.NameFromFileName" />\n+    <adapter factory=".filename.NameFromFileName" />\n+  </configure>\n \n   <!-- Navigation root -->\n   <plone:behavior\ndiff --git a/plone/app/dexterity/tests/namefromtitle.txt b/plone/app/dexterity/tests/namefromtitle.txt\ndeleted file mode 100644\nindex a2d0066f..00000000\n--- a/plone/app/dexterity/tests/namefromtitle.txt\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-Automatic title-to-id behavior\n-==============================\n-\n-Say we have a \'Dinosaur\' content type::\n-\n-  >>> portal = layer[\'portal\']\n-  >>> from plone.dexterity.fti import DexterityFTI\n-  >>> fti = DexterityFTI(\'dinosaur\')\n-  >>> portal.portal_types._setObject(\'dinosaur\', fti)\n-  \'dinosaur\'\n-  >>> fti.klass = \'plone.dexterity.content.Container\'\n-  >>> fti.filter_content_types = False\n-\n-We can declare that it supports the "name from title" behavior defined in\n-plone.app.content (normally this would be done via Generic Setup)::\n-\n-  >>> fti.behaviors = (\'plone.app.content.interfaces.INameFromTitle\',\n-  ...                  \'plone.app.dexterity.behaviors.metadata.IBasic\')\n-\n-Now let\'s fire up the browser and confirm that new content gets renamed\n-appropriately::\n-\n-  >>> from plone.app.testing import TEST_USER_ID, TEST_USER_NAME, TEST_USER_PASSWORD, setRoles\n-  >>> setRoles(portal, TEST_USER_ID, [\'Manager\'])\n-  >>> import transaction; transaction.commit()\n-  >>> from plone.testing.z2 import Browser\n-  >>> browser = Browser(layer[\'app\'])\n-  >>> browser.addHeader(\'Authorization\', \'Basic %s:%s\' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n-\n-  >>> browser.open(\'http://nohost/plone/++add++dinosaur\')\n-  >>> browser.getControl(\'Title\').value = \'Brachiosaurus\'\n-  >>> browser.getControl(\'Save\').click()\n-  >>> browser.url\n-  \'http://nohost/plone/brachiosaurus/view\'\n-\n-\n-Title-to-id within a Dexterity container\n-----------------------------------------\n-\n-Does it still work if we\'re adding content within a Dexterity container?  Let\'s\n-check::\n-\n-  >>> browser.open(\'http://nohost/plone/brachiosaurus/++add++dinosaur\')\n-  >>> browser.getControl(\'Title\').value = \'Baby Brachiosaurus\'\n-  >>> browser.getControl(\'Save\').click()\n-  >>> browser.url\n-  \'http://nohost/plone/brachiosaurus/baby-brachiosaurus/view\'\ndiff --git a/plone/app/dexterity/tests/test_doctests.py b/plone/app/dexterity/tests/test_doctests.py\nindex ecdfce99..6b361554 100644\n--- a/plone/app/dexterity/tests/test_doctests.py\n+++ b/plone/app/dexterity/tests/test_doctests.py\n@@ -8,7 +8,6 @@\n tests = (\n     "discussion.txt",\n     "editing.rst",\n-    "namefromtitle.txt",\n     "metadata.txt",\n     "nextprevious.txt",\n     "filename.txt",\ndiff --git a/plone/app/dexterity/tests/test_namefromtitle.py b/plone/app/dexterity/tests/test_namefromtitle.py\nnew file mode 100644\nindex 00000000..94d137b7\n--- /dev/null\n+++ b/plone/app/dexterity/tests/test_namefromtitle.py\n@@ -0,0 +1,84 @@\n+from plone.app.dexterity.testing import DEXTERITY_FUNCTIONAL_TESTING\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import TEST_USER_PASSWORD\n+from plone.dexterity.fti import DexterityFTI\n+from plone.testing.zope import Browser\n+\n+import transaction\n+import unittest\n+\n+\n+def add_dinosaur_type(portal, behavior_name):\n+    fti = DexterityFTI("dinosaur")\n+    portal.portal_types._setObject("dinosaur", fti)\n+    fti.klass = "plone.dexterity.content.Container"\n+    fti.filter_content_types = False\n+    fti.behaviors = (\n+        behavior_name,\n+        "plone.basic",\n+    )\n+    return fti\n+\n+\n+class NameFromTitleFunctionalTest(unittest.TestCase):\n+    """Test name-from-title using named behavior."""\n+\n+    layer = DEXTERITY_FUNCTIONAL_TESTING\n+    behavior_name = "plone.namefromtitle"\n+\n+    def setUp(self):\n+        app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal_url = self.portal.absolute_url()\n+\n+        # Say we have a \'Dinosaur\' content type:\n+        self.fti = add_dinosaur_type(self.portal, self.behavior_name)\n+\n+        transaction.commit()\n+        self.browser = Browser(app)\n+        self.browser.handleErrors = False\n+        self.browser.addHeader(\n+            "Authorization",\n+            "Basic {}:{}".format(\n+                TEST_USER_NAME,\n+                TEST_USER_PASSWORD,\n+            ),\n+        )\n+\n+    def test_create(self):\n+        self.browser.open(f"{self.portal_url}/++add++dinosaur")\n+        self.browser.getControl("Title").value = "Brachiosaurus"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(self.browser.url, f"{self.portal_url}/brachiosaurus/view")\n+\n+        # Does it still work if we are adding content within a container?\n+        self.browser.open(f"{self.portal_url}/brachiosaurus/++add++dinosaur")\n+        self.browser.getControl("Title").value = "Baby Brachiosaurus"\n+        self.browser.getControl("Save").click()\n+        self.assertEqual(\n+            self.browser.url,\n+            f"{self.portal_url}/brachiosaurus/baby-brachiosaurus/view",\n+        )\n+\n+\n+class PloneAppContentNameFromTitleFunctionalTest(NameFromTitleFunctionalTest):\n+    """Test name-from-title using old plone.app.content behavior interface."""\n+\n+    behavior_name = "plone.app.content.interfaces.INameFromTitle"\n+\n+\n+# We could test that you can use the new interface location as behavior name,\n+# but this fails, and this is fine: it was never supported.\n+# In all cases the named behavior is recommended.\n+#\n+# class PloneBaseNameFromTitleFunctionalTest(NameFromTitleFunctionalTest):\n+#     """Test name-from-title using new plone.base behavior interface."""\n+#     behavior_name = "plone.base.interfaces.INameFromTitle"\n+\n+\n+def test_suite():\n+    return unittest.defaultTestLoader.loadTestsFromName(__name__)\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 6e0a8720..3aac14c1 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -92,7 +92,7 @@ Zope = [\n   \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n ]\n python-dateutil = [\'dateutil\']\n-ignore-packages = [\'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']\n+ignore-packages = [\'plone.app.content\', \'plone.app.relationfield\', \'plone.directives.form\', \'plone.directives.dexterity\', \'five.grok\', \'plone.app.intid\', \'plone.contentrules\', \'plone.schema\', \'z3c.relationfield\']\n \n ##\n # Add extra configuration options in .meta.toml:\ndiff --git a/setup.py b/setup.py\nindex 43b15267..84f69e45 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -62,7 +62,6 @@\n         # Plone/Zope core\n         "lxml",\n         "plone.base",\n-        "plone.app.content",\n         "plone.app.uuid",\n         "plone.app.z3cform>=1.1.0",\n         "plone.autoform>=1.1",\n'

