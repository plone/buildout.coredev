Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-09-16T21:36:25+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/d3041177757a8e8d7b537577ac564e16ec50eb58

Import plone.testing.zope instead of deprecated z2.

Files changed:
A news/3130.bugfix
M plone/app/layout/links/tests/test_canonical_url.py
M plone/app/layout/viewlets/tests/history.txt
M plone/app/layout/viewlets/tests/test_common.py

b"diff --git a/news/3130.bugfix b/news/3130.bugfix\nnew file mode 100644\nindex 00000000..0c6af928\n--- /dev/null\n+++ b/news/3130.bugfix\n@@ -0,0 +1,2 @@\n+Fixed various deprecation warnings.\n+[maurits]\ndiff --git a/plone/app/layout/links/tests/test_canonical_url.py b/plone/app/layout/links/tests/test_canonical_url.py\nindex 2a20711c..7c2caee5 100644\n--- a/plone/app/layout/links/tests/test_canonical_url.py\n+++ b/plone/app/layout/links/tests/test_canonical_url.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from plone.app.layout.testing import FUNCTIONAL_TESTING\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n \n import unittest\n \ndiff --git a/plone/app/layout/viewlets/tests/history.txt b/plone/app/layout/viewlets/tests/history.txt\nindex 7bebda22..42d8c4b3 100644\n--- a/plone/app/layout/viewlets/tests/history.txt\n+++ b/plone/app/layout/viewlets/tests/history.txt\n@@ -10,7 +10,7 @@ the history viewlet works.\n Open a browser logged in as a Manager.\n \n     >>> app = layer['app']\n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> browser = Browser(app)\n     >>> browser.handleErrors = False\n     >>> browser.addHeader('Authorization', 'Basic admin:secret')\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 75113859..7e25ca5e 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -13,7 +13,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.CMFPlone.interfaces import ISiteSchema\n from zope.component import getUtility\n"

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-09-16T21:38:07+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/dc8aa6f7c2d6f6dccaf19289e92c6561015a7cbd

Replaced deprecated assertEquals with assertEqual.

Files changed:
M plone/app/layout/viewlets/tests/test_social.py

b'diff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex c217e187..cb4f92a1 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -92,13 +92,13 @@ def testDisabled(self):\n         settings.share_social_data = False\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEquals(len(viewlet.tags), 0)\n+        self.assertEqual(len(viewlet.tags), 0)\n \n     def testDisabledForLoggedUser(self):\n         login(self.portal, TEST_USER_NAME)\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEquals(len(viewlet.tags), 0)\n+        self.assertEqual(len(viewlet.tags), 0)\n         # clear cache to prevent memoize\n         cache = IAnnotations(self.app.REQUEST)\n         key = "plone.memoize"\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-09-16T22:03:11+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/1ebf80200eeb5026b59e840625e01075ec1e5a35

Removed test_defaultpage.py.

The defaultpage code and this test file were copied to CMFPlone in 2015.
I checked, and the two test files are still basically the same.

Files changed:
D plone/app/layout/navigation/tests/test_defaultpage.py

b'diff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py\ndeleted file mode 100644\nindex 2bc6e75f..00000000\n--- a/plone/app/layout/navigation/tests/test_defaultpage.py\n+++ /dev/null\n@@ -1,125 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.layout.testing import INTEGRATION_TESTING\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n-\n-import unittest\n-\n-\n-class DefaultPageTestCase(unittest.TestCase):\n-\n-    layer = INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer["portal"]\n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        self.portal.invokeFactory("Folder", "folder", title=u"Test Folder")\n-        self.folder = self.portal.folder\n-\n-    def test_getDefaultPage_step_1(self):\n-        # A content object called \'index_html\' wins\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-        self.folder.setDefaultPage("d1")\n-        self.folder.invokeFactory("Document", "index_html", title=u"Doc 2")\n-\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        self.assertEqual("index_html", getDefaultPage(self.folder))\n-\n-    def test_getDefaultPage_step_2(self):\n-        # Else check for IBrowserDefault, either if the container implements\n-        # it or if an adapter exists. In both cases fetch its FTI and either\n-        # take it if it implements IDynamicViewTypeInformation or adapt it to\n-        # IDynamicViewTypeInformation. call getDefaultPage on the implementer\n-        # and take value if given.\n-\n-        # first check some preconditions\n-        #\n-        # 1) a folder provides IBrowserDefault\n-        from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-\n-        self.assertTrue(IBrowserDefault.providedBy(self.folder))\n-\n-        # 2) a folder also provides an fti that implements\n-        #    IDynamicViewTypeInformation\n-        from Products.CMFDynamicViewFTI.interfaces import (\n-            IDynamicViewTypeInformation,\n-        )  # noqa\n-\n-        fti = self.folder.getTypeInfo()\n-        self.assertTrue(IDynamicViewTypeInformation.providedBy(fti))\n-\n-        # so if we set a document as defaultpage\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-        self.folder.setDefaultPage("d1")\n-\n-        # 3) fti should return it\n-        self.assertEqual("d1", fti.getDefaultPage(self.folder, check_exists=True))\n-\n-        # now test since we\'re sure everythings set up correctly\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # missing here:\n-        # - test adapter instead of direct implements in precondition 1\n-        # - test adapter instead of direct implements in precondition 2\n-\n-    def test_getDefaultPage_step_3_1(self):\n-        # 3. Else, look up the attribute default_page on the object, without\n-        #    acquisition in place\n-        # 3.1 look for a content in the container with the id, no acquisition!\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        # set doc d1 must work\n-        self.folder.default_page = "d1"\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # set doc d2 must fail and return None\n-        self.folder.default_page = "d2"\n-        self.assertIsNone(getDefaultPage(self.folder))\n-\n-        # list of possible values is allowed\n-        self.folder.default_page = ["d2", "d1"]\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # list of impossible values return None\n-        self.folder.default_page = ["d2", "d3"]\n-        self.assertIsNone(getDefaultPage(self.folder))\n-\n-        # acquisition check, must not work\n-        self.folder.invokeFactory("Folder", "f1", title=u"Sub Folder 1")\n-        self.folder.f1.invokeFactory("Document", "d2", title=u"Document 2")\n-        self.folder.default_page = "d2"\n-        self.assertIsNone(getDefaultPage(self.folder.f1))\n-\n-    def test_getDefaultPage_step_3_2(self):\n-        # 3. Else, look up the attribute default_page on the object, without\n-        #    acquisition in place\n-        # 3.2 look for a content at portal, with acquisition\n-        self.portal.invokeFactory("Document", "d1", title=u"Doc 1")\n-        self.folder.default_page = "d1"\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        # now it must acquire from portal\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # fetch from i.e. portal_skins by acquisition\n-        # test_rendering.pt is in portal_skins/plone_templates and so available\n-        # by acquisition\n-        self.folder.default_page = "test_rendering"\n-        self.assertEqual("test_rendering", getDefaultPage(self.folder))\n-\n-    def test_getDefaultPage_step_4(self):\n-        # 4. Else, look up the property default_page in the configuration\n-        # registry for magic ids and test these\n-        registry = getUtility(IRegistry)\n-        registry["plone.default_page"] = [u"d1"]\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-09-16T22:19:05+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.layout/commit/676d0beb43ac32939f4e5935c9cf2bdc372d8747

Fixed deprecated call of isDefaultPage.

- We had `plone.app.layout.navigation.isDefaultPage` which moved to `Products.CMFPlone.defaultpage.is_default_page`.
- We had `Products.CMFPlone.utils.isDefaultPage` which moved to `Products.CMFPlone.defaultpage.check_default_page_via_view`.

A tad bit confusing.

Files changed:
M plone/app/layout/navigation/navtree.py

b'diff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex 83ba3fd1..6e2bb647 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -4,7 +4,7 @@\n \n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n+from Products.CMFPlone.defaultpage import check_default_page_via_view\n from zope.interface import implementer\n \n import six\n@@ -129,7 +129,7 @@ def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase())\n     objPhysicalPath = None\n     if obj is not None:\n         objPhysicalPath = obj.getPhysicalPath()\n-        if utils.isDefaultPage(obj, request):\n+        if check_default_page_via_view(obj, request):\n             objPhysicalPath = objPhysicalPath[:-1]\n         objPath = "/".join(objPhysicalPath)\n \n'

Repository: plone.app.layout


Branch: refs/heads/master
Date: 2020-09-16T23:58:42+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.layout/commit/e140357ec3911fe5cadd20e22b782b0efa6018ed

Merge pull request #244 from plone/maurits/fix-warnings

Fix various warnings

Files changed:
A news/3130.bugfix
M plone/app/layout/links/tests/test_canonical_url.py
M plone/app/layout/navigation/navtree.py
M plone/app/layout/viewlets/tests/history.txt
M plone/app/layout/viewlets/tests/test_common.py
M plone/app/layout/viewlets/tests/test_social.py
D plone/app/layout/navigation/tests/test_defaultpage.py

b'diff --git a/news/3130.bugfix b/news/3130.bugfix\nnew file mode 100644\nindex 00000000..0c6af928\n--- /dev/null\n+++ b/news/3130.bugfix\n@@ -0,0 +1,2 @@\n+Fixed various deprecation warnings.\n+[maurits]\ndiff --git a/plone/app/layout/links/tests/test_canonical_url.py b/plone/app/layout/links/tests/test_canonical_url.py\nindex 2a20711c..7c2caee5 100644\n--- a/plone/app/layout/links/tests/test_canonical_url.py\n+++ b/plone/app/layout/links/tests/test_canonical_url.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from plone.app.layout.testing import FUNCTIONAL_TESTING\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n \n import unittest\n \ndiff --git a/plone/app/layout/navigation/navtree.py b/plone/app/layout/navigation/navtree.py\nindex 83ba3fd1..6e2bb647 100644\n--- a/plone/app/layout/navigation/navtree.py\n+++ b/plone/app/layout/navigation/navtree.py\n@@ -4,7 +4,7 @@\n \n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n+from Products.CMFPlone.defaultpage import check_default_page_via_view\n from zope.interface import implementer\n \n import six\n@@ -129,7 +129,7 @@ def buildFolderTree(context, obj=None, query={}, strategy=NavtreeStrategyBase())\n     objPhysicalPath = None\n     if obj is not None:\n         objPhysicalPath = obj.getPhysicalPath()\n-        if utils.isDefaultPage(obj, request):\n+        if check_default_page_via_view(obj, request):\n             objPhysicalPath = objPhysicalPath[:-1]\n         objPath = "/".join(objPhysicalPath)\n \ndiff --git a/plone/app/layout/navigation/tests/test_defaultpage.py b/plone/app/layout/navigation/tests/test_defaultpage.py\ndeleted file mode 100644\nindex 2bc6e75f..00000000\n--- a/plone/app/layout/navigation/tests/test_defaultpage.py\n+++ /dev/null\n@@ -1,125 +0,0 @@\n-# -*- coding: utf-8 -*-\n-from plone.app.layout.testing import INTEGRATION_TESTING\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n-\n-import unittest\n-\n-\n-class DefaultPageTestCase(unittest.TestCase):\n-\n-    layer = INTEGRATION_TESTING\n-\n-    def setUp(self):\n-        self.portal = self.layer["portal"]\n-        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        self.portal.invokeFactory("Folder", "folder", title=u"Test Folder")\n-        self.folder = self.portal.folder\n-\n-    def test_getDefaultPage_step_1(self):\n-        # A content object called \'index_html\' wins\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-        self.folder.setDefaultPage("d1")\n-        self.folder.invokeFactory("Document", "index_html", title=u"Doc 2")\n-\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        self.assertEqual("index_html", getDefaultPage(self.folder))\n-\n-    def test_getDefaultPage_step_2(self):\n-        # Else check for IBrowserDefault, either if the container implements\n-        # it or if an adapter exists. In both cases fetch its FTI and either\n-        # take it if it implements IDynamicViewTypeInformation or adapt it to\n-        # IDynamicViewTypeInformation. call getDefaultPage on the implementer\n-        # and take value if given.\n-\n-        # first check some preconditions\n-        #\n-        # 1) a folder provides IBrowserDefault\n-        from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n-\n-        self.assertTrue(IBrowserDefault.providedBy(self.folder))\n-\n-        # 2) a folder also provides an fti that implements\n-        #    IDynamicViewTypeInformation\n-        from Products.CMFDynamicViewFTI.interfaces import (\n-            IDynamicViewTypeInformation,\n-        )  # noqa\n-\n-        fti = self.folder.getTypeInfo()\n-        self.assertTrue(IDynamicViewTypeInformation.providedBy(fti))\n-\n-        # so if we set a document as defaultpage\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-        self.folder.setDefaultPage("d1")\n-\n-        # 3) fti should return it\n-        self.assertEqual("d1", fti.getDefaultPage(self.folder, check_exists=True))\n-\n-        # now test since we\'re sure everythings set up correctly\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # missing here:\n-        # - test adapter instead of direct implements in precondition 1\n-        # - test adapter instead of direct implements in precondition 2\n-\n-    def test_getDefaultPage_step_3_1(self):\n-        # 3. Else, look up the attribute default_page on the object, without\n-        #    acquisition in place\n-        # 3.1 look for a content in the container with the id, no acquisition!\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        # set doc d1 must work\n-        self.folder.default_page = "d1"\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # set doc d2 must fail and return None\n-        self.folder.default_page = "d2"\n-        self.assertIsNone(getDefaultPage(self.folder))\n-\n-        # list of possible values is allowed\n-        self.folder.default_page = ["d2", "d1"]\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # list of impossible values return None\n-        self.folder.default_page = ["d2", "d3"]\n-        self.assertIsNone(getDefaultPage(self.folder))\n-\n-        # acquisition check, must not work\n-        self.folder.invokeFactory("Folder", "f1", title=u"Sub Folder 1")\n-        self.folder.f1.invokeFactory("Document", "d2", title=u"Document 2")\n-        self.folder.default_page = "d2"\n-        self.assertIsNone(getDefaultPage(self.folder.f1))\n-\n-    def test_getDefaultPage_step_3_2(self):\n-        # 3. Else, look up the attribute default_page on the object, without\n-        #    acquisition in place\n-        # 3.2 look for a content at portal, with acquisition\n-        self.portal.invokeFactory("Document", "d1", title=u"Doc 1")\n-        self.folder.default_page = "d1"\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        # now it must acquire from portal\n-        self.assertEqual("d1", getDefaultPage(self.folder))\n-\n-        # fetch from i.e. portal_skins by acquisition\n-        # test_rendering.pt is in portal_skins/plone_templates and so available\n-        # by acquisition\n-        self.folder.default_page = "test_rendering"\n-        self.assertEqual("test_rendering", getDefaultPage(self.folder))\n-\n-    def test_getDefaultPage_step_4(self):\n-        # 4. Else, look up the property default_page in the configuration\n-        # registry for magic ids and test these\n-        registry = getUtility(IRegistry)\n-        registry["plone.default_page"] = [u"d1"]\n-        self.folder.invokeFactory("Document", "d1", title=u"Doc 1")\n-\n-        from plone.app.layout.navigation.defaultpage import getDefaultPage\n-\n-        self.assertEqual("d1", getDefaultPage(self.folder))\ndiff --git a/plone/app/layout/viewlets/tests/history.txt b/plone/app/layout/viewlets/tests/history.txt\nindex 7bebda22..42d8c4b3 100644\n--- a/plone/app/layout/viewlets/tests/history.txt\n+++ b/plone/app/layout/viewlets/tests/history.txt\n@@ -10,7 +10,7 @@ the history viewlet works.\n Open a browser logged in as a Manager.\n \n     >>> app = layer[\'app\']\n-    >>> from plone.testing.z2 import Browser\n+    >>> from plone.testing.zope import Browser\n     >>> browser = Browser(app)\n     >>> browser.handleErrors = False\n     >>> browser.addHeader(\'Authorization\', \'Basic admin:secret\')\ndiff --git a/plone/app/layout/viewlets/tests/test_common.py b/plone/app/layout/viewlets/tests/test_common.py\nindex 75113859..7e25ca5e 100644\n--- a/plone/app/layout/viewlets/tests/test_common.py\n+++ b/plone/app/layout/viewlets/tests/test_common.py\n@@ -13,7 +13,7 @@\n from plone.app.testing import TEST_USER_ID\n from plone.protect import authenticator as auth\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFPlone.interfaces import INonStructuralFolder\n from Products.CMFPlone.interfaces import ISiteSchema\n from zope.component import getUtility\ndiff --git a/plone/app/layout/viewlets/tests/test_social.py b/plone/app/layout/viewlets/tests/test_social.py\nindex c217e187..cb4f92a1 100644\n--- a/plone/app/layout/viewlets/tests/test_social.py\n+++ b/plone/app/layout/viewlets/tests/test_social.py\n@@ -92,13 +92,13 @@ def testDisabled(self):\n         settings.share_social_data = False\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEquals(len(viewlet.tags), 0)\n+        self.assertEqual(len(viewlet.tags), 0)\n \n     def testDisabledForLoggedUser(self):\n         login(self.portal, TEST_USER_NAME)\n         viewlet = SocialTagsViewlet(self.folder, self.app.REQUEST, None)\n         viewlet.update()\n-        self.assertEquals(len(viewlet.tags), 0)\n+        self.assertEqual(len(viewlet.tags), 0)\n         # clear cache to prevent memoize\n         cache = IAnnotations(self.app.REQUEST)\n         key = "plone.memoize"\n'

