Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-03-28T22:03:56+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/2332f11fbf6ea6c0dec5ba049fe187aa6a602f26

Show warning in Site Setup when using an unsupported Plone or Python version.

This is based on dates in the [Plone release schedule](https://plone.org/download/release-schedule) and the [Status of Python versions](https://devguide.python.org/versions/).

Files changed:
A news/23.bugfix
M Products/CMFPlone/controlpanel/browser/overview.pt
M Products/CMFPlone/controlpanel/browser/overview.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/overview.pt b/Products/CMFPlone/controlpanel/browser/overview.pt\nindex f22683fc28..1fdc289d48 100644\n--- a/Products/CMFPlone/controlpanel/browser/overview.pt\n+++ b/Products/CMFPlone/controlpanel/browser/overview.pt\n@@ -21,6 +21,69 @@\n         Configuration area for Plone and add-on Products.\n     </p>\n \n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/python2_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_python2_warning">\n+            You are using Python 2.\n+            This should only be used temporarily while preparing to migrate to Python 3.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/python_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_python_warning">\n+            You are using a Python version that is not supported.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/plone_maintenance_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_plone_maintenance_warning">\n+            You are using a Plone version that is out of maintenance support.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/plone_security_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_plone_security_warning">\n+            You are using a Plone version that is out of security support.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/version_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_plone_release_schedule">\n+            Go to the\n+            <tal:link i18n:name="plone_release_schedule_link">\n+                <a href="https://plone.org/download/release-schedule"\n+                    i18n:translate="text_plone_release_schedule_link"\n+                >Plone release schedule</a>\n+            </tal:link>\n+            for more information.\n+        </span>\n+    </div>\n+\n+\n     <div class="portalMessage warning"\n          role="status"\n          tal:condition="view/upgrade_warning">\ndiff --git a/Products/CMFPlone/controlpanel/browser/overview.py b/Products/CMFPlone/controlpanel/browser/overview.py\nindex b10a0edcbd..d91d817896 100644\n--- a/Products/CMFPlone/controlpanel/browser/overview.py\n+++ b/Products/CMFPlone/controlpanel/browser/overview.py\n@@ -2,6 +2,7 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from App.config import getConfiguration\n+from datetime import date\n from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n@@ -13,6 +14,7 @@\n from ZPublisher.HTTPRequest import WSGIRequest\n \n import pkg_resources\n+import sys\n \n try:\n     import plone.app.event\n@@ -22,6 +24,21 @@\n     HAS_PAE = False\n \n \n+# When is a Python 3 minor version out of support?\n+# See https://devguide.python.org/versions/#versions\n+_PYTHON_MINOR_OUT_OF_SUPPORT = {\n+    6: date(2021, 12, 23),\n+    7: date(2023, 6, 27),\n+    # Currently, for 3.8 this only shows October 2024, without specific date,\n+    # so take the last day of the month.\n+    8: date(2024, 10, 31),\n+}\n+# These dates are specific to the current Plone minor version.\n+# See https://plone.org/download/release-schedule\n+_PLONE_OUT_OF_MAINTENANCE_SUPPORT = date(2023, 10, 31)\n+_PLONE_OUT_OF_SECURITY_SUPPORT = date(2024, 10, 31)\n+\n+\n class OverviewControlPanel(controlpanel.RegistryEditForm):\n \n     template = ViewPageTemplateFile(\'overview.pt\')\n@@ -130,6 +147,36 @@ def timezone_warning(self):\n             return False\n         return True  # No portal_timezone found.\n \n+    def python2_warning(self):\n+        return sys.version_info.major == 2\n+\n+    def python_warning(self):\n+        # Only for Python 3: for Python 2 we have python2_warning.\n+        if sys.version_info.major == 2:\n+            return False\n+        minor_version = sys.version_info.minor\n+        deadline = _PYTHON_MINOR_OUT_OF_SUPPORT.get(minor_version)\n+        if not deadline:\n+            # not supported at all\n+            return True\n+        # Warn when today is after the deadline for this minor version.\n+        return date.today() > deadline\n+\n+    def plone_maintenance_warning(self):\n+        return date.today() > _PLONE_OUT_OF_MAINTENANCE_SUPPORT\n+\n+    def plone_security_warning(self):\n+        return date.today() > _PLONE_OUT_OF_SECURITY_SUPPORT\n+\n+    def version_warning(self):\n+        # Is there *any* version warning?\n+        return (\n+            self.python2_warning()\n+            or self.python_warning()\n+            or self.plone_maintenance_warning()\n+            or self.plone_security_warning()\n+        )\n+\n     def categories(self):\n         return self.cptool().getGroups()\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\nindex 2a10f997b0..ad1f1df263 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n@@ -1,9 +1,11 @@\n # -*- coding: utf-8 -*-\n+from datetime import date\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n+\n import mock\n import unittest\n \n@@ -24,6 +26,29 @@ def mock_getUtility4(iface):\n     return {\'plone.app.event.portal_timezone\': \'Europe/Amsterdam\'}\n \n \n+class MockVersionInfo(object):\n+    def __init__(self, major, minor, micro=0):\n+        self.major = major\n+        self.minor = minor\n+        self.micro = micro\n+\n+\n+mock_python2 = MockVersionInfo(2, 7)\n+mock_python36 = MockVersionInfo(3, 6)\n+mock_python37 = MockVersionInfo(3, 7)\n+mock_python38 = MockVersionInfo(3, 8)\n+mock_python39 = MockVersionInfo(3, 9)\n+\n+\n+class MockDate(object):\n+\n+    def __init__(self, today):\n+        self._today = today\n+\n+    def today(self):\n+        return self._today\n+\n+\n class TestControlPanel(unittest.TestCase):\n \n     layer = PLONE_INTEGRATION_TESTING\n@@ -33,6 +58,139 @@ def setUp(self):\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python2)\n+    def test_python2_warning(self):\n+        # Test the warnings that get shows when using Python 2.7.\n+        # Python 2 should only be used temporarily, so we always warn.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertTrue(view.python2_warning())\n+        self.assertFalse(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using Python 2.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python36)\n+    def test_python36_warning(self):\n+        # Test the warnings that get shows when using Python 3.6.\n+        # Python 3.6 is already end-of-life at the time of writing this test,\n+        # so we always warn.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    # We want to mock datetime.date.today, but that gives a TypeError:\n+    # can\'t set attributes of built-in/extension type \'datetime.date\'\n+    # So use a class as wrapper, and patch the date used in the module.\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python37)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2023, 6, 1)))\n+    def test_python37_warning_early(self):\n+        # Test the warnings that get shows when using Python 3.7.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertFalse(view.python_warning())\n+        self.assertFalse(view.version_warning())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python37)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2023, 7, 1)))\n+    def test_python37_warning_late(self):\n+        # Test the warnings that get shows when using Python 3.7.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 10, 1)))\n+    def test_python38_warning_early(self):\n+        # Test the warnings that get shows when using Python 3.8.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertFalse(view.python_warning())\n+        # We *do* already get a warning for a different reason:\n+        # Plone 5.2 is out of maintenance support.\n+        self.assertTrue(view.version_warning())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 11, 1)))\n+    def test_python38_warning_late(self):\n+        # Test the warnings that get shows when using Python 3.8.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python39)\n+    def test_python39_warning(self):\n+        # Test the warnings that get shows when using Python 3.9.\n+        # 3.9 is too new, so we always warn.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2023, 10, 1)))\n+    def test_plone_warnings_early(self):\n+        # Test the warnings that get shows for the Plone version itself.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.plone_maintenance_warning())\n+        self.assertFalse(view.plone_security_warning())\n+        self.assertFalse(view.version_warning())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 10, 1)))\n+    def test_plone_warnings_middle(self):\n+        # Test the warnings that get shows for the Plone version itself.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertTrue(view.plone_maintenance_warning())\n+        self.assertFalse(view.plone_security_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn(\n+            "You are using a Plone version that is out of maintenance support.",\n+            view(),\n+        )\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 11, 1)))\n+    def test_plone_warnings_late(self):\n+        # Test the warnings that get shows for the Plone version itself.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertTrue(view.plone_maintenance_warning())\n+        self.assertTrue(view.plone_security_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn(\n+            "You are using a Plone version that is out of security support.",\n+            view(),\n+        )\n+\n     @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n                 new=mock_getUtility1)\n     def test_timezone_warning__noreg(self):\ndiff --git a/news/23.bugfix b/news/23.bugfix\nnew file mode 100644\nindex 0000000000..ac488d4587\n--- /dev/null\n+++ b/news/23.bugfix\n@@ -0,0 +1,4 @@\n+Show warning in Site Setup when using an unsupported Plone or Python version.\n+This is based on dates in the `Plone release schedule <https://plone.org/download/release-schedule>`_\n+and the `Status of Python versions <https://devguide.python.org/versions/>`_.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-03-30T12:19:33+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/00cb367ee450caec12ed08db082042bc1b99d2c2

Merge pull request #3752 from plone/maurits-python-warnings-52

Show warning in Site Setup when using unsupported Plone/Python version [5.2]

Files changed:
A news/23.bugfix
M Products/CMFPlone/controlpanel/browser/overview.pt
M Products/CMFPlone/controlpanel/browser/overview.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/overview.pt b/Products/CMFPlone/controlpanel/browser/overview.pt\nindex f22683fc28..1fdc289d48 100644\n--- a/Products/CMFPlone/controlpanel/browser/overview.pt\n+++ b/Products/CMFPlone/controlpanel/browser/overview.pt\n@@ -21,6 +21,69 @@\n         Configuration area for Plone and add-on Products.\n     </p>\n \n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/python2_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_python2_warning">\n+            You are using Python 2.\n+            This should only be used temporarily while preparing to migrate to Python 3.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/python_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_python_warning">\n+            You are using a Python version that is not supported.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/plone_maintenance_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_plone_maintenance_warning">\n+            You are using a Plone version that is out of maintenance support.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/plone_security_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_plone_security_warning">\n+            You are using a Plone version that is out of security support.\n+        </span>\n+    </div>\n+\n+    <div class="portalMessage warning"\n+         role="status"\n+         tal:condition="view/version_warning">\n+        <strong i18n:translate="">\n+            Warning\n+        </strong>\n+        <span tal:omit-tag="" i18n:translate="text_plone_release_schedule">\n+            Go to the\n+            <tal:link i18n:name="plone_release_schedule_link">\n+                <a href="https://plone.org/download/release-schedule"\n+                    i18n:translate="text_plone_release_schedule_link"\n+                >Plone release schedule</a>\n+            </tal:link>\n+            for more information.\n+        </span>\n+    </div>\n+\n+\n     <div class="portalMessage warning"\n          role="status"\n          tal:condition="view/upgrade_warning">\ndiff --git a/Products/CMFPlone/controlpanel/browser/overview.py b/Products/CMFPlone/controlpanel/browser/overview.py\nindex b10a0edcbd..d91d817896 100644\n--- a/Products/CMFPlone/controlpanel/browser/overview.py\n+++ b/Products/CMFPlone/controlpanel/browser/overview.py\n@@ -2,6 +2,7 @@\n from AccessControl import getSecurityManager\n from Acquisition import aq_inner\n from App.config import getConfiguration\n+from datetime import date\n from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFCore.permissions import ManagePortal\n from Products.CMFCore.utils import getToolByName\n@@ -13,6 +14,7 @@\n from ZPublisher.HTTPRequest import WSGIRequest\n \n import pkg_resources\n+import sys\n \n try:\n     import plone.app.event\n@@ -22,6 +24,21 @@\n     HAS_PAE = False\n \n \n+# When is a Python 3 minor version out of support?\n+# See https://devguide.python.org/versions/#versions\n+_PYTHON_MINOR_OUT_OF_SUPPORT = {\n+    6: date(2021, 12, 23),\n+    7: date(2023, 6, 27),\n+    # Currently, for 3.8 this only shows October 2024, without specific date,\n+    # so take the last day of the month.\n+    8: date(2024, 10, 31),\n+}\n+# These dates are specific to the current Plone minor version.\n+# See https://plone.org/download/release-schedule\n+_PLONE_OUT_OF_MAINTENANCE_SUPPORT = date(2023, 10, 31)\n+_PLONE_OUT_OF_SECURITY_SUPPORT = date(2024, 10, 31)\n+\n+\n class OverviewControlPanel(controlpanel.RegistryEditForm):\n \n     template = ViewPageTemplateFile(\'overview.pt\')\n@@ -130,6 +147,36 @@ def timezone_warning(self):\n             return False\n         return True  # No portal_timezone found.\n \n+    def python2_warning(self):\n+        return sys.version_info.major == 2\n+\n+    def python_warning(self):\n+        # Only for Python 3: for Python 2 we have python2_warning.\n+        if sys.version_info.major == 2:\n+            return False\n+        minor_version = sys.version_info.minor\n+        deadline = _PYTHON_MINOR_OUT_OF_SUPPORT.get(minor_version)\n+        if not deadline:\n+            # not supported at all\n+            return True\n+        # Warn when today is after the deadline for this minor version.\n+        return date.today() > deadline\n+\n+    def plone_maintenance_warning(self):\n+        return date.today() > _PLONE_OUT_OF_MAINTENANCE_SUPPORT\n+\n+    def plone_security_warning(self):\n+        return date.today() > _PLONE_OUT_OF_SECURITY_SUPPORT\n+\n+    def version_warning(self):\n+        # Is there *any* version warning?\n+        return (\n+            self.python2_warning()\n+            or self.python_warning()\n+            or self.plone_maintenance_warning()\n+            or self.plone_security_warning()\n+        )\n+\n     def categories(self):\n         return self.cptool().getGroups()\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\nindex 2a10f997b0..ad1f1df263 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_overview.py\n@@ -1,9 +1,11 @@\n # -*- coding: utf-8 -*-\n+from datetime import date\n from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.app.testing import TEST_USER_ID\n from plone.app.testing import setRoles\n from plone.registry.interfaces import IRegistry\n from zope.component import getUtility\n+\n import mock\n import unittest\n \n@@ -24,6 +26,29 @@ def mock_getUtility4(iface):\n     return {\'plone.app.event.portal_timezone\': \'Europe/Amsterdam\'}\n \n \n+class MockVersionInfo(object):\n+    def __init__(self, major, minor, micro=0):\n+        self.major = major\n+        self.minor = minor\n+        self.micro = micro\n+\n+\n+mock_python2 = MockVersionInfo(2, 7)\n+mock_python36 = MockVersionInfo(3, 6)\n+mock_python37 = MockVersionInfo(3, 7)\n+mock_python38 = MockVersionInfo(3, 8)\n+mock_python39 = MockVersionInfo(3, 9)\n+\n+\n+class MockDate(object):\n+\n+    def __init__(self, today):\n+        self._today = today\n+\n+    def today(self):\n+        return self._today\n+\n+\n class TestControlPanel(unittest.TestCase):\n \n     layer = PLONE_INTEGRATION_TESTING\n@@ -33,6 +58,139 @@ def setUp(self):\n         self.request = self.layer[\'request\']\n         setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n \n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python2)\n+    def test_python2_warning(self):\n+        # Test the warnings that get shows when using Python 2.7.\n+        # Python 2 should only be used temporarily, so we always warn.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertTrue(view.python2_warning())\n+        self.assertFalse(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using Python 2.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python36)\n+    def test_python36_warning(self):\n+        # Test the warnings that get shows when using Python 3.6.\n+        # Python 3.6 is already end-of-life at the time of writing this test,\n+        # so we always warn.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    # We want to mock datetime.date.today, but that gives a TypeError:\n+    # can\'t set attributes of built-in/extension type \'datetime.date\'\n+    # So use a class as wrapper, and patch the date used in the module.\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python37)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2023, 6, 1)))\n+    def test_python37_warning_early(self):\n+        # Test the warnings that get shows when using Python 3.7.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertFalse(view.python_warning())\n+        self.assertFalse(view.version_warning())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python37)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2023, 7, 1)))\n+    def test_python37_warning_late(self):\n+        # Test the warnings that get shows when using Python 3.7.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 10, 1)))\n+    def test_python38_warning_early(self):\n+        # Test the warnings that get shows when using Python 3.8.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertFalse(view.python_warning())\n+        # We *do* already get a warning for a different reason:\n+        # Plone 5.2 is out of maintenance support.\n+        self.assertTrue(view.version_warning())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 11, 1)))\n+    def test_python38_warning_late(self):\n+        # Test the warnings that get shows when using Python 3.8.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python39)\n+    def test_python39_warning(self):\n+        # Test the warnings that get shows when using Python 3.9.\n+        # 3.9 is too new, so we always warn.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.python2_warning())\n+        self.assertTrue(view.python_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn("You are using a Python version that is not supported.", view())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2023, 10, 1)))\n+    def test_plone_warnings_early(self):\n+        # Test the warnings that get shows for the Plone version itself.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertFalse(view.plone_maintenance_warning())\n+        self.assertFalse(view.plone_security_warning())\n+        self.assertFalse(view.version_warning())\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 10, 1)))\n+    def test_plone_warnings_middle(self):\n+        # Test the warnings that get shows for the Plone version itself.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertTrue(view.plone_maintenance_warning())\n+        self.assertFalse(view.plone_security_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn(\n+            "You are using a Plone version that is out of maintenance support.",\n+            view(),\n+        )\n+\n+    @mock.patch(\'sys.version_info\',\n+                new=mock_python38)\n+    @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.date\',\n+                new=MockDate(date(2024, 11, 1)))\n+    def test_plone_warnings_late(self):\n+        # Test the warnings that get shows for the Plone version itself.\n+        # This depends on the date.\n+        view = self.portal.restrictedTraverse(\'@@overview-controlpanel\')\n+        self.assertTrue(view.plone_maintenance_warning())\n+        self.assertTrue(view.plone_security_warning())\n+        self.assertTrue(view.version_warning())\n+        self.assertIn(\n+            "You are using a Plone version that is out of security support.",\n+            view(),\n+        )\n+\n     @mock.patch(\'Products.CMFPlone.controlpanel.browser.overview.getUtility\',\n                 new=mock_getUtility1)\n     def test_timezone_warning__noreg(self):\ndiff --git a/news/23.bugfix b/news/23.bugfix\nnew file mode 100644\nindex 0000000000..ac488d4587\n--- /dev/null\n+++ b/news/23.bugfix\n@@ -0,0 +1,4 @@\n+Show warning in Site Setup when using an unsupported Plone or Python version.\n+This is based on dates in the `Plone release schedule <https://plone.org/download/release-schedule>`_\n+and the `Status of Python versions <https://devguide.python.org/versions/>`_.\n+[maurits]\n'

