Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-08-24T15:14:47+02:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/plone.restapi/commit/bd4ee2708f6a36981897591162dc979493bdabbe

Documentation fixes for #1599 (#1692)

* Documentation fixes for #1599

* Add changelog entry

---------

Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;

Files changed:
A news/1692.documentation
M docs/source/endpoints/users.md

b'diff --git a/docs/source/endpoints/users.md b/docs/source/endpoints/users.md\nindex 7a63ea90e..ced6498df 100644\n--- a/docs/source/endpoints/users.md\n+++ b/docs/source/endpoints/users.md\n@@ -12,6 +12,7 @@ myst:\n Available users in a Plone site can be created, queried, updated, and deleted by interacting with the `/@users` endpoint on portal root.\n This action requires an authenticated user:\n \n+\n ## List Users\n \n To retrieve a list of all current users in the portal, call the `/@users` endpoint with a `GET` request:\n@@ -55,6 +56,7 @@ The server will return a {term}`401 Unauthorized` status code.\n :language: http\n ```\n \n+\n ### Filtering the list of users\n \n The endpoint supports some basic filtering.\n@@ -88,6 +90,7 @@ The server will respond with a list of users where the users are member of one o\n The endpoint also takes a `limit` parameter.\n Its default is a maximum of 25 users at a time for performance reasons.\n \n+\n ### Search users\n \n Search by `id`, `fullname` and `email`:\n@@ -103,6 +106,7 @@ The server will respond with a list of users where the `fullname`, `email` or `i\n :language: http\n ```\n \n+\n ## Create User\n \n To create a new user, send a `POST` request to the global `/@users` endpoint with a JSON representation of the user you want to create in the body:\n@@ -129,6 +133,7 @@ The `Location` header contains the URL of the newly created user, and the resour\n \n If no roles have been specified, then a `Member` role is added as a sensible default.\n \n+\n ## Read User\n \n To retrieve all details for a particular user, send a `GET` request to the `/@users` endpoint and append the user ID to the URL:\n@@ -185,6 +190,7 @@ In this case, the server will respond with a {term}`200 OK` status code and the\n :language: http\n ```\n \n+\n ## Update User\n \n To update the settings of a user, send a `PATCH` request with the user details you want to amend to the URL of that particular user.\n@@ -229,6 +235,7 @@ If you still want Plone to take care of image scaling using the default Plone be\n     :request: ../../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n ```\n \n+\n ## Delete User\n \n To delete a user, send a `DELETE` request to the `/@users` endpoint and append the user ID of the user you want to delete.\n@@ -245,13 +252,14 @@ A successful response will be indicated by a {term}`204 No Content` response:\n :language: http\n ```\n \n-When deleting a user in large sites with a lot of users and content the deleting operation may take a lot of time to the extent of setting it in an unresponsive state.\n+When deleting a user in large sites with a lot of users and content, the `delete` operation may take a lot of time to the extent that the site enters an unresponsive state.\n \n-There is a workaround about this which is to request Plone not to delete the Member areas or the local roles that may have been granted in the past.\n+There is a workaround for this.\n+You may request Plone not to delete the member areas or the local roles that may have been granted in the past.\n \n-To mark such a behavior we need to pass specific parameters to the delete endpoint.\n+To mark such a behavior, we need to pass specific parameters to the `delete` endpoint.\n \n-In this case we request not to delete the local roles:\n+In this case, we request not to delete the local roles:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n@@ -282,11 +290,12 @@ Both parameters can be added in the same request.\n ```{warning}\n These two specific requests should be made with special care because they may leave traces of the deleted users in the Plone database.\n \n-Specifically, although the user is deleted the reference of its permissions stay on the database.\n+Specifically, although the user is deleted, the reference of its permissions stay in the database.\n \n-This means that if in the future you add a new user with the same userid, it may get the local roles and member area previously created for the old user.\n+This means that if in the future you add a new user with the same `userid`, it may get the local roles and member area previously created for the old user.\n ```\n \n+\n ## User registration\n \n Plone allows you to enable user self registration.\n@@ -309,6 +318,7 @@ If the user has been created, the server will respond with a {term}`201 Created`\n :language: http\n ```\n \n+\n ## Reset User Password\n \n Plone allows to reset a password for a user by sending a `POST` request to the user resource and appending `/reset-password` to the URL:\n@@ -328,6 +338,7 @@ The token that is part of the reset URL in the email can be used to authorize se\n     :request: ../../../src/plone/restapi/tests/http-examples/users_reset.req\n ```\n \n+\n ### Reset Own Password\n \n Plone also allows a user to reset her own password directly without sending an email.\n@@ -351,6 +362,7 @@ To set the password with the old password, you need either the `Set own password\n \n If an API consumer tries to send a password in the payload that is not the same as the currently logged in user, the server will respond with a {term}`400 Bad Request` response.\n \n+\n ### Return Values\n \n - {term}`200 OK`\ndiff --git a/news/1692.documentation b/news/1692.documentation\nnew file mode 100644\nindex 000000000..0575be149\n--- /dev/null\n+++ b/news/1692.documentation\n@@ -0,0 +1 @@\n+Documentation fixes for #1599. @stevepiercy\n'

