Repository: plone.session


Branch: refs/heads/master
Date: 2020-06-17T16:06:24+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.session/commit/a6f2e26abac22c84a18eb82b861ebe8e7a5d2886

Only setup a session when the current user is the requested user.

Fixes https://github.com/plone/Products.PlonePAS/issues/57

Files changed:
A news/57.bugfix
M plone/session/plugins/session.py
M plone/session/tests/testPAS.py

b'diff --git a/news/57.bugfix b/news/57.bugfix\nnew file mode 100644\nindex 0000000..27e40df\n--- /dev/null\n+++ b/news/57.bugfix\n@@ -0,0 +1,2 @@\n+Only setup a session when the current user is the requested user.\n+[maurits]\ndiff --git a/plone/session/plugins/session.py b/plone/session/plugins/session.py\nindex 7e7200d..963d6a5 100644\n--- a/plone/session/plugins/session.py\n+++ b/plone/session/plugins/session.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl.requestmethod import postonly\n from AccessControl.SecurityInfo import ClassSecurityInfo\n+from AccessControl.SecurityManagement import getSecurityManager\n from App.config import getConfiguration\n from email.utils import formatdate\n from plone.keyring.interfaces import IKeyManager\n@@ -240,9 +241,21 @@ def _validateTicket(self, ticket, now=None):\n     def updateCredentials(self, request, response, login, new_password):\n         pas = self._getPAS()\n         info = pas._verifyUser(pas.plugins, login=login)\n-        if info is not None:\n-            # Only setup a session for users in our own user folder.\n-            self._setupSession(info["id"], response)\n+        if info is None:\n+            # User is not in our own user folder, so we do not setup a session.\n+            return\n+        user_id = info["id"]\n+        # Only setup a session when the current user is the requested user.\n+        # Otherwise you are logged in as Manager Jane, reset the password of Joe,\n+        # and are afterwards logged in as Joe.\n+        # See https://github.com/plone/Products.PlonePAS/issues/57\n+        authenticated_user = getSecurityManager().getUser()\n+        if authenticated_user is not None:\n+            authenticated_id = authenticated_user.getId()\n+            # For anonymous, the id is empty\n+            if authenticated_id and authenticated_id != user_id:\n+                return\n+        self._setupSession(user_id, response)\n \n     # ICredentialsResetPlugin implementation\n     def resetCredentials(self, request, response):\ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 2ec774a..ce94e17 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n+from plone.app.testing import logout\n from zope.publisher.browser import TestRequest\n from plone.session.interfaces import ISessionPlugin\n from plone.session.testing import PLONE_SEESION_FUNCTIONAL_TESTING\n@@ -92,24 +93,46 @@ def testExtraction(self):\n         creds = session.extractCredentials(request)\n         self.assertEqual(creds, {})\n \n-    def testCredentialsUpdate(self):\n+    def testCredentialsUpdateUnknownUser(self):\n+        # We are logged in as test user, which we do not want.\n+        logout()\n         session = self.folder.pas.session\n         request = self.makeRequest("test string")\n+        # The fake PAS in the tests only knows about "our_user",\n+        # so updating an unknown user does nothing.\n         session.updateCredentials(request, request.response, "bla", "password")\n-        self.assertEqual(request.response.getCookie(session.cookie_name), None)\n+        self.assertIsNone(request.response.getCookie(session.cookie_name))\n \n+    def testCredentialsUpdateAnonymous(self):\n+        # We are logged in as test user, which we do not want.\n+        logout()\n+        session = self.folder.pas.session\n+        request = self.makeRequest("test string")\n         session.updateCredentials(\n             request,\n             request.response,\n             "our_user",\n             "password"\n         )\n-        self.assertNotEqual(\n+        self.assertIsNotNone(\n             request.response.getCookie(session.cookie_name),\n-            None\n         )\n \n+    def testCredentialsUpdateOtherUser(self):\n+        # We are logged in as test user, which we DO want in this test.\n+        # The session should not be updated then.\n+        session = self.folder.pas.session\n+        request = self.makeRequest("test string")\n+        session.updateCredentials(\n+            request,\n+            request.response,\n+            "our_user",\n+            "password"\n+        )\n+        self.assertIsNone(request.response.getCookie(session.cookie_name))\n+\n     def testRefresh(self):\n+        logout()\n         session = self.folder.pas.session\n         request = self.makeRequest("test string")\n         session.updateCredentials(\n@@ -122,10 +145,7 @@ def testRefresh(self):\n         request2 = self.makeRequest(cookie)\n         request2.form[\'type\'] = \'gif\'\n         session.refresh(request2)\n-        self.assertNotEqual(\n-            request2.response.getCookie(session.cookie_name),\n-            None\n-        )\n+        self.assertIsNotNone(request2.response.getCookie(session.cookie_name))\n \n     def testUnicodeUserid(self):\n         unicode_userid = six.text_type(self.userid)\n'

Repository: plone.session


Branch: refs/heads/master
Date: 2020-06-19T13:11:35+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.session/commit/4ead2e65ac1b9bea029791977544777cfe109abb

Merge pull request #21 from plone/maurits/issue-57-user-switch

Only setup a session when the current user is the requested user.

Files changed:
A news/57.bugfix
M plone/session/plugins/session.py
M plone/session/tests/testPAS.py

b'diff --git a/news/57.bugfix b/news/57.bugfix\nnew file mode 100644\nindex 0000000..27e40df\n--- /dev/null\n+++ b/news/57.bugfix\n@@ -0,0 +1,2 @@\n+Only setup a session when the current user is the requested user.\n+[maurits]\ndiff --git a/plone/session/plugins/session.py b/plone/session/plugins/session.py\nindex 7e7200d..963d6a5 100644\n--- a/plone/session/plugins/session.py\n+++ b/plone/session/plugins/session.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n from AccessControl.requestmethod import postonly\n from AccessControl.SecurityInfo import ClassSecurityInfo\n+from AccessControl.SecurityManagement import getSecurityManager\n from App.config import getConfiguration\n from email.utils import formatdate\n from plone.keyring.interfaces import IKeyManager\n@@ -240,9 +241,21 @@ def _validateTicket(self, ticket, now=None):\n     def updateCredentials(self, request, response, login, new_password):\n         pas = self._getPAS()\n         info = pas._verifyUser(pas.plugins, login=login)\n-        if info is not None:\n-            # Only setup a session for users in our own user folder.\n-            self._setupSession(info["id"], response)\n+        if info is None:\n+            # User is not in our own user folder, so we do not setup a session.\n+            return\n+        user_id = info["id"]\n+        # Only setup a session when the current user is the requested user.\n+        # Otherwise you are logged in as Manager Jane, reset the password of Joe,\n+        # and are afterwards logged in as Joe.\n+        # See https://github.com/plone/Products.PlonePAS/issues/57\n+        authenticated_user = getSecurityManager().getUser()\n+        if authenticated_user is not None:\n+            authenticated_id = authenticated_user.getId()\n+            # For anonymous, the id is empty\n+            if authenticated_id and authenticated_id != user_id:\n+                return\n+        self._setupSession(user_id, response)\n \n     # ICredentialsResetPlugin implementation\n     def resetCredentials(self, request, response):\ndiff --git a/plone/session/tests/testPAS.py b/plone/session/tests/testPAS.py\nindex 2ec774a..ce94e17 100644\n--- a/plone/session/tests/testPAS.py\n+++ b/plone/session/tests/testPAS.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n+from plone.app.testing import logout\n from zope.publisher.browser import TestRequest\n from plone.session.interfaces import ISessionPlugin\n from plone.session.testing import PLONE_SEESION_FUNCTIONAL_TESTING\n@@ -92,24 +93,46 @@ def testExtraction(self):\n         creds = session.extractCredentials(request)\n         self.assertEqual(creds, {})\n \n-    def testCredentialsUpdate(self):\n+    def testCredentialsUpdateUnknownUser(self):\n+        # We are logged in as test user, which we do not want.\n+        logout()\n         session = self.folder.pas.session\n         request = self.makeRequest("test string")\n+        # The fake PAS in the tests only knows about "our_user",\n+        # so updating an unknown user does nothing.\n         session.updateCredentials(request, request.response, "bla", "password")\n-        self.assertEqual(request.response.getCookie(session.cookie_name), None)\n+        self.assertIsNone(request.response.getCookie(session.cookie_name))\n \n+    def testCredentialsUpdateAnonymous(self):\n+        # We are logged in as test user, which we do not want.\n+        logout()\n+        session = self.folder.pas.session\n+        request = self.makeRequest("test string")\n         session.updateCredentials(\n             request,\n             request.response,\n             "our_user",\n             "password"\n         )\n-        self.assertNotEqual(\n+        self.assertIsNotNone(\n             request.response.getCookie(session.cookie_name),\n-            None\n         )\n \n+    def testCredentialsUpdateOtherUser(self):\n+        # We are logged in as test user, which we DO want in this test.\n+        # The session should not be updated then.\n+        session = self.folder.pas.session\n+        request = self.makeRequest("test string")\n+        session.updateCredentials(\n+            request,\n+            request.response,\n+            "our_user",\n+            "password"\n+        )\n+        self.assertIsNone(request.response.getCookie(session.cookie_name))\n+\n     def testRefresh(self):\n+        logout()\n         session = self.folder.pas.session\n         request = self.makeRequest("test string")\n         session.updateCredentials(\n@@ -122,10 +145,7 @@ def testRefresh(self):\n         request2 = self.makeRequest(cookie)\n         request2.form[\'type\'] = \'gif\'\n         session.refresh(request2)\n-        self.assertNotEqual(\n-            request2.response.getCookie(session.cookie_name),\n-            None\n-        )\n+        self.assertIsNotNone(request2.response.getCookie(session.cookie_name))\n \n     def testUnicodeUserid(self):\n         unicode_userid = six.text_type(self.userid)\n'

