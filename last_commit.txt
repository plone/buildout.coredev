Repository: plone.scale


Branch: refs/heads/master
Date: 2024-03-06T12:39:28-03:00
Author: wesleybl (wesleybl) <wesleybl@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/a352815dcf2130dd11957234f496e30f44b424d6

Forces the scale uid to be the same, regardless of the scale parameter
being passed

For this to happen, we remove the scale parameter from the hash
generation. This makes the scales in the catalog the same as those in
the object views.

Files changed:
A news/92.bugfix
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/92.bugfix b/news/92.bugfix\nnew file mode 100644\nindex 0000000..a365e25\n--- /dev/null\n+++ b/news/92.bugfix\n@@ -0,0 +1 @@\n+Forces the scale uid to be the same, regardless of the scale parameter being passed. @wesleybl\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 3e4ac1d..9799613 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -201,11 +201,13 @@ def get_info_by_hash(self, hash):\n     def hash_key(self, **parameters):\n         if "modified" in parameters:\n             del parameters["modified"]\n-        key = self.hash(modified=self.modified_time, **parameters)\n         fieldname = parameters.get("fieldname", "image")\n         dimension = parameters.get("width", parameters.get("scale"))\n         if dimension is None:\n             dimension = 0\n+        if "scale" in parameters:\n+            del parameters["scale"]\n+        key = self.hash(modified=self.modified_time, **parameters)\n         hash_key = hashlib.md5(str(key).encode("utf-8")).hexdigest()\n         # We return a uid that is recognizable when you inspect a url in html or\n         # on the network tab: you immediately see for which field this is and what\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 79c928d..a340380 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -199,6 +199,24 @@ def testScaleForSimilarScales(self):\n         scale2 = storage.scale(bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n+    def test_pre_scale_with_and_without_scale_same_uid(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        uid1 = storage.pre_scale(fieldname="image", height=32, width=32)["uid"]\n+        uid2 = storage.pre_scale(fieldname="image", height=32, width=32, scale="icon")[\n+            "uid"\n+        ]\n+        self.assertEqual(uid1, uid2)\n+\n+    def test_scale_with_and_without_scale_same_uid(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        uid1 = storage.scale(fieldname="image", height=32, width=32)["uid"]\n+        uid2 = storage.scale(fieldname="image", height=32, width=32, scale="icon")[\n+            "uid"\n+        ]\n+        self.assertEqual(uid1, uid2)\n+\n     def testGetItem(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2024-03-20T17:23:53-03:00
Author: wesleybl (wesleybl) <wesleybl@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/414a896a739cc16a90554f8a7a474d99bc253455

Only remove scale from the hash key if we had width and height

Files changed:
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 9799613..92ceb8b 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -205,7 +205,11 @@ def hash_key(self, **parameters):\n         dimension = parameters.get("width", parameters.get("scale"))\n         if dimension is None:\n             dimension = 0\n-        if "scale" in parameters:\n+        if (\n+            "scale" in parameters\n+            and parameters.get("width")\n+            and parameters.get("height")\n+        ):\n             del parameters["scale"]\n         key = self.hash(modified=self.modified_time, **parameters)\n         hash_key = hashlib.md5(str(key).encode("utf-8")).hexdigest()\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex a340380..906a362 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -217,6 +217,14 @@ def test_scale_with_and_without_scale_same_uid(self):\n         ]\n         self.assertEqual(uid1, uid2)\n \n+    def test_scale_without_height_width(self):\n+        # Ensures that the scale will only be removed from the hash key\n+        # if we have width and height.\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        uid = storage.scale(fieldname="image", scale="icon")["uid"]\n+        self.assertEqual(uid, "image-icon-b6e2a135d96703b73688a0d91f741a65")\n+\n     def testGetItem(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2024-03-20T20:10:53-03:00
Author: Wesley Barroso Lopes (wesleybl) <wesleybl@gmail.com>
Commit: https://github.com/plone/plone.scale/commit/627e60057c3f3a176de6c791ae962a38dd8e1b52

Update change note

Co-authored-by: Maurits van Rees &lt;maurits@vanrees.org&gt;

Files changed:
M news/92.bugfix

b'diff --git a/news/92.bugfix b/news/92.bugfix\nindex a365e25..6be1558 100644\n--- a/news/92.bugfix\n+++ b/news/92.bugfix\n@@ -1 +1 @@\n-Forces the scale uid to be the same, regardless of the scale parameter being passed. @wesleybl\n+If width and height are given, ignore the scale parameter when determining the unique id of a scale. @wesleybl\n'

Repository: plone.scale


Branch: refs/heads/master
Date: 2024-03-21T10:02:08+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.scale/commit/779b8e7786671392ef5c72f29c47bb462696cb28

Merge pull request #92 from plone/hash_key

Forces the scale uid to be the same, regardless of the scale parameter being passed

Files changed:
A news/92.bugfix
M plone/scale/storage.py
M plone/scale/tests/test_storage.py

b'diff --git a/news/92.bugfix b/news/92.bugfix\nnew file mode 100644\nindex 0000000..6be1558\n--- /dev/null\n+++ b/news/92.bugfix\n@@ -0,0 +1 @@\n+If width and height are given, ignore the scale parameter when determining the unique id of a scale. @wesleybl\ndiff --git a/plone/scale/storage.py b/plone/scale/storage.py\nindex 3e4ac1d..92ceb8b 100644\n--- a/plone/scale/storage.py\n+++ b/plone/scale/storage.py\n@@ -201,11 +201,17 @@ def get_info_by_hash(self, hash):\n     def hash_key(self, **parameters):\n         if "modified" in parameters:\n             del parameters["modified"]\n-        key = self.hash(modified=self.modified_time, **parameters)\n         fieldname = parameters.get("fieldname", "image")\n         dimension = parameters.get("width", parameters.get("scale"))\n         if dimension is None:\n             dimension = 0\n+        if (\n+            "scale" in parameters\n+            and parameters.get("width")\n+            and parameters.get("height")\n+        ):\n+            del parameters["scale"]\n+        key = self.hash(modified=self.modified_time, **parameters)\n         hash_key = hashlib.md5(str(key).encode("utf-8")).hexdigest()\n         # We return a uid that is recognizable when you inspect a url in html or\n         # on the network tab: you immediately see for which field this is and what\ndiff --git a/plone/scale/tests/test_storage.py b/plone/scale/tests/test_storage.py\nindex 79c928d..906a362 100644\n--- a/plone/scale/tests/test_storage.py\n+++ b/plone/scale/tests/test_storage.py\n@@ -199,6 +199,32 @@ def testScaleForSimilarScales(self):\n         scale2 = storage.scale(bar=42, foo=23, hurz="!")\n         self.assertIsNot(scale1, scale2)\n \n+    def test_pre_scale_with_and_without_scale_same_uid(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        uid1 = storage.pre_scale(fieldname="image", height=32, width=32)["uid"]\n+        uid2 = storage.pre_scale(fieldname="image", height=32, width=32, scale="icon")[\n+            "uid"\n+        ]\n+        self.assertEqual(uid1, uid2)\n+\n+    def test_scale_with_and_without_scale_same_uid(self):\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        uid1 = storage.scale(fieldname="image", height=32, width=32)["uid"]\n+        uid2 = storage.scale(fieldname="image", height=32, width=32, scale="icon")[\n+            "uid"\n+        ]\n+        self.assertEqual(uid1, uid2)\n+\n+    def test_scale_without_height_width(self):\n+        # Ensures that the scale will only be removed from the hash key\n+        # if we have width and height.\n+        self._provide_dummy_scale_adapter()\n+        storage = self.storage\n+        uid = storage.scale(fieldname="image", scale="icon")["uid"]\n+        self.assertEqual(uid, "image-icon-b6e2a135d96703b73688a0d91f741a65")\n+\n     def testGetItem(self):\n         self._provide_dummy_scale_adapter()\n         storage = self.storage\n'

