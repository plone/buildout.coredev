Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2021-06-05T01:01:37+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/dc1f9ff8e57ffd95214ee508c939cc4a7280a099

Fix inline diff for rich text fields after PloneHotfix20210518.

The first version of the hotfix escaped all html.
Now for the rich text field, use the safe html transform, otherwise the inline diff is no longer inline.
This may be added in a new version of the hotfix as well.

Files changed:
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py
M news/39.bugfix

b'diff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex 7f03384..bb16253 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -3,7 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n \n \n class BinaryDiff(FieldDiff):\n@@ -51,8 +51,8 @@ def inline_diff(self):\n         if self.oldFilename != self.newFilename:\n             html.append(\n                 self.inlinediff_fmt % (css_class,\n-                                       self.filenameTitle(html_encode(self.oldFilename)),\n-                                       self.filenameTitle(html_encode(self.newFilename))),\n+                                       self.filenameTitle(html_escape(self.oldFilename)),\n+                                       self.filenameTitle(html_escape(self.newFilename))),\n             )\n \n         if html:\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex d70b9c1..86691ca 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -2,7 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_safe\n \n \n # Give it a dumb name so it doesn\'t conflict with all the other html diffs\n@@ -19,7 +19,7 @@ def inline_diff(self):\n                                        filename=self.oldFilename))\n         b = \'\\n\'.join(self._parseField(self.newValue,\n                                        filename=self.newFilename))\n-        return htmldiff.htmldiff(html_encode(a), html_encode(b))\n+        return htmldiff.htmldiff(html_safe(a), html_safe(b))\n \n     def _parseField(self, value, filename=None):\n         """Use the field\'s raw value if available."""\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 1665d21..0bc41e8 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -2,7 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n from six.moves import range\n \n import difflib\n@@ -81,18 +81,18 @@ def inline_diff(self):\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n-                    r.append(same_fmt % (css_class, html_encode(a[i])))\n+                    r.append(same_fmt % (css_class, html_escape(a[i])))\n             else:\n                 raise ValueError(\'unknown tag "%s"\' % tag)\n         return \'\\n\'.join(r)\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex a740667..a3c78de 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -4,7 +4,7 @@\n from Products.CMFDiffTool.choicediff import get_field_object\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n from six.moves import range\n \n \n@@ -89,34 +89,34 @@ def inline_diff(self):\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(same_fmt % (css_class, obj_url, obj_title))\n             else:\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 94ed037..72a8d62 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -3,7 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n from Products.CMFDiffTool.utils import safe_unicode\n from Products.CMFDiffTool.utils import safe_utf8\n from zope.component.hooks import getSite\n@@ -88,11 +88,11 @@ def inline_diff(self):\n         if old_fname != new_fname:\n             html.append(\n                 self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       html_encode(old_fname), html_encode(new_fname)),\n+                                       html_escape(old_fname), html_escape(new_fname)),\n             )\n         if a != b:\n             html.append(\n-                self.inlinediff_fmt % (css_class, html_encode(a), html_encode(b)),\n+                self.inlinediff_fmt % (css_class, html_escape(a), html_escape(b)),\n             )\n         if html:\n             return linesep.join(html)\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex e663275..eddba03 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -4,7 +4,7 @@\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.ListDiff import ListDiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n \n \n FILE_FIELD_TYPES = []\n@@ -71,7 +71,7 @@ def inline_diff(self):\n         old = self._parseField(self.oldValue, self.oldFilename)[0]\n         new = self._parseField(self.newValue, self.newFilename)[0]\n \n-        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_encode(old), html_encode(new))\n+        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_escape(old), html_escape(new))\n \n \n InitializeClass(NamedFileBinaryDiff)\n@@ -137,9 +137,9 @@ def is_same_dict(d1, d2):\n             )\n \n         return \'\\n\'.join([\n-            ((self.same_fmt % (css_class, html_encode(d_old[\'repr\'])))\n+            ((self.same_fmt % (css_class, html_escape(d_old[\'repr\'])))\n              if is_same_dict(d_old, d_new) else self.inlinediff_fmt\n-             % (css_class, html_encode(d_old[\'repr\']), html_encode(d_new[\'repr\']))\n+             % (css_class, html_escape(d_old[\'repr\']), html_escape(d_new[\'repr\']))\n              ) for (d_old, d_new) in zip(old_data, new_data)])\n \n \ndiff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py\nindex 9e989e2..682e420 100644\n--- a/Products/CMFDiffTool/tests/test_richtextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.app.textfield.value import RichTextValue\n from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -13,6 +14,7 @@ def __init__(self, body):\n \n class RichTextDiffTestCase(unittest.TestCase):\n     """Test RichTextDiff"""\n+    layer = PLONE_INTEGRATION_TESTING\n \n     def test_parseField_value_is_none(self):\n         value = None\n@@ -37,9 +39,9 @@ def test_inline_diff_same_hacker(self):\n         value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n         diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n         inline_diff = diff.inline_diff()\n-        # The script tag should be escaped.\n+        # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n-        self.assertIn("&gt;", inline_diff)\n+        self.assertNotIn("&gt;", inline_diff)\n \n     def test_inline_diff_different(self):\n         old_value = RichTextValue(u\'foo\')\n@@ -58,14 +60,14 @@ def test_inline_diff_different_hacker(self):\n         new_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n         diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n         inline_diff = diff.inline_diff()\n-        # The script tag should be escaped.\n+        # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n-        self.assertIn("&gt;", inline_diff)\n+        self.assertNotIn("&gt;", inline_diff)\n \n         old_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n         new_value = RichTextValue(u\'clean\')\n         diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n         inline_diff = diff.inline_diff()\n-        # The script tag should be escaped.\n+        # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n-        self.assertIn("&gt;", inline_diff)\n+        self.assertNotIn("&gt;", inline_diff)\ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 6c23084..1f1cf05 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from Products.PortalTransforms.data import datastream\n+from Products.PortalTransforms.transforms.safe_html import SafeHTML\n \n import six\n \n@@ -23,18 +25,41 @@ def safe_utf8(value):\n     return safe_unicode(value).encode(\'utf-8\')\n \n \n-# In both Python 2 and 3, the escape function cannot handle a non string-like value,\n-# for example an integer.  Seems good to always return a string-like value though.\n+def scrub_html(value):\n+    # Strip illegal HTML tags from string text.\n+    transform = SafeHTML()\n+    # Available in Plone 5.2:\n+    # return transform.scrub_html(value)\n+    data = datastream("text/x-html-safe")\n+    data = transform.convert(value, data)\n+    return data.getData()\n+\n+\n+# We will have two functions:\n+# - html_escape: escape html, for example turn \'<\' into \'&lt;\'\n+# - html_safe: return html with dangerous tags removed, using safe html transform.\n+#\n+# In both Python 2 and 3, the convert function that we use in safe_html\n+# cannot handle a non string-like value, for example an integer.\n+# Same is true for the escape function.\n+# Seems good to always return a string-like value though.\n # But should that be bytes or string or unicode?\n if six.PY2:\n     # We use this in places where the result gets inserted in a string/bytes,\n     # so we should use a string (utf-8) here.\n-    def html_encode(value):\n+    def html_escape(value):\n         value = safe_utf8(value)\n         return escape(value, 1)\n+\n+    def html_safe(value):\n+        value = safe_utf8(value)\n+        return scrub_html(value)\n else:\n-    # In Python 3 this gets inserted in a string/text,\n-    # and escape cannot handle a bytes value.\n-    def html_encode(value):\n+    # In Python 3 this gets inserted in a string/text.\n+    def html_escape(value):\n         value = safe_unicode(value)\n         return escape(value, 1)\n+\n+    def html_safe(value):\n+        value = safe_unicode(value)\n+        return scrub_html(value)\ndiff --git a/news/39.bugfix b/news/39.bugfix\nindex 35b07ac..f8cabd2 100644\n--- a/news/39.bugfix\n+++ b/news/39.bugfix\n@@ -1,3 +1,5 @@\n-Added XSS fix from PloneHotfix20210518.\n+Added XSS fix from PloneHotfix20210518 for inline diff.\n See `vulnerability <https://plone.org/security/hotfix/20210518/xss-vulnerability-in-cmfdifftool>`_.\n+The first version of the hotfix escaped all html.\n+Now for the rich text field, use the safe html transform, otherwise the inline diff is no longer inline.\n [maurits]\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2021-06-11T18:25:33+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/ea53210ae732d6e1be25b753dc2b9ee9fd320435

Merge pull request #41 from plone/maurits/use-safe-html-transform

Fix inline diff for rich text fields after PloneHotfix20210518.

Files changed:
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py
M news/39.bugfix

b'diff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex 7f03384..bb16253 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -3,7 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n \n \n class BinaryDiff(FieldDiff):\n@@ -51,8 +51,8 @@ def inline_diff(self):\n         if self.oldFilename != self.newFilename:\n             html.append(\n                 self.inlinediff_fmt % (css_class,\n-                                       self.filenameTitle(html_encode(self.oldFilename)),\n-                                       self.filenameTitle(html_encode(self.newFilename))),\n+                                       self.filenameTitle(html_escape(self.oldFilename)),\n+                                       self.filenameTitle(html_escape(self.newFilename))),\n             )\n \n         if html:\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex d70b9c1..86691ca 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -2,7 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_safe\n \n \n # Give it a dumb name so it doesn\'t conflict with all the other html diffs\n@@ -19,7 +19,7 @@ def inline_diff(self):\n                                        filename=self.oldFilename))\n         b = \'\\n\'.join(self._parseField(self.newValue,\n                                        filename=self.newFilename))\n-        return htmldiff.htmldiff(html_encode(a), html_encode(b))\n+        return htmldiff.htmldiff(html_safe(a), html_safe(b))\n \n     def _parseField(self, value, filename=None):\n         """Use the field\'s raw value if available."""\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 1665d21..0bc41e8 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -2,7 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n from six.moves import range\n \n import difflib\n@@ -81,18 +81,18 @@ def inline_diff(self):\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_escape(a[i]), \'\'))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_escape(b[i])))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n-                    r.append(same_fmt % (css_class, html_encode(a[i])))\n+                    r.append(same_fmt % (css_class, html_escape(a[i])))\n             else:\n                 raise ValueError(\'unknown tag "%s"\' % tag)\n         return \'\\n\'.join(r)\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex a740667..a3c78de 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -4,7 +4,7 @@\n from Products.CMFDiffTool.choicediff import get_field_object\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n from six.moves import range\n \n \n@@ -89,34 +89,34 @@ def inline_diff(self):\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = html_encode(obj.Title())\n+                    obj_title = html_escape(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(same_fmt % (css_class, obj_url, obj_title))\n             else:\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 94ed037..72a8d62 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -3,7 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n from Products.CMFDiffTool.utils import safe_unicode\n from Products.CMFDiffTool.utils import safe_utf8\n from zope.component.hooks import getSite\n@@ -88,11 +88,11 @@ def inline_diff(self):\n         if old_fname != new_fname:\n             html.append(\n                 self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       html_encode(old_fname), html_encode(new_fname)),\n+                                       html_escape(old_fname), html_escape(new_fname)),\n             )\n         if a != b:\n             html.append(\n-                self.inlinediff_fmt % (css_class, html_encode(a), html_encode(b)),\n+                self.inlinediff_fmt % (css_class, html_escape(a), html_escape(b)),\n             )\n         if html:\n             return linesep.join(html)\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex e663275..eddba03 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -4,7 +4,7 @@\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.ListDiff import ListDiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n-from Products.CMFDiffTool.utils import html_encode\n+from Products.CMFDiffTool.utils import html_escape\n \n \n FILE_FIELD_TYPES = []\n@@ -71,7 +71,7 @@ def inline_diff(self):\n         old = self._parseField(self.oldValue, self.oldFilename)[0]\n         new = self._parseField(self.newValue, self.newFilename)[0]\n \n-        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_encode(old), html_encode(new))\n+        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_escape(old), html_escape(new))\n \n \n InitializeClass(NamedFileBinaryDiff)\n@@ -137,9 +137,9 @@ def is_same_dict(d1, d2):\n             )\n \n         return \'\\n\'.join([\n-            ((self.same_fmt % (css_class, html_encode(d_old[\'repr\'])))\n+            ((self.same_fmt % (css_class, html_escape(d_old[\'repr\'])))\n              if is_same_dict(d_old, d_new) else self.inlinediff_fmt\n-             % (css_class, html_encode(d_old[\'repr\']), html_encode(d_new[\'repr\']))\n+             % (css_class, html_escape(d_old[\'repr\']), html_escape(d_new[\'repr\']))\n              ) for (d_old, d_new) in zip(old_data, new_data)])\n \n \ndiff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py\nindex 9e989e2..682e420 100644\n--- a/Products/CMFDiffTool/tests/test_richtextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import PLONE_INTEGRATION_TESTING\n from plone.app.textfield.value import RichTextValue\n from Products.CMFDiffTool.CMFDTHtmlDiff import CMFDTHtmlDiff\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -13,6 +14,7 @@ def __init__(self, body):\n \n class RichTextDiffTestCase(unittest.TestCase):\n     """Test RichTextDiff"""\n+    layer = PLONE_INTEGRATION_TESTING\n \n     def test_parseField_value_is_none(self):\n         value = None\n@@ -37,9 +39,9 @@ def test_inline_diff_same_hacker(self):\n         value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n         diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n         inline_diff = diff.inline_diff()\n-        # The script tag should be escaped.\n+        # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n-        self.assertIn("&gt;", inline_diff)\n+        self.assertNotIn("&gt;", inline_diff)\n \n     def test_inline_diff_different(self):\n         old_value = RichTextValue(u\'foo\')\n@@ -58,14 +60,14 @@ def test_inline_diff_different_hacker(self):\n         new_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n         diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n         inline_diff = diff.inline_diff()\n-        # The script tag should be escaped.\n+        # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n-        self.assertIn("&gt;", inline_diff)\n+        self.assertNotIn("&gt;", inline_diff)\n \n         old_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n         new_value = RichTextValue(u\'clean\')\n         diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n         inline_diff = diff.inline_diff()\n-        # The script tag should be escaped.\n+        # The script tag should not be escaped, but totally not shown.\n         self.assertNotIn("<script", inline_diff)\n-        self.assertIn("&gt;", inline_diff)\n+        self.assertNotIn("&gt;", inline_diff)\ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 6c23084..1f1cf05 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -1,4 +1,6 @@\n # -*- coding: utf-8 -*-\n+from Products.PortalTransforms.data import datastream\n+from Products.PortalTransforms.transforms.safe_html import SafeHTML\n \n import six\n \n@@ -23,18 +25,41 @@ def safe_utf8(value):\n     return safe_unicode(value).encode(\'utf-8\')\n \n \n-# In both Python 2 and 3, the escape function cannot handle a non string-like value,\n-# for example an integer.  Seems good to always return a string-like value though.\n+def scrub_html(value):\n+    # Strip illegal HTML tags from string text.\n+    transform = SafeHTML()\n+    # Available in Plone 5.2:\n+    # return transform.scrub_html(value)\n+    data = datastream("text/x-html-safe")\n+    data = transform.convert(value, data)\n+    return data.getData()\n+\n+\n+# We will have two functions:\n+# - html_escape: escape html, for example turn \'<\' into \'&lt;\'\n+# - html_safe: return html with dangerous tags removed, using safe html transform.\n+#\n+# In both Python 2 and 3, the convert function that we use in safe_html\n+# cannot handle a non string-like value, for example an integer.\n+# Same is true for the escape function.\n+# Seems good to always return a string-like value though.\n # But should that be bytes or string or unicode?\n if six.PY2:\n     # We use this in places where the result gets inserted in a string/bytes,\n     # so we should use a string (utf-8) here.\n-    def html_encode(value):\n+    def html_escape(value):\n         value = safe_utf8(value)\n         return escape(value, 1)\n+\n+    def html_safe(value):\n+        value = safe_utf8(value)\n+        return scrub_html(value)\n else:\n-    # In Python 3 this gets inserted in a string/text,\n-    # and escape cannot handle a bytes value.\n-    def html_encode(value):\n+    # In Python 3 this gets inserted in a string/text.\n+    def html_escape(value):\n         value = safe_unicode(value)\n         return escape(value, 1)\n+\n+    def html_safe(value):\n+        value = safe_unicode(value)\n+        return scrub_html(value)\ndiff --git a/news/39.bugfix b/news/39.bugfix\nindex 35b07ac..f8cabd2 100644\n--- a/news/39.bugfix\n+++ b/news/39.bugfix\n@@ -1,3 +1,5 @@\n-Added XSS fix from PloneHotfix20210518.\n+Added XSS fix from PloneHotfix20210518 for inline diff.\n See `vulnerability <https://plone.org/security/hotfix/20210518/xss-vulnerability-in-cmfdifftool>`_.\n+The first version of the hotfix escaped all html.\n+Now for the rich text field, use the safe html transform, otherwise the inline diff is no longer inline.\n [maurits]\n'

