Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-08-28T14:18:43+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/aed5e24abb9977935b4befebeb4c101b69dc88ea

black=20.8b1 (#986)

Files changed:
M src/plone/restapi/batching.py
M src/plone/restapi/controlpanels/interfaces.py
M src/plone/restapi/deserializer/atcontent.py
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/controlpanels/__init__.py
M src/plone/restapi/deserializer/local_roles.py
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/exceptions.py
M src/plone/restapi/interfaces.py
M src/plone/restapi/pas/plugin.py
M src/plone/restapi/serializer/controlpanels/__init__.py
M src/plone/restapi/serializer/expansion.py
M src/plone/restapi/serializer/summary.py
M src/plone/restapi/serializer/tile.py
M src/plone/restapi/serializer/vocabularies.py
M src/plone/restapi/services/__init__.py
M src/plone/restapi/services/addons/addons.py
M src/plone/restapi/services/auth/login.py
M src/plone/restapi/services/auth/logout.py
M src/plone/restapi/services/auth/renew.py
M src/plone/restapi/services/content/add.py
M src/plone/restapi/services/content/delete.py
M src/plone/restapi/services/content/get.py
M src/plone/restapi/services/content/sharing.py
M src/plone/restapi/services/content/update.py
M src/plone/restapi/services/copymove/copymove.py
M src/plone/restapi/services/discussion/utils.py
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/groups/delete.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/services/locking/locking.py
M src/plone/restapi/services/multilingual/locator.py
M src/plone/restapi/services/multilingual/pam.py
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/services/querystringsearch/get.py
M src/plone/restapi/services/users/add.py
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/services/users/update.py
M src/plone/restapi/services/workflow/info.py
M src/plone/restapi/services/workflow/transition.py
M src/plone/restapi/setuphandlers.py
M src/plone/restapi/testing.py
M src/plone/restapi/tests/languages.py
M src/plone/restapi/tests/statictime.py
M src/plone/restapi/tests/test_atcollection.py
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_deserializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_services_users.py
M src/plone/restapi/tests/test_setup.py
M src/plone/restapi/tests/test_types.py
M src/plone/restapi/tests/test_upgrade_ordering.py
M src/plone/restapi/types/utils.py
M src/plone/restapi/upgrades/to0002.py
M src/plone/restapi/upgrades/to0003.py
M src/plone/restapi/upgrades/to0004.py
M src/plone/restapi/upgrades/to0005.py
M src/plone/restapi/upgrades/to0006.py

b'diff --git a/src/plone/restapi/batching.py b/src/plone/restapi/batching.py\nindex e612f9a2c..2cab0e619 100644\n--- a/src/plone/restapi/batching.py\n+++ b/src/plone/restapi/batching.py\n@@ -22,14 +22,12 @@ def __init__(self, request, results):\n         self.batch = Batch(results, self.b_size, self.b_start)\n \n     def __iter__(self):\n-        """Iterate over items in current batch.\n-        """\n+        """Iterate over items in current batch."""\n         return iter(self.batch)\n \n     @property\n     def items_total(self):\n-        """Return the number of total items in underlying sequence.\n-        """\n+        """Return the number of total items in underlying sequence."""\n         return self.batch.sequence_length\n \n     @property\n@@ -63,8 +61,7 @@ def current_batch_url(self):\n \n     @property\n     def links(self):\n-        """Get a dictionary with batching links.\n-        """\n+        """Get a dictionary with batching links."""\n         # Don\'t provide batching links if resultset isn\'t batched\n         if self.items_total <= self.b_size:\n             return None\n@@ -89,16 +86,14 @@ def links(self):\n         return links\n \n     def _batch_for_page(self, pagenumber):\n-        """Return a new Batch object for the given pagenumber.\n-        """\n+        """Return a new Batch object for the given pagenumber."""\n         new_batch = Batch.fromPagenumber(\n             self.batch._sequence, pagesize=self.b_size, pagenumber=pagenumber\n         )\n         return new_batch\n \n     def _url_for_batch(self, batch):\n-        """Return URL that points to the given batch.\n-        """\n+        """Return URL that points to the given batch."""\n         # Calculate the start for the new batch page.\n         # Make sure we account for plone.batching\'s one-based indexing and\n         # that the start never drops below zero\ndiff --git a/src/plone/restapi/controlpanels/interfaces.py b/src/plone/restapi/controlpanels/interfaces.py\nindex 681cfaa63..55b9852ea 100644\n--- a/src/plone/restapi/controlpanels/interfaces.py\n+++ b/src/plone/restapi/controlpanels/interfaces.py\n@@ -15,20 +15,16 @@ class IControlpanel(Interface):\n     )  # noqa\n \n     def add(names):\n-        """ Create controlpanel children by names\n-        """\n+        """Create controlpanel children by names"""\n \n     def get(names):\n-        """ Read controlpanel children by names\n-        """\n+        """Read controlpanel children by names"""\n \n     def update(names):\n-        """ Update controlpanel children by names\n-        """\n+        """Update controlpanel children by names"""\n \n     def delete(names):\n-        """ Remove controlpanel children by names\n-        """\n+        """Remove controlpanel children by names"""\n \n \n class IDexterityTypesControlpanel(IControlpanel):\ndiff --git a/src/plone/restapi/deserializer/atcontent.py b/src/plone/restapi/deserializer/atcontent.py\nindex 63bc7d8cc..9c34ad46b 100644\n--- a/src/plone/restapi/deserializer/atcontent.py\n+++ b/src/plone/restapi/deserializer/atcontent.py\n@@ -20,8 +20,7 @@\n @implementer(IDeserializeFromJson)\n @adapter(IBaseObject, Interface)\n class DeserializeFromJson(OrderingMixin, object):\n-    """JSON deserializer for Archetypes content types\n-    """\n+    """JSON deserializer for Archetypes content types"""\n \n     notifies_create = True\n \n@@ -127,8 +126,7 @@ def validate(self):\n \n \n class ValidationRequest(dict):\n-    """A fake request for validation purposes.\n-    """\n+    """A fake request for validation purposes."""\n \n     def __init__(self, request, context):\n         self.request = request\n@@ -151,8 +149,7 @@ def get(self, key, default=None):\n \n \n class ValidationRequestForm(dict):\n-    """A request form dict that returns values from the content object.\n-    """\n+    """A request form dict that returns values from the content object."""\n \n     def __init__(self, request, context):\n         self.request = request\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex ecd4b4d0b..b6275c3c6 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -77,7 +77,7 @@ def __call__(self, value):\n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class ResolveUIDDeserializer(object):\n-    """ The "url" smart block field.\n+    """The "url" smart block field.\n \n     This is a generic handler. In all blocks, it converts any "url"\n     field from using resolveuid to an "absolute" URL\ndiff --git a/src/plone/restapi/deserializer/controlpanels/__init__.py b/src/plone/restapi/deserializer/controlpanels/__init__.py\nindex 9a8b01eb2..5301caa9b 100644\n--- a/src/plone/restapi/deserializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/deserializer/controlpanels/__init__.py\n@@ -17,8 +17,7 @@\n \n @implementer(IDexterityContent)\n class FakeDXContext(object):\n-    """Fake DX content class, so we can re-use the DX field deserializers\n-    """\n+    """Fake DX content class, so we can re-use the DX field deserializers"""\n \n \n @implementer(IDeserializeFromJson)\ndiff --git a/src/plone/restapi/deserializer/local_roles.py b/src/plone/restapi/deserializer/local_roles.py\nindex 8f0b02bee..9943b87b0 100644\n--- a/src/plone/restapi/deserializer/local_roles.py\n+++ b/src/plone/restapi/deserializer/local_roles.py\n@@ -26,8 +26,7 @@\n @implementer(IDeserializeFromJson)\n @adapter(IRoleManager, Interface)\n class DeserializeFromJson(object):\n-    """JSON deserializer for local roles\n-    """\n+    """JSON deserializer for local roles"""\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 60558848e..790e91fcb 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -13,8 +13,7 @@\n @implementer(IDeserializeFromJson)\n @adapter(IPloneSiteRoot, IRequest)\n class DeserializeSiteRootFromJson(OrderingMixin, object):\n-    """JSON deserializer for the Plone site root\n-    """\n+    """JSON deserializer for the Plone site root"""\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/restapi/exceptions.py b/src/plone/restapi/exceptions.py\nindex e80e674e7..b81344505 100644\n--- a/src/plone/restapi/exceptions.py\n+++ b/src/plone/restapi/exceptions.py\n@@ -1,12 +1,10 @@\n # -*- coding: utf-8 -*-\n class APIError(Exception):\n-    """Base class for exceptions raised by plone.restapi.\n-    """\n+    """Base class for exceptions raised by plone.restapi."""\n \n \n class DeserializationError(Exception):\n-    """An error happened during deserialization of content.\n-    """\n+    """An error happened during deserialization of content."""\n \n     def __init__(self, msg):\n         self.msg = msg\n@@ -16,5 +14,4 @@ def __str__(self):\n \n \n class QueryParsingError(Exception):\n-    """An error happened while parsing a search query.\n-    """\n+    """An error happened while parsing a search query."""\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex a6f26b754..0efb341c3 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -14,8 +14,7 @@ class IPloneRestapiLayer(IDefaultBrowserLayer):\n \n \n class ISerializeToJson(Interface):\n-    """Adapter to serialize a Dexterity object into a JSON object.\n-    """\n+    """Adapter to serialize a Dexterity object into a JSON object."""\n \n \n class ISerializeToJsonSummary(Interface):\n@@ -25,17 +24,14 @@ class ISerializeToJsonSummary(Interface):\n \n \n class IJsonCompatible(Interface):\n-    """Convert a value to a JSON compatible data structure.\n-    """\n+    """Convert a value to a JSON compatible data structure."""\n \n \n class IContextawareJsonCompatible(IJsonCompatible):\n-    """Convert a value to a JSON compatible data structure, using a context.\n-    """\n+    """Convert a value to a JSON compatible data structure, using a context."""\n \n     def __init__(value, context):\n-        """Adapts value and a context\n-        """\n+        """Adapts value and a context"""\n \n \n class IFieldSerializer(Interface):\n@@ -44,12 +40,10 @@ class IFieldSerializer(Interface):\n     """\n \n     def __init__(field, context, request):\n-        """Adapts field, context and request.\n-        """\n+        """Adapts field, context and request."""\n \n     def __call__():\n-        """Returns JSON compatible python data.\n-        """\n+        """Returns JSON compatible python data."""\n \n \n class IPrimaryFieldTarget(Interface):\n@@ -59,12 +53,10 @@ class IPrimaryFieldTarget(Interface):\n     """\n \n     def __init__(field, context, request):\n-        """Adapts field, context and request.\n-        """\n+        """Adapts field, context and request."""\n \n     def __call__():\n-        """Returns a URL.\n-        """\n+        """Returns a URL."""\n \n \n class IObjectPrimaryFieldTarget(Interface):\n@@ -73,12 +65,10 @@ class IObjectPrimaryFieldTarget(Interface):\n     """\n \n     def __init__(field, context, request):\n-        """Adapts field, context and request.\n-        """\n+        """Adapts field, context and request."""\n \n     def __call__():\n-        """Returns a URL.\n-        """\n+        """Returns a URL."""\n \n \n class IDeserializeFromJson(Interface):\n@@ -86,21 +76,17 @@ class IDeserializeFromJson(Interface):\n \n \n class IFieldDeserializer(Interface):\n-    """An adapter to deserialize a JSON value into a field value.\n-    """\n+    """An adapter to deserialize a JSON value into a field value."""\n \n     def __init__(field, context, request):\n-        """Adapts a field, it\'s context and the request.\n-        """\n+        """Adapts a field, it\'s context and the request."""\n \n     def __call__(value):\n-        """Convert the provided JSON value to a field value.\n-        """\n+        """Convert the provided JSON value to a field value."""\n \n \n class IBlockFieldDeserializationTransformer(Interface):\n-    """Convert/adjust raw block deserialized value into block value.\n-    """\n+    """Convert/adjust raw block deserialized value into block value."""\n \n     block_type = Attribute(\n         "A string with the type of block, the @type from " "the block value"\n@@ -110,17 +96,14 @@ class IBlockFieldDeserializationTransformer(Interface):\n     )\n \n     def __init__(field, context, request):\n-        """Adapts context and the request.\n-        """\n+        """Adapts context and the request."""\n \n     def __call__(value):\n-        """Convert the provided raw Python value to a block value.\n-        """\n+        """Convert the provided raw Python value to a block value."""\n \n \n class IBlockFieldSerializationTransformer(Interface):\n-    """Transform block value before final JSON serialization\n-    """\n+    """Transform block value before final JSON serialization"""\n \n     block_type = Attribute(\n         "A string with the type of block, the @type from " "the block value"\n@@ -131,22 +114,19 @@ class IBlockFieldSerializationTransformer(Interface):\n     )\n \n     def __init__(field, context, request):\n-        """Adapts context and the request.\n-        """\n+        """Adapts context and the request."""\n \n     def __call__(value):\n-        """Convert the provided raw Python value to a block value.\n-        """\n+        """Convert the provided raw Python value to a block value."""\n \n \n class IExpandableElement(Interface):\n     """A named adapter that deserializes an element in expanded or collapsed\n-       form.\n+    form.\n     """\n \n     def __call__(expand=False):\n-        """\n-        """\n+        """"""\n \n \n class IZCatalogCompatibleQuery(Interface):\n@@ -166,12 +146,10 @@ class IZCatalogCompatibleQuery(Interface):\n     )\n \n     def __init__(context, request):\n-        """Adapts context and request.\n-        """\n+        """Adapts context and request."""\n \n     def __call__(query):\n-        """Returns a ZCatalog compatible query (Python dictionary).\n-        """\n+        """Returns a ZCatalog compatible query (Python dictionary)."""\n \n \n class IIndexQueryParser(Interface):\n@@ -201,8 +179,7 @@ class IIndexQueryParser(Interface):\n     )\n \n     def __init__(index, context, request):\n-        """Adapts a ZCatalog index, context and request.\n-        """\n+        """Adapts a ZCatalog index, context and request."""\n \n     def parse(idx_query):\n         """Takes a query against a single index (the value part of a\n@@ -221,15 +198,13 @@ def parse(idx_query):\n \n \n class IBlockSearchableText(Interface):\n-    """ Allow blocks to provide text for the SearchableText index\n+    """Allow blocks to provide text for the SearchableText index\n \n     Register as a named adapter, where the name is the block @type\n     """\n \n     def __init__(field, context, request):\n-        """Adapts a context and the request.\n-        """\n+        """Adapts a context and the request."""\n \n     def __call__(value):\n-        """Extract text from the block value. Returns text\n-        """\n+        """Extract text from the block value. Returns text"""\ndiff --git a/src/plone/restapi/pas/plugin.py b/src/plone/restapi/pas/plugin.py\nindex 58a34564f..420fabbd9 100644\n--- a/src/plone/restapi/pas/plugin.py\n+++ b/src/plone/restapi/pas/plugin.py\n@@ -27,8 +27,7 @@\n \n \n def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n-    """Add a JWT authentication plugin\n-    """\n+    """Add a JWT authentication plugin"""\n     plugin = JWTAuthenticationPlugin(id_, title)\n     self._setObject(plugin.getId(), plugin)\n \n@@ -42,8 +41,7 @@ def addJWTAuthenticationPlugin(self, id_, title=None, REQUEST=None):\n \n @implementer(IAuthenticationPlugin, IChallengePlugin, IExtractionPlugin)\n class JWTAuthenticationPlugin(BasePlugin):\n-    """Plone PAS plugin for authentication with JSON web tokens (JWT).\n-    """\n+    """Plone PAS plugin for authentication with JSON web tokens (JWT)."""\n \n     meta_type = "JWT Authentication Plugin"\n     security = ClassSecurityInfo()\n@@ -127,8 +125,7 @@ def authenticateCredentials(self, credentials):\n \n     @postonly\n     def manage_updateConfig(self, REQUEST):\n-        """Update configuration of JWT Authentication Plugin.\n-        """\n+        """Update configuration of JWT Authentication Plugin."""\n         response = REQUEST.response\n \n         self.token_timeout = int(REQUEST.form.get("token_timeout", self.token_timeout))\ndiff --git a/src/plone/restapi/serializer/controlpanels/__init__.py b/src/plone/restapi/serializer/controlpanels/__init__.py\nindex 04f9a567d..e4f3885fd 100644\n--- a/src/plone/restapi/serializer/controlpanels/__init__.py\n+++ b/src/plone/restapi/serializer/controlpanels/__init__.py\n@@ -39,8 +39,7 @@ def __call__(self):\n \n \n def get_jsonschema_for_controlpanel(controlpanel, context, request, form=None):\n-    """Build a complete JSON schema for the given controlpanel.\n-    """\n+    """Build a complete JSON schema for the given controlpanel."""\n     if not form:\n         schema = controlpanel.schema\n         fieldsets = utils.get_fieldsets(context, request, schema)\ndiff --git a/src/plone/restapi/serializer/expansion.py b/src/plone/restapi/serializer/expansion.py\nindex 552c233d7..07360fcb7 100644\n--- a/src/plone/restapi/serializer/expansion.py\n+++ b/src/plone/restapi/serializer/expansion.py\n@@ -6,8 +6,7 @@\n \n \n def expandable_elements(context, request):\n-    """Returns a dict containing all expandable elements.\n-    """\n+    """Returns a dict containing all expandable elements."""\n     expands = request.form.get("expand", "").split(",")\n     elements = getAdapters((context, request), IExpandableElement)\n     res = {}\ndiff --git a/src/plone/restapi/serializer/summary.py b/src/plone/restapi/serializer/summary.py\nindex ee52e57d0..8f23013cc 100644\n--- a/src/plone/restapi/serializer/summary.py\n+++ b/src/plone/restapi/serializer/summary.py\n@@ -89,8 +89,7 @@ def metadata_fields(self):\n @implementer(ISerializeToJsonSummary)\n @adapter(IPloneSiteRoot, Interface)\n class SiteRootJSONSummarySerializer(object):\n-    """ISerializeToJsonSummary adapter for the Plone Site root.\n-    """\n+    """ISerializeToJsonSummary adapter for the Plone Site root."""\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/restapi/serializer/tile.py b/src/plone/restapi/serializer/tile.py\nindex 567a99960..4e5cdd549 100644\n--- a/src/plone/restapi/serializer/tile.py\n+++ b/src/plone/restapi/serializer/tile.py\n@@ -31,8 +31,7 @@ def __call__(self):\n \n \n def get_jsonschema_for_tile(tile, context, request):\n-    """Build a complete JSON schema for the given tile.\n-    """\n+    """Build a complete JSON schema for the given tile."""\n     schema = tile.schema\n \n     fieldsets = utils.get_fieldsets(context, request, schema)\ndiff --git a/src/plone/restapi/serializer/vocabularies.py b/src/plone/restapi/serializer/vocabularies.py\nindex ac63d18e9..ce88e23ad 100644\n--- a/src/plone/restapi/serializer/vocabularies.py\n+++ b/src/plone/restapi/serializer/vocabularies.py\n@@ -74,14 +74,12 @@ def __call__(self, vocabulary_id):\n \n @adapter(IVocabulary, Interface)\n class SerializeVocabularyToJson(SerializeVocabLikeToJson):\n-    """Serializes IVocabulary to JSON.\n-    """\n+    """Serializes IVocabulary to JSON."""\n \n \n @adapter(IIterableSource, Interface)\n class SerializeSourceToJson(SerializeVocabLikeToJson):\n-    """Serializes IIterableSource to JSON.\n-    """\n+    """Serializes IIterableSource to JSON."""\n \n \n @implementer(ISerializeToJson)\ndiff --git a/src/plone/restapi/services/__init__.py b/src/plone/restapi/services/__init__.py\nindex 8111751e7..454571df2 100644\n--- a/src/plone/restapi/services/__init__.py\n+++ b/src/plone/restapi/services/__init__.py\n@@ -11,8 +11,7 @@\n \n \n class Service(RestService):\n-    """Base class for Plone REST API services\n-    """\n+    """Base class for Plone REST API services"""\n \n     content_type = "application/json"\n \n@@ -32,7 +31,7 @@ def check_permission(self):\n \n     def reply(self):\n         """Process the request and return a JSON serializable data structure or\n-           the no content marker if the response body should be empty.\n+        the no content marker if the response body should be empty.\n         """\n         return _no_content_marker\n \ndiff --git a/src/plone/restapi/services/addons/addons.py b/src/plone/restapi/services/addons/addons.py\nindex 0d68affa7..e47f219ac 100644\n--- a/src/plone/restapi/services/addons/addons.py\n+++ b/src/plone/restapi/services/addons/addons.py\n@@ -20,9 +20,9 @@\n \n class Addons(object):\n     """Performs install/upgrade/uninstall functions on an addon.\n-       Pulled, mostly intact, from Plone 5.1\'s products control panel.\n-       If we reach the point when plone.restapi isn\'t supporting releases\n-       prior to 5.1, we might be able to remove this as duplicate code.\n+    Pulled, mostly intact, from Plone 5.1\'s products control panel.\n+    If we reach the point when plone.restapi isn\'t supporting releases\n+    prior to 5.1, we might be able to remove this as duplicate code.\n     """\n \n     def __init__(self, context, request):\n@@ -68,7 +68,13 @@ def _install_profile_info(self, product_id):\n             prof\n             for prof in profiles\n             if prof["type"] == EXTENSION\n-            and (prof["product"] in (product_id, "Products.{0}".format(product_id),))\n+            and (\n+                prof["product"]\n+                in (\n+                    product_id,\n+                    "Products.{0}".format(product_id),\n+                )\n+            )\n         ]\n         return profiles\n \ndiff --git a/src/plone/restapi/services/auth/login.py b/src/plone/restapi/services/auth/login.py\nindex 2f0bae47d..260d37df9 100644\n--- a/src/plone/restapi/services/auth/login.py\n+++ b/src/plone/restapi/services/auth/login.py\n@@ -12,8 +12,7 @@\n \n \n class Login(Service):\n-    """Handles login and returns a JSON web token (JWT).\n-    """\n+    """Handles login and returns a JSON web token (JWT)."""\n \n     def reply(self):\n         data = json_body(self.request)\n@@ -73,7 +72,7 @@ def reply(self):\n \n     def _find_userfolder(self, userid):\n         """Try to find a user folder that contains a user with the given\n-           userid.\n+        userid.\n         """\n         uf_parent = aq_inner(self.context)\n         info = None\ndiff --git a/src/plone/restapi/services/auth/logout.py b/src/plone/restapi/services/auth/logout.py\nindex f24ab14bf..feacecb82 100644\n--- a/src/plone/restapi/services/auth/logout.py\n+++ b/src/plone/restapi/services/auth/logout.py\n@@ -5,8 +5,7 @@\n \n \n class Logout(Service):\n-    """Handles logout by invalidating the JWT\n-    """\n+    """Handles logout by invalidating the JWT"""\n \n     def reply(self):\n         plugin = None\ndiff --git a/src/plone/restapi/services/auth/renew.py b/src/plone/restapi/services/auth/renew.py\nindex 013622449..464c51968 100644\n--- a/src/plone/restapi/services/auth/renew.py\n+++ b/src/plone/restapi/services/auth/renew.py\n@@ -10,8 +10,7 @@\n \n \n class Renew(Service):\n-    """Renew authentication token\n-    """\n+    """Renew authentication token"""\n \n     def reply(self):\n         plugin = None\ndiff --git a/src/plone/restapi/services/content/add.py b/src/plone/restapi/services/content/add.py\nindex cdf691509..a2a9718fd 100644\n--- a/src/plone/restapi/services/content/add.py\n+++ b/src/plone/restapi/services/content/add.py\n@@ -31,8 +31,7 @@\n \n \n class FolderPost(Service):\n-    """Creates a new content object.\n-    """\n+    """Creates a new content object."""\n \n     def reply(self):\n         data = json_body(self.request)\ndiff --git a/src/plone/restapi/services/content/delete.py b/src/plone/restapi/services/content/delete.py\nindex 8d4f59d70..e9820dd18 100644\n--- a/src/plone/restapi/services/content/delete.py\n+++ b/src/plone/restapi/services/content/delete.py\n@@ -5,8 +5,7 @@\n \n \n class ContentDelete(Service):\n-    """Deletes a content object.\n-    """\n+    """Deletes a content object."""\n \n     def reply(self):\n \ndiff --git a/src/plone/restapi/services/content/get.py b/src/plone/restapi/services/content/get.py\nindex e8ce4354a..ecc311b4b 100644\n--- a/src/plone/restapi/services/content/get.py\n+++ b/src/plone/restapi/services/content/get.py\n@@ -5,8 +5,7 @@\n \n \n class ContentGet(Service):\n-    """Returns a serialized content object.\n-    """\n+    """Returns a serialized content object."""\n \n     def reply(self):\n         serializer = queryMultiAdapter((self.context, self.request), ISerializeToJson)\ndiff --git a/src/plone/restapi/services/content/sharing.py b/src/plone/restapi/services/content/sharing.py\nindex f432ea0a5..382986b99 100644\n--- a/src/plone/restapi/services/content/sharing.py\n+++ b/src/plone/restapi/services/content/sharing.py\n@@ -11,8 +11,7 @@\n \n \n class SharingGet(Service):\n-    """Returns a serialized content object.\n-    """\n+    """Returns a serialized content object."""\n \n     def reply(self):\n         # return 403 Forbidden if the user has no DelegateRoles permission\ndiff --git a/src/plone/restapi/services/content/update.py b/src/plone/restapi/services/content/update.py\nindex a37e28e69..00a445222 100644\n--- a/src/plone/restapi/services/content/update.py\n+++ b/src/plone/restapi/services/content/update.py\n@@ -8,8 +8,7 @@\n \n \n class ContentPatch(Service):\n-    """Updates an existing content object.\n-    """\n+    """Updates an existing content object."""\n \n     def reply(self):\n \ndiff --git a/src/plone/restapi/services/copymove/copymove.py b/src/plone/restapi/services/copymove/copymove.py\nindex 05e9374f7..b3731693b 100644\n--- a/src/plone/restapi/services/copymove/copymove.py\n+++ b/src/plone/restapi/services/copymove/copymove.py\n@@ -13,8 +13,7 @@\n \n \n class BaseCopyMove(Service):\n-    """Base service for copy/move operations.\n-    """\n+    """Base service for copy/move operations."""\n \n     def __init__(self, context, request):\n         super(BaseCopyMove, self).__init__(context, request)\n@@ -108,8 +107,7 @@ def clipboard(self, parent, ids):\n \n \n class Copy(BaseCopyMove):\n-    """Copies existing content objects.\n-    """\n+    """Copies existing content objects."""\n \n     is_moving = False\n \n@@ -118,8 +116,7 @@ def clipboard(self, parent, ids):\n \n \n class Move(BaseCopyMove):\n-    """Moves existing content objects.\n-    """\n+    """Moves existing content objects."""\n \n     is_moving = True\n \ndiff --git a/src/plone/restapi/services/discussion/utils.py b/src/plone/restapi/services/discussion/utils.py\nindex 2375c43f4..43519adbd 100644\n--- a/src/plone/restapi/services/discussion/utils.py\n+++ b/src/plone/restapi/services/discussion/utils.py\n@@ -30,8 +30,7 @@ def permission_exists(permission_id):\n \n \n def can_review(comment):\n-    """Returns true if current user has the \'Review comments\' permission.\n-    """\n+    """Returns true if current user has the \'Review comments\' permission."""\n     return bool(\n         getSecurityManager().checkPermission("Review comments", aq_inner(comment))\n     )\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex 825fa4982..958a39e2f 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -12,8 +12,7 @@\n \n \n class GroupsPost(Service):\n-    """Creates a new group.\n-    """\n+    """Creates a new group."""\n \n     def reply(self):\n         portal = getSite()\ndiff --git a/src/plone/restapi/services/groups/delete.py b/src/plone/restapi/services/groups/delete.py\nindex aa4365ee6..528240468 100644\n--- a/src/plone/restapi/services/groups/delete.py\n+++ b/src/plone/restapi/services/groups/delete.py\n@@ -9,8 +9,7 @@\n \n @implementer(IPublishTraverse)\n class GroupsDelete(Service):\n-    """Deletes a user.\n-    """\n+    """Deletes a user."""\n \n     def __init__(self, context, request):\n         super(GroupsDelete, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex b8a713c63..8892505c4 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -13,8 +13,7 @@\n \n @implementer(IPublishTraverse)\n class GroupsPatch(Service):\n-    """Updates an existing group.\n-    """\n+    """Updates an existing group."""\n \n     def __init__(self, context, request):\n         super(GroupsPatch, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/locking/locking.py b/src/plone/restapi/services/locking/locking.py\nindex 981d7447c..81a7acbfd 100644\n--- a/src/plone/restapi/services/locking/locking.py\n+++ b/src/plone/restapi/services/locking/locking.py\n@@ -113,7 +113,7 @@ def webdav_lock(obj):\n \n def is_locked(obj, request):\n     """Returns true if the object is locked and the request doesn\'t contain\n-       the lock token.\n+    the lock token.\n     """\n     lockable = ILockable(obj, None)\n     if lockable is None:\ndiff --git a/src/plone/restapi/services/multilingual/locator.py b/src/plone/restapi/services/multilingual/locator.py\nindex 76f6c1ac5..72753a173 100644\n--- a/src/plone/restapi/services/multilingual/locator.py\n+++ b/src/plone/restapi/services/multilingual/locator.py\n@@ -4,8 +4,7 @@\n \n \n class TranslationLocator(Service):\n-    """ Get translation locator placements information\n-    """\n+    """Get translation locator placements information"""\n \n     def reply(self):\n         target_language = self.request.form["target_language"]\ndiff --git a/src/plone/restapi/services/multilingual/pam.py b/src/plone/restapi/services/multilingual/pam.py\nindex 8bd78ab87..57cb784e9 100644\n--- a/src/plone/restapi/services/multilingual/pam.py\n+++ b/src/plone/restapi/services/multilingual/pam.py\n@@ -45,8 +45,7 @@ def __call__(self, expand=False):\n \n \n class TranslationInfo(Service):\n-    """ Get translation information\n-    """\n+    """Get translation information"""\n \n     def reply(self):\n         translations = Translations(self.context, self.request)\n@@ -54,8 +53,7 @@ def reply(self):\n \n \n class LinkTranslations(Service):\n-    """ Link two content objects as translations of each other\n-    """\n+    """Link two content objects as translations of each other"""\n \n     def __init__(self, context, request):\n         super(LinkTranslations, self).__init__(context, request)\n@@ -123,8 +121,7 @@ def get_object(self, key):\n \n \n class UnlinkTranslations(Service):\n-    """ Unlink the translations for a content object\n-    """\n+    """Unlink the translations for a content object"""\n \n     def reply(self):\n         # Disable CSRF protection\ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex e3fbeddac..753353d7c 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -13,8 +13,7 @@\n \n \n class NavigationTreeQueryBuilder(NavtreeQueryBuilder):\n-    """Build a folder tree query\n-    """\n+    """Build a folder tree query"""\n \n     def __init__(self, context, depth):\n         NavtreeQueryBuilder.__init__(self, context)\n@@ -26,8 +25,7 @@ def __init__(self, context, depth):\n \n \n class CustomNavtreeStrategy(SitemapNavtreeStrategy):\n-    """The navtree strategy used for the default navigation portlet\n-    """\n+    """The navtree strategy used for the default navigation portlet"""\n \n     def __init__(self, context):\n         SitemapNavtreeStrategy.__init__(self, context, None)\ndiff --git a/src/plone/restapi/services/querystringsearch/get.py b/src/plone/restapi/services/querystringsearch/get.py\nindex e687b7b1b..9d620adff 100644\n--- a/src/plone/restapi/services/querystringsearch/get.py\n+++ b/src/plone/restapi/services/querystringsearch/get.py\n@@ -15,8 +15,7 @@\n \n \n class QuerystringSearchPost(Service):\n-    """Returns the querystring search results given a p.a.querystring data.\n-    """\n+    """Returns the querystring search results given a p.a.querystring data."""\n \n     def reply(self):\n         data = json_body(self.request)\ndiff --git a/src/plone/restapi/services/users/add.py b/src/plone/restapi/services/users/add.py\nindex 9c213ffb4..82c9093a9 100644\n--- a/src/plone/restapi/services/users/add.py\n+++ b/src/plone/restapi/services/users/add.py\n@@ -39,8 +39,7 @@\n \n @implementer(IPublishTraverse)\n class UsersPost(Service):\n-    """Creates a new user.\n-    """\n+    """Creates a new user."""\n \n     def __init__(self, context, request):\n         super(UsersPost, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex fca9be19b..fad9171c6 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -8,8 +8,7 @@\n \n @implementer(IPublishTraverse)\n class UsersDelete(Service):\n-    """Deletes a user.\n-    """\n+    """Deletes a user."""\n \n     def __init__(self, context, request):\n         super(UsersDelete, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/users/update.py b/src/plone/restapi/services/users/update.py\nindex 8958a4685..c637271b7 100644\n--- a/src/plone/restapi/services/users/update.py\n+++ b/src/plone/restapi/services/users/update.py\n@@ -28,8 +28,7 @@\n \n @implementer(IPublishTraverse)\n class UsersPatch(Service):\n-    """Updates an existing user.\n-    """\n+    """Updates an existing user."""\n \n     def __init__(self, context, request):\n         super(UsersPatch, self).__init__(context, request)\ndiff --git a/src/plone/restapi/services/workflow/info.py b/src/plone/restapi/services/workflow/info.py\nindex be6b3305a..b729eb4d0 100644\n--- a/src/plone/restapi/services/workflow/info.py\n+++ b/src/plone/restapi/services/workflow/info.py\n@@ -75,8 +75,7 @@ def __call__(self, expand=False):\n \n \n class WorkflowInfoService(Service):\n-    """Get workflow information\n-    """\n+    """Get workflow information"""\n \n     def reply(self):\n         info = WorkflowInfo(self.context, self.request)\ndiff --git a/src/plone/restapi/services/workflow/transition.py b/src/plone/restapi/services/workflow/transition.py\nindex 6f17989f3..a830a63d6 100644\n--- a/src/plone/restapi/services/workflow/transition.py\n+++ b/src/plone/restapi/services/workflow/transition.py\n@@ -22,8 +22,7 @@\n \n @implementer(IPublishTraverse)\n class WorkflowTransition(Service):\n-    """Trigger workflow transition\n-    """\n+    """Trigger workflow transition"""\n \n     def __init__(self, context, request):\n         super(WorkflowTransition, self).__init__(context, request)\ndiff --git a/src/plone/restapi/setuphandlers.py b/src/plone/restapi/setuphandlers.py\nindex 850c6cea7..d25b3669d 100644\n--- a/src/plone/restapi/setuphandlers.py\n+++ b/src/plone/restapi/setuphandlers.py\n@@ -46,8 +46,7 @@ def install_pas_plugin(context):\n \n \n def import_various(context):\n-    """Miscellanous steps import handle\n-    """\n+    """Miscellanous steps import handle"""\n     if context.readDataFile("plone.restapi_various.txt") is None:\n         return\n \ndiff --git a/src/plone/restapi/testing.py b/src/plone/restapi/testing.py\nindex ae976a3ed..2016cd0ec 100644\n--- a/src/plone/restapi/testing.py\n+++ b/src/plone/restapi/testing.py\n@@ -86,8 +86,7 @@ def set_available_languages():\n \n \n def set_supported_languages(portal):\n-    """Set supported languages to the same predictable set for all test layers.\n-    """\n+    """Set supported languages to the same predictable set for all test layers."""\n     language_tool = getToolByName(portal, "portal_languages")\n     for lang in ENABLED_LANGUAGES:\n         language_tool.addSupportedLanguage(lang)\ndiff --git a/src/plone/restapi/tests/languages.py b/src/plone/restapi/tests/languages.py\nindex 3eea79c5d..686942199 100644\n--- a/src/plone/restapi/tests/languages.py\n+++ b/src/plone/restapi/tests/languages.py\n@@ -21,8 +21,7 @@ class ModifiableLanguages(object):\n     """\n \n     def getLanguages(self, combined=False):\n-        """Return a sequence of Language objects for available languages.\n-        """\n+        """Return a sequence of Language objects for available languages."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\n@@ -33,8 +32,7 @@ def getLanguages(self, combined=False):\n         return languages\n \n     def getLanguageListing(self, combined=False):\n-        """Return a sequence of language code and language name tuples.\n-        """\n+        """Return a sequence of language code and language name tuples."""\n         languages = _languagelist.copy()\n         if combined:\n             languages.update(_combinedlanguagelist.copy())\ndiff --git a/src/plone/restapi/tests/statictime.py b/src/plone/restapi/tests/statictime.py\nindex 2545793a3..9f4e140cc 100644\n--- a/src/plone/restapi/tests/statictime.py\n+++ b/src/plone/restapi/tests/statictime.py\n@@ -92,8 +92,7 @@ def __init__(\n         """\n \n     def start(self):\n-        """Patch the respective getters so that they return static times.\n-        """\n+        """Patch the respective getters so that they return static times."""\n         # Patch created and modified times for DexterityContent.\n         # creation_date and modification_date are instance-level attributes\n         # on DX object that get initialized with datetime.now() during\n@@ -128,8 +127,7 @@ def start(self):\n         TTWLockable.lock_info = static_lock_info_factory(self.static_modified)\n \n     def stop(self):\n-        """Undo all the patches.\n-        """\n+        """Undo all the patches."""\n         TTWLockable.lock_info = _originals["TTWLockable.lock_info"]\n         ContentHistoryViewlet.fullHistory = _originals[\n             "ContentHistoryViewlet.fullHistory"\ndiff --git a/src/plone/restapi/tests/test_atcollection.py b/src/plone/restapi/tests/test_atcollection.py\nindex 6eee18046..d336e0c94 100644\n--- a/src/plone/restapi/tests/test_atcollection.py\n+++ b/src/plone/restapi/tests/test_atcollection.py\n@@ -96,8 +96,8 @@ def test_serializer_includes_collection_items(self):\n         )\n \n     def test_serializer_includes_collection_fullobjects(self):\n-        """ when using the fullobjects parameter, the collection needs to\n-            serialize its contents with the standard object serializer"""\n+        """when using the fullobjects parameter, the collection needs to\n+        serialize its contents with the standard object serializer"""\n         folder = self.portal[\n             self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n         ]\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex 16f46af0a..4c3b0b660 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -33,7 +33,8 @@ def setUp(self):\n         fti.behaviors = tuple(behavior_list)\n \n         self.portal.invokeFactory(\n-            "Document", id=u"doc1",\n+            "Document",\n+            id=u"doc1",\n         )\n         self.image = self.portal[\n             self.portal.invokeFactory("Image", id="image-1", title="Target image")\n@@ -66,7 +67,8 @@ def __call__(self, value):\n                 return value\n \n         provideSubscriptionAdapter(\n-            TestAdapter, (IDexterityItem, IBrowserRequest),\n+            TestAdapter,\n+            (IDexterityItem, IBrowserRequest),\n         )\n \n         self.deserialize(blocks={"123": {"@type": "test", "value": u"text"}})\n@@ -110,11 +112,13 @@ def __call__(self, value):\n                 return value\n \n         provideSubscriptionAdapter(\n-            TestAdapterB, (IDexterityItem, IBrowserRequest),\n+            TestAdapterB,\n+            (IDexterityItem, IBrowserRequest),\n         )\n \n         provideSubscriptionAdapter(\n-            TestAdapterA, (IDexterityItem, IBrowserRequest),\n+            TestAdapterA,\n+            (IDexterityItem, IBrowserRequest),\n         )\n \n         self.deserialize(blocks={"123": {"@type": "test_multi", "value": u"a"}})\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 44a930e67..ffaaa3fb3 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -125,7 +125,8 @@ def test_comment_with_no_author_image(self):\n \n         serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n         self.assertEqual(\n-            None, serializer().get("author_image"),\n+            None,\n+            serializer().get("author_image"),\n         )\n \n     def test_comment_with_mimetype_text_plain(self):\n@@ -140,7 +141,8 @@ def test_comment_with_mimetype_text_plain(self):\n \n         # serializer should return HTML with a clickable link\n         self.assertEqual(\n-            "Hey, I am plain text!", serializer()["text"]["data"],\n+            "Hey, I am plain text!",\n+            serializer()["text"]["data"],\n         )\n         # serializer should return mimetype = text/x-web-intelligent\n         self.assertEqual("text/plain", serializer()["text"]["mime-type"])\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex 181397994..ab4a3e261 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -69,8 +69,7 @@ def test_sharing_search(self):\n         self.assertNotEqual(len(non_search_entries), len(search_entries))\n \n     def test_sharing_search_roundtrip(self):\n-        """Search for a user and use save roles\n-        """\n+        """Search for a user and use save roles"""\n         # Make sure we don\'t already have admin\n         response = requests.get(\n             self.portal.folder1.absolute_url() + "/@sharing",\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 6b169c330..6e1a2bdf3 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -32,8 +32,7 @@\n \n \n class AdapterCM(object):\n-    """Context manager that will temporarily register an adapter\n-    """\n+    """Context manager that will temporarily register an adapter"""\n \n     def __init__(self, adapter, from_, provides):\n         self.adapter = adapter\n@@ -411,13 +410,13 @@ def test_nextprev_unordered_folder(self):\n     def test_richtext_serializer_context(self):\n         """This checks if the context is passed in correctly.\n \n-           We define a ITransformer, which returns the contexts portal_type.\n-           This is then verfied.\n+        We define a ITransformer, which returns the contexts portal_type.\n+        This is then verfied.\n         """\n \n         class RichtextTransform(object):\n             """RichttextValue to show that the context is correctly passed\n-               in throughout the stack.\n+            in throughout the stack.\n             """\n \n             def __init__(self, context):\n@@ -592,7 +591,9 @@ def setUp(self):\n         )\n \n         self.portal.invokeFactory(\n-            "DXTestDocument", id=u"doc2", test_primary_namedfile_field=None,\n+            "DXTestDocument",\n+            id=u"doc2",\n+            test_primary_namedfile_field=None,\n         )\n \n         self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\ndiff --git a/src/plone/restapi/tests/test_dxfield_deserializer.py b/src/plone/restapi/tests/test_dxfield_deserializer.py\nindex 46ee9d9b7..424c22a5b 100644\n--- a/src/plone/restapi/tests/test_dxfield_deserializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_deserializer.py\n@@ -22,8 +22,7 @@\n \n \n class RequiredField(object):\n-    """Context manager that will make a field required and back to old state.\n-    """\n+    """Context manager that will make a field required and back to old state."""\n \n     def __init__(self, field):\n         self.field = field\ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 8777becca..d23a980ea 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -153,7 +153,8 @@ def test_list_field_with_vocabulary_choice_serialization_no_valid_term(self):\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n-            [{u"token": u"token3", u"title": u"title3"}], value,\n+            [{u"token": u"token3", u"title": u"title3"}],\n+            value,\n         )\n \n     def test_set_field_serialization_returns_list(self):\n@@ -347,8 +348,8 @@ def serialize(self, fieldname, value):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in JPEG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in JPEG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -417,8 +418,8 @@ def test_namedimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -444,8 +445,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone < 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in JPEG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in JPEG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -514,8 +515,8 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -570,8 +571,8 @@ def serialize(self, fieldname, value):\n \n     def test_namedimage_field_serialization_returns_dict(self):\n         """In Plone == 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in PNG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in PNG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -640,8 +641,8 @@ def test_namedimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -667,8 +668,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n \n     def test_namedblobimage_field_serialization_returns_dict(self):\n         """In Plone = 5.1 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           a Pillow-generated image scale in PNG format"""\n+        scale with the same width and height of the original image is\n+        a Pillow-generated image scale in PNG format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -737,8 +738,8 @@ def test_namedblobimage_field_serialization_returns_dict(self):\n             )\n \n     def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ Original image url will be None because the original image is corrupted\n-            and the created url should be an image scale """\n+        """Original image url will be None because the original image is corrupted\n+        and the created url should be an image scale"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -793,8 +794,8 @@ def serialize(self, fieldname, value):\n \n     def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n         """In Plone >= 5.2 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           the actual original image in its original format """\n+        scale with the same width and height of the original image is\n+        the actual original image in its original format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -863,8 +864,8 @@ def test_namedimage_field_serialization_returns_dict_with_original_scale(self):\n             )\n \n     def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ In Plone >= 5.2 the original image file is not a "scale", so its url\n-            is returned as is and we need to check it, but the scales should be empty"""\n+        """In Plone >= 5.2 the original image file is not a "scale", so its url\n+        is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\n@@ -894,8 +895,8 @@ def test_namedimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n \n     def test_namedblobimage_field_serialization_returns_dict_with_original_scale(self):\n         """In Plone >= 5.2 the image returned when requesting an image\n-           scale with the same width and height of the original image is\n-           the actual original image in its original format"""\n+        scale with the same width and height of the original image is\n+        the actual original image in its original format"""\n         image_file = os.path.join(os.path.dirname(__file__), u"1024x768.gif")\n         with open(image_file, "rb") as f:\n             image_data = f.read()\n@@ -964,8 +965,8 @@ def test_namedblobimage_field_serialization_returns_dict_with_original_scale(sel\n             )\n \n     def test_namedblobimage_field_serialization_doesnt_choke_on_corrupt_image(self):\n-        """ In Plone >= 5.2 the original image file is not a "scale", so its url\n-            is returned as is and we need to check it, but the scales should be empty"""\n+        """In Plone >= 5.2 the original image file is not a "scale", so its url\n+        is returned as is and we need to check it, but the scales should be empty"""\n         image_data = b"INVALID IMAGE DATA"\n         fn = "test_namedblobimage_field"\n         with patch.object(storage, "uuid4", return_value="uuid_1"):\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex c37dfbae2..40b37fe80 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -247,7 +247,7 @@ def test_add_anon_user_sends_properties_are_saved(self):\n \n     def test_add_anon_no_roles(self):\n         """Make sure anonymous users cannot set their own roles.\n-           Allowing so would make them Manager.\n+        Allowing so would make them Manager.\n         """\n         security_settings = getAdapter(self.portal, ISecuritySchema)\n         security_settings.enable_self_reg = True\ndiff --git a/src/plone/restapi/tests/test_setup.py b/src/plone/restapi/tests/test_setup.py\nindex 886aa1d3d..f3037996a 100644\n--- a/src/plone/restapi/tests/test_setup.py\n+++ b/src/plone/restapi/tests/test_setup.py\n@@ -25,8 +25,8 @@ def setUp(self):\n         self.portal = self.layer["portal"]\n \n     def test_product_is_installed(self):\n-        """ Validate that our products GS profile has been run and the product\n-            installed\n+        """Validate that our products GS profile has been run and the product\n+        installed\n         """\n         if HAS_INSTALLER:\n             qi = get_installer(self.portal)\ndiff --git a/src/plone/restapi/tests/test_types.py b/src/plone/restapi/tests/test_types.py\nindex eaadd936c..e745112a4 100644\n--- a/src/plone/restapi/tests/test_types.py\n+++ b/src/plone/restapi/tests/test_types.py\n@@ -90,8 +90,7 @@ def test_get_jsonschema_for_fti(self):\n         self.assertNotIn("title", list(jsonschema["properties"]))\n \n     def test_get_jsonschema_for_fti_non_dx(self):\n-        """Make sure FTIs without lookupSchema are supported.\n-        """\n+        """Make sure FTIs without lookupSchema are supported."""\n         fti = self.portal.portal_types["Discussion Item"]\n         self.assertFalse(hasattr(fti, "lookupSchema"))\n \ndiff --git a/src/plone/restapi/tests/test_upgrade_ordering.py b/src/plone/restapi/tests/test_upgrade_ordering.py\nindex 49f9772f0..736221acc 100644\n--- a/src/plone/restapi/tests/test_upgrade_ordering.py\n+++ b/src/plone/restapi/tests/test_upgrade_ordering.py\n@@ -36,7 +36,12 @@ def test_upgrade_ensure_child_ordering_object_ids_are_native_strings(self):\n         ensure_child_ordering_object_ids_are_native_strings(self.folder)\n \n         self.assertEqual(\n-            ["doc2", "doc3", "doc1",], self.folder.objectIds(),  # noqa\n+            [\n+                "doc2",\n+                "doc3",\n+                "doc1",\n+            ],\n+            self.folder.objectIds(),  # noqa\n         )\n \n         # upgrade helper should ensure bytestring ids in python2 and do nothing\n@@ -61,7 +66,12 @@ def test_upgrade_view(self):\n         view()\n \n         self.assertEqual(\n-            ["doc2", "doc3", "doc1",], self.folder.objectIds(),  # noqa\n+            [\n+                "doc2",\n+                "doc3",\n+                "doc1",\n+            ],\n+            self.folder.objectIds(),  # noqa\n         )\n \n         # upgrade helper should ensure bytestring ids in python2 and do nothing\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex cc0595b34..017a377b2 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -58,8 +58,7 @@ def iter_fields(fieldsets):\n \n \n def get_form_fieldsets(form):\n-    """ Get fieldsets from form\n-    """\n+    """Get fieldsets from form"""\n     fieldsets = []\n     form_fields = getattr(form, "fields", {})\n     fields_values = list(form_fields.values())\n@@ -161,8 +160,7 @@ def get_widget_params(schemas):\n \n \n def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n-    """Build a complete JSON schema for the given FTI.\n-    """\n+    """Build a complete JSON schema for the given FTI."""\n     if excluded_fields is None:\n         excluded_fields = []\n \n@@ -205,8 +203,7 @@ def get_jsonschema_for_fti(fti, context, request, excluded_fields=None):\n \n \n def get_jsonschema_for_portal_type(portal_type, context, request, excluded_fields=None):\n-    """Build a complete JSON schema for the given portal_type.\n-    """\n+    """Build a complete JSON schema for the given portal_type."""\n     ttool = getToolByName(context, "portal_types")\n     fti = ttool[portal_type]\n     return get_jsonschema_for_fti(\ndiff --git a/src/plone/restapi/upgrades/to0002.py b/src/plone/restapi/upgrades/to0002.py\nindex 0231f2fce..fd99981e6 100644\n--- a/src/plone/restapi/upgrades/to0002.py\n+++ b/src/plone/restapi/upgrades/to0002.py\n@@ -2,8 +2,7 @@\n \n \n def assign_use_api_permission(setup_context):\n-    """Assign the \'plone.restapi: Use REST API\' permission to Anonymous.\n-    """\n+    """Assign the \'plone.restapi: Use REST API\' permission to Anonymous."""\n     setup_context.runImportStepFromProfile(\n         "profile-plone.restapi.upgrades:0002",\n         "rolemap",\ndiff --git a/src/plone/restapi/upgrades/to0003.py b/src/plone/restapi/upgrades/to0003.py\nindex 132f97554..117dde47f 100644\n--- a/src/plone/restapi/upgrades/to0003.py\n+++ b/src/plone/restapi/upgrades/to0003.py\n@@ -4,7 +4,6 @@\n \n \n def install_pas_plugin_in_zope_root(setup_context):\n-    """Install PAS plugin in Zope root\n-    """\n+    """Install PAS plugin in Zope root"""\n     portal = getToolByName(setup_context, "portal_url").getPortalObject()\n     install_pas_plugin(portal)\ndiff --git a/src/plone/restapi/upgrades/to0004.py b/src/plone/restapi/upgrades/to0004.py\nindex 6fac3ce7f..576520e36 100644\n--- a/src/plone/restapi/upgrades/to0004.py\n+++ b/src/plone/restapi/upgrades/to0004.py\n@@ -3,7 +3,7 @@\n \n def assign_get_users_permission(setup_context):\n     """Assign the \'plone.restapi: Access Plone user information\' permission\n-       to Managers by default.\n+    to Managers by default.\n     """\n     setup_context.runImportStepFromProfile(\n         "profile-plone.restapi.upgrades:0004",\ndiff --git a/src/plone/restapi/upgrades/to0005.py b/src/plone/restapi/upgrades/to0005.py\nindex 32ad4f302..d3c639378 100644\n--- a/src/plone/restapi/upgrades/to0005.py\n+++ b/src/plone/restapi/upgrades/to0005.py\n@@ -13,8 +13,7 @@\n \n \n def rename_tiles_to_blocks(setup_context):\n-    """Rename tiles and tiles_layout fields from Tiles behavior to blocks and blocks_layout\n-    """\n+    """Rename tiles and tiles_layout fields from Tiles behavior to blocks and blocks_layout"""\n     pt = api.portal.get_tool("portal_types")\n \n     types_with_tiles_behavior = []\ndiff --git a/src/plone/restapi/upgrades/to0006.py b/src/plone/restapi/upgrades/to0006.py\nindex 80aea10e9..cd3752449 100644\n--- a/src/plone/restapi/upgrades/to0006.py\n+++ b/src/plone/restapi/upgrades/to0006.py\n@@ -12,8 +12,7 @@\n \n \n def rename_iface_to_name_in_blocks_behavior(setup_context):\n-    """Rename iface name to the short name in blocks\n-    """\n+    """Rename iface name to the short name in blocks"""\n     pt = api.portal.get_tool("portal_types")\n \n     for _type in pt.objectIds():\n'

