Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2021-12-27T18:39:10+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/dae8686ed739509840eac71937be9f42c0c2eebe

Enhance output of purge view in order to be able to debug whats happening

Files changed:
A news/21.bugfix
M plone/cachepurging/browser.py
M plone/cachepurging/tests/test_views.py

b'diff --git a/news/21.bugfix b/news/21.bugfix\nnew file mode 100644\nindex 0000000..eee481d\n--- /dev/null\n+++ b/news/21.bugfix\n@@ -0,0 +1,3 @@\n+Better debugging capabilities by enhancing the output of the purge views\n+`@@plone.cachepurging.purge` and `@@plone.cachepurging.queue`.\n+[jensens]\ndiff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex 4c20c42..dbd7628 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -5,15 +5,10 @@\n from plone.cachepurging.utils import getURLsToPurge\n from plone.cachepurging.utils import isCachePurgingEnabled\n from plone.registry.interfaces import IRegistry\n-from six import StringIO\n from z3c.caching.purge import Purge\n from zope.component import getUtility\n from zope.event import notify\n \n-RESULT_TPL = (\n-    "Purged: {url}, Status: {status}, X-Cache: {xcache}, Error: {xerror}\\n"\n-)\n-\n \n class QueuePurge(object):\n     """Manually initiate a purge\n@@ -24,12 +19,14 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-\n+        self.request.response.setHeader(\'Content-type\', \'text/plain\')\n         if not isCachePurgingEnabled():\n-            return "Caching not enabled"\n+            return "Cache purging not enabled"\n+\n+        paths = getPathsToPurge(self.context, self.request)\n \n         notify(Purge(self.context))\n-        return "Queued"\n+        return "Queued:\\n\\n{0}".format("\\n".join(paths))\n \n \n class PurgeImmediately(object):\n@@ -40,21 +37,36 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n+    def write(self, msg):\n+        if not isinstance(msg, bytes):\n+            msg = msg.encode("utf8")\n+        self.request.response.write(msg)\n+\n     def __call__(self):\n+        self.request.response.setHeader(\'Content-type\', \'text/plain\')\n         if not isCachePurgingEnabled():\n-            return "Caching not enabled"\n+            return "Cache purging not enabled"\n \n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ICachePurgingSettings)\n-        purger = getUtility(IPurger)\n-        out = StringIO()\n+        self.write("Cache purging initiated...\\n\\n")\n \n+        settings = getUtility(IRegistry).forInterface(ICachePurgingSettings)\n+        purger = getUtility(IPurger)\n+        caching_proxies = settings.cachingProxies\n+        traceback = self.request.form.get("traceback")\n+        if not traceback:\n+            self.write("(hint: add \'?traceback\' to url to show full traceback in case of errors)\\n\\n")\n+        self.write("Proxies to purge: {0}\\n".format(\', \'.join(caching_proxies)))\n         for path in getPathsToPurge(self.context, self.request):\n-            for url in getURLsToPurge(path, settings.cachingProxies):\n+            self.write("- process path: {0}\\n".format(path))\n+            for url in getURLsToPurge(path, caching_proxies):\n+                self.write("  - send to purge {0}\\n".format(url).encode("utf-8"))\n                 status, xcache, xerror = purger.purgeSync(url)\n-                out.write(\n-                    RESULT_TPL.format(\n-                        url=url, status=status, xcache=xcache, xerror=xerror\n+                self.write(\n+                    "    response with status: {status}, X-Cache: {xcache}\\n".format(\n+                        status=status,\n+                        xcache=xcache\n                     )\n                 )\n-        return out.getvalue()\n+                if traceback and xerror:\n+                    self.write(xerror + "\\n")\n+        self.write("Done.\\n")\ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex 894276c..acc487a 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -22,8 +22,26 @@ class FauxContext(object):\n     pass\n \n \n+class FauxResponse(object):\n+\n+    def __init__(self):\n+        self.buffer = []\n+\n+    def write(self, msg):\n+        self.buffer.append(msg)\n+\n+    def setHeader(self, key, value):\n+        pass\n+\n+\n class FauxRequest(dict):\n-    pass\n+\n+    form = dict()\n+\n+    def __init__(self, *args, **kw):\n+        super(FauxRequest, self).__init__(*args, **kw)\n+        self.response = FauxResponse()\n+\n \n \n class Handler(object):\n@@ -56,15 +74,15 @@ def test_disabled(self):\n         self.settings.enabled = False\n \n         view = QueuePurge(FauxContext(), FauxRequest())\n-        self.assertEqual("Caching not enabled", view())\n+        self.assertEqual("Cache purging not enabled", view())\n         self.assertEqual([], self.handler.invocations)\n \n     def test_enabled(self):\n         self.settings.enabled = True\n \n         context = FauxContext()\n-        view = QueuePurge(context, FauxRequest)\n-        self.assertEqual("Queued", view())\n+        view = QueuePurge(context, FauxRequest())\n+        self.assertEqual("Queued:\\n\\n", view())\n         self.assertEqual(1, len(self.handler.invocations))\n         self.assertTrue(self.handler.invocations[0].object is context)\n \n@@ -107,20 +125,25 @@ def tearDown(self):\n     def test_disabled(self):\n         self.settings.enabled = False\n         view = PurgeImmediately(FauxContext(), FauxRequest())\n-        self.assertEqual("Caching not enabled", view())\n+        self.assertEqual("Cache purging not enabled", view())\n \n     def test_purge(self):\n-        view = PurgeImmediately(FauxContext(), FauxRequest())\n+        request = FauxRequest()\n+        view = PurgeImmediately(FauxContext(), request)()\n         self.assertEqual(\n-            "Purged: http://localhost:1234/foo, "\n-            "Status: 200 OK, "\n-            "X-Cache: cached, "\n-            "Error: None\\n"\n-            "Purged: http://localhost:1234/bar, "\n-            "Status: 200 OK, "\n-            "X-Cache: cached, "\n-            "Error: None\\n",\n-            view(),\n+            [\n+                b\'Cache purging initiated...\\n\\n\',\n+                b"(hint: add \'?traceback\' to url to show full traceback in case of errors)\\n\\n",\n+                b\'Proxies to purge: http://localhost:1234\\n\',\n+                b\'- process path: /foo\\n\',\n+                b\'  - send to purge http://localhost:1234/foo\\n\',\n+                b\'    response with status: 200 OK, X-Cache: cached\\n\',\n+                b\'- process path: /bar\\n\',\n+                b\'  - send to purge http://localhost:1234/bar\\n\',\n+                b\'    response with status: 200 OK, X-Cache: cached\\n\',\n+                b\'Done.\\n\'\n+            ],\n+            request.response.buffer,\n         )\n \n \n'

Repository: plone.cachepurging


Branch: refs/heads/master
Date: 2021-12-28T10:52:51+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.cachepurging/commit/9703d7b0b0df931fab98b801295850e6f6f67a7d

Merge pull request #21 from plone/enhance-purging-output

Enhance purging output of views

Files changed:
A news/21.bugfix
M plone/cachepurging/browser.py
M plone/cachepurging/tests/test_views.py

b'diff --git a/news/21.bugfix b/news/21.bugfix\nnew file mode 100644\nindex 0000000..eee481d\n--- /dev/null\n+++ b/news/21.bugfix\n@@ -0,0 +1,3 @@\n+Better debugging capabilities by enhancing the output of the purge views\n+`@@plone.cachepurging.purge` and `@@plone.cachepurging.queue`.\n+[jensens]\ndiff --git a/plone/cachepurging/browser.py b/plone/cachepurging/browser.py\nindex 4c20c42..dbd7628 100644\n--- a/plone/cachepurging/browser.py\n+++ b/plone/cachepurging/browser.py\n@@ -5,15 +5,10 @@\n from plone.cachepurging.utils import getURLsToPurge\n from plone.cachepurging.utils import isCachePurgingEnabled\n from plone.registry.interfaces import IRegistry\n-from six import StringIO\n from z3c.caching.purge import Purge\n from zope.component import getUtility\n from zope.event import notify\n \n-RESULT_TPL = (\n-    "Purged: {url}, Status: {status}, X-Cache: {xcache}, Error: {xerror}\\n"\n-)\n-\n \n class QueuePurge(object):\n     """Manually initiate a purge\n@@ -24,12 +19,14 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self):\n-\n+        self.request.response.setHeader(\'Content-type\', \'text/plain\')\n         if not isCachePurgingEnabled():\n-            return "Caching not enabled"\n+            return "Cache purging not enabled"\n+\n+        paths = getPathsToPurge(self.context, self.request)\n \n         notify(Purge(self.context))\n-        return "Queued"\n+        return "Queued:\\n\\n{0}".format("\\n".join(paths))\n \n \n class PurgeImmediately(object):\n@@ -40,21 +37,36 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n+    def write(self, msg):\n+        if not isinstance(msg, bytes):\n+            msg = msg.encode("utf8")\n+        self.request.response.write(msg)\n+\n     def __call__(self):\n+        self.request.response.setHeader(\'Content-type\', \'text/plain\')\n         if not isCachePurgingEnabled():\n-            return "Caching not enabled"\n+            return "Cache purging not enabled"\n \n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ICachePurgingSettings)\n-        purger = getUtility(IPurger)\n-        out = StringIO()\n+        self.write("Cache purging initiated...\\n\\n")\n \n+        settings = getUtility(IRegistry).forInterface(ICachePurgingSettings)\n+        purger = getUtility(IPurger)\n+        caching_proxies = settings.cachingProxies\n+        traceback = self.request.form.get("traceback")\n+        if not traceback:\n+            self.write("(hint: add \'?traceback\' to url to show full traceback in case of errors)\\n\\n")\n+        self.write("Proxies to purge: {0}\\n".format(\', \'.join(caching_proxies)))\n         for path in getPathsToPurge(self.context, self.request):\n-            for url in getURLsToPurge(path, settings.cachingProxies):\n+            self.write("- process path: {0}\\n".format(path))\n+            for url in getURLsToPurge(path, caching_proxies):\n+                self.write("  - send to purge {0}\\n".format(url).encode("utf-8"))\n                 status, xcache, xerror = purger.purgeSync(url)\n-                out.write(\n-                    RESULT_TPL.format(\n-                        url=url, status=status, xcache=xcache, xerror=xerror\n+                self.write(\n+                    "    response with status: {status}, X-Cache: {xcache}\\n".format(\n+                        status=status,\n+                        xcache=xcache\n                     )\n                 )\n-        return out.getvalue()\n+                if traceback and xerror:\n+                    self.write(xerror + "\\n")\n+        self.write("Done.\\n")\ndiff --git a/plone/cachepurging/tests/test_views.py b/plone/cachepurging/tests/test_views.py\nindex 894276c..acc487a 100644\n--- a/plone/cachepurging/tests/test_views.py\n+++ b/plone/cachepurging/tests/test_views.py\n@@ -22,8 +22,26 @@ class FauxContext(object):\n     pass\n \n \n+class FauxResponse(object):\n+\n+    def __init__(self):\n+        self.buffer = []\n+\n+    def write(self, msg):\n+        self.buffer.append(msg)\n+\n+    def setHeader(self, key, value):\n+        pass\n+\n+\n class FauxRequest(dict):\n-    pass\n+\n+    form = dict()\n+\n+    def __init__(self, *args, **kw):\n+        super(FauxRequest, self).__init__(*args, **kw)\n+        self.response = FauxResponse()\n+\n \n \n class Handler(object):\n@@ -56,15 +74,15 @@ def test_disabled(self):\n         self.settings.enabled = False\n \n         view = QueuePurge(FauxContext(), FauxRequest())\n-        self.assertEqual("Caching not enabled", view())\n+        self.assertEqual("Cache purging not enabled", view())\n         self.assertEqual([], self.handler.invocations)\n \n     def test_enabled(self):\n         self.settings.enabled = True\n \n         context = FauxContext()\n-        view = QueuePurge(context, FauxRequest)\n-        self.assertEqual("Queued", view())\n+        view = QueuePurge(context, FauxRequest())\n+        self.assertEqual("Queued:\\n\\n", view())\n         self.assertEqual(1, len(self.handler.invocations))\n         self.assertTrue(self.handler.invocations[0].object is context)\n \n@@ -107,20 +125,25 @@ def tearDown(self):\n     def test_disabled(self):\n         self.settings.enabled = False\n         view = PurgeImmediately(FauxContext(), FauxRequest())\n-        self.assertEqual("Caching not enabled", view())\n+        self.assertEqual("Cache purging not enabled", view())\n \n     def test_purge(self):\n-        view = PurgeImmediately(FauxContext(), FauxRequest())\n+        request = FauxRequest()\n+        view = PurgeImmediately(FauxContext(), request)()\n         self.assertEqual(\n-            "Purged: http://localhost:1234/foo, "\n-            "Status: 200 OK, "\n-            "X-Cache: cached, "\n-            "Error: None\\n"\n-            "Purged: http://localhost:1234/bar, "\n-            "Status: 200 OK, "\n-            "X-Cache: cached, "\n-            "Error: None\\n",\n-            view(),\n+            [\n+                b\'Cache purging initiated...\\n\\n\',\n+                b"(hint: add \'?traceback\' to url to show full traceback in case of errors)\\n\\n",\n+                b\'Proxies to purge: http://localhost:1234\\n\',\n+                b\'- process path: /foo\\n\',\n+                b\'  - send to purge http://localhost:1234/foo\\n\',\n+                b\'    response with status: 200 OK, X-Cache: cached\\n\',\n+                b\'- process path: /bar\\n\',\n+                b\'  - send to purge http://localhost:1234/bar\\n\',\n+                b\'    response with status: 200 OK, X-Cache: cached\\n\',\n+                b\'Done.\\n\'\n+            ],\n+            request.response.buffer,\n         )\n \n \n'

