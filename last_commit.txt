Repository: plone.releaser


Branch: refs/heads/master
Date: 2024-03-29T17:31:39+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/c8c29e5ce18b6d4f50f5cffb02993e64a41ae0b0

Preserve the case of package names in versions2constraints and friends.

Fixes https://github.com/plone/plone.releaser/issues/65

Files changed:
A news/65.bugfix
M plone/releaser/base.py
M plone/releaser/buildout.py
M plone/releaser/pip.py
M plone/releaser/tests/test_buildout.py
M plone/releaser/tests/test_pip.py
M plone/releaser/tests/test_versions2constraints.py

b'diff --git a/news/65.bugfix b/news/65.bugfix\nnew file mode 100644\nindex 0000000..513252e\n--- /dev/null\n+++ b/news/65.bugfix\n@@ -0,0 +1,2 @@\n+Preserve the case of package names in versions2constraints and friends.\n+[maurits]\ndiff --git a/plone/releaser/base.py b/plone/releaser/base.py\nindex 536710f..a401a2b 100644\n--- a/plone/releaser/base.py\n+++ b/plone/releaser/base.py\n@@ -12,16 +12,27 @@ def __init__(self, file_location):\n     def data(self):\n         raise NotImplementedError\n \n+    @property\n+    def lowerkeys(self):\n+        # Map from lower case key to actual key in the data.\n+        return {key.lower(): key for key in self.data}\n+\n     def __iter__(self):\n         return self.data.__iter__()\n \n     def __contains__(self, package_name):\n-        return package_name.lower() in self.data\n+        return package_name.lower() in self.lowerkeys\n \n     def __getitem__(self, package_name):\n-        if package_name in self:\n-            return self.data.get(package_name.lower())\n-        raise KeyError\n+        # self.data may be a defaultdict, so we cannot use\n+        # \'return self.data[package_name]\'\n+        if package_name not in self:\n+            raise KeyError(package_name)\n+        # The package_name is in the data, but the case might differ.\n+        if package_name in self.data:\n+            return self.data[package_name]\n+        actual_key = self.lowerkeys[package_name.lower()]\n+        return self.data[actual_key]\n \n     def __setitem__(self, package_name, value):\n         raise NotImplementedError\ndiff --git a/plone/releaser/buildout.py b/plone/releaser/buildout.py\nindex 5dc5aeb..2b42a61 100644\n--- a/plone/releaser/buildout.py\n+++ b/plone/releaser/buildout.py\n@@ -82,10 +82,8 @@ def config(self):\n         # For versions.cfg we had strict=False, for the others not.\n         # Let\'s use it always.\n         config = ConfigParser(interpolation=ExtendedInterpolation(), strict=False)\n-        # In SourcesFile we had this:\n-        # config.optionxform = str\n-        # This seems to make everything lowercase, and makes tests fail.\n-        # TODO: we could use it if we choose.\n+        # Preserve the case instead of the default lowercase transform:\n+        config.optionxform = str\n         with self.path.open() as f:\n             config.read_file(f)\n         # Especially in sources.cfg we may need to define a few extra variables\n@@ -103,7 +101,8 @@ def raw_config(self):\n         # Read the same data, but without interpolation.\n         # So keep a url like \'${settings:plone}/package.git\'\n         config = ConfigParser(strict=False)\n-        # config.optionxform = str\n+        # Preserve the case instead of the default lowercase transform:\n+        config.optionxform = str\n         with self.path.open() as f:\n             config.read_file(f)\n         return config\n@@ -161,7 +160,7 @@ def data(self):\n         for section in self.config.sections():\n             if section == "versions":\n                 for package, version in self.config[section].items():\n-                    # Note: the package names are lower case.\n+                    # Note: the package names used to be lower case, but not anymore.\n                     versions[package][""] = version\n             if not self.with_markers:\n                 continue\n@@ -298,7 +297,7 @@ def pins_to_pip(self):\n \n         An option would be to always do this for Buildout as well.\n         Or have a command to normalize a buildout file, with this and other\n-        small changes like making all package named lower case.\n+        small changes.\n         """\n         new_data = {}\n         for package, version in self.data.items():\n@@ -353,7 +352,7 @@ def data(self):\n         # I don\'t think we need to support [sources:marker].\n         for name, value in self.config["sources"].items():\n             source = Source.create_from_string(value)\n-            sources_dict[name.lower()] = source\n+            sources_dict[name] = source\n         return sources_dict\n \n     @property\n@@ -362,7 +361,7 @@ def raw_data(self):\n         # I don\'t think we need to support [sources:marker].\n         for name, value in self.raw_config["sources"].items():\n             source = Source.create_from_string(value)\n-            sources_dict[name.lower()] = source\n+            sources_dict[name] = source\n         return sources_dict\n \n     def __setitem__(self, package_name, value):\n@@ -407,12 +406,13 @@ def always_checkout(self):\n     def data(self):\n         # I don\'t think we need to support [buildout:marker].\n         checkouts = self.config.get("buildout", "auto-checkout")\n-        # Map from lower case to actual case, so we can find the package.\n+        # In this case a set or list would be fine, but in all other\n+        # cases the data is a dictionary, so let\'s use that.\n         mapping = {}\n         for package in checkouts.splitlines():\n             if not package:\n                 continue\n-            mapping[package.lower()] = package\n+            mapping[package] = True\n         return mapping\n \n     def __setitem__(self, package_name, enabled=True):\n@@ -448,11 +448,7 @@ def rewrite(self):\n         if self.always_checkout:\n             contents.append(f"always-checkout = {self.always_checkout}"),\n         contents.append("auto-checkout =")\n-        # self.values has the original case.\n-        # We could iterate over \'self\' to get lowercase,\n-        # which is what we get in most other places.\n-        # But for now let\'s use the info we have.\n-        for package in self.values():\n+        for package in self:\n             contents.append(f"    {package}")\n         contents.append("")\n         new_contents = "\\n".join(contents)\ndiff --git a/plone/releaser/pip.py b/plone/releaser/pip.py\nindex 0dda487..67baad0 100644\n--- a/plone/releaser/pip.py\n+++ b/plone/releaser/pip.py\n@@ -60,7 +60,7 @@ def data(self):\n             if "==" not in line:\n                 # We might want to support e.g. \'>=\', but for now keep it simple.\n                 continue\n-            package = line.split("==")[0].strip().lower()\n+            package = line.split("==")[0].strip()\n             version = line.split("==", 1)[1].strip()\n             # The line could also contain environment markers like this:\n             # "; python_version >= \'3.0\'"\n@@ -165,8 +165,7 @@ def data(self):\n         for package in self.config.sections():\n             use = to_bool(self.config[package].get("use", self.default_use))\n             if use:\n-                # Map from lower case to actual case, so we can find the package.\n-                checkouts[package.lower()] = package\n+                checkouts[package] = True\n         return checkouts\n \n     @property\n@@ -174,10 +173,14 @@ def sections(self):\n         # If we want to use a package, we must first know that it exists.\n         sections = {}\n         for package in self.config.sections():\n-            # Map from lower case to actual case, so we can find the package.\n-            sections[package.lower()] = package\n+            sections[package] = True\n         return sections\n \n+    @property\n+    def lowerkeys_section(self):\n+        # Map from lower case key to actual key in the sections.\n+        return {key.lower(): key for key in self.sections}\n+\n     def __setitem__(self, package_name, enabled=True):\n         """Enable or disable a checkout.\n \n@@ -193,7 +196,7 @@ def __setitem__(self, package_name, enabled=True):\n         So if the package we want to enable is not defined, meaning it has no\n         section, then we should fail loudly.\n         """\n-        stored_package_name = self.sections.get(package_name.lower())\n+        stored_package_name = self.lowerkeys_section.get(package_name.lower())\n         if not stored_package_name:\n             raise KeyError(\n                 f"{self.file_location}: There is no definition for {package_name}"\n@@ -267,7 +270,7 @@ def rewrite(self):\n         for key, value in self.config["settings"].items():\n             contents.append(f"{key} = {value}")\n \n-        for package in self.sections.values():\n+        for package in self.sections:\n             contents.append("")\n             contents.append(f"[{package}]")\n             for key, value in self.config[package].items():\ndiff --git a/plone/releaser/tests/test_buildout.py b/plone/releaser/tests/test_buildout.py\nindex fcf089c..95e28a2 100644\n--- a/plone/releaser/tests/test_buildout.py\n+++ b/plone/releaser/tests/test_buildout.py\n@@ -21,10 +21,11 @@\n \n def test_checkouts_file_data():\n     cf = CheckoutsFile(CHECKOUTS_FILE)\n-    # The data maps lower case to actual case.\n+    # The data used to map lower case to actual case,\n+    # but now actual case to True.\n     assert cf.data == {\n-        "camelcase": "CamelCase",\n-        "package": "package",\n+        "CamelCase": True,\n+        "package": True,\n     }\n \n \n@@ -40,12 +41,11 @@ def test_checkouts_file_contains():\n \n def test_checkouts_file_get():\n     cf = CheckoutsFile(CHECKOUTS_FILE)\n-    # The data maps lower case to actual case.\n-    assert cf["package"] == "package"\n-    assert cf.get("package") == "package"\n-    assert cf["camelcase"] == "CamelCase"\n-    assert cf["CAMELCASE"] == "CamelCase"\n-    assert cf["CamelCase"] == "CamelCase"\n+    assert cf["package"] is True\n+    assert cf.get("package") is True\n+    assert cf["camelcase"] is True\n+    assert cf["CAMELCASE"] is True\n+    assert cf["CamelCase"] is True\n     with pytest.raises(KeyError):\n         cf["nope"]\n \n@@ -60,7 +60,7 @@ def test_checkouts_file_add(tmp_path):\n     # Let\'s read it fresh, for good measure.\n     cf = CheckoutsFile(copy_path)\n     assert "Extra" in cf\n-    assert cf.get("extra") == "Extra"\n+    assert cf.get("extra") is True\n \n \n def test_checkouts_file_remove(tmp_path):\n@@ -146,8 +146,7 @@ def test_source_docs():\n \n def test_sources_file_data():\n     sf = SourcesFile(SOURCES_FILE)\n-    # Note that the keys are lowercase.\n-    assert sorted(sf.data.keys()) == ["docs", "plone", "plone.alterego", "plone.base"]\n+    assert sorted(sf.data.keys()) == ["Plone", "docs", "plone.alterego", "plone.base"]\n \n \n def test_sources_file_contains():\n@@ -220,7 +219,7 @@ def test_sources_file_rewrite(tmp_path):\n \n [sources]\n docs = git ${remotes:plone}/documentation.git branch=6.0 path=${buildout:docs-directory} egg=false\n-plone = git ${remotes:plone}/Plone.git pushurl=${remotes:plone_push}/Plone.git branch=6.0.x\n+Plone = git ${remotes:plone}/Plone.git pushurl=${remotes:plone_push}/Plone.git branch=6.0.x\n plone.alterego = git ${remotes:plone}/plone.alterego.git branch=master\n plone.base = git ${remotes:plone}/plone.base.git branch=main\n """\n@@ -229,15 +228,14 @@ def test_sources_file_rewrite(tmp_path):\n \n def test_versions_file_versions():\n     vf = VersionsFile(VERSIONS_FILE)\n-    # All versions are reported lowercased.\n     assert vf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "package": "1.0",\n         "pyspecific": "1.0",\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -275,13 +273,13 @@ def test_versions_file_versions_with_markers():\n     # All versions are reported lowercased.\n     assert vf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "onepython": {"python312": "2.1"},\n         "package": "1.0",\n         "pyspecific": {"": "1.0", "python312": "2.0"},\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -452,7 +450,6 @@ def test_versions_file_rewrite(tmp_path):\n     # - the extends line is on a separate line\n     # - all comments are removed\n     # - the duplicate is removed\n-    # - all package names are lowercased\n     assert (\n         copy_path.read_text()\n         == """[buildout]\n@@ -461,12 +458,12 @@ def test_versions_file_rewrite(tmp_path):\n \n [versions]\n annotated = 1.0\n-camelcase = 1.0\n+CamelCase = 1.0\n duplicate = 1.0\n lowercase = 1.0\n package = 1.0\n pyspecific = 1.0\n-uppercase = 1.0\n+UPPERCASE = 1.0\n """\n     )\n \ndiff --git a/plone/releaser/tests/test_pip.py b/plone/releaser/tests/test_pip.py\nindex 78116e6..7386364 100644\n--- a/plone/releaser/tests/test_pip.py\n+++ b/plone/releaser/tests/test_pip.py\n@@ -17,10 +17,11 @@\n \n def test_mxdev_file_data():\n     mf = IniFile(MXDEV_FILE)\n-    # The data maps lower case to actual case.\n+    # The data used to map lower case to actual case,\n+    # but now actual case to True.\n     assert mf.data == {\n-        "camelcase": "CamelCase",\n-        "package": "package",\n+        "CamelCase": True,\n+        "package": True,\n     }\n \n \n@@ -36,12 +37,11 @@ def test_mxdev_file_contains():\n \n def test_mxdev_file_get():\n     mf = IniFile(MXDEV_FILE)\n-    # The data maps lower case to actual case.\n-    assert mf["package"] == "package"\n-    assert mf.get("package") == "package"\n-    assert mf["camelcase"] == "CamelCase"\n-    assert mf["CAMELCASE"] == "CamelCase"\n-    assert mf["CamelCase"] == "CamelCase"\n+    assert mf["package"] is True\n+    assert mf.get("package") is True\n+    assert mf["camelcase"] is True\n+    assert mf["CAMELCASE"] is True\n+    assert mf["CamelCase"] is True\n     with pytest.raises(KeyError):\n         mf["unused"]\n     assert mf.get("unused") is None\n@@ -57,7 +57,7 @@ def test_mxdev_file_add_known(tmp_path):\n     # Let\'s read it fresh, for good measure.\n     mf = IniFile(copy_path)\n     assert "unused" in mf\n-    assert mf["unused"] == "unused"\n+    assert mf["unused"] is True\n \n \n def test_mxdev_file_add_unknown(tmp_path):\n@@ -137,12 +137,12 @@ def test_constraints_file_constraints():\n     # All constraints are reported lowercased.\n     assert cf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "package": "1.0",\n         "pyspecific": "1.0",\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -276,13 +276,13 @@ def test_constraints_file_constraints_with_markers():\n     # All constraints are reported lowercased.\n     assert cf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "onepython": {\'python_version=="3.12"\': "2.1"},\n         "package": "1.0",\n         "pyspecific": {"": "1.0", \'python_version=="3.12"\': "2.0"},\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -300,17 +300,16 @@ def test_constraints_file_rewrite(tmp_path):\n     # - the extends line is on a separate line\n     # - all comments are removed\n     # - the duplicate is removed\n-    # - all package names are lowercased\n     assert (\n         copy_path.read_text()\n         == """-c https://zopefoundation.github.io/Zope/releases/5.8.3/constraints.txt\n annotated==1.0\n-camelcase==1.0\n+CamelCase==1.0\n duplicate==1.0\n lowercase==1.0\n package==1.0\n pyspecific==1.0\n-uppercase==1.0\n+UPPERCASE==1.0\n """\n     )\n \ndiff --git a/plone/releaser/tests/test_versions2constraints.py b/plone/releaser/tests/test_versions2constraints.py\nindex 2e19522..42dc77c 100644\n--- a/plone/releaser/tests/test_versions2constraints.py\n+++ b/plone/releaser/tests/test_versions2constraints.py\n@@ -28,13 +28,13 @@ def test_versions2constraints(tmp_path):\n         constraints_file.read_text()\n         == """-c https://zopefoundation.github.io/Zope/releases/5.8.3/constraints.txt\n annotated==1.0\n-camelcase==1.0\n+CamelCase==1.0\n duplicate==1.0\n lowercase==1.0\n package==1.0\n pyspecific==1.0\n pyspecific==2.0; python_version == "3.12"\n-uppercase==1.0\n+UPPERCASE==1.0\n onepython==2.1; python_version == "3.12"\n """\n     )\n'

Repository: plone.releaser


Branch: refs/heads/master
Date: 2024-04-02T14:43:04+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/41fd5b237f9d6b88f37fa4a9feaac971053550fe

Merge pull request #66 from plone/maurits-preserve-case

Preserve the case of package names in versions2constraints and friends.

Files changed:
A news/65.bugfix
M plone/releaser/base.py
M plone/releaser/buildout.py
M plone/releaser/pip.py
M plone/releaser/tests/test_buildout.py
M plone/releaser/tests/test_pip.py
M plone/releaser/tests/test_versions2constraints.py

b'diff --git a/news/65.bugfix b/news/65.bugfix\nnew file mode 100644\nindex 0000000..513252e\n--- /dev/null\n+++ b/news/65.bugfix\n@@ -0,0 +1,2 @@\n+Preserve the case of package names in versions2constraints and friends.\n+[maurits]\ndiff --git a/plone/releaser/base.py b/plone/releaser/base.py\nindex 536710f..a401a2b 100644\n--- a/plone/releaser/base.py\n+++ b/plone/releaser/base.py\n@@ -12,16 +12,27 @@ def __init__(self, file_location):\n     def data(self):\n         raise NotImplementedError\n \n+    @property\n+    def lowerkeys(self):\n+        # Map from lower case key to actual key in the data.\n+        return {key.lower(): key for key in self.data}\n+\n     def __iter__(self):\n         return self.data.__iter__()\n \n     def __contains__(self, package_name):\n-        return package_name.lower() in self.data\n+        return package_name.lower() in self.lowerkeys\n \n     def __getitem__(self, package_name):\n-        if package_name in self:\n-            return self.data.get(package_name.lower())\n-        raise KeyError\n+        # self.data may be a defaultdict, so we cannot use\n+        # \'return self.data[package_name]\'\n+        if package_name not in self:\n+            raise KeyError(package_name)\n+        # The package_name is in the data, but the case might differ.\n+        if package_name in self.data:\n+            return self.data[package_name]\n+        actual_key = self.lowerkeys[package_name.lower()]\n+        return self.data[actual_key]\n \n     def __setitem__(self, package_name, value):\n         raise NotImplementedError\ndiff --git a/plone/releaser/buildout.py b/plone/releaser/buildout.py\nindex 5dc5aeb..2b42a61 100644\n--- a/plone/releaser/buildout.py\n+++ b/plone/releaser/buildout.py\n@@ -82,10 +82,8 @@ def config(self):\n         # For versions.cfg we had strict=False, for the others not.\n         # Let\'s use it always.\n         config = ConfigParser(interpolation=ExtendedInterpolation(), strict=False)\n-        # In SourcesFile we had this:\n-        # config.optionxform = str\n-        # This seems to make everything lowercase, and makes tests fail.\n-        # TODO: we could use it if we choose.\n+        # Preserve the case instead of the default lowercase transform:\n+        config.optionxform = str\n         with self.path.open() as f:\n             config.read_file(f)\n         # Especially in sources.cfg we may need to define a few extra variables\n@@ -103,7 +101,8 @@ def raw_config(self):\n         # Read the same data, but without interpolation.\n         # So keep a url like \'${settings:plone}/package.git\'\n         config = ConfigParser(strict=False)\n-        # config.optionxform = str\n+        # Preserve the case instead of the default lowercase transform:\n+        config.optionxform = str\n         with self.path.open() as f:\n             config.read_file(f)\n         return config\n@@ -161,7 +160,7 @@ def data(self):\n         for section in self.config.sections():\n             if section == "versions":\n                 for package, version in self.config[section].items():\n-                    # Note: the package names are lower case.\n+                    # Note: the package names used to be lower case, but not anymore.\n                     versions[package][""] = version\n             if not self.with_markers:\n                 continue\n@@ -298,7 +297,7 @@ def pins_to_pip(self):\n \n         An option would be to always do this for Buildout as well.\n         Or have a command to normalize a buildout file, with this and other\n-        small changes like making all package named lower case.\n+        small changes.\n         """\n         new_data = {}\n         for package, version in self.data.items():\n@@ -353,7 +352,7 @@ def data(self):\n         # I don\'t think we need to support [sources:marker].\n         for name, value in self.config["sources"].items():\n             source = Source.create_from_string(value)\n-            sources_dict[name.lower()] = source\n+            sources_dict[name] = source\n         return sources_dict\n \n     @property\n@@ -362,7 +361,7 @@ def raw_data(self):\n         # I don\'t think we need to support [sources:marker].\n         for name, value in self.raw_config["sources"].items():\n             source = Source.create_from_string(value)\n-            sources_dict[name.lower()] = source\n+            sources_dict[name] = source\n         return sources_dict\n \n     def __setitem__(self, package_name, value):\n@@ -407,12 +406,13 @@ def always_checkout(self):\n     def data(self):\n         # I don\'t think we need to support [buildout:marker].\n         checkouts = self.config.get("buildout", "auto-checkout")\n-        # Map from lower case to actual case, so we can find the package.\n+        # In this case a set or list would be fine, but in all other\n+        # cases the data is a dictionary, so let\'s use that.\n         mapping = {}\n         for package in checkouts.splitlines():\n             if not package:\n                 continue\n-            mapping[package.lower()] = package\n+            mapping[package] = True\n         return mapping\n \n     def __setitem__(self, package_name, enabled=True):\n@@ -448,11 +448,7 @@ def rewrite(self):\n         if self.always_checkout:\n             contents.append(f"always-checkout = {self.always_checkout}"),\n         contents.append("auto-checkout =")\n-        # self.values has the original case.\n-        # We could iterate over \'self\' to get lowercase,\n-        # which is what we get in most other places.\n-        # But for now let\'s use the info we have.\n-        for package in self.values():\n+        for package in self:\n             contents.append(f"    {package}")\n         contents.append("")\n         new_contents = "\\n".join(contents)\ndiff --git a/plone/releaser/pip.py b/plone/releaser/pip.py\nindex 0dda487..67baad0 100644\n--- a/plone/releaser/pip.py\n+++ b/plone/releaser/pip.py\n@@ -60,7 +60,7 @@ def data(self):\n             if "==" not in line:\n                 # We might want to support e.g. \'>=\', but for now keep it simple.\n                 continue\n-            package = line.split("==")[0].strip().lower()\n+            package = line.split("==")[0].strip()\n             version = line.split("==", 1)[1].strip()\n             # The line could also contain environment markers like this:\n             # "; python_version >= \'3.0\'"\n@@ -165,8 +165,7 @@ def data(self):\n         for package in self.config.sections():\n             use = to_bool(self.config[package].get("use", self.default_use))\n             if use:\n-                # Map from lower case to actual case, so we can find the package.\n-                checkouts[package.lower()] = package\n+                checkouts[package] = True\n         return checkouts\n \n     @property\n@@ -174,10 +173,14 @@ def sections(self):\n         # If we want to use a package, we must first know that it exists.\n         sections = {}\n         for package in self.config.sections():\n-            # Map from lower case to actual case, so we can find the package.\n-            sections[package.lower()] = package\n+            sections[package] = True\n         return sections\n \n+    @property\n+    def lowerkeys_section(self):\n+        # Map from lower case key to actual key in the sections.\n+        return {key.lower(): key for key in self.sections}\n+\n     def __setitem__(self, package_name, enabled=True):\n         """Enable or disable a checkout.\n \n@@ -193,7 +196,7 @@ def __setitem__(self, package_name, enabled=True):\n         So if the package we want to enable is not defined, meaning it has no\n         section, then we should fail loudly.\n         """\n-        stored_package_name = self.sections.get(package_name.lower())\n+        stored_package_name = self.lowerkeys_section.get(package_name.lower())\n         if not stored_package_name:\n             raise KeyError(\n                 f"{self.file_location}: There is no definition for {package_name}"\n@@ -267,7 +270,7 @@ def rewrite(self):\n         for key, value in self.config["settings"].items():\n             contents.append(f"{key} = {value}")\n \n-        for package in self.sections.values():\n+        for package in self.sections:\n             contents.append("")\n             contents.append(f"[{package}]")\n             for key, value in self.config[package].items():\ndiff --git a/plone/releaser/tests/test_buildout.py b/plone/releaser/tests/test_buildout.py\nindex fcf089c..95e28a2 100644\n--- a/plone/releaser/tests/test_buildout.py\n+++ b/plone/releaser/tests/test_buildout.py\n@@ -21,10 +21,11 @@\n \n def test_checkouts_file_data():\n     cf = CheckoutsFile(CHECKOUTS_FILE)\n-    # The data maps lower case to actual case.\n+    # The data used to map lower case to actual case,\n+    # but now actual case to True.\n     assert cf.data == {\n-        "camelcase": "CamelCase",\n-        "package": "package",\n+        "CamelCase": True,\n+        "package": True,\n     }\n \n \n@@ -40,12 +41,11 @@ def test_checkouts_file_contains():\n \n def test_checkouts_file_get():\n     cf = CheckoutsFile(CHECKOUTS_FILE)\n-    # The data maps lower case to actual case.\n-    assert cf["package"] == "package"\n-    assert cf.get("package") == "package"\n-    assert cf["camelcase"] == "CamelCase"\n-    assert cf["CAMELCASE"] == "CamelCase"\n-    assert cf["CamelCase"] == "CamelCase"\n+    assert cf["package"] is True\n+    assert cf.get("package") is True\n+    assert cf["camelcase"] is True\n+    assert cf["CAMELCASE"] is True\n+    assert cf["CamelCase"] is True\n     with pytest.raises(KeyError):\n         cf["nope"]\n \n@@ -60,7 +60,7 @@ def test_checkouts_file_add(tmp_path):\n     # Let\'s read it fresh, for good measure.\n     cf = CheckoutsFile(copy_path)\n     assert "Extra" in cf\n-    assert cf.get("extra") == "Extra"\n+    assert cf.get("extra") is True\n \n \n def test_checkouts_file_remove(tmp_path):\n@@ -146,8 +146,7 @@ def test_source_docs():\n \n def test_sources_file_data():\n     sf = SourcesFile(SOURCES_FILE)\n-    # Note that the keys are lowercase.\n-    assert sorted(sf.data.keys()) == ["docs", "plone", "plone.alterego", "plone.base"]\n+    assert sorted(sf.data.keys()) == ["Plone", "docs", "plone.alterego", "plone.base"]\n \n \n def test_sources_file_contains():\n@@ -220,7 +219,7 @@ def test_sources_file_rewrite(tmp_path):\n \n [sources]\n docs = git ${remotes:plone}/documentation.git branch=6.0 path=${buildout:docs-directory} egg=false\n-plone = git ${remotes:plone}/Plone.git pushurl=${remotes:plone_push}/Plone.git branch=6.0.x\n+Plone = git ${remotes:plone}/Plone.git pushurl=${remotes:plone_push}/Plone.git branch=6.0.x\n plone.alterego = git ${remotes:plone}/plone.alterego.git branch=master\n plone.base = git ${remotes:plone}/plone.base.git branch=main\n """\n@@ -229,15 +228,14 @@ def test_sources_file_rewrite(tmp_path):\n \n def test_versions_file_versions():\n     vf = VersionsFile(VERSIONS_FILE)\n-    # All versions are reported lowercased.\n     assert vf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "package": "1.0",\n         "pyspecific": "1.0",\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -275,13 +273,13 @@ def test_versions_file_versions_with_markers():\n     # All versions are reported lowercased.\n     assert vf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "onepython": {"python312": "2.1"},\n         "package": "1.0",\n         "pyspecific": {"": "1.0", "python312": "2.0"},\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -452,7 +450,6 @@ def test_versions_file_rewrite(tmp_path):\n     # - the extends line is on a separate line\n     # - all comments are removed\n     # - the duplicate is removed\n-    # - all package names are lowercased\n     assert (\n         copy_path.read_text()\n         == """[buildout]\n@@ -461,12 +458,12 @@ def test_versions_file_rewrite(tmp_path):\n \n [versions]\n annotated = 1.0\n-camelcase = 1.0\n+CamelCase = 1.0\n duplicate = 1.0\n lowercase = 1.0\n package = 1.0\n pyspecific = 1.0\n-uppercase = 1.0\n+UPPERCASE = 1.0\n """\n     )\n \ndiff --git a/plone/releaser/tests/test_pip.py b/plone/releaser/tests/test_pip.py\nindex 78116e6..7386364 100644\n--- a/plone/releaser/tests/test_pip.py\n+++ b/plone/releaser/tests/test_pip.py\n@@ -17,10 +17,11 @@\n \n def test_mxdev_file_data():\n     mf = IniFile(MXDEV_FILE)\n-    # The data maps lower case to actual case.\n+    # The data used to map lower case to actual case,\n+    # but now actual case to True.\n     assert mf.data == {\n-        "camelcase": "CamelCase",\n-        "package": "package",\n+        "CamelCase": True,\n+        "package": True,\n     }\n \n \n@@ -36,12 +37,11 @@ def test_mxdev_file_contains():\n \n def test_mxdev_file_get():\n     mf = IniFile(MXDEV_FILE)\n-    # The data maps lower case to actual case.\n-    assert mf["package"] == "package"\n-    assert mf.get("package") == "package"\n-    assert mf["camelcase"] == "CamelCase"\n-    assert mf["CAMELCASE"] == "CamelCase"\n-    assert mf["CamelCase"] == "CamelCase"\n+    assert mf["package"] is True\n+    assert mf.get("package") is True\n+    assert mf["camelcase"] is True\n+    assert mf["CAMELCASE"] is True\n+    assert mf["CamelCase"] is True\n     with pytest.raises(KeyError):\n         mf["unused"]\n     assert mf.get("unused") is None\n@@ -57,7 +57,7 @@ def test_mxdev_file_add_known(tmp_path):\n     # Let\'s read it fresh, for good measure.\n     mf = IniFile(copy_path)\n     assert "unused" in mf\n-    assert mf["unused"] == "unused"\n+    assert mf["unused"] is True\n \n \n def test_mxdev_file_add_unknown(tmp_path):\n@@ -137,12 +137,12 @@ def test_constraints_file_constraints():\n     # All constraints are reported lowercased.\n     assert cf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "package": "1.0",\n         "pyspecific": "1.0",\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -276,13 +276,13 @@ def test_constraints_file_constraints_with_markers():\n     # All constraints are reported lowercased.\n     assert cf.data == {\n         "annotated": "1.0",\n-        "camelcase": "1.0",\n+        "CamelCase": "1.0",\n         "duplicate": "1.0",\n         "lowercase": "1.0",\n         "onepython": {\'python_version=="3.12"\': "2.1"},\n         "package": "1.0",\n         "pyspecific": {"": "1.0", \'python_version=="3.12"\': "2.0"},\n-        "uppercase": "1.0",\n+        "UPPERCASE": "1.0",\n     }\n \n \n@@ -300,17 +300,16 @@ def test_constraints_file_rewrite(tmp_path):\n     # - the extends line is on a separate line\n     # - all comments are removed\n     # - the duplicate is removed\n-    # - all package names are lowercased\n     assert (\n         copy_path.read_text()\n         == """-c https://zopefoundation.github.io/Zope/releases/5.8.3/constraints.txt\n annotated==1.0\n-camelcase==1.0\n+CamelCase==1.0\n duplicate==1.0\n lowercase==1.0\n package==1.0\n pyspecific==1.0\n-uppercase==1.0\n+UPPERCASE==1.0\n """\n     )\n \ndiff --git a/plone/releaser/tests/test_versions2constraints.py b/plone/releaser/tests/test_versions2constraints.py\nindex 2e19522..42dc77c 100644\n--- a/plone/releaser/tests/test_versions2constraints.py\n+++ b/plone/releaser/tests/test_versions2constraints.py\n@@ -28,13 +28,13 @@ def test_versions2constraints(tmp_path):\n         constraints_file.read_text()\n         == """-c https://zopefoundation.github.io/Zope/releases/5.8.3/constraints.txt\n annotated==1.0\n-camelcase==1.0\n+CamelCase==1.0\n duplicate==1.0\n lowercase==1.0\n package==1.0\n pyspecific==1.0\n pyspecific==2.0; python_version == "3.12"\n-uppercase==1.0\n+UPPERCASE==1.0\n onepython==2.1; python_version == "3.12"\n """\n     )\n'

