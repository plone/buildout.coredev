Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-04-16T18:04:32+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/dc685e2061ebd24b4660c0ab70fafd2deacce236

respect allowed types in paste

Files changed:
M plone/dexterity/content.py
M plone/dexterity/tests/test_content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 0bf92de..ad1255f 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -273,6 +273,12 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n         # allowed content types) to also ask the FTI if construction is\n         # allowed.\n         super(PasteBehaviourMixin, self)._verifyObjectPaste(obj, validate_src)\n+        portal_type = getattr(aq_base(obj), "portal_type", None)\n+        constrains = IConstrainTypes(self, None)\n+        if constrains:\n+            allowed_ids = [i.getId() for i in constrains.allowedContentTypes()]\n+            if portal_type not in allowed_ids:\n+                raise ValueError("Disallowed subobject type: %s" % portal_type)\n         if validate_src:\n             portal_type = getattr(aq_base(obj), \'portal_type\', None)\n             if portal_type:\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex bd86c50..4d37d23 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -18,6 +18,7 @@\n from plone.folder.default import DefaultOrdering\n from Products.CMFCore.interfaces import ITypesTool\n from Products.CMFPlone.interfaces import IConstrainTypes\n+from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n from pytz import timezone\n from zope.annotation.attribute import AttributeAnnotations\n from zope.component import getUtility\n@@ -1086,6 +1087,64 @@ def test_verifyObjectPaste_fti_does_not_allow_content(self):\n             True\n         )\n \n+    def test_verifyObjectPaste_locally_disallowed_contents(self):\n+        from Products.CMFCore.interfaces import ITypeInformation\n+        \n+        class DummyConstrainTypes(object):\n+\n+            def __init__(self, context):\n+                self.context = context\n+\n+            def allowedContentTypes(self):\n+\n+                fti = getUtility(IDexterityFTI, name=u"news")\n+                return [fti]\n+\n+        self.mock_adapter(\n+            DummyConstrainTypes, IConstrainTypes, (IDexterityContainer, ))\n+\n+        # FTI mock\n+        fti_mock = Mock(wraps=DexterityFTI(u"news"))\n+        self.mock_utility(fti_mock, IDexterityFTI, name=u"news")\n+\n+        fti_mock2 = Mock()\n+        fti_mock2.isConstructionAllowed = Mock(return_value=True)\n+        self.mock_utility(fti_mock2, ITypeInformation, name=\'document\')\n+\n+        mock_pt = Mock()\n+        mock_pt.getTypeInfo = Mock(return_value=None)\n+        self.mock_tool(mock_pt, \'portal_types\')\n+        self.mock_utility(mock_pt, ITypesTool)\n+\n+        document = Item(id=\'test document\')\n+        document.__factory_meta_type__ = \'document\'\n+        document.portal_type = \'document\'\n+        news = Item(id=\'test news\')\n+        news.__factory_meta_type__ = \'news\'\n+        news.portal_type = \'news\'\n+\n+        container = Container(id="testfolder")\n+        container.all_meta_types = [{\'name\': \'document\',\n+                                     \'action\': None,\n+                                     \'permission\': \'View\'},{\'name\': \'news\',\n+                                     \'action\': None,\n+                                     \'permission\': \'View\'}]\n+        container.manage_permission(\'View\', (\'Anonymous\',))\n+        container[\'test-document\'] = document\n+        container[\'test-news\'] = news\n+        document_content = container[\'test-document\']\n+        news_content = container[\'test-news\']\n+\n+        # can paste news\n+        container._verifyObjectPaste(news_content, False)\n+        # cannot paste documents\n+        self.assertRaises(\n+            ValueError,\n+            container._verifyObjectPaste,\n+            document_content,\n+            False\n+        )\n+\n     def test_verifyObjectPaste_fti_does_allow_content(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n         original_container = Container(id=\'parent\')\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-04-16T18:07:03+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/fc393aa9cfb103786812d28bd0e70c55f9c4acfd

add changelog

Files changed:
A news/146.bug

b'diff --git a/news/146.bug b/news/146.bug\nnew file mode 100644\nindex 00000000..ff3beff7\n--- /dev/null\n+++ b/news/146.bug\n@@ -0,0 +1 @@\n+Respect locally allowed types when pasting objects [cekk]\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-10-26T11:07:37+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/a43a39a576f35a5f7e7ae96c8c34163ef6a28c2f

Merge branch 'master' into respect_allowed_types_in_paste

Files changed:
M CHANGES.rst
M plone/__init__.py
M plone/dexterity/bbb.py
M plone/dexterity/behavior.py
M plone/dexterity/browser/add.py
M plone/dexterity/browser/base.py
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/content.py
M plone/dexterity/events.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/interfaces.py
M plone/dexterity/primary.py
M plone/dexterity/schema.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/schemata.py
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_exportimport.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c3679ec..74d57b5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,53 @@ Changelog\n \n .. towncrier release notes start\n \n+2.10.4 (2021-10-07)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Catch maximum recursion error when lookup FTI\n+  [petschki] (#155)\n+- Optimize local components access by shortcutting `utilities` attribute access. [jensens] (#156)\n+\n+\n+2.10.3 (2021-09-01)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Fix ft._updateProperty so it doesn\'t break when receiving an empty value.\n+  This happens when an DX FTI is part of a Generic Setup baseline import.\n+  Update more code to work when the Plone Site is a dexterity item.\n+  [jaroel] (#85)\n+- Codestyle black and isort [jensens] (#154)\n+\n+\n+2.10.2 (2021-07-29)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Fix export/import of content in Python 3.\n+  Fixes `issue 124 <https://github.com/plone/plone.dexterity/issues/124>`_.\n+  Also fixes the tests in combination with newest ``Products.GenericSetup`` 2.1.2.\n+  [maurits] (#124)\n+\n+\n+2.10.1 (2021-06-30)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Officially support Plone 6.0 and Python 3.9.\n+  No code changes.\n+  [maurits] (#1)\n+\n+\n 2.10.0 (2020-10-12)\n -------------------\n \n@@ -23,7 +70,7 @@ Bug fixes:\n \n \n - Fixes test to work clean with zope.interface.\n-  Interfaces are hashed based on just their name and module. \n+  Interfaces are hashed based on just their name and module.\n   So every one of these local `IBlank` interfaces will hash the same way, and be treated the same for purposes of zope.interface\'s `_dependents`.\n   Thus in tests mock interfaces must not be used under the same name in the same module.\n   [jensens] (#135)\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nindex d92c75f..9b3770e 100644\n--- a/plone/dexterity/bbb.py\n+++ b/plone/dexterity/bbb.py\n@@ -27,6 +27,7 @@ def dav__init(self, request, response):\n     def dav__validate(self, object, methodname, REQUEST):\n         pass\n \n-    def dav__simpleifhandler(self, request, response, method=\'PUT\',\n-                             col=0, url=None, refresh=0):\n+    def dav__simpleifhandler(\n+        self, request, response, method="PUT", col=0, url=None, refresh=0\n+    ):\n         pass\ndiff --git a/plone/dexterity/behavior.py b/plone/dexterity/behavior.py\nindex 35405a6..bf015f3 100644\n--- a/plone/dexterity/behavior.py\n+++ b/plone/dexterity/behavior.py\n@@ -9,8 +9,7 @@\n @implementer(IBehaviorAssignable)\n @adapter(IDexterityContent)\n class DexterityBehaviorAssignable(object):\n-    """Support plone.behavior behaviors stored in the FTI\n-    """\n+    """Support plone.behavior behaviors stored in the FTI"""\n \n     def __init__(self, context):\n         self.context = context\n@@ -22,7 +21,5 @@ def supports(self, behavior_interface):\n         return False\n \n     def enumerateBehaviors(self):\n-        for behavior in SCHEMA_CACHE.behavior_registrations(\n-            self.context.portal_type\n-        ):\n+        for behavior in SCHEMA_CACHE.behavior_registrations(self.context.portal_type):\n             yield behavior\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 0c05d86..7308769 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -44,7 +44,7 @@ def __init__(self, context, request, ti=None):\n         if ti is not None:\n             self.ti = ti\n             self.portal_type = ti.getId()\n-        self.request.form[\'disable_border\'] = True\n+        self.request.form["disable_border"] = True\n \n     @property\n     def additionalSchemata(self):\n@@ -71,7 +71,7 @@ def create(self, data):\n         # to re-define a type through the web that uses the factory from an\n         # existing type, but wants a unique portal_type!\n \n-        if hasattr(content, \'_setPortalTypeName\'):\n+        if hasattr(content, "_setPortalTypeName"):\n             content._setPortalTypeName(fti.getId())\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n@@ -107,7 +107,7 @@ def nextURL(self):\n \n     # Buttons\n \n-    @button.buttonAndHandler(_(\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleAdd(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -117,11 +117,9 @@ def handleAdd(self, action):\n         if obj is not None:\n             # mark only as finished if we get the new object\n             self._finishedAdd = True\n-            IStatusMessage(self.request).addStatusMessage(\n-                self.success_message, "info"\n-            )\n+            IStatusMessage(self.request).addStatusMessage(self.success_message, "info")\n \n-    @button.buttonAndHandler(_(u\'Cancel\'), name=\'cancel\')\n+    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n     def handleCancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(\n             _(u"Add New Item operation cancelled"), "info"\n@@ -131,11 +129,10 @@ def handleCancel(self, action):\n \n     def update(self):\n         if not IDeferSecurityCheck.providedBy(self.request):\n-            allowed_ids = [fti.getId() for fti in\n-                           self.context.allowedContentTypes()]\n+            allowed_ids = [fti.getId() for fti in self.context.allowedContentTypes()]\n             if self.portal_type not in allowed_ids:\n                 raise ValueError(\n-                    \'Subobject type disallowed by IConstrainTypes adapter: %s\'\n+                    "Subobject type disallowed by IConstrainTypes adapter: %s"\n                     % self.portal_type\n                 )\n         super(DefaultAddForm, self).update()\n@@ -145,10 +142,10 @@ def update(self):\n \n     def updateActions(self):\n         super(DefaultAddForm, self).updateActions()\n-        if \'save\' in self.actions:\n+        if "save" in self.actions:\n             self.actions["save"].addClass("context")\n \n-        if \'cancel\' in self.actions:\n+        if "cancel" in self.actions:\n             self.actions["cancel"].addClass("standalone")\n \n     @property\n@@ -156,7 +153,7 @@ def label(self):\n         portal_type = self.portal_type\n         fti = getUtility(IDexterityFTI, name=portal_type)\n         type_name = fti.Title()\n-        return _(u"Add ${name}", mapping={\'name\': type_name})\n+        return _(u"Add ${name}", mapping={"name": type_name})\n \n \n class DefaultAddView(layout.FormWrapper, BrowserPage):\n@@ -175,8 +172,9 @@ def __init__(self, context, request, ti):\n         self.ti = ti\n \n         # Set portal_type name on newly created form instance\n-        if self.form_instance is not None \\\n-           and not getattr(self.form_instance, \'portal_type\', None):\n+        if self.form_instance is not None and not getattr(\n+            self.form_instance, "portal_type", None\n+        ):\n             self.form_instance.portal_type = ti.getId()\n \n \ndiff --git a/plone/dexterity/browser/base.py b/plone/dexterity/browser/base.py\nindex c88ae48..581c96d 100644\n--- a/plone/dexterity/browser/base.py\n+++ b/plone/dexterity/browser/base.py\n@@ -7,10 +7,9 @@\n \n \n class DexterityExtensibleForm(AutoExtensibleForm):\n-    """Mixin class for Dexterity forms that support updatable fields\n-    """\n+    """Mixin class for Dexterity forms that support updatable fields"""\n \n-    default_fieldset_label = _(\'label_schema_default\', default=u\'Default\')\n+    default_fieldset_label = _("label_schema_default", default=u"Default")\n \n     @property\n     def description(self):\n@@ -26,5 +25,4 @@ def schema(self):\n \n     @property\n     def additionalSchemata(self):\n-        return getAdditionalSchemata(context=self.context,\n-                                     portal_type=self.portal_type)\n+        return getAdditionalSchemata(context=self.context, portal_type=self.portal_type)\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex eb55971..e3edcf8 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -21,36 +21,33 @@ class DefaultEditForm(DexterityExtensibleForm, form.EditForm):\n \n     success_message = _(u"Changes saved")\n \n-    @button.buttonAndHandler(_(u\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_(u"Save"), name="save")\n     def handleApply(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(\n-            self.success_message, "info"\n-        )\n+        IStatusMessage(self.request).addStatusMessage(self.success_message, "info")\n         self.request.response.redirect(self.nextURL())\n         notify(EditFinishedEvent(self.context))\n \n-    @button.buttonAndHandler(_(u\'Cancel\'), name=\'cancel\')\n+    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Edit cancelled"), "info"\n-        )\n+        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled"), "info")\n         self.request.response.redirect(self.nextURL())\n         notify(EditCancelledEvent(self.context))\n \n     def nextURL(self):\n         view_url = self.context.absolute_url()\n-        portal_type = getattr(self, \'portal_type\', None)\n+        portal_type = getattr(self, "portal_type", None)\n         if portal_type is not None:\n             registry = getUtility(IRegistry)\n             use_view_action = registry.get(\n-                \'plone.types_use_view_action_in_listings\', [])\n+                "plone.types_use_view_action_in_listings", []\n+            )\n             if portal_type in use_view_action:\n-                view_url = view_url + \'/view\'\n+                view_url = view_url + "/view"\n         return view_url\n \n     def update(self):\n@@ -64,10 +61,10 @@ def update(self):\n     def updateActions(self):\n         super(DefaultEditForm, self).updateActions()\n \n-        if \'save\' in self.actions:\n+        if "save" in self.actions:\n             self.actions["save"].addClass("context")\n \n-        if \'cancel\' in self.actions:\n+        if "cancel" in self.actions:\n             self.actions["cancel"].addClass("standalone")\n \n     @property\n@@ -77,7 +74,8 @@ def fti(self):\n     @property\n     def label(self):\n         type_name = self.fti.Title()\n-        return _(u"Edit ${name}", mapping={\'name\': type_name})\n+        return _(u"Edit ${name}", mapping={"name": type_name})\n+\n \n DefaultEditView = layout.wrap_form(DefaultEditForm)\n classImplements(DefaultEditView, IDexterityEditForm)\ndiff --git a/plone/dexterity/browser/fti.py b/plone/dexterity/browser/fti.py\nindex a3844a1..72df006 100644\n--- a/plone/dexterity/browser/fti.py\n+++ b/plone/dexterity/browser/fti.py\n@@ -4,8 +4,7 @@\n \n \n class FTIAddView(FactoryTypeInformationAddView):\n-    """Add view for the Dexterity FTI type\n-    """\n+    """Add view for the Dexterity FTI type"""\n \n     klass = DexterityFTI\n-    description = u\'Factory Type Information for Dexterity Content Types\'\n+    description = u"Factory Type Information for Dexterity Content Types"\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 719945a..0487ea5 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -42,29 +42,32 @@ def publishTraverse(self, request, name):\n         # If we are trying to traverse to the folder "body" pseudo-object\n         # returned by listDAVObjects(), return that immediately\n \n-        if getattr(request, \'maybe_webdav_client\', False) \\\n-           and name == DAV_FOLDER_DATA_ID:\n-            return FolderDataResource(\n-                DAV_FOLDER_DATA_ID, context\n-            ).__of__(context)\n+        if (\n+            getattr(request, "maybe_webdav_client", False)\n+            and name == DAV_FOLDER_DATA_ID\n+        ):\n+            return FolderDataResource(DAV_FOLDER_DATA_ID, context).__of__(context)\n \n-        defaultTraversal = super(\n-            DexterityPublishTraverse,\n-            self).publishTraverse(request, name)\n+        defaultTraversal = super(DexterityPublishTraverse, self).publishTraverse(\n+            request, name\n+        )\n \n         # If this is a WebDAV PUT/PROPFIND/PROPPATCH request, don\'t acquire\n         # things. If we did, we couldn\'t create a new object with PUT, for\n         # example, because the acquired object would shadow the NullResource\n \n-        if getattr(request, \'maybe_webdav_client\', False) \\\n-           and request.get(\'REQUEST_METHOD\', \'GET\') not in (\'GET\', \'POST\',) \\\n-           and IAcquirer.providedBy(defaultTraversal):\n+        if (\n+            getattr(request, "maybe_webdav_client", False)\n+            and request.get("REQUEST_METHOD", "GET")\n+            not in (\n+                "GET",\n+                "POST",\n+            )\n+            and IAcquirer.providedBy(defaultTraversal)\n+        ):\n             parent = aq_parent(aq_inner(defaultTraversal))\n             if parent is not None and parent is not context:\n-                return NullResource(\n-                    self.context,\n-                    name,\n-                    request).__of__(self.context)\n+                return NullResource(self.context, name, request).__of__(self.context)\n \n         return defaultTraversal\n \n@@ -74,8 +77,12 @@ def browserDefault(self, request):\n         # default view. The ZPublisher\'s WebDAV implementation doesn\'t\n         # deal well with default views.\n \n-        if getattr(request, \'maybe_webdav_client\', False) and \\\n-           request.get(\'REQUEST_METHOD\', \'GET\') not in (\'GET\', \'POST\',):\n+        if getattr(request, "maybe_webdav_client", False) and request.get(\n+            "REQUEST_METHOD", "GET"\n+        ) not in (\n+            "GET",\n+            "POST",\n+        ):\n             return self.context, ()\n \n         return super(DexterityPublishTraverse, self).browserDefault(request)\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex ad1255f..81a8b7a 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -61,34 +61,34 @@\n \n # see comment in DexterityContent.__getattr__ method\n ATTRIBUTE_NAMES_TO_IGNORE = (\n-    \'_dav_writelocks\',\n-    \'aq_inner\',\n-    \'getCurrentSkinName\',\n-    \'getURL\',\n-    \'im_self\',  # python 2 only, on python 3 it was renamed to __self__\n-    \'plone_utils\',\n-    \'portal_membership\',\n-    \'portal_placeful_workflow\',\n-    \'portal_properties\',\n-    \'translation_service\',\n+    "_dav_writelocks",\n+    "aq_inner",\n+    "getCurrentSkinName",\n+    "getURL",\n+    "im_self",  # python 2 only, on python 3 it was renamed to __self__\n+    "plone_utils",\n+    "portal_membership",\n+    "portal_placeful_workflow",\n+    "portal_properties",\n+    "translation_service",\n+    "utilities",\n )\n \n-ASSIGNABLE_CACHE_KEY = \'__plone_dexterity_assignable_cache__\'\n+ASSIGNABLE_CACHE_KEY = "__plone_dexterity_assignable_cache__"\n \n \n def _default_from_schema(context, schema, fieldname):\n-    """helper to lookup default value of a field\n-    """\n+    """helper to lookup default value of a field"""\n     if schema is None:\n         return _marker\n     field = schema.get(fieldname, None)\n     if field is None:\n         return _marker\n-    default_factory = getattr(field, \'defaultFactory\', None)\n+    default_factory = getattr(field, "defaultFactory", None)\n     if (\n         # check for None to avoid one expensive providedBy (called often)\n-        default_factory is not None and\n-        IContextAwareDefaultFactory.providedBy(default_factory)\n+        default_factory is not None\n+        and IContextAwareDefaultFactory.providedBy(default_factory)\n     ):\n         return deepcopy(field.bind(context).default)\n     return deepcopy(field.default)\n@@ -104,7 +104,7 @@ def get_assignable(context):\n     request = getRequest()\n     if not request:\n         return IBehaviorAssignable(context, None)\n-    cache_key = getattr(context, \'_p_oid\', None)\n+    cache_key = getattr(context, "_p_oid", None)\n     if not cache_key:\n         return IBehaviorAssignable(context, None)\n     assignable_cache = getattr(request, ASSIGNABLE_CACHE_KEY, _marker)\n@@ -131,10 +131,10 @@ def __get__(self, inst, cls=None):\n             return getObjectSpecification(cls)\n \n         # get direct specification\n-        spec = getattr(inst, \'__provides__\', None)\n+        spec = getattr(inst, "__provides__", None)\n \n         # avoid recursion - fall back on default\n-        if getattr(_recursion_detection, \'blocked\', False):\n+        if getattr(_recursion_detection, "blocked", False):\n             return spec\n \n         # If the instance doesn\'t have a __provides__ attribute, get the\n@@ -143,7 +143,7 @@ def __get__(self, inst, cls=None):\n             spec = implementedBy(cls)\n \n         # Find the data we need to know if our cache needs to be invalidated\n-        portal_type = getattr(inst, \'portal_type\', None)\n+        portal_type = getattr(inst, "portal_type", None)\n \n         # If the instance has no portal type, then we\'re done.\n         if portal_type is None:\n@@ -151,51 +151,52 @@ def __get__(self, inst, cls=None):\n \n         # Find the cached value. This calculation is expensive and called\n         # hundreds of times during each request, so we require a fast cache\n-        cache = getattr(inst, \'_v__providedBy__\', None)\n-\n-        # See if we have a current cache. Reasons to do this include:\n-        #\n-        #  - The FTI was modified.\n-        #  - The instance was modified and persisted since the cache was built.\n-        #  - The instance has a different direct specification.\n-        updated = (\n-            inst._p_mtime,\n-            SCHEMA_CACHE.modified(portal_type),\n-            SCHEMA_CACHE.invalidations,\n-            hash(spec)\n-        )\n-        if cache is not None and cache[:-1] == updated:\n-            if cache[-1] is not None:\n-                return cache[-1]\n-            return spec\n-\n-        main_schema = SCHEMA_CACHE.get(portal_type)\n-        if main_schema:\n-            dynamically_provided = [main_schema]\n-        else:\n-            dynamically_provided = []\n+        cache = getattr(inst, "_v__providedBy__", None)\n+        updated = ()\n+        dynamically_provided = []\n \n         # block recursion\n-        setattr(_recursion_detection, \'blocked\', True)\n+        setattr(_recursion_detection, "blocked", True)\n         try:\n+            # See if we have a current cache. Reasons to do this include:\n+            #\n+            #  - The FTI was modified.\n+            #  - The instance was modified and persisted since the cache was built.\n+            #  - The instance has a different direct specification.\n+            updated = (\n+                inst._p_mtime,\n+                SCHEMA_CACHE.modified(portal_type),\n+                SCHEMA_CACHE.invalidations,\n+                hash(spec),\n+            )\n+            if cache is not None and cache[:-1] == updated:\n+                setattr(_recursion_detection, "blocked", False)\n+                if cache[-1] is not None:\n+                    return cache[-1]\n+                return spec\n+\n+            main_schema = SCHEMA_CACHE.get(portal_type)\n+            if main_schema:\n+                dynamically_provided = [main_schema]\n+            else:\n+                dynamically_provided = []\n+\n             assignable = get_assignable(inst)\n             if assignable is not None:\n                 for behavior_registration in assignable.enumerateBehaviors():\n                     if behavior_registration.marker:\n-                        dynamically_provided.append(\n-                            behavior_registration.marker\n-                        )\n+                        dynamically_provided.append(behavior_registration.marker)\n         finally:\n-            setattr(_recursion_detection, \'blocked\', False)\n+            setattr(_recursion_detection, "blocked", False)\n \n         if not dynamically_provided:\n             # rare case if no schema nor behaviors with markers are set\n-            inst._v__providedBy__ = updated + (None, )\n+            inst._v__providedBy__ = updated + (None,)\n             return spec\n \n         dynamically_provided.append(spec)\n         all_spec = Implements(*dynamically_provided)\n-        inst._v__providedBy__ = updated + (all_spec, )\n+        inst._v__providedBy__ = updated + (all_spec,)\n \n         return all_spec\n \n@@ -208,7 +209,7 @@ class AttributeValidator(Explicit):\n \n     def __call__(self, name, value):\n         # Short circuit for things like views or viewlets\n-        if name == \'\':\n+        if name == "":\n             return 1\n \n         context = aq_parent(self)\n@@ -218,8 +219,7 @@ def __call__(self, name, value):\n         # decides to have behaviors bound on something different than context\n         # or fti, i.e. schemas for subtrees.\n         protection_dict = all_merged_tagged_values_dict(\n-            iterSchemata(context),\n-            READ_PERMISSIONS_KEY\n+            iterSchemata(context), READ_PERMISSIONS_KEY\n         )\n \n         if name not in protection_dict:\n@@ -227,15 +227,12 @@ def __call__(self, name, value):\n \n         permission = queryUtility(IPermission, name=protection_dict[name])\n         if permission is not None:\n-            return getSecurityManager().checkPermission(\n-                permission.title, context\n-            )\n+            return getSecurityManager().checkPermission(permission.title, context)\n \n         return 0\n \n \n class PasteBehaviourMixin(object):\n-\n     def _notifyOfCopyTo(self, container, op=0):\n         """Keep Archetypes\' reference info internally when op == 1 (move)\n         because in those cases we need to keep Archetypes\' refeferences.\n@@ -280,13 +277,11 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n             if portal_type not in allowed_ids:\n                 raise ValueError("Disallowed subobject type: %s" % portal_type)\n         if validate_src:\n-            portal_type = getattr(aq_base(obj), \'portal_type\', None)\n+            portal_type = getattr(aq_base(obj), "portal_type", None)\n             if portal_type:\n                 fti = queryUtility(ITypeInformation, name=portal_type)\n                 if fti is not None and not fti.isConstructionAllowed(self):\n-                    raise ValueError(\n-                        \'You can not add the copied content here.\'\n-                    )\n+                    raise ValueError("You can not add the copied content here.")\n \n     def _getCopy(self, container):\n         # Copy the _v_is_cp and _v_cp_refs flags from the original\n@@ -295,13 +290,13 @@ def _getCopy(self, container):\n         # When the flags are missing, an Archetypes child object will not have\n         # the UID updated in some situations.\n         # Copied from Products.Archetypes.Referenceable.Referenceable._getCopy\n-        is_cp_flag = getattr(self, \'_v_is_cp\', None)\n-        cp_refs_flag = getattr(self, \'_v_cp_refs\', None)\n+        is_cp_flag = getattr(self, "_v_is_cp", None)\n+        cp_refs_flag = getattr(self, "_v_cp_refs", None)\n         ob = super(PasteBehaviourMixin, self)._getCopy(container)\n         if is_cp_flag:\n-            setattr(ob, \'_v_is_cp\', is_cp_flag)\n+            setattr(ob, "_v_is_cp", is_cp_flag)\n         if cp_refs_flag:\n-            setattr(ob, \'_v_cp_refs\', cp_refs_flag)\n+            setattr(ob, "_v_cp_refs", cp_refs_flag)\n         return ob\n \n \n@@ -311,12 +306,10 @@ def _getCopy(self, container):\n     IAttributeUUID,\n     IDublinCore,\n     ICatalogableDublinCore,\n-    IMutableDublinCore\n+    IMutableDublinCore,\n )\n-class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager,\n-                       Contained):\n-    """Base class for Dexterity content\n-    """\n+class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager, Contained):\n+    """Base class for Dexterity content"""\n \n     __providedBy__ = FTIAwareSpecification()\n     __allow_access_to_unprotected_subobjects__ = AttributeValidator()\n@@ -326,23 +319,31 @@ class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager,\n     # portal_type is set by the add view and/or factory\n     portal_type = None\n \n-    title = u\'\'\n-    description = u\'\'\n+    title = u""\n+    description = u""\n     subject = ()\n     creators = ()\n     contributors = ()\n     effective_date = None\n     expiration_date = None\n-    format = \'text/html\'\n-    language = \'\'\n-    rights = \'\'\n+    format = "text/html"\n+    language = ""\n+    rights = ""\n \n     def __init__(\n-            self,\n-            id=None, title=_marker, subject=_marker, description=_marker,\n-            contributors=_marker, effective_date=_marker,\n-            expiration_date=_marker, format=_marker, language=_marker,\n-            rights=_marker, **kwargs):\n+        self,\n+        id=None,\n+        title=_marker,\n+        subject=_marker,\n+        description=_marker,\n+        contributors=_marker,\n+        effective_date=_marker,\n+        expiration_date=_marker,\n+        format=_marker,\n+        language=_marker,\n+        rights=_marker,\n+        **kwargs\n+    ):\n \n         if id is not None:\n             self.id = id\n@@ -384,20 +385,16 @@ def __getattr__(self, name):\n         # Ignore also some other well known names like\n         # Permission, Acquisition and AccessControl related ones.\n         if (\n-            name.startswith(\'__\')\n-            or name.startswith(\'_v\')\n-            or name.endswith(\'_Permission\')\n+            name.startswith("__")\n+            or name.startswith("_v")\n+            or name.endswith("_Permission")\n             or name in ATTRIBUTE_NAMES_TO_IGNORE\n         ):\n             raise AttributeError(name)\n \n         # attribute was not found; try to look it up in the schema and return\n         # a default\n-        value = _default_from_schema(\n-            self,\n-            SCHEMA_CACHE.get(self.portal_type),\n-            name\n-        )\n+        value = _default_from_schema(self, SCHEMA_CACHE.get(self.portal_type), name)\n         if value is not _marker:\n             return value\n \n@@ -407,9 +404,7 @@ def __getattr__(self, name):\n             for behavior_registration in assignable.enumerateBehaviors():\n                 if behavior_registration.interface:\n                     value = _default_from_schema(\n-                        self,\n-                        behavior_registration.interface,\n-                        name\n+                        self, behavior_registration.interface, name\n                     )\n                     if value is not _marker:\n                         return value\n@@ -457,7 +452,7 @@ def addCreator(self, creator=None):\n \n         # call self.listCreators() to make sure self.creators exists\n         if creator and creator not in self.listCreators():\n-            self.creators = self.creators + (creator, )\n+            self.creators = self.creators + (creator,)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setModificationDate(self, modification_date=None):\n@@ -474,29 +469,29 @@ def setModificationDate(self, modification_date=None):\n     def Title(self):\n         # this is a CMF accessor, so should return utf8-encoded\n         if six.PY2 and isinstance(self.title, six.text_type):\n-            return self.title.encode(\'utf-8\')\n-        return self.title or \'\'\n+            return self.title.encode("utf-8")\n+        return self.title or ""\n \n     @security.protected(permissions.View)\n     def Description(self):\n-        value = self.description or \'\'\n+        value = self.description or ""\n \n         # If description is containing linefeeds the HTML\n         # validation can break.\n         # See http://bo.geekworld.dk/diazo-bug-on-html5-validation-errors/\n         # Remember: \\r\\n - Windows, \\r - OS X, \\n - Linux/Unix\n-        value = value.replace(\'\\r\\n\', \' \').replace(\'\\r\', \' \').replace(\'\\n\', \' \')  # noqa\n+        value = value.replace("\\r\\n", " ").replace("\\r", " ").replace("\\n", " ")  # noqa\n \n         # this is a CMF accessor, so should return utf8-encoded\n         if six.PY2 and isinstance(value, six.text_type):\n-            value = value.encode(\'utf-8\')\n+            value = value.encode("utf-8")\n \n         return value\n \n     @security.protected(permissions.View)\n     def Type(self):\n         ti = self.getTypeInfo()\n-        return ti is not None and ti.Title() or \'Unknown\'\n+        return ti is not None and ti.Title() or "Unknown"\n \n     # IDublinCore\n \n@@ -513,7 +508,7 @@ def listCreators(self):\n     def Creator(self):\n         # Dublin Core Creator element - resource author.\n         creators = self.listCreators()\n-        return creators and creators[0] or \'\'\n+        return creators and creators[0] or ""\n \n     @security.protected(permissions.View)\n     def Subject(self):\n@@ -527,7 +522,7 @@ def Subject(self):\n     @security.protected(permissions.View)\n     def Publisher(self):\n         # Dublin Core Publisher element - resource publisher.\n-        return \'No publisher\'\n+        return "No publisher"\n \n     @security.protected(permissions.View)\n     def listContributors(self):\n@@ -547,7 +542,7 @@ def Date(self, zone=None):\n         if zone is None:\n             zone = _zone\n         # Return effective_date if set, modification date otherwise\n-        date = getattr(self, \'effective_date\', None)\n+        date = getattr(self, "effective_date", None)\n         if date is None:\n             date = self.modified()\n \n@@ -564,25 +559,25 @@ def CreationDate(self, zone=None):\n             date = datify(self.creation_date)\n             return date.toZone(zone).ISO()\n         else:\n-            return \'Unknown\'\n+            return "Unknown"\n \n     @security.protected(permissions.View)\n     def EffectiveDate(self, zone=None):\n         # Dublin Core Date element - date resource becomes effective.\n         if zone is None:\n             zone = _zone\n-        ed = getattr(self, \'effective_date\', None)\n+        ed = getattr(self, "effective_date", None)\n         ed = datify(ed)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n+        return ed and ed.toZone(zone).ISO() or "None"\n \n     @security.protected(permissions.View)\n     def ExpirationDate(self, zone=None):\n         # Dublin Core Date element - date resource expires.\n         if zone is None:\n             zone = _zone\n-        ed = getattr(self, \'expiration_date\', None)\n+        ed = getattr(self, "expiration_date", None)\n         ed = datify(ed)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n+        return ed and ed.toZone(zone).ISO() or "None"\n \n     @security.protected(permissions.View)\n     def ModificationDate(self, zone=None):\n@@ -615,23 +610,23 @@ def Rights(self):\n     def created(self):\n         # Dublin Core Date element - date resource created.\n         # allow for non-existent creation_date, existed always\n-        date = getattr(self, \'creation_date\', None)\n+        date = getattr(self, "creation_date", None)\n         date = datify(date)\n         return date is None and FLOOR_DATE or date\n \n     @security.protected(permissions.View)\n     def effective(self):\n         # Dublin Core Date element - date resource becomes effective.\n-        date = getattr(self, \'effective_date\', _marker)\n+        date = getattr(self, "effective_date", _marker)\n         if date is _marker:\n-            date = getattr(self, \'creation_date\', None)\n+            date = getattr(self, "creation_date", None)\n         date = datify(date)\n         return date is None and FLOOR_DATE or date\n \n     @security.protected(permissions.View)\n     def expires(self):\n         # Dublin Core Date element - date resource expires.\n-        date = getattr(self, \'expiration_date\', None)\n+        date = getattr(self, "expiration_date", None)\n         date = datify(date)\n         return date is None and CEILING_DATE or date\n \n@@ -649,10 +644,8 @@ def modified(self):\n     @security.protected(permissions.View)\n     def isEffective(self, date):\n         # Is the date within the resource\'s effective range?\n-        pastEffective = (\n-            self.effective_date is None or self.effective_date <= date)\n-        beforeExpiration = (\n-            self.expiration_date is None or self.expiration_date >= date)\n+        pastEffective = self.effective_date is None or self.effective_date <= date\n+        beforeExpiration = self.expiration_date is None or self.expiration_date >= date\n         return pastEffective and beforeExpiration\n \n     # IMutableDublinCore\n@@ -685,9 +678,8 @@ def setSubject(self, subject):\n     def setContributors(self, contributors):\n         # Set Dublin Core Contributor elements - resource collaborators.\n         if isinstance(contributors, six.string_types):\n-            contributors = contributors.split(\';\')\n-        self.contributors = tuple(\n-            safe_unicode(c.strip()) for c in contributors)\n+            contributors = contributors.split(";")\n+        self.contributors = tuple(safe_unicode(c.strip()) for c in contributors)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setEffectiveDate(self, effective_date):\n@@ -717,18 +709,24 @@ def setRights(self, rights):\n \n @implementer(IDexterityItem)\n class Item(PasteBehaviourMixin, BrowserDefaultMixin, DexterityContent):\n-    """A non-containerish, CMFish item\n-    """\n+    """A non-containerish, CMFish item"""\n \n     __providedBy__ = FTIAwareSpecification()\n     __allow_access_to_unprotected_subobjects__ = AttributeValidator()\n \n     isPrincipiaFolderish = 0\n \n-    manage_options = PropertyManager.manage_options + ({\n-        \'label\': \'View\',\n-        \'action\': \'view\',\n-    },) + CMFCatalogAware.manage_options + SimpleItem.manage_options\n+    manage_options = (\n+        PropertyManager.manage_options\n+        + (\n+            {\n+                "label": "View",\n+                "action": "view",\n+            },\n+        )\n+        + CMFCatalogAware.manage_options\n+        + SimpleItem.manage_options\n+    )\n \n     # Be explicit about which __getattr__ to use\n     __getattr__ = DexterityContent.__getattr__\n@@ -736,26 +734,25 @@ class Item(PasteBehaviourMixin, BrowserDefaultMixin, DexterityContent):\n \n @implementer(IDexterityContainer)\n class Container(\n-        PathReprProvider,\n-        PasteBehaviourMixin, DAVCollectionMixin, BrowserDefaultMixin,\n-        CMFCatalogAware, CMFOrderedBTreeFolderBase, DexterityContent):\n-    """Base class for folderish items\n-    """\n+    PathReprProvider,\n+    PasteBehaviourMixin,\n+    DAVCollectionMixin,\n+    BrowserDefaultMixin,\n+    CMFCatalogAware,\n+    CMFOrderedBTreeFolderBase,\n+    DexterityContent,\n+):\n+    """Base class for folderish items"""\n \n     __providedBy__ = FTIAwareSpecification()\n     __allow_access_to_unprotected_subobjects__ = AttributeValidator()\n \n     security = ClassSecurityInfo()\n-    security.declareProtected(\n-        acpermissions.copy_or_move, \'manage_copyObjects\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_cutObjects\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_pasteObjects\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_renameObject\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_renameObjects\')\n+    security.declareProtected(acpermissions.copy_or_move, "manage_copyObjects")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_cutObjects")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_pasteObjects")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_renameObject")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_renameObjects")\n \n     isPrincipiaFolderish = 1\n \n@@ -779,7 +776,10 @@ def __getattr__(self, name):\n             pass\n \n         # Be specific about the implementation we use\n-        return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+        if self._tree is not None:\n+            return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+\n+        raise AttributeError(name)\n \n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\n@@ -795,12 +795,9 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n         for id in ids:\n             item = self._getOb(id)\n             if not getSecurityManager().checkPermission(\n-                permissions.DeleteObjects,\n-                item\n+                permissions.DeleteObjects, item\n             ):\n-                raise Unauthorized(\n-                    "Do not have permissions to remove this object"\n-                )\n+                raise Unauthorized("Do not have permissions to remove this object")\n         return super(Container, self).manage_delObjects(ids, REQUEST=REQUEST)\n \n     # override PortalFolder\'s allowedContentTypes to respect IConstrainTypes\n@@ -826,12 +823,12 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n             # an Unauthorized over a ValueError.\n             fti = queryUtility(ITypeInformation, name=type_name)\n             if fti is not None and not fti.isConstructionAllowed(self):\n-                raise Unauthorized(\'Cannot create %s\' % fti.getId())\n+                raise Unauthorized("Cannot create %s" % fti.getId())\n \n             allowed_ids = [i.getId() for i in constrains.allowedContentTypes()]\n             if type_name not in allowed_ids:\n                 raise ValueError(\n-                    \'Subobject type disallowed by IConstrainTypes adapter: %s\'\n+                    "Subobject type disallowed by IConstrainTypes adapter: %s"\n                     % type_name\n                 )\n \n@@ -841,8 +838,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n \n \n def reindexOnModify(content, event):\n-    """When an object is modified, re-index it in the catalog\n-    """\n+    """When an object is modified, re-index it in the catalog"""\n \n     if event.object is not content:\n         return\ndiff --git a/plone/dexterity/events.py b/plone/dexterity/events.py\nindex 4bee910..81e08bd 100644\n--- a/plone/dexterity/events.py\n+++ b/plone/dexterity/events.py\n@@ -1,13 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.dexterity import interfaces\n-from zope.interface.interfaces import ObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import ObjectEvent\n \n \n @implementer(interfaces.IEditBegunEvent)\n class EditBegunEvent(ObjectEvent):\n-    """An edit operation was begun\n-    """\n+    """An edit operation was begun"""\n \n \n @implementer(interfaces.IAddBegunEvent)\n@@ -19,8 +18,7 @@ class AddBegunEvent(ObjectEvent):\n \n @implementer(interfaces.IEditCancelledEvent)\n class EditCancelledEvent(ObjectEvent):\n-    """An edit operation was cancelled\n-    """\n+    """An edit operation was cancelled"""\n \n \n @implementer(interfaces.IAddCancelledEvent)\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex 949c0b1..ee39472 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -9,14 +9,17 @@\n from Products.GenericSetup.interfaces import IFilesystemExporter\n from Products.GenericSetup.interfaces import IFilesystemImporter\n from Products.GenericSetup.utils import _getDottedName\n+from six import BytesIO\n from six import StringIO\n from zope.component import queryAdapter\n from zope.interface import implementer\n \n+import six\n+\n \n @implementer(IFilesystemExporter, IFilesystemImporter)\n class DexterityContentExporterImporter(FolderishExporterImporter):\n-    """ Tree-walking exporter / importer for Dexterity types.\n+    """Tree-walking exporter / importer for Dexterity types.\n \n     This is based on the generic one in GenericSetup,\n     but it uses Dexterity\'s rfc822 serialization support\n@@ -40,12 +43,11 @@ def __init__(self, context):\n         self.context = context\n \n     def export(self, export_context, subdir, root=False):\n-        """ See IFilesystemExporter.\n-        """\n+        """See IFilesystemExporter."""\n         context = self.context\n \n         if not root:\n-            subdir = \'%s/%s\' % (subdir, context.getId())\n+            subdir = "%s/%s" % (subdir, context.getId())\n \n         exportable = self.listExportableItems()\n \n@@ -63,19 +65,19 @@ def export(self, export_context, subdir, root=False):\n             csv_writer.writerow((object_id, factory_name))\n \n         export_context.writeDataFile(\n-            \'.objects\',\n+            ".objects",\n             text=stream.getvalue(),\n-            content_type=\'text/comma-separated-values\',\n+            content_type="text/comma-separated-values",\n             subdir=subdir,\n         )\n \n         props = context.manage_FTPget()\n-        if hasattr(props, \'read\'):\n+        if hasattr(props, "read"):\n             props = props.read()\n         export_context.writeDataFile(\n-            \'.data\',\n+            ".data",\n             text=props,\n-            content_type=\'text/plain\',\n+            content_type="text/plain",\n             subdir=subdir,\n         )\n \n@@ -84,19 +86,18 @@ def export(self, export_context, subdir, root=False):\n                 adapter.export(export_context, subdir)\n \n     def import_(self, import_context, subdir, root=False):\n-        """ See IFilesystemImporter.\n-        """\n+        """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = \'%s/%s\' % (subdir, context.getId())\n+            subdir = "%s/%s" % (subdir, context.getId())\n \n-        data = import_context.readDataFile(\'.data\', subdir)\n+        data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n-            request = FauxDAVRequest(BODY=data, BODYFILE=StringIO(data))\n+            request = FauxDAVRequest(BODY=data, BODYFILE=BytesIO(data))\n             response = FauxDAVResponse()\n             context.PUT(request, response)\n \n-        preserve = import_context.readDataFile(\'.preserve\', subdir)\n+        preserve = import_context.readDataFile(".preserve", subdir)\n         must_preserve = self._mustPreserve()\n \n         prior = context.objectIds()\n@@ -104,6 +105,9 @@ def import_(self, import_context, subdir, root=False):\n         if not preserve:\n             preserve = []\n         else:\n+            # Make sure ``preserve`` is a native string\n+            if six.PY3 and not isinstance(preserve, str):\n+                preserve = preserve.decode("utf-8")\n             preserve = _globtest(preserve, prior)\n \n         preserve.extend([x[0] for x in must_preserve])\n@@ -112,11 +116,13 @@ def import_(self, import_context, subdir, root=False):\n             if id not in preserve:\n                 context._delObject(id)\n \n-        objects = import_context.readDataFile(\'.objects\', subdir)\n+        objects = import_context.readDataFile(".objects", subdir)\n         if objects is None:\n             return\n \n-        dialect = \'excel\'\n+        dialect = "excel"\n+        if six.PY3 and not isinstance(objects, str):\n+            objects = objects.decode("utf-8")\n         stream = StringIO(objects)\n \n         rowiter = reader(stream, dialect)\n@@ -127,12 +133,14 @@ def import_(self, import_context, subdir, root=False):\n         for object_id, type_name in rows:\n \n             if object_id not in existing:\n-                object = self._makeInstance(object_id, type_name,\n-                                            subdir, import_context)\n+                object = self._makeInstance(\n+                    object_id, type_name, subdir, import_context\n+                )\n                 if object is None:\n-                    logger = import_context.getLogger(\'SFWA\')\n-                    logger.warning("Couldn\'t make instance: %s/%s" %\n-                                   (subdir, object_id))\n+                    logger = import_context.getLogger("SFWA")\n+                    logger.warning(\n+                        "Couldn\'t make instance: %s/%s" % (subdir, object_id)\n+                    )\n                     continue\n \n             wrapped = context._getOb(object_id)\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex 56be581..e0d0d29 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -11,8 +11,7 @@\n \n @implementer(IDexterityFactory)\n class DexterityFactory(Persistent, Factory):\n-    """A factory for Dexterity content.\n-    """\n+    """A factory for Dexterity content."""\n \n     def __init__(self, portal_type):\n         self.portal_type = portal_type\n@@ -30,11 +29,11 @@ def description(self):\n     def __call__(self, *args, **kw):\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n \n-        klass = resolveDottedName(fti.klass)\n+        klass = resolveDottedName(fti.klass) if fti.klass else None\n         if klass is None or not callable(klass):\n             raise ValueError(\n-                "Content class %s set for type %s is not valid" %\n-                (fti.klass, self.portal_type)\n+                "Content class %s set for type %s is not valid"\n+                % (fti.klass, self.portal_type)\n             )\n \n         try:\n@@ -47,7 +46,7 @@ def __call__(self, *args, **kw):\n \n         # Set portal_type if not set, but avoid creating an instance variable\n         # if possible\n-        if getattr(obj, \'portal_type\', \'\') != self.portal_type:\n+        if getattr(obj, "portal_type", "") != self.portal_type:\n             obj.portal_type = self.portal_type\n \n         return obj\n@@ -59,4 +58,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return \'<%s for %s>\' % (self.__class__.__name__, self.portal_type)\n+        return "<%s for %s>" % (self.__class__.__name__, self.portal_type)\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex c0ed037..58a0d84 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -71,7 +71,7 @@ def get_size(self):\n         if sized is None:\n             return 0\n         unit, size = sized.sizeForSorting()\n-        if unit in (\'byte\', \'bytes\'):\n+        if unit in ("byte", "bytes"):\n             return size\n         return 0\n \n@@ -87,7 +87,7 @@ def getSize(self):\n             adapter = schema(self)\n             for name, field in getFieldsInOrder(schema):\n                 value = getattr(adapter, name, None)\n-                if hasattr(value, \'getSize\'):\n+                if hasattr(value, "getSize"):\n                     size += value.getSize()\n         return size\n \n@@ -106,8 +106,7 @@ def Format(self):\n \n     @security.protected(permissions.View)\n     def manage_DAVget(self):\n-        """Get the body of the content item in a WebDAV response.\n-        """\n+        """Get the body of the content item in a WebDAV response."""\n         return self.manage_FTPget()\n \n     @security.protected(permissions.View)\n@@ -119,7 +118,7 @@ def manage_FTPget(self, REQUEST=None, RESPONSE=None):\n         """\n         reader = IRawReadFile(self, None)\n         if reader is None:\n-            return \'\'\n+            return ""\n \n         request = REQUEST is not None and REQUEST or self.REQUEST\n         response = RESPONSE is not None and RESPONSE or request.response\n@@ -130,14 +129,19 @@ def manage_FTPget(self, REQUEST=None, RESPONSE=None):\n         if mimeType is not None:\n             if encoding is not None:\n                 response.setHeader(\n-                    \'Content-Type\', \'%s; charset="%s"\' % (mimeType, encoding,)\n+                    "Content-Type",\n+                    \'%s; charset="%s"\'\n+                    % (\n+                        mimeType,\n+                        encoding,\n+                    ),\n                 )\n             else:\n-                response.setHeader(\'Content-Type\', mimeType)\n+                response.setHeader("Content-Type", mimeType)\n \n         size = reader.size()\n         if size is not None:\n-            response.setHeader(\'Content-Length\', str(size))\n+            response.setHeader("Content-Length", str(size))\n \n         # if the reader is an iterator that the publisher can handle, return\n         # it as-is. Otherwise, read the full contents\n@@ -163,7 +167,7 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         self.dav__init(request, response)\n         self.dav__simpleifhandler(request, response, refresh=1)\n \n-        infile = request.get(\'BODYFILE\', None)\n+        infile = request.get("BODYFILE", None)\n         if infile is None:\n             raise MethodNotAllowed(\n                 "Cannot complete PUT request: No BODYFILE in request"\n@@ -175,17 +179,17 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n                 "Cannot complete PUT request: No IRawWriteFile adapter found"\n             )\n \n-        contentTypeHeader = request.get_header(\'content-type\', None)\n+        contentTypeHeader = request.get_header("content-type", None)\n \n         if contentTypeHeader is not None:\n             msg = Message()\n-            msg[\'Content-Type\'] = contentTypeHeader\n+            msg["Content-Type"] = contentTypeHeader\n \n             mimeType = msg.get_content_type()\n             if mimeType is not None:\n                 writer.mimeType = mimeType\n \n-            charset = msg.get_param(\'charset\')\n+            charset = msg.get_param("charset")\n             if charset is not None:\n                 writer.encoding = charset\n \n@@ -266,7 +270,7 @@ class FolderDataResource(Implicit, Resource):\n     security = ClassSecurityInfo()\n \n     def __init__(self, name, parent):\n-        self.__dict__.update({\'__parent__\': parent, \'__name__\': name})\n+        self.__dict__.update({"__parent__": parent, "__name__": name})\n \n     # We need to proxy certain things to the parent for getting and setting\n     # of property sheet values to work.\n@@ -316,14 +320,12 @@ def HEAD(self, REQUEST, RESPONSE):\n \n     @security.protected(permissions.ListFolderContents)\n     def OPTIONS(self, REQUEST, RESPONSE):\n-        """OPTIONS request: delegate to parent\n-        """\n+        """OPTIONS request: delegate to parent"""\n         return self.__parent__.OPTIONS(REQUEST, RESPONSE)\n \n     @security.protected(permissions.View)\n     def TRACE(self, REQUEST, RESPONSE):\n-        """TRACE request: delegate to parent\n-        """\n+        """TRACE request: delegate to parent"""\n         return self.__parent__.TRACE(REQUEST, RESPONSE)\n \n     @security.protected(permissions.View)\n@@ -346,78 +348,61 @@ def PROPPATCH(self, REQUEST, RESPONSE):\n \n     @security.protected(permissions.ModifyPortalContent)\n     def LOCK(self, REQUEST, RESPONSE):\n-        """LOCK request: delegate to parent\n-        """\n+        """LOCK request: delegate to parent"""\n         return self.__parent__.LOCK(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def UNLOCK(self, REQUEST, RESPONSE):\n-        """UNLOCK request: delegate to parent\n-        """\n+        """UNLOCK request: delegate to parent"""\n         return self.__parent__.UNLOCK(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def PUT(self, REQUEST, RESPONSE):\n-        """PUT request: delegate to parent\n-        """\n+        """PUT request: delegate to parent"""\n         return self.__parent__.PUT(REQUEST, RESPONSE)\n \n     @security.protected(permissions.AddPortalContent)\n     def MKCOL(self, REQUEST, RESPONSE):\n-        """MKCOL request: not allowed\n-        """\n+        """MKCOL request: not allowed"""\n         raise MethodNotAllowed(\n-            \'Cannot create a collection inside a folder data: try at the \'\n-            \'folder level instead\'\n+            "Cannot create a collection inside a folder data: try at the "\n+            "folder level instead"\n         )\n \n     @security.protected(permissions.DeleteObjects)\n     def DELETE(self, REQUEST, RESPONSE):\n-        """DELETE request: not allowed\n-        """\n-        raise MethodNotAllowed(\n-            \'Cannot delete folder data: delete folder instead\'\n-        )\n+        """DELETE request: not allowed"""\n+        raise MethodNotAllowed("Cannot delete folder data: delete folder instead")\n \n     @security.protected(permissions.AddPortalContent)\n     def COPY(self, REQUEST, RESPONSE):\n-        """COPY request: not allowed\n-        """\n-        raise MethodNotAllowed(\n-            \'Cannot copy folder data: copy the folder instead\'\n-        )\n+        """COPY request: not allowed"""\n+        raise MethodNotAllowed("Cannot copy folder data: copy the folder instead")\n \n     @security.protected(permissions.AddPortalContent)\n     def MOVE(self, REQUEST, RESPONSE):\n-        """MOVE request: not allowed\n-        """\n-        raise MethodNotAllowed(\n-            \'Cannot move folder data: move the folder instead\'\n-        )\n+        """MOVE request: not allowed"""\n+        raise MethodNotAllowed("Cannot move folder data: move the folder instead")\n \n     @security.protected(permissions.View)\n     def manage_DAVget(self):\n-        """DAV content access: delete to manage_FTPget()\n-        """\n+        """DAV content access: delete to manage_FTPget()"""\n         return self.__parent__.manage_DAVget()\n \n     @security.protected(permissions.View)\n     def manage_FTPget(self):\n-        """FTP access: delegate to parent\n-        """\n+        """FTP access: delegate to parent"""\n         return self.__parent__.manage_FTPget()\n \n     @security.protected(permissions.ListFolderContents)\n     def listDAVObjects(self):\n-        """DAV object listing: return nothing\n-        """\n+        """DAV object listing: return nothing"""\n         return []\n \n \n @implementer(IStreamIterator)\n class StringStreamIterator(object):\n-    """Simple stream iterator to allow efficient data streaming.\n-    """\n+    """Simple stream iterator to allow efficient data streaming."""\n \n     def __init__(self, data, size=None, chunk=1 << 16):\n         """Consume data (a str) into a temporary file and prepare streaming.\n@@ -427,11 +412,11 @@ def __init__(self, data, size=None, chunk=1 << 16):\n \n         chunk is the chunk size for the iterator\n         """\n-        f = tempfile.TemporaryFile(mode=\'w+b\')\n+        f = tempfile.TemporaryFile(mode="w+b")\n         f.write(data)\n \n         if size is not None:\n-            assert size == f.tell(), \'Size argument does not match data length\'\n+            assert size == f.tell(), "Size argument does not match data length"\n         else:\n             size = f.tell()\n \n@@ -488,12 +473,12 @@ def __init__(self, context):\n     def __call__(self, name, contentType, data):\n \n         # Deal with Finder cruft\n-        if name == \'.DS_Store\':\n+        if name == ".DS_Store":\n             raise Unauthorized("Refusing to store Mac OS X resource forks")\n-        elif name.startswith(\'._\'):\n+        elif name.startswith("._"):\n             raise Unauthorized("Refusing to store Mac OS X resource forks")\n \n-        registry = getToolByName(self.context, \'content_type_registry\', None)\n+        registry = getToolByName(self.context, "content_type_registry", None)\n         if registry is None:\n             return None  # fall back on default\n \n@@ -501,7 +486,7 @@ def __call__(self, name, contentType, data):\n         if typeObjectName is None:\n             return  # fall back on default\n \n-        typesTool = getToolByName(self.context, \'portal_types\')\n+        typesTool = getToolByName(self.context, "portal_types")\n \n         targetType = typesTool.getTypeInfo(typeObjectName)\n         if targetType is None:\n@@ -529,19 +514,17 @@ def __call__(self, name, contentType, data):\n             if contextType is not None:\n                 if not contextType.allowType(typeObjectName):\n                     raise Unauthorized(\n-                        "Creating a %s object here is not allowed" %\n-                        typeObjectName\n+                        "Creating a %s object here is not allowed" % typeObjectName\n                     )\n \n             if not targetType.isConstructionAllowed(self.context):\n                 raise Unauthorized(\n-                    "Creating a %s object here is not allowed" %\n-                    typeObjectName\n+                    "Creating a %s object here is not allowed" % typeObjectName\n                 )\n \n             obj = createObject(targetType.factory, name)\n \n-            if hasattr(obj, \'_setPortalTypeName\'):\n+            if hasattr(obj, "_setPortalTypeName"):\n                 obj._setPortalTypeName(targetType.getId())\n \n             # we fire this event here, because NullResource.PUT will now go\n@@ -569,7 +552,7 @@ def __init__(self, context):\n         self._size = 0\n \n     mimeType = None\n-    encoding = \'utf-8\'\n+    encoding = "utf-8"\n     name = None\n \n     @property\n@@ -649,19 +632,19 @@ def mimeType(self):\n                     if IPrimaryField.providedBy(field):\n                         if foundOne:\n                             # more than one primary field\n-                            return \'message/rfc822\'\n+                            return "message/rfc822"\n                         else:\n                             foundOne = True\n             # zero or one primary fields\n-            return \'text/plain\'\n+            return "text/plain"\n         if not self._getMessage().is_multipart():\n-            return \'text/plain\'\n+            return "text/plain"\n         else:\n-            return \'message/rfc822\'\n+            return "message/rfc822"\n \n     @property\n     def encoding(self):\n-        return self._getMessage().get_charset() or \'utf-8\'\n+        return self._getMessage().get_charset() or "utf-8"\n \n     @property\n     def name(self):\n@@ -679,13 +662,10 @@ def size(self):\n     @memoize\n     def _getMessage(self):\n         # Construct message on demand.\n-        message = constructMessageFromSchemata(\n-            self.context,\n-            iterSchemata(self.context)\n-        )\n+        message = constructMessageFromSchemata(self.context, iterSchemata(self.context))\n \n         # Store the portal type in a header, to allow it to be identifed later\n-        message[\'Portal-Type\'] = self.context.portal_type\n+        message["Portal-Type"] = self.context.portal_type\n \n         return message\n \n@@ -697,18 +677,17 @@ def _getStream(self):\n         # publisher, which will serve it efficiently even after the\n         # transaction is closed\n         message = self._getMessage()\n-        out = tempfile.TemporaryFile(mode=\'w+b\')\n+        out = tempfile.TemporaryFile(mode="w+b")\n         if six.PY2:\n             out.write(message.as_string())\n         else:\n-            out.write(message.as_string().encode(\'utf-8\'))\n+            out.write(message.as_string().encode("utf-8"))\n         self._size = out.tell()\n         out.seek(0)\n         return out\n \n     def __next__(self):\n-        """ Iterate over the stream\n-        """\n+        """Iterate over the stream"""\n         return self._getStream().__next__()\n \n \n@@ -727,7 +706,7 @@ def __init__(self, context):\n         self._written = 0\n \n     mimeType = None\n-    encoding = \'utf-8\'\n+    encoding = "utf-8"\n     name = None\n \n     @property\n@@ -785,7 +764,7 @@ def __init__(self, context):\n         self.context = context\n \n         self._mimeType = None\n-        self._encoding = \'utf-8\'\n+        self._encoding = "utf-8"\n         self._closed = False\n         self._name = None\n         self._written = 0\n@@ -797,9 +776,9 @@ def mimeType(self):\n         if self._message is None:\n             return self._mimeType\n         elif not self._message.is_multipart():\n-            return \'text/plain\'\n+            return "text/plain"\n         else:\n-            return \'message/rfc822\'\n+            return "message/rfc822"\n \n     @mimeType.setter\n     def mimeType(self, value):\n@@ -839,10 +818,7 @@ def close(self):\n         self._message = self._parser.close()\n         self._closed = True\n         initializeObjectFromSchemata(\n-            self.context,\n-            iterSchemata(self.context),\n-            self._message,\n-            self._encoding\n+            self.context, iterSchemata(self.context), self._message, self._encoding\n         )\n \n     def write(self, data):\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 05f1b87..a6b3830 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -32,7 +32,6 @@\n \n @implementer(IDexterityFTIModificationDescription)\n class DexterityFTIModificationDescription(object):\n-\n     def __init__(self, attribute, oldValue):\n         self.attribute = attribute\n         self.oldValue = oldValue\n@@ -40,105 +39,102 @@ def __init__(self, attribute, oldValue):\n \n @implementer(IDexterityFTI)\n class DexterityFTI(base.DynamicViewTypeInformation):\n-    """A Dexterity FTI\n-    """\n+    """A Dexterity FTI"""\n \n     meta_type = "Dexterity FTI"\n \n-    behaviors_type = \'ulines\'\n+    behaviors_type = "ulines"\n     if six.PY2:\n-        behaviors_type = \'lines\'\n+        behaviors_type = "lines"\n \n     _properties = base.DynamicViewTypeInformation._properties + (\n         {\n-            \'id\': \'add_permission\',\n-            \'type\': \'selection\',\n-            \'select_variable\': \'possiblePermissionIds\',\n-            \'mode\': \'w\',\n-            \'label\': \'Add permission\',\n-            \'description\': \'Permission needed to be able to add content of \'\n-                           \'this type\',\n+            "id": "add_permission",\n+            "type": "selection",\n+            "select_variable": "possiblePermissionIds",\n+            "mode": "w",\n+            "label": "Add permission",\n+            "description": "Permission needed to be able to add content of "\n+            "this type",\n         },\n         {\n-            \'id\': \'klass\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Content type class\',\n-            \'description\': \'Dotted name to the class that contains the \'\n-                           \'content type\'\n+            "id": "klass",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Content type class",\n+            "description": "Dotted name to the class that contains the " "content type",\n         },\n         {\n-            \'id\': \'behaviors\',\n-            \'type\': behaviors_type,\n-            \'mode\': \'w\',\n-            \'label\': \'Behaviors\',\n-            \'description\': \'Names of enabled behaviors type\'\n+            "id": "behaviors",\n+            "type": behaviors_type,\n+            "mode": "w",\n+            "label": "Behaviors",\n+            "description": "Names of enabled behaviors type",\n         },\n         {\n-            \'id\': \'schema\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Schema\',\n-            \'description\': "Dotted name to the interface describing content "\n-                           "type\'s schema.  This does not need to be given "\n-                           "if model_source or model_file are given, and "\n-                           "either contains an unnamed (default) schema."\n+            "id": "schema",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Schema",\n+            "description": "Dotted name to the interface describing content "\n+            "type\'s schema.  This does not need to be given "\n+            "if model_source or model_file are given, and "\n+            "either contains an unnamed (default) schema.",\n         },\n         {\n-            \'id\': \'model_source\',\n-            \'type\': \'text\',\n-            \'mode\': \'w\',\n-            \'label\': \'Model source\',\n-            \'description\': "XML source for the type\'s model. Note that this "\n-                           "takes precedence over any model file."\n+            "id": "model_source",\n+            "type": "text",\n+            "mode": "w",\n+            "label": "Model source",\n+            "description": "XML source for the type\'s model. Note that this "\n+            "takes precedence over any model file.",\n         },\n         {\n-            \'id\': \'model_file\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Model file\',\n-            \'description\': "Path to file containing the schema model. "\n-                           "This can be relative to a package, e.g. "\n-                           "\'my.package:myschema.xml\'."\n+            "id": "model_file",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Model file",\n+            "description": "Path to file containing the schema model. "\n+            "This can be relative to a package, e.g. "\n+            "\'my.package:myschema.xml\'.",\n         },\n         {\n-            \'id\': \'schema_policy\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Content type schema policy\',\n-            \'description\': \'Name of the schema policy.\'\n+            "id": "schema_policy",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Content type schema policy",\n+            "description": "Name of the schema policy.",\n         },\n-\n     )\n \n     default_aliases = {\n-        \'(Default)\': \'(dynamic view)\',\n-        \'view\': \'(selected layout)\',\n-        \'edit\': \'@@edit\',\n-        \'sharing\': \'@@sharing\',\n+        "(Default)": "(dynamic view)",\n+        "view": "(selected layout)",\n+        "edit": "@@edit",\n+        "sharing": "@@sharing",\n     }\n \n     default_actions = [\n         {\n-            \'id\': \'view\',\n-            \'title\': \'View\',\n-            \'action\': \'string:${object_url}\',\n-            \'permissions\': (\'View\',)\n+            "id": "view",\n+            "title": "View",\n+            "action": "string:${object_url}",\n+            "permissions": ("View",),\n         },\n         {\n-            \'id\': \'edit\',\n-            \'title\': \'Edit\',\n-            \'action\': \'string:${object_url}/edit\',\n-            \'permissions\': (\'Modify portal content\',)\n+            "id": "edit",\n+            "title": "Edit",\n+            "action": "string:${object_url}/edit",\n+            "permissions": ("Modify portal content",),\n         },\n     ]\n \n-    immediate_view = \'view\'\n-    default_view = \'view\'\n-    view_methods = (\'view\',)\n-    add_permission = \'cmf.AddPortalContent\'\n+    immediate_view = "view"\n+    default_view = "view"\n+    view_methods = ("view",)\n+    add_permission = "cmf.AddPortalContent"\n     behaviors = []\n-    klass = \'plone.dexterity.content.Item\'\n+    klass = "plone.dexterity.content.Item"\n     model_source = """\\\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n     <schema />\n@@ -151,18 +147,20 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n     def __init__(self, *args, **kwargs):\n         super(DexterityFTI, self).__init__(*args, **kwargs)\n \n-        if \'aliases\' not in kwargs:\n+        if "aliases" not in kwargs:\n             self.setMethodAliases(self.default_aliases)\n \n-        if \'actions\' not in kwargs:\n+        if "actions" not in kwargs:\n             for action in self.default_actions:\n-                self.addAction(id=action[\'id\'],\n-                               name=action[\'title\'],\n-                               action=action[\'action\'],\n-                               condition=action.get(\'condition\'),\n-                               permission=action.get(\'permissions\', ()),\n-                               category=action.get(\'category\', \'object\'),\n-                               visible=action.get(\'visible\', True))\n+                self.addAction(\n+                    id=action["id"],\n+                    name=action["title"],\n+                    action=action["action"],\n+                    condition=action.get("condition"),\n+                    permission=action.get("permissions", ()),\n+                    category=action.get("category", "object"),\n+                    visible=action.get("visible", True),\n+                )\n \n         # Default factory name to be the FTI name\n         if not self.factory:\n@@ -186,31 +184,29 @@ def __init__(self, *args, **kwargs):\n \n         if not self.add_view_expr:\n             add_view_expr = kwargs.get(\n-                \'add_view_expr\',\n-                "string:${folder_url}/++add++%s" % self.getId()\n+                "add_view_expr", "string:${folder_url}/++add++%s" % self.getId()\n             )\n-            self._setPropValue(\'add_view_expr\', add_view_expr)\n+            self._setPropValue("add_view_expr", add_view_expr)\n \n         # Set the content_meta_type from the klass\n \n-        klass = utils.resolveDottedName(self.klass)\n+        klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n-            self.content_meta_type = getattr(klass, \'meta_type\', None)\n+            self.content_meta_type = getattr(klass, "meta_type", None)\n \n     def Title(self):\n         if self.title and self.i18n_domain:\n             if six.PY2:\n                 try:\n-                    return Message(self.title.decode(\'utf8\'), self.i18n_domain)\n+                    return Message(self.title.decode("utf8"), self.i18n_domain)\n                 except UnicodeDecodeError:\n-                    return Message(\n-                        self.title.decode(\'latin-1\'), self.i18n_domain)\n+                    return Message(self.title.decode("latin-1"), self.i18n_domain)\n             else:\n                 return Message(self.title, self.i18n_domain)\n         else:\n             if six.PY2:\n                 if self.title:\n-                    return self.title.decode(\'utf8\')\n+                    return self.title.decode("utf8")\n                 return self.getId()\n             return self.title or self.getId()\n \n@@ -218,30 +214,28 @@ def Description(self):\n         if self.description and self.i18n_domain:\n             if six.PY2:\n                 try:\n-                    return Message(\n-                        self.description.decode(\'utf8\'), self.i18n_domain)\n+                    return Message(self.description.decode("utf8"), self.i18n_domain)\n                 except UnicodeDecodeError:\n-                    return Message(\n-                        self.description.decode(\'latin-1\'), self.i18n_domain)\n+                    return Message(self.description.decode("latin-1"), self.i18n_domain)\n             else:\n                 return Message(self.description, self.i18n_domain)\n         else:\n             if six.PY2 and self.description:\n-                return self.description.decode(\'utf8\')\n+                return self.description.decode("utf8")\n             return self.description\n \n     def Metatype(self):\n         if self.content_meta_type:\n             return self.content_meta_type\n         # BBB - this didn\'t use to be set\n-        klass = utils.resolveDottedName(self.klass)\n+        klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n-            self.content_meta_type = getattr(klass, \'meta_type\', None)\n+            self.content_meta_type = getattr(klass, "meta_type", None)\n         return self.content_meta_type\n \n     @property\n     def hasDynamicSchema(self):\n-        return not(self.schema)\n+        return not (self.schema)\n \n     def lookupSchema(self):\n         schema = None\n@@ -252,8 +246,8 @@ def lookupSchema(self):\n                 schema = utils.resolveDottedName(self.schema)\n             except ImportError:\n                 logging.warning(\n-                    u"Dexterity type FTI %s: schema dotted name [%s] cannot be resolved." %\n-                    (self.getId(), self.schema)\n+                    u"Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n+                    % (self.getId(), self.schema)\n                 )\n                 # fall through to return a fake class with no\n                 # fields so that end user code doesn\'t break\n@@ -306,10 +300,12 @@ def _updateProperty(self, id, value):\n             modified(self, DexterityFTIModificationDescription(id, oldValue))\n \n             # Update meta_type from klass\n-            if id == \'klass\':\n-                klass = utils.resolveDottedName(new_value)\n+            if id == "klass":\n+                klass = None\n+                if new_value:\n+                    klass = utils.resolveDottedName(new_value)\n                 if klass is not None:\n-                    self.content_meta_type = getattr(klass, \'meta_type\', None)\n+                    self.content_meta_type = getattr(klass, "meta_type", None)\n \n     # Allow us to specify a particular add permission rather than rely on ones\n     # stored in meta types that we don\'t have anyway\n@@ -322,54 +318,54 @@ def isConstructionAllowed(self, container):\n         if permission is None:\n             return False\n \n-        return bool(\n-            getSecurityManager().checkPermission(\n-                permission.title,\n-                container\n-            )\n-        )\n+        return bool(getSecurityManager().checkPermission(permission.title, container))\n \n     #\n     # Helper methods\n     #\n \n     def possiblePermissionIds(self):\n-        """Get a vocabulary of Zope 3 permission ids\n-        """\n+        """Get a vocabulary of Zope 3 permission ids"""\n         permission_names = set()\n         for permission in getAllUtilitiesRegisteredFor(IPermission):\n             permission_names.add(permission.id)\n         return sorted(permission_names)\n \n     def _absModelFile(self):\n-        colons = self.model_file.count(\':\')\n+        colons = self.model_file.count(":")\n         model_file = self.model_file\n \n         # We have a package and not an absolute Windows path\n-        if colons == 1 and self.model_file[1:3] != \':\\\\\':\n-            package, filename = self.model_file.split(\':\')\n+        if colons == 1 and self.model_file[1:3] != ":\\\\":\n+            package, filename = self.model_file.split(":")\n             mod = utils.resolveDottedName(package)\n             # let / work as path separator on all platforms\n-            filename = filename.replace(\'/\', os.path.sep)\n+            filename = filename.replace("/", os.path.sep)\n             model_file = os.path.join(os.path.split(mod.__file__)[0], filename)\n         else:\n             if not os.path.isabs(model_file):\n                 raise ValueError(\n                     u"Model file name %s is not an absolute path and does "\n                     u"not contain a package name in %s"\n-                    % (model_file, self.getId(),)\n+                    % (\n+                        model_file,\n+                        self.getId(),\n+                    )\n                 )\n \n         if not os.path.isfile(model_file):\n             raise ValueError(\n                 u"Model file %s in %s cannot be found"\n-                % (model_file, self.getId(),)\n+                % (\n+                    model_file,\n+                    self.getId(),\n+                )\n             )\n \n         return model_file\n \n \n-def _fixProperties(class_, ignored=[\'product\', \'content_meta_type\']):\n+def _fixProperties(class_, ignored=["product", "content_meta_type"]):\n     """Remove properties with the given ids, and ensure that later properties\n     override earlier ones with the same id\n     """\n@@ -379,17 +375,19 @@ def _fixProperties(class_, ignored=[\'product\', \'content_meta_type\']):\n     for item in reversed(class_._properties):\n         item = item.copy()\n \n-        if item[\'id\'] in processed:\n+        if item["id"] in processed:\n             continue\n \n         # Ignore some fields\n-        if item[\'id\'] in ignored:\n+        if item["id"] in ignored:\n             continue\n \n         properties.append(item)\n-        processed.add(\'id\')\n+        processed.add("id")\n \n     class_._properties = tuple(reversed(properties))\n+\n+\n _fixProperties(DexterityFTI)\n \n \n@@ -397,9 +395,9 @@ def _fixProperties(class_, ignored=[\'product\', \'content_meta_type\']):\n def register(fti):\n     """Helper method to:\n \n-         - register an FTI as a local utility\n-         - register a local factory utility\n-         - register an add view\n+    - register an FTI as a local utility\n+    - register a local factory utility\n+    - register an add view\n     """\n \n     fti = aq_base(fti)  # remove acquisition wrapper\n@@ -411,10 +409,7 @@ def register(fti):\n     fti_utility = queryUtility(IDexterityFTI, name=portal_type)\n     if fti_utility is None:\n         site_manager.registerUtility(\n-            fti,\n-            IDexterityFTI,\n-            portal_type,\n-            info=\'plone.dexterity.dynamic\'\n+            fti, IDexterityFTI, portal_type, info="plone.dexterity.dynamic"\n         )\n \n     factory_utility = queryUtility(IFactory, name=fti.factory)\n@@ -423,16 +418,16 @@ def register(fti):\n             DexterityFactory(portal_type),\n             IFactory,\n             fti.factory,\n-            info=\'plone.dexterity.dynamic\'\n+            info="plone.dexterity.dynamic",\n         )\n \n \n def unregister(fti, old_name=None):\n     """Helper method to:\n \n-        - unregister the FTI local utility\n-        - unregister any local factory utility associated with the FTI\n-        - unregister any local add view associated with the FTI\n+    - unregister the FTI local utility\n+    - unregister any local factory utility associated with the FTI\n+    - unregister any local add view associated with the FTI\n     """\n     site = queryUtility(ISiteRoot)\n     if site is None:\n@@ -455,21 +450,24 @@ def unregister_factory(factory_name, site_manager):\n     utilities = list(site_manager.registeredUtilities())\n     # Do nothing if an FTI is still using it\n     if factory_name in [\n-        f.component.factory for f in utilities\n-        if (f.provided, f.info) == (IDexterityFTI, \'plone.dexterity.dynamic\')\n+        f.component.factory\n+        for f in utilities\n+        if (f.provided, f.info) == (IDexterityFTI, "plone.dexterity.dynamic")\n     ]:\n         return\n \n     # If a factory with a matching name exists, remove it\n-    if [f for f in utilities\n+    if [\n+        f\n+        for f in utilities\n         if (f.provided, f.name, f.info)\n-            == (IFactory, factory_name, \'plone.dexterity.dynamic\')]:\n+        == (IFactory, factory_name, "plone.dexterity.dynamic")\n+    ]:\n         site_manager.unregisterUtility(provided=IFactory, name=factory_name)\n \n \n def ftiAdded(object, event):\n-    """When the FTI is created, install local components\n-    """\n+    """When the FTI is created, install local components"""\n \n     if not IDexterityFTI.providedBy(event.object):\n         return\n@@ -478,8 +476,7 @@ def ftiAdded(object, event):\n \n \n def ftiRemoved(object, event):\n-    """When the FTI is removed, uninstall local coponents\n-    """\n+    """When the FTI is removed, uninstall local coponents"""\n \n     if not IDexterityFTI.providedBy(event.object):\n         return\n@@ -488,15 +485,16 @@ def ftiRemoved(object, event):\n \n \n def ftiRenamed(object, event):\n-    """When the FTI is modified, ensure local components are still valid\n-    """\n+    """When the FTI is modified, ensure local components are still valid"""\n \n     if not IDexterityFTI.providedBy(event.object):\n         return\n \n-    if event.oldParent is None \\\n-       or event.newParent is None \\\n-       or event.oldName == event.newName:\n+    if (\n+        event.oldParent is None\n+        or event.newParent is None\n+        or event.oldName == event.newName\n+    ):\n         return\n \n     unregister(event.object, event.oldName)\n@@ -523,8 +521,8 @@ def ftiModified(object, event):\n     # was registered as a local utility to begin with. If so, remove the\n     # orphan.\n \n-    if \'factory\' in mod:\n-        old_factory = mod[\'factory\']\n+    if "factory" in mod:\n+        old_factory = mod["factory"]\n \n         site = getUtility(ISiteRoot)\n         site_manager = getSiteManager(site)\n@@ -539,26 +537,29 @@ def ftiModified(object, event):\n                 DexterityFactory(portal_type),\n                 IFactory,\n                 fti.factory,\n-                info=\'plone.dexterity.dynamic\'\n+                info="plone.dexterity.dynamic",\n             )\n \n     # Determine if we need to invalidate the schema at all\n-    if \'behaviors\' in mod \\\n-       or \'schema\' in mod \\\n-       or \'model_source\' in mod \\\n-       or \'model_file\' in mod \\\n-       or \'schema_policy\' in mod:\n+    if (\n+        "behaviors" in mod\n+        or "schema" in mod\n+        or "model_source" in mod\n+        or "model_file" in mod\n+        or "schema_policy" in mod\n+    ):\n \n         # Determine if we need to re-sync a dynamic schema\n-        if (fti.model_source or fti.model_file) \\\n-           and (\'model_source\' in mod or \'model_file\' in mod or \'schema_policy\' in mod):\n+        if (fti.model_source or fti.model_file) and (\n+            "model_source" in mod or "model_file" in mod or "schema_policy" in mod\n+        ):\n \n             mtime = getattr(fti, "_p_mtime", None) or ""\n             schemaName = portalTypeToSchemaName(portal_type, suffix=str(mtime))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\n-            sync_bases = \'schema_policy\' in mod\n+            sync_bases = "schema_policy" in mod\n             syncSchema(model.schema, schema, overwrite=True, sync_bases=sync_bases)\n \n         notify(SchemaInvalidatedEvent(portal_type))\ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex e36cbe8..cf5dc42 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -12,16 +12,17 @@\n try:\n     from zope.app.content import IContentType\n except ImportError:\n+\n     class IContentType(Interface):\n         pass\n \n+\n # id for pseudo-resource used to expose data for folderish items over WebDAV\n-DAV_FOLDER_DATA_ID = \'_data\'\n+DAV_FOLDER_DATA_ID = "_data"\n \n \n class IDexterityFTI(ITypeInformation):\n-    """The Factory Type Information for Dexterity content objects\n-    """\n+    """The Factory Type Information for Dexterity content objects"""\n \n     def lookupSchema():\n         """Return an InterfaceClass that represents the schema of this type.\n@@ -48,49 +49,45 @@ def lookupModel():\n     add_permission = zope.schema.DottedName(\n         title=u"Add permission",\n         description=u"Zope 3 permission name for the permission required to "\n-                    u"construct this content",\n+        u"construct this content",\n     )\n \n     behaviors = zope.schema.List(\n         title=u"Behaviors",\n         description=u"A list of behaviors that are enabled for this type. "\n-                    u"See plone.behavior for more details.",\n-        value_type=zope.schema.DottedName(title=u"Behavior name")\n+        u"See plone.behavior for more details.",\n+        value_type=zope.schema.DottedName(title=u"Behavior name"),\n     )\n \n     schema = zope.schema.DottedName(\n         title=u"Schema interface",\n         description=u"Dotted name to an interface describing the type. "\n-                    u"This is not required if there is a model file or a "\n-                    u"model source string containing an unnamed schema."\n+        u"This is not required if there is a model file or a "\n+        u"model source string containing an unnamed schema.",\n     )\n \n     model_source = zope.schema.Text(\n         title=u"Model text",\n-        description=u"XML representation of the model for this type. " +\n-                    u"If this is given, it will override any model_file."\n+        description=u"XML representation of the model for this type. "\n+        + u"If this is given, it will override any model_file.",\n     )\n \n     model_file = zope.schema.Text(\n         title=u"Model file",\n         description=u"A file that contains an XML model. "\n-                    u"This may be an absolute path, or one relative to a "\n-                    u"package, e.g. my.package:model.xml"\n+        u"This may be an absolute path, or one relative to a "\n+        u"package, e.g. my.package:model.xml",\n     )\n \n     hasDynamicSchema = zope.schema.Bool(\n-        title=u"Whether or not the FTI uses a dynamic schema.",\n-        readonly=True\n+        title=u"Whether or not the FTI uses a dynamic schema.", readonly=True\n     )\n \n \n class IDexterityFTIModificationDescription(IModificationDescription):\n-    """Descriptor passed with an IObjectModifiedEvent for a Dexterity FTI.\n-    """\n+    """Descriptor passed with an IObjectModifiedEvent for a Dexterity FTI."""\n \n-    attribute = zope.schema.ASCII(\n-        title=u"Name of the attribute that was modified"\n-    )\n+    attribute = zope.schema.ASCII(title=u"Name of the attribute that was modified")\n     oldValue = Attribute("Old value")\n \n \n@@ -104,15 +101,13 @@ class IDexterityFactory(IFactory):\n     """\n \n     portal_type = zope.schema.TextLine(\n-        title=u"Portal type name",\n-        description=u"The portal type this is an FTI for"\n+        title=u"Portal type name", description=u"The portal type this is an FTI for"\n     )\n \n \n # Schema\n class IDexteritySchema(Interface):\n-    """Base class for Dexterity schemata\n-    """\n+    """Base class for Dexterity schemata"""\n \n \n # Schema cache\n@@ -128,29 +123,24 @@ class ISchemaInvalidatedEvent(Interface):\n \n # Content\n class IDexterityContent(Interface):\n-    """Marker interface for dexterity-managed content objects\n-    """\n+    """Marker interface for dexterity-managed content objects"""\n \n \n class IDexterityItem(IDexterityContent):\n-    """Marker interface applied to dexterity-managed non-folderish objects\n-    """\n+    """Marker interface applied to dexterity-managed non-folderish objects"""\n \n \n class IDexterityContainer(IDexterityContent):\n-    """Marker interface applied to dexterity-managed folderish objects\n-    """\n+    """Marker interface applied to dexterity-managed folderish objects"""\n \n \n # Events\n class IBegunEvent(IObjectEvent):\n-    """Base begun event\n-    """\n+    """Base begun event"""\n \n \n class IEditBegunEvent(IBegunEvent):\n-    """An edit operation was begun\n-    """\n+    """An edit operation was begun"""\n \n \n class IAddBegunEvent(IBegunEvent):\n@@ -160,13 +150,11 @@ class IAddBegunEvent(IBegunEvent):\n \n \n class ICancelledEvent(IObjectEvent):\n-    """Base cancel event\n-    """\n+    """Base cancel event"""\n \n \n class IEditCancelledEvent(ICancelledEvent):\n-    """An edit operation was cancelled\n-    """\n+    """An edit operation was cancelled"""\n \n \n class IAddCancelledEvent(ICancelledEvent):\ndiff --git a/plone/dexterity/primary.py b/plone/dexterity/primary.py\nindex fb58ccc..759d530 100644\n--- a/plone/dexterity/primary.py\n+++ b/plone/dexterity/primary.py\n@@ -11,7 +11,6 @@\n @implementer(IPrimaryFieldInfo)\n @adapter(IDexterityContent)\n class PrimaryFieldInfo(object):\n-\n     def __init__(self, context):\n         self.context = context\n         primary = None\n@@ -22,7 +21,7 @@ def __init__(self, context):\n                     primary = (name, field)\n                     break\n         if not primary:\n-            raise TypeError(\'Could not adapt\', context, IPrimaryFieldInfo)\n+            raise TypeError("Could not adapt", context, IPrimaryFieldInfo)\n         self.fieldname, self.field = primary\n \n     @property\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 0e1d41d..7a0ef35 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -16,6 +16,7 @@\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n+from zope.component.hooks import getSite\n from zope.dottedname.resolve import resolve\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n@@ -32,22 +33,22 @@\n log = logging.getLogger(__name__)\n \n # Dynamic modules\n-generated = dynamic.create(\'plone.dexterity.schema.generated\')\n-transient = types.ModuleType(\'transient\')\n+generated = dynamic.create("plone.dexterity.schema.generated")\n+transient = types.ModuleType("transient")\n \n _MARKER = dict()\n \n-FTI_CACHE_KEY = \'__plone_dexterity_fti_cache__\'\n+FTI_CACHE_KEY = "__plone_dexterity_fti_cache__"\n \n \n def invalidate_cache(fti):\n     fti._p_activate()\n-    fti.__dict__.pop(\'_v_schema_get\', None)\n-    fti.__dict__.pop(\'_v_schema_behavior_registrations\', None)\n-    fti.__dict__.pop(\'_v_schema_subtypes\', None)\n-    fti.__dict__.pop(\'_v_schema_schema_interfaces\', None)\n-    fti.__dict__.pop(\'_v_schema_modified\', None)\n-    fti.__dict__.pop(\'_v_schema_behavior_schema_interfaces\', None)\n+    fti.__dict__.pop("_v_schema_get", None)\n+    fti.__dict__.pop("_v_schema_behavior_registrations", None)\n+    fti.__dict__.pop("_v_schema_subtypes", None)\n+    fti.__dict__.pop("_v_schema_schema_interfaces", None)\n+    fti.__dict__.pop("_v_schema_modified", None)\n+    fti.__dict__.pop("_v_schema_behavior_schema_interfaces", None)\n     request = getRequest()\n     if request:\n         setattr(request, FTI_CACHE_KEY, None)\n@@ -65,12 +66,13 @@ def lookup_fti(portal_type, cache=True):\n                 if fti_cache is None:\n                     fti_cache = dict()\n                     setattr(request, FTI_CACHE_KEY, fti_cache)\n+                fti = None\n                 if portal_type in fti_cache:\n                     fti = fti_cache[portal_type]\n-                else:\n+\n+                if fti is None:\n                     fti_cache[portal_type] = fti = queryUtility(\n-                        IDexterityFTI,\n-                        name=portal_type\n+                        IDexterityFTI, name=portal_type\n                     )\n                 return fti\n         return queryUtility(IDexterityFTI, name=portal_type)\n@@ -78,12 +80,11 @@ def lookup_fti(portal_type, cache=True):\n         # its already an IDexterityFTI instance\n         return portal_type\n     raise ValueError(\n-        \'portal_type has to either string or IDexterityFTI instance but is \'\n-        \'{0!r}\'.format(portal_type)\n+        "portal_type has to either string or IDexterityFTI instance but is "\n+        "{0!r}".format(portal_type)\n     )\n \n \n-\n def volatile(func):\n     @functools.wraps(func)\n     def decorator(self, portal_type):\n@@ -100,7 +101,7 @@ def decorator(self, portal_type):\n         if fti is None:\n             return func(self, None)\n         if self.cache_enabled:\n-            key = \'_v_schema_%s\' % func.__name__\n+            key = "_v_schema_%s" % func.__name__\n             cache = getattr(fti, key, _MARKER)\n             if cache is not _MARKER:\n                 mtime, value = cache\n@@ -113,6 +114,7 @@ def decorator(self, portal_type):\n             setattr(fti, key, (fti._p_mtime, value))\n \n         return value\n+\n     return decorator\n \n \n@@ -177,10 +179,8 @@ def behavior_registrations(self, fti):\n                 warnings.warn(\n                     \'No behavior registration found for behavior named "{0}"\'\n                     \' for factory "{1}"\'\n-                    \' - trying deprecated fallback lookup (will be removed \'\n-                    \'in 3.0)..."\'.format(\n-                        behavior_name, fti.getId()\n-                    ),\n+                    " - trying deprecated fallback lookup (will be removed "\n+                    \'in 3.0)..."\'.format(behavior_name, fti.getId()),\n                     DeprecationWarning,\n                 )\n                 try:\n@@ -197,7 +197,7 @@ def behavior_registrations(self, fti):\n                     description="bbb fallback lookup",\n                     interface=schema_interface,\n                     marker=None,\n-                    factory=None\n+                    factory=None,\n                 )\n             registrations.append(registration)\n         return tuple(registrations)\n@@ -212,8 +212,10 @@ def subtypes(self, fti):\n             return ()\n         subtypes = []\n         for behavior_registration in self.behavior_registrations(fti):\n-            if behavior_registration is not None \\\n-               and behavior_registration.marker is not None:\n+            if (\n+                behavior_registration is not None\n+                and behavior_registration.marker is not None\n+            ):\n                 subtypes.append(behavior_registration.marker)\n         return tuple(subtypes)\n \n@@ -227,8 +229,7 @@ def behavior_schema_interfaces(self, fti):\n             return ()\n         schemas = []\n         for behavior_registration in self.behavior_registrations(fti):\n-            if behavior_registration is not None \\\n-               and behavior_registration.interface:\n+            if behavior_registration is not None and behavior_registration.interface:\n                 schemas.append(behavior_registration.interface)\n         return tuple(schemas)\n \n@@ -279,7 +280,6 @@ def modified(self, fti):\n \n @implementer(ISchemaInvalidatedEvent)\n class SchemaInvalidatedEvent(object):\n-\n     def __init__(self, portal_type):\n         self.portal_type = portal_type\n \n@@ -294,15 +294,14 @@ def invalidate_schema(event):\n \n # here starts the code dealing wih dynamic schemas.\n class SchemaNameEncoder(object):\n-    """Schema name encoding\n-    """\n+    """Schema name encoding"""\n \n     key = (\n-        (\' \', \'_1_\'),\n-        (\'.\', \'_2_\'),\n-        (\'-\', \'_3_\'),\n-        (\'/\', \'_4_\'),\n-        (\'|\', \'_5_\'),\n+        (" ", "_1_"),\n+        (".", "_2_"),\n+        ("-", "_3_"),\n+        ("/", "_4_"),\n+        ("|", "_5_"),\n     )\n \n     def encode(self, s):\n@@ -316,34 +315,38 @@ def decode(self, s):\n         return s\n \n     def join(self, *args):\n-        return \'_0_\'.join([self.encode(a) for a in args if a])\n+        return "_0_".join([self.encode(a) for a in args if a])\n \n     def split(self, s):\n-        return [self.decode(a) for a in s.split(\'_0_\')]\n+        return [self.decode(a) for a in s.split("_0_")]\n \n \n def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n-    """Return a canonical interface name for a generated schema interface.\n-    """\n+    """Return a canonical interface name for a generated schema interface."""\n     if prefix is None:\n-        prefix = \'/\'.join(getUtility(ISiteRoot).getPhysicalPath())[1:]\n+        siteroot = None\n+        if portal_type == "Plone Site":\n+            fti = queryUtility(IDexterityFTI, name=portal_type)\n+            if fti is not None:\n+                siteroot = fti.__parent__\n+        if siteroot is None:\n+            siteroot = getUtility(ISiteRoot)\n+        prefix = "/".join(siteroot.getPhysicalPath())[1:]\n     if suffix:\n-        prefix = \'|\'.join([prefix, suffix])\n+        prefix = "|".join([prefix, suffix])\n \n     encoder = SchemaNameEncoder()\n     return encoder.join(prefix, portal_type, schema)\n \n \n def schemaNameToPortalType(schemaName):\n-    """Return a the portal_type part of a schema name\n-    """\n+    """Return a the portal_type part of a schema name"""\n     encoder = SchemaNameEncoder()\n     return encoder.split(schemaName)[1]\n \n \n def splitSchemaName(schemaName):\n-    """Return a tuple prefix, portal_type, schemaName\n-    """\n+    """Return a tuple prefix, portal_type, schemaName"""\n     encoder = SchemaNameEncoder()\n     items = encoder.split(schemaName)\n     if len(items) == 2:\n@@ -357,8 +360,7 @@ def splitSchemaName(schemaName):\n # Dynamic module factory\n @implementer(IDynamicObjectFactory)\n class SchemaModuleFactory(object):\n-    """Create dynamic schema interfaces on the fly\n-    """\n+    """Create dynamic schema interfaces on the fly"""\n \n     lock = RLock()\n     _transient_SCHEMA_CACHE = {}\n@@ -429,7 +431,7 @@ class DexteritySchemaPolicy(object):\n     """\n \n     def module(self, schemaName, tree):\n-        return \'plone.dexterity.schema.transient\'\n+        return "plone.dexterity.schema.transient"\n \n     def bases(self, schemaName, tree):\n         return ()\n@@ -438,4 +440,4 @@ def name(self, schemaName, tree):\n         # We use a temporary name whilst the interface is being generated;\n         # when it\'s first used, we know the portal_type and site, and can\n         # thus update it\n-        return \'__tmp__\' + schemaName\n+        return "__tmp__" + schemaName\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 04fb32e..b98db41 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -6,7 +6,7 @@\n import unittest\n import zope.component\n import zope.component.testing\n-\n+import zope.globalrequest\n \n try:\n     from unittest.mock import Mock\n@@ -15,8 +15,7 @@\n \n \n class MockTestCase(unittest.TestCase):\n-    """Base class for tests using mocks.\n-    """\n+    """Base class for tests using mocks."""\n \n     _getToolByName_return_values = None\n     _replaced_globals = None\n@@ -25,6 +24,8 @@ class MockTestCase(unittest.TestCase):\n \n     def tearDown(self):\n         zope.component.testing.tearDown(self)\n+        zope.globalrequest.setRequest(None)\n+\n         if self._replaced_globals is not None:\n             for mock, orig in self._replaced_globals.items():\n                 _global_replace(mock, orig)\n@@ -38,27 +39,25 @@ def create_dummy(self, **kw):\n     # wipe the registry each time.\n \n     def mock_utility(self, mock, provides, name=u""):\n-        """Register the mock as a utility providing the given interface\n-        """\n-        zope.component.provideUtility(\n-            provides=provides, component=mock, name=name)\n+        """Register the mock as a utility providing the given interface"""\n+        zope.component.provideUtility(provides=provides, component=mock, name=name)\n \n     def mock_adapter(self, mock, provides, adapts, name=u""):\n         """Register the mock as an adapter providing the given interface\n         and adapting the given interface(s)\n         """\n         zope.component.provideAdapter(\n-            factory=mock, adapts=adapts, provides=provides, name=name)\n+            factory=mock, adapts=adapts, provides=provides, name=name\n+        )\n \n     def mock_subscription_adapter(self, mock, provides, adapts):\n-        """Register the mock as a utility providing the given interface\n-        """\n+        """Register the mock as a utility providing the given interface"""\n         zope.component.provideSubscriptionAdapter(\n-            factory=mock, provides=provides, adapts=adapts)\n+            factory=mock, provides=provides, adapts=adapts\n+        )\n \n     def mock_handler(self, mock, adapts):\n-        """Register the mock as a utility providing the given interface\n-        """\n+        """Register the mock as a utility providing the given interface"""\n         zope.component.provideHandler(factory=mock, adapts=adapts)\n \n     def mock_tool(self, mock, name):\n@@ -72,8 +71,8 @@ def get_return_value(context, name, default=None):\n                 return return_values.get(name, default)\n \n             from Products.CMFCore.utils import getToolByName\n-            self.patch_global(\n-                getToolByName, side_effect=get_return_value)\n+\n+            self.patch_global(getToolByName, side_effect=get_return_value)\n         self._getToolByName_return_values[name] = mock\n \n     def patch_global(self, orig, mock=None, **kw):\n@@ -81,7 +80,8 @@ def patch_global(self, orig, mock=None, **kw):\n             mock = Mock(**kw)\n         elif kw:\n             raise Exception(\n-                \'Keyword arguments are ignored if a mock instance is passed.\')\n+                "Keyword arguments are ignored if a mock instance is passed."\n+            )\n         _global_replace(orig, mock)\n         if self._replaced_globals is None:\n             self._replaced_globals = {}\n@@ -90,18 +90,17 @@ def patch_global(self, orig, mock=None, **kw):\n \n \n class Dummy(object):\n-    """Dummy object with arbitrary attributes\n-    """\n+    """Dummy object with arbitrary attributes"""\n \n     def __init__(self, **kw):\n         self.__dict__.update(kw)\n \n \n class ItemDummy(Dummy):\n-    """ Dummy objects with title getter and setter """\n+    """Dummy objects with title getter and setter"""\n \n-    title = \'\'\n-    portal_type = \'foo\'\n+    title = ""\n+    portal_type = "foo"\n \n     def Title(self):\n         return self.title\n@@ -110,14 +109,14 @@ def setTitle(self, title):\n         self.title = title\n \n     def getId(self):\n-        return self.__dict__.get(\'id\', \'\')\n+        return self.__dict__.get("id", "")\n \n \n # from mocker\n def _global_replace(remove, install):\n     """Replace object \'remove\' with object \'install\' on all dictionaries."""\n     for referrer in gc.get_referrers(remove):\n-        if (type(referrer) is dict):\n+        if type(referrer) is dict:\n             for key, value in list(six.iteritems(referrer)):\n                 if value is remove:\n                     referrer[key] = install\ndiff --git a/plone/dexterity/tests/schemata.py b/plone/dexterity/tests/schemata.py\nindex e99ef8a..d9ff6be 100644\n--- a/plone/dexterity/tests/schemata.py\n+++ b/plone/dexterity/tests/schemata.py\n@@ -5,23 +5,19 @@\n \n \n class ITestSchema(Interface):\n-    """Schema used for testing\n-    """\n+    """Schema used for testing"""\n \n-    title = schema.TextLine(title=u"Title",\n-                            description=u"Administrative title")\n+    title = schema.TextLine(title=u"Title", description=u"Administrative title")\n \n-    description = schema.Text(title=u"Description",\n-                              required=False)\n+    description = schema.Text(title=u"Description", required=False)\n \n \n class ITaggedValueSchema(Interface):\n-    """Schema used for testing tagged value filenames\n-    """\n+    """Schema used for testing tagged value filenames"""\n \n-ITaggedValueSchema.setTaggedValue(FILENAME_KEY, \'/path/to/dummy.xml\')\n+\n+ITaggedValueSchema.setTaggedValue(FILENAME_KEY, "/path/to/dummy.xml")\n \n \n class IDerivedFromTaggedValueSchema(ITaggedValueSchema):\n-    """Schema used for testing tagged value filenames\n-    """\n+    """Schema used for testing tagged value filenames"""\ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex fecad85..dcf3264 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -24,7 +24,6 @@ class IFour(IThree):\n \n \n class TestBehavior(MockTestCase):\n-\n     def test_supports(self):\n \n         # Context mock\n@@ -32,17 +31,9 @@ def test_supports(self):\n \n         # Behavior mock\n         behavior_dummy_1 = self.create_dummy(interface=IOne)\n-        self.mock_utility(\n-            behavior_dummy_1,\n-            IBehavior,\n-            name=IOne.__identifier__\n-        )\n+        self.mock_utility(behavior_dummy_1, IBehavior, name=IOne.__identifier__)\n         behavior_dummy_4 = self.create_dummy(interface=IFour)\n-        self.mock_utility(\n-            behavior_dummy_4,\n-            IBehavior,\n-            name=IFour.__identifier__\n-        )\n+        self.mock_utility(behavior_dummy_4, IBehavior, name=IFour.__identifier__)\n \n         # FTI mock\n         fti = DexterityFTI(u"testtype")\n@@ -72,7 +63,4 @@ def test_enumerate(self):\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \n-        self.assertEqual(\n-            [behavior_dummy],\n-            list(assignable.enumerateBehaviors())\n-        )\n+        self.assertEqual([behavior_dummy], list(assignable.enumerateBehaviors()))\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 4d37d23..388586a 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -25,6 +25,8 @@\n from zope.component import provideAdapter\n from zope.interface import alsoProvides\n from zope.interface import Interface\n+from zope.globalrequest import setRequest\n+from zope.publisher.browser import TestRequest\n \n import six\n import zope.schema\n@@ -42,14 +44,13 @@\n \n \n class TestContent(MockTestCase):\n-\n     def setUp(self):\n+        setRequest(TestRequest())\n         SCHEMA_CACHE.clear()\n         provideAdapter(DefaultOrdering)\n         provideAdapter(AttributeAnnotations)\n \n     def test_provided_by_item(self):\n-\n         class FauxDataManager(object):\n             def setstate(self, obj):\n                 pass\n@@ -61,8 +62,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = Item(id=u\'id\')\n-        item.portal_type = u\'testtype\'\n+        item = Item(id=u"id")\n+        item.portal_type = u"testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n@@ -74,9 +75,10 @@ class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(\'testtype\'))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(Item))\n \n@@ -116,8 +118,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n@@ -132,6 +134,7 @@ class IMarker(Interface):\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n \n@@ -159,8 +162,8 @@ class MyItem(Item):\n             pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n         # this case, the cache is a bit slower.\n@@ -178,6 +181,7 @@ class IMarker(Interface):\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n \n@@ -219,8 +223,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n         # this case, the cache is a bit slower.\n@@ -237,21 +241,13 @@ class ISchema(Interface):\n \n         # Behaviors - one with a subtype and one without\n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(\n-            u"Behavior1",\n-            "",\n-            IBehavior1,\n-            None,\n-            None\n-        )\n+        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n@@ -260,19 +256,13 @@ class IBehavior2(Interface):\n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(\n-            u"Behavior2",\n-            "",\n-            IBehavior2,\n-            IMarker2,\n-            None\n-        )\n+        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        fti_mock.behaviors = [\'behavior1\', \'behavior2\']\n+        fti_mock.behaviors = ["behavior1", "behavior2"]\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n@@ -326,8 +316,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n         # this case, the cache is a bit slower.\n@@ -346,13 +336,7 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(\n-            u"Behavior1",\n-            "",\n-            IBehavior1,\n-            None,\n-            None\n-        )\n+        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n@@ -361,13 +345,7 @@ class IBehavior2(Interface):\n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(\n-            u"Behavior2",\n-            "",\n-            IBehavior2,\n-            IMarker2,\n-            None\n-        )\n+        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         class IBehavior3(Interface):\n@@ -376,29 +354,22 @@ class IBehavior3(Interface):\n         class IMarker3(Interface):\n             pass\n \n-        behavior3 = BehaviorRegistration(\n-            u"Behavior3",\n-            "",\n-            IBehavior3,\n-            IMarker3,\n-            None\n-        )\n+        behavior3 = BehaviorRegistration(u"Behavior3", "", IBehavior3, IMarker3, None)\n         self.mock_utility(behavior3, IBehavior, name="behavior3")\n \n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n         # start clean\n-        SCHEMA_CACHE.invalidate(\'testtype\')\n-        fti_mock.behaviors = [\'behavior1\', \'behavior2\']\n+        SCHEMA_CACHE.invalidate("testtype")\n+        fti_mock.behaviors = ["behavior1", "behavior2"]\n \n         # implementedBy does not look into the fti\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -414,8 +385,8 @@ class IMarker3(Interface):\n \n         # If we now invalidate the schema cache, we should get the\n         # SECOND set of behaviors (which includes behavior3)\n-        SCHEMA_CACHE.invalidate(\'testtype\')\n-        fti_mock.behaviors = [\'behavior1\', \'behavior2\', \'behavior3\']\n+        SCHEMA_CACHE.invalidate("testtype")\n+        fti_mock.behaviors = ["behavior1", "behavior2", "behavior3"]\n \n         # Main schema as looked up in FTI is now provided by item ...\n         self.assertTrue(ISchema.providedBy(item))\n@@ -448,13 +419,14 @@ class ISchema(Interface):\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         self.assertEqual(u"foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n         self.assertEqual(u"id", content.id)\n-        self.assertRaises(AttributeError, getattr, content, \'baz\')\n+        self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_container(self):\n \n@@ -470,13 +442,14 @@ class ISchema(Interface):\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         self.assertEqual(u"foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n         self.assertEqual(u"id", content.id)\n-        self.assertRaises(AttributeError, getattr, content, \'baz\')\n+        self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_item_default_factory_with_context(self):\n \n@@ -492,21 +465,21 @@ def defaultFactory(context):\n             return u"{0:s}_{1:s}".format(context.id, context.portal_type)\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo",\n-                                       defaultFactory=defaultFactory)\n+            foo = zope.schema.TextLine(title=u"foo", defaultFactory=defaultFactory)\n             bar = zope.schema.TextLine(title=u"bar")\n \n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         self.assertEqual(u"id_testtype", content.foo)\n         self.assertEqual(None, content.bar)\n         self.assertEqual(u"id", content.id)\n-        self.assertRaises(AttributeError, getattr, content, \'baz\')\n+        self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_on_container_returns_children(self):\n \n@@ -514,8 +487,8 @@ def test_getattr_on_container_returns_children(self):\n         content.id = u"id"\n         content.portal_type = u"testtype"\n \n-        content[\'foo\'] = Item(\'foo\')\n-        content[\'quux\'] = Item(\'quux\')\n+        content["foo"] = Item("foo")\n+        content["quux"] = Item("quux")\n \n         class ISchema(Interface):\n             foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n@@ -525,31 +498,32 @@ class ISchema(Interface):\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        alsoProvides(fti_mock, IDexterityFTI)\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         # Schema field masks contained item\n         self.assertEqual(u"foo_default", content.foo)\n \n         # But we can still obtain an item\n-        self.assertTrue(isinstance(content[\'foo\'], Item))\n-        self.assertEqual(\'foo\', content[\'foo\'].id)\n+        self.assertTrue(isinstance(content["foo"], Item))\n+        self.assertEqual("foo", content["foo"].id)\n \n         # And if the item isn\'t masked by an attribute, we can still getattr it\n-        self.assertTrue(isinstance(content[\'quux\'], Item))\n-        self.assertEqual(\'quux\', content[\'quux\'].id)\n+        self.assertTrue(isinstance(content["quux"], Item))\n+        self.assertEqual("quux", content["quux"].id)\n \n-        self.assertTrue(isinstance(getattr(content, \'quux\'), Item))\n-        self.assertEqual(\'quux\', getattr(content, \'quux\').id)\n+        self.assertTrue(isinstance(getattr(content, "quux"), Item))\n+        self.assertEqual("quux", getattr(content, "quux").id)\n \n     def test_ZMI_manage_options_container(self):\n         # Make sure we get the expected tabs in the ZMI\n \n-        containerOptions = [o[\'label\'] for o in Container.manage_options]\n+        containerOptions = [o["label"] for o in Container.manage_options]\n         tabs = [\n-            \'Security\',\n-            \'Contents\',\n-            \'Properties\',\n+            "Security",\n+            "Contents",\n+            "Properties",\n         ]\n         for tab in tabs:\n             self.assertTrue(tab in containerOptions, "Tab %s not found" % tab)\n@@ -557,11 +531,11 @@ def test_ZMI_manage_options_container(self):\n     def test_ZMI_manage_options_item(self):\n         # Make sure we get the expected tabs in the ZMI\n \n-        containerOptions = [o[\'label\'] for o in Item.manage_options]\n+        containerOptions = [o["label"] for o in Item.manage_options]\n         tabs = [\n-            \'Security\',\n-            \'View\',\n-            \'Properties\',\n+            "Security",\n+            "View",\n+            "Properties",\n         ]\n         for tab in tabs:\n             self.assertTrue(tab in containerOptions, "Tab %s not found" % tab)\n@@ -569,35 +543,34 @@ def test_ZMI_manage_options_item(self):\n     def test_name_and_id_in_sync(self):\n \n         i = Item()\n-        self.assertEqual(\'\', i.id)\n-        self.assertEqual(\'\', i.getId())\n-        self.assertEqual(u\'\', i.__name__)\n+        self.assertEqual("", i.id)\n+        self.assertEqual("", i.getId())\n+        self.assertEqual(u"", i.__name__)\n \n         i = Item()\n         i.id = "foo"\n-        self.assertEqual(\'foo\', i.id)\n-        self.assertEqual(\'foo\', i.getId())\n-        self.assertEqual(u\'foo\', i.__name__)\n+        self.assertEqual("foo", i.id)\n+        self.assertEqual("foo", i.getId())\n+        self.assertEqual(u"foo", i.__name__)\n \n         i = Item()\n         i.__name__ = u"foo"\n-        self.assertEqual(\'foo\', i.id)\n-        self.assertEqual(\'foo\', i.getId())\n-        self.assertEqual(u\'foo\', i.__name__)\n+        self.assertEqual("foo", i.id)\n+        self.assertEqual("foo", i.getId())\n+        self.assertEqual(u"foo", i.__name__)\n \n     def test_name_unicode_id_str(self):\n \n         i = Item()\n         if six.PY2:\n             try:\n-                i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n+                i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n             except UnicodeEncodeError:\n                 pass\n             else:\n                 self.fail()\n         else:\n-            i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n-\n+            i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \n         i.__name__ = u"o"\n \n@@ -614,56 +587,53 @@ def test_item_dublincore(self):\n \n         import plone.dexterity\n \n-        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n+        datetime_patcher = patch.object(plone.dexterity.content, "DateTime")\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n             title=u"Emperor Penguin",\n-            description=u\'One of the most magnificent birds.\',\n-            subject=u\'Penguins\',\n-            contributors=u\'admin\',\n+            description=u"One of the most magnificent birds.",\n+            subject=u"Penguins",\n+            contributors=u"admin",\n             effective_date="08/20/2010",\n             expiration_date="07/09/2013",\n-            format=\'text/plain\',\n-            language=\'de\',\n-            rights=\'CC\',\n+            format="text/plain",\n+            language="de",\n+            rights="CC",\n         )\n \n         summer_timezone = i.effective_date.timezone()\n         self.assertEqual(i.title, u"Emperor Penguin")\n-        self.assertEqual(i.Title(), \'Emperor Penguin\')\n-        self.assertEqual(i.description, u\'One of the most magnificent birds.\')\n-        self.assertEqual(i.Description(), \'One of the most magnificent birds.\')\n-        self.assertEqual(i.subject, (u\'Penguins\',))\n-        self.assertEqual(i.Subject(), (\'Penguins\',))\n-        self.assertEqual(i.contributors, (u\'admin\',))\n-        self.assertEqual(i.listContributors(), (\'admin\',))\n-        self.assertEqual(i.Contributors(), (\'admin\',))\n-        self.assertEqual(i.format, \'text/plain\')\n-        self.assertEqual(i.effective_date, DateTime(\'08/20/2010\'))\n-        self.assertEqual(\n-            i.EffectiveDate(zone=summer_timezone)[:10], \'2010-08-20\')\n-        self.assertEqual(i.effective(), DateTime(\'08/20/2010\'))\n-        self.assertEqual(i.expiration_date, DateTime(\'07/09/2013\'))\n-        self.assertEqual(\n-            i.ExpirationDate(zone=summer_timezone)[:10], \'2013-07-09\')\n-        self.assertEqual(i.expires(), DateTime(\'07/09/2013\'))\n-        self.assertEqual(i.language, \'de\')\n-        self.assertEqual(i.Language(), \'de\')\n-        self.assertEqual(i.rights, \'CC\')\n-        self.assertEqual(i.Rights(), \'CC\')\n+        self.assertEqual(i.Title(), "Emperor Penguin")\n+        self.assertEqual(i.description, u"One of the most magnificent birds.")\n+        self.assertEqual(i.Description(), "One of the most magnificent birds.")\n+        self.assertEqual(i.subject, (u"Penguins",))\n+        self.assertEqual(i.Subject(), ("Penguins",))\n+        self.assertEqual(i.contributors, (u"admin",))\n+        self.assertEqual(i.listContributors(), ("admin",))\n+        self.assertEqual(i.Contributors(), ("admin",))\n+        self.assertEqual(i.format, "text/plain")\n+        self.assertEqual(i.effective_date, DateTime("08/20/2010"))\n+        self.assertEqual(i.EffectiveDate(zone=summer_timezone)[:10], "2010-08-20")\n+        self.assertEqual(i.effective(), DateTime("08/20/2010"))\n+        self.assertEqual(i.expiration_date, DateTime("07/09/2013"))\n+        self.assertEqual(i.ExpirationDate(zone=summer_timezone)[:10], "2013-07-09")\n+        self.assertEqual(i.expires(), DateTime("07/09/2013"))\n+        self.assertEqual(i.language, "de")\n+        self.assertEqual(i.Language(), "de")\n+        self.assertEqual(i.rights, "CC")\n+        self.assertEqual(i.Rights(), "CC")\n         self.assertEqual(i.creation_date, i.created())\n         self.assertEqual(\n-            i.CreationDate(zone=summer_timezone)[:19],\n-            i.creation_date.ISO()[:19]\n+            i.CreationDate(zone=summer_timezone)[:19], i.creation_date.ISO()[:19]\n         )\n         self.assertEqual(i.modification_date, i.creation_date)\n         self.assertEqual(i.modification_date, i.modified())\n         self.assertEqual(\n             i.ModificationDate(zone=summer_timezone)[:19],\n-            i.modification_date.ISO()[:19]\n+            i.modification_date.ISO()[:19],\n         )\n         self.assertEqual(i.Date(), i.EffectiveDate())\n         self.assertEqual(i.Identifier(), i.absolute_url())\n@@ -672,42 +642,40 @@ def test_item_dublincore_date(self):\n         from DateTime import DateTime\n \n         import plone.dexterity\n-        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n+\n+        datetime_patcher = patch.object(plone.dexterity.content, "DateTime")\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n             title=u"Emperor Penguin",\n-            description=u\'One of the most magnificent birds.\',\n-            subject=u\'Penguins\',\n-            contributors=u\'admin\',\n+            description=u"One of the most magnificent birds.",\n+            subject=u"Penguins",\n+            contributors=u"admin",\n             effective_date=date(2010, 8, 20),\n             expiration_date=date(2013, 7, 9),\n-            format=\'text/plain\',\n-            language=\'de\',\n-            rights=\'CC\',\n+            format="text/plain",\n+            language="de",\n+            rights="CC",\n         )\n \n-        summer_timezone = DateTime(\'2010/08/20\').timezone()\n-        self.assertEqual(i.effective_date, DateTime(\'08/20/2010\'))\n-        self.assertEqual(\n-            i.EffectiveDate(zone=summer_timezone)[:10], \'2010-08-20\')\n-        self.assertEqual(i.effective(), DateTime(\'08/20/2010\'))\n-        self.assertEqual(i.expiration_date, DateTime(\'07/09/2013\'))\n-        self.assertEqual(\n-            i.ExpirationDate(zone=summer_timezone)[:10], \'2013-07-09\')\n-        self.assertEqual(i.expires(), DateTime(\'07/09/2013\'))\n+        summer_timezone = DateTime("2010/08/20").timezone()\n+        self.assertEqual(i.effective_date, DateTime("08/20/2010"))\n+        self.assertEqual(i.EffectiveDate(zone=summer_timezone)[:10], "2010-08-20")\n+        self.assertEqual(i.effective(), DateTime("08/20/2010"))\n+        self.assertEqual(i.expiration_date, DateTime("07/09/2013"))\n+        self.assertEqual(i.ExpirationDate(zone=summer_timezone)[:10], "2013-07-09")\n+        self.assertEqual(i.expires(), DateTime("07/09/2013"))\n         self.assertEqual(i.creation_date, i.created())\n         self.assertEqual(\n-            i.CreationDate(zone=summer_timezone)[:19],\n-            i.creation_date.ISO()[:19]\n+            i.CreationDate(zone=summer_timezone)[:19], i.creation_date.ISO()[:19]\n         )\n         self.assertEqual(i.modification_date, i.creation_date)\n         self.assertEqual(i.modification_date, i.modified())\n         self.assertEqual(\n             i.ModificationDate(zone=summer_timezone)[:19],\n-            i.modification_date.ISO()[:19]\n+            i.modification_date.ISO()[:19],\n         )\n         self.assertEqual(i.Date(), i.EffectiveDate())\n \n@@ -715,67 +683,42 @@ def test_item_dublincore_datetime(self):\n         from DateTime import DateTime\n \n         import plone.dexterity\n-        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n+\n+        datetime_patcher = patch.object(plone.dexterity.content, "DateTime")\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n         i = Item(\n             title=u"Emperor Penguin",\n-            description=u\'One of the most magnificent birds.\',\n-            subject=u\'Penguins\',\n-            contributors=u\'admin\',\n-            effective_date=datetime(\n-                2010, 8, 20, 12, 59, 59, 0, timezone(\'US/Eastern\')),\n-            expiration_date=datetime(\n-                2013, 7, 9, 12, 59, 59, 0, timezone(\'US/Eastern\')),\n-            format=\'text/plain\',\n-            language=\'de\',\n-            rights=\'CC\',\n+            description=u"One of the most magnificent birds.",\n+            subject=u"Penguins",\n+            contributors=u"admin",\n+            effective_date=datetime(2010, 8, 20, 12, 59, 59, 0, timezone("US/Eastern")),\n+            expiration_date=datetime(2013, 7, 9, 12, 59, 59, 0, timezone("US/Eastern")),\n+            format="text/plain",\n+            language="de",\n+            rights="CC",\n         )\n \n-        summer_timezone = DateTime(\'2010/08/20\').timezone()\n-        self.assertEqual(\n-            i.effective_date,\n-            DateTime(\'2010/08/20 12:59:59 US/Eastern\')\n-        )\n+        summer_timezone = DateTime("2010/08/20").timezone()\n+        self.assertEqual(i.effective_date, DateTime("2010/08/20 12:59:59 US/Eastern"))\n         self.assertEqual(\n             i.EffectiveDate(zone=summer_timezone),\n-            DateTime(\n-                \'2010/08/20 12:59:59 US/Eastern\'\n-            ).toZone(\n-                summer_timezone\n-            ).ISO()\n-        )\n-        self.assertEqual(\n-            i.effective(),\n-            DateTime(\'2010/08/20 12:59:59 US/Eastern\')\n-        )\n-        self.assertEqual(\n-            i.expiration_date,\n-            DateTime(\'07/09/2013 12:59:59 US/Eastern\')\n+            DateTime("2010/08/20 12:59:59 US/Eastern").toZone(summer_timezone).ISO(),\n         )\n+        self.assertEqual(i.effective(), DateTime("2010/08/20 12:59:59 US/Eastern"))\n+        self.assertEqual(i.expiration_date, DateTime("07/09/2013 12:59:59 US/Eastern"))\n         self.assertEqual(\n             i.ExpirationDate(zone=summer_timezone),\n-            DateTime(\n-                \'2013-07-09 12:59:59 US/Eastern\'\n-            ).toZone(\n-                summer_timezone\n-            ).ISO()\n-        )\n-        self.assertEqual(\n-            i.expires(),\n-            DateTime(\'2013/07/09 12:59:59 US/Eastern\')\n+            DateTime("2013-07-09 12:59:59 US/Eastern").toZone(summer_timezone).ISO(),\n         )\n+        self.assertEqual(i.expires(), DateTime("2013/07/09 12:59:59 US/Eastern"))\n         self.assertEqual(i.creation_date, i.created())\n-        self.assertEqual(\n-            i.CreationDate(zone=summer_timezone),\n-            i.creation_date.ISO()\n-        )\n+        self.assertEqual(i.CreationDate(zone=summer_timezone), i.creation_date.ISO())\n         self.assertEqual(i.modification_date, i.creation_date)\n         self.assertEqual(i.modification_date, i.modified())\n         self.assertEqual(\n-            i.ModificationDate(zone=summer_timezone),\n-            i.modification_date.ISO()\n+            i.ModificationDate(zone=summer_timezone), i.modification_date.ISO()\n         )\n         self.assertEqual(i.Date(), i.EffectiveDate())\n \n@@ -784,6 +727,7 @@ def test_item_notifyModified(self):\n \n         def mock_addCreator():\n             mock_addCreator.called = True\n+\n         i.addCreator = mock_addCreator\n \n         i.setModificationDate(DateTime(0))\n@@ -795,10 +739,10 @@ def mock_addCreator():\n \n     def test_item_addCreator(self):\n         i = Item()\n-        i.addCreator(u\'harvey\')\n-        self.assertEqual(i.creators, (u\'harvey\',))\n-        self.assertEqual(i.listCreators(), (u\'harvey\',))\n-        self.assertEqual(i.Creator(), \'harvey\')\n+        i.addCreator(u"harvey")\n+        self.assertEqual(i.creators, (u"harvey",))\n+        self.assertEqual(i.listCreators(), (u"harvey",))\n+        self.assertEqual(i.Creator(), "harvey")\n \n     def test_item_Type(self):\n         i = Item()\n@@ -806,11 +750,13 @@ def test_item_Type(self):\n         def mock_getTypeInfo():\n             class TypeInfo(object):\n                 def Title(self):\n-                    return \'Foo\'\n+                    return "Foo"\n+\n             return TypeInfo()\n+\n         i.getTypeInfo = mock_getTypeInfo\n \n-        self.assertEqual(i.Type(), \'Foo\')\n+        self.assertEqual(i.Type(), "Foo")\n \n     def test_item_init_nondc_kwargs(self):\n         i = Item(foo="bar")\n@@ -818,11 +764,8 @@ def test_item_init_nondc_kwargs(self):\n \n     def test_container_init_dublincore(self):\n         from DateTime.DateTime import DateTime\n-        c = Container(\n-            title=u"Test title",\n-            language="en",\n-            effective_date="2010-08-20"\n-        )\n+\n+        c = Container(title=u"Test title", language="en", effective_date="2010-08-20")\n         self.assertEqual(c.title, u"Test title")\n         self.assertEqual(c.language, "en")\n         self.assertTrue(isinstance(c.effective_date, DateTime))\n@@ -858,9 +801,9 @@ def test_Title_converts_to_utf8(self):\n \n     def test_Title_handles_None(self):\n         i = Item(title=None)\n-        self.assertEqual(\'\', i.Title())\n+        self.assertEqual("", i.Title())\n         c = Container(title=None)\n-        self.assertEqual(\'\', c.Title())\n+        self.assertEqual("", c.Title())\n \n     def test_Creator_converts_to_utf8(self):\n         i = Item()\n@@ -875,9 +818,9 @@ def test_Creator_converts_to_utf8(self):\n \n     def test_Creator_handles_None(self):\n         i = Item(creators=None)\n-        self.assertEqual(\'\', i.Creator())\n+        self.assertEqual("", i.Creator())\n         c = Container(creators=None)\n-        self.assertEqual(\'\', c.Creator())\n+        self.assertEqual("", c.Creator())\n \n     def test_Description_converts_to_utf8(self):\n         i = Item()\n@@ -905,14 +848,14 @@ def test_setDescription_converts_to_unicode(self):\n \n     def test_Description_handles_None(self):\n         i = Item(description=None)\n-        self.assertEqual(\'\', i.Description())\n+        self.assertEqual("", i.Description())\n         c = Container(description=None)\n-        self.assertEqual(\'\', c.Description())\n+        self.assertEqual("", c.Description())\n \n     def test_Description_removes_newlines(self):\n         i = Item()\n-        i.description = u\'foo\\r\\nbar\\nbaz\\r\'\n-        self.assertEqual(\'foo bar baz \', i.Description())\n+        i.description = u"foo\\r\\nbar\\nbaz\\r"\n+        self.assertEqual("foo bar baz ", i.Description())\n \n     def test_Subject_converts_to_utf8(self):\n         i = Item()\n@@ -961,16 +904,16 @@ def register(self, obj):\n                 pass\n \n         # Dummy instances\n-        foo = Item(id=u\'foo\')\n-        foo.portal_type = \'testtype\'\n+        foo = Item(id=u"foo")\n+        foo.portal_type = "testtype"\n         foo._p_jar = FauxDataManager()\n \n-        bar = Item(id=u\'bar\')\n-        bar.portal_type = \'testtype\'\n+        bar = Item(id=u"bar")\n+        bar.portal_type = "testtype"\n         bar._p_jar = FauxDataManager()\n \n-        baz = Container(id=u\'baz\')\n-        baz.portal_type = \'testtype\'\n+        baz = Container(id=u"baz")\n+        baz.portal_type = "testtype"\n         baz._p_jar = FauxDataManager()\n \n         # Dummy schema\n@@ -996,30 +939,30 @@ class ISchema(Interface):\n     def test_container_manage_delObjects(self):\n         # OFS does not check the delete permission for each object being\n         # deleted. We want to.\n-        item = Item(id=\'test\')\n-        container = Container(id=\'testcontainer\')\n-        container[\'test\'] = item\n+        item = Item(id="test")\n+        container = Container(id="testcontainer")\n+        container["test"] = item\n         # self.layer[\'portal\'][\'testcontainer\'] = container\n         from zExceptions import Unauthorized\n-        self.assertRaises(Unauthorized, container.manage_delObjects, [\'test\'])\n+\n+        self.assertRaises(Unauthorized, container.manage_delObjects, ["test"])\n \n         # Now permit it and try again.\n         from Products.CMFCore.permissions import DeleteObjects\n+\n         # in order to use manage_permissions the permission has to be defined\n         # somewhere in the mro\n         # since webdav is no longer part here, where it was defined in ZServer.\n         # lets add it explicit here.\n         perms_before = item.__class__.__ac_permissions__\n         item.__class__.__ac_permissions__ = ((DeleteObjects, ()),)\n-        item.manage_permission(DeleteObjects, (\'Anonymous\',))\n-        container.manage_delObjects([\'test\'])\n-        self.assertFalse(\'test\' in container)\n+        item.manage_permission(DeleteObjects, ("Anonymous",))\n+        container.manage_delObjects(["test"])\n+        self.assertFalse("test" in container)\n         item.__class__.__ac_permissions__ = perms_before\n \n     def test_iconstraintypes_adapter(self):\n-\n         class DummyConstrainTypes(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n@@ -1027,8 +970,7 @@ def allowedContentTypes(self):\n                 fti = getUtility(IDexterityFTI, name=u"testtype")\n                 return [fti]\n \n-        self.mock_adapter(\n-            DummyConstrainTypes, IConstrainTypes, (IDexterityContainer, ))\n+        self.mock_adapter(DummyConstrainTypes, IConstrainTypes, (IDexterityContainer,))\n \n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n@@ -1038,54 +980,47 @@ def allowedContentTypes(self):\n \n         self.assertEqual(folder.allowedContentTypes(), [fti_mock])\n         self.assertRaises(\n-            ValueError,\n-            folder.invokeFactory,\n-            u"disallowed_type",\n-            id="test"\n+            ValueError, folder.invokeFactory, u"disallowed_type", id="test"\n         )\n \n     def test_verifyObjectPaste_paste_without_portal_type(self):\n-        original_container = Container(id=\'parent\')\n-        original_container.manage_permission(\'View\', (\'Anonymous\',))\n-        content = Item(id=\'test\')\n-        content.__factory_meta_type__ = \'document\'\n-        container = Container(id=\'container\')\n-        container.all_meta_types = [{\'name\': \'document\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'}]\n-        container.manage_permission(\'View\', (\'Anonymous\',))\n-        container[\'test\'] = content\n-        content = container[\'test\']\n+        original_container = Container(id="parent")\n+        original_container.manage_permission("View", ("Anonymous",))\n+        content = Item(id="test")\n+        content.__factory_meta_type__ = "document"\n+        container = Container(id="container")\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"}\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test"] = content\n+        content = container["test"]\n         container._verifyObjectPaste(content, True)\n \n     def test_verifyObjectPaste_fti_does_not_allow_content(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n-        original_container = Container(id=\'parent\')\n-        original_container.manage_permission(\'View\', (\'Anonymous\',))\n-        content = Item(id=\'test\')\n-        content.__factory_meta_type__ = \'document\'\n-        content.portal_type = \'document\'\n-        container = Container(id=\'container\')\n-        container.all_meta_types = [{\'name\': \'document\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'}]\n-        container.manage_permission(\'View\', (\'Anonymous\',))\n-        container[\'test\'] = content\n-        content = container[\'test\']\n+\n+        original_container = Container(id="parent")\n+        original_container.manage_permission("View", ("Anonymous",))\n+        content = Item(id="test")\n+        content.__factory_meta_type__ = "document"\n+        content.portal_type = "document"\n+        container = Container(id="container")\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"}\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test"] = content\n+        content = container["test"]\n         fti_mock = Mock()\n         fti_mock.isConstructionAllowed = Mock(return_value=False)\n-        self.mock_utility(fti_mock, ITypeInformation, name=\'document\')\n+        self.mock_utility(fti_mock, ITypeInformation, name="document")\n         mock_pt = Mock()\n         mock_pt.getTypeInfo = Mock(return_value=None)\n-        self.mock_tool(mock_pt, \'portal_types\')\n+        self.mock_tool(mock_pt, "portal_types")\n         self.mock_utility(mock_pt, ITypesTool)\n \n-        self.assertRaises(\n-            ValueError,\n-            container._verifyObjectPaste,\n-            content,\n-            True\n-        )\n+        self.assertRaises(ValueError, container._verifyObjectPaste, content, True)\n \n     def test_verifyObjectPaste_locally_disallowed_contents(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n@@ -1147,24 +1082,25 @@ def allowedContentTypes(self):\n \n     def test_verifyObjectPaste_fti_does_allow_content(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n-        original_container = Container(id=\'parent\')\n-        original_container.manage_permission(\'View\', (\'Anonymous\',))\n-        content = Item(id=\'test\')\n-        content.__factory_meta_type__ = \'document\'\n-        content.portal_type = \'document\'\n-        container = Container(id=\'container\')\n-        container.all_meta_types = [{\'name\': \'document\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'}]\n-        container.manage_permission(\'View\', (\'Anonymous\',))\n-        container[\'test\'] = content\n-        content = container[\'test\']\n+\n+        original_container = Container(id="parent")\n+        original_container.manage_permission("View", ("Anonymous",))\n+        content = Item(id="test")\n+        content.__factory_meta_type__ = "document"\n+        content.portal_type = "document"\n+        container = Container(id="container")\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"}\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test"] = content\n+        content = container["test"]\n         mock_fti = Mock()\n         mock_fti.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(mock_fti, ITypeInformation, name=\'document\')\n+        self.mock_utility(mock_fti, ITypeInformation, name="document")\n         mock_pt = Mock()\n         mock_pt.getTypeInfo = Mock(return_value=None)\n-        self.mock_tool(mock_pt, \'portal_types\')\n+        self.mock_tool(mock_pt, "portal_types")\n         self.mock_utility(mock_pt, ITypesTool)\n \n         container._verifyObjectPaste(content, True)\n@@ -1179,31 +1115,26 @@ class ITest(Interface):\n \n         class ITestBehavior(Interface):\n             field2 = zope.schema.TextLine()\n+\n         alsoProvides(ITestBehavior, IFormFieldProvider)\n \n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n-        fti_mock = DexterityFTI(u\'testtype\')\n+        fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = [\'test_behavior\']\n+        fti_mock.behaviors = ["test_behavior"]\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         behavior_reg = BehaviorRegistration(\n-            u"Test Behavior",\n-            "",\n-            ITestBehavior,\n-            ITestBehavior,\n-            None\n+            u"Test Behavior", "", ITestBehavior, ITestBehavior, None\n         )\n         self.mock_utility(behavior_reg, IBehavior, name="test_behavior")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n-        item.field1 = SizedValue(\'1\')\n-        item.field2 = SizedValue(\'22\')\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+        item.field1 = SizedValue("1")\n+        item.field2 = SizedValue("22")\n \n         self.assertEqual(3, item.getSize())\ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex d2cb8f3..9291798 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -14,13 +14,13 @@ class TestUUIDIntegration(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def setUp(self):\n-        import zope.component.testing\n-        import plone.uuid\n-\n         from zope.configuration import xmlconfig\n \n+        import plone.uuid\n+        import zope.component.testing\n+\n         zope.component.testing.setUp()\n-        xmlconfig.file(\'configure.zcml\', plone.uuid)\n+        xmlconfig.file("configure.zcml", plone.uuid)\n \n     def test_uuid_assigned_on_creation(self):\n         from plone.dexterity.content import Item\ndiff --git a/plone/dexterity/tests/test_exportimport.py b/plone/dexterity/tests/test_exportimport.py\nindex 2715da1..97cd983 100644\n--- a/plone/dexterity/tests/test_exportimport.py\n+++ b/plone/dexterity/tests/test_exportimport.py\n@@ -3,43 +3,41 @@\n \n \n class ExportImportTests(unittest.TestCase):\n-\n     def test_export(self):\n         # Make sure our exporter delegates to manage_FTPget()\n         from plone.dexterity.content import Item\n-        from plone.dexterity.exportimport import \\\n-            DexterityContentExporterImporter\n+        from plone.dexterity.exportimport import DexterityContentExporterImporter\n         from Products.GenericSetup.tests.common import DummyExportContext\n \n         class DummyItem(Item):\n             def manage_FTPget(self):\n-                return \'title: Foo\'\n-        item = DummyItem(\'test\')\n+                return "title: Foo"\n+\n+        item = DummyItem("test")\n \n         export_context = DummyExportContext(None)\n         exporter = DexterityContentExporterImporter(item)\n         exporter.export(export_context, subdir=None, root=True)\n \n         self.assertEqual(\n-            export_context._wrote[-1],\n-            (\'.data\', \'title: Foo\', \'text/plain\')\n+            export_context._wrote[-1], (".data", "title: Foo", "text/plain")\n         )\n \n     def test_import(self):\n         # Make sure our importer delegates to PUT()\n         from plone.dexterity.content import Item\n-        from plone.dexterity.exportimport import \\\n-            DexterityContentExporterImporter\n+        from plone.dexterity.exportimport import DexterityContentExporterImporter\n         from Products.GenericSetup.tests.common import DummyImportContext\n \n         class DummyItem(Item):\n             def PUT(self, request, response):\n-                self.title = \'Foo\'\n-        item = DummyItem(\'test\')\n+                self.title = "Foo"\n+\n+        item = DummyItem("test")\n \n         import_context = DummyImportContext(None)\n-        import_context._files[\'.data\'] = \'title: Foo\'\n+        import_context._files[".data"] = b"title: Foo"\n         importer = DexterityContentExporterImporter(item)\n         importer.import_(import_context, None, root=True)\n \n-        self.assertEqual(\'Foo\', item.Title())\n+        self.assertEqual("Foo", item.Title())\ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex f8621b2..df35690 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -11,21 +11,21 @@\n except ImportError:\n     from mock import Mock\n \n+\n class IDummy(Interface):\n     pass\n \n \n class TestFactory(MockTestCase):\n-\n     def test_title(self):\n-        fti_mock = Mock(spec=DexterityFTI, title=\'Mock type\')\n+        fti_mock = Mock(spec=DexterityFTI, title="Mock type")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual("Mock type", factory.title)\n \n     def test_description(self):\n-        fti_mock = Mock(spec=DexterityFTI, description=\'Mock type description\')\n+        fti_mock = Mock(spec=DexterityFTI, description="Mock type description")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         factory = DexterityFactory(portal_type=u"testtype")\n@@ -52,17 +52,18 @@ def test_get_interfaces(self):\n     def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u\'testtype\')\n+        obj_mock = Mock(portal_type=u"testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n-        fti_mock = Mock(spec=DexterityFTI, klass=\'my.mocked.ContentTypeClass\')\n+        fti_mock = Mock(spec=DexterityFTI, klass="my.mocked.ContentTypeClass")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         factory = DexterityFactory(portal_type=u"testtype")\n@@ -78,6 +79,7 @@ def test_create_sets_portal_type_if_not_set(self):\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -87,18 +89,19 @@ def test_create_sets_portal_type_if_not_set(self):\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u\'testtype\')\n+        self.assertEqual(obj_mock.portal_type, u"testtype")\n \n     def test_create_sets_portal_type_if_wrong(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=\'othertype\')\n+        obj_mock = Mock(portal_type="othertype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -108,18 +111,19 @@ def test_create_sets_portal_type_if_wrong(self):\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u\'testtype\')\n+        self.assertEqual(obj_mock.portal_type, u"testtype")\n \n     def test_create_initialises_schema_if_not_provided(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u\'testtype\')\n+        obj_mock = Mock(portal_type=u"testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -133,13 +137,14 @@ def test_create_initialises_schema_if_not_provided(self):\n     def test_factory_passes_args_and_kwargs(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u\'testtype\')\n+        obj_mock = Mock(portal_type=u"testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -149,4 +154,4 @@ def test_factory_passes_args_and_kwargs(self):\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual(obj_mock, factory(u"id", title=u"title"))\n-        klass_mock.assert_called_once_with(u\'id\', title=u\'title\')\n+        klass_mock.assert_called_once_with(u"id", title=u"title")\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 018587f..da1e61f 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import utils\n-from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.fti import DexterityFTIModificationDescription\n@@ -11,6 +10,7 @@\n from plone.dexterity.fti import ftiRenamed\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import DexteritySchemaPolicy\n+from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.tests.schemata import ITestSchema\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n@@ -52,7 +52,6 @@ class ITestInterface(Interface):\n \n \n class TestFTI(MockTestCase):\n-\n     def test_factory_name_is_fti_id(self):\n         fti = DexterityFTI(u"testtype")\n         self.assertEqual(u"testtype", fti.getId())\n@@ -76,7 +75,7 @@ def test_lookupSchema_with_dynamic_schema(self):\n         fti = DexterityFTI(u"testtype")\n         fti.schema = None  # use dynamic schema\n \n-        portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n \n         schemaName = portalTypeToSchemaName(fti.getId())\n@@ -88,12 +87,12 @@ def test_lookupSchema_with_dynamic_schema(self):\n         delattr(plone.dexterity.schema.generated, schemaName)\n \n     def test_lookupSchema_with_nonexistant_schema(self):\n-        """ Tests the case where a dexterity type is not removed cleanly\n+        """Tests the case where a dexterity type is not removed cleanly\n         from the fti, but the code has been removed.\n         """\n         fti = DexterityFTI(u"testtype")\n-        fti.schema = \'model.wont.be.imported\'\n-        portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n+        fti.schema = "model.wont.be.imported"\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n         schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n@@ -109,6 +108,7 @@ def test_lookupModel_from_string(self):\n         model_dummy = Model()\n \n         from plone.supermodel import loadString\n+\n         self.patch_global(loadString, return_value=model_dummy)\n \n         model = fti.lookupModel()\n@@ -124,25 +124,27 @@ def test_lookupModel_from_file_with_package(self):\n         model_dummy = Model()\n \n         import plone.dexterity.tests\n+\n         abs_file = os.path.join(\n-            os.path.split(plone.dexterity.tests.__file__)[0],\n-            "test.xml"\n+            os.path.split(plone.dexterity.tests.__file__)[0], "test.xml"\n         )\n \n         from plone.supermodel import loadFile\n+\n         loadFile_mock = self.patch_global(loadFile, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity")\n+            abs_file, reload=True, policy=u"dexterity"\n+        )\n \n     def test_lookupModel_from_file_with_absolute_path(self):\n \n         import plone.dexterity.tests\n+\n         abs_file = os.path.join(\n-            os.path.split(plone.dexterity.tests.__file__)[0],\n-            "test.xml"\n+            os.path.split(plone.dexterity.tests.__file__)[0], "test.xml"\n         )\n \n         fti = DexterityFTI(u"testtype")\n@@ -153,12 +155,14 @@ def test_lookupModel_from_file_with_absolute_path(self):\n         model_dummy = Model()\n \n         from plone.supermodel import loadFile\n+\n         loadFile_mock = self.patch_global(loadFile, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity")\n+            abs_file, reload=True, policy=u"dexterity"\n+        )\n \n     def test_lookupModel_from_file_with_win32_absolute_path(self):\n \n@@ -169,17 +173,21 @@ def test_lookupModel_from_file_with_win32_absolute_path(self):\n \n         model_dummy = Model()\n \n-        from os.path import isabs, isfile\n+        from os.path import isabs\n+        from os.path import isfile\n+\n         self.patch_global(isabs, return_value=True)\n         self.patch_global(isfile, return_value=True)\n \n         from plone.supermodel import loadFile\n+\n         loadFile_mock = self.patch_global(loadFile, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            fti.model_file, reload=True, policy=u"dexterity")\n+            fti.model_file, reload=True, policy=u"dexterity"\n+        )\n \n     def test_lookupModel_with_schema_only(self):\n         fti = DexterityFTI(u"testtype")\n@@ -201,14 +209,13 @@ def test_lookupModel_from_string_with_schema(self):\n         model_dummy = Model()\n \n         from plone.supermodel import loadString\n-        loadString_mock = self.patch_global(\n-            loadString, return_value=model_dummy)\n+\n+        loadString_mock = self.patch_global(loadString, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         self.assertIs(ITestSchema, fti.lookupSchema())\n-        loadString_mock.assert_called_once_with(\n-            fti.model_source, policy=u\'dexterity\')\n+        loadString_mock.assert_called_once_with(fti.model_source, policy=u"dexterity")\n \n     def test_lookupModel_failure(self):\n         fti = DexterityFTI(u"testtype")\n@@ -225,16 +232,17 @@ def test_fires_modified_event_on_update_property_if_changed(self):\n         fti.global_allow = False\n \n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n-        fti._updateProperty(\'title\', "New title")  # fires event caught above\n-        fti._updateProperty(\'allow_discussion\', False)  # does not fire\n+        fti._updateProperty("title", "New title")  # fires event caught above\n+        fti._updateProperty("allow_discussion", False)  # does not fire\n \n         event = notify_mock.call_args[0][0]\n         self.assertTrue(IObjectModifiedEvent.providedBy(event))\n         self.assertEqual(len(event.descriptions), 1)\n-        self.assertEqual(event.descriptions[0].attribute, \'title\')\n-        self.assertEqual(event.descriptions[0].oldValue, \'Old title\')\n+        self.assertEqual(event.descriptions[0].attribute, "title")\n+        self.assertEqual(event.descriptions[0].oldValue, "Old title")\n \n     def test_fires_modified_event_on_change_props_per_changed_property(self):\n         fti = DexterityFTI(u"testtype")\n@@ -243,12 +251,11 @@ def test_fires_modified_event_on_change_props_per_changed_property(self):\n         fti.global_allow = True\n \n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         fti.manage_changeProperties(\n-            title="New title",\n-            allow_discussion=False,\n-            global_allow=False\n+            title="New title", allow_discussion=False, global_allow=False\n         )\n \n         self.assertEqual(len(notify_mock.call_args_list), 2)\n@@ -259,24 +266,21 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         container_dummy = self.create_dummy()\n \n         permission_dummy = self.create_dummy()\n-        permission_dummy.id = \'demo.Permission\'\n-        permission_dummy.title = \'Some add permission\'\n+        permission_dummy.id = "demo.Permission"\n+        permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(\n-            permission_dummy,\n-            IPermission,\n-            name=u"demo.Permission"\n-        )\n+        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         self.assertEqual(True, fti.isConstructionAllowed(container_dummy))\n         security_manager_mock.checkPermission.assert_called_once_with(\n-            \'Some add permission\', container_dummy)\n+            "Some add permission", container_dummy\n+        )\n \n     def test_checks_permission_in_is_construction_allowed_false(self):\n         fti = DexterityFTI(u"testtype")\n@@ -284,28 +288,25 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         container_dummy = self.create_dummy()\n \n         permission_dummy = self.create_dummy()\n-        permission_dummy.id = \'demo.Permission\'\n-        permission_dummy.title = \'Some add permission\'\n+        permission_dummy.id = "demo.Permission"\n+        permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(\n-            permission_dummy,\n-            IPermission,\n-            name=u"demo.Permission"\n-        )\n+        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n         security_manager_mock.checkPermission.assert_called_once_with(\n-            \'Some add permission\', container_dummy)\n+            "Some add permission", container_dummy\n+        )\n \n     def test_no_permission_utility_means_no_construction(self):\n         fti = DexterityFTI(u"testtype")\n-        fti.add_permission = \'demo.Permission\'  # not an IPermission utility\n+        fti.add_permission = "demo.Permission"  # not an IPermission utility\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n@@ -317,85 +318,76 @@ def test_no_permission_means_no_construction(self):\n \n     def test_add_view_url_set_on_creation(self):\n         fti = DexterityFTI(u"testtype")\n-        self.assertEqual(\n-            \'string:${folder_url}/++add++testtype\',\n-            fti.add_view_expr\n-        )\n+        self.assertEqual("string:${folder_url}/++add++testtype", fti.add_view_expr)\n \n     def test_factory_set_on_creation(self):\n         fti = DexterityFTI(u"testtype")\n-        self.assertEqual(\'testtype\', fti.factory)\n+        self.assertEqual("testtype", fti.factory)\n \n     def test_addview_and_factory_not_overridden_on_creation(self):\n         fti = DexterityFTI(\n             u"testtype",\n             add_view_expr="string:${folder_url}/@@my-addview",\n-            factory="my.factory"\n+            factory="my.factory",\n         )\n-        self.assertEqual(\n-            \'string:${folder_url}/@@my-addview\',\n-            fti.add_view_expr\n-        )\n-        self.assertEqual(\'my.factory\', fti.factory)\n+        self.assertEqual("string:${folder_url}/@@my-addview", fti.add_view_expr)\n+        self.assertEqual("my.factory", fti.factory)\n \n     def test_meta_type(self):\n         fti = DexterityFTI(\n-            u"testtype",\n-            klass="plone.dexterity.tests.test_fti.TestClass"\n+            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n         )\n         self.assertEqual(TestClass.meta_type, fti.Metatype())\n \n     def test_meta_type_change_class(self):\n         fti = DexterityFTI(\n-            u"testtype",\n-            klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n-        fti._updateProperty(\n-            \'klass\',\n-            "plone.dexterity.tests.test_fti.TestClass2"\n+            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n         )\n+        fti._updateProperty("klass", "plone.dexterity.tests.test_fti.TestClass2")\n         self.assertEqual(TestClass2.meta_type, fti.Metatype())\n \n     def test_title_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', title=b\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u"testtype", title=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Title())\n+        self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Title())\n \n         # with an i18n domain, we get a Message\n-        fti.i18n_domain = \'test\'\n+        fti.i18n_domain = "test"\n         msgid = fti.Title()\n-        self.assertEqual(u\'t\\xe9st\', msgid)\n-        self.assertEqual(\'test\', msgid.domain)\n+        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("test", msgid.domain)\n \n     def test_description_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', description=b\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u"testtype", description=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Description())\n+        self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Description())\n \n         # with an i18n domain, we get a Message\n-        fti.i18n_domain = \'test\'\n+        fti.i18n_domain = "test"\n         msgid = fti.Description()\n-        self.assertEqual(u\'t\\xe9st\', msgid)\n-        self.assertEqual(\'test\', msgid.domain)\n+        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("test", msgid.domain)\n \n     def test_lookupModel_without_schema_policy(self):\n         gsm = getGlobalSiteManager()\n         gsm.registerUtility(\n             DexteritySchemaPolicy(),\n             plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"dexterity"\n+            name=u"dexterity",\n         )\n \n         fti = DexterityFTI(u"testtype")\n         fti.schema = None\n-        fti.model_source = \'<model xmlns="http://namespaces.plone.org/\'\\\n-                           \'supermodel/schema"><schema/></model>\'\n+        fti.model_source = (\n+            \'<model xmlns="http://namespaces.plone.org/\'\n+            \'supermodel/schema"><schema/></model>\'\n+        )\n         fti.model_file = None\n \n         model = fti.lookupModel()\n-        self.assertEqual(False, ITestInterface in model.schemata[\'\'].__bases__)\n+        self.assertEqual(False, ITestInterface in model.schemata[""].__bases__)\n \n     def test_lookupModel_with_schema_policy(self):\n         class TestSchemaPolicy(DexteritySchemaPolicy):\n@@ -405,20 +397,20 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy,\n-            plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n         )\n \n         fti = DexterityFTI(u"testtype")\n         fti.schema = None\n-        fti.model_source = \'<model xmlns="http://namespaces.plone.org/\'\\\n-                           \'supermodel/schema"><schema/></model>\'\n+        fti.model_source = (\n+            \'<model xmlns="http://namespaces.plone.org/\'\n+            \'supermodel/schema"><schema/></model>\'\n+        )\n         fti.model_file = None\n         fti.schema_policy = u"test"\n \n         model = fti.lookupModel()\n-        self.assertEqual(True, ITestInterface in model.schemata[\'\'].__bases__)\n+        self.assertEqual(True, ITestInterface in model.schemata[""].__bases__)\n \n \n class TestFTIEvents(MockTestCase):\n@@ -438,32 +430,29 @@ def test_components_registered_on_add(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         ftiAdded(fti, ObjectAddedEvent(fti, container_dummy, fti.getId()))\n \n         args1, kwargs1 = site_manager_mock.registerUtility.call_args_list[0]\n         self.assertEqual(args1, (fti, IDexterityFTI, portal_type))\n-        self.assertEqual(kwargs1, {\'info\': \'plone.dexterity.dynamic\'})\n+        self.assertEqual(kwargs1, {"info": "plone.dexterity.dynamic"})\n \n         args2, kwargs2 = site_manager_mock.registerUtility.call_args_list[1]\n         self.assertIsInstance(args2[0], DexterityFactory)\n         self.assertEqual(args2[0].portal_type, portal_type)\n         self.assertEqual(args2[1:], (IFactory, portal_type))\n-        self.assertEqual(kwargs2, {\'info\': \'plone.dexterity.dynamic\'})\n+        self.assertEqual(kwargs2, {"info": "plone.dexterity.dynamic"})\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEqual(\n-            None,\n-            queryUtility(IDexterityFTI, name=portal_type)\n-        )\n+        self.assertNotEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_not_registered_on_add_if_exist(self):\n@@ -476,18 +465,16 @@ def test_components_not_registered_on_add_if_exist(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Register FTI utility and factory utility\n \n         self.mock_utility(fti, IDexterityFTI, name=portal_type)\n-        self.mock_utility(\n-            DexterityFactory(portal_type),\n-            IFactory,\n-            name=portal_type\n-        )\n+        self.mock_utility(DexterityFactory(portal_type), IFactory, name=portal_type)\n \n         # We expect that all components are registered, so do not expect any\n         # registrations\n@@ -506,8 +493,10 @@ def test_components_unregistered_on_delete(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # First add the components\n@@ -516,16 +505,16 @@ def test_components_unregistered_on_delete(self):\n         # Then remove them again\n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n         self.assertEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertEqual(None, queryUtility(IFactory, name=portal_type))\n \n-    def test_components_unregistered_on_delete_does_not_error_with_no_components(self):  # noqa\n+    def test_components_unregistered_on_delete_does_not_error_with_no_components(\n+        self,\n+    ):  # noqa\n         portal_type = u"testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n@@ -535,8 +524,10 @@ def test_components_unregistered_on_delete_does_not_error_with_no_components(sel\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # We expect to always be able to unregister without error, even if the\n@@ -545,7 +536,8 @@ def test_components_unregistered_on_delete_does_not_error_with_no_components(sel\n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IDexterityFTI, name=portal_type)\n+            provided=IDexterityFTI, name=portal_type\n+        )\n \n     def test_global_components_not_unregistered_on_delete(self):\n         portal_type = u"testtype"\n@@ -557,18 +549,16 @@ def test_global_components_not_unregistered_on_delete(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Register FTI utility and factory utility\n \n         self.mock_utility(fti, IDexterityFTI, name=portal_type)\n-        self.mock_utility(\n-            DexterityFactory(portal_type),\n-            IFactory,\n-            name=portal_type\n-        )\n+        self.mock_utility(DexterityFactory(portal_type), IFactory, name=portal_type)\n \n         # We expect to always be able to unregister without error, even if the\n         # component exists. The factory is only unregistered if it was\n@@ -576,16 +566,11 @@ def test_global_components_not_unregistered_on_delete(self):\n \n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEqual(\n-            None,\n-            queryUtility(IDexterityFTI, name=portal_type)\n-        )\n+        self.assertNotEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_reregistered_on_rename(self):\n@@ -598,24 +583,19 @@ def test_components_reregistered_on_rename(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n-        self.assertEqual(\n-            \'string:${folder_url}/++add++testtype\',\n-            fti.add_view_expr\n-        )\n+        self.assertEqual("string:${folder_url}/++add++testtype", fti.add_view_expr)\n \n         ftiRenamed(\n             fti,\n             ObjectMovedEvent(\n-                fti,\n-                container_dummy,\n-                fti.getId(),\n-                container_dummy,\n-                u"newtype"\n-            )\n+                fti, container_dummy, fti.getId(), container_dummy, u"newtype"\n+            ),\n         )\n \n         # First look for unregistration of all local components\n@@ -626,16 +606,11 @@ def test_components_reregistered_on_rename(self):\n         # Then look for re-registration of global components\n         self.assertEqual(site_manager_mock.registerUtility.call_count, 2)\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEqual(\n-            None,\n-            queryUtility(IDexterityFTI, name=portal_type)\n-        )\n+        self.assertNotEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_dynamic_schema_refreshed_on_modify_model_file(self):\n@@ -650,9 +625,7 @@ class INew(Interface):\n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         class IBlank1(Interface):\n@@ -666,13 +639,12 @@ class IBlank1(Interface):\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'model_file\', \'\')\n-            )\n+                fti, DexterityFTIModificationDescription("model_file", "")\n+            ),\n         )\n \n-        self.assertTrue(\'title\' in IBlank1)\n-        self.assertTrue(IBlank1[\'title\'].title == u"title")\n+        self.assertTrue("title" in IBlank1)\n+        self.assertTrue(IBlank1["title"].title == u"title")\n \n     def test_dynamic_schema_refreshed_on_modify_model_source(self):\n         portal_type = u"testtype"\n@@ -686,9 +658,7 @@ class INew(Interface):\n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # b/c of zope.interface does not support hashing of the same class multiple times\n@@ -705,13 +675,12 @@ class IBlank2(Interface):\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'model_source\', \'\')\n-            )\n+                fti, DexterityFTIModificationDescription("model_source", "")\n+            ),\n         )\n \n-        self.assertTrue(\'title\' in IBlank2)\n-        self.assertTrue(IBlank2[\'title\'].title == u"title")\n+        self.assertTrue("title" in IBlank2)\n+        self.assertTrue(IBlank2["title"].title == u"title")\n \n     def test_dynamic_schema_refreshed_on_modify_schema_policy(self):\n         portal_type = u"testtype"\n@@ -730,14 +699,10 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy,\n-            plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n         )\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # Set source interface\n@@ -745,7 +710,7 @@ def bases(self, schemaName, tree):\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank3)\n         original = getattr(plone.dexterity.schema.generated, schemaName)\n         self.assertNotIn(INew, original.__bases__)\n-        self.assertNotIn(\'title\', original)\n+        self.assertNotIn("title", original)\n \n         # Set new schema_policy\n         fti.schema_policy = "test"\n@@ -754,12 +719,11 @@ def bases(self, schemaName, tree):\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'schema_policy\', \'\')\n-            )\n+                fti, DexterityFTIModificationDescription("schema_policy", "")\n+            ),\n         )\n         updated = getattr(plone.dexterity.schema.generated, schemaName)\n-        self.assertIn(\'title\', updated)\n+        self.assertIn("title", updated)\n         self.assertIn(INew, updated.__bases__)\n \n     def test_concrete_schema_not_refreshed_on_modify_schema(self):\n@@ -775,9 +739,7 @@ class INew(Interface):\n         model_dummy = Model({u"": INew})\n         fti.lookupModel = Mock(return_value=model_dummy)\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # Set schema to something so that hasDynamicSchema is false\n@@ -792,13 +754,10 @@ class INew(Interface):\n \n         ftiModified(\n             fti,\n-            ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'schema\', \'\')\n-            )\n+            ObjectModifiedEvent(fti, DexterityFTIModificationDescription("schema", "")),\n         )\n \n-        self.assertFalse(\'title\' in IBlank4)\n+        self.assertFalse("title" in IBlank4)\n \n     def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         portal_type = u"testtype"\n@@ -809,34 +768,37 @@ def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend like we have a utility registered\n \n         reg1 = self.create_dummy()\n         reg1.provided = IFactory\n-        reg1.name = \'old-factory\'\n-        reg1.info = \'plone.dexterity.dynamic\'\n+        reg1.name = "old-factory"\n+        reg1.info = "plone.dexterity.dynamic"\n \n         site_manager_mock.registeredUtilities = Mock(return_value=[reg1])\n \n-        fti.factory = \'new-factory\'\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'factory\', \'old-factory\')\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "old-factory")\n+            ),\n         )\n \n         # Expect this to get removed\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IFactory, name=\'old-factory\')\n+            provided=IFactory, name="old-factory"\n+        )\n         # And a new one to be created with the new factory name\n         self.assertEqual(\n-            site_manager_mock.registerUtility.call_args[0][2], \'new-factory\')\n+            site_manager_mock.registerUtility.call_args[0][2], "new-factory"\n+        )\n \n     def test_new_factory_not_registered_after_name_changed_if_exists(self):\n         portal_type = u"testtype"\n@@ -847,24 +809,21 @@ def test_new_factory_not_registered_after_name_changed_if_exists(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Create a global default for the new name\n-        self.mock_utility(\n-            DexterityFactory(portal_type),\n-            IFactory,\n-            name=\'new-factory\'\n-        )\n+        self.mock_utility(DexterityFactory(portal_type), IFactory, name="new-factory")\n \n-        fti.factory = \'new-factory\'\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'factory\', \'old-factory\')\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "old-factory")\n+            ),\n         )\n \n         # Factory should not be registered again\n@@ -879,80 +838,82 @@ def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend like we have a utility registered\n \n         reg1 = self.create_dummy()\n         reg1.provided = IFactory\n-        reg1.name = \'old-factory\'\n+        reg1.name = "old-factory"\n         reg1.info = None\n \n         site_manager_mock.registeredUtilities = Mock(return_value=[reg1])\n \n-        fti.factory = \'new-factory\'\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'factory\', \'old-factory\')\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "old-factory")\n+            ),\n         )\n \n         # This should not be removed, since we didn\'t create it\n         self.assertFalse(site_manager_mock.unregisterUtility.called)\n         # A new one may still be created, however\n         self.assertEqual(\n-            site_manager_mock.registerUtility.call_args[0][2], \'new-factory\')\n+            site_manager_mock.registerUtility.call_args[0][2], "new-factory"\n+        )\n \n     def test_renamed_factory_not_unregistered_if_not_unique(self):\n         portal_type = u"testtype"\n-        fti = DexterityFTI(portal_type, factory=\'common-factory\')\n+        fti = DexterityFTI(portal_type, factory="common-factory")\n         portal_type2 = u"testtype2"\n-        fti2 = DexterityFTI(portal_type2, factory=\'common-factory\')\n+        fti2 = DexterityFTI(portal_type2, factory="common-factory")\n \n         # Mock the lookup of the site and the site manager at the site root\n         dummy_site = self.create_dummy()\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend two FTIs are registered, both using common-factory\n-        site_manager_mock.registeredUtilities = Mock(return_value=[\n-            self.create_dummy(\n-                provided=IFactory,\n-                name=\'common-factory\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-            self.create_dummy(\n-                component=fti,\n-                provided=IDexterityFTI,\n-                name=\'testtype\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-            self.create_dummy(\n-                component=fti2,\n-                provided=IDexterityFTI,\n-                name=\'testtype2\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-        ])\n-\n-        fti.factory = \'new-factory\'\n+        site_manager_mock.registeredUtilities = Mock(\n+            return_value=[\n+                self.create_dummy(\n+                    provided=IFactory,\n+                    name="common-factory",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+                self.create_dummy(\n+                    component=fti,\n+                    provided=IDexterityFTI,\n+                    name="testtype",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+                self.create_dummy(\n+                    component=fti2,\n+                    provided=IDexterityFTI,\n+                    name="testtype2",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+            ]\n+        )\n+\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\n-                    \'factory\',\n-                    \'common-factory\'\n-                )\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "common-factory")\n+            ),\n         )\n \n         # We shouldn\'t remove this since fti2 still uses it\n@@ -960,13 +921,14 @@ def test_renamed_factory_not_unregistered_if_not_unique(self):\n \n         # A new one may still be created, however\n         self.assertEqual(\n-            site_manager_mock.registerUtility.call_args[0][2], \'new-factory\')\n+            site_manager_mock.registerUtility.call_args[0][2], "new-factory"\n+        )\n \n     def test_deleted_factory_not_unregistered_if_not_unique(self):\n         portal_type = u"testtype"\n-        fti = DexterityFTI(portal_type, factory=\'common-factory\')\n+        fti = DexterityFTI(portal_type, factory="common-factory")\n         portal_type2 = u"testtype2"\n-        fti2 = DexterityFTI(portal_type2, factory=\'common-factory\')\n+        fti2 = DexterityFTI(portal_type2, factory="common-factory")\n         container_dummy = self.create_dummy()\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -974,31 +936,35 @@ def test_deleted_factory_not_unregistered_if_not_unique(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend two FTIs are registered, both using common-factory\n         # NB: Assuming that "testtype" was already removed when this gets\n         #     called\n-        site_manager_mock.registeredUtilities = Mock(return_value=[\n-            self.create_dummy(\n-                provided=IFactory,\n-                name=\'common-factory\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-            self.create_dummy(\n-                component=fti2,\n-                provided=IDexterityFTI,\n-                name=\'testtype2\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-        ])\n+        site_manager_mock.registeredUtilities = Mock(\n+            return_value=[\n+                self.create_dummy(\n+                    provided=IFactory,\n+                    name="common-factory",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+                self.create_dummy(\n+                    component=fti2,\n+                    provided=IDexterityFTI,\n+                    name="testtype2",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+            ]\n+        )\n \n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n         # We shouldn\'t remove this since fti2 still uses it\n         # The type itself should be removed though\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IDexterityFTI, name=u\'testtype\'\n+            provided=IDexterityFTI, name=u"testtype"\n         )\ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex e24741b..403e038 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -15,24 +15,25 @@\n except ImportError:\n     from mock import Mock\n \n+\n class PrimaryFieldInfoTestCase(MockTestCase):\n     def test_primary_field_info(self):\n-\n         class ITest(Interface):\n             title = schema.TextLine()\n             body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n         fti = DexterityFTI(u"testtype")\n         fti.lookupSchema = Mock(return_value=ITest)\n         fti.behaviors = []\n         self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n-        item.body = u\'body text\'\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+        item.body = u"body text"\n \n         info = PrimaryFieldInfo(item)\n-        assert info.fieldname == \'body\'\n-        assert info.field == ITest[\'body\']\n-        assert info.value == \'body text\'\n+        assert info.fieldname == "body"\n+        assert info.field == ITest["body"]\n+        assert info.value == "body text"\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex 87b3ec6..35e90e9 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -20,20 +20,20 @@\n except ImportError:\n     from mock import Mock\n \n-class TestSchemaModuleFactory(MockTestCase):\n \n+class TestSchemaModuleFactory(MockTestCase):\n     def test_transient_schema(self):\n \n         # No IDexterityFTI registered\n         factory = schema.SchemaModuleFactory()\n-        schemaName = schema.portalTypeToSchemaName(\'testtype\', prefix=\'site\')\n+        schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n         klass = factory(schemaName, schema.generated)\n \n         self.assertTrue(isinstance(klass, InterfaceClass))\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n     def test_concrete_default_schema(self):\n@@ -41,24 +41,25 @@ def test_concrete_default_schema(self):\n         # Mock schema model\n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title=u"Dummy")\n+\n         mock_model = Model({u"": IDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n-        schemaName = schema.portalTypeToSchemaName(\'testtype\', prefix=\'site\')\n+        schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n         klass = factory(schemaName, schema.generated)\n \n         self.assertTrue(isinstance(klass, InterfaceClass))\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n-        self.assertEqual((\'dummy\',), tuple(zope.schema.getFieldNames(klass)))\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n+        self.assertEqual(("dummy",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_named_schema(self):\n \n@@ -68,20 +69,18 @@ class IDummy(Interface):\n \n         class INamedDummy(Interface):\n             named = zope.schema.TextLine(title=u"Named")\n-        mock_model = Model({u"": IDummy,\n-                            u"named": INamedDummy})\n+\n+        mock_model = Model({u"": IDummy, u"named": INamedDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n         schemaName = schema.portalTypeToSchemaName(\n-            \'testtype\',\n-            schema=u"named",\n-            prefix=\'site\'\n+            "testtype", schema=u"named", prefix="site"\n         )\n         klass = factory(schemaName, schema.generated)\n \n@@ -92,13 +91,13 @@ class INamedDummy(Interface):\n \n         self.assertFalse(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n-        self.assertEqual((\'named\',), tuple(zope.schema.getFieldNames(klass)))\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n+        self.assertEqual(("named",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_transient_schema_made_concrete(self):\n \n         factory = schema.SchemaModuleFactory()\n-        schemaName = schema.portalTypeToSchemaName(\'testtype\', prefix=\'site\')\n+        schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n \n         # No IDexterityFTI registered\n \n@@ -107,7 +106,7 @@ def test_transient_schema_made_concrete(self):\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n         # Calling it again gives the same result\n@@ -117,18 +116,19 @@ def test_transient_schema_made_concrete(self):\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n         # Now register a mock FTI and try again\n \n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title=u"Dummy")\n+\n         mock_model = Model({u"": IDummy})\n \n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         klass = factory(schemaName, schema.generated)\n \n@@ -136,61 +136,64 @@ class IDummy(Interface):\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n \n         # Now we get the fields from the FTI\'s model\n-        self.assertEqual((\'dummy\',), tuple(zope.schema.getFieldNames(klass)))\n+        self.assertEqual(("dummy",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_portalTypeToSchemaName_with_schema_and_prefix(self):\n         self.assertEqual(\n-            \'prefix_0_type_0_schema\',\n-            schema.portalTypeToSchemaName(\'type\', \'schema\', \'prefix\')\n+            "prefix_0_type_0_schema",\n+            schema.portalTypeToSchemaName("type", "schema", "prefix"),\n         )\n         self.assertEqual(\n-            \'prefix_0_type\',\n-            schema.portalTypeToSchemaName(\'type\', \'\', \'prefix\')\n+            "prefix_0_type", schema.portalTypeToSchemaName("type", "", "prefix")\n         )\n         self.assertEqual(\n-            \'prefix_0_type_1_one_2_two\',\n-            schema.portalTypeToSchemaName(\'type one.two\', \'\', \'prefix\')\n+            "prefix_0_type_1_one_2_two",\n+            schema.portalTypeToSchemaName("type one.two", "", "prefix"),\n         )\n \n     def test_portalTypeToSchemaName_looks_up_portal_for_prefix(self):\n         portal_mock = Mock()\n-        portal_mock.getPhysicalPath = Mock(return_value=[\'\', \'foo\', \'portalid\'])\n+        portal_mock.getPhysicalPath = Mock(return_value=["", "foo", "portalid"])\n         self.mock_utility(portal_mock, ISiteRoot)\n \n-        self.assertEqual(\n-            \'foo_4_portalid_0_type\',\n-            schema.portalTypeToSchemaName(\'type\')\n-        )\n+        self.assertEqual("foo_4_portalid_0_type", schema.portalTypeToSchemaName("type"))\n \n     def test_schemaNameToPortalType(self):\n         self.assertEqual(\n-            \'type\',\n-            schema.schemaNameToPortalType(\'prefix_0_type_0_schema\')\n-        )\n-        self.assertEqual(\n-            \'type\',\n-            schema.schemaNameToPortalType(\'prefix_0_type\')\n+            "type", schema.schemaNameToPortalType("prefix_0_type_0_schema")\n         )\n+        self.assertEqual("type", schema.schemaNameToPortalType("prefix_0_type"))\n         self.assertEqual(\n-            \'type one.two\',\n-            schema.schemaNameToPortalType(\'prefix_0_type_1_one_2_two\')\n+            "type one.two", schema.schemaNameToPortalType("prefix_0_type_1_one_2_two")\n         )\n \n     def test_splitSchemaName(self):\n         self.assertEqual(\n-            (\'prefix\', \'type\', \'schema\',),\n-            schema.splitSchemaName(\'prefix_0_type_0_schema\')\n+            (\n+                "prefix",\n+                "type",\n+                "schema",\n+            ),\n+            schema.splitSchemaName("prefix_0_type_0_schema"),\n         )\n         self.assertEqual(\n-            (\'prefix\', \'type\', \'\',),\n-            schema.splitSchemaName(\'prefix_0_type\')\n+            (\n+                "prefix",\n+                "type",\n+                "",\n+            ),\n+            schema.splitSchemaName("prefix_0_type"),\n         )\n         self.assertEqual(\n-            (\'prefix\', \'type one.two\', \'\',),\n-            schema.splitSchemaName(\'prefix_0_type_1_one_2_two\')\n+            (\n+                "prefix",\n+                "type one.two",\n+                "",\n+            ),\n+            schema.splitSchemaName("prefix_0_type_1_one_2_two"),\n         )\n \n     def test_invalidate_cache(self):\n@@ -198,9 +201,7 @@ def test_invalidate_cache(self):\n         fti = DexterityFTI(portal_type)\n         SCHEMA_CACHE.get(portal_type)\n         SCHEMA_CACHE.behavior_schema_interfaces(fti)\n-        self.assertIn(\'_v_schema_behavior_schema_interfaces\',\n-                      fti.__dict__.keys())\n+        self.assertIn("_v_schema_behavior_schema_interfaces", fti.__dict__.keys())\n \n         invalidate_cache(fti)\n-        self.assertNotIn(\'_v_schema_behavior_schema_interfaces\',\n-                         fti.__dict__.keys())\n+        self.assertNotIn("_v_schema_behavior_schema_interfaces", fti.__dict__.keys())\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex df4aa1a..9f05432 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -4,7 +4,8 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from zope.interface import Interface\n-\n+from zope.globalrequest import setRequest\n+from zope.publisher.browser import TestRequest\n \n try:\n     from unittest.mock import Mock\n@@ -18,12 +19,11 @@\n \n \n class TestSchemaCache(MockTestCase):\n-\n     def setUp(self):\n+        setRequest(TestRequest())\n         SCHEMA_CACHE.clear()\n \n     def test_repeated_get_lookup(self):\n-\n         class ISchema(Interface):\n             pass\n \n@@ -44,24 +44,23 @@ def test_repeated_behavior_registration_lookup(self):\n         # Mock a test behavior\n         class ITestBehavior(Interface):\n             pass\n+\n         fti.behaviors = [ITestBehavior.__identifier__]\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=Interface,\n             marker=ITestBehavior,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestBehavior.__identifier__\n-        )\n \n-        r1 = SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n-        r2 = SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n+        self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n+\n+        r1 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n+        r2 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n@@ -72,11 +71,11 @@ def test_unexistent_behaviors_lookup(self):\n         fti.behaviors = ["foo.bar"]\n \n         with patch("warnings.warn") as mock_warnings:\n-            SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n+            SCHEMA_CACHE.behavior_registrations(u"testtype")\n             # Verify the warning has been issued\n             mock_warnings.assert_called_once_with(\n                 (\n-                    \'No behavior registration found for behavior named \'\n+                    "No behavior registration found for behavior named "\n                     \'"foo.bar" for factory "testtype" - trying deprecated \'\n                     \'fallback lookup (will be removed in 3.0)..."\'\n                 ),\n@@ -94,21 +93,20 @@ class ITestSchema(Interface):\n \n         class ITestMarker(Interface):\n             pass\n+\n         fti.behaviors = [ITestSchema.__identifier__]\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=ITestSchema,\n             marker=ITestMarker,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestSchema.__identifier__\n-        )\n+\n+        self.mock_utility(registration, IBehavior, ITestSchema.__identifier__)\n \n         s1 = SCHEMA_CACHE.subtypes(u"testtype")\n         s2 = SCHEMA_CACHE.subtypes(u"testtype")\n@@ -116,7 +114,6 @@ class ITestMarker(Interface):\n         self.assertTrue(s1[0] is s2[0] is ITestMarker)\n \n     def test_repeated_lookup_with_changed_schema(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -133,7 +130,6 @@ class ISchema2(Interface):\n         self.assertTrue(schema1 is schema2 and schema2 is ISchema1)\n \n     def test_repeated_lookup_with_changed_schema_and_invalidation(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -152,7 +148,6 @@ class ISchema2(Interface):\n         self.assertTrue(schema2 is ISchema2)\n \n     def test_none_not_cached(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -160,34 +155,32 @@ class ISchema1(Interface):\n         fti.lookupSchema = Mock(side_effect=[None, ISchema1, ISchema1])\n         self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema1 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema2 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema3 = SCHEMA_CACHE.get(u"testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n \n     def test_attribute_and_value_error_not_cached(self):\n-\n         class ISchema1(Interface):\n             pass\n \n         fti = DexterityFTI(u"testtype")\n-        fti.lookupSchema = Mock(\n-            side_effect=[AttributeError, ValueError, ISchema1])\n+        fti.lookupSchema = Mock(side_effect=[AttributeError, ValueError, ISchema1])\n         self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n \n         schema1 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema2 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema3 = SCHEMA_CACHE.get(u"testtype")\n \n         self.assertTrue(schema1 is None)\n@@ -195,7 +188,6 @@ class ISchema1(Interface):\n         self.assertTrue(schema3 is ISchema1)\n \n     def test_unknown_type_not_cached(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -211,7 +203,6 @@ class ISchema1(Interface):\n         self.assertTrue(schema2 is schema3 is ISchema1)\n \n     def test_clear_all_caches(self):\n-\n         class ISchema1(Interface):\n             pass\n \ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex aeebc0b..acca24a 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -10,6 +10,8 @@\n from zope.interface import provider\n from zope.security.interfaces import IPermission\n from zope.security.permission import Permission\n+from zope.globalrequest import setRequest\n+from zope.publisher.browser import TestRequest\n \n import zope.schema\n \n@@ -18,9 +20,11 @@\n     from unittest.mock import Mock\n except ImportError:\n     from mock import Mock\n-class TestAttributeProtection(MockTestCase):\n \n+\n+class TestAttributeProtection(MockTestCase):\n     def setUp(self):\n+        setRequest(TestRequest())\n         SCHEMA_CACHE.clear()\n \n     def test_item(self):\n@@ -30,8 +34,7 @@ class ITestSchema(Interface):\n             test = zope.schema.TextLine(title=u"Test")\n \n         ITestSchema.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test=\'zope2.View\', foo=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n         )\n \n         from plone.autoform.interfaces import IFormFieldProvider\n@@ -41,54 +44,46 @@ class ITestBehavior(Interface):\n             test2 = zope.schema.TextLine(title=u"Test")\n \n         ITestBehavior.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test2=\'zope2.View\', foo2=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n         )\n \n         # Mock a test behavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestBehavior.__identifier__\n-        )\n+\n+        self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n+        from plone.behavior.interfaces import IBehaviorAssignable\n         from plone.dexterity.behavior import DexterityBehaviorAssignable\n         from plone.dexterity.interfaces import IDexterityContent\n-        from plone.behavior.interfaces import IBehaviorAssignable\n+\n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.behaviors = ()\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Mock permissions\n         self.mock_utility(\n-            Permission(u\'zope2.View\', u"View"),\n-            IPermission,\n-            u\'zope2.View\'\n+            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n         )\n         self.mock_utility(\n-            Permission(u\'foo.View\', u"View foo"),\n-            IPermission,\n-            u\'foo.View\'\n+            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n         )\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n@@ -96,30 +91,27 @@ class ITestBehavior(Interface):\n         # mock security manager\n         security_manager_mock = Mock()\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         # run 1: schema and no behavior access to schema protected attribute\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n         self.assertFalse(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n+            item.__allow_access_to_unprotected_subobjects__("test", u"foo")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\'View\', item)\n+        security_manager_mock.checkPermission.assert_called_with("View", item)\n \n         # run 2: schema and no behavior access to known non schema attribute\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View foo\', item)\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        security_manager_mock.checkPermission.assert_called_with("View foo", item)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -127,18 +119,18 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test2\', u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\'View\', item)\n+        security_manager_mock.checkPermission.assert_called_with("View", item)\n \n         # run 5: no schema but behavior\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         fti_mock.lookupSchema = Mock(return_value=None)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test2\', u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\'View\', item)\n+        security_manager_mock.checkPermission.assert_called_with("View", item)\n \n     def test_container(self):\n \n@@ -147,8 +139,7 @@ class ITestSchema(Interface):\n             test = zope.schema.TextLine(title=u"Test")\n \n         ITestSchema.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test=\'zope2.View\', foo=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n         )\n \n         from plone.autoform.interfaces import IFormFieldProvider\n@@ -158,54 +149,46 @@ class ITestBehavior(Interface):\n             test2 = zope.schema.TextLine(title=u"Test")\n \n         ITestBehavior.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test2=\'zope2.View\', foo2=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n         )\n \n         # Mock a test behavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestBehavior.__identifier__\n-        )\n+\n+        self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n+        from plone.behavior.interfaces import IBehaviorAssignable\n         from plone.dexterity.behavior import DexterityBehaviorAssignable\n         from plone.dexterity.interfaces import IDexterityContent\n-        from plone.behavior.interfaces import IBehaviorAssignable\n+\n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Mock permissions\n         self.mock_utility(\n-            Permission(u\'zope2.View\', u"View"),\n-            IPermission,\n-            u\'zope2.View\'\n+            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n         )\n         self.mock_utility(\n-            Permission(u\'foo.View\', u"View foo"),\n-            IPermission,\n-            u\'foo.View\'\n+            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n         )\n \n         # Content item\n-        container = Container(\'test\')\n+        container = Container("test")\n         container.portal_type = u"testtype"\n         container.test = u"foo"\n         container.foo = u"bar"\n@@ -213,40 +196,29 @@ class ITestBehavior(Interface):\n         # mock security manager\n         security_manager_mock = Mock()\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         # run 1: schema and no behavior access to schema protected attribute\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n         self.assertFalse(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'test\',\n-                u"foo"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("test", u"foo")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View", container)\n \n         # run 2: schema and no behavior access to known non schema attribute\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'foo\',\n-                u"bar"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("foo", u"bar")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View foo\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View foo", container)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'random\',\n-                u"stuff"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -254,26 +226,18 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'test2\',\n-                u"foo2"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View", container)\n \n         # run 5: no schema but behavior\n         fti_mock.lookupSchema = Mock(return_value=None)\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'test2\',\n-                u"foo2"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View", container)\n \n     def test_no_tagged_value(self):\n \n@@ -285,10 +249,10 @@ class ITestSchema(Interface):\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n@@ -296,16 +260,12 @@ class ITestSchema(Interface):\n         SCHEMA_CACHE.clear()\n \n         # Everything allowed\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_no_read_permission(self):\n@@ -313,22 +273,23 @@ def test_no_read_permission(self):\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title=u"Test")\n-        ITestSchema.setTaggedValue(READ_PERMISSIONS_KEY, dict(foo=\'foo.View\'))\n+\n+        ITestSchema.setTaggedValue(READ_PERMISSIONS_KEY, dict(foo="foo.View"))\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Mock permissions\n         self.mock_utility(\n-            Permission(u\'foo.View\', u"View foo"), IPermission, u\'foo.View\'\n+            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n         )\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n@@ -337,21 +298,17 @@ class ITestSchema(Interface):\n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_no_schema(self):\n@@ -360,24 +317,20 @@ def test_no_schema(self):\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=None)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n \n         SCHEMA_CACHE.clear()\n \n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_schema_exception(self):\n@@ -387,38 +340,32 @@ def test_schema_exception(self):\n         fti_mock.lookupSchema = Mock(side_effect=AttributeError)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n \n         SCHEMA_CACHE.clear()\n \n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_empty_name(self):\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'\', u"foo")\n-        )\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", u"foo"))\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex c4c7401..37a8296 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -11,11 +11,10 @@\n \n \n class TestUtils(MockTestCase):\n-\n     def test_getAdditionalSchemata(self):\n-        from plone.dexterity.interfaces import IDexterityFTI\n-        from plone.behavior.interfaces import IBehavior\n         from plone.autoform.interfaces import IFormFieldProvider\n+        from plone.behavior.interfaces import IBehavior\n+        from plone.dexterity.interfaces import IDexterityFTI\n         from zope.interface import Interface\n         from zope.interface import providedBy\n \n@@ -26,10 +25,10 @@ class IBehaviorSchema(Interface):\n             pass\n \n         behavior_mock = Mock()\n-        fti_mock = DexterityFTI(u\'testtype\')\n+        fti_mock = DexterityFTI(u"testtype")\n \n-        portal_type = \'prefix_0_type_0_schema\'\n-        behavior_name = \'behavior_0\'\n+        portal_type = "prefix_0_type_0_schema"\n+        behavior_name = "behavior_0"\n \n         fti_mock.behaviors = (behavior_name,)\n         behavior_mock.interface = IBehaviorInterface\n@@ -40,9 +39,7 @@ class IBehaviorSchema(Interface):\n         self.mock_utility(fti_mock, IDexterityFTI, portal_type)\n \n         self.mock_adapter(\n-            provider_mock,\n-            IFormFieldProvider,\n-            (providedBy(IBehaviorInterface), )\n+            provider_mock, IFormFieldProvider, (providedBy(IBehaviorInterface),)\n         )\n \n         generator = utils.getAdditionalSchemata(None, portal_type)\n@@ -53,39 +50,44 @@ class IBehaviorSchema(Interface):\n         self.assertTrue(schemata is IBehaviorSchema)\n \n     def testAddContentToContainer_preserves_existing_id(self):\n-        from plone.dexterity.content import Item\n         from plone.dexterity.content import Container\n+        from plone.dexterity.content import Item\n+\n         container = Container()\n-        container._ordering = u\'unordered\'\n+        container._ordering = u"unordered"\n         # Allow anyone to access the contents information on the container.\n         # This allows to check for existing content with the same id.\n         container.manage_permission(\n-            \'Access contents information\', [\'Anonymous\'], acquire=1)\n+            "Access contents information", ["Anonymous"], acquire=1\n+        )\n \n-        from zope.component import provideAdapter, provideUtility\n-        from zope.container.interfaces import INameChooser\n-        from zope.interface import Interface\n         from plone.app.content.namechooser import NormalizingNameChooser\n         from plone.folder.interfaces import IOrdering\n         from plone.folder.unordered import UnorderedOrdering\n-        from plone.i18n.normalizer.interfaces import IURLNormalizer\n         from plone.i18n.normalizer import URLNormalizer\n+        from plone.i18n.normalizer.interfaces import IURLNormalizer\n+        from zope.component import provideAdapter\n+        from zope.component import provideUtility\n+        from zope.container.interfaces import INameChooser\n+        from zope.interface import Interface\n+\n         provideAdapter(NormalizingNameChooser, [Interface], INameChooser)\n         provideUtility(URLNormalizer(), IURLNormalizer)\n         provideAdapter(UnorderedOrdering, [Interface], IOrdering)\n \n         # if the item has an id already, use it\n         from plone.dexterity.utils import addContentToContainer\n+\n         item = Item()\n-        item.id = \'foo\'\n+        item.id = "foo"\n         item = addContentToContainer(container, item, checkConstraints=False)\n-        self.assertEqual(item.id, \'foo\')\n+        self.assertEqual(item.id, "foo")\n \n         # unless it\'s a duplicate\n         item = Item()\n-        item.id = \'foo\'\n+        item.id = "foo"\n         item = addContentToContainer(container, item, checkConstraints=False)\n-        self.assertEqual(item.id, \'foo-1\')\n+        self.assertEqual(item.id, "foo-1")\n \n     def test_all_merged_tagged_values_dict(self):\n         from zope.interface import Interface\n@@ -97,23 +99,20 @@ class IIFace2(Interface):\n             pass\n \n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"), {}\n         )\n \n-        IIFace1.setTaggedValue(\'foo\', {\'a\': 10})\n-        IIFace1.setTaggedValue(\'bar\', {\'a\': 11})\n+        IIFace1.setTaggedValue("foo", {"a": 10})\n+        IIFace1.setTaggedValue("bar", {"a": 11})\n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {\'a\': 10}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"), {"a": 10}\n         )\n-        IIFace2.setTaggedValue(\'foo\', {\'a\': 12})\n+        IIFace2.setTaggedValue("foo", {"a": 12})\n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {\'a\': 12}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"), {"a": 12}\n         )\n-        IIFace2.setTaggedValue(\'foo\', {\'a\': 13, \'b\': 14})\n+        IIFace2.setTaggedValue("foo", {"a": 13, "b": 14})\n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {\'a\': 13, \'b\': 14}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"),\n+            {"a": 13, "b": 14},\n         )\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex a5a6cb0..e27e728 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -50,6 +50,7 @@ class TestRequest(TestRequestBase):\n     """Zope 3\'s TestRequest doesn\'t support item assignment, but Zope 2\'s\n     request does.\n     """\n+\n     def __setitem__(self, key, value):\n         pass\n \n@@ -90,7 +91,6 @@ def enumerateBehaviors(self):\n \n \n class TestAddView(MockTestCase):\n-\n     def test_addview_sets_form_portal_type(self):\n \n         context = Container(u"container")\n@@ -110,7 +110,7 @@ def test_form_create(self):\n         # FTI - returns dummy factory name\n \n         fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.factory = u\'testfactory\'\n+        fti_mock.factory = u"testfactory"\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         # The form we\'re testing\n@@ -119,6 +119,7 @@ def test_form_create(self):\n \n         class ISchema(Interface):\n             foo = schema.TextLine()\n+\n         form.fields = Fields(ISchema)\n \n         # createObject and applyChanges\n@@ -128,11 +129,12 @@ class ISchema(Interface):\n         data_dummy = {u"foo": u"bar"}\n \n         from zope.component import createObject\n+\n         self.patch_global(createObject, return_value=obj_dummy)\n \n         provideAdapter(AttributeField)\n \n-        portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n \n         self.assertEqual(obj_dummy, form.create(data_dummy))\n@@ -145,13 +147,12 @@ def test_add(self):\n         obj = Mock()\n         request = TestRequest()\n \n-        container._setObject = Mock(return_value=u\'newid\')\n+        container._setObject = Mock(return_value=u"newid")\n         container._getOb = Mock(return_value=obj)\n-        container.absolute_url = Mock(\n-            return_value="http://nohost/plone/container")\n+        container.absolute_url = Mock(return_value="http://nohost/plone/container")\n \n         obj.id = u"newid"\n-        obj.portal_type = \'testtype\'\n+        obj.portal_type = "testtype"\n \n         # New object\'s FTI\n         fti_mock = DexterityFTI(u"testtype")\n@@ -161,18 +162,13 @@ def test_add(self):\n         # Container FTI\n         container_fti_mock = DexterityFTI(u"containertype")\n         container_fti_mock.allowType = Mock(return_value=True)\n-        self.mock_utility(\n-            container_fti_mock,\n-            IDexterityFTI,\n-            name=u"containertype"\n-        )\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n         # Name chooser\n         @implementer(INameChooser)\n         class NameChooser(object):\n-\n             def __init__(self, context):\n                 pass\n \n@@ -198,12 +194,10 @@ def test_add_raises_unauthorized_if_construction_not_allowed(self):\n \n         # Container FTI\n         container_fti_mock = DexterityFTI(u"containertype")\n-        self.mock_utility(\n-            container_fti_mock, IDexterityFTI, name=u"containertype"\n-        )\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n-        obj.portal_type = \'testtype\'\n+        obj.portal_type = "testtype"\n \n         form = DefaultAddForm(container, request)\n         form.portal_type = u"testtype"\n@@ -216,7 +210,7 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         obj = Mock()\n         request = TestRequest()\n \n-        obj.portal_type = \'testtype\'\n+        obj.portal_type = "testtype"\n \n         # New object\'s FTI\n         fti_mock = DexterityFTI(u"testtype")\n@@ -226,11 +220,7 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         # Container FTI\n         container_fti_mock = DexterityFTI(u"containertype")\n         container_fti_mock.allowType = Mock(return_value=False)\n-        self.mock_utility(\n-            container_fti_mock,\n-            IDexterityFTI,\n-            name=u"containertype"\n-        )\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n@@ -248,12 +238,12 @@ def test_label(self):\n         context_mock = Mock()\n         request_mock = TestRequest()\n \n-        request_mock.form[\'disable_border\'] = True\n+        request_mock.form["disable_border"] = True\n \n         # FTI\n \n         fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u\'Test title\')\n+        fti_mock.Title = Mock(return_value=u"Test title")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         # Form\n@@ -263,12 +253,12 @@ def test_label(self):\n \n         label = addform.label\n         self.assertEqual(u"Add ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping[\'name\'])\n+        self.assertEqual(u"Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         request_mock = TestRequest()\n \n         # FTI\n@@ -277,48 +267,37 @@ def test_schema_lookup_add(self):\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n-            IBehaviorThree.__identifier__\n+            IBehaviorThree.__identifier__,\n         )\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 1",\n             description=u"Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorOne.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 2",\n             description=u"Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorTwo.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 3",\n             description=u"Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorThree.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorThree.__identifier__)\n \n         # Form\n         view = DefaultAddForm(context_mock, request_mock)\n@@ -327,31 +306,22 @@ def test_schema_lookup_add(self):\n         self.assertEqual(ISchema, view.schema)\n \n         # we expect here only formfieldprovider!\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n         # When we register our own IBehaviorAssignable we can\n         # influence what goes into the additionalSchemata. But in an Addform\n         # this never grips, since its an adapter on context, and contextless\n         # there is always the FTI the only valid source\n-        self.mock_adapter(\n-            NoBehaviorAssignable,\n-            IBehaviorAssignable,\n-            [Interface]\n-        )\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.mock_adapter(NoBehaviorAssignable, IBehaviorAssignable, [Interface])\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n     def test_fires_add_begun_event(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u\'testtype\',\n-            allowedContentTypes=lambda: [self.create_dummy(getId=lambda: \'testtype\')])\n+            portal_type=u"testtype",\n+            allowedContentTypes=lambda: [self.create_dummy(getId=lambda: "testtype")],\n+        )\n         request_mock = TestRequest()\n \n         # FTI\n@@ -359,16 +329,13 @@ def test_fires_add_begun_event(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -383,8 +350,8 @@ def test_update_checks_allowed_types(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u\'testtype\',\n-            allowedContentTypes=lambda: [])\n+            portal_type=u"testtype", allowedContentTypes=lambda: []\n+        )\n         request_mock = TestRequest()\n \n         # FTI\n@@ -392,11 +359,7 @@ def test_update_checks_allowed_types(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n@@ -409,8 +372,8 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u\'testtype\',\n-            allowedContentTypes=lambda: [])\n+            portal_type=u"testtype", allowedContentTypes=lambda: []\n+        )\n         request_mock = TestRequest()\n         alsoProvides(request_mock, IDeferSecurityCheck)\n \n@@ -419,11 +382,7 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n@@ -433,30 +392,29 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n         try:\n             view.update()\n         except ValueError:\n-            self.fail("Update raised Unauthorized with security checks "\n-                      "deferred")\n+            self.fail("Update raised Unauthorized with security checks " "deferred")\n \n     def test_fires_add_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n-        context_mock.absolute_url = \\\n-            lambda *a, **kw: \'http://127.0.0.1/plone/item\'\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n         class StatusMessage(object):\n-\n             def __init__(self, request):\n                 pass\n \n-            def addStatusMessage(self, msg, type=\'\'):\n+            def addStatusMessage(self, msg, type=""):\n                 pass\n+\n         self.mock_adapter(StatusMessage, IStatusMessage, (Interface,))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -464,12 +422,10 @@ def addStatusMessage(self, msg, type=\'\'):\n         view.handleCancel(view, {})\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IAddCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IAddCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n \n \n class TestEditView(MockTestCase):\n-\n     def setUp(self):\n         SCHEMA_CACHE.clear()\n \n@@ -479,13 +435,13 @@ def test_label(self):\n \n         # Context and request\n \n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         request_mock = TestRequest()\n \n         # FTI\n \n         fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u\'Test title\')\n+        fti_mock.Title = Mock(return_value=u"Test title")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         # Form\n@@ -496,7 +452,7 @@ def test_label(self):\n \n         label = editview.label\n         self.assertEqual(u"Edit ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping[\'name\'])\n+        self.assertEqual(u"Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n \n@@ -504,7 +460,7 @@ def test_schema_lookup_edit(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n@@ -514,48 +470,37 @@ class IMarker(IDexterityContent):\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n-            IBehaviorThree.__identifier__\n+            IBehaviorThree.__identifier__,\n         )\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 1",\n             description=u"Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorOne.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 2",\n             description=u"Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorTwo.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 3",\n             description=u"Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorThree.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorThree.__identifier__)\n \n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n@@ -564,25 +509,18 @@ class IMarker(IDexterityContent):\n         self.assertEqual(ISchema, view.schema)\n \n         # we expect here only formfieldprovider!\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n         # When we register our own IBehaviorAssignable we can\n         # influence what goes into the additionalSchemata.\n-        self.mock_adapter(\n-            NoBehaviorAssignable,\n-            IBehaviorAssignable,\n-            [IMarker]\n-        )\n+        self.mock_adapter(NoBehaviorAssignable, IBehaviorAssignable, [IMarker])\n         additionalSchemata = tuple(view.additionalSchemata)\n         self.assertEqual(tuple(), tuple(additionalSchemata))\n \n     def test_fires_edit_begun_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         request_mock = TestRequest()\n \n         # FTI\n@@ -590,15 +528,12 @@ def test_fires_edit_begun_event(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -606,30 +541,29 @@ def test_fires_edit_begun_event(self):\n         view.update()\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IEditBegunEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IEditBegunEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\', title=u\'foo\')\n-        context_mock.absolute_url = \\\n-            lambda *a, **kw: \'http://127.0.0.1/plone/item\'\n+        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n         class StatusMessage(object):\n-\n             def __init__(self, request):\n                 pass\n \n-            def addStatusMessage(self, msg, type=\'\'):\n+            def addStatusMessage(self, msg, type=""):\n                 pass\n+\n         self.mock_adapter(StatusMessage, IStatusMessage, (Interface,))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -637,53 +571,50 @@ def addStatusMessage(self, msg, type=\'\'):\n         view.handleCancel(view, {})\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IEditCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IEditCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_finished_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\', title=u\'foo\')\n-        context_mock.absolute_url = \\\n-            lambda *a, **kw: \'http://127.0.0.1/plone/item\'\n+        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n         class StatusMessage(object):\n-\n             def __init__(self, request):\n                 pass\n \n-            def addStatusMessage(self, msg, type=\'\'):\n+            def addStatusMessage(self, msg, type=""):\n                 pass\n+\n         self.mock_adapter(StatusMessage, IStatusMessage, (Interface,))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n         view.widgets = Mock()\n-        view.widgets.extract = Mock(return_value=({\'title\': u\'foo\'}, []))\n+        view.widgets.extract = Mock(return_value=({"title": u"foo"}, []))\n         view.applyChanges = Mock()\n         view.handleApply(view, {})\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IEditFinishedEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IEditFinishedEvent.providedBy(notify_mock.call_args[0][0]))\n \n \n class TestDefaultView(MockTestCase):\n-\n     def test_schema_lookup_default_view(self):\n \n         # Context and request\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n@@ -693,48 +624,37 @@ class IMarker(IDexterityContent):\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n-            IBehaviorThree.__identifier__\n+            IBehaviorThree.__identifier__,\n         )\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 1",\n             description=u"Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorOne.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 2",\n             description=u"Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorTwo.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 3",\n             description=u"Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorThree.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorThree.__identifier__)\n \n         # Form\n         view = DefaultView(context_mock, request_mock)\n@@ -743,17 +663,10 @@ class IMarker(IDexterityContent):\n         self.assertEqual(ISchema, view.schema)\n \n         # we expect here only formfieldprovider!\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n         # When we register our own IBehaviorAssignable we can\n         # influence what goes into the additionalSchemata.\n-        self.mock_adapter(\n-            NoBehaviorAssignable,\n-            IBehaviorAssignable,\n-            [IMarker]\n-        )\n+        self.mock_adapter(NoBehaviorAssignable, IBehaviorAssignable, [IMarker])\n         additionalSchemata = tuple(view.additionalSchemata)\n         self.assertEqual(tuple(), tuple(additionalSchemata))\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex a204e1f..b753f88 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -35,10 +35,10 @@\n     from zope.filerepresentation.interfaces import IFileFactory\n     from zope.filerepresentation.interfaces import IRawReadFile\n     from zope.filerepresentation.interfaces import IRawWriteFile\n-    from zope.interface import provider\n     from zope.interface import alsoProvides\n     from zope.interface import implementer\n     from zope.interface import Interface\n+    from zope.interface import provider\n     from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n     from zope.publisher.browser import TestRequest\n     from zope.size.interfaces import ISized\n@@ -53,20 +53,17 @@\n     except ImportError:\n         from mock import Mock\n \n-\n     if six.PY2:\n         # cope with upstream library changes in rendering the XML prolog\n         XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n     else:\n         XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n-\n     @provider(IFormFieldProvider)\n     class ITestBehavior(Interface):\n         foo = schema.Int()\n         bar = schema.Bytes()\n \n-\n     class DAVTestRequest(TestRequest):\n \n         get_header = TestRequest.getHeader\n@@ -74,11 +71,9 @@ class DAVTestRequest(TestRequest):\n         def _createResponse(self):\n             return HTTPResponse()\n \n-\n     class TestWebZope2DAVAPI(MockTestCase):\n-\n         def test_get_size_no_adapter(self):\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(0, item.get_size())\n \n@@ -88,12 +83,13 @@ def __init__(self, context):\n                     self.context = context\n \n                 def sizeForSorting(self):\n-                    return \'lines\', 10\n+                    return "lines", 10\n \n                 def sizeForDisplay(self):\n-                    \'10 lines\'\n+                    "10 lines"\n+\n             self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(0, item.get_size())\n \n@@ -103,17 +99,18 @@ def __init__(self, context):\n                     self.context = context\n \n                 def sizeForSorting(self):\n-                    return \'bytes\', 10\n+                    return "bytes", 10\n \n                 def sizeForDisplay(self):\n-                    \'10 bytes\'\n+                    "10 bytes"\n+\n             self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(10, item.get_size())\n \n         def test_content_type_no_adapter(self):\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(None, item.content_type())\n             self.assertEqual(None, item.Format())\n@@ -122,49 +119,53 @@ def test_content_type_simple_adapter(self):\n             class ReadFileAdapter(object):\n                 def __init__(self, context):\n                     self.context = context\n-                mimeType = \'text/foo\'\n+\n+                mimeType = "text/foo"\n                 # others omitted\n+\n             self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n-            item = Item(\'test\')\n+            item = Item("test")\n \n-            self.assertEqual(\'text/foo\', item.content_type())\n-            self.assertEqual(\'text/foo\', item.Format())\n+            self.assertEqual("text/foo", item.content_type())\n+            self.assertEqual("text/foo", item.Format())\n \n         def test_get_no_adapter(self):\n-            item = Item(\'test\')\n+            item = Item("test")\n \n-            self.assertEqual(\'\', item.manage_DAVget())\n+            self.assertEqual("", item.manage_DAVget())\n \n         def test_get_simple_adapter(self):\n             class ReadFileAdapter(object):\n                 def __init__(self, context):\n                     self.context = context\n-                mimeType = \'text/foo\'\n-                encoding = \'latin1\'\n+\n+                mimeType = "text/foo"\n+                encoding = "latin1"\n \n                 def size(self):\n                     return 10\n \n                 def read(self, size=None):\n-                    return \'1234567890\'\n+                    return "1234567890"\n+\n             self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n-            self.assertEqual(\'1234567890\', item.manage_DAVget())\n+            self.assertEqual("1234567890", item.manage_DAVget())\n             self.assertEqual(\n-                \'text/foo; charset="latin1"\',\n-                request.response.getHeader(\'Content-Type\')\n+                \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n             )\n-            self.assertEqual(\'10\', request.response.getHeader(\'Content-Length\'))\n+            self.assertEqual("10", request.response.getHeader("Content-Length"))\n \n         def test_get_minimal_adapter(self):\n             class ReadFileAdapter(object):\n                 def __init__(self, context):\n                     self.context = context\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -172,24 +173,25 @@ def size(self):\n                     return None\n \n                 def read(self, size=None):\n-                    return \'1234567890\'\n+                    return "1234567890"\n+\n             self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n-            self.assertEqual(\'1234567890\', item.manage_DAVget())\n-            self.assertEqual(None, request.response.getHeader(\'Content-Type\'))\n-            self.assertEqual(None, request.response.getHeader(\'Content-Length\'))\n+            self.assertEqual("1234567890", item.manage_DAVget())\n+            self.assertEqual(None, request.response.getHeader("Content-Type"))\n+            self.assertEqual(None, request.response.getHeader("Content-Length"))\n \n         def test_get_streaming(self):\n             @implementer(IStreamIterator)\n             class ReadFileAdapter(object):\n-\n                 def __init__(self, context):\n                     self.context = context\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -197,25 +199,26 @@ def size(self):\n                     return 10\n \n                 def read(self, size=None):\n-                    return \'1234567890\'\n+                    return "1234567890"\n \n             adapterInstance = ReadFileAdapter(None)\n \n             def factory(context):\n                 return adapterInstance\n+\n             self.mock_adapter(factory, IRawReadFile, (Item,))\n \n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             self.assertEqual(adapterInstance, item.manage_DAVget())\n \n         def test_put_no_adapter(self):\n-            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'\')})\n+            request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             self.assertRaises(MethodNotAllowed, item.PUT)\n@@ -223,7 +226,7 @@ def test_put_no_adapter(self):\n         def test_put_no_body(self):\n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             self.assertRaises(MethodNotAllowed, item.PUT)\n@@ -232,8 +235,9 @@ def test_put_no_content_type_header(self):\n             class WriteFile(object):\n                 def __init__(self, context):\n                     self.context = context\n-                    self._written = \'\'\n+                    self._written = ""\n                     self._closed = False\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -250,23 +254,24 @@ def factory(context):\n \n             self.mock_adapter(factory, IRawWriteFile, (Item,))\n \n-            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'data\')})\n+            request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             item.PUT()\n             self.assertEqual(None, adapterInstance.mimeType)\n             self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual("data", adapterInstance._written)\n             self.assertEqual(True, adapterInstance._closed)\n \n         def test_put_with_content_type_header_no_charset(self):\n             class WriteFile(object):\n                 def __init__(self, context):\n                     self.context = context\n-                    self._written = \'\'\n+                    self._written = ""\n                     self._closed = False\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -290,19 +295,16 @@ def handler(event):\n             self.mock_handler(handler, (IObjectModifiedEvent,))\n \n             request = DAVTestRequest(\n-                environ={\n-                    \'BODYFILE\': StringIO(\'data\'),\n-                    \'HTTP_CONTENT_TYPE\': \'text/foo\'\n-                }\n+                environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n             )\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             item.PUT()\n-            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n+            self.assertEqual("text/foo", adapterInstance.mimeType)\n             self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual("data", adapterInstance._written)\n             self.assertEqual(True, adapterInstance._closed)\n             self.assertEqual(1, len(events))\n \n@@ -310,8 +312,9 @@ def test_put_with_content_type_header_and_charset(self):\n             class WriteFile(object):\n                 def __init__(self, context):\n                     self.context = context\n-                    self._written = \'\'\n+                    self._written = ""\n                     self._closed = False\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -336,24 +339,24 @@ def handler(event):\n \n             request = DAVTestRequest(\n                 environ={\n-                    \'BODYFILE\': StringIO(\'data\'),\n-                    \'HTTP_CONTENT_TYPE\': \'text/foo; charset="latin1"\'\n+                    "BODYFILE": StringIO("data"),\n+                    "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n                 }\n             )\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             item.PUT()\n-            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n-            self.assertEqual(\'latin1\', adapterInstance.encoding)\n-            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual("text/foo", adapterInstance.mimeType)\n+            self.assertEqual("latin1", adapterInstance.encoding)\n+            self.assertEqual("data", adapterInstance._written)\n             self.assertEqual(True, adapterInstance._closed)\n             self.assertEqual(1, len(events))\n \n         def test_mkcol_no_adapter(self):\n-            container = Container(\'container\')\n-            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, \'test\')\n+            container = Container("container")\n+            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n \n         def test_mkcol_simple_adapter(self):\n             created = []\n@@ -364,18 +367,16 @@ def __init__(self, context):\n \n                 def __call__(self, id):\n                     created.append(id)\n+\n             self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n \n-            container = Container(\'container\')\n-            container.MKCOL_handler(\'test\')\n-            self.assertEqual([\'test\'], created)\n+            container = Container("container")\n+            container.MKCOL_handler("test")\n+            self.assertEqual(["test"], created)\n \n         def test_put_factory_no_adapter(self):\n-            container = Container(\'container\')\n-            self.assertEqual(\n-                None,\n-                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n-            )\n+            container = Container("container")\n+            self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n \n         def test_put_factory_simple_adapter(self):\n             instance = object()\n@@ -386,21 +387,19 @@ def __init__(self, context):\n \n                 def __call__(self, name, contentType, body):\n                     return instance\n+\n             self.mock_adapter(FileFactory, IFileFactory, (Container,))\n-            container = Container(\'container\')\n+            container = Container("container")\n             self.assertEqual(\n-                instance,\n-                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n+                instance, container.PUT_factory("test", "text/foo", "body")\n             )\n \n         def test_list_without_items(self):\n-\n             class DummyContainer(Container):\n-\n                 def listFolderContents(self, filter=None):\n                     return []\n \n-            container = DummyContainer(\'container\')\n+            container = DummyContainer("container")\n \n             objects = container.listDAVObjects()\n             self.assertEqual(1, len(objects))\n@@ -409,122 +408,114 @@ def listFolderContents(self, filter=None):\n             self.assertEqual(container, objects[0].__parent__)\n \n         def test_list_with_items(self):\n-\n             class DummyContainer(Container):\n-\n                 def listFolderContents(self, filter=None):\n-                    return [Item(\'foo\')]\n+                    return [Item("foo")]\n \n-            container = DummyContainer(\'container\')\n+            container = DummyContainer("container")\n \n             objects = container.listDAVObjects()\n             self.assertEqual(2, len(objects))\n             self.assertTrue(isinstance(objects[0], FolderDataResource))\n             self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n             self.assertEqual(container, objects[0].__parent__)\n-            self.assertEqual(\'foo\', objects[1].getId())\n-\n+            self.assertEqual("foo", objects[1].getId())\n \n     class TestFolderDataResource(MockTestCase):\n-\n         def test_getId(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container)\n \n-            self.assertEqual(\'fdata\', r.getId())\n+            self.assertEqual("fdata", r.getId())\n             self.assertEqual(container, r.__parent__)\n \n         def test_HEAD(self):\n-\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertEqual(response, r.HEAD(request, request.response))\n             self.assertEqual(200, response.getStatus())\n-            self.assertTrue(\n-                response.getHeader(\'Content-Type\').startswith(\'text/foo\'))\n-            self.assertEqual(\'10\', response.getHeader(\'Content-Length\'))\n+            self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n+            self.assertEqual("10", response.getHeader("Content-Length"))\n \n         def test_OPTIONS(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertEqual(response, r.OPTIONS(request, request.response))\n             self.assertEqual(\n-                \'GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, \'\n-                \'PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK\',\n-                response.getHeader(\'Allow\')\n+                "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n+                "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n+                response.getHeader("Allow"),\n             )\n \n         def test_TRACE(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n \n             self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n \n         def test_PROPFIND(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             container.manage_changeProperties(title="Container")\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertEqual(response, r.PROPFIND(request, response))\n             self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = XML_PROLOG + b"""\n+            body = (\n+                XML_PROLOG\n+                + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -558,27 +549,27 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n+            )\n \n             result = response.getBody()\n             result = re.sub(\n-                br\'<n:getlastmodified>.+</n:getlastmodified>\',\n-                br\'<n:getlastmodified>...</n:getlastmodified>\',\n-                result\n+                br"<n:getlastmodified>.+</n:getlastmodified>",\n+                br"<n:getlastmodified>...</n:getlastmodified>",\n+                result,\n             )\n             self.assertEqual(result.strip(), body.strip())\n \n         def test_PROPPATCH(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             container.manage_changeProperties(title="Container")\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             requestBody = """\\\n <?xml version="1.0" encoding="utf-8" ?>\n@@ -594,22 +585,24 @@ def content_type(self):\n \n             request = DAVTestRequest(\n                 environ={\n-                    \'URL\': \'http://example.org/site/container\',\n-                    \'BODY\': requestBody\n+                    "URL": "http://example.org/site/container",\n+                    "BODY": requestBody,\n                 }\n             )\n             response = request.response\n \n             self.assertEqual(response, r.PROPPATCH(request, response))\n \n-            self.assertEqual(\'New title\', container.getProperty(\'title\'))\n+            self.assertEqual("New title", container.getProperty("title"))\n \n             self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = XML_PROLOG + b"""\n+            body = (\n+                XML_PROLOG\n+                + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -625,6 +618,7 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n+            )\n \n             result = response.getBody()\n \n@@ -633,16 +627,18 @@ def content_type(self):\n         def test_LOCK(self):\n             # Too much WebDAV magic - just test that it delegates correctly\n             class TestContainer(Container):\n-\n                 def LOCK(self, request, response):\n-                    self._locked = (request, response,)\n+                    self._locked = (\n+                        request,\n+                        response,\n+                    )\n                     return response\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -652,16 +648,18 @@ def LOCK(self, request, response):\n         def test_UNLOCK(self):\n             # Too much WebDAV magic - just test that it delegates correctly\n             class TestContainer(Container):\n-\n                 def UNLOCK(self, request, response):\n-                    self._unlocked = (request, response,)\n+                    self._unlocked = (\n+                        request,\n+                        response,\n+                    )\n                     return response\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -670,16 +668,18 @@ def UNLOCK(self, request, response):\n \n         def test_PUT(self):\n             class TestContainer(Container):\n-\n                 def PUT(self, request, response):\n-                    self._put = (request, response,)\n+                    self._put = (\n+                        request,\n+                        response,\n+                    )\n                     return response\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -687,44 +687,44 @@ def PUT(self, request, response):\n             self.assertEqual((request, response), container._put)\n \n         def test_MKCOL(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n \n         def test_DELETE(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n \n         def test_COPY(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n \n         def test_MOVE(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -732,118 +732,102 @@ def test_MOVE(self):\n \n         def test_manage_DAVget(self):\n             class TestContainer(Container):\n-\n                 def manage_DAVget(self):\n-                    return \'data\'\n+                    return "data"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n-            self.assertEqual(\'data\', r.manage_DAVget())\n+            self.assertEqual("data", r.manage_DAVget())\n \n         def test_manage_FTPget(self):\n             class TestContainer(Container):\n                 def manage_FTPget(self):\n-                    return \'data\'\n+                    return "data"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n-            self.assertEqual(\'data\', r.manage_FTPget())\n+            self.assertEqual("data", r.manage_FTPget())\n \n         def test_listDAVObjects(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             self.assertEqual([], r.listDAVObjects())\n \n-\n     class TestFileRepresentation(MockTestCase):\n-\n         def create_dummy(self, **kw):\n             return ItemDummy(**kw)\n \n         def test_directory_factory(self):\n             class TestContainer(Container):\n-\n                 def manage_addFolder(self, name):\n                     self._added = name\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             factory = DefaultDirectoryFactory(container)\n \n-            factory(\'foo\')\n-            self.assertEqual(\'foo\', container._added)\n+            factory("foo")\n+            self.assertEqual("foo", container._added)\n \n         def test_file_factory_finder_cruft(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n             factory = DefaultFileFactory(container)\n \n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'.DS_Store\',\n-                \'application/octet-stream\',\n-                \'xxx\'\n+                Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n             )\n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'._test\',\n-                \'application/octet-stream\',\n-                \'xxx\'\n+                Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n             )\n \n         def test_file_factory_no_ctr(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n             from Products.CMFCore.utils import getToolByName\n+\n             self.patch_global(getToolByName, return_value=None)\n \n             factory = DefaultFileFactory(container)\n \n-            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n         def test_file_factory_no_fti(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n             ctr_mock = Mock()\n             ctr_mock.findTypeName = Mock(return_value=None)\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(ctr_mock, "content_type_registry")\n \n             factory = DefaultFileFactory(container)\n \n-            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n         def test_file_factory_not_allowed(self):\n-            container = Container(\'container\')\n-            container.portal_type = \'containertype\'\n+            container = Container("container")\n+            container.portal_type = "containertype"\n \n             child_fti_mock = Mock()\n             child_fti_mock.product = None\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=False)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             factory = DefaultFileFactory(container)\n \n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'test.html\',\n-                \'text/html\',\n-                \'<html />\'\n+                Unauthorized, factory, "test.html", "text/html", "<html />"\n             )\n \n         def test_file_factory_construction_not_allowed(self):\n-            container = Container(\'container\')\n-            container.portal_type = \'containertype\'\n+            container = Container("container")\n+            container.portal_type = "containertype"\n \n             child_fti_mock = Mock()\n             child_fti_mock.product = None\n@@ -851,180 +835,171 @@ def test_file_factory_construction_not_allowed(self):\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=True)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             factory = DefaultFileFactory(container)\n \n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'test.html\',\n-                \'text/html\',\n-                \'<html />\'\n+                Unauthorized, factory, "test.html", "text/html", "<html />"\n             )\n \n         def test_file_factory_factory_method(self):\n             result_dummy = self.create_dummy()\n             container_mock = Mock()\n-            container_mock.invokeFactory = Mock(return_value=\'test-1.html\')\n+            container_mock.invokeFactory = Mock(return_value="test-1.html")\n             container_mock._getOb = Mock(return_value=result_dummy)\n             container_mock._delObject = Mock()\n             child_fti_mock = Mock()\n-            child_fti_mock.product = \'FooProduct\'\n+            child_fti_mock.product = "FooProduct"\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n             pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             factory = DefaultFileFactory(container_mock)\n \n             self.assertEqual(\n-                result_dummy,\n-                factory(\'test.html\', \'text/html\', \'<html />\')\n+                result_dummy, factory("test.html", "text/html", "<html />")\n             )\n \n         def test_file_factory_factory_utility(self):\n-            result_dummy = self.create_dummy(id=\'test.html\')\n+            result_dummy = self.create_dummy(id="test.html")\n             container_mock = Mock()\n             child_fti_mock = Mock()\n             child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n             child_fti_mock.product = None\n-            child_fti_mock.factory = \'childtype-factory\'\n+            child_fti_mock.factory = "childtype-factory"\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=True)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             def factory(*args, **kwargs):\n                 return result_dummy\n-            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n \n             factory = DefaultFileFactory(container_mock)\n \n             self.assertEqual(\n-                result_dummy,\n-                factory(\'test.html\', \'text/html\', \'<html />\')\n+                result_dummy, factory("test.html", "text/html", "<html />")\n             )\n-            self.assertEqual(result_dummy.Title(), \'test.html\')\n+            self.assertEqual(result_dummy.Title(), "test.html")\n \n         def test_file_factory_content_type_factory_utility(self):\n             container_mock = Mock()\n             child_fti_mock = Mock()\n             child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.getId = Mock(return_value=\'childtype\')\n+            child_fti_mock.getId = Mock(return_value="childtype")\n             child_fti_mock.product = None\n-            child_fti_mock.factory = \'childtype-factory\'\n+            child_fti_mock.factory = "childtype-factory"\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=True)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             def factory(*args, **kwargs):\n                 return Item(*args, **kwargs)\n-            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n \n             factory = DefaultFileFactory(container_mock)\n \n-            item = factory(\'test.html\', \'text/html\', \'<html />\')\n+            item = factory("test.html", "text/html", "<html />")\n \n-            self.assertEqual(\'test.html\', item.id)\n+            self.assertEqual("test.html", item.id)\n \n         def test_readfile_mimetype_no_message_no_fields(self):\n-\n             class ITest(Interface):\n                 pass\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n         def test_readfile_mimetype_no_message_no_primary_field(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n         def test_readfile_mimetype_no_message_single_primary_field(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n+\n+            alsoProvides(ITest["body"], IPrimaryField)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n         def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n                 stuff = schema.Bytes()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n-            alsoProvides(ITest[\'stuff\'], IPrimaryField)\n+\n+            alsoProvides(ITest["body"], IPrimaryField)\n+            alsoProvides(ITest["stuff"], IPrimaryField)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+            self.assertEqual("message/rfc822", readfile.mimeType)\n \n         def test_readfile_mimetype_additional_schemata(self):\n             # This is mostly a test that utils.iterSchemata takes\n@@ -1037,8 +1012,9 @@ class ITestAdditional(Interface):\n                 # Additional behavior on an item\n                 body = schema.Text()\n                 stuff = schema.Bytes()\n-            alsoProvides(ITestAdditional[\'body\'], IPrimaryField)\n-            alsoProvides(ITestAdditional[\'stuff\'], IPrimaryField)\n+\n+            alsoProvides(ITestAdditional["body"], IPrimaryField)\n+            alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n             alsoProvides(ITestAdditional, IFormFieldProvider)\n \n             class MockBehavior(object):\n@@ -1053,44 +1029,44 @@ def enumerateBehaviors(self):\n                     yield MockBehavior(ITestAdditional)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable,\n-                              (Item, ))\n+            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+            self.assertEqual("message/rfc822", readfile.mimeType)\n \n         def test_readfile_operations(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-            fti_mock = DexterityFTI(u\'testtype\')\n+            alsoProvides(ITest["body"], IPrimaryField)\n+\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n             message = Message()\n-            message[\'title\'] = \'Test title\'\n-            message[\'foo\'] = \'10\'\n-            message[\'bar\'] = \'xyz\'\n-            message.set_payload(\'<p>body</p>\')\n+            message["title"] = "Test title"\n+            message["foo"] = "10"\n+            message["bar"] = "xyz"\n+            message.set_payload("<p>body</p>")\n \n             from plone.rfc822 import constructMessageFromSchemata\n+\n             self.patch_global(constructMessageFromSchemata, return_value=message)\n \n             body = b"""\\\n@@ -1106,54 +1082,54 @@ class ITest(Interface):\n \n             self.assertEqual(body, readfile.read())\n             self.assertEqual(69, readfile.size())\n-            self.assertEqual(\'utf-8\', readfile.encoding)\n+            self.assertEqual("utf-8", readfile.encoding)\n             self.assertEqual(None, readfile.name)\n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n             readfile.seek(2)\n             self.assertEqual(2, readfile.tell())\n-            self.assertEqual(b\'tl\', readfile.read(2))\n+            self.assertEqual(b"tl", readfile.read(2))\n             self.assertEqual(4, readfile.tell())\n \n             readfile.seek(0, 2)\n             self.assertEqual(69, readfile.tell())\n \n             readfile.seek(0)\n-            self.assertEqual(b\'foo: 10\\n\', readfile.readlines()[1])\n+            self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n \n             readfile.seek(0)\n-            self.assertEqual(b\'foo: 10\\n\', readfile.readlines(100)[1])\n+            self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n \n             readfile.seek(0)\n-            self.assertEqual(b\'title: Test title\\n\', readfile.readline())\n+            self.assertEqual(b"title: Test title\\n", readfile.readline())\n \n             readfile.seek(0)\n-            self.assertEqual(b\'title: Test title\\n\', readfile.readline(100))\n+            self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n \n             readfile.seek(0)\n-            self.assertEqual(b\'foo: 10\\n\', list(iter(readfile))[1])\n+            self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n \n             self.assertEqual(False, readfile.closed)\n             readfile.close()\n \n         def test_writefile_file_operations(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-            fti_mock = DexterityFTI(u\'testtype\')\n+            alsoProvides(ITest["body"], IPrimaryField)\n+\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n             item.title = u"Test title"\n             item.foo = 10\n-            item.bar = \'xyz\'\n+            item.bar = "xyz"\n             item.body = u"<p>body</p>"\n \n             writefile = DefaultWriteFile(item)\n@@ -1167,21 +1143,22 @@ class ITest(Interface):\n <p>body</p>"""\n \n             from plone.rfc822 import initializeObjectFromSchemata\n+\n             self.patch_global(initializeObjectFromSchemata)\n \n-            writefile.mimeType = \'text/plain\'\n-            self.assertEqual(\'text/plain\', writefile.mimeType)\n+            writefile.mimeType = "text/plain"\n+            self.assertEqual("text/plain", writefile.mimeType)\n \n-            writefile.encoding = \'latin1\'\n-            self.assertEqual(\'latin1\', writefile.encoding)\n+            writefile.encoding = "latin1"\n+            self.assertEqual("latin1", writefile.encoding)\n \n-            writefile.filename = \'test.html\'\n-            self.assertEqual(\'test.html\', writefile.filename)\n+            writefile.filename = "test.html"\n+            self.assertEqual("test.html", writefile.filename)\n \n             self.assertEqual(False, writefile.closed)\n             self.assertEqual(0, writefile.tell())\n \n-            writefile.writelines([\'one\\n\', \'two\'])\n+            writefile.writelines(["one\\n", "two"])\n             self.assertEqual(7, writefile.tell())\n \n             self.assertRaises(NotImplementedError, writefile.truncate)\n@@ -1198,55 +1175,48 @@ class ITest(Interface):\n             self.assertEqual(True, writefile.closed)\n             self.assertEqual(69, writefile.tell())\n \n-\n     class TestDAVTraversal(MockTestCase):\n-\n         def test_no_acquire_dav(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n-            outer = Folder(\'outer\')\n-            outer._setOb(\'item\', SimpleItem(\'item\'))\n-            outer._setOb(\'container\', container)\n+            outer = Folder("outer")\n+            outer._setOb("item", SimpleItem("item"))\n+            outer._setOb("container", container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PUT\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n             )\n             request.maybe_webdav_client = True\n \n-            traversal = DexterityPublishTraverse(\n-                container.__of__(outer),\n-                request\n-            )\n+            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            r = traversal.publishTraverse(request, \'item\')\n+            r = traversal.publishTraverse(request, "item")\n \n             self.assertTrue(isinstance(r, NullResource))\n             self.assertEqual(container, r.aq_parent)\n \n         def test_acquire_without_dav(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n-            outer = Folder(\'outer\')\n-            outer._setObject(\'item\', SimpleItem(\'item\'))\n-            outer._setOb(\'container\', container)\n+            outer = Folder("outer")\n+            outer._setObject("item", SimpleItem("item"))\n+            outer._setOb("container", container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n             )\n             request.maybe_webdav_client = False\n \n             traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            r = traversal.publishTraverse(request, \'item\')\n+            r = traversal.publishTraverse(request, "item")\n \n-            self.assertEqual(r.aq_base, outer[\'item\'].aq_base)\n+            self.assertEqual(r.aq_base, outer["item"].aq_base)\n             self.assertEqual(container, r.aq_parent)\n \n         def test_folder_data_traversal_dav(self):\n-            container = Container(\'test\')\n-            request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\'}\n-            )\n+            container = Container("test")\n+            request = DAVTestRequest(environ={"URL": "http://site/test"})\n             request.maybe_webdav_client = True\n \n             traversal = DexterityPublishTraverse(container, request)\n@@ -1258,77 +1228,82 @@ def test_folder_data_traversal_dav(self):\n             self.assertEqual(container, r.aq_parent)\n \n         def test_folder_data_traversal_without_dav(self):\n-            container = Container(\'test\')\n-            request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\'}\n-            )\n+            container = Container("test")\n+            request = DAVTestRequest(environ={"URL": "http://site/test"})\n             request.maybe_webdav_client = False\n \n             traversal = DexterityPublishTraverse(container, request)\n \n             self.assertRaises(\n-                Forbidden,\n-                traversal.publishTraverse,\n-                request,\n-                DAV_FOLDER_DATA_ID\n+                Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n             )\n \n         def test_browser_default_dav(self):\n             class TestContainer(Container):\n-\n                 def __browser_default__(self, request):\n-                    return self, (\'foo\',)\n+                    return self, ("foo",)\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n             )\n             request.maybe_webdav_client = True\n \n             traversal = DexterityPublishTraverse(container, request)\n \n-            self.assertEqual((container, (),), traversal.browserDefault(request))\n+            self.assertEqual(\n+                (\n+                    container,\n+                    (),\n+                ),\n+                traversal.browserDefault(request),\n+            )\n \n         def test_browser_default_dav_get(self):\n             class TestContainer(Container):\n-\n                 def __browser_default__(self, request):\n-                    return self, (\'foo\',)\n+                    return self, ("foo",)\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n             )\n             request.maybe_webdav_client = True\n \n             traversal = DexterityPublishTraverse(container, request)\n \n             self.assertEqual(\n-                (container, (\'foo\',),),\n-                traversal.browserDefault(request)\n+                (\n+                    container,\n+                    ("foo",),\n+                ),\n+                traversal.browserDefault(request),\n             )\n \n         def test_browser_default_without_dav(self):\n             class TestContainer(Container):\n-\n                 def __browser_default__(self, request):\n-                    return self, (\'foo\',)\n+                    return self, ("foo",)\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n             )\n             request.maybe_webdav_client = False\n \n             traversal = DexterityPublishTraverse(container, request)\n \n             self.assertEqual(\n-                (container, (\'foo\',),),\n-                traversal.browserDefault(request)\n+                (\n+                    container,\n+                    ("foo",),\n+                ),\n+                traversal.browserDefault(request),\n             )\n \n+\n else:\n-    class TestDummy(MockTestCase):\n \n+    class TestDummy(MockTestCase):\n         def test_dummy(self):\n             pass\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 87b33f9..745a394 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -27,18 +27,10 @@\n import six\n \n \n-deprecation.deprecated(\n-    \'SchemaNameEncoder\',\n-    \'moved to plone.dexterity.schema\')\n-deprecation.deprecated(\n-    \'portalTypeToSchemaName\',\n-    \'moved to plone.dexterity.schema\')\n-deprecation.deprecated(\n-    \'schemaNameToPortalType\',\n-    \'moved to plone.dexterity.schema\')\n-deprecation.deprecated(\n-    \'splitSchemaName\',\n-    \'moved to plone.dexterity.schema\')\n+deprecation.deprecated("SchemaNameEncoder", "moved to plone.dexterity.schema")\n+deprecation.deprecated("portalTypeToSchemaName", "moved to plone.dexterity.schema")\n+deprecation.deprecated("schemaNameToPortalType", "moved to plone.dexterity.schema")\n+deprecation.deprecated("splitSchemaName", "moved to plone.dexterity.schema")\n \n log = logging.getLogger(__name__)\n \n@@ -47,8 +39,7 @@\n \n \n def resolveDottedName(dottedName):\n-    """Resolve a dotted name to a real object\n-    """\n+    """Resolve a dotted name to a real object"""\n     global _dottedCache\n     if dottedName not in _dottedCache:\n         _dottedCache[dottedName] = resolve(dottedName)\n@@ -91,8 +82,9 @@ def getAdditionalSchemata(context=None, portal_type=None):\n     are set, the portal_type might get ignored, depending on which\n     code path is taken.\n     """\n-    log.debug("getAdditionalSchemata with context %r and portal_type %s",\n-              context, portal_type)\n+    log.debug(\n+        "getAdditionalSchemata with context %r and portal_type %s", context, portal_type\n+    )\n     if context is None and portal_type is None:\n         return\n     if context:\n@@ -104,9 +96,7 @@ def getAdditionalSchemata(context=None, portal_type=None):\n         # Usually an add-form.\n         if portal_type is None:\n             portal_type = context.portal_type\n-        for schema_interface in SCHEMA_CACHE.behavior_schema_interfaces(\n-            portal_type\n-        ):\n+        for schema_interface in SCHEMA_CACHE.behavior_schema_interfaces(portal_type):\n             form_schema = IFormFieldProvider(schema_interface, None)\n             if form_schema is not None:\n                 yield form_schema\n@@ -176,13 +166,12 @@ def addContentToContainer(container, object, checkConstraints=True):\n         if not fti.isConstructionAllowed(container):\n             raise Unauthorized("Cannot create %s" % object.portal_type)\n \n-        if container_fti is not None \\\n-           and not container_fti.allowType(object.portal_type):\n-            raise ValueError(\n-                "Disallowed subobject type: %s" % object.portal_type\n-            )\n+        if container_fti is not None and not container_fti.allowType(\n+            object.portal_type\n+        ):\n+            raise ValueError("Disallowed subobject type: %s" % object.portal_type)\n \n-    name = getattr(aq_base(object), \'id\', None)\n+    name = getattr(aq_base(object), "id", None)\n     name = INameChooser(container).chooseName(name, object)\n     object.id = name\n \n@@ -194,35 +183,30 @@ def addContentToContainer(container, object, checkConstraints=True):\n         return uuidToObject(uuid)\n \n \n-def createContentInContainer(container, portal_type, checkConstraints=True,\n-                             **kw):\n+def createContentInContainer(container, portal_type, checkConstraints=True, **kw):\n     content = createContent(portal_type, **kw)\n-    return addContentToContainer(\n-        container,\n-        content,\n-        checkConstraints=checkConstraints\n-    )\n+    return addContentToContainer(container, content, checkConstraints=checkConstraints)\n \n \n def safe_utf8(st):\n     if isinstance(st, six.text_type):\n-        st = st.encode(\'utf8\')\n+        st = st.encode("utf8")\n     return st\n \n \n def safe_unicode(st):\n     if isinstance(st, six.binary_type):\n-        st = st.decode(\'utf8\')\n+        st = st.decode("utf8")\n     return st\n \n \n def datify(in_date):\n     """Get a DateTime object from a string (or anything parsable by DateTime,\n-       a datetime.date, a datetime.datetime\n+    a datetime.date, a datetime.datetime\n     """\n     if isinstance(in_date, DateTime):\n         return in_date\n-    if in_date == \'None\':\n+    if in_date == "None":\n         in_date = None\n     elif isinstance(in_date, datetime.datetime):\n         in_date = DateTime(in_date)\ndiff --git a/setup.py b/setup.py\nindex 5dbb207..3edc505 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.10.1.dev0\'\n+version = "2.10.5.dev0"\n \n \n def read(filename):\n@@ -19,6 +19,7 @@ def read(filename):\n         contents = myfile.read()\n         return contents.decode("utf-8")\n \n+\n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n """\n@@ -27,7 +28,7 @@ def read(filename):\n long_description += read("CHANGES.rst")\n \n setup(\n-    name=\'plone.dexterity\',\n+    name="plone.dexterity",\n     version=version,\n     description=short_description,\n     long_description=long_description,\n@@ -37,6 +38,7 @@ def read(filename):\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n@@ -44,56 +46,53 @@ def read(filename):\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'plone dexterity contenttypes\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.dexterity\',\n-    license=\'GPL version 2\',\n+    keywords="plone dexterity contenttypes",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.dexterity",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'DateTime>=4.0.1\',\n-        \'plone.alterego\',\n-        \'plone.autoform>=1.0b2\',\n-        \'plone.behavior>=1.0b5\',\n-        \'plone.folder\',\n-        \'plone.memoize\',\n-        \'plone.rfc822\',\n-        \'plone.supermodel>=1.0b2\',\n-        \'plone.synchronize\',\n-        \'plone.uuid\',\n-        \'plone.z3cform>=0.6.0\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFDynamicViewFTI\',\n-        \'Products.statusmessages\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.annotation\',\n-        \'zope.browser\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.dottedname\',\n-        \'zope.globalrequest\',\n-        \'zope.filerepresentation>=3.6.0\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.location\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.security\',\n-        \'zope.size\',\n-        \'Zope\',\n+        "DateTime>=4.0.1",\n+        "plone.alterego",\n+        "plone.autoform>=1.0b2",\n+        "plone.behavior>=1.0b5",\n+        "plone.folder",\n+        "plone.memoize",\n+        "plone.rfc822",\n+        "plone.supermodel>=1.0b2",\n+        "plone.synchronize",\n+        "plone.uuid",\n+        "plone.z3cform>=0.6.0",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.statusmessages",\n+        "setuptools",\n+        "six",\n+        "zope.annotation",\n+        "zope.browser",\n+        "zope.component",\n+        "zope.container",\n+        "zope.dottedname",\n+        "zope.globalrequest",\n+        "zope.filerepresentation>=3.6.0",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.location",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.security",\n+        "zope.size",\n+        "Zope",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.testing\',\n-            \'Products.CMFPlone\',\n-            "mock;python_version<\'3\'"\n-        ]\n+        "test": ["plone.testing", "Products.CMFPlone", "mock;python_version<\'3\'"]\n     },\n     entry_points="""\n     # -*- Entry points: -*-\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-10-07T00:30:09+02:00
Author: mamico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/e65788aa9b96ad3415e3d239b157815bfae6bdf0

Merge branch 'master' into respect_allowed_types_in_paste

Files changed:
A .github/workflows/code-analysis.yml
A Makefile
A plone/dexterity/synchronize.py
A plone/dexterity/tests/test_synchronize.py
M CHANGES.rst
M plone/__init__.py
M plone/dexterity/__init__.py
M plone/dexterity/behavior.py
M plone/dexterity/browser/__init__.py
M plone/dexterity/browser/add.py
M plone/dexterity/browser/base.py
M plone/dexterity/browser/configure.zcml
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/browser/view.py
M plone/dexterity/configure.zcml
M plone/dexterity/content.py
M plone/dexterity/events.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/i18n.py
M plone/dexterity/interfaces.py
M plone/dexterity/meta.zcml
M plone/dexterity/primary.py
M plone/dexterity/schema.py
M plone/dexterity/tests/__init__.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/schemata.py
M plone/dexterity/tests/test.xml
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_exportimport.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M pyproject.toml
M setup.cfg
M setup.py
D .travis.yml
D buildout.cfg
D plone/dexterity/bbb.py

b'diff --git a/.github/workflows/code-analysis.yml b/.github/workflows/code-analysis.yml\nnew file mode 100644\nindex 00000000..8411110a\n--- /dev/null\n+++ b/.github/workflows/code-analysis.yml\n@@ -0,0 +1,15 @@\n+name: Code Analysis\n+on:\n+  push:\n+\n+jobs:\n+  code-analysis:\n+    name: Code analysis\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+      - name: Checkout codebase\n+        uses: actions/checkout@v2\n+\n+      - name: Run all lint checks\n+        uses: plone/code-analysis-action@v2\ndiff --git a/.travis.yml b/.travis.yml\ndeleted file mode 100644\nindex 8fbf226c..00000000\n--- a/.travis.yml\n+++ /dev/null\n@@ -1,25 +0,0 @@\n-language: python\n-dist: xenial\n-python: 2.7\n-sudo: false\n-cache:\n-  pip: true\n-  directories:\n-    - eggs\n-matrix:\n-  include:\n-    - env: PLONE_VERSION=5.2\n-      python: "2.7"\n-    - env: PLONE_VERSION=5.2\n-      python: "3.6"\n-    - env: PLONE_VERSION=5.2\n-      python: "3.7"\n-    - env: PLONE_VERSION=5.2\n-      python: "3.8"\n-  fast_finish: true\n-install:\n-  - sed -ie "s#test-5.2#test-$PLONE_VERSION#" buildout.cfg\n-  - pip install -r https://dist.plone.org/release/$PLONE_VERSION-latest/requirements.txt\n-  - buildout annotate\n-  - buildout -Nv install test\n-script: bin/test\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 74d57b5e..8749bab1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,85 @@ Changelog\n \n .. towncrier release notes start\n \n+3.0.0b2 (2022-08-30)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Check code quality with fresh plone/code-quality 2.0.0.\n+  [maurits+erico] (#171)\n+\n+\n+3.0.0b1 (2022-07-14)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Remove long deprecated imports and fallbacks.\n+  [jensens, maurits] (#161)\n+- Python 3.7+ only, drop Python 2 support.\n+  [jensens, maurits] (#161)\n+\n+\n+Bug fixes:\n+\n+\n+- Use Bootstrap 5 classes for buttons.\n+  [jensens] (#161)\n+\n+\n+3.0.0a3 (2022-05-24)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Added missing icon_expr to default actions.\n+  [agitator] (#167)\n+\n+\n+3.0.0a2 (2022-01-25)\n+--------------------\n+\n+Bug fixes:\n+\n+\n+- Really always use a lines property for behaviors, no longer the deprecated ulines.\n+  This improves the fix from the previous release.\n+  Part of `issue 3305 <https://github.com/plone/Products.CMFPlone/issues/3305>`_.\n+  [maurits] (#3305)\n+\n+\n+3.0.0a1 (2022-01-07)\n+--------------------\n+\n+Breaking changes:\n+\n+\n+- Plone 6: Always use a lines property for behaviors, no longer the deprecated ulines.\n+  Part of `issue 3305 <https://github.com/plone/Products.CMFPlone/issues/3305>`_.\n+  [maurits] (#3305)\n+\n+\n+2.10.5 (2021-11-25)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Incorporate ``plone.synchronize`` its one and only simple ``synchronized`` function into ``plone.dexterity``, which were the only consumer.\n+  Also moves the test. Removes a dependency and a package to look after.\n+  [jensens] (#157)\n+- Avoid setting a default value on methods.\n+  If a Schema Interface has a method in it, i.e. to be used as a\n+  constraint for another field, etc. the `default_from_schema` function\n+  would trip over it while trying to get a default value for it.\n+  [gforcada, jensens] (#158)\n+- Fixes schema name generated in Python 2. [wesleybl] (#159)\n+\n+\n 2.10.4 (2021-10-07)\n -------------------\n \ndiff --git a/Makefile b/Makefile\nnew file mode 100644\nindex 00000000..60afba86\n--- /dev/null\n+++ b/Makefile\n@@ -0,0 +1,42 @@\n+### Defensive settings for make:\n+#     https://tech.davis-hansson.com/p/make/\n+SHELL:=bash\n+.ONESHELL:\n+.SHELLFLAGS:=-xeu -o pipefail -O inherit_errexit -c\n+.SILENT:\n+.DELETE_ON_ERROR:\n+MAKEFLAGS+=--warn-undefined-variables\n+MAKEFLAGS+=--no-builtin-rules\n+\n+# We like colors\n+# From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\n+RED=`tput setaf 1`\n+GREEN=`tput setaf 2`\n+RESET=`tput sgr0`\n+YELLOW=`tput setaf 3`\n+\n+# See https://github.com/plone/code-quality\n+# Our configuration is in pyproject.toml.\n+CODE_QUALITY_VERSION=2.0.0\n+CURRENT_USER=$$(whoami)\n+USER_INFO=$$(id -u ${CURRENT_USER}):$$(id -g ${CURRENT_USER})\n+LINT=docker run --rm -v "$(PWD)":/github/workspace plone/code-quality:${CODE_QUALITY_VERSION} check\n+FORMAT=docker run --user="${USER_INFO}" --rm -v "$(PWD)":/github/workspace plone/code-quality:${CODE_QUALITY_VERSION} format\n+\n+PACKAGE_NAME=plone.dexterity\n+PACKAGE_PATH=plone/\n+CHECK_PATH=setup.py $(PACKAGE_PATH)\n+\n+# Add the following \'help\' target to your Makefile\n+# And add help text after each target name starting with \'\\#\\#\'\n+.PHONY: help\n+help: ## This help message\n+\t@grep -E \'^[a-zA-Z_-]+:.*?## .*$$\' $(MAKEFILE_LIST) | sort | awk \'BEGIN {FS = ":.*?## "}; {printf "\\033[36m%-30s\\033[0m %s\\n", $$1, $$2}\'\n+\n+.PHONY: format\n+format:  ## Format the codebase according to our standards\n+\t$(FORMAT)\n+\n+.PHONY: lint\n+lint:  ## validate with isort, black, flake8, pyroma, zpretty\n+\t$(LINT)\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex 7046f06a..00000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,10 +0,0 @@\n-[buildout]\n-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n-package-name = plone.dexterity\n-package-extras = [test]\n-test-eggs =\n-\n-develop = .\n-\n-[versions]\n-plone.dexterity =\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 03d08ffd..5284146e 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/dexterity/__init__.py b/plone/dexterity/__init__.py\nindex cfa51cd4..1cbc5dec 100644\n--- a/plone/dexterity/__init__.py\n+++ b/plone/dexterity/__init__.py\n@@ -1,3 +1,2 @@\n-# -*- coding: utf-8 -*-\n # Kick dynamic module factory\n from . import schema  # noqa\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\ndeleted file mode 100644\nindex 9b3770ec..00000000\n--- a/plone/dexterity/bbb.py\n+++ /dev/null\n@@ -1,33 +0,0 @@\n-# -*- coding: utf-8 -*-\n-import zope.deferredimport\n-\n-\n-zope.deferredimport.initialize()\n-\n-\n-HAS_WEBDAV = True\n-try:\n-    import webdav as _  # noqa: F401\n-except ImportError:\n-    HAS_WEBDAV = False\n-\n-\n-zope.deferredimport.deprecated(\n-    "Import HAS_WEBDAV instead.", HAS_ZSERVER="plone.dexterity:bbb.HAS_WEBDAV"\n-)\n-\n-\n-NullResource = None\n-\n-\n-class Resource(object):\n-    def dav__init(self, request, response):\n-        pass\n-\n-    def dav__validate(self, object, methodname, REQUEST):\n-        pass\n-\n-    def dav__simpleifhandler(\n-        self, request, response, method="PUT", col=0, url=None, refresh=0\n-    ):\n-        pass\ndiff --git a/plone/dexterity/behavior.py b/plone/dexterity/behavior.py\nindex bf015f3a..45217382 100644\n--- a/plone/dexterity/behavior.py\n+++ b/plone/dexterity/behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.schema import SCHEMA_CACHE\n@@ -8,7 +7,7 @@\n \n @implementer(IBehaviorAssignable)\n @adapter(IDexterityContent)\n-class DexterityBehaviorAssignable(object):\n+class DexterityBehaviorAssignable:\n     """Support plone.behavior behaviors stored in the FTI"""\n \n     def __init__(self, context):\n@@ -21,5 +20,4 @@ def supports(self, behavior_interface):\n         return False\n \n     def enumerateBehaviors(self):\n-        for behavior in SCHEMA_CACHE.behavior_registrations(self.context.portal_type):\n-            yield behavior\n+        yield from SCHEMA_CACHE.behavior_registrations(self.context.portal_type)\ndiff --git a/plone/dexterity/browser/__init__.py b/plone/dexterity/browser/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/dexterity/browser/__init__.py\n+++ b/plone/dexterity/browser/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 73087699..3350bc0d 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition.interfaces import IAcquirer\n@@ -37,10 +36,10 @@ class DefaultAddForm(DexterityExtensibleForm, form.AddForm):\n \n     portal_type = None\n     immediate_view = None\n-    success_message = _(u"Item created")\n+    success_message = _("Item created")\n \n     def __init__(self, context, request, ti=None):\n-        super(DefaultAddForm, self).__init__(context, request)\n+        super().__init__(context, request)\n         if ti is not None:\n             self.ti = ti\n             self.portal_type = ti.getId()\n@@ -119,10 +118,10 @@ def handleAdd(self, action):\n             self._finishedAdd = True\n             IStatusMessage(self.request).addStatusMessage(self.success_message, "info")\n \n-    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(\n-            _(u"Add New Item operation cancelled"), "info"\n+            _("Add New Item operation cancelled"), "info"\n         )\n         self.request.response.redirect(self.nextURL())\n         notify(AddCancelledEvent(self.context))\n@@ -135,25 +134,25 @@ def update(self):\n                     "Subobject type disallowed by IConstrainTypes adapter: %s"\n                     % self.portal_type\n                 )\n-        super(DefaultAddForm, self).update()\n+        super().update()\n         # fire the edit begun only if no action was executed\n         if len(self.actions.executedActions) == 0:\n             notify(AddBegunEvent(self.context))\n \n     def updateActions(self):\n-        super(DefaultAddForm, self).updateActions()\n+        super().updateActions()\n         if "save" in self.actions:\n-            self.actions["save"].addClass("context")\n+            self.actions["save"].addClass("success")\n \n         if "cancel" in self.actions:\n-            self.actions["cancel"].addClass("standalone")\n+            self.actions["cancel"].addClass("secondary")\n \n     @property\n     def label(self):\n         portal_type = self.portal_type\n         fti = getUtility(IDexterityFTI, name=portal_type)\n         type_name = fti.Title()\n-        return _(u"Add ${name}", mapping={"name": type_name})\n+        return _("Add ${name}", mapping={"name": type_name})\n \n \n class DefaultAddView(layout.FormWrapper, BrowserPage):\n@@ -168,7 +167,7 @@ class DefaultAddView(layout.FormWrapper, BrowserPage):\n     form = DefaultAddForm\n \n     def __init__(self, context, request, ti):\n-        super(DefaultAddView, self).__init__(context, request)\n+        super().__init__(context, request)\n         self.ti = ti\n \n         # Set portal_type name on newly created form instance\ndiff --git a/plone/dexterity/browser/base.py b/plone/dexterity/browser/base.py\nindex 581c96d3..d057fed6 100644\n--- a/plone/dexterity/browser/base.py\n+++ b/plone/dexterity/browser/base.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.form import AutoExtensibleForm\n from plone.dexterity.i18n import MessageFactory as _\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -9,7 +8,7 @@\n class DexterityExtensibleForm(AutoExtensibleForm):\n     """Mixin class for Dexterity forms that support updatable fields"""\n \n-    default_fieldset_label = _("label_schema_default", default=u"Default")\n+    default_fieldset_label = _("label_schema_default", default="Default")\n \n     @property\n     def description(self):\ndiff --git a/plone/dexterity/browser/configure.zcml b/plone/dexterity/browser/configure.zcml\nindex b33c2754..e532b17e 100644\n--- a/plone/dexterity/browser/configure.zcml\n+++ b/plone/dexterity/browser/configure.zcml\n@@ -1,88 +1,89 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:browser="http://namespaces.zope.org/browser"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Standard view -->\n-    <browser:page\n-        for="..interfaces.IDexterityContent"\n-        name="view"\n-        class=".view.DefaultView"\n-        template="item.pt"\n-        permission="zope2.View"\n-        />\n+  <!-- Standard view -->\n+  <browser:page\n+      name="view"\n+      for="..interfaces.IDexterityContent"\n+      class=".view.DefaultView"\n+      template="item.pt"\n+      permission="zope2.View"\n+      />\n \n-    <!-- Content core views -->\n-    <!-- Note: the templaces are the same since the changes for\n+  <!-- Content core views -->\n+  <!-- Note: the templaces are the same since the changes for\n          https://github.com/plone/Products.CMFPlone/issues/3177\n          That may be okay: makes it easier to customize\n          only the template for items or for containers. -->\n-    <browser:page\n-        for="..interfaces.IDexterityItem"\n-        name="content-core"\n-        class=".view.DefaultView"\n-        template="itemcontentcore.pt"\n-        permission="zope2.View"\n-        />\n+  <browser:page\n+      name="content-core"\n+      for="..interfaces.IDexterityItem"\n+      class=".view.DefaultView"\n+      template="itemcontentcore.pt"\n+      permission="zope2.View"\n+      />\n \n-    <browser:page\n-        for="..interfaces.IDexterityContainer"\n-        name="content-core"\n-        class=".view.DefaultView"\n-        template="containercontentcore.pt"\n-        permission="zope2.View"\n-        />\n+  <browser:page\n+      name="content-core"\n+      for="..interfaces.IDexterityContainer"\n+      class=".view.DefaultView"\n+      template="containercontentcore.pt"\n+      permission="zope2.View"\n+      />\n \n-    <!-- Standard IPublishTraverse adapter -->\n-    <adapter factory=".traversal.DexterityPublishTraverse" />\n+  <!-- Standard IPublishTraverse adapter -->\n+  <adapter factory=".traversal.DexterityPublishTraverse" />\n \n-    <!-- Standard add view and form - invoked from ++add++ traverser -->\n-    <adapter\n-        for="Products.CMFCore.interfaces.IFolderish\n-             zope.publisher.interfaces.browser.IDefaultBrowserLayer\n-             ..interfaces.IDexterityFTI"\n-        provides="zope.publisher.interfaces.browser.IBrowserPage"\n-        factory=".add.DefaultAddView"\n+  <!-- Standard add view and form - invoked from ++add++ traverser -->\n+  <adapter\n+      factory=".add.DefaultAddView"\n+      provides="zope.publisher.interfaces.browser.IBrowserPage"\n+      for="Products.CMFCore.interfaces.IFolderish\n+           zope.publisher.interfaces.browser.IDefaultBrowserLayer\n+           ..interfaces.IDexterityFTI"\n+      />\n+  <class class=".add.DefaultAddView">\n+    <require\n+        permission="cmf.AddPortalContent"\n+        interface="zope.publisher.interfaces.browser.IBrowserPage"\n         />\n-    <class class=".add.DefaultAddView">\n-        <require\n-            permission="cmf.AddPortalContent"\n-            interface="zope.publisher.interfaces.browser.IBrowserPage"\n-            />\n-    </class>\n+  </class>\n \n-    <!-- Standard edit view -->\n-    <browser:page\n-        for="..interfaces.IDexterityContent"\n-        name="edit"\n-        class=".edit.DefaultEditView"\n-        permission="cmf.ModifyPortalContent"\n-        />\n+  <!-- Standard edit view -->\n+  <browser:page\n+      name="edit"\n+      for="..interfaces.IDexterityContent"\n+      class=".edit.DefaultEditView"\n+      permission="cmf.ModifyPortalContent"\n+      />\n \n-    <!-- FTI add form -->\n-    <browser:page\n-        for="zope.browser.interfaces.IAdding"\n-        name="plone.dexterity.fti"\n-        template="fti.pt"\n-        class=".fti.FTIAddView"\n-        permission="cmf.ManagePortal"\n-        />\n+  <!-- FTI add form -->\n+  <browser:page\n+      name="plone.dexterity.fti"\n+      for="zope.browser.interfaces.IAdding"\n+      class=".fti.FTIAddView"\n+      template="fti.pt"\n+      permission="cmf.ManagePortal"\n+      />\n \n-    <!-- Resources for icons -->\n+  <!-- Resources for icons -->\n \n-    <browser:resource\n-        name="plone.dexterity.item.gif"\n-        file="icons/item_icon.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.item.gif"\n+      file="icons/item_icon.gif"\n+      />\n \n-    <browser:resource\n-        name="plone.dexterity.container.gif"\n-        file="icons/container_icon.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.container.gif"\n+      file="icons/container_icon.gif"\n+      />\n \n-    <browser:resource\n-        name="plone.dexterity.fti.gif"\n-        file="icons/typeinfo.gif"\n-        />\n+  <browser:resource\n+      name="plone.dexterity.fti.gif"\n+      file="icons/typeinfo.gif"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex e3edcf8b..79634ae5 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.browser.base import DexterityExtensibleForm\n from plone.dexterity.events import EditBegunEvent\n from plone.dexterity.events import EditCancelledEvent\n@@ -8,7 +7,6 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.registry.interfaces import IRegistry\n from plone.z3cform import layout\n-from Products.CMFCore.utils import getToolByName\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from z3c.form import form\n@@ -19,9 +17,9 @@\n \n class DefaultEditForm(DexterityExtensibleForm, form.EditForm):\n \n-    success_message = _(u"Changes saved")\n+    success_message = _("Changes saved")\n \n-    @button.buttonAndHandler(_(u"Save"), name="save")\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleApply(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -32,9 +30,9 @@ def handleApply(self, action):\n         self.request.response.redirect(self.nextURL())\n         notify(EditFinishedEvent(self.context))\n \n-    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n+    @button.buttonAndHandler(_("Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled"), "info")\n+        IStatusMessage(self.request).addStatusMessage(_("Edit cancelled"), "info")\n         self.request.response.redirect(self.nextURL())\n         notify(EditCancelledEvent(self.context))\n \n@@ -52,20 +50,20 @@ def nextURL(self):\n \n     def update(self):\n         self.portal_type = self.context.portal_type\n-        super(DefaultEditForm, self).update()\n+        super().update()\n \n         # fire the edit begun only if no action was executed\n         if len(self.actions.executedActions) == 0:\n             notify(EditBegunEvent(self.context))\n \n     def updateActions(self):\n-        super(DefaultEditForm, self).updateActions()\n+        super().updateActions()\n \n         if "save" in self.actions:\n-            self.actions["save"].addClass("context")\n+            self.actions["save"].addClass("success")\n \n         if "cancel" in self.actions:\n-            self.actions["cancel"].addClass("standalone")\n+            self.actions["cancel"].addClass("secondary")\n \n     @property\n     def fti(self):\n@@ -74,7 +72,7 @@ def fti(self):\n     @property\n     def label(self):\n         type_name = self.fti.Title()\n-        return _(u"Edit ${name}", mapping={"name": type_name})\n+        return _("Edit ${name}", mapping={"name": type_name})\n \n \n DefaultEditView = layout.wrap_form(DefaultEditForm)\ndiff --git a/plone/dexterity/browser/fti.py b/plone/dexterity/browser/fti.py\nindex 72df0061..93062f45 100644\n--- a/plone/dexterity/browser/fti.py\n+++ b/plone/dexterity/browser/fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.fti import DexterityFTI\n from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView\n \n@@ -7,4 +6,4 @@ class FTIAddView(FactoryTypeInformationAddView):\n     """Add view for the Dexterity FTI type"""\n \n     klass = DexterityFTI\n-    description = u"Factory Type Information for Dexterity Content Types"\n+    description = "Factory Type Information for Dexterity Content Types"\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 0487ea5e..fa8f1cd5 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n-from plone.dexterity import bbb\n from plone.dexterity.filerepresentation import FolderDataResource\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContent\n+from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n@@ -15,11 +14,6 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n-if bbb.HAS_WEBDAV:\n-    from webdav.NullResource import NullResource\n-else:\n-    NullResource = bbb.NullResource\n-\n \n @adapter(IDexterityContent, IBrowserRequest)\n class DexterityPublishTraverse(DefaultPublishTraverse):\n@@ -48,9 +42,7 @@ def publishTraverse(self, request, name):\n         ):\n             return FolderDataResource(DAV_FOLDER_DATA_ID, context).__of__(context)\n \n-        defaultTraversal = super(DexterityPublishTraverse, self).publishTraverse(\n-            request, name\n-        )\n+        defaultTraversal = super().publishTraverse(request, name)\n \n         # If this is a WebDAV PUT/PROPFIND/PROPPATCH request, don\'t acquire\n         # things. If we did, we couldn\'t create a new object with PUT, for\n@@ -85,4 +77,4 @@ def browserDefault(self, request):\n         ):\n             return self.context, ()\n \n-        return super(DexterityPublishTraverse, self).browserDefault(request)\n+        return super().browserDefault(request)\ndiff --git a/plone/dexterity/browser/view.py b/plone/dexterity/browser/view.py\nindex deed5227..ad90ac5b 100644\n--- a/plone/dexterity/browser/view.py\n+++ b/plone/dexterity/browser/view.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.autoform.view import WidgetsView\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\ndiff --git a/plone/dexterity/configure.zcml b/plone/dexterity/configure.zcml\nindex 1add73a1..c720d027 100644\n--- a/plone/dexterity/configure.zcml\n+++ b/plone/dexterity/configure.zcml\n@@ -1,139 +1,140 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    xmlns:i18n="http://namespaces.zope.org/i18n"\n     xmlns:five="http://namespaces.zope.org/five"\n-    i18n_domain="plone">\n-\n-    <include package="Products.CMFCore" />\n-\n-    <include package="plone.behavior" />\n-    <include package="plone.folder" />\n-    <include package="plone.supermodel" />\n-    <include package="plone.rfc822" />\n-    <include package="plone.uuid" />\n-    <include package="plone.z3cform" />\n-\n-    <include package=".browser" />\n-    <include package=".fti" />\n-\n-    <!-- Re-index content when it\'s modified -->\n-    <subscriber\n-        for=".interfaces.IDexterityContent\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".content.reindexOnModify"\n-        />\n-\n-    <!-- Support for dynamic schemata -->\n-\n-    <utility\n-        factory=".schema.DexteritySchemaPolicy"\n-        name="dexterity"\n-        />\n-\n-    <utility\n-        factory=".schema.SchemaModuleFactory"\n-        name="plone.dexterity.schema.generated"\n-        />\n-\n-    <!-- Schema cache -->\n-    <subscriber handler=".schema.invalidate_schema" />\n-\n-    <!-- Support for plone.behavior behaviors -->\n-    <adapter factory=".behavior.DexterityBehaviorAssignable" />\n-\n-    <!-- Register the content classes -->\n-    <five:registerClass\n-        class=".content.Item"\n-        meta_type="Dexterity Item"\n-        permission="cmf.AddPortalContent"\n-        icon="plone.dexterity.item.gif"\n-        />\n-    <class class=".content.Item" />\n-\n-    <five:registerClass\n-        class=".content.Container"\n-        meta_type="Dexterity Container"\n-        permission="cmf.AddPortalContent"\n-        icon="plone.dexterity.item.gif"\n-        />\n-    <class class=".content.Container" />\n-\n-    <!-- Register FTI class -->\n-    <five:registerClass\n-        class=".fti.DexterityFTI"\n-        meta_type="Dexterity FTI"\n-        addview="plone.dexterity.fti"\n-        permission="cmf.ManagePortal"\n-        icon="plone.dexterity.fti.gif"\n-        global="False"\n-        />\n-\n-    <!-- Register FTI add/remove/modify handlers -->\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectAddedEvent"\n-        handler=".fti.ftiAdded"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectRemovedEvent"\n-        handler=".fti.ftiRemoved"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.container.interfaces.IObjectMovedEvent"\n-        handler=".fti.ftiRenamed"\n-        />\n-\n-    <subscriber\n-        for=".interfaces.IDexterityFTI\n-             zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n-        handler=".fti.ftiModified"\n-        />\n-\n-    <!-- File representation (FTP/WebDAV support) -->\n-    <adapter factory=".filerepresentation.DefaultDirectoryFactory" />\n-    <adapter factory=".filerepresentation.DefaultFileFactory" />\n-\n-    <adapter\n-        provides="zope.filerepresentation.interfaces.IRawReadFile"\n-        factory=".filerepresentation.DefaultReadFile"\n-        />\n-    <adapter factory=".filerepresentation.DefaultWriteFile" />\n-\n-    <!-- GenericSetup structure import/export support -->\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-        for=".interfaces.IDexterityItem"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-        for=".interfaces.IDexterityItem"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n-        for=".interfaces.IDexterityContainer"\n-        />\n-    <adapter\n-        factory=".exportimport.DexterityContentExporterImporter"\n-        provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n-        for=".interfaces.IDexterityContainer"\n-        />\n-\n-    <!-- PrimaryFieldInfo -->\n-    <adapter factory=".primary.PrimaryFieldInfo"/>\n-\n-    <!-- ISized -->\n-    <adapter\n-        for="*"\n-        factory="zope.size.DefaultSized"\n-        provides="zope.size.interfaces.ISized"\n-        />\n+    xmlns:i18n="http://namespaces.zope.org/i18n"\n+    i18n_domain="plone"\n+    >\n+\n+  <include package="Products.CMFCore" />\n+\n+  <include package="plone.behavior" />\n+  <include package="plone.folder" />\n+  <include package="plone.supermodel" />\n+  <include package="plone.rfc822" />\n+  <include package="plone.uuid" />\n+  <include package="plone.z3cform" />\n+\n+  <include package=".browser" />\n+  <include package=".fti" />\n+\n+  <!-- Re-index content when it\'s modified -->\n+  <subscriber\n+      for=".interfaces.IDexterityContent\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".content.reindexOnModify"\n+      />\n+\n+  <!-- Support for dynamic schemata -->\n+\n+  <utility\n+      factory=".schema.DexteritySchemaPolicy"\n+      name="dexterity"\n+      />\n+\n+  <utility\n+      factory=".schema.SchemaModuleFactory"\n+      name="plone.dexterity.schema.generated"\n+      />\n+\n+  <!-- Schema cache -->\n+  <subscriber handler=".schema.invalidate_schema" />\n+\n+  <!-- Support for plone.behavior behaviors -->\n+  <adapter factory=".behavior.DexterityBehaviorAssignable" />\n+\n+  <!-- Register the content classes -->\n+  <five:registerClass\n+      class=".content.Item"\n+      permission="cmf.AddPortalContent"\n+      icon="plone.dexterity.item.gif"\n+      meta_type="Dexterity Item"\n+      />\n+  <class class=".content.Item" />\n+\n+  <five:registerClass\n+      class=".content.Container"\n+      permission="cmf.AddPortalContent"\n+      icon="plone.dexterity.item.gif"\n+      meta_type="Dexterity Container"\n+      />\n+  <class class=".content.Container" />\n+\n+  <!-- Register FTI class -->\n+  <five:registerClass\n+      class=".fti.DexterityFTI"\n+      permission="cmf.ManagePortal"\n+      addview="plone.dexterity.fti"\n+      global="False"\n+      icon="plone.dexterity.fti.gif"\n+      meta_type="Dexterity FTI"\n+      />\n+\n+  <!-- Register FTI add/remove/modify handlers -->\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectAddedEvent"\n+      handler=".fti.ftiAdded"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectRemovedEvent"\n+      handler=".fti.ftiRemoved"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.container.interfaces.IObjectMovedEvent"\n+      handler=".fti.ftiRenamed"\n+      />\n+\n+  <subscriber\n+      for=".interfaces.IDexterityFTI\n+           zope.lifecycleevent.interfaces.IObjectModifiedEvent"\n+      handler=".fti.ftiModified"\n+      />\n+\n+  <!-- File representation (FTP/WebDAV support) -->\n+  <adapter factory=".filerepresentation.DefaultDirectoryFactory" />\n+  <adapter factory=".filerepresentation.DefaultFileFactory" />\n+\n+  <adapter\n+      factory=".filerepresentation.DefaultReadFile"\n+      provides="zope.filerepresentation.interfaces.IRawReadFile"\n+      />\n+  <adapter factory=".filerepresentation.DefaultWriteFile" />\n+\n+  <!-- GenericSetup structure import/export support -->\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n+      for=".interfaces.IDexterityItem"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n+      for=".interfaces.IDexterityItem"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n+      for=".interfaces.IDexterityContainer"\n+      />\n+  <adapter\n+      factory=".exportimport.DexterityContentExporterImporter"\n+      provides="Products.GenericSetup.interfaces.IFilesystemExporter"\n+      for=".interfaces.IDexterityContainer"\n+      />\n+\n+  <!-- PrimaryFieldInfo -->\n+  <adapter factory=".primary.PrimaryFieldInfo" />\n+\n+  <!-- ISized -->\n+  <adapter\n+      factory="zope.size.DefaultSized"\n+      provides="zope.size.interfaces.ISized"\n+      for="*"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 81a8b7af..d54d46a4 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl import getSecurityManager\n from AccessControl import Permissions as acpermissions\n@@ -11,6 +10,7 @@\n from OFS.SimpleItem import PathReprProvider\n from OFS.SimpleItem import SimpleItem\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n+from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.filerepresentation import DAVCollectionMixin\n from plone.dexterity.filerepresentation import DAVResourceMixin\n@@ -22,7 +22,6 @@\n from plone.dexterity.utils import datify\n from plone.dexterity.utils import iterSchemata\n from plone.dexterity.utils import safe_unicode\n-from plone.dexterity.utils import safe_utf8\n from plone.folder.ordered import CMFOrderedBTreeFolderBase\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n@@ -35,7 +34,6 @@\n from Products.CMFCore.PortalContent import PortalContent\n from Products.CMFCore.PortalFolder import PortalFolderBase\n from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n-from Products.CMFPlone.interfaces import IConstrainTypes\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import queryUtility\n@@ -46,10 +44,10 @@\n from zope.interface.declarations import implementedBy\n from zope.interface.declarations import Implements\n from zope.interface.declarations import ObjectSpecificationDescriptor\n+from zope.interface.interface import Method\n from zope.schema.interfaces import IContextAwareDefaultFactory\n from zope.security.interfaces import IPermission\n \n-import six\n import threading\n \n \n@@ -82,7 +80,7 @@ def _default_from_schema(context, schema, fieldname):\n     if schema is None:\n         return _marker\n     field = schema.get(fieldname, None)\n-    if field is None:\n+    if field is None or isinstance(field, Method):\n         return _marker\n     default_factory = getattr(field, "defaultFactory", None)\n     if (\n@@ -232,7 +230,7 @@ def __call__(self, name, value):\n         return 0\n \n \n-class PasteBehaviourMixin(object):\n+class PasteBehaviourMixin:\n     def _notifyOfCopyTo(self, container, op=0):\n         """Keep Archetypes\' reference info internally when op == 1 (move)\n         because in those cases we need to keep Archetypes\' refeferences.\n@@ -269,7 +267,7 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n         # Products.CMFCore.PortalFolder.PortalFolderBase (permission checks and\n         # allowed content types) to also ask the FTI if construction is\n         # allowed.\n-        super(PasteBehaviourMixin, self)._verifyObjectPaste(obj, validate_src)\n+        super()._verifyObjectPaste(obj, validate_src)\n         portal_type = getattr(aq_base(obj), "portal_type", None)\n         constrains = IConstrainTypes(self, None)\n         if constrains:\n@@ -292,7 +290,7 @@ def _getCopy(self, container):\n         # Copied from Products.Archetypes.Referenceable.Referenceable._getCopy\n         is_cp_flag = getattr(self, "_v_is_cp", None)\n         cp_refs_flag = getattr(self, "_v_cp_refs", None)\n-        ob = super(PasteBehaviourMixin, self)._getCopy(container)\n+        ob = super()._getCopy(container)\n         if is_cp_flag:\n             setattr(ob, "_v_is_cp", is_cp_flag)\n         if cp_refs_flag:\n@@ -319,8 +317,8 @@ class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager, Contain\n     # portal_type is set by the add view and/or factory\n     portal_type = None\n \n-    title = u""\n-    description = u""\n+    title = ""\n+    description = ""\n     subject = ()\n     creators = ()\n     contributors = ()\n@@ -416,13 +414,9 @@ def __getattr__(self, name):\n     # that can\'t be encoded to ASCII will throw a UnicodeEncodeError\n \n     def _get__name__(self):\n-        if six.PY2:\n-            return safe_unicode(self.id)\n         return self.id\n \n     def _set__name__(self, value):\n-        if six.PY2 and isinstance(value, six.text_type):\n-            value = str(value)  # may throw, but id must be ASCII in py2\n         self.id = value\n \n     __name__ = property(_get__name__, _set__name__)\n@@ -467,9 +461,6 @@ def setModificationDate(self, modification_date=None):\n \n     @security.protected(permissions.View)\n     def Title(self):\n-        # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(self.title, six.text_type):\n-            return self.title.encode("utf-8")\n         return self.title or ""\n \n     @security.protected(permissions.View)\n@@ -482,10 +473,6 @@ def Description(self):\n         # Remember: \\r\\n - Windows, \\r - OS X, \\n - Linux/Unix\n         value = value.replace("\\r\\n", " ").replace("\\r", " ").replace("\\n", " ")  # noqa\n \n-        # this is a CMF accessor, so should return utf8-encoded\n-        if six.PY2 and isinstance(value, six.text_type):\n-            value = value.encode("utf-8")\n-\n         return value\n \n     @security.protected(permissions.View)\n@@ -500,8 +487,6 @@ def listCreators(self):\n         # List Dublin Core Creator elements - resource authors.\n         if self.creators is None:\n             return ()\n-        if six.PY2:\n-            return tuple(safe_utf8(c) for c in self.creators)\n         return self.creators\n \n     @security.protected(permissions.View)\n@@ -515,8 +500,6 @@ def Subject(self):\n         # Dublin Core Subject element - resource keywords.\n         if self.subject is None:\n             return ()\n-        if six.PY2:\n-            return tuple(safe_utf8(s) for s in self.subject)\n         return tuple(self.subject)\n \n     @security.protected(permissions.View)\n@@ -527,8 +510,6 @@ def Publisher(self):\n     @security.protected(permissions.View)\n     def listContributors(self):\n         # Dublin Core Contributor elements - resource collaborators.\n-        if six.PY2:\n-            return tuple(safe_utf8(c) for c in self.contributors)\n         return tuple(self.contributors)\n \n     @security.protected(permissions.View)\n@@ -600,8 +581,6 @@ def Language(self):\n     @security.protected(permissions.View)\n     def Rights(self):\n         # Dublin Core Rights element - resource copyright.\n-        if six.PY2:\n-            return safe_utf8(self.rights)\n         return self.rights\n \n     # ICatalogableDublinCore\n@@ -663,21 +642,21 @@ def setDescription(self, description):\n     @security.protected(permissions.ModifyPortalContent)\n     def setCreators(self, creators):\n         # Set Dublin Core Creator elements - resource authors.\n-        if isinstance(creators, six.string_types):\n+        if isinstance(creators, str):\n             creators = [creators]\n         self.creators = tuple(safe_unicode(c.strip()) for c in creators)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setSubject(self, subject):\n         # Set Dublin Core Subject element - resource keywords.\n-        if isinstance(subject, six.string_types):\n+        if isinstance(subject, str):\n             subject = [subject]\n         self.subject = tuple(safe_unicode(s.strip()) for s in subject)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setContributors(self, contributors):\n         # Set Dublin Core Contributor elements - resource collaborators.\n-        if isinstance(contributors, six.string_types):\n+        if isinstance(contributors, str):\n             contributors = contributors.split(";")\n         self.contributors = tuple(safe_unicode(c.strip()) for c in contributors)\n \n@@ -790,7 +769,7 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n         """\n         if ids is None:\n             ids = []\n-        if isinstance(ids, six.string_types):\n+        if isinstance(ids, str):\n             ids = [ids]\n         for id in ids:\n             item = self._getOb(id)\n@@ -798,7 +777,7 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n                 permissions.DeleteObjects, item\n             ):\n                 raise Unauthorized("Do not have permissions to remove this object")\n-        return super(Container, self).manage_delObjects(ids, REQUEST=REQUEST)\n+        return super().manage_delObjects(ids, REQUEST=REQUEST)\n \n     # override PortalFolder\'s allowedContentTypes to respect IConstrainTypes\n     # adapters\n@@ -808,7 +787,7 @@ def allowedContentTypes(self, context=None):\n \n         constrains = IConstrainTypes(context, None)\n         if not constrains:\n-            return super(Container, self).allowedContentTypes()\n+            return super().allowedContentTypes()\n \n         return constrains.allowedContentTypes()\n \n@@ -832,9 +811,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n                     % type_name\n                 )\n \n-        return super(Container, self).invokeFactory(\n-            type_name, id, RESPONSE, *args, **kw\n-        )\n+        return super().invokeFactory(type_name, id, RESPONSE, *args, **kw)\n \n \n def reindexOnModify(content, event):\ndiff --git a/plone/dexterity/events.py b/plone/dexterity/events.py\nindex 81e08bd1..67932c9e 100644\n--- a/plone/dexterity/events.py\n+++ b/plone/dexterity/events.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity import interfaces\n from zope.interface import implementer\n from zope.interface.interfaces import ObjectEvent\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex ee39472c..70ccdfb3 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -1,6 +1,7 @@\n-# -*- coding: utf-8 -*-\n from csv import reader\n from csv import writer\n+from io import BytesIO\n+from io import StringIO\n from Products.GenericSetup.content import _globtest\n from Products.GenericSetup.content import FauxDAVRequest\n from Products.GenericSetup.content import FauxDAVResponse\n@@ -9,13 +10,9 @@\n from Products.GenericSetup.interfaces import IFilesystemExporter\n from Products.GenericSetup.interfaces import IFilesystemImporter\n from Products.GenericSetup.utils import _getDottedName\n-from six import BytesIO\n-from six import StringIO\n from zope.component import queryAdapter\n from zope.interface import implementer\n \n-import six\n-\n \n @implementer(IFilesystemExporter, IFilesystemImporter)\n class DexterityContentExporterImporter(FolderishExporterImporter):\n@@ -47,7 +44,7 @@ def export(self, export_context, subdir, root=False):\n         context = self.context\n \n         if not root:\n-            subdir = "%s/%s" % (subdir, context.getId())\n+            subdir = "{}/{}".format(subdir, context.getId())\n \n         exportable = self.listExportableItems()\n \n@@ -89,7 +86,7 @@ def import_(self, import_context, subdir, root=False):\n         """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = "%s/%s" % (subdir, context.getId())\n+            subdir = "{}/{}".format(subdir, context.getId())\n \n         data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n@@ -106,7 +103,7 @@ def import_(self, import_context, subdir, root=False):\n             preserve = []\n         else:\n             # Make sure ``preserve`` is a native string\n-            if six.PY3 and not isinstance(preserve, str):\n+            if not isinstance(preserve, str):\n                 preserve = preserve.decode("utf-8")\n             preserve = _globtest(preserve, prior)\n \n@@ -121,7 +118,7 @@ def import_(self, import_context, subdir, root=False):\n             return\n \n         dialect = "excel"\n-        if six.PY3 and not isinstance(objects, str):\n+        if not isinstance(objects, str):\n             objects = objects.decode("utf-8")\n         stream = StringIO(objects)\n \n@@ -139,7 +136,7 @@ def import_(self, import_context, subdir, root=False):\n                 if object is None:\n                     logger = import_context.getLogger("SFWA")\n                     logger.warning(\n-                        "Couldn\'t make instance: %s/%s" % (subdir, object_id)\n+                        "Couldn\'t make instance: {}/{}".format(subdir, object_id)\n                     )\n                     continue\n \ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex e0d0d29e..fc87b38e 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from persistent import Persistent\n from plone.dexterity.interfaces import IDexterityFactory\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -58,4 +57,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return "<%s for %s>" % (self.__class__.__name__, self.portal_type)\n+        return "<{} for {}>".format(self.__class__.__name__, self.portal_type)\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 58a0d843..046e71d9 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -1,10 +1,9 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from Acquisition import Implicit\n from email.message import Message\n-from plone.dexterity import bbb\n+from email.parser import BytesFeedParser\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -15,6 +14,7 @@\n from plone.rfc822.interfaces import IPrimaryField\n from Products.CMFCore import permissions\n from Products.CMFCore.utils import getToolByName\n+from webdav.Resource import Resource\n from zExceptions import MethodNotAllowed\n from zExceptions import Unauthorized\n from zope.component import adapter\n@@ -32,24 +32,10 @@\n from zope.size.interfaces import ISized\n from ZPublisher.Iterators import IStreamIterator\n \n-import six\n import tempfile\n \n \n-if bbb.HAS_WEBDAV:\n-    from webdav.Resource import Resource\n-else:\n-    Resource = bbb.Resource\n-\n-\n-try:\n-    from email.parser import BytesFeedParser\n-except:\n-    # Python 2.7 compatibility\n-    from email.parser import FeedParser as BytesFeedParser\n-\n-\n-class DAVResourceMixin(object):\n+class DAVResourceMixin:\n     """Mixin class for WebDAV resource support.\n \n     The main purpose of this class is to implement the Zope 2 WebDAV API to\n@@ -241,7 +227,7 @@ def listDAVObjects(self):\n         We add a non-folderish pseudo object which contains the "body" data\n         for this container.\n         """\n-        parentList = super(DAVCollectionMixin, self).listDAVObjects()\n+        parentList = super().listDAVObjects()\n         if not parentList:\n             parentList = []\n         else:\n@@ -335,7 +321,7 @@ def PROPFIND(self, REQUEST, RESPONSE):\n \n         Certain things may be acquired, notably .propertysheets\n         """\n-        return super(FolderDataResource, self).PROPFIND(REQUEST, RESPONSE)\n+        return super().PROPFIND(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def PROPPATCH(self, REQUEST, RESPONSE):\n@@ -344,7 +330,7 @@ def PROPPATCH(self, REQUEST, RESPONSE):\n \n         Certain things may be acquired, notably .propertysheets\n         """\n-        return super(FolderDataResource, self).PROPPATCH(REQUEST, RESPONSE)\n+        return super().PROPPATCH(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def LOCK(self, REQUEST, RESPONSE):\n@@ -401,7 +387,7 @@ def listDAVObjects(self):\n \n \n @implementer(IStreamIterator)\n-class StringStreamIterator(object):\n+class StringStreamIterator:\n     """Simple stream iterator to allow efficient data streaming."""\n \n     def __init__(self, data, size=None, chunk=1 << 16):\n@@ -442,7 +428,7 @@ def __len__(self):\n \n @implementer(IDirectoryFactory)\n @adapter(IDexterityContainer)\n-class DefaultDirectoryFactory(object):\n+class DefaultDirectoryFactory:\n     """Default directory factory, invoked when an FTP/WebDAV operation\n     attempts to create a new folder via a MKCOL request.\n \n@@ -458,7 +444,7 @@ def __call__(self, name):\n \n @implementer(IFileFactory)\n @adapter(IDexterityContainer)\n-class DefaultFileFactory(object):\n+class DefaultFileFactory:\n     """Default file factory, invoked when an FTP/WebDAV operation\n     attempts to create a new resource via a PUT request.\n \n@@ -540,7 +526,7 @@ def __call__(self, name, contentType, data):\n \n \n @implementer(IRawReadFile)\n-class ReadFileBase(object):\n+class ReadFileBase:\n     """Convenience base class for read files which delegate to another stream\n     type (e.g. a temporary file or StringIO)\n \n@@ -678,10 +664,7 @@ def _getStream(self):\n         # transaction is closed\n         message = self._getMessage()\n         out = tempfile.TemporaryFile(mode="w+b")\n-        if six.PY2:\n-            out.write(message.as_string())\n-        else:\n-            out.write(message.as_string().encode("utf-8"))\n+        out.write(message.as_string().encode("utf-8"))\n         self._size = out.tell()\n         out.seek(0)\n         return out\n@@ -692,7 +675,7 @@ def __next__(self):\n \n \n @implementer(IRawWriteFile)\n-class WriteFileBase(object):\n+class WriteFileBase:\n     """Convenience base class for write files which delegate to another\n     stream, e.g. a file or StringIO.\n \n@@ -754,7 +737,7 @@ def _getStream(self):\n \n @implementer(IRawWriteFile)\n @adapter(IDexterityContent)\n-class DefaultWriteFile(object):\n+class DefaultWriteFile:\n     """IRawWriteFile file adapter for Dexterity objects.\n \n     Uses RFC822 marshaler.\n@@ -824,7 +807,7 @@ def close(self):\n     def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n-        if isinstance(data, six.text_type):\n+        if isinstance(data, str):\n             data = data.encode()\n         self._written += len(data)\n         self._parser.feed(data)\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex a6b38308..f4ec43bf 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n from plone.dexterity import utils\n@@ -27,11 +26,17 @@\n import logging\n import os.path\n import plone.dexterity.schema\n-import six\n+\n+\n+def get_suffix(fti):\n+    mtime = getattr(fti, "_p_mtime", None)\n+    if mtime:\n+        return repr(mtime)\n+    return ""\n \n \n @implementer(IDexterityFTIModificationDescription)\n-class DexterityFTIModificationDescription(object):\n+class DexterityFTIModificationDescription:\n     def __init__(self, attribute, oldValue):\n         self.attribute = attribute\n         self.oldValue = oldValue\n@@ -43,10 +48,6 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n \n     meta_type = "Dexterity FTI"\n \n-    behaviors_type = "ulines"\n-    if six.PY2:\n-        behaviors_type = "lines"\n-\n     _properties = base.DynamicViewTypeInformation._properties + (\n         {\n             "id": "add_permission",\n@@ -66,7 +67,7 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n         },\n         {\n             "id": "behaviors",\n-            "type": behaviors_type,\n+            "type": "lines",\n             "mode": "w",\n             "label": "Behaviors",\n             "description": "Names of enabled behaviors type",\n@@ -118,12 +119,14 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n         {\n             "id": "view",\n             "title": "View",\n+            "icon_expr": "string:toolbar-action/view",\n             "action": "string:${object_url}",\n             "permissions": ("View",),\n         },\n         {\n             "id": "edit",\n             "title": "Edit",\n+            "icon_expr": "string:toolbar-action/edit",\n             "action": "string:${object_url}/edit",\n             "permissions": ("Modify portal content",),\n         },\n@@ -140,12 +143,12 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n     <schema />\n </model>\n """\n-    model_file = u""\n-    schema = u""\n-    schema_policy = u"dexterity"\n+    model_file = ""\n+    schema = ""\n+    schema_policy = "dexterity"\n \n     def __init__(self, *args, **kwargs):\n-        super(DexterityFTI, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n \n         if "aliases" not in kwargs:\n             self.setMethodAliases(self.default_aliases)\n@@ -155,6 +158,7 @@ def __init__(self, *args, **kwargs):\n                 self.addAction(\n                     id=action["id"],\n                     name=action["title"],\n+                    icon_expr=action["icon_expr"],\n                     action=action["action"],\n                     condition=action.get("condition"),\n                     permission=action.get("permissions", ()),\n@@ -196,33 +200,13 @@ def __init__(self, *args, **kwargs):\n \n     def Title(self):\n         if self.title and self.i18n_domain:\n-            if six.PY2:\n-                try:\n-                    return Message(self.title.decode("utf8"), self.i18n_domain)\n-                except UnicodeDecodeError:\n-                    return Message(self.title.decode("latin-1"), self.i18n_domain)\n-            else:\n-                return Message(self.title, self.i18n_domain)\n-        else:\n-            if six.PY2:\n-                if self.title:\n-                    return self.title.decode("utf8")\n-                return self.getId()\n-            return self.title or self.getId()\n+            return Message(self.title, self.i18n_domain)\n+        return self.title or self.getId()\n \n     def Description(self):\n         if self.description and self.i18n_domain:\n-            if six.PY2:\n-                try:\n-                    return Message(self.description.decode("utf8"), self.i18n_domain)\n-                except UnicodeDecodeError:\n-                    return Message(self.description.decode("latin-1"), self.i18n_domain)\n-            else:\n-                return Message(self.description, self.i18n_domain)\n-        else:\n-            if six.PY2 and self.description:\n-                return self.description.decode("utf8")\n-            return self.description\n+            return Message(self.description, self.i18n_domain)\n+        return self.description\n \n     def Metatype(self):\n         if self.content_meta_type:\n@@ -246,7 +230,7 @@ def lookupSchema(self):\n                 schema = utils.resolveDottedName(self.schema)\n             except ImportError:\n                 logging.warning(\n-                    u"Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n+                    "Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n                     % (self.getId(), self.schema)\n                 )\n                 # fall through to return a fake class with no\n@@ -258,8 +242,7 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-        mtime = getattr(self, "_p_mtime", None) or ""\n-        schemaName = portalTypeToSchemaName(self.getId(), suffix=str(mtime))\n+        schemaName = portalTypeToSchemaName(self.getId(), suffix=get_suffix(self))\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n@@ -273,7 +256,7 @@ def lookupModel(self):\n \n         elif self.schema:\n             schema = self.lookupSchema()\n-            return Model({u"": schema})\n+            return Model({"": schema})\n \n         raise ValueError(\n             "Neither model source, nor model file, nor schema is specified in "\n@@ -293,7 +276,7 @@ def _updateProperty(self, id, value):\n         """\n \n         oldValue = getattr(self, id, None)\n-        super(DexterityFTI, self)._updateProperty(id, value)\n+        super()._updateProperty(id, value)\n         new_value = getattr(self, id, None)\n \n         if oldValue != new_value:\n@@ -345,8 +328,8 @@ def _absModelFile(self):\n         else:\n             if not os.path.isabs(model_file):\n                 raise ValueError(\n-                    u"Model file name %s is not an absolute path and does "\n-                    u"not contain a package name in %s"\n+                    "Model file name %s is not an absolute path and does "\n+                    "not contain a package name in %s"\n                     % (\n                         model_file,\n                         self.getId(),\n@@ -355,7 +338,7 @@ def _absModelFile(self):\n \n         if not os.path.isfile(model_file):\n             raise ValueError(\n-                u"Model file %s in %s cannot be found"\n+                "Model file %s in %s cannot be found"\n                 % (\n                     model_file,\n                     self.getId(),\n@@ -554,8 +537,7 @@ def ftiModified(object, event):\n             "model_source" in mod or "model_file" in mod or "schema_policy" in mod\n         ):\n \n-            mtime = getattr(fti, "_p_mtime", None) or ""\n-            schemaName = portalTypeToSchemaName(portal_type, suffix=str(mtime))\n+            schemaName = portalTypeToSchemaName(portal_type, suffix=get_suffix(fti))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\ndiff --git a/plone/dexterity/i18n.py b/plone/dexterity/i18n.py\nindex fe387f44..fa171bb4 100644\n--- a/plone/dexterity/i18n.py\n+++ b/plone/dexterity/i18n.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import zope.i18nmessageid\n \n \ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex cf5dc42c..4dc07b13 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import ITypeInformation\n from zope.component.interfaces import IFactory\n from zope.interface import Attribute\n@@ -9,12 +8,9 @@\n import zope.schema\n \n \n-try:\n-    from zope.app.content import IContentType\n-except ImportError:\n+class IContentType(Interface):\n \n-    class IContentType(Interface):\n-        pass\n+    pass\n \n \n # id for pseudo-resource used to expose data for folderish items over WebDAV\n@@ -47,47 +43,47 @@ def lookupModel():\n         """\n \n     add_permission = zope.schema.DottedName(\n-        title=u"Add permission",\n-        description=u"Zope 3 permission name for the permission required to "\n-        u"construct this content",\n+        title="Add permission",\n+        description="Zope 3 permission name for the permission required to "\n+        "construct this content",\n     )\n \n     behaviors = zope.schema.List(\n-        title=u"Behaviors",\n-        description=u"A list of behaviors that are enabled for this type. "\n-        u"See plone.behavior for more details.",\n-        value_type=zope.schema.DottedName(title=u"Behavior name"),\n+        title="Behaviors",\n+        description="A list of behaviors that are enabled for this type. "\n+        "See plone.behavior for more details.",\n+        value_type=zope.schema.DottedName(title="Behavior name"),\n     )\n \n     schema = zope.schema.DottedName(\n-        title=u"Schema interface",\n-        description=u"Dotted name to an interface describing the type. "\n-        u"This is not required if there is a model file or a "\n-        u"model source string containing an unnamed schema.",\n+        title="Schema interface",\n+        description="Dotted name to an interface describing the type. "\n+        "This is not required if there is a model file or a "\n+        "model source string containing an unnamed schema.",\n     )\n \n     model_source = zope.schema.Text(\n-        title=u"Model text",\n-        description=u"XML representation of the model for this type. "\n-        + u"If this is given, it will override any model_file.",\n+        title="Model text",\n+        description="XML representation of the model for this type. "\n+        + "If this is given, it will override any model_file.",\n     )\n \n     model_file = zope.schema.Text(\n-        title=u"Model file",\n-        description=u"A file that contains an XML model. "\n-        u"This may be an absolute path, or one relative to a "\n-        u"package, e.g. my.package:model.xml",\n+        title="Model file",\n+        description="A file that contains an XML model. "\n+        "This may be an absolute path, or one relative to a "\n+        "package, e.g. my.package:model.xml",\n     )\n \n     hasDynamicSchema = zope.schema.Bool(\n-        title=u"Whether or not the FTI uses a dynamic schema.", readonly=True\n+        title="Whether or not the FTI uses a dynamic schema.", readonly=True\n     )\n \n \n class IDexterityFTIModificationDescription(IModificationDescription):\n     """Descriptor passed with an IObjectModifiedEvent for a Dexterity FTI."""\n \n-    attribute = zope.schema.ASCII(title=u"Name of the attribute that was modified")\n+    attribute = zope.schema.ASCII(title="Name of the attribute that was modified")\n     oldValue = Attribute("Old value")\n \n \n@@ -101,7 +97,7 @@ class IDexterityFactory(IFactory):\n     """\n \n     portal_type = zope.schema.TextLine(\n-        title=u"Portal type name", description=u"The portal type this is an FTI for"\n+        title="Portal type name", description="The portal type this is an FTI for"\n     )\n \n \n@@ -118,7 +114,7 @@ class ISchemaInvalidatedEvent(Interface):\n     cache.\n     """\n \n-    portal_type = zope.schema.TextLine(title=u"FTI name", required=False)\n+    portal_type = zope.schema.TextLine(title="FTI name", required=False)\n \n \n # Content\ndiff --git a/plone/dexterity/meta.zcml b/plone/dexterity/meta.zcml\nindex f35d9532..1a9bc51a 100644\n--- a/plone/dexterity/meta.zcml\n+++ b/plone/dexterity/meta.zcml\n@@ -1,8 +1,12 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n-    i18n_domain="plone">\n+    i18n_domain="plone"\n+    >\n \n-    <!-- Include ZCML directive from plone.behavior -->\n-    <include package="plone.behavior" file="meta.zcml" />\n+  <!-- Include ZCML directive from plone.behavior -->\n+  <include\n+      package="plone.behavior"\n+      file="meta.zcml"\n+      />\n \n </configure>\ndiff --git a/plone/dexterity/primary.py b/plone/dexterity/primary.py\nindex 759d530e..3e98ffec 100644\n--- a/plone/dexterity/primary.py\n+++ b/plone/dexterity/primary.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.dexterity.interfaces import IDexterityContent\n from plone.dexterity.utils import iterSchemata\n from plone.rfc822.interfaces import IPrimaryField\n@@ -10,7 +9,7 @@\n \n @implementer(IPrimaryFieldInfo)\n @adapter(IDexterityContent)\n-class PrimaryFieldInfo(object):\n+class PrimaryFieldInfo:\n     def __init__(self, context):\n         self.context = context\n         primary = None\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 7a0ef351..41a74689 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -1,22 +1,20 @@\n-# -*- coding: utf-8 -*-\n+from .interfaces import IContentType\n+from .interfaces import IDexterityFTI\n+from .interfaces import IDexteritySchema\n+from .interfaces import ISchemaInvalidatedEvent\n+from .synchronize import synchronized\n from plone.alterego import dynamic\n from plone.alterego.interfaces import IDynamicObjectFactory\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.registration import BehaviorRegistration\n-from plone.dexterity.interfaces import IContentType\n-from plone.dexterity.interfaces import IDexterityFTI\n-from plone.dexterity.interfaces import IDexteritySchema\n-from plone.dexterity.interfaces import ISchemaInvalidatedEvent\n from plone.supermodel.parser import ISchemaPolicy\n from plone.supermodel.utils import syncSchema\n-from plone.synchronize import synchronized\n from Products.CMFCore.interfaces import ISiteRoot\n from threading import RLock\n from zope.component import adapter\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n-from zope.component.hooks import getSite\n from zope.dottedname.resolve import resolve\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n@@ -25,7 +23,6 @@\n \n import functools\n import logging\n-import six\n import types\n import warnings\n \n@@ -56,7 +53,7 @@ def invalidate_cache(fti):\n \n def lookup_fti(portal_type, cache=True):\n     # if its a string lookup fti\n-    if isinstance(portal_type, six.string_types):\n+    if isinstance(portal_type, str):\n         # looking up a utility is expensive, using the global request as\n         # cache is twice as fast\n         if cache:\n@@ -81,7 +78,7 @@ def lookup_fti(portal_type, cache=True):\n         return portal_type\n     raise ValueError(\n         "portal_type has to either string or IDexterityFTI instance but is "\n-        "{0!r}".format(portal_type)\n+        "{!r}".format(portal_type)\n     )\n \n \n@@ -118,7 +115,7 @@ def decorator(self, portal_type):\n     return decorator\n \n \n-class SchemaCache(object):\n+class SchemaCache:\n     """Simple schema cache for FTI based schema information.\n \n     This cache will store a Python object reference to the schema, as returned\n@@ -177,8 +174,8 @@ def behavior_registrations(self, fti):\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n                 warnings.warn(\n-                    \'No behavior registration found for behavior named "{0}"\'\n-                    \' for factory "{1}"\'\n+                    \'No behavior registration found for behavior named "{}"\'\n+                    \' for factory "{}"\'\n                     " - trying deprecated fallback lookup (will be removed "\n                     \'in 3.0)..."\'.format(behavior_name, fti.getId()),\n                     DeprecationWarning,\n@@ -187,7 +184,7 @@ def behavior_registrations(self, fti):\n                     schema_interface = resolve(behavior_name)\n                 except (ValueError, ImportError):\n                     log.error(\n-                        "Error resolving behavior {0} for factory {1}".format(\n+                        "Error resolving behavior {} for factory {}".format(\n                             behavior_name, fti.getId()\n                         )\n                     )\n@@ -279,7 +276,7 @@ def modified(self, fti):\n \n \n @implementer(ISchemaInvalidatedEvent)\n-class SchemaInvalidatedEvent(object):\n+class SchemaInvalidatedEvent:\n     def __init__(self, portal_type):\n         self.portal_type = portal_type\n \n@@ -293,7 +290,7 @@ def invalidate_schema(event):\n \n \n # here starts the code dealing wih dynamic schemas.\n-class SchemaNameEncoder(object):\n+class SchemaNameEncoder:\n     """Schema name encoding"""\n \n     key = (\n@@ -321,7 +318,7 @@ def split(self, s):\n         return [self.decode(a) for a in s.split("_0_")]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n+def portalTypeToSchemaName(portal_type, schema="", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface."""\n     if prefix is None:\n         siteroot = None\n@@ -350,7 +347,7 @@ def splitSchemaName(schemaName):\n     encoder = SchemaNameEncoder()\n     items = encoder.split(schemaName)\n     if len(items) == 2:\n-        return items[0], items[1], u""\n+        return items[0], items[1], ""\n     elif len(items) == 3:\n         return items[0], items[1], items[2]\n     else:\n@@ -359,7 +356,7 @@ def splitSchemaName(schemaName):\n \n # Dynamic module factory\n @implementer(IDynamicObjectFactory)\n-class SchemaModuleFactory(object):\n+class SchemaModuleFactory:\n     """Create dynamic schema interfaces on the fly"""\n \n     lock = RLock()\n@@ -423,7 +420,7 @@ def __call__(self, name, module):\n \n \n @implementer(ISchemaPolicy)\n-class DexteritySchemaPolicy(object):\n+class DexteritySchemaPolicy:\n     """Determines how and where imported dynamic interfaces are created.\n     Note that these schemata are never used directly. Rather, they are merged\n     into a schema with a proper name and module, either dynamically or\ndiff --git a/plone/dexterity/synchronize.py b/plone/dexterity/synchronize.py\nnew file mode 100644\nindex 00000000..5bc8de34\n--- /dev/null\n+++ b/plone/dexterity/synchronize.py\n@@ -0,0 +1,16 @@\n+def synchronized(lock):\n+    """Decorate a method with this and pass in a threading.Lock object to\n+    ensure that a method is synchronised over the given lock.\n+    """\n+\n+    def wrap(f):\n+        def synchronized_function(*args, **kw):\n+            lock.acquire()\n+            try:\n+                return f(*args, **kw)\n+            finally:\n+                lock.release()\n+\n+        return synchronized_function\n+\n+    return wrap\ndiff --git a/plone/dexterity/tests/__init__.py b/plone/dexterity/tests/__init__.py\nindex 40a96afc..e69de29b 100644\n--- a/plone/dexterity/tests/__init__.py\n+++ b/plone/dexterity/tests/__init__.py\n@@ -1 +0,0 @@\n-# -*- coding: utf-8 -*-\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex b98db415..f4d026cd 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,18 +1,11 @@\n-# -*- coding: utf-8 -*-\n-from plone.dexterity.bbb import HAS_WEBDAV\n+from unittest.mock import Mock\n \n import gc\n-import six\n import unittest\n import zope.component\n import zope.component.testing\n import zope.globalrequest\n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n \n class MockTestCase(unittest.TestCase):\n     """Base class for tests using mocks."""\n@@ -38,11 +31,11 @@ def create_dummy(self, **kw):\n     # Help register mock components. The tear-down method will\n     # wipe the registry each time.\n \n-    def mock_utility(self, mock, provides, name=u""):\n+    def mock_utility(self, mock, provides, name=""):\n         """Register the mock as a utility providing the given interface"""\n         zope.component.provideUtility(provides=provides, component=mock, name=name)\n \n-    def mock_adapter(self, mock, provides, adapts, name=u""):\n+    def mock_adapter(self, mock, provides, adapts, name=""):\n         """Register the mock as an adapter providing the given interface\n         and adapting the given interface(s)\n         """\n@@ -89,12 +82,16 @@ def patch_global(self, orig, mock=None, **kw):\n         return mock\n \n \n-class Dummy(object):\n+class Dummy:\n     """Dummy object with arbitrary attributes"""\n \n     def __init__(self, **kw):\n         self.__dict__.update(kw)\n \n+    def contentIds(self):\n+        # testAddContentToContainer_preserves_existing_id fails without this.\n+        return []\n+\n \n class ItemDummy(Dummy):\n     """Dummy objects with title getter and setter"""\n@@ -117,6 +114,6 @@ def _global_replace(remove, install):\n     """Replace object \'remove\' with object \'install\' on all dictionaries."""\n     for referrer in gc.get_referrers(remove):\n         if type(referrer) is dict:\n-            for key, value in list(six.iteritems(referrer)):\n+            for key, value in list(referrer.items()):\n                 if value is remove:\n                     referrer[key] = install\ndiff --git a/plone/dexterity/tests/schemata.py b/plone/dexterity/tests/schemata.py\nindex d9ff6bed..13db211f 100644\n--- a/plone/dexterity/tests/schemata.py\n+++ b/plone/dexterity/tests/schemata.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.supermodel.interfaces import FILENAME_KEY\n from zope import schema\n from zope.interface import Interface\n@@ -7,9 +6,9 @@\n class ITestSchema(Interface):\n     """Schema used for testing"""\n \n-    title = schema.TextLine(title=u"Title", description=u"Administrative title")\n+    title = schema.TextLine(title="Title", description="Administrative title")\n \n-    description = schema.Text(title=u"Description", required=False)\n+    description = schema.Text(title="Description", required=False)\n \n \n class ITaggedValueSchema(Interface):\ndiff --git a/plone/dexterity/tests/test.xml b/plone/dexterity/tests/test.xml\nindex 21edb44c..8c31f84f 100644\n--- a/plone/dexterity/tests/test.xml\n+++ b/plone/dexterity/tests/test.xml\n@@ -1,13 +1,17 @@\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n-    <schema>\n-        <field name="title" type="zope.schema.TextLine">\n-            <title>Title</title>\n-            <description>Title used in listings</description>\n-            <required>True</required>\n-        </field>\n-        <field name="description" type="zope.schema.Text">\n-            <title>Description</title>\n-            <required>False</required>\n-        </field>\n-    </schema>\n+  <schema>\n+    <field name="title"\n+           type="zope.schema.TextLine"\n+    >\n+      <title>Title</title>\n+      <description>Title used in listings</description>\n+      <required>True</required>\n+    </field>\n+    <field name="description"\n+           type="zope.schema.Text"\n+    >\n+      <title>Description</title>\n+      <required>False</required>\n+    </field>\n+  </schema>\n </model>\ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex dcf32641..ee45d913 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.behavior.interfaces import IBehavior\n from plone.dexterity.behavior import DexterityBehaviorAssignable\n@@ -27,7 +26,7 @@ class TestBehavior(MockTestCase):\n     def test_supports(self):\n \n         # Context mock\n-        context_dummy = self.create_dummy(portal_type=u"testtype")\n+        context_dummy = self.create_dummy(portal_type="testtype")\n \n         # Behavior mock\n         behavior_dummy_1 = self.create_dummy(interface=IOne)\n@@ -36,9 +35,9 @@ def test_supports(self):\n         self.mock_utility(behavior_dummy_4, IBehavior, name=IFour.__identifier__)\n \n         # FTI mock\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.behaviors = [IOne.__identifier__, IFour.__identifier__]\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \n@@ -50,16 +49,16 @@ def test_supports(self):\n     def test_enumerate(self):\n \n         # Context mock\n-        context_dummy = self.create_dummy(portal_type=u"testtype")\n+        context_dummy = self.create_dummy(portal_type="testtype")\n \n         # Behavior mock\n         behavior_dummy = self.create_dummy()\n         self.mock_utility(behavior_dummy, IBehavior, name=IOne.__identifier__)\n \n         # FTI mock\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.behaviors = [IOne.__identifier__]\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 388586af..a7bab47d 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -1,9 +1,9 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from datetime import date\n from datetime import datetime\n from DateTime import DateTime\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.behavior.registration import BehaviorRegistration\n@@ -17,32 +17,20 @@\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.folder.default import DefaultOrdering\n from Products.CMFCore.interfaces import ITypesTool\n-from Products.CMFPlone.interfaces import IConstrainTypes\n-from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n from pytz import timezone\n+from unittest.mock import Mock\n+from unittest.mock import patch\n from zope.annotation.attribute import AttributeAnnotations\n from zope.component import getUtility\n from zope.component import provideAdapter\n+from zope.globalrequest import setRequest\n from zope.interface import alsoProvides\n from zope.interface import Interface\n-from zope.globalrequest import setRequest\n from zope.publisher.browser import TestRequest\n \n-import six\n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-try:\n-    from unittest.mock import patch\n-except ImportError:\n-    from mock import patch\n-\n-\n class TestContent(MockTestCase):\n     def setUp(self):\n         setRequest(TestRequest())\n@@ -51,7 +39,7 @@ def setUp(self):\n         provideAdapter(AttributeAnnotations)\n \n     def test_provided_by_item(self):\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -62,14 +50,14 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = Item(id=u"id")\n-        item.portal_type = u"testtype"\n+        item = Item(id="id")\n+        item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n@@ -77,7 +65,7 @@ class IMarker(Interface):\n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(Item))\n@@ -107,7 +95,7 @@ def test_provided_by_subclass(self):\n         class MyItem(Item):\n             pass\n \n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -118,22 +106,22 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -162,7 +150,7 @@ class MyItem(Item):\n             pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -171,16 +159,16 @@ class MyItem(Item):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -212,7 +200,7 @@ class IMarkerCustom(Interface):\n             pass\n \n         # Fake data manager\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -223,7 +211,7 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -232,8 +220,8 @@ def register(self, obj):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # Schema is not implemented by class or provided by instance\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -247,23 +235,23 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n+        behavior1 = BehaviorRegistration("Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n-            baz = zope.schema.TextLine(title=u"baz", default=u"baz")\n+            baz = zope.schema.TextLine(title="baz", default="baz")\n \n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n+        behavior2 = BehaviorRegistration("Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = ["behavior1", "behavior2"]\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         # start clean\n@@ -283,7 +271,7 @@ class IMarker2(Interface):\n         self.assertTrue(IMarker2.providedBy(item))\n \n         # Subtypes provide field defaults.\n-        self.assertEqual(u"baz", getattr(item, "baz", None))\n+        self.assertEqual("baz", getattr(item, "baz", None))\n \n         # We also need to ensure that the _v_ attribute doesn\'t hide any\n         # interface set directly on the instance with alsoProvides() or\n@@ -305,7 +293,7 @@ class MyItem(Item):\n             pass\n \n         # Fake data manager\n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -316,7 +304,7 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u"id")\n+        item = MyItem(id="id")\n         item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n@@ -325,8 +313,8 @@ def register(self, obj):\n \n         # Dummy schema\n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # Schema is not implemented by class or provided by instance\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -336,7 +324,7 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n+        behavior1 = BehaviorRegistration("Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n@@ -345,7 +333,7 @@ class IBehavior2(Interface):\n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n+        behavior2 = BehaviorRegistration("Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         class IBehavior3(Interface):\n@@ -354,7 +342,7 @@ class IBehavior3(Interface):\n         class IMarker3(Interface):\n             pass\n \n-        behavior3 = BehaviorRegistration(u"Behavior3", "", IBehavior3, IMarker3, None)\n+        behavior3 = BehaviorRegistration("Behavior3", "", IBehavior3, IMarker3, None)\n         self.mock_utility(behavior3, IBehavior, name="behavior3")\n \n         self.mock_adapter(\n@@ -362,9 +350,9 @@ class IMarker3(Interface):\n         )\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         # start clean\n@@ -408,102 +396,102 @@ class IMarker3(Interface):\n     def test_getattr_consults_schema_item(self):\n \n         content = Item()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_container(self):\n \n         content = Container()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_item_default_factory_with_context(self):\n \n         content = Item()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         from zope.interface import provider\n         from zope.schema.interfaces import IContextAwareDefaultFactory\n \n         @provider(IContextAwareDefaultFactory)\n         def defaultFactory(context):\n-            return u"{0:s}_{1:s}".format(context.id, context.portal_type)\n+            return f"{context.id:s}_{context.portal_type:s}"\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", defaultFactory=defaultFactory)\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", defaultFactory=defaultFactory)\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n-        self.assertEqual(u"id_testtype", content.foo)\n+        self.assertEqual("id_testtype", content.foo)\n         self.assertEqual(None, content.bar)\n-        self.assertEqual(u"id", content.id)\n+        self.assertEqual("id", content.id)\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_on_container_returns_children(self):\n \n         content = Container()\n-        content.id = u"id"\n-        content.portal_type = u"testtype"\n+        content.id = "id"\n+        content.portal_type = "testtype"\n \n         content["foo"] = Item("foo")\n         content["quux"] = Item("quux")\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n-            bar = zope.schema.TextLine(title=u"bar")\n+            foo = zope.schema.TextLine(title="foo", default="foo_default")\n+            bar = zope.schema.TextLine(title="bar")\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n         SCHEMA_CACHE.invalidate("testtype")\n \n         # Schema field masks contained item\n-        self.assertEqual(u"foo_default", content.foo)\n+        self.assertEqual("foo_default", content.foo)\n \n         # But we can still obtain an item\n         self.assertTrue(isinstance(content["foo"], Item))\n@@ -545,40 +533,32 @@ def test_name_and_id_in_sync(self):\n         i = Item()\n         self.assertEqual("", i.id)\n         self.assertEqual("", i.getId())\n-        self.assertEqual(u"", i.__name__)\n+        self.assertEqual("", i.__name__)\n \n         i = Item()\n         i.id = "foo"\n         self.assertEqual("foo", i.id)\n         self.assertEqual("foo", i.getId())\n-        self.assertEqual(u"foo", i.__name__)\n+        self.assertEqual("foo", i.__name__)\n \n         i = Item()\n-        i.__name__ = u"foo"\n+        i.__name__ = "foo"\n         self.assertEqual("foo", i.id)\n         self.assertEqual("foo", i.getId())\n-        self.assertEqual(u"foo", i.__name__)\n+        self.assertEqual("foo", i.__name__)\n \n     def test_name_unicode_id_str(self):\n \n         i = Item()\n-        if six.PY2:\n-            try:\n-                i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n-            except UnicodeEncodeError:\n-                pass\n-            else:\n-                self.fail()\n-        else:\n-            i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n+        i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \n-        i.__name__ = u"o"\n+        i.__name__ = "o"\n \n-        self.assertEqual(u"o", i.__name__)\n+        self.assertEqual("o", i.__name__)\n         self.assertEqual("o", i.id)\n         self.assertEqual("o", i.getId())\n \n-        self.assertTrue(isinstance(i.__name__, six.text_type))\n+        self.assertTrue(isinstance(i.__name__, str))\n         self.assertTrue(isinstance(i.id, str))\n         self.assertTrue(isinstance(i.getId(), str))\n \n@@ -593,10 +573,10 @@ def test_item_dublincore(self):\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date="08/20/2010",\n             expiration_date="07/09/2013",\n             format="text/plain",\n@@ -605,13 +585,13 @@ def test_item_dublincore(self):\n         )\n \n         summer_timezone = i.effective_date.timezone()\n-        self.assertEqual(i.title, u"Emperor Penguin")\n+        self.assertEqual(i.title, "Emperor Penguin")\n         self.assertEqual(i.Title(), "Emperor Penguin")\n-        self.assertEqual(i.description, u"One of the most magnificent birds.")\n+        self.assertEqual(i.description, "One of the most magnificent birds.")\n         self.assertEqual(i.Description(), "One of the most magnificent birds.")\n-        self.assertEqual(i.subject, (u"Penguins",))\n+        self.assertEqual(i.subject, ("Penguins",))\n         self.assertEqual(i.Subject(), ("Penguins",))\n-        self.assertEqual(i.contributors, (u"admin",))\n+        self.assertEqual(i.contributors, ("admin",))\n         self.assertEqual(i.listContributors(), ("admin",))\n         self.assertEqual(i.Contributors(), ("admin",))\n         self.assertEqual(i.format, "text/plain")\n@@ -649,10 +629,10 @@ def test_item_dublincore_date(self):\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date=date(2010, 8, 20),\n             expiration_date=date(2013, 7, 9),\n             format="text/plain",\n@@ -689,10 +669,10 @@ def test_item_dublincore_datetime(self):\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n         i = Item(\n-            title=u"Emperor Penguin",\n-            description=u"One of the most magnificent birds.",\n-            subject=u"Penguins",\n-            contributors=u"admin",\n+            title="Emperor Penguin",\n+            description="One of the most magnificent birds.",\n+            subject="Penguins",\n+            contributors="admin",\n             effective_date=datetime(2010, 8, 20, 12, 59, 59, 0, timezone("US/Eastern")),\n             expiration_date=datetime(2013, 7, 9, 12, 59, 59, 0, timezone("US/Eastern")),\n             format="text/plain",\n@@ -739,16 +719,16 @@ def mock_addCreator():\n \n     def test_item_addCreator(self):\n         i = Item()\n-        i.addCreator(u"harvey")\n-        self.assertEqual(i.creators, (u"harvey",))\n-        self.assertEqual(i.listCreators(), (u"harvey",))\n+        i.addCreator("harvey")\n+        self.assertEqual(i.creators, ("harvey",))\n+        self.assertEqual(i.listCreators(), ("harvey",))\n         self.assertEqual(i.Creator(), "harvey")\n \n     def test_item_Type(self):\n         i = Item()\n \n         def mock_getTypeInfo():\n-            class TypeInfo(object):\n+            class TypeInfo:\n                 def Title(self):\n                     return "Foo"\n \n@@ -765,8 +745,8 @@ def test_item_init_nondc_kwargs(self):\n     def test_container_init_dublincore(self):\n         from DateTime.DateTime import DateTime\n \n-        c = Container(title=u"Test title", language="en", effective_date="2010-08-20")\n-        self.assertEqual(c.title, u"Test title")\n+        c = Container(title="Test title", language="en", effective_date="2010-08-20")\n+        self.assertEqual(c.title, "Test title")\n         self.assertEqual(c.language, "en")\n         self.assertTrue(isinstance(c.effective_date, DateTime))\n \n@@ -778,23 +758,23 @@ def test_setTitle_converts_to_unicode(self):\n         # fix http://code.google.com/p/dexterity/issues/detail?id=145\n         i = Item()\n         i.setTitle("\xc3\xa9")\n-        self.assertEqual(i.title, u"\xc3\xa9")\n-        i.setTitle(u"\xc3\xa9")\n-        self.assertEqual(i.title, u"\xc3\xa9")\n+        self.assertEqual(i.title, "\xc3\xa9")\n+        i.setTitle("\xc3\xa9")\n+        self.assertEqual(i.title, "\xc3\xa9")\n         c = Container()\n         c.setTitle("\xc3\xa9")\n-        self.assertEqual(c.title, u"\xc3\xa9")\n-        c.setTitle(u"\xc3\xa9")\n-        self.assertEqual(c.title, u"\xc3\xa9")\n+        self.assertEqual(c.title, "\xc3\xa9")\n+        c.setTitle("\xc3\xa9")\n+        self.assertEqual(c.title, "\xc3\xa9")\n \n     def test_Title_converts_to_utf8(self):\n         i = Item()\n-        i.title = u"\xc3\xa9"\n+        i.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Title())\n         i.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Title())\n         c = Container()\n-        c.title = u"\xc3\xa9"\n+        c.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Title())\n         c.title = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Title())\n@@ -807,14 +787,14 @@ def test_Title_handles_None(self):\n \n     def test_Creator_converts_to_utf8(self):\n         i = Item()\n-        i.creators = (u"\xc3\xa9",)\n+        i.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", i.Creator())\n         i.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", i.Creator())\n         c = Container()\n-        c.creators = (u"\xc3\xa9",)\n+        c.creators = ("\xc3\xa9",)\n         self.assertEqual("\xc3\xa9", c.Creator())\n-        self.assertEqual((u"\xc3\xa9",), c.creators)\n+        self.assertEqual(("\xc3\xa9",), c.creators)\n \n     def test_Creator_handles_None(self):\n         i = Item(creators=None)\n@@ -824,12 +804,12 @@ def test_Creator_handles_None(self):\n \n     def test_Description_converts_to_utf8(self):\n         i = Item()\n-        i.description = u"\xc3\xa9"\n+        i.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Description())\n         i.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", i.Description())\n         c = Container()\n-        c.description = u"\xc3\xa9"\n+        c.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Description())\n         c.description = "\xc3\xa9"\n         self.assertEqual("\xc3\xa9", c.Description())\n@@ -837,14 +817,14 @@ def test_Description_converts_to_utf8(self):\n     def test_setDescription_converts_to_unicode(self):\n         i = Item()\n         i.setDescription("\xc3\xa9")\n-        self.assertEqual(i.description, u"\xc3\xa9")\n-        i.setDescription(u"\xc3\xa9")\n-        self.assertEqual(i.description, u"\xc3\xa9")\n+        self.assertEqual(i.description, "\xc3\xa9")\n+        i.setDescription("\xc3\xa9")\n+        self.assertEqual(i.description, "\xc3\xa9")\n         c = Container()\n         c.setDescription("\xc3\xa9")\n-        self.assertEqual(c.description, u"\xc3\xa9")\n-        c.setDescription(u"\xc3\xa9")\n-        self.assertEqual(c.description, u"\xc3\xa9")\n+        self.assertEqual(c.description, "\xc3\xa9")\n+        c.setDescription("\xc3\xa9")\n+        self.assertEqual(c.description, "\xc3\xa9")\n \n     def test_Description_handles_None(self):\n         i = Item(description=None)\n@@ -854,17 +834,17 @@ def test_Description_handles_None(self):\n \n     def test_Description_removes_newlines(self):\n         i = Item()\n-        i.description = u"foo\\r\\nbar\\nbaz\\r"\n+        i.description = "foo\\r\\nbar\\nbaz\\r"\n         self.assertEqual("foo bar baz ", i.Description())\n \n     def test_Subject_converts_to_utf8(self):\n         i = Item()\n-        i.subject = (u"\xc3\xa9",)\n+        i.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), i.Subject())\n         i.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), i.Subject())\n         c = Container()\n-        c.subject = (u"\xc3\xa9",)\n+        c.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), c.Subject())\n         c.subject = ("\xc3\xa9",)\n         self.assertEqual(("\xc3\xa9",), c.Subject())\n@@ -872,14 +852,14 @@ def test_Subject_converts_to_utf8(self):\n     def test_setSubject_converts_to_unicode(self):\n         i = Item()\n         i.setSubject(("\xc3\xa9",))\n-        self.assertEqual(i.subject, (u"\xc3\xa9",))\n-        i.setSubject((u"\xc3\xa9",))\n-        self.assertEqual(i.subject, (u"\xc3\xa9",))\n+        self.assertEqual(i.subject, ("\xc3\xa9",))\n+        i.setSubject(("\xc3\xa9",))\n+        self.assertEqual(i.subject, ("\xc3\xa9",))\n         c = Container()\n         c.setSubject(("\xc3\xa9",))\n-        self.assertEqual(c.subject, (u"\xc3\xa9",))\n-        c.setSubject((u"\xc3\xa9",))\n-        self.assertEqual(c.subject, (u"\xc3\xa9",))\n+        self.assertEqual(c.subject, ("\xc3\xa9",))\n+        c.setSubject(("\xc3\xa9",))\n+        self.assertEqual(c.subject, ("\xc3\xa9",))\n \n     def test_Subject_handles_None(self):\n         i = Item()\n@@ -893,7 +873,7 @@ def test_field_default_independence(self):\n         # Ensure that fields using the default value aren\'t being assigned\n         # shallow copies.\n \n-        class FauxDataManager(object):\n+        class FauxDataManager:\n             def setstate(self, obj):\n                 pass\n \n@@ -904,26 +884,26 @@ def register(self, obj):\n                 pass\n \n         # Dummy instances\n-        foo = Item(id=u"foo")\n+        foo = Item(id="foo")\n         foo.portal_type = "testtype"\n         foo._p_jar = FauxDataManager()\n \n-        bar = Item(id=u"bar")\n+        bar = Item(id="bar")\n         bar.portal_type = "testtype"\n         bar._p_jar = FauxDataManager()\n \n-        baz = Container(id=u"baz")\n+        baz = Container(id="baz")\n         baz.portal_type = "testtype"\n         baz._p_jar = FauxDataManager()\n \n         # Dummy schema\n         class ISchema(Interface):\n-            listfield = zope.schema.List(title=u"listfield", default=[1, 2])\n+            listfield = zope.schema.List(title="listfield", default=[1, 2])\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Ensure that the field of foo is not the same field, also attached to\n         # bar.\n@@ -962,25 +942,25 @@ def test_container_manage_delObjects(self):\n         item.__class__.__ac_permissions__ = perms_before\n \n     def test_iconstraintypes_adapter(self):\n-        class DummyConstrainTypes(object):\n+        class DummyConstrainTypes:\n             def __init__(self, context):\n                 self.context = context\n \n             def allowedContentTypes(self):\n-                fti = getUtility(IDexterityFTI, name=u"testtype")\n+                fti = getUtility(IDexterityFTI, name="testtype")\n                 return [fti]\n \n         self.mock_adapter(DummyConstrainTypes, IConstrainTypes, (IDexterityContainer,))\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         folder = Container(id="testfolder")\n \n         self.assertEqual(folder.allowedContentTypes(), [fti_mock])\n         self.assertRaises(\n-            ValueError, folder.invokeFactory, u"disallowed_type", id="test"\n+            ValueError, folder.invokeFactory, "disallowed_type", id="test"\n         )\n \n     def test_verifyObjectPaste_paste_without_portal_type(self):\n@@ -1122,13 +1102,13 @@ class ITestBehavior(Interface):\n             DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITest)\n         fti_mock.behaviors = ["test_behavior"]\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         behavior_reg = BehaviorRegistration(\n-            u"Test Behavior", "", ITestBehavior, ITestBehavior, None\n+            "Test Behavior", "", ITestBehavior, ITestBehavior, None\n         )\n         self.mock_utility(behavior_reg, IBehavior, name="test_behavior")\n \ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex 9291798d..b095769b 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from plone.testing.zca import UNIT_TESTING\n \n import unittest\ndiff --git a/plone/dexterity/tests/test_exportimport.py b/plone/dexterity/tests/test_exportimport.py\nindex 97cd983d..78f6fbe1 100644\n--- a/plone/dexterity/tests/test_exportimport.py\n+++ b/plone/dexterity/tests/test_exportimport.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n import unittest\n \n \ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex df356903..2db96df9 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -1,17 +1,11 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n+from unittest.mock import Mock\n from zope.interface import Interface\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class IDummy(Interface):\n     pass\n \n@@ -19,27 +13,27 @@ class IDummy(Interface):\n class TestFactory(MockTestCase):\n     def test_title(self):\n         fti_mock = Mock(spec=DexterityFTI, title="Mock type")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual("Mock type", factory.title)\n \n     def test_description(self):\n         fti_mock = Mock(spec=DexterityFTI, description="Mock type description")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual("Mock type description", factory.description)\n \n     def test_get_interfaces(self):\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupSchema = Mock(return_value=IDummy)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         spec = factory.getInterfaces()\n \n-        self.assertEqual(u"testtype", spec.__name__)\n+        self.assertEqual("testtype", spec.__name__)\n         self.assertEqual([IDummy, Interface], list(spec.flattened()))\n \n     # We expect the following when creating an object from the factory:\n@@ -52,7 +46,7 @@ def test_get_interfaces(self):\n     def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -64,9 +58,9 @@ def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # FTI\n         fti_mock = Mock(spec=DexterityFTI, klass="my.mocked.ContentTypeClass")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n \n     def test_create_sets_portal_type_if_not_set(self):\n@@ -85,11 +79,11 @@ def test_create_sets_portal_type_if_not_set(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u"testtype")\n+        self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_sets_portal_type_if_wrong(self):\n \n@@ -107,16 +101,16 @@ def test_create_sets_portal_type_if_wrong(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u"testtype")\n+        self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_initialises_schema_if_not_provided(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -129,15 +123,15 @@ def test_create_initialises_schema_if_not_provided(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n+        factory = DexterityFactory(portal_type="testtype")\n         self.assertEqual(obj_mock, factory())\n \n     def test_factory_passes_args_and_kwargs(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u"testtype")\n+        obj_mock = Mock(portal_type="testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n@@ -150,8 +144,8 @@ def test_factory_passes_args_and_kwargs(self):\n         # FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.klass = "my.mocked.ContentTypeClass"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        factory = DexterityFactory(portal_type=u"testtype")\n-        self.assertEqual(obj_mock, factory(u"id", title=u"title"))\n-        klass_mock.assert_called_once_with(u"id", title=u"title")\n+        factory = DexterityFactory(portal_type="testtype")\n+        self.assertEqual(obj_mock, factory("id", title="title"))\n+        klass_mock.assert_called_once_with("id", title="title")\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex da1e61f0..dffa9e22 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,6 +1,4 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from plone.dexterity import utils\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.fti import DexterityFTIModificationDescription\n@@ -14,6 +12,7 @@\n from plone.dexterity.tests.schemata import ITestSchema\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n+from unittest.mock import Mock\n from zope.component import getGlobalSiteManager\n from zope.component import queryUtility\n from zope.component.hooks import setHooks\n@@ -33,17 +32,11 @@\n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n-class TestClass(object):\n+class TestClass:\n     meta_type = "Test Class"\n \n \n-class TestClass2(object):\n+class TestClass2:\n     meta_type = "Test Class 2"\n \n \n@@ -51,28 +44,34 @@ class ITestInterface(Interface):\n     pass\n \n \n+class DexterityMtimeFTI(DexterityFTI):\n+    # It was necessary to overwrite the _p_mtime attribute, as it is originally\n+    # read-only.\n+    _p_mtime = None\n+\n+\n class TestFTI(MockTestCase):\n     def test_factory_name_is_fti_id(self):\n-        fti = DexterityFTI(u"testtype")\n-        self.assertEqual(u"testtype", fti.getId())\n-        self.assertEqual(u"testtype", fti.factory)\n+        fti = DexterityFTI("testtype")\n+        self.assertEqual("testtype", fti.getId())\n+        self.assertEqual("testtype", fti.factory)\n \n     def test_hasDynamicSchema(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"dummy.schema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "dummy.schema"\n         self.assertEqual(False, fti.hasDynamicSchema)\n         fti.schema = None\n         self.assertEqual(True, fti.hasDynamicSchema)\n \n     def test_lookupSchema_with_concrete_schema(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n         # second time uses _v attribute\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n \n     def test_lookupSchema_with_dynamic_schema(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None  # use dynamic schema\n \n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n@@ -90,7 +89,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         """Tests the case where a dexterity type is not removed cleanly\n         from the fti, but the code has been removed.\n         """\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = "model.wont.be.imported"\n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n@@ -100,7 +99,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         delattr(plone.dexterity.schema.generated, schemaName)\n \n     def test_lookupModel_from_string(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = "<model />"\n         fti.model_file = None\n@@ -116,10 +115,10 @@ def test_lookupModel_from_string(self):\n \n     def test_lookupModel_from_file_with_package(self):\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n-        fti.model_file = u"plone.dexterity.tests:test.xml"\n+        fti.model_file = "plone.dexterity.tests:test.xml"\n \n         model_dummy = Model()\n \n@@ -135,9 +134,7 @@ def test_lookupModel_from_file_with_package(self):\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n-        loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity"\n-        )\n+        loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_absolute_path(self):\n \n@@ -147,7 +144,7 @@ def test_lookupModel_from_file_with_absolute_path(self):\n             os.path.split(plone.dexterity.tests.__file__)[0], "test.xml"\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = abs_file\n@@ -160,13 +157,11 @@ def test_lookupModel_from_file_with_absolute_path(self):\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n-        loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity"\n-        )\n+        loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_win32_absolute_path(self):\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = r"C:\\models\\testmodel.xml"\n@@ -186,12 +181,12 @@ def test_lookupModel_from_file_with_win32_absolute_path(self):\n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            fti.model_file, reload=True, policy=u"dexterity"\n+            fti.model_file, reload=True, policy="dexterity"\n         )\n \n     def test_lookupModel_with_schema_only(self):\n-        fti = DexterityFTI(u"testtype")\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti = DexterityFTI("testtype")\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         fti.model_source = None\n         fti.model_file = None\n \n@@ -200,9 +195,9 @@ def test_lookupModel_with_schema_only(self):\n         self.assertEqual(ITestSchema, model.schema)\n \n     def test_lookupModel_from_string_with_schema(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         # effectively ignored:\n-        fti.schema = u"plone.dexterity.tests.schemata.ITestSchema"\n+        fti.schema = "plone.dexterity.tests.schemata.ITestSchema"\n         fti.model_source = "<model />"\n         fti.model_file = None\n \n@@ -215,10 +210,10 @@ def test_lookupModel_from_string_with_schema(self):\n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         self.assertIs(ITestSchema, fti.lookupSchema())\n-        loadString_mock.assert_called_once_with(fti.model_source, policy=u"dexterity")\n+        loadString_mock.assert_called_once_with(fti.model_source, policy="dexterity")\n \n     def test_lookupModel_failure(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n         fti.model_file = None\n@@ -226,9 +221,9 @@ def test_lookupModel_failure(self):\n         self.assertRaises(ValueError, fti.lookupModel)\n \n     def test_fires_modified_event_on_update_property_if_changed(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n \n-        fti.title = u"Old title"\n+        fti.title = "Old title"\n         fti.global_allow = False\n \n         from zope.event import notify\n@@ -245,7 +240,7 @@ def test_fires_modified_event_on_update_property_if_changed(self):\n         self.assertEqual(event.descriptions[0].oldValue, "Old title")\n \n     def test_fires_modified_event_on_change_props_per_changed_property(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.title = "Old title"\n         fti.allow_discussion = False\n         fti.global_allow = True\n@@ -261,7 +256,7 @@ def test_fires_modified_event_on_change_props_per_changed_property(self):\n         self.assertEqual(len(notify_mock.call_args_list), 2)\n \n     def test_checks_permission_in_is_construction_allowed_true(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"\n         container_dummy = self.create_dummy()\n \n@@ -269,7 +264,7 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         permission_dummy.id = "demo.Permission"\n         permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n+        self.mock_utility(permission_dummy, IPermission, name="demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=True)\n@@ -283,7 +278,7 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         )\n \n     def test_checks_permission_in_is_construction_allowed_false(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"\n         container_dummy = self.create_dummy()\n \n@@ -291,7 +286,7 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         permission_dummy.id = "demo.Permission"\n         permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n+        self.mock_utility(permission_dummy, IPermission, name="demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=False)\n@@ -305,28 +300,28 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         )\n \n     def test_no_permission_utility_means_no_construction(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = "demo.Permission"  # not an IPermission utility\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n     def test_no_permission_means_no_construction(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.add_permission = None\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n     def test_add_view_url_set_on_creation(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         self.assertEqual("string:${folder_url}/++add++testtype", fti.add_view_expr)\n \n     def test_factory_set_on_creation(self):\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         self.assertEqual("testtype", fti.factory)\n \n     def test_addview_and_factory_not_overridden_on_creation(self):\n         fti = DexterityFTI(\n-            u"testtype",\n+            "testtype",\n             add_view_expr="string:${folder_url}/@@my-addview",\n             factory="my.factory",\n         )\n@@ -334,20 +329,16 @@ def test_addview_and_factory_not_overridden_on_creation(self):\n         self.assertEqual("my.factory", fti.factory)\n \n     def test_meta_type(self):\n-        fti = DexterityFTI(\n-            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n+        fti = DexterityFTI("testtype", klass="plone.dexterity.tests.test_fti.TestClass")\n         self.assertEqual(TestClass.meta_type, fti.Metatype())\n \n     def test_meta_type_change_class(self):\n-        fti = DexterityFTI(\n-            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n+        fti = DexterityFTI("testtype", klass="plone.dexterity.tests.test_fti.TestClass")\n         fti._updateProperty("klass", "plone.dexterity.tests.test_fti.TestClass2")\n         self.assertEqual(TestClass2.meta_type, fti.Metatype())\n \n     def test_title_i18n(self):\n-        fti = DexterityFTI(u"testtype", title=b"t\\xc3\\xa9st")\n+        fti = DexterityFTI("testtype", title=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n         self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Title())\n@@ -355,11 +346,11 @@ def test_title_i18n(self):\n         # with an i18n domain, we get a Message\n         fti.i18n_domain = "test"\n         msgid = fti.Title()\n-        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("t\\xe9st", msgid)\n         self.assertEqual("test", msgid.domain)\n \n     def test_description_i18n(self):\n-        fti = DexterityFTI(u"testtype", description=b"t\\xc3\\xa9st")\n+        fti = DexterityFTI("testtype", description=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n         self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Description())\n@@ -367,7 +358,7 @@ def test_description_i18n(self):\n         # with an i18n domain, we get a Message\n         fti.i18n_domain = "test"\n         msgid = fti.Description()\n-        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("t\\xe9st", msgid)\n         self.assertEqual("test", msgid.domain)\n \n     def test_lookupModel_without_schema_policy(self):\n@@ -375,10 +366,10 @@ def test_lookupModel_without_schema_policy(self):\n         gsm.registerUtility(\n             DexteritySchemaPolicy(),\n             plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"dexterity",\n+            name="dexterity",\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = (\n             \'<model xmlns="http://namespaces.plone.org/\'\n@@ -397,17 +388,17 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name="test"\n         )\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = (\n             \'<model xmlns="http://namespaces.plone.org/\'\n             \'supermodel/schema"><schema/></model>\'\n         )\n         fti.model_file = None\n-        fti.schema_policy = u"test"\n+        fti.schema_policy = "test"\n \n         model = fti.lookupModel()\n         self.assertEqual(True, ITestInterface in model.schemata[""].__bases__)\n@@ -421,7 +412,7 @@ class TestFTIEvents(MockTestCase):\n     # components really do get added/removed (using passthrough).\n \n     def test_components_registered_on_add(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -456,7 +447,7 @@ def test_components_registered_on_add(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_not_registered_on_add_if_exist(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -484,7 +475,7 @@ def test_components_not_registered_on_add_if_exist(self):\n         self.assertFalse(site_manager_mock.registerUtility.called)\n \n     def test_components_unregistered_on_delete(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -515,7 +506,7 @@ def test_components_unregistered_on_delete(self):\n     def test_components_unregistered_on_delete_does_not_error_with_no_components(\n         self,\n     ):  # noqa\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -540,7 +531,7 @@ def test_components_unregistered_on_delete_does_not_error_with_no_components(\n         )\n \n     def test_global_components_not_unregistered_on_delete(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -574,7 +565,7 @@ def test_global_components_not_unregistered_on_delete(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_reregistered_on_rename(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n \n@@ -594,7 +585,7 @@ def test_components_reregistered_on_rename(self):\n         ftiRenamed(\n             fti,\n             ObjectMovedEvent(\n-                fti, container_dummy, fti.getId(), container_dummy, u"newtype"\n+                fti, container_dummy, fti.getId(), container_dummy, "newtype"\n             ),\n         )\n \n@@ -614,13 +605,13 @@ def test_components_reregistered_on_rename(self):\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_dynamic_schema_refreshed_on_modify_model_file(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -644,16 +635,16 @@ class IBlank1(Interface):\n         )\n \n         self.assertTrue("title" in IBlank1)\n-        self.assertTrue(IBlank1["title"].title == u"title")\n+        self.assertTrue(IBlank1["title"].title == "title")\n \n     def test_dynamic_schema_refreshed_on_modify_model_source(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n \n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n@@ -680,14 +671,14 @@ class IBlank2(Interface):\n         )\n \n         self.assertTrue("title" in IBlank2)\n-        self.assertTrue(IBlank2["title"].title == u"title")\n+        self.assertTrue(IBlank2["title"].title == "title")\n \n     def test_dynamic_schema_refreshed_on_modify_schema_policy(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n         class IBlank3(Interface):\n             pass\n@@ -699,7 +690,7 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name="test"\n         )\n \n         site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n@@ -727,16 +718,16 @@ def bases(self, schemaName, tree):\n         self.assertIn(INew, updated.__bases__)\n \n     def test_concrete_schema_not_refreshed_on_modify_schema(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         class IBlank4(Interface):\n             pass\n \n         class INew(Interface):\n-            title = zope.schema.TextLine(title=u"title")\n+            title = zope.schema.TextLine(title="title")\n \n-        model_dummy = Model({u"": INew})\n+        model_dummy = Model({"": INew})\n         fti.lookupModel = Mock(return_value=model_dummy)\n \n         site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n@@ -760,7 +751,7 @@ class INew(Interface):\n         self.assertFalse("title" in IBlank4)\n \n     def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -801,7 +792,7 @@ def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         )\n \n     def test_new_factory_not_registered_after_name_changed_if_exists(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -830,7 +821,7 @@ def test_new_factory_not_registered_after_name_changed_if_exists(self):\n         self.assertFalse(site_manager_mock.registerUtility.called)\n \n     def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -869,9 +860,9 @@ def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n         )\n \n     def test_renamed_factory_not_unregistered_if_not_unique(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type, factory="common-factory")\n-        portal_type2 = u"testtype2"\n+        portal_type2 = "testtype2"\n         fti2 = DexterityFTI(portal_type2, factory="common-factory")\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -925,9 +916,9 @@ def test_renamed_factory_not_unregistered_if_not_unique(self):\n         )\n \n     def test_deleted_factory_not_unregistered_if_not_unique(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type, factory="common-factory")\n-        portal_type2 = u"testtype2"\n+        portal_type2 = "testtype2"\n         fti2 = DexterityFTI(portal_type2, factory="common-factory")\n         container_dummy = self.create_dummy()\n \n@@ -966,5 +957,62 @@ def test_deleted_factory_not_unregistered_if_not_unique(self):\n         # We shouldn\'t remove this since fti2 still uses it\n         # The type itself should be removed though\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IDexterityFTI, name=u"testtype"\n+            provided=IDexterityFTI, name="testtype"\n+        )\n+\n+    def test_loockup_schema_with_p_mtime_roundable(self):\n+        fti = DexterityMtimeFTI("testtype")\n+        fti.schema = None  # use dynamic schema\n+        # Set a roundable _p_mtime\n+        fti._p_mtime = 1637689348.9999528\n+\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n+        self.mock_utility(portal, ISiteRoot)\n+\n+        # Generated schema name must be this.\n+        schemaName = "site_5_1637689348_2_9999528_0_testtype"\n+        setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n+\n+        self.assertEqual(ITestSchema, fti.lookupSchema())\n+\n+        # cleanup\n+        delattr(plone.dexterity.schema.generated, schemaName)\n+\n+    def test_fti_modified_with_p_mtime_roundable(self):\n+        portal_type = "testtype"\n+        fti = DexterityMtimeFTI(portal_type)\n+        # Set a roundable _p_mtime\n+        fti._p_mtime = 1637689348.9999528\n+\n+        class INew(Interface):\n+            title = zope.schema.TextLine(title="title")\n+\n+        model_dummy = Model({"": INew})\n+\n+        fti.lookupModel = Mock(return_value=model_dummy)\n+        self.create_dummy()\n+\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n+        self.mock_utility(site_dummy, ISiteRoot)\n+\n+        class IBlank1(Interface):\n+            pass\n+\n+        # Set source interface\n+        # Generated schema name must be this.\n+        schemaName = "siteid_5_1637689348_2_9999528_0_testtype"\n+        setattr(plone.dexterity.schema.generated, schemaName, IBlank1)\n+\n+        # Sync this with schema\n+        ftiModified(\n+            fti,\n+            ObjectModifiedEvent(\n+                fti, DexterityFTIModificationDescription("model_file", "")\n+            ),\n         )\n+\n+        self.assertTrue("title" in IBlank1)\n+        self.assertTrue(IBlank1["title"].title == "title")\n+\n+        # cleanup\n+        delattr(plone.dexterity.schema.generated, schemaName)\ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex 403e038d..b3c10b1d 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -1,21 +1,15 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.primary import PrimaryFieldInfo\n from plone.rfc822.interfaces import IPrimaryField\n+from unittest.mock import Mock\n from zope import schema\n from zope.interface import alsoProvides\n from zope.interface import Interface\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class PrimaryFieldInfoTestCase(MockTestCase):\n     def test_primary_field_info(self):\n         class ITest(Interface):\n@@ -24,14 +18,14 @@ class ITest(Interface):\n \n         alsoProvides(ITest["body"], IPrimaryField)\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(return_value=ITest)\n         fti.behaviors = []\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         item = Item("item")\n         item.portal_type = "testtype"\n-        item.body = u"body text"\n+        item.body = "body text"\n \n         info = PrimaryFieldInfo(item)\n         assert info.fieldname == "body"\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex 35e90e97..c0c6cb00 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import schema\n from plone.dexterity.fti import DexterityFTI\n@@ -9,18 +8,13 @@\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n+from unittest.mock import Mock\n from zope.interface import Interface\n from zope.interface.interface import InterfaceClass\n \n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class TestSchemaModuleFactory(MockTestCase):\n     def test_transient_schema(self):\n \n@@ -40,14 +34,14 @@ def test_concrete_default_schema(self):\n \n         # Mock schema model\n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n-        mock_model = Model({u"": IDummy})\n+        mock_model = Model({"": IDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n@@ -65,22 +59,22 @@ def test_named_schema(self):\n \n         # Mock schema model\n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n         class INamedDummy(Interface):\n-            named = zope.schema.TextLine(title=u"Named")\n+            named = zope.schema.TextLine(title="Named")\n \n-        mock_model = Model({u"": IDummy, u"named": INamedDummy})\n+        mock_model = Model({"": IDummy, "named": INamedDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n         schemaName = schema.portalTypeToSchemaName(\n-            "testtype", schema=u"named", prefix="site"\n+            "testtype", schema="named", prefix="site"\n         )\n         klass = factory(schemaName, schema.generated)\n \n@@ -122,13 +116,13 @@ def test_transient_schema_made_concrete(self):\n         # Now register a mock FTI and try again\n \n         class IDummy(Interface):\n-            dummy = zope.schema.TextLine(title=u"Dummy")\n+            dummy = zope.schema.TextLine(title="Dummy")\n \n-        mock_model = Model({u"": IDummy})\n+        mock_model = Model({"": IDummy})\n \n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         klass = factory(schemaName, schema.generated)\n \n@@ -197,7 +191,7 @@ def test_splitSchemaName(self):\n         )\n \n     def test_invalidate_cache(self):\n-        portal_type = u"testtype"\n+        portal_type = "testtype"\n         fti = DexterityFTI(portal_type)\n         SCHEMA_CACHE.get(portal_type)\n         SCHEMA_CACHE.behavior_schema_interfaces(fti)\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 9f054326..e4663005 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,22 +1,13 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n-from zope.interface import Interface\n+from unittest.mock import Mock\n+from unittest.mock import patch\n from zope.globalrequest import setRequest\n+from zope.interface import Interface\n from zope.publisher.browser import TestRequest\n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-try:\n-    from unittest.mock import patch\n-except ImportError:\n-    from mock import patch\n-\n \n class TestSchemaCache(MockTestCase):\n     def setUp(self):\n@@ -27,19 +18,19 @@ def test_repeated_get_lookup(self):\n         class ISchema(Interface):\n             pass\n \n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is schema2 is ISchema)\n \n     def test_repeated_behavior_registration_lookup(self):\n \n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         # Mock a test behavior\n         class ITestBehavior(Interface):\n@@ -49,8 +40,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=Interface,\n             marker=ITestBehavior,\n             factory=None,\n@@ -59,19 +50,19 @@ class ITestBehavior(Interface):\n \n         self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n \n-        r1 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n-        r2 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n+        r1 = SCHEMA_CACHE.behavior_registrations("testtype")\n+        r2 = SCHEMA_CACHE.behavior_registrations("testtype")\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n     def test_unexistent_behaviors_lookup(self):\n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n         # Set an unregistered behavior\n         fti.behaviors = ["foo.bar"]\n \n         with patch("warnings.warn") as mock_warnings:\n-            SCHEMA_CACHE.behavior_registrations(u"testtype")\n+            SCHEMA_CACHE.behavior_registrations("testtype")\n             # Verify the warning has been issued\n             mock_warnings.assert_called_once_with(\n                 (\n@@ -84,8 +75,8 @@ def test_unexistent_behaviors_lookup(self):\n \n     def test_repeated_subtypes_lookup(self):\n \n-        fti = DexterityFTI(u"testtype")\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        fti = DexterityFTI("testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         # Mock a test behavior\n         class ITestSchema(Interface):\n@@ -98,8 +89,8 @@ class ITestMarker(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestSchema,\n             marker=ITestMarker,\n             factory=None,\n@@ -108,8 +99,8 @@ class ITestMarker(Interface):\n \n         self.mock_utility(registration, IBehavior, ITestSchema.__identifier__)\n \n-        s1 = SCHEMA_CACHE.subtypes(u"testtype")\n-        s2 = SCHEMA_CACHE.subtypes(u"testtype")\n+        s1 = SCHEMA_CACHE.subtypes("testtype")\n+        s2 = SCHEMA_CACHE.subtypes("testtype")\n \n         self.assertTrue(s1[0] is s2[0] is ITestMarker)\n \n@@ -120,12 +111,12 @@ class ISchema1(Interface):\n         class ISchema2(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[ISchema1, ISchema2])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is schema2 and schema2 is ISchema1)\n \n@@ -136,13 +127,13 @@ class ISchema1(Interface):\n         class ISchema2(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[ISchema1, ISchema2])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n-        SCHEMA_CACHE.invalidate(u"testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n+        SCHEMA_CACHE.invalidate("testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is ISchema1)\n         self.assertTrue(schema2 is ISchema2)\n@@ -151,18 +142,18 @@ def test_none_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[None, ISchema1, ISchema1])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n@@ -171,17 +162,17 @@ def test_attribute_and_value_error_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(side_effect=[AttributeError, ValueError, ISchema1])\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n \n         SCHEMA_CACHE.invalidate("testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is None)\n@@ -191,13 +182,13 @@ def test_unknown_type_not_cached(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n         fti.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n-        schema1 = SCHEMA_CACHE.get(u"othertype")\n-        schema2 = SCHEMA_CACHE.get(u"testtype")\n-        schema3 = SCHEMA_CACHE.get(u"testtype")\n+        schema1 = SCHEMA_CACHE.get("othertype")\n+        schema2 = SCHEMA_CACHE.get("testtype")\n+        schema3 = SCHEMA_CACHE.get("testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n@@ -206,20 +197,20 @@ def test_clear_all_caches(self):\n         class ISchema1(Interface):\n             pass\n \n-        fti1 = DexterityFTI(u"testtype")\n+        fti1 = DexterityFTI("testtype")\n         fti1.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti1, IDexterityFTI, name=u"testtype1")\n+        self.mock_utility(fti1, IDexterityFTI, name="testtype1")\n \n-        fti2 = DexterityFTI(u"testtype")\n+        fti2 = DexterityFTI("testtype")\n         fti2.lookupSchema = Mock(return_value=ISchema1)\n-        self.mock_utility(fti2, IDexterityFTI, name=u"testtype2")\n+        self.mock_utility(fti2, IDexterityFTI, name="testtype2")\n \n         # reset schemacache counter\n         SCHEMA_CACHE.invalidations = 0\n \n         # fill cache should call lookupschema one time\n-        schema1 = SCHEMA_CACHE.get(u"testtype1")\n-        schema2 = SCHEMA_CACHE.get(u"testtype2")\n+        schema1 = SCHEMA_CACHE.get("testtype1")\n+        schema2 = SCHEMA_CACHE.get("testtype2")\n         self.assertTrue(schema1 is schema2 is ISchema1)\n \n         # clear\n@@ -230,6 +221,6 @@ class ISchema1(Interface):\n         # check invalidations\n \n         # fill cache again should call lookupschema one time\n-        schema1 = SCHEMA_CACHE.get(u"testtype1")\n-        schema2 = SCHEMA_CACHE.get(u"testtype2")\n+        schema1 = SCHEMA_CACHE.get("testtype1")\n+        schema2 = SCHEMA_CACHE.get("testtype2")\n         self.assertTrue(schema1 is schema2 is ISchema1)\ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex acca24ac..60689219 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.content import Container\n@@ -6,22 +5,17 @@\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n+from unittest.mock import Mock\n+from zope.globalrequest import setRequest\n from zope.interface import Interface\n from zope.interface import provider\n+from zope.publisher.browser import TestRequest\n from zope.security.interfaces import IPermission\n from zope.security.permission import Permission\n-from zope.globalrequest import setRequest\n-from zope.publisher.browser import TestRequest\n \n import zope.schema\n \n \n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n-\n class TestAttributeProtection(MockTestCase):\n     def setUp(self):\n         setRequest(TestRequest())\n@@ -31,7 +25,7 @@ def test_item(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n@@ -41,7 +35,7 @@ class ITestSchema(Interface):\n \n         @provider(IFormFieldProvider)\n         class ITestBehavior(Interface):\n-            test2 = zope.schema.TextLine(title=u"Test")\n+            test2 = zope.schema.TextLine(title="Test")\n \n         ITestBehavior.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n@@ -51,8 +45,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n             factory=None,\n@@ -69,24 +63,20 @@ class ITestBehavior(Interface):\n         )\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.behaviors = ()\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n-        )\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("zope2.View", "View"), IPermission, "zope2.View")\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         # mock security manager\n         security_manager_mock = Mock()\n@@ -97,21 +87,19 @@ class ITestBehavior(Interface):\n         # run 1: schema and no behavior access to schema protected attribute\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n-        self.assertFalse(\n-            item.__allow_access_to_unprotected_subobjects__("test", u"foo")\n-        )\n+        self.assertFalse(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n         # run 2: schema and no behavior access to known non schema attribute\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         security_manager_mock.checkPermission.assert_called_with("View foo", item)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -119,7 +107,7 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n@@ -128,7 +116,7 @@ class ITestBehavior(Interface):\n         fti_mock.lookupSchema = Mock(return_value=None)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n@@ -136,7 +124,7 @@ def test_container(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n@@ -146,7 +134,7 @@ class ITestSchema(Interface):\n \n         @provider(IFormFieldProvider)\n         class ITestBehavior(Interface):\n-            test2 = zope.schema.TextLine(title=u"Test")\n+            test2 = zope.schema.TextLine(title="Test")\n \n         ITestBehavior.setTaggedValue(\n             READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n@@ -156,8 +144,8 @@ class ITestBehavior(Interface):\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior",\n-            description=u"Provides test behavior",\n+            title="Test Behavior",\n+            description="Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n             factory=None,\n@@ -174,24 +162,20 @@ class ITestBehavior(Interface):\n         )\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n-        )\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("zope2.View", "View"), IPermission, "zope2.View")\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         container = Container("test")\n-        container.portal_type = u"testtype"\n-        container.test = u"foo"\n-        container.foo = u"bar"\n+        container.portal_type = "testtype"\n+        container.test = "foo"\n+        container.foo = "bar"\n \n         # mock security manager\n         security_manager_mock = Mock()\n@@ -203,7 +187,7 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n         self.assertFalse(\n-            container.__allow_access_to_unprotected_subobjects__("test", u"foo")\n+            container.__allow_access_to_unprotected_subobjects__("test", "foo")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -211,14 +195,14 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("foo", u"bar")\n+            container.__allow_access_to_unprotected_subobjects__("foo", "bar")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View foo", container)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            container.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -226,7 +210,7 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            container.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -235,7 +219,7 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n+            container.__allow_access_to_unprotected_subobjects__("test2", "foo2")\n         )\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n@@ -243,56 +227,54 @@ def test_no_tagged_value(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n         # Everything allowed\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_no_read_permission(self):\n \n         # Mock schema model\n         class ITestSchema(Interface):\n-            test = zope.schema.TextLine(title=u"Test")\n+            test = zope.schema.TextLine(title="Test")\n \n         ITestSchema.setTaggedValue(READ_PERMISSIONS_KEY, dict(foo="foo.View"))\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Mock permissions\n-        self.mock_utility(\n-            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n-        )\n+        self.mock_utility(Permission("foo.View", "View foo"), IPermission, "foo.View")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         # Check permission\n         security_manager_mock = Mock()\n@@ -303,69 +285,69 @@ class ITestSchema(Interface):\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_no_schema(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=None)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_schema_exception(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(side_effect=AttributeError)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n-        item.test = u"foo"\n-        item.foo = u"bar"\n+        item.portal_type = "testtype"\n+        item.test = "foo"\n+        item.foo = "bar"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", "foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", "bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", "stuff")\n         )\n \n     def test_empty_name(self):\n \n         # Mock FTI\n-        fti_mock = DexterityFTI(u"testtype")\n-        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, "testtype")\n \n         # Content item\n         item = Item("test")\n-        item.portal_type = u"testtype"\n+        item.portal_type = "testtype"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", "foo"))\ndiff --git a/plone/dexterity/tests/test_synchronize.py b/plone/dexterity/tests/test_synchronize.py\nnew file mode 100644\nindex 00000000..aa3db2d5\n--- /dev/null\n+++ b/plone/dexterity/tests/test_synchronize.py\n@@ -0,0 +1,68 @@\n+from plone.dexterity.synchronize import synchronized\n+from threading import Lock\n+\n+import unittest\n+\n+\n+class StupidStack:\n+\n+    _elements = []  # not thread safe\n+    _lock = Lock()\n+\n+    @synchronized(_lock)\n+    def push(self, item):\n+        self._elements.append(item)\n+\n+    @synchronized(_lock)\n+    def pop(self):\n+        last = self._elements[-1]\n+        del self._elements[-1]\n+        return last\n+\n+\n+_global_lock = Lock()\n+_global_list = []\n+\n+\n+@synchronized(_global_lock)\n+def reverse_global_list():\n+    global _global_list\n+    _global_list.reverse()\n+\n+\n+class Test(unittest.TestCase):\n+    def test_instance_method(self):\n+\n+        shared_stack = StupidStack()\n+        shared_stack.push("one")\n+        item = shared_stack.pop()\n+\n+        self.assertEqual("one", item)\n+\n+        with self.assertRaises(IndexError):\n+            shared_stack.pop()\n+\n+        # should not be dead-locked even after an exception\n+\n+        shared_stack.push("two")\n+        item = shared_stack.pop()\n+\n+        self.assertEqual("two", item)\n+\n+    def test_function(self):\n+        global _global_list\n+        _global_list.extend([1, 2, 3])\n+\n+        reverse_global_list()\n+        reverse_global_list()\n+        reverse_global_list()\n+\n+        self.assertEqual([3, 2, 1], _global_list)\n+\n+\n+def test_suite():\n+    return unittest.defaultTestLoader.loadTestsFromName(__name__)\n+\n+\n+if __name__ == "__main__":\n+    unittest.main(defaultTest="test_suite")\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex 37a82961..d7904c17 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -1,13 +1,7 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import utils\n from plone.dexterity.fti import DexterityFTI\n-\n-\n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n+from unittest.mock import Mock\n \n \n class TestUtils(MockTestCase):\n@@ -25,7 +19,7 @@ class IBehaviorSchema(Interface):\n             pass\n \n         behavior_mock = Mock()\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n \n         portal_type = "prefix_0_type_0_schema"\n         behavior_name = "behavior_0"\n@@ -54,7 +48,7 @@ def testAddContentToContainer_preserves_existing_id(self):\n         from plone.dexterity.content import Item\n \n         container = Container()\n-        container._ordering = u"unordered"\n+        container._ordering = "unordered"\n         # Allow anyone to access the contents information on the container.\n         # This allows to check for existing content with the same id.\n         container.manage_permission(\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex e27e7282..441a92db 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from .case import MockTestCase\n from AccessControl import Unauthorized\n from plone.autoform.interfaces import IFormFieldProvider\n@@ -21,6 +20,7 @@\n from plone.z3cform.interfaces import IDeferSecurityCheck\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.statusmessages.interfaces import IStatusMessage\n+from unittest.mock import Mock\n from z3c.form.action import Actions\n from z3c.form.datamanager import AttributeField\n from z3c.form.field import Fields\n@@ -37,14 +37,6 @@\n from zope.interface import provider\n from zope.publisher.browser import TestRequest as TestRequestBase\n \n-import six\n-\n-\n-try:\n-    from unittest.mock import Mock\n-except ImportError:\n-    from mock import Mock\n-\n \n class TestRequest(TestRequestBase):\n     """Zope 3\'s TestRequest doesn\'t support item assignment, but Zope 2\'s\n@@ -76,7 +68,7 @@ class IBehaviorThree(Interface):\n \n @implementer(IBehaviorAssignable)\n @adapter(Interface)\n-class NoBehaviorAssignable(object):\n+class NoBehaviorAssignable:\n     # We will use this simple class to check that registering our own\n     # IBehaviorAssignable adapter has an effect.\n \n@@ -93,29 +85,29 @@ def enumerateBehaviors(self):\n class TestAddView(MockTestCase):\n     def test_addview_sets_form_portal_type(self):\n \n-        context = Container(u"container")\n+        context = Container("container")\n         request = TestRequest()\n-        fti = DexterityFTI(u"testtype")\n+        fti = DexterityFTI("testtype")\n \n         addview = DefaultAddView(context, request, fti)\n \n-        self.assertEqual(u"testtype", addview.form_instance.portal_type)\n+        self.assertEqual("testtype", addview.form_instance.portal_type)\n \n     def test_form_create(self):\n \n         # Context and request\n-        context = Container(u"container")\n+        context = Container("container")\n         request = TestRequest()\n \n         # FTI - returns dummy factory name\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.factory = u"testfactory"\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.factory = "testfactory"\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # The form we\'re testing\n         form = DefaultAddForm(context, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         class ISchema(Interface):\n             foo = schema.TextLine()\n@@ -126,7 +118,7 @@ class ISchema(Interface):\n \n         obj_dummy = Item(id="dummy")\n         alsoProvides(obj_dummy, ISchema)\n-        data_dummy = {u"foo": u"bar"}\n+        data_dummy = {"foo": "bar"}\n \n         from zope.component import createObject\n \n@@ -147,38 +139,38 @@ def test_add(self):\n         obj = Mock()\n         request = TestRequest()\n \n-        container._setObject = Mock(return_value=u"newid")\n+        container._setObject = Mock(return_value="newid")\n         container._getOb = Mock(return_value=obj)\n         container.absolute_url = Mock(return_value="http://nohost/plone/container")\n \n-        obj.id = u"newid"\n+        obj.id = "newid"\n         obj.portal_type = "testtype"\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n         container_fti_mock.allowType = Mock(return_value=True)\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n         # Name chooser\n         @implementer(INameChooser)\n-        class NameChooser(object):\n+        class NameChooser:\n             def __init__(self, context):\n                 pass\n \n             def chooseName(self, name, object):\n-                return u"newid"\n+                return "newid"\n \n         self.mock_adapter(NameChooser, INameChooser, (Interface,))\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n         form.add(obj)\n \n     def test_add_raises_unauthorized_if_construction_not_allowed(self):\n@@ -188,19 +180,19 @@ def test_add_raises_unauthorized_if_construction_not_allowed(self):\n         request = TestRequest()\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=False)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n         obj.portal_type = "testtype"\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         self.assertRaises(Unauthorized, form.add, obj)\n \n@@ -213,19 +205,19 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         obj.portal_type = "testtype"\n \n         # New object\'s FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Container FTI\n-        container_fti_mock = DexterityFTI(u"containertype")\n+        container_fti_mock = DexterityFTI("containertype")\n         container_fti_mock.allowType = Mock(return_value=False)\n-        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name="containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n         form = DefaultAddForm(container, request)\n-        form.portal_type = u"testtype"\n+        form.portal_type = "testtype"\n \n         self.assertRaises(ValueError, form.add, obj)\n \n@@ -242,57 +234,57 @@ def test_label(self):\n \n         # FTI\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u"Test title")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.Title = Mock(return_value="Test title")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Form\n \n         addform = DefaultAddForm(context_mock, request_mock)\n-        addform.portal_type = u"testtype"\n+        addform.portal_type = "testtype"\n \n         label = addform.label\n-        self.assertEqual(u"Add ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping["name"])\n+        self.assertEqual("Add ${name}", str(label))\n+        self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -301,7 +293,7 @@ def test_schema_lookup_add(self):\n \n         # Form\n         view = DefaultAddForm(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \n@@ -319,15 +311,15 @@ def test_fires_add_begun_event(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype",\n+            portal_type="testtype",\n             allowedContentTypes=lambda: [self.create_dummy(getId=lambda: "testtype")],\n         )\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -350,14 +342,14 @@ def test_update_checks_allowed_types(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype", allowedContentTypes=lambda: []\n+            portal_type="testtype", allowedContentTypes=lambda: []\n         )\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -372,15 +364,15 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u"testtype", allowedContentTypes=lambda: []\n+            portal_type="testtype", allowedContentTypes=lambda: []\n         )\n         request_mock = TestRequest()\n         alsoProvides(request_mock, IDeferSecurityCheck)\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n@@ -397,13 +389,13 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n     def test_fires_add_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -435,24 +427,24 @@ def test_label(self):\n \n         # Context and request\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n \n-        fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u"Test title")\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.Title = Mock(return_value="Test title")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         # Form\n         editview = DefaultEditForm(context_mock, request_mock)\n \n         # emulate update()\n-        editview.portal_type = u"testtype"\n+        editview.portal_type = "testtype"\n \n         label = editview.label\n-        self.assertEqual(u"Edit ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping["name"])\n+        self.assertEqual("Edit ${name}", str(label))\n+        self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n \n@@ -460,42 +452,42 @@ def test_schema_lookup_edit(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -504,7 +496,7 @@ class IMarker(IDexterityContent):\n \n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \n@@ -520,13 +512,13 @@ class IMarker(IDexterityContent):\n     def test_fires_edit_begun_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n@@ -546,13 +538,13 @@ def test_fires_edit_begun_event(self):\n     def test_fires_edit_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -576,13 +568,13 @@ def addStatusMessage(self, msg, type=""):\n     def test_fires_edit_finished_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n-        class StatusMessage(object):\n+        class StatusMessage:\n             def __init__(self, request):\n                 pass\n \n@@ -599,7 +591,7 @@ def addStatusMessage(self, msg, type=""):\n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n         view.widgets = Mock()\n-        view.widgets.extract = Mock(return_value=({"title": u"foo"}, []))\n+        view.widgets.extract = Mock(return_value=({"title": "foo"}, []))\n         view.applyChanges = Mock()\n         view.handleApply(view, {})\n \n@@ -614,42 +606,42 @@ def test_schema_lookup_default_view(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock = self.create_dummy(portal_type="testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n         # FTI\n-        fti_mock = DexterityFTI(u"testtype")\n+        fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n             IBehaviorThree.__identifier__,\n         )\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n \n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 1",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 1",\n+            description="Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 2",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 2",\n+            description="Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n             factory=None,\n         )\n         self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n-            title=u"Test Behavior 3",\n-            description=u"Provides test behavior",\n+            title="Test Behavior 3",\n+            description="Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n             factory=None,\n@@ -658,7 +650,7 @@ class IMarker(IDexterityContent):\n \n         # Form\n         view = DefaultView(context_mock, request_mock)\n-        view.portal_type = u"testtype"\n+        view.portal_type = "testtype"\n \n         self.assertEqual(ISchema, view.schema)\n \ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex b753f886..1e3fb4b2 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,521 +1,501 @@\n-# -*- coding: utf-8 -*-\n-from .case import HAS_WEBDAV\n+from .case import ItemDummy\n from .case import MockTestCase\n+from email.message import Message\n+from io import StringIO\n+from OFS.Folder import Folder\n+from OFS.SimpleItem import SimpleItem\n+from plone.autoform.interfaces import IFormFieldProvider\n+from plone.behavior.interfaces import IBehaviorAssignable\n+from plone.dexterity.browser.traversal import DexterityPublishTraverse\n+from plone.dexterity.content import Container\n+from plone.dexterity.content import Item\n+from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n+from plone.dexterity.filerepresentation import DefaultFileFactory\n+from plone.dexterity.filerepresentation import DefaultReadFile\n+from plone.dexterity.filerepresentation import DefaultWriteFile\n+from plone.dexterity.filerepresentation import FolderDataResource\n+from plone.dexterity.fti import DexterityFTI\n+from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n+from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.schema import SCHEMA_CACHE\n+from plone.rfc822.interfaces import IPrimaryField\n+from unittest.mock import Mock\n+from webdav.NullResource import NullResource\n+from zExceptions import Forbidden\n+from zExceptions import MethodNotAllowed\n+from zExceptions import Unauthorized\n+from zope import schema\n+from zope.component.interfaces import IFactory\n+from zope.filerepresentation.interfaces import IDirectoryFactory\n+from zope.filerepresentation.interfaces import IFileFactory\n+from zope.filerepresentation.interfaces import IRawReadFile\n+from zope.filerepresentation.interfaces import IRawWriteFile\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.interface import provider\n+from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n+from zope.publisher.browser import TestRequest\n+from zope.size.interfaces import ISized\n+from ZPublisher.HTTPResponse import HTTPResponse\n+from ZPublisher.Iterators import IStreamIterator\n \n+import re\n \n-if HAS_WEBDAV:\n-\n-    from .case import ItemDummy\n-    from email.message import Message\n-    from OFS.Folder import Folder\n-    from OFS.SimpleItem import SimpleItem\n-    from plone.autoform.interfaces import IFormFieldProvider\n-    from plone.behavior.interfaces import IBehaviorAssignable\n-    from plone.dexterity.browser.traversal import DexterityPublishTraverse\n-    from plone.dexterity.content import Container\n-    from plone.dexterity.content import Item\n-    from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n-    from plone.dexterity.filerepresentation import DefaultFileFactory\n-    from plone.dexterity.filerepresentation import DefaultReadFile\n-    from plone.dexterity.filerepresentation import DefaultWriteFile\n-    from plone.dexterity.filerepresentation import FolderDataResource\n-    from plone.dexterity.fti import DexterityFTI\n-    from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n-    from plone.dexterity.interfaces import IDexterityFTI\n-    from plone.dexterity.schema import SCHEMA_CACHE\n-    from plone.rfc822.interfaces import IPrimaryField\n-    from six import StringIO\n-    from webdav.NullResource import NullResource\n-    from zExceptions import Forbidden\n-    from zExceptions import MethodNotAllowed\n-    from zExceptions import Unauthorized\n-    from zope import schema\n-    from zope.component.interfaces import IFactory\n-    from zope.filerepresentation.interfaces import IDirectoryFactory\n-    from zope.filerepresentation.interfaces import IFileFactory\n-    from zope.filerepresentation.interfaces import IRawReadFile\n-    from zope.filerepresentation.interfaces import IRawWriteFile\n-    from zope.interface import alsoProvides\n-    from zope.interface import implementer\n-    from zope.interface import Interface\n-    from zope.interface import provider\n-    from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n-    from zope.publisher.browser import TestRequest\n-    from zope.size.interfaces import ISized\n-    from ZPublisher.HTTPResponse import HTTPResponse\n-    from ZPublisher.Iterators import IStreamIterator\n-\n-    import re\n-    import six\n-\n-    try:\n-        from unittest.mock import Mock\n-    except ImportError:\n-        from mock import Mock\n-\n-    if six.PY2:\n-        # cope with upstream library changes in rendering the XML prolog\n-        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n-    else:\n-        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n-\n-    @provider(IFormFieldProvider)\n-    class ITestBehavior(Interface):\n-        foo = schema.Int()\n-        bar = schema.Bytes()\n-\n-    class DAVTestRequest(TestRequest):\n-\n-        get_header = TestRequest.getHeader\n-\n-        def _createResponse(self):\n-            return HTTPResponse()\n-\n-    class TestWebZope2DAVAPI(MockTestCase):\n-        def test_get_size_no_adapter(self):\n-            item = Item("test")\n \n-            self.assertEqual(0, item.get_size())\n+XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n-        def test_get_size_wrong_adapter(self):\n-            class SizedAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n \n-                def sizeForSorting(self):\n-                    return "lines", 10\n+@provider(IFormFieldProvider)\n+class ITestBehavior(Interface):\n+    foo = schema.Int()\n+    bar = schema.Bytes()\n \n-                def sizeForDisplay(self):\n-                    "10 lines"\n \n-            self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item("test")\n+class DAVTestRequest(TestRequest):\n \n-            self.assertEqual(0, item.get_size())\n+    get_header = TestRequest.getHeader\n \n-        def test_get_size_right_adapter(self):\n-            class SizedAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+    def _createResponse(self):\n+        return HTTPResponse()\n \n-                def sizeForSorting(self):\n-                    return "bytes", 10\n \n-                def sizeForDisplay(self):\n-                    "10 bytes"\n+class TestWebZope2DAVAPI(MockTestCase):\n+    def test_get_size_no_adapter(self):\n+        item = Item("test")\n \n-            self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item("test")\n+        self.assertEqual(0, item.get_size())\n \n-            self.assertEqual(10, item.get_size())\n+    def test_get_size_wrong_adapter(self):\n+        class SizedAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-        def test_content_type_no_adapter(self):\n-            item = Item("test")\n+            def sizeForSorting(self):\n+                return "lines", 10\n \n-            self.assertEqual(None, item.content_type())\n-            self.assertEqual(None, item.Format())\n+            def sizeForDisplay(self):\n+                "10 lines"\n \n-        def test_content_type_simple_adapter(self):\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.mock_adapter(SizedAdapter, ISized, (Item,))\n+        item = Item("test")\n \n-                mimeType = "text/foo"\n-                # others omitted\n+        self.assertEqual(0, item.get_size())\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n-            item = Item("test")\n+    def test_get_size_right_adapter(self):\n+        class SizedAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            self.assertEqual("text/foo", item.content_type())\n-            self.assertEqual("text/foo", item.Format())\n+            def sizeForSorting(self):\n+                return "bytes", 10\n \n-        def test_get_no_adapter(self):\n-            item = Item("test")\n+            def sizeForDisplay(self):\n+                "10 bytes"\n \n-            self.assertEqual("", item.manage_DAVget())\n+        self.mock_adapter(SizedAdapter, ISized, (Item,))\n+        item = Item("test")\n \n-        def test_get_simple_adapter(self):\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.assertEqual(10, item.get_size())\n \n-                mimeType = "text/foo"\n-                encoding = "latin1"\n+    def test_content_type_no_adapter(self):\n+        item = Item("test")\n \n-                def size(self):\n-                    return 10\n+        self.assertEqual(None, item.content_type())\n+        self.assertEqual(None, item.Format())\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+    def test_content_type_simple_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+            mimeType = "text/foo"\n+            # others omitted\n \n-            request = DAVTestRequest()\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+        item = Item("test")\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        self.assertEqual("text/foo", item.content_type())\n+        self.assertEqual("text/foo", item.Format())\n \n-            self.assertEqual("1234567890", item.manage_DAVget())\n-            self.assertEqual(\n-                \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n-            )\n-            self.assertEqual("10", request.response.getHeader("Content-Length"))\n+    def test_get_no_adapter(self):\n+        item = Item("test")\n \n-        def test_get_minimal_adapter(self):\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.assertEqual("", item.manage_DAVget())\n \n-                mimeType = None\n-                encoding = None\n+    def test_get_simple_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-                def size(self):\n-                    return None\n+            mimeType = "text/foo"\n+            encoding = "latin1"\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+            def size(self):\n+                return 10\n \n-            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+            def read(self, size=None):\n+                return "1234567890"\n \n-            request = DAVTestRequest()\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        request = DAVTestRequest()\n \n-            self.assertEqual("1234567890", item.manage_DAVget())\n-            self.assertEqual(None, request.response.getHeader("Content-Type"))\n-            self.assertEqual(None, request.response.getHeader("Content-Length"))\n+        item = Item("item")\n+        item.REQUEST = request\n \n-        def test_get_streaming(self):\n-            @implementer(IStreamIterator)\n-            class ReadFileAdapter(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        self.assertEqual("1234567890", item.manage_DAVget())\n+        self.assertEqual(\n+            \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n+        )\n+        self.assertEqual("10", request.response.getHeader("Content-Length"))\n \n-                mimeType = None\n-                encoding = None\n+    def test_get_minimal_adapter(self):\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-                def size(self):\n-                    return 10\n+            mimeType = None\n+            encoding = None\n \n-                def read(self, size=None):\n-                    return "1234567890"\n+            def size(self):\n+                return None\n \n-            adapterInstance = ReadFileAdapter(None)\n+            def read(self, size=None):\n+                return "1234567890"\n \n-            def factory(context):\n-                return adapterInstance\n+        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-            self.mock_adapter(factory, IRawReadFile, (Item,))\n+        request = DAVTestRequest()\n \n-            request = DAVTestRequest()\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        self.assertEqual("1234567890", item.manage_DAVget())\n+        self.assertEqual(None, request.response.getHeader("Content-Type"))\n+        self.assertEqual(None, request.response.getHeader("Content-Length"))\n \n-            self.assertEqual(adapterInstance, item.manage_DAVget())\n+    def test_get_streaming(self):\n+        @implementer(IStreamIterator)\n+        class ReadFileAdapter:\n+            def __init__(self, context):\n+                self.context = context\n \n-        def test_put_no_adapter(self):\n-            request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n+            mimeType = None\n+            encoding = None\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            def size(self):\n+                return 10\n \n-            self.assertRaises(MethodNotAllowed, item.PUT)\n+            def read(self, size=None):\n+                return "1234567890"\n \n-        def test_put_no_body(self):\n-            request = DAVTestRequest()\n+        adapterInstance = ReadFileAdapter(None)\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        def factory(context):\n+            return adapterInstance\n \n-            self.assertRaises(MethodNotAllowed, item.PUT)\n+        self.mock_adapter(factory, IRawReadFile, (Item,))\n \n-        def test_put_no_content_type_header(self):\n-            class WriteFile(object):\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+        request = DAVTestRequest()\n \n-                mimeType = None\n-                encoding = None\n+        item = Item("item")\n+        item.REQUEST = request\n \n-                def write(self, data):\n-                    self._written += data\n+        self.assertEqual(adapterInstance, item.manage_DAVget())\n \n-                def close(self):\n-                    self._closed = True\n+    def test_put_no_adapter(self):\n+        request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n \n-            adapterInstance = WriteFile(None)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            def factory(context):\n-                return adapterInstance\n+        self.assertRaises(MethodNotAllowed, item.PUT)\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n+    def test_put_no_body(self):\n+        request = DAVTestRequest()\n \n-            request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            item = Item("item")\n-            item.REQUEST = request\n+        self.assertRaises(MethodNotAllowed, item.PUT)\n \n-            item.PUT()\n-            self.assertEqual(None, adapterInstance.mimeType)\n-            self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n+    def test_put_no_content_type_header(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-        def test_put_with_content_type_header_no_charset(self):\n-            class WriteFile(object):\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+            mimeType = None\n+            encoding = None\n \n-                mimeType = None\n-                encoding = None\n+            def write(self, data):\n+                self._written += data\n \n-                def write(self, data):\n-                    self._written += data\n+            def close(self):\n+                self._closed = True\n \n-                def close(self):\n-                    self._closed = True\n+        adapterInstance = WriteFile(None)\n \n-            adapterInstance = WriteFile(None)\n+        def factory(context):\n+            return adapterInstance\n \n-            def factory(context):\n-                return adapterInstance\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n \n-            events = []\n+        request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n \n-            def handler(event):\n-                events.append(event)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n-            self.mock_handler(handler, (IObjectModifiedEvent,))\n+        item.PUT()\n+        self.assertEqual(None, adapterInstance.mimeType)\n+        self.assertEqual(None, adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n \n-            request = DAVTestRequest(\n-                environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n-            )\n+    def test_put_with_content_type_header_no_charset(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            mimeType = None\n+            encoding = None\n \n-            item.PUT()\n-            self.assertEqual("text/foo", adapterInstance.mimeType)\n-            self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n-            self.assertEqual(1, len(events))\n+            def write(self, data):\n+                self._written += data\n \n-        def test_put_with_content_type_header_and_charset(self):\n-            class WriteFile(object):\n-                def __init__(self, context):\n-                    self.context = context\n-                    self._written = ""\n-                    self._closed = False\n+            def close(self):\n+                self._closed = True\n \n-                mimeType = None\n-                encoding = None\n+        adapterInstance = WriteFile(None)\n \n-                def write(self, data):\n-                    self._written += data\n+        def factory(context):\n+            return adapterInstance\n \n-                def close(self):\n-                    self._closed = True\n+        events = []\n \n-            adapterInstance = WriteFile(None)\n+        def handler(event):\n+            events.append(event)\n \n-            def factory(context):\n-                return adapterInstance\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+        self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-            events = []\n+        request = DAVTestRequest(\n+            environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n+        )\n \n-            def handler(event):\n-                events.append(event)\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            self.mock_adapter(factory, IRawWriteFile, (Item,))\n-            self.mock_handler(handler, (IObjectModifiedEvent,))\n+        item.PUT()\n+        self.assertEqual("text/foo", adapterInstance.mimeType)\n+        self.assertEqual(None, adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n+        self.assertEqual(1, len(events))\n \n-            request = DAVTestRequest(\n-                environ={\n-                    "BODYFILE": StringIO("data"),\n-                    "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n-                }\n-            )\n+    def test_put_with_content_type_header_and_charset(self):\n+        class WriteFile:\n+            def __init__(self, context):\n+                self.context = context\n+                self._written = ""\n+                self._closed = False\n \n-            item = Item("item")\n-            item.REQUEST = request\n+            mimeType = None\n+            encoding = None\n \n-            item.PUT()\n-            self.assertEqual("text/foo", adapterInstance.mimeType)\n-            self.assertEqual("latin1", adapterInstance.encoding)\n-            self.assertEqual("data", adapterInstance._written)\n-            self.assertEqual(True, adapterInstance._closed)\n-            self.assertEqual(1, len(events))\n+            def write(self, data):\n+                self._written += data\n \n-        def test_mkcol_no_adapter(self):\n-            container = Container("container")\n-            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n+            def close(self):\n+                self._closed = True\n \n-        def test_mkcol_simple_adapter(self):\n-            created = []\n+        adapterInstance = WriteFile(None)\n \n-            class DirectoryFactory(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        def factory(context):\n+            return adapterInstance\n \n-                def __call__(self, id):\n-                    created.append(id)\n+        events = []\n \n-            self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n+        def handler(event):\n+            events.append(event)\n \n-            container = Container("container")\n-            container.MKCOL_handler("test")\n-            self.assertEqual(["test"], created)\n+        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+        self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-        def test_put_factory_no_adapter(self):\n-            container = Container("container")\n-            self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n+        request = DAVTestRequest(\n+            environ={\n+                "BODYFILE": StringIO("data"),\n+                "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n+            }\n+        )\n \n-        def test_put_factory_simple_adapter(self):\n-            instance = object()\n+        item = Item("item")\n+        item.REQUEST = request\n \n-            class FileFactory(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        item.PUT()\n+        self.assertEqual("text/foo", adapterInstance.mimeType)\n+        self.assertEqual("latin1", adapterInstance.encoding)\n+        self.assertEqual("data", adapterInstance._written)\n+        self.assertEqual(True, adapterInstance._closed)\n+        self.assertEqual(1, len(events))\n \n-                def __call__(self, name, contentType, body):\n-                    return instance\n+    def test_mkcol_no_adapter(self):\n+        container = Container("container")\n+        self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n \n-            self.mock_adapter(FileFactory, IFileFactory, (Container,))\n-            container = Container("container")\n-            self.assertEqual(\n-                instance, container.PUT_factory("test", "text/foo", "body")\n-            )\n+    def test_mkcol_simple_adapter(self):\n+        created = []\n \n-        def test_list_without_items(self):\n-            class DummyContainer(Container):\n-                def listFolderContents(self, filter=None):\n-                    return []\n+        class DirectoryFactory:\n+            def __init__(self, context):\n+                self.context = context\n \n-            container = DummyContainer("container")\n+            def __call__(self, id):\n+                created.append(id)\n \n-            objects = container.listDAVObjects()\n-            self.assertEqual(1, len(objects))\n-            self.assertTrue(isinstance(objects[0], FolderDataResource))\n-            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-            self.assertEqual(container, objects[0].__parent__)\n+        self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n \n-        def test_list_with_items(self):\n-            class DummyContainer(Container):\n-                def listFolderContents(self, filter=None):\n-                    return [Item("foo")]\n+        container = Container("container")\n+        container.MKCOL_handler("test")\n+        self.assertEqual(["test"], created)\n \n-            container = DummyContainer("container")\n+    def test_put_factory_no_adapter(self):\n+        container = Container("container")\n+        self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n \n-            objects = container.listDAVObjects()\n-            self.assertEqual(2, len(objects))\n-            self.assertTrue(isinstance(objects[0], FolderDataResource))\n-            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-            self.assertEqual(container, objects[0].__parent__)\n-            self.assertEqual("foo", objects[1].getId())\n+    def test_put_factory_simple_adapter(self):\n+        instance = object()\n \n-    class TestFolderDataResource(MockTestCase):\n-        def test_getId(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container)\n+        class FileFactory:\n+            def __init__(self, context):\n+                self.context = context\n \n-            self.assertEqual("fdata", r.getId())\n-            self.assertEqual(container, r.__parent__)\n-\n-        def test_HEAD(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.HEAD(request, request.response))\n-            self.assertEqual(200, response.getStatus())\n-            self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n-            self.assertEqual("10", response.getHeader("Content-Length"))\n-\n-        def test_OPTIONS(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n+            def __call__(self, name, contentType, body):\n+                return instance\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.OPTIONS(request, request.response))\n-            self.assertEqual(\n-                "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n-                "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n-                response.getHeader("Allow"),\n-            )\n-\n-        def test_TRACE(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-\n-            self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n-\n-        def test_PROPFIND(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n-\n-                def content_type(self):\n-                    return "text/foo"\n-\n-            container = TestContainer("container")\n-            container.manage_changeProperties(title="Container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.PROPFIND(request, response))\n-            self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n-            )\n-            self.assertEqual(207, response.getStatus())\n-\n-            body = (\n-                XML_PROLOG\n-                + b"""\n+        self.mock_adapter(FileFactory, IFileFactory, (Container,))\n+        container = Container("container")\n+        self.assertEqual(instance, container.PUT_factory("test", "text/foo", "body"))\n+\n+    def test_list_without_items(self):\n+        class DummyContainer(Container):\n+            def listFolderContents(self, filter=None):\n+                return []\n+\n+        container = DummyContainer("container")\n+\n+        objects = container.listDAVObjects()\n+        self.assertEqual(1, len(objects))\n+        self.assertTrue(isinstance(objects[0], FolderDataResource))\n+        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+        self.assertEqual(container, objects[0].__parent__)\n+\n+    def test_list_with_items(self):\n+        class DummyContainer(Container):\n+            def listFolderContents(self, filter=None):\n+                return [Item("foo")]\n+\n+        container = DummyContainer("container")\n+\n+        objects = container.listDAVObjects()\n+        self.assertEqual(2, len(objects))\n+        self.assertTrue(isinstance(objects[0], FolderDataResource))\n+        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+        self.assertEqual(container, objects[0].__parent__)\n+        self.assertEqual("foo", objects[1].getId())\n+\n+\n+class TestFolderDataResource(MockTestCase):\n+    def test_getId(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container)\n+\n+        self.assertEqual("fdata", r.getId())\n+        self.assertEqual(container, r.__parent__)\n+\n+    def test_HEAD(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.HEAD(request, request.response))\n+        self.assertEqual(200, response.getStatus())\n+        self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n+        self.assertEqual("10", response.getHeader("Content-Length"))\n+\n+    def test_OPTIONS(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.OPTIONS(request, request.response))\n+        self.assertEqual(\n+            "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n+            "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n+            response.getHeader("Allow"),\n+        )\n+\n+    def test_TRACE(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+\n+        self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n+\n+    def test_PROPFIND(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n+\n+            def content_type(self):\n+                return "text/foo"\n+\n+        container = TestContainer("container")\n+        container.manage_changeProperties(title="Container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n+\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n+\n+        self.assertEqual(response, r.PROPFIND(request, response))\n+        self.assertEqual(\n+            \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n+        )\n+        self.assertEqual(207, response.getStatus())\n+\n+        body = (\n+            XML_PROLOG\n+            + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -549,29 +529,29 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n-            )\n+        )\n \n-            result = response.getBody()\n-            result = re.sub(\n-                br"<n:getlastmodified>.+</n:getlastmodified>",\n-                br"<n:getlastmodified>...</n:getlastmodified>",\n-                result,\n-            )\n-            self.assertEqual(result.strip(), body.strip())\n+        result = response.getBody()\n+        result = re.sub(\n+            rb"<n:getlastmodified>.+</n:getlastmodified>",\n+            rb"<n:getlastmodified>...</n:getlastmodified>",\n+            result,\n+        )\n+        self.assertEqual(result.strip(), body.strip())\n \n-        def test_PROPPATCH(self):\n-            class TestContainer(Container):\n-                def get_size(self):\n-                    return 10\n+    def test_PROPPATCH(self):\n+        class TestContainer(Container):\n+            def get_size(self):\n+                return 10\n \n-                def content_type(self):\n-                    return "text/foo"\n+            def content_type(self):\n+                return "text/foo"\n \n-            container = TestContainer("container")\n-            container.manage_changeProperties(title="Container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        container = TestContainer("container")\n+        container.manage_changeProperties(title="Container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            requestBody = """\\\n+        requestBody = """\\\n <?xml version="1.0" encoding="utf-8" ?>\n <D:propertyupdate xmlns:D="DAV:"\n                   xmlns:n="http://www.zope.org/propsets/default">\n@@ -583,26 +563,26 @@ def content_type(self):\n </D:propertyupdate>\n """\n \n-            request = DAVTestRequest(\n-                environ={\n-                    "URL": "http://example.org/site/container",\n-                    "BODY": requestBody,\n-                }\n-            )\n-            response = request.response\n+        request = DAVTestRequest(\n+            environ={\n+                "URL": "http://example.org/site/container",\n+                "BODY": requestBody,\n+            }\n+        )\n+        response = request.response\n \n-            self.assertEqual(response, r.PROPPATCH(request, response))\n+        self.assertEqual(response, r.PROPPATCH(request, response))\n \n-            self.assertEqual("New title", container.getProperty("title"))\n+        self.assertEqual("New title", container.getProperty("title"))\n \n-            self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n-            )\n-            self.assertEqual(207, response.getStatus())\n+        self.assertEqual(\n+            \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n+        )\n+        self.assertEqual(207, response.getStatus())\n \n-            body = (\n-                XML_PROLOG\n-                + b"""\n+        body = (\n+            XML_PROLOG\n+            + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -618,523 +598,437 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n-            )\n-\n-            result = response.getBody()\n-\n-            self.assertEqual(body.strip(), result.strip())\n-\n-        def test_LOCK(self):\n-            # Too much WebDAV magic - just test that it delegates correctly\n-            class TestContainer(Container):\n-                def LOCK(self, request, response):\n-                    self._locked = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n-\n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n-\n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n-\n-            self.assertEqual(response, r.LOCK(request, response))\n-            self.assertEqual((request, response), container._locked)\n+        )\n \n-        def test_UNLOCK(self):\n-            # Too much WebDAV magic - just test that it delegates correctly\n-            class TestContainer(Container):\n-                def UNLOCK(self, request, response):\n-                    self._unlocked = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n+        result = response.getBody()\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        self.assertEqual(body.strip(), result.strip())\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+    def test_LOCK(self):\n+        # Too much WebDAV magic - just test that it delegates correctly\n+        class TestContainer(Container):\n+            def LOCK(self, request, response):\n+                self._locked = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-            self.assertEqual(response, r.UNLOCK(request, response))\n-            self.assertEqual((request, response), container._unlocked)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_PUT(self):\n-            class TestContainer(Container):\n-                def PUT(self, request, response):\n-                    self._put = (\n-                        request,\n-                        response,\n-                    )\n-                    return response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        self.assertEqual(response, r.LOCK(request, response))\n+        self.assertEqual((request, response), container._locked)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+    def test_UNLOCK(self):\n+        # Too much WebDAV magic - just test that it delegates correctly\n+        class TestContainer(Container):\n+            def UNLOCK(self, request, response):\n+                self._unlocked = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-            self.assertEqual(response, r.PUT(request, response))\n-            self.assertEqual((request, response), container._put)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_MKCOL(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        self.assertEqual(response, r.UNLOCK(request, response))\n+        self.assertEqual((request, response), container._unlocked)\n \n-            self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n+    def test_PUT(self):\n+        class TestContainer(Container):\n+            def PUT(self, request, response):\n+                self._put = (\n+                    request,\n+                    response,\n+                )\n+                return response\n \n-        def test_DELETE(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n+        self.assertEqual(response, r.PUT(request, response))\n+        self.assertEqual((request, response), container._put)\n \n-        def test_COPY(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_MKCOL(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n+        self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n \n-        def test_MOVE(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_DELETE(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://example.org/site/container"}\n-            )\n-            response = request.response\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n+        self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n \n-        def test_manage_DAVget(self):\n-            class TestContainer(Container):\n-                def manage_DAVget(self):\n-                    return "data"\n+    def test_COPY(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertEqual("data", r.manage_DAVget())\n+        self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n \n-        def test_manage_FTPget(self):\n-            class TestContainer(Container):\n-                def manage_FTPget(self):\n-                    return "data"\n+    def test_MOVE(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            container = TestContainer("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+        request = DAVTestRequest(environ={"URL": "http://example.org/site/container"})\n+        response = request.response\n \n-            self.assertEqual("data", r.manage_FTPget())\n+        self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n \n-        def test_listDAVObjects(self):\n-            container = Container("container")\n-            r = FolderDataResource("fdata", container).__of__(container)\n+    def test_manage_DAVget(self):\n+        class TestContainer(Container):\n+            def manage_DAVget(self):\n+                return "data"\n \n-            self.assertEqual([], r.listDAVObjects())\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-    class TestFileRepresentation(MockTestCase):\n-        def create_dummy(self, **kw):\n-            return ItemDummy(**kw)\n-\n-        def test_directory_factory(self):\n-            class TestContainer(Container):\n-                def manage_addFolder(self, name):\n-                    self._added = name\n+        self.assertEqual("data", r.manage_DAVget())\n \n-            container = TestContainer("container")\n-            factory = DefaultDirectoryFactory(container)\n+    def test_manage_FTPget(self):\n+        class TestContainer(Container):\n+            def manage_FTPget(self):\n+                return "data"\n \n-            factory("foo")\n-            self.assertEqual("foo", container._added)\n+        container = TestContainer("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-        def test_file_factory_finder_cruft(self):\n-            container = Container("container")\n-            factory = DefaultFileFactory(container)\n+        self.assertEqual("data", r.manage_FTPget())\n \n-            self.assertRaises(\n-                Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n-            )\n-            self.assertRaises(\n-                Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n-            )\n-\n-        def test_file_factory_no_ctr(self):\n-            container = Container("container")\n-\n-            from Products.CMFCore.utils import getToolByName\n-\n-            self.patch_global(getToolByName, return_value=None)\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n-\n-        def test_file_factory_no_fti(self):\n-            container = Container("container")\n-\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=None)\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n-\n-        def test_file_factory_not_allowed(self):\n-            container = Container("container")\n-            container.portal_type = "containertype"\n-\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = None\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=False)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertRaises(\n-                Unauthorized, factory, "test.html", "text/html", "<html />"\n-            )\n-\n-        def test_file_factory_construction_not_allowed(self):\n-            container = Container("container")\n-            container.portal_type = "containertype"\n-\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = None\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container)\n-\n-            self.assertRaises(\n-                Unauthorized, factory, "test.html", "text/html", "<html />"\n-            )\n-\n-        def test_file_factory_factory_method(self):\n-            result_dummy = self.create_dummy()\n-            container_mock = Mock()\n-            container_mock.invokeFactory = Mock(return_value="test-1.html")\n-            container_mock._getOb = Mock(return_value=result_dummy)\n-            container_mock._delObject = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.product = "FooProduct"\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            factory = DefaultFileFactory(container_mock)\n-\n-            self.assertEqual(\n-                result_dummy, factory("test.html", "text/html", "<html />")\n-            )\n-\n-        def test_file_factory_factory_utility(self):\n-            result_dummy = self.create_dummy(id="test.html")\n-            container_mock = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.product = None\n-            child_fti_mock.factory = "childtype-factory"\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n+    def test_listDAVObjects(self):\n+        container = Container("container")\n+        r = FolderDataResource("fdata", container).__of__(container)\n \n-            def factory(*args, **kwargs):\n-                return result_dummy\n+        self.assertEqual([], r.listDAVObjects())\n \n-            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n \n-            factory = DefaultFileFactory(container_mock)\n-\n-            self.assertEqual(\n-                result_dummy, factory("test.html", "text/html", "<html />")\n-            )\n-            self.assertEqual(result_dummy.Title(), "test.html")\n-\n-        def test_file_factory_content_type_factory_utility(self):\n-            container_mock = Mock()\n-            child_fti_mock = Mock()\n-            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.getId = Mock(return_value="childtype")\n-            child_fti_mock.product = None\n-            child_fti_mock.factory = "childtype-factory"\n-            container_fti_mock = Mock()\n-            container_fti_mock.allowType = Mock(return_value=True)\n-            ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value="childtype")\n-            pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, "content_type_registry")\n-            self.mock_tool(pt_mock, "portal_types")\n-\n-            def factory(*args, **kwargs):\n-                return Item(*args, **kwargs)\n-\n-            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n+class TestFileRepresentation(MockTestCase):\n+    def create_dummy(self, **kw):\n+        return ItemDummy(**kw)\n \n-            factory = DefaultFileFactory(container_mock)\n+    def test_directory_factory(self):\n+        class TestContainer(Container):\n+            def manage_addFolder(self, name):\n+                self._added = name\n \n-            item = factory("test.html", "text/html", "<html />")\n+        container = TestContainer("container")\n+        factory = DefaultDirectoryFactory(container)\n \n-            self.assertEqual("test.html", item.id)\n-\n-        def test_readfile_mimetype_no_message_no_fields(self):\n-            class ITest(Interface):\n-                pass\n-\n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        factory("foo")\n+        self.assertEqual("foo", container._added)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+    def test_file_factory_finder_cruft(self):\n+        container = Container("container")\n+        factory = DefaultFileFactory(container)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.assertRaises(\n+            Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n+        )\n+        self.assertRaises(\n+            Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n+        )\n \n-            readfile = DefaultReadFile(item)\n+    def test_file_factory_no_ctr(self):\n+        container = Container("container")\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        from Products.CMFCore.utils import getToolByName\n \n-        def test_readfile_mimetype_no_message_no_primary_field(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n+        self.patch_global(getToolByName, return_value=None)\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        factory = DefaultFileFactory(container)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+    def test_file_factory_no_fti(self):\n+        container = Container("container")\n \n-            readfile = DefaultReadFile(item)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value=None)\n+        self.mock_tool(ctr_mock, "content_type_registry")\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        factory = DefaultFileFactory(container)\n \n-        def test_readfile_mimetype_no_message_single_primary_field(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+    def test_file_factory_not_allowed(self):\n+        container = Container("container")\n+        container.portal_type = "containertype"\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = []\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = None\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=False)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        factory = DefaultFileFactory(container)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.assertRaises(Unauthorized, factory, "test.html", "text/html", "<html />")\n \n-            readfile = DefaultReadFile(item)\n+    def test_file_factory_construction_not_allowed(self):\n+        container = Container("container")\n+        container.portal_type = "containertype"\n \n-            self.assertEqual("text/plain", readfile.mimeType)\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = None\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n \n-        def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n-                stuff = schema.Bytes()\n+        factory = DefaultFileFactory(container)\n+\n+        self.assertRaises(Unauthorized, factory, "test.html", "text/html", "<html />")\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n-            alsoProvides(ITest["stuff"], IPrimaryField)\n+    def test_file_factory_factory_method(self):\n+        result_dummy = self.create_dummy()\n+        container_mock = Mock()\n+        container_mock.invokeFactory = Mock(return_value="test-1.html")\n+        container_mock._getOb = Mock(return_value=result_dummy)\n+        container_mock._delObject = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.product = "FooProduct"\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        self.assertEqual(result_dummy, factory("test.html", "text/html", "<html />"))\n+\n+    def test_file_factory_factory_utility(self):\n+        result_dummy = self.create_dummy(id="test.html")\n+        container_mock = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+        child_fti_mock.product = None\n+        child_fti_mock.factory = "childtype-factory"\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        def factory(*args, **kwargs):\n+            return result_dummy\n+\n+        self.mock_utility(factory, IFactory, name="childtype-factory")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        self.assertEqual(result_dummy, factory("test.html", "text/html", "<html />"))\n+        self.assertEqual(result_dummy.Title(), "test.html")\n+\n+    def test_file_factory_content_type_factory_utility(self):\n+        container_mock = Mock()\n+        child_fti_mock = Mock()\n+        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+        child_fti_mock.getId = Mock(return_value="childtype")\n+        child_fti_mock.product = None\n+        child_fti_mock.factory = "childtype-factory"\n+        container_fti_mock = Mock()\n+        container_fti_mock.allowType = Mock(return_value=True)\n+        ctr_mock = Mock()\n+        ctr_mock.findTypeName = Mock(return_value="childtype")\n+        pt_mock = Mock()\n+        pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+        self.mock_tool(ctr_mock, "content_type_registry")\n+        self.mock_tool(pt_mock, "portal_types")\n+\n+        def factory(*args, **kwargs):\n+            return Item(*args, **kwargs)\n+\n+        self.mock_utility(factory, IFactory, name="childtype-factory")\n+\n+        factory = DefaultFileFactory(container_mock)\n+\n+        item = factory("test.html", "text/html", "<html />")\n+\n+        self.assertEqual("test.html", item.id)\n+\n+    def test_readfile_mimetype_no_message_no_fields(self):\n+        class ITest(Interface):\n+            pass\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            readfile = DefaultReadFile(item)\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            self.assertEqual("message/rfc822", readfile.mimeType)\n+        readfile = DefaultReadFile(item)\n \n-        def test_readfile_mimetype_additional_schemata(self):\n-            # This is mostly a test that utils.iterSchemata takes\n-            # IBehaviorAssignable into account.\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            class ITest(Interface):\n-                title = schema.TextLine()\n+    def test_readfile_mimetype_no_message_no_primary_field(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n \n-            class ITestAdditional(Interface):\n-                # Additional behavior on an item\n-                body = schema.Text()\n-                stuff = schema.Bytes()\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n \n-            alsoProvides(ITestAdditional["body"], IPrimaryField)\n-            alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n-            alsoProvides(ITestAdditional, IFormFieldProvider)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            class MockBehavior(object):\n-                def __init__(self, iface):\n-                    self.interface = iface\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            class MockBehaviorAssignable(object):\n-                def __init__(self, context):\n-                    self.context = context\n+        readfile = DefaultReadFile(item)\n \n-                def enumerateBehaviors(self):\n-                    yield MockBehavior(ITestAdditional)\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n+    def test_readfile_mimetype_no_message_single_primary_field(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-            readfile = DefaultReadFile(item)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = []\n \n-            self.assertEqual("message/rfc822", readfile.mimeType)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-        def test_readfile_operations(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+        readfile = DefaultReadFile(item)\n \n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = [ITestBehavior.__identifier__]\n+        self.assertEqual("text/plain", readfile.mimeType)\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+    def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n+            stuff = schema.Bytes()\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n+        alsoProvides(ITest["body"], IPrimaryField)\n+        alsoProvides(ITest["stuff"], IPrimaryField)\n \n-            readfile = DefaultReadFile(item)\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            message = Message()\n-            message["title"] = "Test title"\n-            message["foo"] = "10"\n-            message["bar"] = "xyz"\n-            message.set_payload("<p>body</p>")\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            from plone.rfc822 import constructMessageFromSchemata\n+        readfile = DefaultReadFile(item)\n \n-            self.patch_global(constructMessageFromSchemata, return_value=message)\n+        self.assertEqual("message/rfc822", readfile.mimeType)\n \n-            body = b"""\\\n-title: Test title\n-foo: 10\n-bar: xyz\n-Portal-Type: testtype\n+    def test_readfile_mimetype_additional_schemata(self):\n+        # This is mostly a test that utils.iterSchemata takes\n+        # IBehaviorAssignable into account.\n \n-<p>body</p>"""\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+\n+        class ITestAdditional(Interface):\n+            # Additional behavior on an item\n+            body = schema.Text()\n+            stuff = schema.Bytes()\n \n-            # iter\n-            # next\n+        alsoProvides(ITestAdditional["body"], IPrimaryField)\n+        alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n+        alsoProvides(ITestAdditional, IFormFieldProvider)\n \n-            self.assertEqual(body, readfile.read())\n-            self.assertEqual(69, readfile.size())\n-            self.assertEqual("utf-8", readfile.encoding)\n-            self.assertEqual(None, readfile.name)\n-            self.assertEqual("text/plain", readfile.mimeType)\n+        class MockBehavior:\n+            def __init__(self, iface):\n+                self.interface = iface\n \n-            readfile.seek(2)\n-            self.assertEqual(2, readfile.tell())\n-            self.assertEqual(b"tl", readfile.read(2))\n-            self.assertEqual(4, readfile.tell())\n+        class MockBehaviorAssignable:\n+            def __init__(self, context):\n+                self.context = context\n \n-            readfile.seek(0, 2)\n-            self.assertEqual(69, readfile.tell())\n+            def enumerateBehaviors(self):\n+                yield MockBehavior(ITestAdditional)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n+        SCHEMA_CACHE.clear()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n+        self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            readfile.seek(0)\n-            self.assertEqual(b"title: Test title\\n", readfile.readline())\n+        readfile = DefaultReadFile(item)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n+        self.assertEqual("message/rfc822", readfile.mimeType)\n \n-            readfile.seek(0)\n-            self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n+    def test_readfile_operations(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            self.assertEqual(False, readfile.closed)\n-            readfile.close()\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-        def test_writefile_file_operations(self):\n-            class ITest(Interface):\n-                title = schema.TextLine()\n-                body = schema.Text()\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-            alsoProvides(ITest["body"], IPrimaryField)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            fti_mock = DexterityFTI(u"testtype")\n-            fti_mock.lookupSchema = Mock(return_value=ITest)\n-            fti_mock.behaviors = [ITestBehavior.__identifier__]\n+        item = Item("item")\n+        item.portal_type = "testtype"\n \n-            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+        readfile = DefaultReadFile(item)\n \n-            item = Item("item")\n-            item.portal_type = "testtype"\n-            item.title = u"Test title"\n-            item.foo = 10\n-            item.bar = "xyz"\n-            item.body = u"<p>body</p>"\n+        message = Message()\n+        message["title"] = "Test title"\n+        message["foo"] = "10"\n+        message["bar"] = "xyz"\n+        message.set_payload("<p>body</p>")\n \n-            writefile = DefaultWriteFile(item)\n+        from plone.rfc822 import constructMessageFromSchemata\n \n-            body = b"""\\\n+        self.patch_global(constructMessageFromSchemata, return_value=message)\n+\n+        body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1142,168 +1036,227 @@ class ITest(Interface):\n \n <p>body</p>"""\n \n-            from plone.rfc822 import initializeObjectFromSchemata\n+        # iter\n+        # next\n+\n+        self.assertEqual(body, readfile.read())\n+        self.assertEqual(69, readfile.size())\n+        self.assertEqual("utf-8", readfile.encoding)\n+        self.assertEqual(None, readfile.name)\n+        self.assertEqual("text/plain", readfile.mimeType)\n+\n+        readfile.seek(2)\n+        self.assertEqual(2, readfile.tell())\n+        self.assertEqual(b"tl", readfile.read(2))\n+        self.assertEqual(4, readfile.tell())\n+\n+        readfile.seek(0, 2)\n+        self.assertEqual(69, readfile.tell())\n+\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n \n-            self.patch_global(initializeObjectFromSchemata)\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n \n-            writefile.mimeType = "text/plain"\n-            self.assertEqual("text/plain", writefile.mimeType)\n+        readfile.seek(0)\n+        self.assertEqual(b"title: Test title\\n", readfile.readline())\n \n-            writefile.encoding = "latin1"\n-            self.assertEqual("latin1", writefile.encoding)\n+        readfile.seek(0)\n+        self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n \n-            writefile.filename = "test.html"\n-            self.assertEqual("test.html", writefile.filename)\n+        readfile.seek(0)\n+        self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n \n-            self.assertEqual(False, writefile.closed)\n-            self.assertEqual(0, writefile.tell())\n+        self.assertEqual(False, readfile.closed)\n+        readfile.close()\n \n-            writefile.writelines(["one\\n", "two"])\n-            self.assertEqual(7, writefile.tell())\n+    def test_writefile_file_operations(self):\n+        class ITest(Interface):\n+            title = schema.TextLine()\n+            body = schema.Text()\n \n-            self.assertRaises(NotImplementedError, writefile.truncate)\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n-            writefile.truncate(0)\n-            self.assertEqual(0, writefile.tell())\n+        fti_mock = DexterityFTI("testtype")\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-            self.assertRaises(NotImplementedError, writefile.seek, 10)\n+        self.mock_utility(fti_mock, IDexterityFTI, name="testtype")\n \n-            writefile.write(body[:10])\n-            writefile.write(body[10:])\n-            writefile.close()\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+        item.title = "Test title"\n+        item.foo = 10\n+        item.bar = "xyz"\n+        item.body = "<p>body</p>"\n \n-            self.assertEqual(True, writefile.closed)\n-            self.assertEqual(69, writefile.tell())\n+        writefile = DefaultWriteFile(item)\n \n-    class TestDAVTraversal(MockTestCase):\n-        def test_no_acquire_dav(self):\n-            container = Container("container")\n+        body = b"""\\\n+title: Test title\n+foo: 10\n+bar: xyz\n+Portal-Type: testtype\n \n-            outer = Folder("outer")\n-            outer._setOb("item", SimpleItem("item"))\n-            outer._setOb("container", container)\n+<p>body</p>"""\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n-            )\n-            request.maybe_webdav_client = True\n+        from plone.rfc822 import initializeObjectFromSchemata\n \n-            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+        self.patch_global(initializeObjectFromSchemata)\n \n-            r = traversal.publishTraverse(request, "item")\n+        writefile.mimeType = "text/plain"\n+        self.assertEqual("text/plain", writefile.mimeType)\n \n-            self.assertTrue(isinstance(r, NullResource))\n-            self.assertEqual(container, r.aq_parent)\n+        writefile.encoding = "latin1"\n+        self.assertEqual("latin1", writefile.encoding)\n \n-        def test_acquire_without_dav(self):\n-            container = Container("container")\n+        writefile.filename = "test.html"\n+        self.assertEqual("test.html", writefile.filename)\n \n-            outer = Folder("outer")\n-            outer._setObject("item", SimpleItem("item"))\n-            outer._setOb("container", container)\n+        self.assertEqual(False, writefile.closed)\n+        self.assertEqual(0, writefile.tell())\n \n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n-            )\n-            request.maybe_webdav_client = False\n+        writefile.writelines(["one\\n", "two"])\n+        self.assertEqual(7, writefile.tell())\n \n-            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+        self.assertRaises(NotImplementedError, writefile.truncate)\n \n-            r = traversal.publishTraverse(request, "item")\n+        writefile.truncate(0)\n+        self.assertEqual(0, writefile.tell())\n \n-            self.assertEqual(r.aq_base, outer["item"].aq_base)\n-            self.assertEqual(container, r.aq_parent)\n+        self.assertRaises(NotImplementedError, writefile.seek, 10)\n \n-        def test_folder_data_traversal_dav(self):\n-            container = Container("test")\n-            request = DAVTestRequest(environ={"URL": "http://site/test"})\n-            request.maybe_webdav_client = True\n+        writefile.write(body[:10])\n+        writefile.write(body[10:])\n+        writefile.close()\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        self.assertEqual(True, writefile.closed)\n+        self.assertEqual(69, writefile.tell())\n \n-            r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n \n-            self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n-            self.assertEqual(container, r.__parent__)\n-            self.assertEqual(container, r.aq_parent)\n+class TestDAVTraversal(MockTestCase):\n+    def test_no_acquire_dav(self):\n+        container = Container("container")\n \n-        def test_folder_data_traversal_without_dav(self):\n-            container = Container("test")\n-            request = DAVTestRequest(environ={"URL": "http://site/test"})\n-            request.maybe_webdav_client = False\n+        outer = Folder("outer")\n+        outer._setOb("item", SimpleItem("item"))\n+        outer._setOb("container", container)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n+        )\n+        request.maybe_webdav_client = True\n \n-            self.assertRaises(\n-                Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n-            )\n+        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-        def test_browser_default_dav(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+        r = traversal.publishTraverse(request, "item")\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n-            )\n-            request.maybe_webdav_client = True\n+        self.assertTrue(isinstance(r, NullResource))\n+        self.assertEqual(container, r.aq_parent)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+    def test_acquire_without_dav(self):\n+        container = Container("container")\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    (),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        outer = Folder("outer")\n+        outer._setObject("item", SimpleItem("item"))\n+        outer._setOb("container", container)\n \n-        def test_browser_default_dav_get(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n+        )\n+        request.maybe_webdav_client = False\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n-            )\n-            request.maybe_webdav_client = True\n+        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        r = traversal.publishTraverse(request, "item")\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    ("foo",),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        self.assertEqual(r.aq_base, outer["item"].aq_base)\n+        self.assertEqual(container, r.aq_parent)\n \n-        def test_browser_default_without_dav(self):\n-            class TestContainer(Container):\n-                def __browser_default__(self, request):\n-                    return self, ("foo",)\n+    def test_folder_data_traversal_dav(self):\n+        container = Container("test")\n+        request = DAVTestRequest(environ={"URL": "http://site/test"})\n+        request.maybe_webdav_client = True\n \n-            container = TestContainer("container")\n-            request = DAVTestRequest(\n-                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n-            )\n-            request.maybe_webdav_client = False\n+        traversal = DexterityPublishTraverse(container, request)\n \n-            traversal = DexterityPublishTraverse(container, request)\n+        r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n \n-            self.assertEqual(\n-                (\n-                    container,\n-                    ("foo",),\n-                ),\n-                traversal.browserDefault(request),\n-            )\n+        self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n+        self.assertEqual(container, r.__parent__)\n+        self.assertEqual(container, r.aq_parent)\n \n+    def test_folder_data_traversal_without_dav(self):\n+        container = Container("test")\n+        request = DAVTestRequest(environ={"URL": "http://site/test"})\n+        request.maybe_webdav_client = False\n \n-else:\n+        traversal = DexterityPublishTraverse(container, request)\n \n-    class TestDummy(MockTestCase):\n-        def test_dummy(self):\n-            pass\n+        self.assertRaises(\n+            Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n+        )\n+\n+    def test_browser_default_dav(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n+\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n+        )\n+        request.maybe_webdav_client = True\n+\n+        traversal = DexterityPublishTraverse(container, request)\n+\n+        self.assertEqual(\n+            (\n+                container,\n+                (),\n+            ),\n+            traversal.browserDefault(request),\n+        )\n+\n+    def test_browser_default_dav_get(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n+\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n+        )\n+        request.maybe_webdav_client = True\n+\n+        traversal = DexterityPublishTraverse(container, request)\n+\n+        self.assertEqual(\n+            (\n+                container,\n+                ("foo",),\n+            ),\n+            traversal.browserDefault(request),\n+        )\n+\n+    def test_browser_default_without_dav(self):\n+        class TestContainer(Container):\n+            def __browser_default__(self, request):\n+                return self, ("foo",)\n+\n+        container = TestContainer("container")\n+        request = DAVTestRequest(\n+            environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n+        )\n+        request.maybe_webdav_client = False\n+\n+        traversal = DexterityPublishTraverse(container, request)\n+\n+        self.assertEqual(\n+            (\n+                container,\n+                ("foo",),\n+            ),\n+            traversal.browserDefault(request),\n+        )\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 745a3946..deba0fa3 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n from Acquisition import aq_base\n from Acquisition import aq_inner\n@@ -24,7 +23,6 @@\n \n import datetime\n import logging\n-import six\n \n \n deprecation.deprecated("SchemaNameEncoder", "moved to plone.dexterity.schema")\n@@ -55,8 +53,7 @@ def iterSchemataForType(portal_type):\n     main_schema = SCHEMA_CACHE.get(portal_type)\n     if main_schema:\n         yield main_schema\n-    for schema in getAdditionalSchemata(portal_type=portal_type):\n-        yield schema\n+    yield from getAdditionalSchemata(portal_type=portal_type)\n \n \n def iterSchemata(context):\n@@ -66,8 +63,7 @@ def iterSchemata(context):\n     main_schema = SCHEMA_CACHE.get(context.portal_type)\n     if main_schema:\n         yield main_schema\n-    for schema in getAdditionalSchemata(context=context):\n-        yield schema\n+    yield from getAdditionalSchemata(context=context)\n \n \n def getAdditionalSchemata(context=None, portal_type=None):\n@@ -189,13 +185,13 @@ def createContentInContainer(container, portal_type, checkConstraints=True, **kw\n \n \n def safe_utf8(st):\n-    if isinstance(st, six.text_type):\n+    if isinstance(st, str):\n         st = st.encode("utf8")\n     return st\n \n \n def safe_unicode(st):\n-    if isinstance(st, six.binary_type):\n+    if isinstance(st, bytes):\n         st = st.decode("utf8")\n     return st\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615de..53925129 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -18,3 +18,26 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[tool.isort]\n+profile = "black"\n+force_alphabetical_sort = true\n+force_single_line = true\n+lines_after_imports = 2\n+\n+[tool.flakeheaven.plugins]\n+# Disable some checks.\n+# - E501 line too long\n+#   flake8 is already testing this, with max-line-length=100000 in .flake8,\n+#   so pycodestyle should not test it.\n+# - W503 line break before binary operator\n+#   Outdated recommendation, see https://www.flake8rules.com/rules/W503.html\n+mccabe = ["+*"]\n+pycodestyle = ["+*", "-E501", "-W503"]\n+pyflakes = ["+*"]\n+pylint = ["+*"]\n+\n+[tool.plone-code-analysis]\n+paths = "plone/ setup.py"\n+paths_pyroma = "."\n+paths_zpretty = "plone/"\ndiff --git a/setup.cfg b/setup.cfg\nindex 1fc545d8..39d5b457 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -24,12 +24,6 @@ input_file = plone/dexterity/locales/plone.dexterity.pot\n output_dir = plone/dexterity/locales\n previous = true\n \n-[check-manifest]\n-ignore =\n-    buildout.cfg\n-\n-\n-\n [isort]\n force_alphabetical_sort = True\n force_single_line = True\n@@ -40,4 +34,8 @@ use_parentheses = True\n multi_line_output = 3\n \n [bdist_wheel]\n-universal = 1\n+universal = 0\n+\n+[check-manifest]\n+ignore =\n+  Makefile\ndiff --git a/setup.py b/setup.py\nindex 3edc5053..2ed8edb8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,9 +1,8 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = "2.10.5.dev0"\n+version = "3.0.0b3.dev0"\n \n \n def read(filename):\n@@ -32,32 +31,32 @@ def read(filename):\n     version=version,\n     description=short_description,\n     long_description=long_description,\n-    # Get more strings from\n-    # https://pypi.org/classifiers/\n+    # Get more strings from https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.2",\n         "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords="plone dexterity contenttypes",\n     author="Martin Aspeli",\n     author_email="optilude@gmail.com",\n-    url="https://pypi.org/project/plone.dexterity",\n+    maintainer="The Plone Release Team and Community",\n+    maintainer_email="releaseteam@plone.org",\n+    url="https://github.com/plone/plone.dexterity",\n     license="GPL version 2",\n     packages=find_packages(),\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.7",\n     install_requires=[\n         "DateTime>=4.0.1",\n         "plone.alterego",\n@@ -67,14 +66,12 @@ def read(filename):\n         "plone.memoize",\n         "plone.rfc822",\n         "plone.supermodel>=1.0b2",\n-        "plone.synchronize",\n         "plone.uuid",\n         "plone.z3cform>=0.6.0",\n         "Products.CMFCore",\n         "Products.CMFDynamicViewFTI",\n         "Products.statusmessages",\n         "setuptools",\n-        "six",\n         "zope.annotation",\n         "zope.browser",\n         "zope.component",\n@@ -84,17 +81,11 @@ def read(filename):\n         "zope.filerepresentation>=3.6.0",\n         "zope.interface",\n         "zope.lifecycleevent",\n-        "zope.location",\n         "zope.publisher",\n         "zope.schema",\n         "zope.security",\n         "zope.size",\n         "Zope",\n     ],\n-    extras_require={\n-        "test": ["plone.testing", "Products.CMFPlone", "mock;python_version<\'3\'"]\n-    },\n-    entry_points="""\n-    # -*- Entry points: -*-\n-    """,\n+    extras_require={"test": ["plone.testing", "Products.CMFPlone"]},\n )\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-10-07T00:33:47+02:00
Author: mamico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/f67e86c1f7ffa38c1d54d4d5ae92d0dd554e9a69

lint

Files changed:
M plone/dexterity/tests/test_content.py

b'diff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex a7bab47..25f0bf6 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -1004,60 +1004,54 @@ def test_verifyObjectPaste_fti_does_not_allow_content(self):\n \n     def test_verifyObjectPaste_locally_disallowed_contents(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n-        \n-        class DummyConstrainTypes(object):\n \n+        class DummyConstrainTypes(object):\n             def __init__(self, context):\n                 self.context = context\n \n             def allowedContentTypes(self):\n \n-                fti = getUtility(IDexterityFTI, name=u"news")\n+                fti = getUtility(IDexterityFTI, name="news")\n                 return [fti]\n \n-        self.mock_adapter(\n-            DummyConstrainTypes, IConstrainTypes, (IDexterityContainer, ))\n+        self.mock_adapter(DummyConstrainTypes, IConstrainTypes, (IDexterityContainer,))\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(u"news"))\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"news")\n+        fti_mock = Mock(wraps=DexterityFTI("news"))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="news")\n \n         fti_mock2 = Mock()\n         fti_mock2.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(fti_mock2, ITypeInformation, name=\'document\')\n+        self.mock_utility(fti_mock2, ITypeInformation, name="document")\n \n         mock_pt = Mock()\n         mock_pt.getTypeInfo = Mock(return_value=None)\n-        self.mock_tool(mock_pt, \'portal_types\')\n+        self.mock_tool(mock_pt, "portal_types")\n         self.mock_utility(mock_pt, ITypesTool)\n \n-        document = Item(id=\'test document\')\n-        document.__factory_meta_type__ = \'document\'\n-        document.portal_type = \'document\'\n-        news = Item(id=\'test news\')\n-        news.__factory_meta_type__ = \'news\'\n-        news.portal_type = \'news\'\n+        document = Item(id="test document")\n+        document.__factory_meta_type__ = "document"\n+        document.portal_type = "document"\n+        news = Item(id="test news")\n+        news.__factory_meta_type__ = "news"\n+        news.portal_type = "news"\n \n         container = Container(id="testfolder")\n-        container.all_meta_types = [{\'name\': \'document\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'},{\'name\': \'news\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'}]\n-        container.manage_permission(\'View\', (\'Anonymous\',))\n-        container[\'test-document\'] = document\n-        container[\'test-news\'] = news\n-        document_content = container[\'test-document\']\n-        news_content = container[\'test-news\']\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"},\n+            {"name": "news", "action": None, "permission": "View"},\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test-document"] = document\n+        container["test-news"] = news\n+        document_content = container["test-document"]\n+        news_content = container["test-news"]\n \n         # can paste news\n         container._verifyObjectPaste(news_content, False)\n         # cannot paste documents\n         self.assertRaises(\n-            ValueError,\n-            container._verifyObjectPaste,\n-            document_content,\n-            False\n+            ValueError, container._verifyObjectPaste, document_content, False\n         )\n \n     def test_verifyObjectPaste_fti_does_allow_content(self):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-11-23T11:35:05+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/c307f9a2a3d332eadc3b204a386000e8dbe2cb70

Merge branch 'master' into respect_allowed_types_in_paste

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 2ed8edb..01d7301 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -43,6 +43,7 @@ def read(filename):\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords="plone dexterity contenttypes",\n@@ -60,12 +61,12 @@ def read(filename):\n     install_requires=[\n         "DateTime>=4.0.1",\n         "plone.alterego",\n-        "plone.autoform>=1.0b2",\n-        "plone.behavior>=1.0b5",\n+        "plone.autoform>=1.0",\n+        "plone.behavior>=1.0",\n         "plone.folder",\n         "plone.memoize",\n         "plone.rfc822",\n-        "plone.supermodel>=1.0b2",\n+        "plone.supermodel>=1.0",\n         "plone.uuid",\n         "plone.z3cform>=0.6.0",\n         "Products.CMFCore",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2022-11-23T18:18:51+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/e044d48e063e152aeeda2fef193c8f6141862396

Merge branch 'master' into respect_allowed_types_in_paste

Files changed:
M plone/dexterity/tests/test.xml

b'diff --git a/plone/dexterity/tests/test.xml b/plone/dexterity/tests/test.xml\nindex 8c31f84..9789d69 100644\n--- a/plone/dexterity/tests/test.xml\n+++ b/plone/dexterity/tests/test.xml\n@@ -1,3 +1,4 @@\n+<?xml version="1.0" encoding="utf-8"?>\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n   <schema>\n     <field name="title"\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-08-16T10:07:14+02:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/abe480b4501b2b049dd6421bac58c69a44bc7983

Merge branch 'master' into respect_allowed_types_in_paste

Files changed:
A .editorconfig
A .flake8
A .github/workflows/meta.yml
A .meta.toml
A .pre-commit-config.yaml
A news/55bda5c9.internal
A tox.ini
M .gitignore
M CHANGES.rst
M MANIFEST.in
M README.rst
M plone/dexterity/browser/add.py
M plone/dexterity/browser/configure.zcml
M plone/dexterity/browser/containercontentcore.pt
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.pt
M plone/dexterity/browser/item.pt
M plone/dexterity/browser/itemcontentcore.pt
M plone/dexterity/browser/traversal.py
M plone/dexterity/content.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/interfaces.py
M plone/dexterity/primary.py
M plone/dexterity/schema.py
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_filerepresentation.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_synchronize.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M pyproject.toml
M setup.py
D .github/workflows/code-analysis.yml
D setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..919b411\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[*.{json,jsonl,js,jsx,ts,tsx,css,less,scss,html}]  # Frontend development\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [editorconfig]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 0000000..7ef4f64\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,22 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [flake8]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.github/workflows/code-analysis.yml b/.github/workflows/code-analysis.yml\ndeleted file mode 100644\nindex 8411110..0000000\n--- a/.github/workflows/code-analysis.yml\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-name: Code Analysis\n-on:\n-  push:\n-\n-jobs:\n-  code-analysis:\n-    name: Code analysis\n-    runs-on: ubuntu-latest\n-\n-    steps:\n-      - name: Checkout codebase\n-        uses: actions/checkout@v2\n-\n-      - name: Run all lint checks\n-        uses: plone/code-analysis-action@v2\ndiff --git a/.github/workflows/meta.yml b/.github/workflows/meta.yml\nnew file mode 100644\nindex 0000000..4748f0f\n--- /dev/null\n+++ b/.github/workflows/meta.yml\n@@ -0,0 +1,28 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+name: Meta\n+on:\n+  push:\n+    branches:\n+      - master\n+      - main\n+  pull_request:\n+    branches:\n+      - master\n+      - main\n+  workflow_dispatch:\n+\n+jobs:\n+  qa:\n+    uses: plone/meta/.github/workflows/qa.yml@master\n+  test:\n+    uses: plone/meta/.github/workflows/test.yml@master\n+  coverage:\n+    uses: plone/meta/.github/workflows/coverage.yml@master\n+  dependencies:\n+    uses: plone/meta/.github/workflows/dependencies.yml@master\n+  release-ready:\n+    uses: plone/meta/.github/workflows/release_ready.yml@master\n+  circular:\n+    uses: plone/meta/.github/workflows/circular.yml@master\ndiff --git a/.gitignore b/.gitignore\nindex b5c2d05..0690a90 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,12 +1,50 @@\n-*.py?\n-plone.dexterity.egg-info/\n-*.mo\n-*.project\n-*.pydevproject\n-.settings/\n-.installed.cfg\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+# python related\n+*.egg-info\n+*.pyc\n+*.pyo\n+\n+# tools related\n+build/\n+.coverage\n+coverage.xml\n+dist/\n+docs/_build\n+__pycache__/\n+.tox\n+.vscode/\n+node_modules/\n+\n+# venv / buildout related\n bin/\n+develop-eggs/\n+eggs/\n+.eggs/\n+etc/\n+.installed.cfg\n lib/\n-include/\n+lib64\n+.mr.developer.cfg\n parts/\n-develop-eggs/\n+pyvenv.cfg\n+var/\n+\n+# mxdev\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\n+.installed.txt\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [gitignore]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..9d18a5e\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,9 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[meta]\n+template = "default"\n+commit-id = "55bda5c9"\n+\n+[pyproject]\n+codespell_ignores = "succeded"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..f6f0483\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,76 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.10.1\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.7.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.1.0\n+    hooks:\n+    -   id: zpretty\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  zpretty_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.1.0\n+    hooks:\n+    -   id: flake8\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.5\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  codespell_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\n+-   repo: https://github.com/mgedmin/check-python-versions\n+    rev: "0.21.3"\n+    hooks:\n+    -   id: check-python-versions\n+        args: [\'--only\', \'setup.py,pyproject.toml\']\n+-   repo: https://github.com/collective/i18ndude\n+    rev: "6.1.0"\n+    hooks:\n+    -   id: i18ndude\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 8749bab..6ad23f1 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,51 @@ Changelog\n \n .. towncrier release notes start\n \n+3.0.2 (2023-03-14)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Type error is removed and none is returned.\n+  In this modified version of the code, if no primary field adapter is found, the fieldname and field attributes are set to None.\n+  The value property checks whether the field attribute is None, and returns None if it is, instead of raising an error.\n+  [Coder-aadarsh] (#59)\n+\n+\n+Internal:\n+\n+\n+- Update configuration files.\n+  [plone devs] (13d8d6c0)\n+\n+\n+Tests\n+\n+\n+- Fix webdav tests to pass with Zope 5.8 and the master branch.\n+  [maurits] (#844)\n+\n+\n+3.0.1 (2023-02-08)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Configure packages with plone/meta.\n+  [gforcada] (#1)\n+\n+\n+3.0.0 (2022-12-02)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Final release for Plone 6.0.0 (#600)\n+\n+\n 3.0.0b2 (2022-08-30)\n --------------------\n \n@@ -198,7 +243,7 @@ Bug fixes:\n Bug fixes:\n \n \n-- Speedup (~1.6x) parallel thread execution by removing superfluos synchronization [jensens] (#123)\n+- Speedup (~1.6x) parallel thread execution by removing superfluous synchronization [jensens] (#123)\n \n \n 2.9.4 (2019-12-26)\n@@ -234,7 +279,7 @@ Bug fixes:\n - Performance enhancement:\n   Refine pre-filtering of attributes on content ``__getattr__``.\n   Filter out all permissions (ending with ``_Permission``) and some portal-tools.\n-  Also often called aquired functions are skipped.\n+  Also often called acquired functions are skipped.\n   [jensens] (#116)\n - Performance enhancement: avoid a providedBy in ``_default_from_schema``.\n   [jensens] (#117)\n@@ -540,7 +585,7 @@ Fixes:\n   behaviors weren\'t taken into account, or only FTI based behaviors but not\n   those returned by the IBehaviorAssignable adapter. Also the caching was\n   cleaned up. The tests are now better readable (at least I hope so).  In order\n-  to avoid circular imports some methods where moved fro ``utils.py`` to\n+  to avoid circular imports some methods where moved for ``utils.py`` to\n   ``schema.py``.  Deprecations are in place.\n   [jensens]\n \n@@ -603,7 +648,7 @@ Fixes:\n   [toutpt]\n \n - Date index method works even if source field is a dexterity field\n-  wich provides a  datetime python value.\n+  which provides a  datetime python value.\n   Now you can manually add a field with the name of a common Plone metadata field\n   (as effective_date, publication_date, etc.)\n   [tdesvenain]\n@@ -692,7 +737,7 @@ Fixes:\n * Added Finnish translations.\n   [pingviini]\n \n-* Overrride allowedContentTypes and invokeFactory from PortalFolder\n+* Override allowedContentTypes and invokeFactory from PortalFolder\n   to mimic the behavior of Archetypes based folders. This allows the\n   registration of IConstrainTypes adapters to actually have the\n   expected effect.\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex fd7011e..f51ca02 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -10,3 +10,4 @@ global-exclude *.pyc\n include pyproject.toml\n recursive-exclude news *\n exclude news\n+exclude Makefile\ndiff --git a/README.rst b/README.rst\nindex f6fc562..a61d72d 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -226,6 +226,6 @@ The `Dexterity Developer Manual <http://docs.plone.org/external/plone.app.dexter\n Source Code\n ===========\n \n-Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n+Contributors please read the document `Contributing to Plone <https://6.docs.plone.org/contributing/index.html>`_\n \n Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.dexterity>`_.\ndiff --git a/news/55bda5c9.internal b/news/55bda5c9.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/55bda5c9.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 3350bc0..bc74398 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -85,7 +85,6 @@ def create(self, data):\n         return aq_base(content)\n \n     def add(self, object):\n-\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n         new_object = addContentToContainer(self.container, object)\n \ndiff --git a/plone/dexterity/browser/configure.zcml b/plone/dexterity/browser/configure.zcml\nindex e532b17..65df9de 100644\n--- a/plone/dexterity/browser/configure.zcml\n+++ b/plone/dexterity/browser/configure.zcml\n@@ -14,7 +14,7 @@\n       />\n \n   <!-- Content core views -->\n-  <!-- Note: the templaces are the same since the changes for\n+  <!-- Note: the templates are the same since the changes for\n          https://github.com/plone/Products.CMFPlone/issues/3177\n          That may be okay: makes it easier to customize\n          only the template for items or for containers. -->\ndiff --git a/plone/dexterity/browser/containercontentcore.pt b/plone/dexterity/browser/containercontentcore.pt\nindex 2e07bdf..6deb6fe 100644\n--- a/plone/dexterity/browser/containercontentcore.pt\n+++ b/plone/dexterity/browser/containercontentcore.pt\n@@ -1,21 +1,28 @@\n <metal:content-core define-macro="content-core">\n \n   <tal:block repeat="widget view/widgets/values">\n-      <div class="field" tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+    <div class="field"\n+         tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </tal:block>\n \n   <fieldset tal:repeat="group view/groups"\n-            tal:attributes="id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\')">\n-      <legend tal:content="group/label" />\n-      <div class="field" tal:repeat="widget group/widgets/values">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+            tal:attributes="\n+              id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\');\n+            "\n+  >\n+    <legend tal:content="group/label"></legend>\n+    <div class="field"\n+         tal:repeat="widget group/widgets/values"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </fieldset>\n \n </metal:content-core>\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex 79634ae..311853a 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -16,7 +16,6 @@\n \n \n class DefaultEditForm(DexterityExtensibleForm, form.EditForm):\n-\n     success_message = _("Changes saved")\n \n     @button.buttonAndHandler(_("Save"), name="save")\ndiff --git a/plone/dexterity/browser/fti.pt b/plone/dexterity/browser/fti.pt\nindex 728200e..1cc4a38 100644\n--- a/plone/dexterity/browser/fti.pt\n+++ b/plone/dexterity/browser/fti.pt\n@@ -1,46 +1,79 @@\n <h1 tal:replace="structure context/manage_page_header">PAGE HEADER</h1>\n-<h2 tal:define="form_title view/title"\n-    tal:replace="structure context/manage_form_title">FORM TITLE</h2>\n+<h2 tal:define="\n+      form_title view/title;\n+    "\n+    tal:replace="structure context/manage_form_title"\n+>FORM TITLE</h2>\n \n-<p class="form-help" tal:content="view/description">DESCRIPTION TEXT.</p>\n+<p class="form-help"\n+   tal:content="view/description"\n+>DESCRIPTION TEXT.</p>\n \n-<form action="." method="post"\n-   tal:attributes="action request/ACTUAL_URL">\n-<table cellspacing="0" cellpadding="2" border="0">\n- <tr>\n-  <td>\n-   <div class="form-label">ID</div>\n-  </td>\n-  <td>\n-   <input type="text" name="add_input_name" size="40" />\n-  </td>\n- </tr>\n- <tr tal:condition="view/getProfileInfos">\n-  <td>\n-   <div class="form-label">Presettings</div>\n-  </td>\n-  <td>\n-   <select name="settings_id">\n-    <option value="" selected="selected">(None)</option>\n-    <optgroup label="PROFILE_TITLE"\n-       tal:repeat="profile view/getProfileInfos"\n-       tal:attributes="label profile/title">\n-     <option value="SETTINGS_ID"\n-             tal:repeat="obj_id profile/obj_ids"\n-             tal:attributes="value string:${profile/id}/${obj_id}"\n-             tal:content="obj_id">OBJ ID</option></optgroup>\n-   </select>\n-  </td>\n- </tr>\n- <tr>\n-  <td>\n+<form action="."\n+      method="post"\n+      tal:attributes="\n+        action request/ACTUAL_URL;\n+      "\n+>\n+  <table border="0"\n+         cellpadding="2"\n+         cellspacing="0"\n+  >\n+    <tr>\n+      <td>\n+        <div class="form-label"\n+             i18n:translate=""\n+        >ID</div>\n+      </td>\n+      <td>\n+        <input name="add_input_name"\n+               size="40"\n+               type="text"\n+        />\n+      </td>\n+    </tr>\n+    <tr tal:condition="view/getProfileInfos">\n+      <td>\n+        <div class="form-label"\n+             i18n:translate=""\n+        >Presettings</div>\n+      </td>\n+      <td>\n+        <select name="settings_id">\n+          <option selected="selected"\n+                  value=""\n+                  i18n:translate=""\n+          >(None)</option>\n+          <optgroup label="PROFILE_TITLE"\n+                    tal:repeat="profile view/getProfileInfos"\n+                    tal:attributes="\n+                      label profile/title;\n+                    "\n+          >\n+            <option value="SETTINGS_ID"\n+                    tal:repeat="obj_id profile/obj_ids"\n+                    tal:content="obj_id"\n+                    tal:attributes="\n+                      value string:${profile/id}/${obj_id};\n+                    "\n+            >OBJ ID</option></optgroup>\n+        </select>\n+      </td>\n+    </tr>\n+    <tr>\n+      <td>\n    &nbsp;\n-  </td>\n-  <td>\n-   <input class="form-element" type="submit" name="submit_add" value="Add" />\n-  </td>\n- </tr>\n-</table>\n+      </td>\n+      <td>\n+        <input class="form-element"\n+               name="submit_add"\n+               type="submit"\n+               value="Add"\n+               i18n:attributes="value"\n+        />\n+      </td>\n+    </tr>\n+  </table>\n </form>\n \n <h1 tal:replace="structure context/manage_page_footer">PAGE FOOTER</h1>\ndiff --git a/plone/dexterity/browser/item.pt b/plone/dexterity/browser/item.pt\nindex 55324f2..ae2da0c 100644\n--- a/plone/dexterity/browser/item.pt\n+++ b/plone/dexterity/browser/item.pt\n@@ -1,38 +1,50 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/@@main_template/macros/master"\n-      i18n:domain="plone">\n-<body>\n-\n-<metal:main fill-slot="main">\n-\n-    <h1 class="documentFirstHeading" tal:content="context/Title" />\n-\n-    <p class="documentDescription" tal:content="context/Description" />\n-\n-    <tal:block repeat="widget view/widgets/values">\n-        <div class="field" tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)">\n-            <label tal:content="widget/label" />\n-            <br />\n-            <div tal:content="structure widget/render" />\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n+  <body>\n+\n+    <metal:main fill-slot="main">\n+\n+      <h1 class="documentFirstHeading"\n+          tal:content="context/Title"\n+      ></h1>\n+\n+      <p class="documentDescription"\n+         tal:content="context/Description"\n+      ></p>\n+\n+      <tal:block repeat="widget view/widgets/values">\n+        <div class="field"\n+             tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)"\n+        >\n+          <label tal:content="widget/label"></label>\n+          <br />\n+          <div tal:content="structure widget/render"></div>\n         </div>\n-    </tal:block>\n-\n-    <fieldset tal:repeat="group view/groups"\n-              tal:attributes="id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\')">\n-        <legend tal:content="group/label" />\n-        <div class="field" tal:repeat="widget group/widgets/values">\n-            <label tal:content="widget/label" />\n-            <br />\n-            <div tal:content="structure widget/render" />\n+      </tal:block>\n+\n+      <fieldset tal:repeat="group view/groups"\n+                tal:attributes="\n+                  id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\');\n+                "\n+      >\n+        <legend tal:content="group/label"></legend>\n+        <div class="field"\n+             tal:repeat="widget group/widgets/values"\n+        >\n+          <label tal:content="widget/label"></label>\n+          <br />\n+          <div tal:content="structure widget/render"></div>\n         </div>\n-    </fieldset>\n+      </fieldset>\n \n-</metal:main>\n+    </metal:main>\n \n-</body>\n+  </body>\n </html>\n-\ndiff --git a/plone/dexterity/browser/itemcontentcore.pt b/plone/dexterity/browser/itemcontentcore.pt\nindex 2e07bdf..6deb6fe 100644\n--- a/plone/dexterity/browser/itemcontentcore.pt\n+++ b/plone/dexterity/browser/itemcontentcore.pt\n@@ -1,21 +1,28 @@\n <metal:content-core define-macro="content-core">\n \n   <tal:block repeat="widget view/widgets/values">\n-      <div class="field" tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+    <div class="field"\n+         tal:condition="python:widget.__name__ not in (\'IBasic.title\', \'IBasic.description\', \'title\', \'description\',)"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </tal:block>\n \n   <fieldset tal:repeat="group view/groups"\n-            tal:attributes="id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\')">\n-      <legend tal:content="group/label" />\n-      <div class="field" tal:repeat="widget group/widgets/values">\n-          <label tal:content="widget/label" />\n-          <br />\n-          <div tal:content="structure widget/render" />\n-      </div>\n+            tal:attributes="\n+              id python:\'\'.join((group.prefix, \'groups.\', group.__name__)).replace(\'.\', \'-\');\n+            "\n+  >\n+    <legend tal:content="group/label"></legend>\n+    <div class="field"\n+         tal:repeat="widget group/widgets/values"\n+    >\n+      <label tal:content="widget/label"></label>\n+      <br />\n+      <div tal:content="structure widget/render"></div>\n+    </div>\n   </fieldset>\n \n </metal:content-core>\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex fa8f1cd..55e6b9e 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -7,12 +7,7 @@\n from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n-\n-\n-try:\n-    from repoze.zope2.publishtraverse import DefaultPublishTraverse\n-except ImportError:\n-    from ZPublisher.BaseRequest import DefaultPublishTraverse\n+from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n \n @adapter(IDexterityContent, IBrowserRequest)\n@@ -30,7 +25,6 @@ def __init__(self, context, request):\n         self.request = request\n \n     def publishTraverse(self, request, name):\n-\n         context = aq_inner(self.context)\n \n         # If we are trying to traverse to the folder "body" pseudo-object\n@@ -64,7 +58,6 @@ def publishTraverse(self, request, name):\n         return defaultTraversal\n \n     def browserDefault(self, request):\n-\n         # If this is not a WebDAV request, we don\'t want to give a\n         # default view. The ZPublisher\'s WebDAV implementation doesn\'t\n         # deal well with default views.\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex d54d46a..ae01bcf 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -340,9 +340,8 @@ def __init__(\n         format=_marker,\n         language=_marker,\n         rights=_marker,\n-        **kwargs\n+        **kwargs,\n     ):\n-\n         if id is not None:\n             self.id = id\n         now = DateTime()\n@@ -368,7 +367,7 @@ def __init__(\n         if rights is not _marker:\n             self.setRights(rights)\n \n-        for (k, v) in kwargs.items():\n+        for k, v in kwargs.items():\n             setattr(self, k, v)\n \n     def __getattr__(self, name):\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex 70ccdfb..6d918b9 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -44,7 +44,7 @@ def export(self, export_context, subdir, root=False):\n         context = self.context\n \n         if not root:\n-            subdir = "{}/{}".format(subdir, context.getId())\n+            subdir = f"{subdir}/{context.getId()}"\n \n         exportable = self.listExportableItems()\n \n@@ -52,7 +52,6 @@ def export(self, export_context, subdir, root=False):\n         csv_writer = writer(stream)\n \n         for object_id, object, adapter in exportable:\n-\n             factory_namer = IContentFactoryName(object, None)\n             if factory_namer is None:\n                 factory_name = _getDottedName(object.__class__)\n@@ -86,7 +85,7 @@ def import_(self, import_context, subdir, root=False):\n         """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = "{}/{}".format(subdir, context.getId())\n+            subdir = f"{subdir}/{context.getId()}"\n \n         data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n@@ -128,16 +127,13 @@ def import_(self, import_context, subdir, root=False):\n         existing = context.objectIds()\n \n         for object_id, type_name in rows:\n-\n             if object_id not in existing:\n                 object = self._makeInstance(\n                     object_id, type_name, subdir, import_context\n                 )\n                 if object is None:\n                     logger = import_context.getLogger("SFWA")\n-                    logger.warning(\n-                        "Couldn\'t make instance: {}/{}".format(subdir, object_id)\n-                    )\n+                    logger.warning(f"Couldn\'t make instance: {subdir}/{object_id}")\n                     continue\n \n             wrapped = context._getOb(object_id)\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex fc87b38..d840af5 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -57,4 +57,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return "<{} for {}>".format(self.__class__.__name__, self.portal_type)\n+        return f"<{self.__class__.__name__} for {self.portal_type}>"\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 046e71d..3d79ece 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -294,7 +294,7 @@ def id(self):\n         return self.__name__\n \n     def getId(self):\n-        # Get id for traveral purposes.\n+        # Get id for traversal purposes.\n         return self.__name__\n \n     @security.protected(permissions.View)\n@@ -457,7 +457,6 @@ def __init__(self, context):\n         self.context = context\n \n     def __call__(self, name, contentType, data):\n-\n         # Deal with Finder cruft\n         if name == ".DS_Store":\n             raise Unauthorized("Refusing to store Mac OS X resource forks")\n@@ -488,14 +487,12 @@ def __call__(self, name, contentType, data):\n         # sane thing for content with new-style factories.\n \n         if targetType.product:  # boo :(\n-\n             newName = self.context.invokeFactory(typeObjectName, name)\n             obj = aq_base(self.context._getOb(newName))\n             self.context._delObject(newName)\n             return obj\n \n         else:  # yay\n-\n             contextType = typesTool.getTypeInfo(self.context)\n             if contextType is not None:\n                 if not contextType.allowType(typeObjectName):\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex f4ec43b..6e4a6b1 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -246,7 +246,6 @@ def lookupSchema(self):\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n-\n         if self.model_source:\n             return loadString(self.model_source, policy=self.schema_policy)\n \n@@ -459,7 +458,7 @@ def ftiAdded(object, event):\n \n \n def ftiRemoved(object, event):\n-    """When the FTI is removed, uninstall local coponents"""\n+    """When the FTI is removed, uninstall local components"""\n \n     if not IDexterityFTI.providedBy(event.object):\n         return\n@@ -531,12 +530,10 @@ def ftiModified(object, event):\n         or "model_file" in mod\n         or "schema_policy" in mod\n     ):\n-\n         # Determine if we need to re-sync a dynamic schema\n         if (fti.model_source or fti.model_file) and (\n             "model_source" in mod or "model_file" in mod or "schema_policy" in mod\n         ):\n-\n             schemaName = portalTypeToSchemaName(portal_type, suffix=get_suffix(fti))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex 4dc07b1..5296e1d 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -9,7 +9,6 @@\n \n \n class IContentType(Interface):\n-\n     pass\n \n \ndiff --git a/plone/dexterity/primary.py b/plone/dexterity/primary.py\nindex 3e98ffe..71eca1c 100644\n--- a/plone/dexterity/primary.py\n+++ b/plone/dexterity/primary.py\n@@ -19,10 +19,8 @@ def __init__(self, context):\n                 if IPrimaryField.providedBy(field):\n                     primary = (name, field)\n                     break\n-        if not primary:\n-            raise TypeError("Could not adapt", context, IPrimaryFieldInfo)\n-        self.fieldname, self.field = primary\n+        self.fieldname, self.field = primary or (None, None)\n \n     @property\n     def value(self):\n-        return self.field.get(self.context)\n+        return self.field.get(self.context) if self.field else None\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 41a7468..0a87261 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -126,14 +126,14 @@ class SchemaCache:\n     You should only use this if you require bare-metal speed. For almost all\n     operations, it\'s safer and easier to do:\n \n-        >>> fti = getUtility(IDexterityFTI, name=portal_type)\n-        >>> schema = fti.lookupSchema()\n+        >> fti = getUtility(IDexterityFTI, name=portal_type)\n+        >> schema = fti.lookupSchema()\n \n     The lookupSchema() call is probably as fast as this cache. However, if\n     you need to avoid the utility lookup, you can use the cache like so:\n \n-        >>> from plone.dexterity.schema import SCHEMA_CACHE\n-        >>> my_schema = SCHEMA_CACHE.get(portal_type)\n+        >> from plone.dexterity.schema import SCHEMA_CACHE\n+        >> my_schema = SCHEMA_CACHE.get(portal_type)\n \n     The cache uses the FTI\'s modification time as its invariant.\n     """\n@@ -289,7 +289,7 @@ def invalidate_schema(event):\n         SCHEMA_CACHE.clear()\n \n \n-# here starts the code dealing wih dynamic schemas.\n+# here starts the code dealing with dynamic schemas.\n class SchemaNameEncoder:\n     """Schema name encoding"""\n \ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex ee45d91..e9c25d1 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -24,7 +24,6 @@ class IFour(IThree):\n \n class TestBehavior(MockTestCase):\n     def test_supports(self):\n-\n         # Context mock\n         context_dummy = self.create_dummy(portal_type="testtype")\n \n@@ -47,7 +46,6 @@ def test_supports(self):\n         self.assertEqual(True, assignable.supports(IFour))\n \n     def test_enumerate(self):\n-\n         # Context mock\n         context_dummy = self.create_dummy(portal_type="testtype")\n \ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 25f0bf6..cb0773b 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -88,7 +88,6 @@ class IMarker(Interface):\n         self.assertTrue(ISchema.providedBy(item))\n \n     def test_provided_by_subclass(self):\n-\n         # Make sure the __providedBy__ descriptor lives in sub-classes\n \n         # Dummy type\n@@ -144,7 +143,6 @@ class IMarker(Interface):\n         self.assertTrue(ISchema.providedBy(item))\n \n     def test_provided_by_subclass_nojar(self):\n-\n         # Dummy type\n         class MyItem(Item):\n             pass\n@@ -191,7 +189,6 @@ class IMarker(Interface):\n         self.assertTrue(ISchema.providedBy(item))\n \n     def test_provided_by_behavior_subtype(self):\n-\n         # Dummy type\n         class MyItem(Item):\n             pass\n@@ -287,7 +284,6 @@ class IMarker2(Interface):\n         self.assertTrue(IMarker2.providedBy(item))\n \n     def test_provided_by_behavior_subtype_invalidation(self):\n-\n         # Dummy type\n         class MyItem(Item):\n             pass\n@@ -394,7 +390,6 @@ class IMarker3(Interface):\n         self.assertTrue(IMarker3.providedBy(item))\n \n     def test_getattr_consults_schema_item(self):\n-\n         content = Item()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -417,7 +412,6 @@ class ISchema(Interface):\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_container(self):\n-\n         content = Container()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -440,7 +434,6 @@ class ISchema(Interface):\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_item_default_factory_with_context(self):\n-\n         content = Item()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -470,7 +463,6 @@ class ISchema(Interface):\n         self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_on_container_returns_children(self):\n-\n         content = Container()\n         content.id = "id"\n         content.portal_type = "testtype"\n@@ -529,7 +521,6 @@ def test_ZMI_manage_options_item(self):\n             self.assertTrue(tab in containerOptions, "Tab %s not found" % tab)\n \n     def test_name_and_id_in_sync(self):\n-\n         i = Item()\n         self.assertEqual("", i.id)\n         self.assertEqual("", i.getId())\n@@ -548,7 +539,6 @@ def test_name_and_id_in_sync(self):\n         self.assertEqual("foo", i.__name__)\n \n     def test_name_unicode_id_str(self):\n-\n         i = Item()\n         i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex b095769..265cb9c 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -9,7 +9,6 @@\n \n \n class TestUUIDIntegration(unittest.TestCase):\n-\n     layer = UNIT_TESTING\n \n     def setUp(self):\ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex 2db96df..e75990c 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -44,7 +44,6 @@ def test_get_interfaces(self):\n     #   - portal_type is set if not set already\n \n     def test_create_with_schema_already_provided_and_portal_type_set(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="testtype")\n \n@@ -64,7 +63,6 @@ def test_create_with_schema_already_provided_and_portal_type_set(self):\n         self.assertEqual(obj_mock, factory())\n \n     def test_create_sets_portal_type_if_not_set(self):\n-\n         # Object returned by class\n         obj_mock = Mock()\n \n@@ -86,7 +84,6 @@ def test_create_sets_portal_type_if_not_set(self):\n         self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_sets_portal_type_if_wrong(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="othertype")\n \n@@ -108,7 +105,6 @@ def test_create_sets_portal_type_if_wrong(self):\n         self.assertEqual(obj_mock.portal_type, "testtype")\n \n     def test_create_initialises_schema_if_not_provided(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="testtype")\n \n@@ -129,7 +125,6 @@ def test_create_initialises_schema_if_not_provided(self):\n         self.assertEqual(obj_mock, factory())\n \n     def test_factory_passes_args_and_kwargs(self):\n-\n         # Object returned by class\n         obj_mock = Mock(portal_type="testtype")\n \ndiff --git a/plone/dexterity/tests/test_filerepresentation.py b/plone/dexterity/tests/test_filerepresentation.py\nindex 70f2b56..e59c269 100644\n--- a/plone/dexterity/tests/test_filerepresentation.py\n+++ b/plone/dexterity/tests/test_filerepresentation.py\n@@ -10,7 +10,6 @@ def create_dummy(self, **kw):\n         return ItemDummy(**kw)\n \n     def test_defaultreadfile_verify_iface(self):\n-\n         dummy = DefaultReadFile(ItemDummy())\n         self.assertTrue(IStreamIterator.providedBy(dummy))\n         self.assertTrue(verifyObject(IStreamIterator, dummy))\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex dffa9e2..1ce36a2 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -90,7 +90,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         from the fti, but the code has been removed.\n         """\n         fti = DexterityFTI("testtype")\n-        fti.schema = "model.wont.be.imported"\n+        fti.schema = "model.will.not.be.imported"\n         portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n         schemaName = portalTypeToSchemaName(fti.getId())\n@@ -114,7 +114,6 @@ def test_lookupModel_from_string(self):\n         self.assertIs(model_dummy, model)\n \n     def test_lookupModel_from_file_with_package(self):\n-\n         fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n@@ -137,7 +136,6 @@ def test_lookupModel_from_file_with_package(self):\n         loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_absolute_path(self):\n-\n         import plone.dexterity.tests\n \n         abs_file = os.path.join(\n@@ -160,7 +158,6 @@ def test_lookupModel_from_file_with_absolute_path(self):\n         loadFile_mock.assert_called_once_with(abs_file, reload=True, policy="dexterity")\n \n     def test_lookupModel_from_file_with_win32_absolute_path(self):\n-\n         fti = DexterityFTI("testtype")\n         fti.schema = None\n         fti.model_source = None\n@@ -405,7 +402,6 @@ def bases(self, schemaName, tree):\n \n \n class TestFTIEvents(MockTestCase):\n-\n     # These tests are a bit verbose, but the basic premise is pretty simple.\n     # We create a proxy mock of a PersistentComponents() registry, and\n     # use this for mock assertions as well as to verify that the right\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex c0c6cb0..52c39ce 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -17,7 +17,6 @@\n \n class TestSchemaModuleFactory(MockTestCase):\n     def test_transient_schema(self):\n-\n         # No IDexterityFTI registered\n         factory = schema.SchemaModuleFactory()\n         schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n@@ -31,7 +30,6 @@ def test_transient_schema(self):\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n     def test_concrete_default_schema(self):\n-\n         # Mock schema model\n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title="Dummy")\n@@ -56,7 +54,6 @@ class IDummy(Interface):\n         self.assertEqual(("dummy",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_named_schema(self):\n-\n         # Mock schema model\n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title="Dummy")\n@@ -89,7 +86,6 @@ class INamedDummy(Interface):\n         self.assertEqual(("named",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_transient_schema_made_concrete(self):\n-\n         factory = schema.SchemaModuleFactory()\n         schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n \ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex e466300..fb7b4ae 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -28,7 +28,6 @@ class ISchema(Interface):\n         self.assertTrue(schema1 is schema2 is ISchema)\n \n     def test_repeated_behavior_registration_lookup(self):\n-\n         fti = DexterityFTI("testtype")\n         self.mock_utility(fti, IDexterityFTI, name="testtype")\n \n@@ -74,7 +73,6 @@ def test_unexistent_behaviors_lookup(self):\n             )\n \n     def test_repeated_subtypes_lookup(self):\n-\n         fti = DexterityFTI("testtype")\n         self.mock_utility(fti, IDexterityFTI, name="testtype")\n \ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex 6068921..d4d7fee 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -22,7 +22,6 @@ def setUp(self):\n         SCHEMA_CACHE.clear()\n \n     def test_item(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -121,7 +120,6 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission.assert_called_with("View", item)\n \n     def test_container(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -224,7 +222,6 @@ class ITestBehavior(Interface):\n         security_manager_mock.checkPermission.assert_called_with("View", container)\n \n     def test_no_tagged_value(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -253,7 +250,6 @@ class ITestSchema(Interface):\n         )\n \n     def test_no_read_permission(self):\n-\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title="Test")\n@@ -294,7 +290,6 @@ class ITestSchema(Interface):\n         )\n \n     def test_no_schema(self):\n-\n         # Mock FTI\n         fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(return_value=None)\n@@ -316,7 +311,6 @@ def test_no_schema(self):\n         )\n \n     def test_schema_exception(self):\n-\n         # Mock FTI\n         fti_mock = DexterityFTI("testtype")\n         fti_mock.lookupSchema = Mock(side_effect=AttributeError)\n@@ -339,7 +333,6 @@ def test_schema_exception(self):\n         )\n \n     def test_empty_name(self):\n-\n         # Mock FTI\n         fti_mock = DexterityFTI("testtype")\n         self.mock_utility(fti_mock, IDexterityFTI, "testtype")\ndiff --git a/plone/dexterity/tests/test_synchronize.py b/plone/dexterity/tests/test_synchronize.py\nindex aa3db2d..c03c0f4 100644\n--- a/plone/dexterity/tests/test_synchronize.py\n+++ b/plone/dexterity/tests/test_synchronize.py\n@@ -5,7 +5,6 @@\n \n \n class StupidStack:\n-\n     _elements = []  # not thread safe\n     _lock = Lock()\n \n@@ -32,7 +31,6 @@ def reverse_global_list():\n \n class Test(unittest.TestCase):\n     def test_instance_method(self):\n-\n         shared_stack = StupidStack()\n         shared_stack.push("one")\n         item = shared_stack.pop()\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex 441a92d..d65a10e 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -84,7 +84,6 @@ def enumerateBehaviors(self):\n \n class TestAddView(MockTestCase):\n     def test_addview_sets_form_portal_type(self):\n-\n         context = Container("container")\n         request = TestRequest()\n         fti = DexterityFTI("testtype")\n@@ -94,7 +93,6 @@ def test_addview_sets_form_portal_type(self):\n         self.assertEqual("testtype", addview.form_instance.portal_type)\n \n     def test_form_create(self):\n-\n         # Context and request\n         context = Container("container")\n         request = TestRequest()\n@@ -133,7 +131,6 @@ class ISchema(Interface):\n         self.assertEqual("testtype", obj_dummy.portal_type)\n \n     def test_add(self):\n-\n         # Container, new object, and request\n         container = Mock()\n         obj = Mock()\n@@ -222,7 +219,6 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         self.assertRaises(ValueError, form.add, obj)\n \n     def test_label(self):\n-\n         # Add view should take its label from the FTI title\n \n         # Context and request\n@@ -248,7 +244,6 @@ def test_label(self):\n         self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n@@ -308,7 +303,6 @@ def test_schema_lookup_add(self):\n         self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n     def test_fires_add_begun_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(\n             portal_type="testtype",\n@@ -339,7 +333,6 @@ def test_fires_add_begun_event(self):\n         self.assertTrue(IAddBegunEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_update_checks_allowed_types(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(\n             portal_type="testtype", allowedContentTypes=lambda: []\n@@ -361,7 +354,6 @@ def test_update_checks_allowed_types(self):\n         self.assertRaises(ValueError, view.update)\n \n     def test_update_ignores_type_check_if_security_check_deferred(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(\n             portal_type="testtype", allowedContentTypes=lambda: []\n@@ -387,7 +379,6 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n             self.fail("Update raised Unauthorized with security checks " "deferred")\n \n     def test_fires_add_cancelled_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n@@ -422,7 +413,6 @@ def setUp(self):\n         SCHEMA_CACHE.clear()\n \n     def test_label(self):\n-\n         # Edit view should take its label from the FTI title\n \n         # Context and request\n@@ -447,7 +437,6 @@ def test_label(self):\n         self.assertEqual("Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n-\n         # Context and request\n         class IMarker(IDexterityContent):\n             pass\n@@ -510,7 +499,6 @@ class IMarker(IDexterityContent):\n         self.assertEqual(tuple(), tuple(additionalSchemata))\n \n     def test_fires_edit_begun_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype")\n         request_mock = TestRequest()\n@@ -536,7 +524,6 @@ def test_fires_edit_begun_event(self):\n         self.assertTrue(IEditBegunEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_cancelled_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n@@ -566,7 +553,6 @@ def addStatusMessage(self, msg, type=""):\n         self.assertTrue(IEditCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_finished_event(self):\n-\n         # Context and request\n         context_mock = self.create_dummy(portal_type="testtype", title="foo")\n         context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n@@ -601,7 +587,6 @@ def addStatusMessage(self, msg, type=""):\n \n class TestDefaultView(MockTestCase):\n     def test_schema_lookup_default_view(self):\n-\n         # Context and request\n         class IMarker(IDexterityContent):\n             pass\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 1e3fb4b..04828a4 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -53,7 +53,6 @@ class ITestBehavior(Interface):\n \n \n class DAVTestRequest(TestRequest):\n-\n     get_header = TestRequest.getHeader\n \n     def _createResponse(self):\n@@ -593,16 +592,18 @@ def content_type(self):\n   <d:status>HTTP/1.1 200 OK</d:status>\n </d:propstat>\n <d:responsedescription>\n-The operation succeded.\n+The operation succeeded.\n </d:responsedescription>\n </d:response>\n </d:multistatus>\n """\n         )\n-\n-        result = response.getBody()\n-\n-        self.assertEqual(body.strip(), result.strip())\n+        body = body.strip()\n+        result = response.getBody().strip()\n+        # TODO: remove next line when Zope 5.8.1 is released and used in coredev.\n+        # Then also remove codespell settings from .meta.toml and pyproject.toml.\n+        result = result.replace(b"succeded", b"succeeded")\n+        self.assertEqual(body, result)\n \n     def test_LOCK(self):\n         # Too much WebDAV magic - just test that it delegates correctly\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex deba0fa..022e608 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -135,7 +135,7 @@ def createContent(portal_type, **kw):\n             setattr(behavior, name, value)\n             done.append(name)\n \n-    for (key, value) in fields.items():\n+    for key, value in fields.items():\n         if key in done:\n             continue\n         setattr(content, key, value)\n@@ -216,7 +216,7 @@ def datify(in_date):\n def all_merged_tagged_values_dict(ifaces, key):\n     """mergedTaggedValueDict of all interfaces for a given key\n \n-    usally interfaces is a list of schemas\n+    usually interfaces is a list of schemas\n     """\n     info = dict()\n     for iface in ifaces:\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 5392512..aa6cd76 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,6 +1,9 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [tool.towncrier]\n-filename = "CHANGES.rst"\n directory = "news/"\n+filename = "CHANGES.rst"\n title_format = "{version} ({project_date})"\n underlines = ["-", ""]\n \n@@ -19,25 +22,112 @@ directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n \n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n [tool.isort]\n-profile = "black"\n-force_alphabetical_sort = true\n-force_single_line = true\n-lines_after_imports = 2\n-\n-[tool.flakeheaven.plugins]\n-# Disable some checks.\n-# - E501 line too long\n-#   flake8 is already testing this, with max-line-length=100000 in .flake8,\n-#   so pycodestyle should not test it.\n-# - W503 line break before binary operator\n-#   Outdated recommendation, see https://www.flake8rules.com/rules/W503.html\n-mccabe = ["+*"]\n-pycodestyle = ["+*", "-E501", "-W503"]\n-pyflakes = ["+*"]\n-pylint = ["+*"]\n-\n-[tool.plone-code-analysis]\n-paths = "plone/ setup.py"\n-paths_pyroma = "."\n-paths_zpretty = "plone/"\n+profile = "plone"\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+[tool.codespell]\n+ignore-words-list = "discreet,succeded"\n+skip = "*.po,"\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  codespell_ignores = "foo,bar"\n+#  codespell_skip = "*.po,*.map,package-lock.json"\n+##\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  dependencies_ignores = "[\'zestreleaser.towncrier\']"\n+#  dependencies_mappings = [\n+#    "gitpython = [\'git\']",\n+#    "pygithub = [\'github\']",\n+#  ]\n+#  """\n+##\n+\n+[tool.check-manifest]\n+ignore = [\n+    ".editorconfig",\n+    ".meta.toml",\n+    ".pre-commit-config.yaml",\n+    "tox.ini",\n+    ".flake8",\n+    "mx.ini",\n+\n+]\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  check_manifest_ignores = """\n+#      "*.map.js",\n+#      "*.pyc",\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/setup.cfg b/setup.cfg\ndeleted file mode 100644\nindex 39d5b45..0000000\n--- a/setup.cfg\n+++ /dev/null\n@@ -1,41 +0,0 @@\n-# Babel configuration\n-[compile_catalog]\n-domain = plone.dexterity\n-directory = plone/dexterity/locales\n-statistics = true\n-\n-[extract_messages]\n-mapping_file = extract.ini\n-copyright_holder = Plone foundation\n-output_file = plone/dexterity/locales/plone.dexterity.pot\n-msgid_bugs_address = dexterity-development@googlegroups.com\n-width = 80\n-charset = UTF-8\n-sort_output = true\n-\n-[init_catalog]\n-domain = plone.dexterity\n-input_file = plone/dexterity/locales/plone.dexterity.pot\n-output_dir = plone/dexterity/locales\n-\n-[update_catalog]\n-domain = plone.dexterity\n-input_file = plone/dexterity/locales/plone.dexterity.pot\n-output_dir = plone/dexterity/locales\n-previous = true\n-\n-[isort]\n-force_alphabetical_sort = True\n-force_single_line = True\n-lines_after_imports = 2\n-line_length = 79\n-not_skip = __init__.py\n-use_parentheses = True\n-multi_line_output = 3\n-\n-[bdist_wheel]\n-universal = 0\n-\n-[check-manifest]\n-ignore =\n-  Makefile\ndiff --git a/setup.py b/setup.py\nindex 01d7301..45e671a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,37 +1,28 @@\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = "3.0.0b3.dev0"\n+version = "3.0.3.dev0"\n \n \n-def read(filename):\n-    with open(filename) as myfile:\n-        try:\n-            return myfile.read()\n-        except UnicodeDecodeError:\n-            # Happens on one Jenkins node on Python 3.6,\n-            # so maybe it happens for users too.\n-            pass\n-    # Opening and reading as text failed, so retry opening as bytes.\n-    with open(filename, "rb") as myfile:\n-        contents = myfile.read()\n-        return contents.decode("utf-8")\n+long_description = (\n+    f"{Path(\'README.rst\').read_text()}\\n{Path(\'CHANGES.rst\').read_text()}"\n+)\n \n \n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n """\n-long_description = read("README.rst")\n-long_description += "\\n"\n-long_description += read("CHANGES.rst")\n \n setup(\n     name="plone.dexterity",\n     version=version,\n     description=short_description,\n     long_description=long_description,\n-    # Get more strings from https://pypi.org/classifiers/\n+    long_description_content_type="text/x-rst",\n+    # Get more strings from\n+    # https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n@@ -39,7 +30,6 @@ def read(filename):\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n         "Programming Language :: Python :: 3.9",\n         "Programming Language :: Python :: 3.10",\n@@ -57,36 +47,29 @@ def read(filename):\n     namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n-    python_requires=">=3.7",\n+    python_requires=">=3.8",\n     install_requires=[\n-        "DateTime>=4.0.1",\n+        "Products.CMFCore",\n+        "Products.statusmessages",\n+        "Zope",\n         "plone.alterego",\n+        "plone.app.uuid",\n         "plone.autoform>=1.0",\n+        "plone.base",\n         "plone.behavior>=1.0",\n         "plone.folder",\n         "plone.memoize",\n         "plone.rfc822",\n         "plone.supermodel>=1.0",\n         "plone.uuid",\n-        "plone.z3cform>=0.6.0",\n-        "Products.CMFCore",\n-        "Products.CMFDynamicViewFTI",\n-        "Products.statusmessages",\n+        "z3c.form",\n         "setuptools",\n-        "zope.annotation",\n-        "zope.browser",\n-        "zope.component",\n-        "zope.container",\n-        "zope.dottedname",\n-        "zope.globalrequest",\n-        "zope.filerepresentation>=3.6.0",\n-        "zope.interface",\n-        "zope.lifecycleevent",\n-        "zope.publisher",\n-        "zope.schema",\n-        "zope.security",\n-        "zope.size",\n-        "Zope",\n     ],\n-    extras_require={"test": ["plone.testing", "Products.CMFPlone"]},\n+    extras_require={\n+        "test": [\n+            "plone.testing",\n+            "plone.app.content",\n+            "plone.i18n",\n+        ]\n+    },\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..e0676e1\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,146 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    lint\n+    test\n+    dependencies\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  envlist_lines = """\n+#      my_other_environment\n+#  """\n+#  config_lines = """\n+#  my_extra_top_level_tox_configuration_lines\n+#  """\n+##\n+\n+[testenv]\n+skip_install = true\n+allowlist_externals =\n+    echo\n+    false\n+# Make sure typos like `tox -e formaat` are caught instead of silently doing nothing.\n+# See https://github.com/tox-dev/tox/issues/2858.\n+commands =\n+    echo "Unrecognized environment name {envname}"\n+    false\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the dependencies of the package\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the distribution tests\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s plone.dexterity {posargs}\n+extras =\n+    test\n+\n+[testenv:coverage]\n+description = get a test coverage report\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run --source plone.dexterity {envbindir}/zope-testrunner --quiet --all --test-path={toxinidir} -s plone.dexterity {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n+\n+[testenv:release-check]\n+description = ensure that the distribution is ready to release\n+skip_install = true\n+deps =\n+    twine\n+    build\n+    towncrier\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # fake version to not have to install the package\n+    # we build the change log as news entries might break\n+    # the README that is displayed on PyPI\n+    towncrier build --version=100.0.0 --yes\n+    python -m build --sdist --no-isolation\n+    twine check dist/*\n+\n+[testenv:circular]\n+description = ensure there are no cyclic dependencies\n+use_develop = true\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree\n+    pipforester\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # Generate the full dependency tree\n+    sh -c \'pipdeptree -j > forest.json\'\n+    # Generate a DOT graph with the circular dependencies, if any\n+    pipforester -i forest.json -o forest.dot --cycles\n+    # Report if there are any circular dependencies, i.e. error if there are any\n+    pipforester -i forest.json --check-cycles -o /dev/null\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  extra_lines = """\n+#      my_other_environment\n+#  """\n+##\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-08-16T10:56:09+02:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/68d6064019e74dc625205b299d1031dbfef5ad4e

black/pyupgrade

Files changed:
M plone/dexterity/tests/test_content.py

b'diff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex cb0773b..2ba629c 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -995,12 +995,11 @@ def test_verifyObjectPaste_fti_does_not_allow_content(self):\n     def test_verifyObjectPaste_locally_disallowed_contents(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n \n-        class DummyConstrainTypes(object):\n+        class DummyConstrainTypes:\n             def __init__(self, context):\n                 self.context = context\n \n             def allowedContentTypes(self):\n-\n                 fti = getUtility(IDexterityFTI, name="news")\n                 return [fti]\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-08-18T12:58:09+02:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/3d25cccb0d46eee4c72b27d1de736cdf26d0763e

type constraints only for contentish

Files changed:
M plone/dexterity/content.py
M plone/dexterity/tests/test_content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex ae01bcf..4c0c752 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -28,6 +28,7 @@\n from Products.CMFCore import permissions\n from Products.CMFCore.CMFCatalogAware import CMFCatalogAware\n from Products.CMFCore.interfaces import ICatalogableDublinCore\n+from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import IDublinCore\n from Products.CMFCore.interfaces import IMutableDublinCore\n from Products.CMFCore.interfaces import ITypeInformation\n@@ -268,12 +269,13 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n         # allowed content types) to also ask the FTI if construction is\n         # allowed.\n         super()._verifyObjectPaste(obj, validate_src)\n-        portal_type = getattr(aq_base(obj), "portal_type", None)\n-        constrains = IConstrainTypes(self, None)\n-        if constrains:\n-            allowed_ids = [i.getId() for i in constrains.allowedContentTypes()]\n-            if portal_type not in allowed_ids:\n-                raise ValueError("Disallowed subobject type: %s" % portal_type)\n+        if IContentish.providedBy(obj):\n+            portal_type = getattr(aq_base(obj), "portal_type", None)\n+            constrains = IConstrainTypes(self, None)\n+            if constrains:\n+                allowed_ids = [i.getId() for i in constrains.allowedContentTypes()]\n+                if portal_type not in allowed_ids:\n+                    raise ValueError("Disallowed subobject type: %s" % portal_type)\n         if validate_src:\n             portal_type = getattr(aq_base(obj), "portal_type", None)\n             if portal_type:\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 2ba629c..950447e 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -16,6 +16,7 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.folder.default import DefaultOrdering\n+from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.interfaces import ITypesTool\n from pytz import timezone\n from unittest.mock import Mock\n@@ -995,6 +996,9 @@ def test_verifyObjectPaste_fti_does_not_allow_content(self):\n     def test_verifyObjectPaste_locally_disallowed_contents(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n \n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n+        self.mock_utility(portal, ISiteRoot)\n+\n         class DummyConstrainTypes:\n             def __init__(self, context):\n                 self.context = context\n@@ -1046,6 +1050,9 @@ def allowedContentTypes(self):\n     def test_verifyObjectPaste_fti_does_allow_content(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n \n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n+        self.mock_utility(portal, ISiteRoot)\n+\n         original_container = Container(id="parent")\n         original_container.manage_permission("View", ("Anonymous",))\n         content = Item(id="test")\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-08-19T00:33:08+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/3deb7a70229a5a009fecaef824e77859c411df74

respect allowed types in paste

Files changed:
M .gitignore
M plone/dexterity/tests/test_content.py

b'diff --git a/.gitignore b/.gitignore\nindex 0690a90..b8f7ab7 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -29,6 +29,7 @@ lib64\n .mr.developer.cfg\n parts/\n pyvenv.cfg\n+.python-version\n var/\n \n # mxdev\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 950447e..06bfc75 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -18,6 +18,8 @@\n from plone.folder.default import DefaultOrdering\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.interfaces import ITypesTool\n+from Products.CMFPlone.interfaces import IConstrainTypes\n+from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n from pytz import timezone\n from unittest.mock import Mock\n from unittest.mock import patch\n@@ -1000,6 +1002,7 @@ def test_verifyObjectPaste_locally_disallowed_contents(self):\n         self.mock_utility(portal, ISiteRoot)\n \n         class DummyConstrainTypes:\n+\n             def __init__(self, context):\n                 self.context = context\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-08-19T00:39:48+02:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/7f4f3f938b2e1519fdc708b950520ddbbeb1cfb5

black

Files changed:
M plone/dexterity/tests/test_content.py
M setup.py

b'diff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 06bfc75..eb686d8 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -3,7 +3,6 @@\n from datetime import datetime\n from DateTime import DateTime\n from plone.autoform.interfaces import IFormFieldProvider\n-from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.behavior.registration import BehaviorRegistration\n@@ -19,7 +18,6 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.interfaces import ITypesTool\n from Products.CMFPlone.interfaces import IConstrainTypes\n-from Products.CMFPlone.interfaces import ISelectableConstrainTypes\n from pytz import timezone\n from unittest.mock import Mock\n from unittest.mock import patch\n@@ -1002,7 +1000,6 @@ def test_verifyObjectPaste_locally_disallowed_contents(self):\n         self.mock_utility(portal, ISiteRoot)\n \n         class DummyConstrainTypes:\n-\n             def __init__(self, context):\n                 self.context = context\n \ndiff --git a/setup.py b/setup.py\nindex 45e671a..bb2a7d9 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -67,6 +67,7 @@\n     ],\n     extras_require={\n         "test": [\n+            "Products.CMFPlone",\n             "plone.testing",\n             "plone.app.content",\n             "plone.i18n",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-08-19T00:42:55+02:00
Author: Mauro Amico (mamico) <mauro.amico@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/36163594ae3e518de5acb676af7d54b589dfa8c6

fix requirements

Files changed:
M plone/dexterity/tests/test_content.py
M setup.py

b'diff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex eb686d8..950447e 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -3,6 +3,7 @@\n from datetime import datetime\n from DateTime import DateTime\n from plone.autoform.interfaces import IFormFieldProvider\n+from plone.base.interfaces import IConstrainTypes\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.behavior.registration import BehaviorRegistration\n@@ -17,7 +18,6 @@\n from plone.folder.default import DefaultOrdering\n from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.interfaces import ITypesTool\n-from Products.CMFPlone.interfaces import IConstrainTypes\n from pytz import timezone\n from unittest.mock import Mock\n from unittest.mock import patch\ndiff --git a/setup.py b/setup.py\nindex bb2a7d9..45e671a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -67,7 +67,6 @@\n     ],\n     extras_require={\n         "test": [\n-            "Products.CMFPlone",\n             "plone.testing",\n             "plone.app.content",\n             "plone.i18n",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2023-08-28T11:31:39+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.dexterity/commit/a08a22f5913bdb581b54a9a65ab6f00d80062bd7

Merge pull request #146 from plone/respect_allowed_types_in_paste

Respect allowed types in paste

Files changed:
A news/146.bug
M .gitignore
M plone/dexterity/content.py
M plone/dexterity/tests/test_content.py

b'diff --git a/.gitignore b/.gitignore\nindex 0690a90..b8f7ab7 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -29,6 +29,7 @@ lib64\n .mr.developer.cfg\n parts/\n pyvenv.cfg\n+.python-version\n var/\n \n # mxdev\ndiff --git a/news/146.bug b/news/146.bug\nnew file mode 100644\nindex 0000000..ff3beff\n--- /dev/null\n+++ b/news/146.bug\n@@ -0,0 +1 @@\n+Respect locally allowed types when pasting objects [cekk]\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 593b70c..7224d3e 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -28,6 +28,7 @@\n from Products.CMFCore import permissions\n from Products.CMFCore.CMFCatalogAware import CMFCatalogAware\n from Products.CMFCore.interfaces import ICatalogableDublinCore\n+from Products.CMFCore.interfaces import IContentish\n from Products.CMFCore.interfaces import IDublinCore\n from Products.CMFCore.interfaces import IMutableDublinCore\n from Products.CMFCore.interfaces import ITypeInformation\n@@ -268,6 +269,13 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n         # allowed content types) to also ask the FTI if construction is\n         # allowed.\n         super()._verifyObjectPaste(obj, validate_src)\n+        if IContentish.providedBy(obj):\n+            portal_type = getattr(aq_base(obj), "portal_type", None)\n+            constrains = IConstrainTypes(self, None)\n+            if constrains:\n+                allowed_ids = [i.getId() for i in constrains.allowedContentTypes()]\n+                if portal_type not in allowed_ids:\n+                    raise ValueError("Disallowed subobject type: %s" % portal_type)\n         if validate_src:\n             portal_type = getattr(aq_base(obj), "portal_type", None)\n             if portal_type:\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex fd85afe..950447e 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -16,6 +16,7 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.folder.default import DefaultOrdering\n+from Products.CMFCore.interfaces import ISiteRoot\n from Products.CMFCore.interfaces import ITypesTool\n from pytz import timezone\n from unittest.mock import Mock\n@@ -992,9 +993,66 @@ def test_verifyObjectPaste_fti_does_not_allow_content(self):\n \n         self.assertRaises(ValueError, container._verifyObjectPaste, content, True)\n \n+    def test_verifyObjectPaste_locally_disallowed_contents(self):\n+        from Products.CMFCore.interfaces import ITypeInformation\n+\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n+        self.mock_utility(portal, ISiteRoot)\n+\n+        class DummyConstrainTypes:\n+            def __init__(self, context):\n+                self.context = context\n+\n+            def allowedContentTypes(self):\n+                fti = getUtility(IDexterityFTI, name="news")\n+                return [fti]\n+\n+        self.mock_adapter(DummyConstrainTypes, IConstrainTypes, (IDexterityContainer,))\n+\n+        # FTI mock\n+        fti_mock = Mock(wraps=DexterityFTI("news"))\n+        self.mock_utility(fti_mock, IDexterityFTI, name="news")\n+\n+        fti_mock2 = Mock()\n+        fti_mock2.isConstructionAllowed = Mock(return_value=True)\n+        self.mock_utility(fti_mock2, ITypeInformation, name="document")\n+\n+        mock_pt = Mock()\n+        mock_pt.getTypeInfo = Mock(return_value=None)\n+        self.mock_tool(mock_pt, "portal_types")\n+        self.mock_utility(mock_pt, ITypesTool)\n+\n+        document = Item(id="test document")\n+        document.__factory_meta_type__ = "document"\n+        document.portal_type = "document"\n+        news = Item(id="test news")\n+        news.__factory_meta_type__ = "news"\n+        news.portal_type = "news"\n+\n+        container = Container(id="testfolder")\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"},\n+            {"name": "news", "action": None, "permission": "View"},\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test-document"] = document\n+        container["test-news"] = news\n+        document_content = container["test-document"]\n+        news_content = container["test-news"]\n+\n+        # can paste news\n+        container._verifyObjectPaste(news_content, False)\n+        # cannot paste documents\n+        self.assertRaises(\n+            ValueError, container._verifyObjectPaste, document_content, False\n+        )\n+\n     def test_verifyObjectPaste_fti_does_allow_content(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n \n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n+        self.mock_utility(portal, ISiteRoot)\n+\n         original_container = Container(id="parent")\n         original_container.manage_permission("View", ("Anonymous",))\n         content = Item(id="test")\n'

