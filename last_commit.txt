Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-05-17T22:05:09+02:00
Author: Jefferson Bledsoe (JeffersonBledsoe) <me@jeffersonbledsoe.com>
Commit: https://github.com/plone/plone.restapi/commit/d40e0bf23086c711715d1b15b7bd25e47e4051d4

Added support for nested schemas with resolveuid block deserializer (#1595)

* Test case for field in list

* Test case for object browser in nested schema

* Initial support for nested object data

* changelog

* Fix support for lists of strings

* Add serializer for nested urls

* run black formatter

---------

Co-authored-by: Claudia Ifrim &lt;ifrim.claudia@gmail.com&gt;
Co-authored-by: Miu Razvan &lt;miu.razvan28@gmail.com&gt;

Files changed:
A news/1595.feature
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/tests/test_blocks_deserializer.py

b'diff --git a/news/1595.feature b/news/1595.feature\nnew file mode 100644\nindex 000000000..1ed3c42b5\n--- /dev/null\n+++ b/news/1595.feature\n@@ -0,0 +1,2 @@\n+Added support for nested schemas with resolveuid deserializer.\n+[JeffersonBledsoe]\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex b5a7573c0..0fe4dfb04 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -107,27 +107,30 @@ def __init__(self, context, request):\n \n     def __call__(self, block):\n         # Convert absolute links to resolveuid\n-        for field in self.fields:\n-            link = block.get(field, "")\n-            if link and isinstance(link, str):\n-                block[field] = path2uid(context=self.context, link=link)\n-            elif link and isinstance(link, list):\n-                # Detect if it has an object inside with an "@id" key (object_widget)\n-                if len(link) > 0 and isinstance(link[0], dict) and "@id" in link[0]:\n-                    result = []\n-                    for item in link:\n-                        item_clone = deepcopy(item)\n-                        item_clone["@id"] = path2uid(\n-                            context=self.context, link=item_clone["@id"]\n-                        )\n-                        result.append(item_clone)\n-\n-                    block[field] = result\n-                elif len(link) > 0 and isinstance(link[0], str):\n-                    block[field] = [\n-                        path2uid(context=self.context, link=item) for item in link\n-                    ]\n-        return block\n+        return self._process_data(block)\n+\n+    def _process_data(self, data, field=None):\n+        if isinstance(data, str) and field in self.fields:\n+            return path2uid(context=self.context, link=data)\n+        if isinstance(data, list):\n+            return [self._process_data(data=value, field=field) for value in data]\n+        if isinstance(data, dict):\n+            if data.get("@type", None) == "URL" and data.get("value", None):\n+                data["value"] = path2uid(context=self.context, link=data["value"])\n+            elif data.get("@id", None):\n+                item_clone = deepcopy(data)\n+                item_clone["@id"] = path2uid(\n+                    context=self.context, link=item_clone["@id"]\n+                )\n+                return {\n+                    field: self._process_data(data=value, field=field)\n+                    for field, value in item_clone.items()\n+                }\n+            return {\n+                field: self._process_data(data=value, field=field)\n+                for field, value in data.items()\n+            }\n+        return data\n \n \n class TextBlockDeserializerBase:\n@@ -162,7 +165,6 @@ def __init__(self, context, request):\n         self.request = request\n \n     def __call__(self, block):\n-\n         portal_transforms = api.portal.get_tool(name="portal_transforms")\n         raw_html = block.get("html", "")\n         data = portal_transforms.convertTo(\n@@ -301,7 +303,6 @@ class SlateBlockDeserializerRoot(SlateBlockDeserializerBase):\n \n class SlateTableBlockTransformer(SlateBlockTransformer):\n     def __call__(self, block):\n-\n         rows = block.get("table", {}).get("rows", [])\n         for row in rows:\n             cells = row.get("cells", [])\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex a53f1734e..e239233eb 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -97,24 +97,29 @@ def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n-    def __call__(self, value):\n-        for field in self.fields:\n-            if field in value.keys():\n-                link = value.get(field, "")\n-                if isinstance(link, str):\n-                    value[field] = uid_to_url(link)\n-                elif isinstance(link, list):\n-                    if len(link) > 0 and isinstance(link[0], dict) and "@id" in link[0]:\n-                        result = []\n-                        for item in link:\n-                            item_clone = deepcopy(item)\n-                            item_clone["@id"] = uid_to_url(item_clone["@id"])\n-                            result.append(item_clone)\n-\n-                        value[field] = result\n-                    elif len(link) > 0 and isinstance(link[0], str):\n-                        value[field] = [uid_to_url(item) for item in link]\n-        return value\n+    def __call__(self, block):\n+        return self._process_data(block)\n+\n+    def _process_data(self, data, field=None):\n+        if isinstance(data, str) and field in self.fields:\n+            return uid_to_url(data)\n+        if isinstance(data, list):\n+            return [self._process_data(data=value, field=field) for value in data]\n+        if isinstance(data, dict):\n+            if data.get("@type", None) == "URL" and data.get("value", None):\n+                data["value"] = uid_to_url(data["value"])\n+            elif data.get("@id", None):\n+                item_clone = deepcopy(data)\n+                item_clone["@id"] = uid_to_url(item_clone["@id"])\n+                return {\n+                    field: self._process_data(data=value, field=field)\n+                    for field, value in item_clone.items()\n+                }\n+            return {\n+                field: self._process_data(data=value, field=field)\n+                for field, value in data.items()\n+            }\n+        return data\n \n \n class TextBlockSerializerBase:\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex 36f7a72d1..a51b984e9 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -269,6 +269,35 @@ def test_blocks_custom_block_doesnt_resolve_non_standard_fields(self):\n             self.portal.doc1.absolute_url(),\n         )\n \n+    def test_blocks_custom_block_resolve_standard_fields_nested(self):\n+        self.deserialize(\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "bar": [{"url": self.portal.doc1.absolute_url()}],\n+                }\n+            }\n+        )\n+        doc_uid = IUUID(self.portal.doc1)\n+\n+        self.assertEqual(\n+            self.portal.doc1.blocks["123"]["bar"][0]["url"], f"../resolveuid/{doc_uid}"\n+        )\n+\n+        self.deserialize(\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "bar": [{"href": self.portal.doc1.absolute_url()}],\n+                }\n+            }\n+        )\n+        doc_uid = IUUID(self.portal.doc1)\n+\n+        self.assertEqual(\n+            self.portal.doc1.blocks["123"]["bar"][0]["href"], f"../resolveuid/{doc_uid}"\n+        )\n+\n     def test_deserialize_blocks_smart_href_array_volto_object_browser(self):\n         self.deserialize(\n             blocks={\n@@ -285,6 +314,22 @@ def test_deserialize_blocks_smart_href_array_volto_object_browser(self):\n             f"../resolveuid/{doc_uid}",\n         )\n \n+    def test_deserialize_blocks_smart_href_array_volto_object_browser_nested(self):\n+        self.deserialize(\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "bar": [{"href": [{"@id": self.portal.doc1.absolute_url()}]}],\n+                }\n+            }\n+        )\n+        doc_uid = IUUID(self.portal.doc1)\n+\n+        self.assertEqual(\n+            self.portal.doc1.blocks["123"]["bar"][0]["href"][0]["@id"],\n+            f"../resolveuid/{doc_uid}",\n+        )\n+\n     def test_deserialize_blocks_smart_href_array(self):\n         self.deserialize(\n             blocks={\n'

