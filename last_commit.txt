Repository: plone.namedfile


Branch: refs/heads/master
Date: 2024-03-14T21:08:32+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/c6a93015c629f5d4e304469e194e3a8ac6c3058b

Support for allowed media types.

Support to constrain files to specific media types with a "accept" attribute on
file and image fields, just like the "accept" attribute of the HTML file input.

Fixes: #157

Files changed:
A news/157.feature
A plone/namedfile/tests/test_validation.py
M plone/namedfile/field.py
M plone/namedfile/field.zcml
M plone/namedfile/handler.rst
M plone/namedfile/interfaces.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/usage.rst

b'diff --git a/news/157.feature b/news/157.feature\nnew file mode 100644\nindex 0000000..28aabda\n--- /dev/null\n+++ b/news/157.feature\n@@ -0,0 +1,7 @@\n+Support for allowed media types.\n+\n+Support to constrain files to specific media types with a "accept" attribute on\n+file and image fields, just like the "accept" attribute of the HTML file input.\n+\n+Fixes: #157\n+[thet]\ndiff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex 12dc789..70b2c5c 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -21,13 +21,24 @@\n from zope.schema import Object\n from zope.schema import ValidationError\n \n+import mimetypes\n \n _ = MessageFactory("plone")\n \n \n-@implementer(IPluggableImageFieldValidation)\n-@adapter(INamedImageField, Interface)\n-class ImageContenttypeValidator:\n+class InvalidFile(ValidationError):\n+    """Exception for a invalid file."""\n+\n+    __doc__ = _("Invalid file")\n+\n+\n+class InvalidImageFile(ValidationError):\n+    """Exception for a invalid image file."""\n+\n+    __doc__ = _("Invalid image file")\n+\n+\n+class BinaryContenttypeValidator:\n     def __init__(self, field, value):\n         self.field = field\n         self.value = value\n@@ -35,93 +46,108 @@ def __init__(self, field, value):\n     def __call__(self):\n         if self.value is None:\n             return\n-        mimetype = get_contenttype(self.value)\n-        if mimetype.split("/")[0] != "image":\n-            raise InvalidImageFile(mimetype, self.field.__name__)\n \n+        if not self.field.accept:\n+            # No restrictions.\n+            return\n \n-class InvalidImageFile(ValidationError):\n-    """Exception for invalid image file"""\n+        mimetype = get_contenttype(self.value)\n \n-    __doc__ = _("Invalid image file")\n+        for accept in self.field.accept:\n+            if accept[0] == ".":\n+                # This is a file extension. Get a media type from it.\n+                accept = mimetypes.guess_type(f"dummy{accept}", strict=False)[0]\n+                if accept is None:\n+                    # This extension is unknown. Skip it.\n+                    continue\n \n+            try:\n+                accept_type, accept_subtype = accept.split("/")\n+                content_type, content_subtype = mimetype.split("/")\n+            except ValueError:\n+                # The accept type is invalid. Skip it.\n+                continue\n \n-def validate_binary_field(interface, field, value):\n-    for name, validator in getAdapters((field, value), interface):\n-        validator()\n+            if accept_type == content_type and (\n+                accept_subtype == content_subtype or accept_subtype == "*"\n+            ):\n+                # This file is allowed, just don\'t raise a ValidationError.\n+                return\n \n+        # The file\'s content type is not allowed. Raise a ValidationError.\n+        raise self.exception(mimetype, self.field.__name__)\n \n-def validate_image_field(field, value):\n-    validate_binary_field(IPluggableImageFieldValidation, field, value)\n \n+@implementer(IPluggableFileFieldValidation)\n+@adapter(INamedFileField, Interface)\n+class FileContenttypeValidator(BinaryContenttypeValidator):\n+    exception = InvalidFile\n \n-def validate_file_field(field, value):\n-    validate_binary_field(IPluggableFileFieldValidation, field, value)\n \n+@implementer(IPluggableImageFieldValidation)\n+@adapter(INamedImageField, Interface)\n+class ImageContenttypeValidator(BinaryContenttypeValidator):\n+    exception = InvalidImageFile\n \n-@implementer(INamedFileField)\n-class NamedFile(Object):\n-    """A NamedFile field"""\n \n-    _type = FileValueType\n-    schema = INamedFile\n+class NamedField(Object):\n \n     def __init__(self, **kw):\n+        if "accept" in kw:\n+            self.accept = kw.pop("accept")\n         if "schema" in kw:\n             self.schema = kw.pop("schema")\n         super().__init__(schema=self.schema, **kw)\n \n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_file_field(self, value)\n+    def validate(self, value, interface):\n+        super().validate(value)\n+        for name, validator in getAdapters((self, value), interface):\n+            validator()\n+\n+\n+@implementer(INamedFileField)\n+class NamedFile(NamedField):\n+    """A NamedFile field"""\n+\n+    _type = FileValueType\n+    schema = INamedFile\n+    accept = ()\n+\n+    def validate(self, value):\n+        super().validate(value, IPluggableFileFieldValidation)\n \n \n @implementer(INamedImageField)\n-class NamedImage(Object):\n+class NamedImage(NamedField):\n     """A NamedImage field"""\n \n     _type = ImageValueType\n     schema = INamedImage\n+    accept = ("image/*",)\n \n-    def __init__(self, **kw):\n-        if "schema" in kw:\n-            self.schema = kw.pop("schema")\n-        super().__init__(schema=self.schema, **kw)\n-\n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_image_field(self, value)\n+    def validate(self, value):\n+        super().validate(value, IPluggableImageFieldValidation)\n \n \n @implementer(INamedBlobFileField)\n-class NamedBlobFile(Object):\n+class NamedBlobFile(NamedField):\n     """A NamedBlobFile field"""\n \n     _type = BlobFileValueType\n     schema = INamedBlobFile\n+    accept = ()\n \n-    def __init__(self, **kw):\n-        if "schema" in kw:\n-            self.schema = kw.pop("schema")\n-        super().__init__(schema=self.schema, **kw)\n-\n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_file_field(self, value)\n+    def validate(self, value):\n+        super().validate(value, IPluggableFileFieldValidation)\n \n \n @implementer(INamedBlobImageField)\n-class NamedBlobImage(Object):\n+class NamedBlobImage(NamedField):\n     """A NamedBlobImage field"""\n \n     _type = BlobImageValueType\n     schema = INamedBlobImage\n+    accept = ("image/*",)\n \n-    def __init__(self, **kw):\n-        if "schema" in kw:\n-            self.schema = kw.pop("schema")\n-        super().__init__(schema=self.schema, **kw)\n-\n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_image_field(self, value)\n+    def validate(self, value):\n+        super().validate(value, IPluggableImageFieldValidation)\ndiff --git a/plone/namedfile/field.zcml b/plone/namedfile/field.zcml\nindex 6a20ba2..eff96f4 100644\n--- a/plone/namedfile/field.zcml\n+++ b/plone/namedfile/field.zcml\n@@ -3,9 +3,14 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n \n+    <adapter\n+        factory=".field.FileContenttypeValidator"\n+        name="file_contenttype"\n+    />\n+\n     <adapter\n         factory=".field.ImageContenttypeValidator"\n         name="image_contenttype"\n     />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst\nindex b1caf27..4e677f7 100644\n--- a/plone/namedfile/handler.rst\n+++ b/plone/namedfile/handler.rst\n@@ -41,13 +41,23 @@ Named file\n \n ::\n \n-    >>> field = NamedFile(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedFile(\n+    ...     __name__="dummy",\n+    ...     accept=("audio/ogg", "audio/flac"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedFile">\n+      <accept>\n+        <element>audio/ogg</element>\n+        <element>audio/flac</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -56,6 +66,10 @@ Named file\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedFile">\n+    ...   <accept>\n+    ...     <element>audio/ogg</element>\n+    ...     <element>audio/flac</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -69,6 +83,8 @@ Named file\n     <class \'plone.namedfile.field.NamedFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'audio/ogg\', \'audio/flac\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -84,13 +100,23 @@ Named image\n \n ::\n \n-    >>> field = NamedImage(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedImage(\n+    ...     __name__="dummy",\n+    ...     accept=("image/png", "image/webp"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedImage">\n+      <accept>\n+        <element>image/png</element>\n+        <element>image/webp</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -99,6 +125,10 @@ Named image\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedImage">\n+    ...   <accept>\n+    ...     <element>image/png</element>\n+    ...     <element>image/webp</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -112,6 +142,8 @@ Named image\n     <class \'plone.namedfile.field.NamedImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'image/png\', \'image/webp\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -127,13 +159,23 @@ Named blob file\n \n ::\n \n-    >>> field = NamedBlobFile(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedBlobFile(\n+    ...     __name__="dummy",\n+    ...     accept=("audio/ogg", "audio/flac"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobFile">\n+      <accept>\n+        <element>audio/ogg</element>\n+        <element>audio/flac</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -142,6 +184,10 @@ Named blob file\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedBlobFile">\n+    ...   <accept>\n+    ...     <element>audio/ogg</element>\n+    ...     <element>audio/flac</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -155,6 +201,8 @@ Named blob file\n     <class \'plone.namedfile.field.NamedBlobFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'audio/ogg\', \'audio/flac\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -170,13 +218,23 @@ Named blob image\n \n ::\n \n-    >>> field = NamedBlobImage(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedBlobImage(\n+    ...     __name__="dummy",\n+    ...     accept=("image/png", "image/webp"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobImage">\n+      <accept>\n+        <element>image/png</element>\n+        <element>image/webp</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -185,6 +243,10 @@ Named blob image\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedBlobImage">\n+    ...   <accept>\n+    ...     <element>image/png</element>\n+    ...     <element>image/webp</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -198,6 +260,8 @@ Named blob image\n     <class \'plone.namedfile.field.NamedBlobImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'image/png\', \'image/webp\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -206,3 +270,87 @@ Named blob image\n     False\n     >>> reciprocal.readonly\n     True\n+\n+\n+Test the default accepted media type\n+------------------------------------\n+\n+Named file::\n+\n+    >>> field = NamedFile()\n+    >>> field.accept\n+    ()\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedFile"/>\n+\n+    >>> element__ = etree.XML("""\\\n+    ... <field name="dummy" type="plone.namedfile.field.NamedFile"/>\n+    ... """)\n+\n+    >>> reciprocal__ = handler.read(element__)\n+    >>> reciprocal__.accept\n+    ()\n+\n+\n+Named image::\n+\n+    >>> field = NamedImage()\n+    >>> field.accept\n+    (\'image/*\',)\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedImage"/>\n+\n+    >>> element = etree.XML("""\\\n+    ... <field type="plone.namedfile.field.NamedImage"/>\n+    ... """)\n+\n+    >>> reciprocal = handler.read(element)\n+    >>> reciprocal.accept\n+    (\'image/*\',)\n+\n+\n+Named blob file::\n+\n+    >>> field = NamedBlobFile()\n+    >>> field.accept\n+    ()\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedBlobFile"/>\n+\n+    >>> element = etree.XML("""\\\n+    ... <field type="plone.namedfile.field.NamedBlobFile"/>\n+    ... """)\n+\n+    >>> reciprocal = handler.read(element)\n+    >>> reciprocal.accept\n+    ()\n+\n+\n+Named blob image::\n+\n+    >>> field = NamedBlobImage()\n+    >>> field.accept\n+    (\'image/*\',)\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedBlobImage"/>\n+\n+    >>> element = etree.XML("""\\\n+    ... <field type="plone.namedfile.field.NamedBlobImage"/>\n+    ... """)\n+\n+    >>> reciprocal = handler.read(element)\n+    >>> reciprocal.accept\n+    (\'image/*\',)\n+\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex d7e86ae..f9a22e6 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -1,8 +1,13 @@\n from zope import schema\n+from zope.i18nmessageid import MessageFactory\n from zope.interface import Interface\n from zope.schema.interfaces import IObject\n \n \n+# We don\'t have translations here, but this allows\n+_ = MessageFactory("plone")\n+\n+\n HAVE_BLOBS = True\n \n \n@@ -97,10 +102,45 @@ class INamedField(IObject):\n class INamedFileField(INamedField):\n     """Field for storing INamedFile objects."""\n \n+    accept = schema.Tuple(\n+        title=_("namedfile_accept_title", default="accept types"),\n+        description=_(\n+            "namedfile_accept_description",\n+            default=(\n+                \'The media types which are allowed for this field. \'\n+                \'Unset to allow any type. \'\n+                \'Can be any valid identifier for the "accept" attribute of \'\n+                \'the HTML file input, like extensions (e.g. ".mp3") or IANA \'\n+                \'media types (e.g. "image/webp").\'\n+            ),\n+        ),\n+        value_type=schema.TextLine(),\n+        default=(),\n+        required=False,\n+    )\n+\n \n class INamedImageField(INamedField):\n     """Field for storing INamedImage objects."""\n \n+    accept = schema.Tuple(\n+        title=_("namedimage_accept_title", default="accept types"),\n+        description=_(\n+            "namedimage_accept_description",\n+            default=(\n+                \'The media types which are allowed for this image field. \'\n+                \'The default is to allow any "image/*" content type. \'\n+                \'Unset to allow any type. \'\n+                \'Can be any valid identifier for the "accept" attribute of \'\n+                \'the HTML file input, like extensions (e.g. ".jpg") or IANA \'\n+                \'media types (e.g. "image/webp").\'\n+            ),\n+        ),\n+        value_type=schema.TextLine(),\n+        default=("image/*",),\n+        required=False,\n+    )\n+\n \n class IStorage(Interface):\n     """Store file data"""\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex d05a42b..8aa7f27 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -3,7 +3,6 @@\n from DateTime import DateTime\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamedImage\n-from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n from plone.namedfile.tests import MockNamedImage\n from plone.namedfile.utils import get_contenttype\n@@ -110,35 +109,3 @@ def test_get_contenttype(self):\n             ),\n             "application/msword",\n         )\n-\n-\n-class TestValidation(unittest.TestCase):\n-\n-    layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n-\n-    def _makeImage(self, *args, **kw):\n-        return NamedImage(*args, **kw)\n-\n-    def testImageValidation(self):\n-        from plone.namedfile.field import InvalidImageFile\n-        from plone.namedfile.field import validate_image_field\n-        from plone.namedfile.interfaces import INamedImageField\n-        from zope.interface import implementer\n-\n-        @implementer(INamedImageField)\n-        class FakeField:\n-            __name__ = "logo"\n-\n-        # field is empty\n-        validate_image_field(FakeField(), None)\n-\n-        # field has an empty file\n-        image = self._makeImage()\n-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), image)\n-\n-        # field has an image file\n-        image._setData(zptlogo)\n-        validate_image_field(FakeField(), image)\n-\n-        notimage = NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), notimage)\ndiff --git a/plone/namedfile/tests/test_validation.py b/plone/namedfile/tests/test_validation.py\nnew file mode 100644\nindex 0000000..7dec84b\n--- /dev/null\n+++ b/plone/namedfile/tests/test_validation.py\n@@ -0,0 +1,115 @@\n+from plone.namedfile import field\n+from plone.namedfile import file\n+from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n+from plone.namedfile.tests import getFile\n+\n+import unittest\n+\n+\n+class TestValidation(unittest.TestCase):\n+\n+    layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n+\n+    def test_validation_NamedImage_default(self):\n+        # Testing the default accepted media types\n+        image_field = field.NamedImage(\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        image_field.validate(None)\n+\n+        # field has an empty file, fails\n+        # NOTE: This fails not because the NamedFile is empty but because the\n+        #       fallback default mimetype is "application/octet-stream".\n+        #       Not sure, if we should change this behavior.\n+        #       See: plone.namedfile.utils.get_contenttype\n+        named_image = file.NamedImage()\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+        # field has an png image file, passes\n+        named_image = file.NamedImage(getFile("image.png"), filename="image.png")\n+        image_field.validate(named_image)\n+\n+        # field has an gif image file, passes\n+        named_image = file.NamedImage(getFile("image.gif"), filename="image.gif")\n+        image_field.validate(named_image)\n+\n+        # field has a non-image file, fails\n+        named_image = file.NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+    def test_validation_NamedImage_custom(self):\n+        # Testing the default accepted media types\n+        image_field = field.NamedImage(\n+            accept=("image/png", ".jpg"),\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        image_field.validate(None)\n+\n+        # field has an empty file, fails\n+        # NOTE: This fails not because the NamedFile is empty but because the\n+        #       fallback default mimetype is "application/octet-stream".\n+        #       Not sure, if we should change this behavior.\n+        #       See: plone.namedfile.utils.get_contenttype\n+        named_image = file.NamedImage()\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+        # field has a png image file, passes\n+        named_image = file.NamedImage(getFile("image.png"), filename="image.png")\n+        image_field.validate(named_image)\n+\n+        # field has a jpg image file, passes also\n+        named_image = file.NamedImage(getFile("image.jpg"), filename="image.jpg")\n+        image_field.validate(named_image)\n+\n+        # field has a gif image file, fails because it\'s not in the accepted\n+        # media types\n+        named_image = file.NamedImage(getFile("image.gif"), filename="image.gif")\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+        # field has a non-image file, fails\n+        named_image = file.NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+    def test_validation_NamedFile_default(self):\n+        # Testing the default accepted media types\n+        file_field = field.NamedFile(\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        file_field.validate(None)\n+\n+        # field has n pdf file file, passes\n+        named_file = file.NamedFile(getFile("file.pdf"), filename="file.pdf")\n+        file_field.validate(named_file)\n+\n+        # field has a gif file, passes\n+        named_file = file.NamedFile(getFile("image.gif"), filename="image.gif")\n+        file_field.validate(named_file)\n+\n+    def test_validation_NamedFile_custom(self):\n+        # Testing the default accepted media types\n+        file_field = field.NamedFile(\n+            accept=("application/pdf", ".jpg"),\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        file_field.validate(None)\n+\n+        # field has a pdf file file, passes\n+        named_file = file.NamedFile(getFile("file.pdf"), filename="file.pdf")\n+        file_field.validate(named_file)\n+\n+        # field has a jpg file file, passes also\n+        named_file = file.NamedFile(getFile("image.jpg"), filename="image.jpg")\n+        file_field.validate(named_file)\n+\n+        # field has a gif file, fails because it\'s not in the accepted media\n+        # types\n+        named_file = file.NamedFile(getFile("image.gif"), filename="image.gif")\n+        self.assertRaises(field.InvalidFile, file_field.validate, named_file)\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex b5625d0..759afe3 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -153,6 +153,55 @@ The filename must be set to a unicode string, not a bytestring::\n     zope.schema._bootstrapinterfaces.WrongType: ...\n \n \n+Restricting media types\n+-----------------------\n+\n+It is possible to define accepted media types, just like with the "accept"\n+attribute of HTML file inputs. You can pass a tuple of file extensions or media\n+type values::\n+\n+\n+    >>> class IFileContainerConstrained(Interface):\n+    ...     file = field.NamedFile(title=u"File", accept=("text/plain", ".pdf"))\n+\n+    >>> @implementer(IFileContainerConstrained)\n+    ... class FileContainerConstrained:\n+    ...     __allow_access_to_unprotected_subobjects__ = 1\n+    ...     def __init__(self):\n+    ...         self.file = namedfile.NamedFile()\n+\n+    >>> container_constrained = FileContainerConstrained()\n+\n+\n+Adding valid file types and checking passes. Note, that the validation logic is\n+called by the framework and does not need to be called manualle, like in this\n+test.\n+::\n+\n+    >>> container_constrained.file = namedfile.NamedFile(\n+    ...     \'dummy test data\',\n+    ...     filename=u"test.txt"\n+    ... )\n+    >>> IFileContainerConstrained["file"].validate(container_constrained.file)\n+\n+    >>> container_constrained.file = namedfile.NamedFile(\n+    ...     \'dummy test data\',\n+    ...     filename=u"test.pdf"\n+    ... )\n+    >>> IFileContainerConstrained["file"].validate(container_constrained.file)\n+\n+Adding invalid file types and checking fails with a ValidationError::\n+\n+    >>> container_constrained.file = namedfile.NamedFile(\n+    ...     \'dummy test data\',\n+    ...     filename=u"test.wav"\n+    ... )\n+    >>> IFileContainerConstrained["file"].validate(container_constrained.file)\n+    Traceback (most recent call last):\n+    ...\n+    plone.namedfile.field.InvalidFile: (\'audio/x-wav\', \'file\')\n+\n+\n Download view\n -------------\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2024-03-14T21:08:32+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.namedfile/commit/af1c2928e565c6c7bb0b02150110b091533ff7fe

Improve contenttype detection logic for unregistered but common types.

Change get_contenttype to support common types which are or were not registered
with IANA, like image/webp or audio/midi.

Note: image/webp is already a IANA registered type and also added by
Products.MimetypesRegistry.

Files changed:
A news/157-2.feature
A plone/namedfile/tests/test_utils.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/utils/__init__.py

b'diff --git a/news/157-2.feature b/news/157-2.feature\nnew file mode 100644\nindex 0000000..3de1ec2\n--- /dev/null\n+++ b/news/157-2.feature\n@@ -0,0 +1,8 @@\n+Improve contenttype detection logic for unregistered but common types.\n+\n+Change get_contenttype to support common types which are or were not registered\n+with IANA, like image/webp or audio/midi.\n+\n+Note: image/webp is already a IANA registered type and also added by\n+Products.MimetypesRegistry.\n+[thet]\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex 8aa7f27..5c4db43 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -89,23 +89,3 @@ def test_extract_media_type(self):\n         self.assertEqual(extract("TEXT/PLAIN"), "text/plain")\n         self.assertEqual(extract("text / plain"), "text/plain")\n         self.assertEqual(extract(" text/plain ; charset=utf-8"), "text/plain")\n-\n-    def test_get_contenttype(self):\n-        self.assertEqual(\n-            get_contenttype(NamedImage(getFile("image.gif"), contentType="image/gif")),\n-            "image/gif",\n-        )\n-        self.assertEqual(\n-            get_contenttype(NamedImage(getFile("image.gif"), filename="image.gif")),\n-            "image/gif",\n-        )\n-        self.assertEqual(\n-            get_contenttype(NamedImage(getFile("image.tif"), filename="image.tif")),\n-            "image/tiff",\n-        )\n-        self.assertEqual(\n-            get_contenttype(\n-                NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n-            ),\n-            "application/msword",\n-        )\ndiff --git a/plone/namedfile/tests/test_utils.py b/plone/namedfile/tests/test_utils.py\nnew file mode 100644\nindex 0000000..4ef9bff\n--- /dev/null\n+++ b/plone/namedfile/tests/test_utils.py\n@@ -0,0 +1,64 @@\n+from plone.namedfile.file import NamedImage\n+from plone.namedfile.tests import getFile\n+from plone.namedfile.utils import get_contenttype\n+\n+import unittest\n+\n+\n+class TestUtils(unittest.TestCase):\n+\n+    def test_get_contenttype(self):\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("image.gif"),\n+                    contentType="image/gif",\n+                )\n+            ),\n+            "image/gif",\n+        )\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("image.gif"),\n+                    filename="image.gif",\n+                )\n+            ),\n+            "image/gif",\n+        )\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("image.tif"),\n+                    filename="image.tif",\n+                )\n+            ),\n+            "image/tiff",\n+        )\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("notimage.doc"),\n+                    filename="notimage.doc",\n+                )\n+            ),\n+            "application/msword",\n+        )\n+\n+        # Filename only detection of a non-IANA registered type.\n+        self.assertEqual(\n+            get_contenttype(filename="image.webp"),\n+            "image/webp",\n+        )\n+\n+        # Filename only detection of a non-IANA registered type.\n+        self.assertEqual(\n+            get_contenttype(filename="song.midi"),\n+            "audio/midi",\n+        )\n+\n+        # Detection of a surely not registered type.\n+        self.assertEqual(\n+            get_contenttype(filename="nothing.plonenamedfile"),\n+            "application/octet-stream",\n+        )\ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex b27c882..2f17ead 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -14,7 +14,6 @@\n from ZPublisher.Iterators import IStreamIterator\n \n import mimetypes\n-import os.path\n import piexif\n import PIL.Image\n import re\n@@ -126,8 +125,7 @@ def get_contenttype(file=None, filename=None, default="application/octet-stream"\n \n     filename = getattr(file, "filename", filename)\n     if filename:\n-        extension = os.path.splitext(filename)[1].lower()\n-        return mimetypes.types_map.get(extension, "application/octet-stream")\n+        return mimetypes.guess_type(filename, strict=False)[0] or default\n \n     return default\n \n'

Repository: plone.namedfile


Branch: refs/heads/master
Date: 2024-03-15T11:16:14+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@py76.be>
Commit: https://github.com/plone/plone.namedfile/commit/c1a80f7ee4515528b717d79a1ae7bfad110b3e4d

Merge pull request #158 from plone/allowed_content_types

Support for allowed content types.

Files changed:
A news/157-2.feature
A news/157.feature
A plone/namedfile/tests/test_utils.py
A plone/namedfile/tests/test_validation.py
M plone/namedfile/field.py
M plone/namedfile/field.zcml
M plone/namedfile/handler.rst
M plone/namedfile/interfaces.py
M plone/namedfile/tests/test_image.py
M plone/namedfile/usage.rst
M plone/namedfile/utils/__init__.py

b'diff --git a/news/157-2.feature b/news/157-2.feature\nnew file mode 100644\nindex 0000000..3de1ec2\n--- /dev/null\n+++ b/news/157-2.feature\n@@ -0,0 +1,8 @@\n+Improve contenttype detection logic for unregistered but common types.\n+\n+Change get_contenttype to support common types which are or were not registered\n+with IANA, like image/webp or audio/midi.\n+\n+Note: image/webp is already a IANA registered type and also added by\n+Products.MimetypesRegistry.\n+[thet]\ndiff --git a/news/157.feature b/news/157.feature\nnew file mode 100644\nindex 0000000..28aabda\n--- /dev/null\n+++ b/news/157.feature\n@@ -0,0 +1,7 @@\n+Support for allowed media types.\n+\n+Support to constrain files to specific media types with a "accept" attribute on\n+file and image fields, just like the "accept" attribute of the HTML file input.\n+\n+Fixes: #157\n+[thet]\ndiff --git a/plone/namedfile/field.py b/plone/namedfile/field.py\nindex 12dc789..70b2c5c 100644\n--- a/plone/namedfile/field.py\n+++ b/plone/namedfile/field.py\n@@ -21,13 +21,24 @@\n from zope.schema import Object\n from zope.schema import ValidationError\n \n+import mimetypes\n \n _ = MessageFactory("plone")\n \n \n-@implementer(IPluggableImageFieldValidation)\n-@adapter(INamedImageField, Interface)\n-class ImageContenttypeValidator:\n+class InvalidFile(ValidationError):\n+    """Exception for a invalid file."""\n+\n+    __doc__ = _("Invalid file")\n+\n+\n+class InvalidImageFile(ValidationError):\n+    """Exception for a invalid image file."""\n+\n+    __doc__ = _("Invalid image file")\n+\n+\n+class BinaryContenttypeValidator:\n     def __init__(self, field, value):\n         self.field = field\n         self.value = value\n@@ -35,93 +46,108 @@ def __init__(self, field, value):\n     def __call__(self):\n         if self.value is None:\n             return\n-        mimetype = get_contenttype(self.value)\n-        if mimetype.split("/")[0] != "image":\n-            raise InvalidImageFile(mimetype, self.field.__name__)\n \n+        if not self.field.accept:\n+            # No restrictions.\n+            return\n \n-class InvalidImageFile(ValidationError):\n-    """Exception for invalid image file"""\n+        mimetype = get_contenttype(self.value)\n \n-    __doc__ = _("Invalid image file")\n+        for accept in self.field.accept:\n+            if accept[0] == ".":\n+                # This is a file extension. Get a media type from it.\n+                accept = mimetypes.guess_type(f"dummy{accept}", strict=False)[0]\n+                if accept is None:\n+                    # This extension is unknown. Skip it.\n+                    continue\n \n+            try:\n+                accept_type, accept_subtype = accept.split("/")\n+                content_type, content_subtype = mimetype.split("/")\n+            except ValueError:\n+                # The accept type is invalid. Skip it.\n+                continue\n \n-def validate_binary_field(interface, field, value):\n-    for name, validator in getAdapters((field, value), interface):\n-        validator()\n+            if accept_type == content_type and (\n+                accept_subtype == content_subtype or accept_subtype == "*"\n+            ):\n+                # This file is allowed, just don\'t raise a ValidationError.\n+                return\n \n+        # The file\'s content type is not allowed. Raise a ValidationError.\n+        raise self.exception(mimetype, self.field.__name__)\n \n-def validate_image_field(field, value):\n-    validate_binary_field(IPluggableImageFieldValidation, field, value)\n \n+@implementer(IPluggableFileFieldValidation)\n+@adapter(INamedFileField, Interface)\n+class FileContenttypeValidator(BinaryContenttypeValidator):\n+    exception = InvalidFile\n \n-def validate_file_field(field, value):\n-    validate_binary_field(IPluggableFileFieldValidation, field, value)\n \n+@implementer(IPluggableImageFieldValidation)\n+@adapter(INamedImageField, Interface)\n+class ImageContenttypeValidator(BinaryContenttypeValidator):\n+    exception = InvalidImageFile\n \n-@implementer(INamedFileField)\n-class NamedFile(Object):\n-    """A NamedFile field"""\n \n-    _type = FileValueType\n-    schema = INamedFile\n+class NamedField(Object):\n \n     def __init__(self, **kw):\n+        if "accept" in kw:\n+            self.accept = kw.pop("accept")\n         if "schema" in kw:\n             self.schema = kw.pop("schema")\n         super().__init__(schema=self.schema, **kw)\n \n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_file_field(self, value)\n+    def validate(self, value, interface):\n+        super().validate(value)\n+        for name, validator in getAdapters((self, value), interface):\n+            validator()\n+\n+\n+@implementer(INamedFileField)\n+class NamedFile(NamedField):\n+    """A NamedFile field"""\n+\n+    _type = FileValueType\n+    schema = INamedFile\n+    accept = ()\n+\n+    def validate(self, value):\n+        super().validate(value, IPluggableFileFieldValidation)\n \n \n @implementer(INamedImageField)\n-class NamedImage(Object):\n+class NamedImage(NamedField):\n     """A NamedImage field"""\n \n     _type = ImageValueType\n     schema = INamedImage\n+    accept = ("image/*",)\n \n-    def __init__(self, **kw):\n-        if "schema" in kw:\n-            self.schema = kw.pop("schema")\n-        super().__init__(schema=self.schema, **kw)\n-\n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_image_field(self, value)\n+    def validate(self, value):\n+        super().validate(value, IPluggableImageFieldValidation)\n \n \n @implementer(INamedBlobFileField)\n-class NamedBlobFile(Object):\n+class NamedBlobFile(NamedField):\n     """A NamedBlobFile field"""\n \n     _type = BlobFileValueType\n     schema = INamedBlobFile\n+    accept = ()\n \n-    def __init__(self, **kw):\n-        if "schema" in kw:\n-            self.schema = kw.pop("schema")\n-        super().__init__(schema=self.schema, **kw)\n-\n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_file_field(self, value)\n+    def validate(self, value):\n+        super().validate(value, IPluggableFileFieldValidation)\n \n \n @implementer(INamedBlobImageField)\n-class NamedBlobImage(Object):\n+class NamedBlobImage(NamedField):\n     """A NamedBlobImage field"""\n \n     _type = BlobImageValueType\n     schema = INamedBlobImage\n+    accept = ("image/*",)\n \n-    def __init__(self, **kw):\n-        if "schema" in kw:\n-            self.schema = kw.pop("schema")\n-        super().__init__(schema=self.schema, **kw)\n-\n-    def _validate(self, value):\n-        super()._validate(value)\n-        validate_image_field(self, value)\n+    def validate(self, value):\n+        super().validate(value, IPluggableImageFieldValidation)\ndiff --git a/plone/namedfile/field.zcml b/plone/namedfile/field.zcml\nindex 6a20ba2..eff96f4 100644\n--- a/plone/namedfile/field.zcml\n+++ b/plone/namedfile/field.zcml\n@@ -3,9 +3,14 @@\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n     xmlns:browser="http://namespaces.zope.org/browser">\n \n+    <adapter\n+        factory=".field.FileContenttypeValidator"\n+        name="file_contenttype"\n+    />\n+\n     <adapter\n         factory=".field.ImageContenttypeValidator"\n         name="image_contenttype"\n     />\n \n-</configure>\n\\ No newline at end of file\n+</configure>\ndiff --git a/plone/namedfile/handler.rst b/plone/namedfile/handler.rst\nindex b1caf27..4e677f7 100644\n--- a/plone/namedfile/handler.rst\n+++ b/plone/namedfile/handler.rst\n@@ -41,13 +41,23 @@ Named file\n \n ::\n \n-    >>> field = NamedFile(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedFile(\n+    ...     __name__="dummy",\n+    ...     accept=("audio/ogg", "audio/flac"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedFile">\n+      <accept>\n+        <element>audio/ogg</element>\n+        <element>audio/flac</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -56,6 +66,10 @@ Named file\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedFile">\n+    ...   <accept>\n+    ...     <element>audio/ogg</element>\n+    ...     <element>audio/flac</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -69,6 +83,8 @@ Named file\n     <class \'plone.namedfile.field.NamedFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'audio/ogg\', \'audio/flac\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -84,13 +100,23 @@ Named image\n \n ::\n \n-    >>> field = NamedImage(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedImage(\n+    ...     __name__="dummy",\n+    ...     accept=("image/png", "image/webp"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedImage">\n+      <accept>\n+        <element>image/png</element>\n+        <element>image/webp</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -99,6 +125,10 @@ Named image\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedImage">\n+    ...   <accept>\n+    ...     <element>image/png</element>\n+    ...     <element>image/webp</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -112,6 +142,8 @@ Named image\n     <class \'plone.namedfile.field.NamedImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'image/png\', \'image/webp\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -127,13 +159,23 @@ Named blob file\n \n ::\n \n-    >>> field = NamedBlobFile(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedBlobFile(\n+    ...     __name__="dummy",\n+    ...     accept=("audio/ogg", "audio/flac"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobFile">\n+      <accept>\n+        <element>audio/ogg</element>\n+        <element>audio/flac</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -142,6 +184,10 @@ Named blob file\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedBlobFile">\n+    ...   <accept>\n+    ...     <element>audio/ogg</element>\n+    ...     <element>audio/flac</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -155,6 +201,8 @@ Named blob file\n     <class \'plone.namedfile.field.NamedBlobFile\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'audio/ogg\', \'audio/flac\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -170,13 +218,23 @@ Named blob image\n \n ::\n \n-    >>> field = NamedBlobImage(__name__="dummy", title=u"Test",\n-    ...     description=u"Test desc", required=False, readonly=True)\n+    >>> field = NamedBlobImage(\n+    ...     __name__="dummy",\n+    ...     accept=("image/png", "image/webp"),\n+    ...     title=u"Test",\n+    ...     description=u"Test desc",\n+    ...     required=False,\n+    ...     readonly=True\n+    ... )\n     >>> fieldType = IFieldNameExtractor(field)()\n     >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n     >>> element = handler.write(field, u\'dummy\', fieldType) #doctest: +ELLIPSIS\n     >>> print(prettyXML(element))\n     <field name="dummy" type="plone.namedfile.field.NamedBlobImage">\n+      <accept>\n+        <element>image/png</element>\n+        <element>image/webp</element>\n+      </accept>\n       <description>Test desc</description>\n       <readonly>True</readonly>\n       <required>False</required>\n@@ -185,6 +243,10 @@ Named blob image\n \n     >>> element = etree.XML("""\\\n     ... <field name="dummy" type="plone.namedfile.field.NamedBlobImage">\n+    ...   <accept>\n+    ...     <element>image/png</element>\n+    ...     <element>image/webp</element>\n+    ...   </accept>\n     ...   <description>Test desc</description>\n     ...   <missing_value />\n     ...   <readonly>True</readonly>\n@@ -198,6 +260,8 @@ Named blob image\n     <class \'plone.namedfile.field.NamedBlobImage\'>\n     >>> reciprocal.__name__\n     \'dummy\'\n+    >>> reciprocal.accept\n+    (\'image/png\', \'image/webp\')\n     >>> print(reciprocal.title)\n     Test\n     >>> print(reciprocal.description)\n@@ -206,3 +270,87 @@ Named blob image\n     False\n     >>> reciprocal.readonly\n     True\n+\n+\n+Test the default accepted media type\n+------------------------------------\n+\n+Named file::\n+\n+    >>> field = NamedFile()\n+    >>> field.accept\n+    ()\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedFile"/>\n+\n+    >>> element__ = etree.XML("""\\\n+    ... <field name="dummy" type="plone.namedfile.field.NamedFile"/>\n+    ... """)\n+\n+    >>> reciprocal__ = handler.read(element__)\n+    >>> reciprocal__.accept\n+    ()\n+\n+\n+Named image::\n+\n+    >>> field = NamedImage()\n+    >>> field.accept\n+    (\'image/*\',)\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedImage"/>\n+\n+    >>> element = etree.XML("""\\\n+    ... <field type="plone.namedfile.field.NamedImage"/>\n+    ... """)\n+\n+    >>> reciprocal = handler.read(element)\n+    >>> reciprocal.accept\n+    (\'image/*\',)\n+\n+\n+Named blob file::\n+\n+    >>> field = NamedBlobFile()\n+    >>> field.accept\n+    ()\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedBlobFile"/>\n+\n+    >>> element = etree.XML("""\\\n+    ... <field type="plone.namedfile.field.NamedBlobFile"/>\n+    ... """)\n+\n+    >>> reciprocal = handler.read(element)\n+    >>> reciprocal.accept\n+    ()\n+\n+\n+Named blob image::\n+\n+    >>> field = NamedBlobImage()\n+    >>> field.accept\n+    (\'image/*\',)\n+    >>> fieldType = IFieldNameExtractor(field)()\n+    >>> handler = getUtility(IFieldExportImportHandler, name=fieldType)\n+    >>> element = handler.write(field, u\'dummy\', fieldType)\n+    >>> print(prettyXML(element))\n+    <field name="dummy" type="plone.namedfile.field.NamedBlobImage"/>\n+\n+    >>> element = etree.XML("""\\\n+    ... <field type="plone.namedfile.field.NamedBlobImage"/>\n+    ... """)\n+\n+    >>> reciprocal = handler.read(element)\n+    >>> reciprocal.accept\n+    (\'image/*\',)\n+\ndiff --git a/plone/namedfile/interfaces.py b/plone/namedfile/interfaces.py\nindex d7e86ae..f9a22e6 100644\n--- a/plone/namedfile/interfaces.py\n+++ b/plone/namedfile/interfaces.py\n@@ -1,8 +1,13 @@\n from zope import schema\n+from zope.i18nmessageid import MessageFactory\n from zope.interface import Interface\n from zope.schema.interfaces import IObject\n \n \n+# We don\'t have translations here, but this allows\n+_ = MessageFactory("plone")\n+\n+\n HAVE_BLOBS = True\n \n \n@@ -97,10 +102,45 @@ class INamedField(IObject):\n class INamedFileField(INamedField):\n     """Field for storing INamedFile objects."""\n \n+    accept = schema.Tuple(\n+        title=_("namedfile_accept_title", default="accept types"),\n+        description=_(\n+            "namedfile_accept_description",\n+            default=(\n+                \'The media types which are allowed for this field. \'\n+                \'Unset to allow any type. \'\n+                \'Can be any valid identifier for the "accept" attribute of \'\n+                \'the HTML file input, like extensions (e.g. ".mp3") or IANA \'\n+                \'media types (e.g. "image/webp").\'\n+            ),\n+        ),\n+        value_type=schema.TextLine(),\n+        default=(),\n+        required=False,\n+    )\n+\n \n class INamedImageField(INamedField):\n     """Field for storing INamedImage objects."""\n \n+    accept = schema.Tuple(\n+        title=_("namedimage_accept_title", default="accept types"),\n+        description=_(\n+            "namedimage_accept_description",\n+            default=(\n+                \'The media types which are allowed for this image field. \'\n+                \'The default is to allow any "image/*" content type. \'\n+                \'Unset to allow any type. \'\n+                \'Can be any valid identifier for the "accept" attribute of \'\n+                \'the HTML file input, like extensions (e.g. ".jpg") or IANA \'\n+                \'media types (e.g. "image/webp").\'\n+            ),\n+        ),\n+        value_type=schema.TextLine(),\n+        default=("image/*",),\n+        required=False,\n+    )\n+\n \n class IStorage(Interface):\n     """Store file data"""\ndiff --git a/plone/namedfile/tests/test_image.py b/plone/namedfile/tests/test_image.py\nindex d05a42b..5c4db43 100644\n--- a/plone/namedfile/tests/test_image.py\n+++ b/plone/namedfile/tests/test_image.py\n@@ -3,7 +3,6 @@\n from DateTime import DateTime\n from plone.namedfile.file import NamedImage\n from plone.namedfile.interfaces import INamedImage\n-from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n from plone.namedfile.tests import getFile\n from plone.namedfile.tests import MockNamedImage\n from plone.namedfile.utils import get_contenttype\n@@ -90,55 +89,3 @@ def test_extract_media_type(self):\n         self.assertEqual(extract("TEXT/PLAIN"), "text/plain")\n         self.assertEqual(extract("text / plain"), "text/plain")\n         self.assertEqual(extract(" text/plain ; charset=utf-8"), "text/plain")\n-\n-    def test_get_contenttype(self):\n-        self.assertEqual(\n-            get_contenttype(NamedImage(getFile("image.gif"), contentType="image/gif")),\n-            "image/gif",\n-        )\n-        self.assertEqual(\n-            get_contenttype(NamedImage(getFile("image.gif"), filename="image.gif")),\n-            "image/gif",\n-        )\n-        self.assertEqual(\n-            get_contenttype(NamedImage(getFile("image.tif"), filename="image.tif")),\n-            "image/tiff",\n-        )\n-        self.assertEqual(\n-            get_contenttype(\n-                NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n-            ),\n-            "application/msword",\n-        )\n-\n-\n-class TestValidation(unittest.TestCase):\n-\n-    layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n-\n-    def _makeImage(self, *args, **kw):\n-        return NamedImage(*args, **kw)\n-\n-    def testImageValidation(self):\n-        from plone.namedfile.field import InvalidImageFile\n-        from plone.namedfile.field import validate_image_field\n-        from plone.namedfile.interfaces import INamedImageField\n-        from zope.interface import implementer\n-\n-        @implementer(INamedImageField)\n-        class FakeField:\n-            __name__ = "logo"\n-\n-        # field is empty\n-        validate_image_field(FakeField(), None)\n-\n-        # field has an empty file\n-        image = self._makeImage()\n-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), image)\n-\n-        # field has an image file\n-        image._setData(zptlogo)\n-        validate_image_field(FakeField(), image)\n-\n-        notimage = NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n-        self.assertRaises(InvalidImageFile, validate_image_field, FakeField(), notimage)\ndiff --git a/plone/namedfile/tests/test_utils.py b/plone/namedfile/tests/test_utils.py\nnew file mode 100644\nindex 0000000..4ef9bff\n--- /dev/null\n+++ b/plone/namedfile/tests/test_utils.py\n@@ -0,0 +1,64 @@\n+from plone.namedfile.file import NamedImage\n+from plone.namedfile.tests import getFile\n+from plone.namedfile.utils import get_contenttype\n+\n+import unittest\n+\n+\n+class TestUtils(unittest.TestCase):\n+\n+    def test_get_contenttype(self):\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("image.gif"),\n+                    contentType="image/gif",\n+                )\n+            ),\n+            "image/gif",\n+        )\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("image.gif"),\n+                    filename="image.gif",\n+                )\n+            ),\n+            "image/gif",\n+        )\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("image.tif"),\n+                    filename="image.tif",\n+                )\n+            ),\n+            "image/tiff",\n+        )\n+        self.assertEqual(\n+            get_contenttype(\n+                NamedImage(\n+                    getFile("notimage.doc"),\n+                    filename="notimage.doc",\n+                )\n+            ),\n+            "application/msword",\n+        )\n+\n+        # Filename only detection of a non-IANA registered type.\n+        self.assertEqual(\n+            get_contenttype(filename="image.webp"),\n+            "image/webp",\n+        )\n+\n+        # Filename only detection of a non-IANA registered type.\n+        self.assertEqual(\n+            get_contenttype(filename="song.midi"),\n+            "audio/midi",\n+        )\n+\n+        # Detection of a surely not registered type.\n+        self.assertEqual(\n+            get_contenttype(filename="nothing.plonenamedfile"),\n+            "application/octet-stream",\n+        )\ndiff --git a/plone/namedfile/tests/test_validation.py b/plone/namedfile/tests/test_validation.py\nnew file mode 100644\nindex 0000000..7dec84b\n--- /dev/null\n+++ b/plone/namedfile/tests/test_validation.py\n@@ -0,0 +1,115 @@\n+from plone.namedfile import field\n+from plone.namedfile import file\n+from plone.namedfile.testing import PLONE_NAMEDFILE_INTEGRATION_TESTING\n+from plone.namedfile.tests import getFile\n+\n+import unittest\n+\n+\n+class TestValidation(unittest.TestCase):\n+\n+    layer = PLONE_NAMEDFILE_INTEGRATION_TESTING\n+\n+    def test_validation_NamedImage_default(self):\n+        # Testing the default accepted media types\n+        image_field = field.NamedImage(\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        image_field.validate(None)\n+\n+        # field has an empty file, fails\n+        # NOTE: This fails not because the NamedFile is empty but because the\n+        #       fallback default mimetype is "application/octet-stream".\n+        #       Not sure, if we should change this behavior.\n+        #       See: plone.namedfile.utils.get_contenttype\n+        named_image = file.NamedImage()\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+        # field has an png image file, passes\n+        named_image = file.NamedImage(getFile("image.png"), filename="image.png")\n+        image_field.validate(named_image)\n+\n+        # field has an gif image file, passes\n+        named_image = file.NamedImage(getFile("image.gif"), filename="image.gif")\n+        image_field.validate(named_image)\n+\n+        # field has a non-image file, fails\n+        named_image = file.NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+    def test_validation_NamedImage_custom(self):\n+        # Testing the default accepted media types\n+        image_field = field.NamedImage(\n+            accept=("image/png", ".jpg"),\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        image_field.validate(None)\n+\n+        # field has an empty file, fails\n+        # NOTE: This fails not because the NamedFile is empty but because the\n+        #       fallback default mimetype is "application/octet-stream".\n+        #       Not sure, if we should change this behavior.\n+        #       See: plone.namedfile.utils.get_contenttype\n+        named_image = file.NamedImage()\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+        # field has a png image file, passes\n+        named_image = file.NamedImage(getFile("image.png"), filename="image.png")\n+        image_field.validate(named_image)\n+\n+        # field has a jpg image file, passes also\n+        named_image = file.NamedImage(getFile("image.jpg"), filename="image.jpg")\n+        image_field.validate(named_image)\n+\n+        # field has a gif image file, fails because it\'s not in the accepted\n+        # media types\n+        named_image = file.NamedImage(getFile("image.gif"), filename="image.gif")\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+        # field has a non-image file, fails\n+        named_image = file.NamedImage(getFile("notimage.doc"), filename="notimage.doc")\n+        self.assertRaises(field.InvalidImageFile, image_field.validate, named_image)\n+\n+    def test_validation_NamedFile_default(self):\n+        # Testing the default accepted media types\n+        file_field = field.NamedFile(\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        file_field.validate(None)\n+\n+        # field has n pdf file file, passes\n+        named_file = file.NamedFile(getFile("file.pdf"), filename="file.pdf")\n+        file_field.validate(named_file)\n+\n+        # field has a gif file, passes\n+        named_file = file.NamedFile(getFile("image.gif"), filename="image.gif")\n+        file_field.validate(named_file)\n+\n+    def test_validation_NamedFile_custom(self):\n+        # Testing the default accepted media types\n+        file_field = field.NamedFile(\n+            accept=("application/pdf", ".jpg"),\n+            required=False,\n+        )\n+\n+        # field is empty, passes\n+        file_field.validate(None)\n+\n+        # field has a pdf file file, passes\n+        named_file = file.NamedFile(getFile("file.pdf"), filename="file.pdf")\n+        file_field.validate(named_file)\n+\n+        # field has a jpg file file, passes also\n+        named_file = file.NamedFile(getFile("image.jpg"), filename="image.jpg")\n+        file_field.validate(named_file)\n+\n+        # field has a gif file, fails because it\'s not in the accepted media\n+        # types\n+        named_file = file.NamedFile(getFile("image.gif"), filename="image.gif")\n+        self.assertRaises(field.InvalidFile, file_field.validate, named_file)\ndiff --git a/plone/namedfile/usage.rst b/plone/namedfile/usage.rst\nindex b5625d0..759afe3 100644\n--- a/plone/namedfile/usage.rst\n+++ b/plone/namedfile/usage.rst\n@@ -153,6 +153,55 @@ The filename must be set to a unicode string, not a bytestring::\n     zope.schema._bootstrapinterfaces.WrongType: ...\n \n \n+Restricting media types\n+-----------------------\n+\n+It is possible to define accepted media types, just like with the "accept"\n+attribute of HTML file inputs. You can pass a tuple of file extensions or media\n+type values::\n+\n+\n+    >>> class IFileContainerConstrained(Interface):\n+    ...     file = field.NamedFile(title=u"File", accept=("text/plain", ".pdf"))\n+\n+    >>> @implementer(IFileContainerConstrained)\n+    ... class FileContainerConstrained:\n+    ...     __allow_access_to_unprotected_subobjects__ = 1\n+    ...     def __init__(self):\n+    ...         self.file = namedfile.NamedFile()\n+\n+    >>> container_constrained = FileContainerConstrained()\n+\n+\n+Adding valid file types and checking passes. Note, that the validation logic is\n+called by the framework and does not need to be called manualle, like in this\n+test.\n+::\n+\n+    >>> container_constrained.file = namedfile.NamedFile(\n+    ...     \'dummy test data\',\n+    ...     filename=u"test.txt"\n+    ... )\n+    >>> IFileContainerConstrained["file"].validate(container_constrained.file)\n+\n+    >>> container_constrained.file = namedfile.NamedFile(\n+    ...     \'dummy test data\',\n+    ...     filename=u"test.pdf"\n+    ... )\n+    >>> IFileContainerConstrained["file"].validate(container_constrained.file)\n+\n+Adding invalid file types and checking fails with a ValidationError::\n+\n+    >>> container_constrained.file = namedfile.NamedFile(\n+    ...     \'dummy test data\',\n+    ...     filename=u"test.wav"\n+    ... )\n+    >>> IFileContainerConstrained["file"].validate(container_constrained.file)\n+    Traceback (most recent call last):\n+    ...\n+    plone.namedfile.field.InvalidFile: (\'audio/x-wav\', \'file\')\n+\n+\n Download view\n -------------\n \ndiff --git a/plone/namedfile/utils/__init__.py b/plone/namedfile/utils/__init__.py\nindex b27c882..2f17ead 100644\n--- a/plone/namedfile/utils/__init__.py\n+++ b/plone/namedfile/utils/__init__.py\n@@ -14,7 +14,6 @@\n from ZPublisher.Iterators import IStreamIterator\n \n import mimetypes\n-import os.path\n import piexif\n import PIL.Image\n import re\n@@ -126,8 +125,7 @@ def get_contenttype(file=None, filename=None, default="application/octet-stream"\n \n     filename = getattr(file, "filename", filename)\n     if filename:\n-        extension = os.path.splitext(filename)[1].lower()\n-        return mimetypes.types_map.get(extension, "application/octet-stream")\n+        return mimetypes.guess_type(filename, strict=False)[0] or default\n \n     return default\n \n'

