Repository: plone.app.contentmenu


Branch: refs/heads/master
Date: 2021-04-02T16:03:00+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contentmenu/commit/0dcd80724ea1b344a584079dd05586d191bf2ee5

fix custom menu example in README

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 330ac48..c745db4 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -19,16 +19,22 @@ Custom menus\n \n Custom menus are registered in ``configure.zcml`` like so::\n \n+    <!-- the main menu item -->\n+    <adapter for="* *"\n+        name="plone.contentmenu.my_menu_item"\n+        factory=".menu.MyMainMenuItem"\n+        provides="plone.app.contentmenu.interfaces.IContentMenuItem" />\n+\n+    <!-- the sub menu items - name must match submenuId of MyMainMenuItem class -->\n     <browser:menu\n-        id="my_content_menu"\n+        id="my_fancy_menu"\n         title="The \'My\' menu - allows to do new exciting stuff"\n         class=".menu.MyMenu"\n     />\n \n-im ``menu.py`` the class looks like so::\n+in ``menu.py`` the class looks like so::\n \n     # -*- coding: utf-8 -*-\n-    from plone.memoize.instance import memoize\n     from zope.browsermenu.interfaces import IBrowserMenu\n     from zope.browsermenu.menu import BrowserMenu\n     from zope.browsermenu.menu import BrowserSubMenuItem\n@@ -69,20 +75,12 @@ im ``menu.py`` the class looks like so::\n             \'li_class\': \'plonetoolbar-content-my-fancy\'\n         }\n \n-        def __init__(self, context, request):\n-            super(BrowserSubMenuItem, self).__init__(context, request)\n-            self.context_state = getMultiAdapter(\n-                (context, request),\n-                name=\'plone_context_state\'\n-            )\n-\n         @property\n         def action(self):\n             # return the url to be loaded if clicked on the link.\n             # even if a submenu exists it will be active if javascript is disabled\n             return self.context.absolute_url()\n \n-        @memoize\n         def available(self):\n             # check if the menu is available and shown or not\n             return True\n@@ -93,7 +91,7 @@ im ``menu.py`` the class looks like so::\n \n \n     @implementer(IMyMenu)\n-    class ActionsMenu(BrowserMenu):\n+    class MyMenu(BrowserMenu):\n \n         def getMenuItems(self, context, request):\n             """Return menu item entries in a TAL-friendly form."""\n'

