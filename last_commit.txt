Repository: plone.restapi


Branch: refs/heads/main
Date: 2024-09-30T17:47:35+05:00
Author: Faakhir Zahid (Faakhir30) <110815427+Faakhir30@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/a6533499ef33a27a2e4840b76023a09af3903750

added upload and download aliases in csv format. (#1813)

* Added text/CSV content-type support to upload/download aliases in bulk.
* Added aliases unit/integration tests for aliases service.
* Added documentation

Files changed:
A news/1812.feature
A src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.req
A src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.resp
A src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.req
A src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.resp
A src/plone/restapi/tests/test_services_aliases.py
M docs/source/endpoints/aliases.md
M src/plone/restapi/services/aliases/add.py
M src/plone/restapi/services/aliases/configure.zcml
M src/plone/restapi/services/aliases/get.py
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/docs/source/endpoints/aliases.md b/docs/source/endpoints/aliases.md\nindex 46f68342e1..da841c2e0a 100644\n--- a/docs/source/endpoints/aliases.md\n+++ b/docs/source/endpoints/aliases.md\n@@ -70,9 +70,10 @@ Response:\n :language: http\n ```\n \n-## Adding URL aliases in bulk\n+## Adding URL aliases in bulk via JSON\n \n-You can add multiple URL aliases for multiple pages by sending a `POST` request to the `/@aliases` endpoint on site `root`. **datetime** parameter is optional:\n+You can add multiple URL aliases for multiple pages by sending a `POST` request to the `/@aliases` endpoint on site `root` using a JSON payload.\n+**datetime** parameter is optional:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n@@ -85,10 +86,26 @@ Response:\n :language: http\n ```\n \n+## Adding URL aliases in bulk via CSV\n \n-## Listing all available aliases\n+You can add multiple URL aliases for multiple pages by sending a `POST` request to the `/@aliases` endpoint on site `root` using a CSV file.\n+**datetime** parameter is optional:\n \n-To list all aliases, send a `GET` request to the `/@aliases` endpoint on site `root`:\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.resp\n+:language: http\n+```\n+\n+\n+## Listing all available aliases via JSON\n+\n+To list all aliases in JSON format, send a `GET` request to the `/@aliases` endpoint on site `root`:\n \n ```{eval-rst}\n ..  http:example:: curl httpie python-requests\n@@ -101,6 +118,21 @@ Response:\n :language: http\n ```\n \n+## Listing all available aliases via CSV\n+\n+To download all aliases as a CSV file, send a `GET` request to the `/@aliases` endpoint on site `root`:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.req\n+```\n+\n+Response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.resp\n+:language: http\n+```\n+\n ## Filter aliases\n \n To search for specific aliases, send a `GET` request to the `/@aliases` endpoint on site `root` with a `q` parameter:\ndiff --git a/news/1812.feature b/news/1812.feature\nnew file mode 100644\nindex 0000000000..85727b674b\n--- /dev/null\n+++ b/news/1812.feature\n@@ -0,0 +1 @@\n+Added create and fetch aliases in CSV format. @Faakhir30\ndiff --git a/src/plone/restapi/services/aliases/add.py b/src/plone/restapi/services/aliases/add.py\nindex 555fbdbe0f..ab8af1ed2a 100644\n--- a/src/plone/restapi/services/aliases/add.py\n+++ b/src/plone/restapi/services/aliases/add.py\n@@ -1,17 +1,24 @@\n from DateTime import DateTime\n+from DateTime.interfaces import DateTimeError\n from plone.app.redirector.interfaces import IRedirectionStorage\n from plone.restapi import _\n from plone.restapi.deserializer import json_body\n from plone.restapi.services import Service\n from Products.CMFPlone.controlpanel.browser.redirects import absolutize_path\n+from Products.CMFPlone.controlpanel.browser.redirects import RedirectsControlPanel\n+from Products.statusmessages.interfaces import IStatusMessage\n from zExceptions import BadRequest\n from zope.component import getMultiAdapter\n+from zope.component.hooks import getSite\n from zope.component import getUtility\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n \n import plone.protect.interfaces\n+import logging\n+\n+logger = logging.getLogger("Plone")\n \n \n @implementer(IPublishTraverse)\n@@ -83,15 +90,35 @@ def edit_for_navigation_root(self, alias):\n class AliasesRootPost(Service):\n     """Creates new aliases via controlpanel"""\n \n-    def reply(self):\n-        data = json_body(self.request)\n+    def _reply_csv(self):\n+        form = self.request.form\n+        if not form.get("file"):\n+            raise BadRequest("No file uploaded")\n+        controlpanel = RedirectsControlPanel(self.context, self.request)\n         storage = getUtility(IRedirectionStorage)\n-        aliases = data.get("items", [])\n+        status = IStatusMessage(self.request)\n+        portal = getSite()\n+        file = form["file"]\n+        controlpanel.upload(file, portal, storage, status)\n+        file.close()\n+\n+        if err := status.show():\n+            if err[0].type == "error":\n+                raise BadRequest(err[0].message)\n+            elif err[0].type == "info":\n+                logger.info(err[0].message)\n+        return self.reply_no_content()\n \n+    def reply(self):\n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n             alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+        if "multipart/form-data" in self.request.getHeader("Content-Type"):\n+            return self._reply_csv()\n \n+        storage = getUtility(IRedirectionStorage)\n+        data = json_body(self.request)\n+        aliases = data.get("items", [])\n         for alias in aliases:\n             redirection = alias.get("path")\n             target = alias.get("redirect-to")\n@@ -113,7 +140,11 @@ def reply(self):\n \n             date = alias.get("datetime", None)\n             if date:\n-                date = DateTime(date)\n+                try:\n+                    date = DateTime(date)\n+                except DateTimeError:\n+                    logger.warning("Failed to parse as DateTime: %s", date)\n+                    date = None\n \n             storage.add(abs_redirection, abs_target, now=date, manual=True)\n \ndiff --git a/src/plone/restapi/services/aliases/configure.zcml b/src/plone/restapi/services/aliases/configure.zcml\nindex e3291cf161..c6499d117a 100644\n--- a/src/plone/restapi/services/aliases/configure.zcml\n+++ b/src/plone/restapi/services/aliases/configure.zcml\n@@ -12,6 +12,15 @@\n       name="@aliases"\n       />\n \n+  <plone:service\n+      method="GET"\n+      accept="text/csv"\n+      factory=".get.AliasesGet"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="zope2.View"\n+      name="@aliases"\n+      />\n+\n   <plone:service\n       method="GET"\n       accept="application/json,application/schema+json"\ndiff --git a/src/plone/restapi/services/aliases/get.py b/src/plone/restapi/services/aliases/get.py\nindex c1fcf0b6ec..3ac3f81210 100644\n--- a/src/plone/restapi/services/aliases/get.py\n+++ b/src/plone/restapi/services/aliases/get.py\n@@ -9,6 +9,7 @@\n from zope.component.hooks import getSite\n from zope.interface import implementer\n from zope.interface import Interface\n+import json\n \n \n @implementer(IExpandableElement)\n@@ -26,7 +27,8 @@ def reply_item(self):\n         redirects = storage.redirects(context_path)\n         aliases = [deroot_path(alias) for alias in redirects]\n         self.request.response.setStatus(201)\n-        return [{"path": alias} for alias in aliases]\n+        self.request.response.setHeader("Content-Type", "application/json")\n+        return [{"path": alias} for alias in aliases], len(aliases)\n \n     def reply_root(self):\n         """\n@@ -48,24 +50,54 @@ def reply_root(self):\n \n         newbatch = RedirectsControlPanel(self.context, self.request).redirects()\n         items_total = len([item for item in newbatch])\n+        self.request.response.setHeader("Content-Type", "application/json")\n+\n         return redirects, items_total\n \n+    def reply_root_csv(self):\n+        batch = RedirectsControlPanel(self.context, self.request).redirects()\n+        redirects = [entry for entry in batch]\n+\n+        for redirect in redirects:\n+            del redirect["redirect"]\n+            redirect["datetime"] = datetimelike_to_iso(redirect["datetime"])\n+        self.request.response.setStatus(201)\n+\n+        self.request.form["b_start"] = "0"\n+        self.request.form["b_size"] = "1000000"\n+        self.request.__annotations__.pop("plone.memoize")\n+\n+        filestream = RedirectsControlPanel(self.context, self.request).download()\n+        content = filestream.read()\n+        filestream.close()\n+\n+        self.request.response.setHeader("Content-Type", "text/csv")\n+        self.request.response.setHeader(\n+            "Content-Disposition", "attachment; filename=redirects.csv"\n+        )\n+        self.request.response.setHeader("Content-Length", str(len(content)))\n+        return content\n+\n     def __call__(self, expand=False):\n         result = {"aliases": {"@id": f"{self.context.absolute_url()}/@aliases"}}\n         if not expand:\n             return result\n-\n         if IPloneSiteRoot.providedBy(self.context):\n-            items, items_total = self.reply_root()\n-            result["aliases"]["items"] = items\n-            result["aliases"]["items_total"] = items_total\n+            if self.request.getHeader("Accept") == "text/csv":\n+                result["aliases"]["items"] = self.reply_root_csv()\n+                return result\n+            else:\n+                items, items_total = self.reply_root()\n         else:\n-            result["aliases"]["items"] = self.reply_item()\n-            result["aliases"]["items_total"] = len(result["aliases"]["items"])\n-\n+            items, items_total = self.reply_item()\n+        result["aliases"]["items"] = items\n+        result["aliases"]["items_total"] = items_total\n         return result\n \n \n+_no_content_marker = object()\n+\n+\n class AliasesGet(Service):\n     """Get aliases"""\n \n@@ -73,6 +105,16 @@ def reply(self):\n         aliases = Aliases(self.context, self.request)\n         return aliases(expand=True)["aliases"]\n \n+    def render(self):\n+        self.check_permission()\n+        content = self.reply()\n+        if self.request.getHeader("Accept") == "text/csv":\n+            return content["items"]\n+        if content is not _no_content_marker:\n+            return json.dumps(\n+                content, indent=2, sort_keys=True, separators=(", ", ": ")\n+            )\n+\n \n def deroot_path(path):\n     """Remove the portal root from alias"""\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.req b/src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.req\nnew file mode 100644\nindex 0000000000..fc049dcc0f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.req\n@@ -0,0 +1,13 @@\n+POST /plone/@aliases HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\n+\n+------WebKitFormBoundary7MA4YWxkTrZu0gW\r\n+Content-Disposition: form-data; name="file"; filename="test_file.csv"\r\n+Content-Type: text/csv\r\n+\r\n+old path,new path,datetime,manual\n+/old-page,/front-page,2022/01/01 00:00:00 GMT+0,True\n+\r\n+------WebKitFormBoundary7MA4YWxkTrZu0gW--\r\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.resp b/src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.resp\nnew file mode 100644\nindex 0000000000..0074ded3bc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_add_csv_format.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.req b/src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.req\nnew file mode 100644\nindex 0000000000..be32ef6582\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.req\n@@ -0,0 +1,3 @@\n+GET /plone/@aliases HTTP/1.1\n+Accept: text/csv\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.resp b/src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.resp\nnew file mode 100644\nindex 0000000000..04246f1761\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/aliases_root_get_csv_format.resp\n@@ -0,0 +1,6 @@\n+HTTP/1.1 201 Created\n+Content-Type: text/csv; charset=utf-8\n+\n+old path,new path,datetime,manual\r\n+/fizzbuzz,/front-page,2022/05/05 00:00:00 GMT+0,True\r\n+/old-page,/front-page,2022/05/05 00:00:00 GMT+0,True\r\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex c25b896ef8..774bbd94b5 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1,6 +1,7 @@\n from base64 import b64encode\n from datetime import datetime\n from datetime import timezone\n+import io\n from pkg_resources import resource_filename\n from plone import api\n from plone.app.discussion.interfaces import ICommentAddedEvent\n@@ -2097,6 +2098,58 @@ def test_aliases_root_get(self):\n         response = self.api_session.get(url + query)\n         save_request_and_response_for_docs("aliases_root_get", response)\n \n+    def test_aliases_root_get_csv_format(self):\n+        url = f"{self.portal.absolute_url()}/@aliases"\n+        query = ""\n+\n+        payload = {\n+            "items": [\n+                {\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+                {\n+                    "path": "/fizzbuzz",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022-05-05",\n+                },\n+            ]\n+        }\n+        response = self.api_session.post(url, json=payload)\n+        self.api_session.headers.update({"Content-Type": "application/json"})\n+        self.api_session.headers.update({"Accept": "text/csv"})\n+        response = self.api_session.get(url + query)\n+        save_request_and_response_for_docs("aliases_root_get_csv_format", response)\n+\n+    def test_aliases_root_add_csv_format(self):\n+        url = f"{self.portal.absolute_url()}/@aliases"\n+\n+        content = b"old path,new path,datetime,manual\\n/old-page,/front-page,2022/01/01 00:00:00 GMT+0,True\\n"\n+        csv_file = io.BytesIO(content)\n+        csv_file.name = "test_file.csv"\n+\n+        # Setting a fixed boundary intentionally to make the producing .req and .resp files deterministic\n+        boundary = "----WebKitFormBoundary7MA4YWxkTrZu0gW"\n+\n+        # Manually construct the multipart body\n+        body = (\n+            f"--{boundary}\\r\\n"\n+            f\'Content-Disposition: form-data; name="file"; filename="{csv_file.name}"\\r\\n\'\n+            "Content-Type: text/csv\\r\\n\\r\\n"\n+            f"{content.decode()}\\r\\n"\n+            f"--{boundary}--\\r\\n"\n+        )\n+\n+        headers = {\n+            "Accept": "application/json",\n+            "Authorization": "Basic YWRtaW46c2VjcmV0",\n+            "Content-Type": f"multipart/form-data; boundary={boundary}",\n+        }\n+\n+        response = self.api_session.post(url, headers=headers, data=body)\n+        save_request_and_response_for_docs("aliases_root_add_csv_format", response)\n+\n     def test_aliases_root_filter(self):\n         # Get aliases\n         url = f"{self.portal.absolute_url()}/@aliases"\ndiff --git a/src/plone/restapi/tests/test_services_aliases.py b/src/plone/restapi/tests/test_services_aliases.py\nnew file mode 100644\nindex 0000000000..27e4ca693e\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_services_aliases.py\n@@ -0,0 +1,162 @@\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import setRoles\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+\n+import transaction\n+import unittest\n+\n+\n+class TestAliases(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url, test=self)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal.invokeFactory("Document", id="front-page")\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_alias_non_root(self):\n+        data = {\n+            "items": [\n+                {\n+                    "path": "/alias-with-date",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2024-09-17T12:00:00",\n+                }\n+            ]\n+        }\n+        response = self.api_session.post("/front-page/@aliases", json=data)\n+        self.assertEqual(response.status_code, 204)\n+\n+        # Verify alias exists\n+        response = self.api_session.get("/front-page/@aliases")\n+        self.assertEqual(response.status_code, 201)\n+        self.assertEqual(len(response.json()["items"]), 1)\n+\n+    def test_alias_add_invalid_datetime(self):\n+        """Test POST /@aliases with an invalid datetime, makes invalid date=None"""\n+        data = {\n+            "items": [\n+                {\n+                    "path": "/alias-with-valid-date",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2024-09-17T12:00:00",\n+                },\n+                {\n+                    "path": "/alias-with-invalid-date",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "invalid-date",\n+                },\n+            ]\n+        }\n+        response = self.api_session.post("/@aliases", json=data)\n+        self.assertEqual(response.status_code, 204)\n+        response = self.api_session.get("/@aliases")\n+        self.assertEqual(response.status_code, 201)\n+        self.assertEqual(len(response.json()["items"]), 2)\n+\n+    def test_alias_add_invalid_path(self):\n+        """Test POST /@aliases with an invalid path"""\n+\n+        data = {"items": [{"path": "/valid-path", "redirect-to": "invalid-redirect"}]}\n+        response = self.api_session.post("/@aliases", json=data)\n+        self.assertEqual(response.status_code, 400)\n+        response = self.api_session.get("/@aliases")\n+        self.assertEqual(response.status_code, 201)\n+        self.assertEqual(len(response.json()["items"]), 0)\n+\n+    def test_duplicate_alias(self):\n+        data = {\n+            "items": [\n+                {"path": "/duplicate-alias", "redirect-to": "/front-page"},\n+                {"path": "/duplicate-alias", "redirect-to": "/front-page"},\n+            ]\n+        }\n+        self.api_session.post("/@aliases", json=data)\n+        response = self.api_session.post("/@aliases", json=data)\n+        self.assertEqual(response.status_code, 400)\n+\n+    def test_alias_without_redirect(self):\n+        data = {"items": [{"path": "/alias-without-redirect"}]}\n+        response = self.api_session.post("/@aliases", json=data)\n+        self.assertEqual(response.status_code, 400)\n+\n+    def test_alias_csv_upload(self):\n+        """Test POST /@aliases for CSV upload"""\n+\n+        content = b"old path,new path,datetime,manual\\n/old-page,/front-page,2022/01/01 00:00:00 GMT+0,True\\n"\n+\n+        response = self.api_session.post(\n+            "/@aliases",\n+            files={"file": ("aliases.csv", content, "text/csv")},\n+        )\n+\n+        self.assertEqual(response.status_code, 204)\n+        self.assertEqual(response.content, b"")\n+        response = self.api_session.get("/@aliases")\n+        self.assertEqual(response.status_code, 201)\n+        self.assertEqual(\n+            response.json().get("items"),\n+            [\n+                {\n+                    "datetime": "2022-01-01T00:00:00+00:00",\n+                    "manual": True,\n+                    "path": "/old-page",\n+                    "redirect-to": "/front-page",\n+                }\n+            ],\n+        )\n+\n+    def test_alias_csv_download(self):\n+        """Test GET /@aliases with CSV output"""\n+\n+        data = {\n+            "items": [\n+                {\n+                    "path": "/alias-page",\n+                    "redirect-to": "/front-page",\n+                    "datetime": "2022/01/01 00:00:00 GMT+0",\n+                },\n+            ]\n+        }\n+        self.api_session.post("/@aliases", json=data)\n+        headers = {"Accept": "text/csv"}\n+        response = self.api_session.get("/@aliases", headers=headers)\n+        self.assertEqual(response.status_code, 201)\n+        self.assertIn("Content-Disposition", response.headers)\n+        self.assertEqual(response.headers["Content-Type"], "text/csv; charset=utf-8")\n+        content = b"old path,new path,datetime,manual\\r\\n/alias-page,/front-page,2022/01/01 00:00:00 GMT+0,True\\r\\n"\n+        self.assertEqual(content, response.content)\n+\n+    def test_alias_delete(self):\n+        data = {"items": [{"path": "/alias-to-delete", "redirect-to": "/front-page"}]}\n+        self.api_session.post("/@aliases", json=data)\n+        response = self.api_session.delete(\n+            "/@aliases",\n+            json={\n+                "items": [\n+                    {\n+                        "path": "/alias-to-delete",\n+                    }\n+                ]\n+            },\n+        )\n+        self.assertEqual(response.status_code, 204)\n+\n+        response = self.api_session.get("/@aliases")\n+        self.assertEqual(response.status_code, 201)\n+        self.assertEqual(len(response.json()["items"]), 0)\n'

