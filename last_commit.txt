Repository: plone.releaser


Branch: refs/heads/master
Date: 2023-06-16T17:40:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/5830f43e552c076573b569385772bc6306ec9767

Allow disabling PyPI rights check, as this does not know how to check organisations.

Set env variable ``PLONE_RELEASER_CHECK_PYPI_ACCESS=0`` if you want to disable it.
Also, we do not check PyPI if the user is `__token__`, so using an API token.

Unrelated: add 6.1 to core branches to update.

Files changed:
A news/50.bugfix
M plone/releaser/pypi.py
M plone/releaser/release.py

b'diff --git a/news/50.bugfix b/news/50.bugfix\nnew file mode 100644\nindex 0000000..ba7b816\n--- /dev/null\n+++ b/news/50.bugfix\n@@ -0,0 +1,4 @@\n+Allow disabling PyPI rights check, as this does not know how to check organisations.\n+Set env variable ``PLONE_RELEASER_CHECK_PYPI_ACCESS=0`` if you want to disable it.\n+Also, we do not check PyPI if the user is `__token__`, so using an API token.\n+[maurits]\ndiff --git a/plone/releaser/pypi.py b/plone/releaser/pypi.py\nindex b3dd29e..3515ef5 100644\n--- a/plone/releaser/pypi.py\n+++ b/plone/releaser/pypi.py\n@@ -2,10 +2,15 @@\n \n \n def get_users_with_release_rights(package_name):\n+    # Note: this is deprecated, but I don\'t see an alternative:\n+    # https://warehouse.pypa.io/api-reference/xml-rpc.html\n     client = ServerProxy("https://pypi.org/pypi")\n     existing_admins = {user for role, user in client.package_roles(package_name)}\n     return existing_admins\n \n \n def can_user_release_package_to_pypi(user, package_name):\n+    # Note: most packages that we release, will have/get the \'plone\' organisation\n+    # as owner, and the code here does not know this, and does not know if you\n+    # are a member of this PyPI organisation.\n     return user in get_users_with_release_rights(package_name)\ndiff --git a/plone/releaser/release.py b/plone/releaser/release.py\nindex c15cd1a..1d17cbd 100644\n--- a/plone/releaser/release.py\n+++ b/plone/releaser/release.py\n@@ -171,7 +171,23 @@ def cleanup_changelog(data):\n \n \n def check_pypi_access(data):\n-    pypi_user = pypi.PypiConfig().config.get("pypi", "username")\n+    env_var = "PLONE_RELEASER_CHECK_PYPI_ACCESS"\n+    try:\n+        if int(os.getenv(env_var, 1)) == 0:\n+            print(\n+                f"{env_var} variable set to zero: not checking pypi release rights."\n+            )\n+            return\n+    except (TypeError, ValueError, AttributeError):\n+        print(\n+            f"ERROR: could not parse {env_var} env var. Ignoring it."\n+        )\n+\n+    section = os.getenv("TWINE_REPOSITORY", "pypi")\n+    pypi_user = pypi.PypiConfig().config.get(section, "username")\n+    if pypi_user == "__token__":\n+        print("Using token for PyPI upload: cannot check if you have release rights.")\n+        return\n     if not can_user_release_package_to_pypi(pypi_user, data["name"]):\n         msg = "User {0} does not have pypi release rights to {1}. Continue?"\n         if not ask(msg.format(pypi_user, data["name"]), default=False):\n@@ -225,7 +241,7 @@ def update_core(data, branch=None):\n \n \n def update_other_core_branches(data):\n-    CORE_BRANCHES = ["5.2", "6.0"]\n+    CORE_BRANCHES = ["5.2", "6.0", "6.1"]\n     package_name = data["name"]\n     root_path = os.path.join(os.getcwd(), "../../")\n \n'

Repository: plone.releaser


Branch: refs/heads/master
Date: 2023-06-16T19:11:24+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/911a4a36a656f0fe37fbec1d89165b3b1408803f

Merge pull request #51 from plone/maurits-fix-pypi-rights-check

Allow disabling PyPI rights check

Files changed:
A news/50.bugfix
M plone/releaser/pypi.py
M plone/releaser/release.py

b'diff --git a/news/50.bugfix b/news/50.bugfix\nnew file mode 100644\nindex 0000000..ba7b816\n--- /dev/null\n+++ b/news/50.bugfix\n@@ -0,0 +1,4 @@\n+Allow disabling PyPI rights check, as this does not know how to check organisations.\n+Set env variable ``PLONE_RELEASER_CHECK_PYPI_ACCESS=0`` if you want to disable it.\n+Also, we do not check PyPI if the user is `__token__`, so using an API token.\n+[maurits]\ndiff --git a/plone/releaser/pypi.py b/plone/releaser/pypi.py\nindex b3dd29e..3515ef5 100644\n--- a/plone/releaser/pypi.py\n+++ b/plone/releaser/pypi.py\n@@ -2,10 +2,15 @@\n \n \n def get_users_with_release_rights(package_name):\n+    # Note: this is deprecated, but I don\'t see an alternative:\n+    # https://warehouse.pypa.io/api-reference/xml-rpc.html\n     client = ServerProxy("https://pypi.org/pypi")\n     existing_admins = {user for role, user in client.package_roles(package_name)}\n     return existing_admins\n \n \n def can_user_release_package_to_pypi(user, package_name):\n+    # Note: most packages that we release, will have/get the \'plone\' organisation\n+    # as owner, and the code here does not know this, and does not know if you\n+    # are a member of this PyPI organisation.\n     return user in get_users_with_release_rights(package_name)\ndiff --git a/plone/releaser/release.py b/plone/releaser/release.py\nindex c15cd1a..1d17cbd 100644\n--- a/plone/releaser/release.py\n+++ b/plone/releaser/release.py\n@@ -171,7 +171,23 @@ def cleanup_changelog(data):\n \n \n def check_pypi_access(data):\n-    pypi_user = pypi.PypiConfig().config.get("pypi", "username")\n+    env_var = "PLONE_RELEASER_CHECK_PYPI_ACCESS"\n+    try:\n+        if int(os.getenv(env_var, 1)) == 0:\n+            print(\n+                f"{env_var} variable set to zero: not checking pypi release rights."\n+            )\n+            return\n+    except (TypeError, ValueError, AttributeError):\n+        print(\n+            f"ERROR: could not parse {env_var} env var. Ignoring it."\n+        )\n+\n+    section = os.getenv("TWINE_REPOSITORY", "pypi")\n+    pypi_user = pypi.PypiConfig().config.get(section, "username")\n+    if pypi_user == "__token__":\n+        print("Using token for PyPI upload: cannot check if you have release rights.")\n+        return\n     if not can_user_release_package_to_pypi(pypi_user, data["name"]):\n         msg = "User {0} does not have pypi release rights to {1}. Continue?"\n         if not ask(msg.format(pypi_user, data["name"]), default=False):\n@@ -225,7 +241,7 @@ def update_core(data, branch=None):\n \n \n def update_other_core_branches(data):\n-    CORE_BRANCHES = ["5.2", "6.0"]\n+    CORE_BRANCHES = ["5.2", "6.0", "6.1"]\n     package_name = data["name"]\n     root_path = os.path.join(os.getcwd(), "../../")\n \n'

