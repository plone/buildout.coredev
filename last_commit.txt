Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-13T16:51:24+02:00
Author: Tiberiu Ichim (tiberiuichim) <tiberiuichim@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/08dce7fe43322ea64a4719c46fdd9cb5b33caad7

Added IBlockSearchableText to enable extraction of text from any block type (#917)

* Added IBlockSearchableText to enable extraction of text from any block type

* Added changelog news file

* Added one more test

* Added some documentation on indexing

* Improve blocks.rst doc

* Fix files with black

Co-authored-by: Timo Stollenwerk &lt;stollenwerk@kitconcept.com&gt;

Files changed:
A news/917.feature
M docs/source/blocks.rst
M src/plone/restapi/indexers.py
M src/plone/restapi/indexers.zcml
M src/plone/restapi/interfaces.py
M src/plone/restapi/tests/test_blocks_searchable_text.py

b'diff --git a/docs/source/blocks.rst b/docs/source/blocks.rst\nindex 3b3d37e8b..6c6b92130 100644\n--- a/docs/source/blocks.rst\n+++ b/docs/source/blocks.rst\n@@ -145,3 +145,27 @@ Then register as a subscription adapter::\n \n   <subscriber factory=".blocks.DatabaseQueryDeserializeTransformer"\n     provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+\n+SearchableText indexing for blocks\n+----------------------------------\n+\n+As the main consumer of plone.restapi\'s blocks, this functionality is specific to Volto blocks. By default searchable text (for Plone\'s SearchableText index) is extracted from `text` blocks.\n+\n+To extract searchable text for other types of blocks, you need to write an adapter that can process that type of block.::\n+\n+  @implementer(IBlockSearchableText)\n+  @adapter(IBlocks, IBrowserRequest)\n+  class ImageSearchableText(object):\n+      def __init__(self, context, request):\n+          self.context = context\n+          self.request = request\n+\n+      def __call__(self, block_value):\n+          return block_value[\'alt_text\']\n+\n+See ``plone.restapi.interfaces.IBlockSearchableText`` for details. The ``__call__`` methods needs to return a string, for the text to be indexed.\n+\n+This adapter needs to be registered as a named adapter, where the name is the same as the block type (its `@type` property from the block value).::\n+\n+    <adapter name="image" factory=".indexers.ImageBlockSearchableText" />\n+\ndiff --git a/news/917.feature b/news/917.feature\nnew file mode 100644\nindex 000000000..e77b6548c\n--- /dev/null\n+++ b/news/917.feature\n@@ -0,0 +1,3 @@\n+In block text indexing, query for IBlockSearchableText named adapters to allow\n+extraction from any block type. This avoids hardcoding for the \'text\' block type.\n+[tiberiuichim]\ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex b381085d6..6f86c9a96 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -5,9 +5,17 @@\n # We will make sure plone.restapi latest always works with the latest Volto release.\n # This code is planned to being refactored into CMFPlone 6.0 as soon as Volto 4 final is out.\n # <tisto@plone.org>\n-from plone.restapi.behaviors import IBlocks\n-from plone.indexer.decorator import indexer\n+\n from plone.app.contenttypes.indexers import SearchableText\n+from plone.indexer.decorator import indexer\n+from plone.restapi.behaviors import IBlocks\n+from plone.restapi.interfaces import IBlockSearchableText\n+from zope.component import adapter\n+from zope.component import queryMultiAdapter\n+from zope.globalrequest import getRequest\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserRequest\n+\n import six\n \n \n@@ -25,15 +33,38 @@ def _extract_text(block):\n     return result\n \n \n+@implementer(IBlockSearchableText)\n+@adapter(IBlocks, IBrowserRequest)\n+class TextBlockSearchableText(object):\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, value):\n+        return _extract_text(value)\n+\n+\n @indexer(IBlocks)\n def SearchableText_blocks(obj):\n-    std_text = SearchableText(obj)\n+    request = getRequest()\n+\n     blocks = obj.blocks\n-    blocks_text = [\n-        _extract_text(blocks[block_uid])\n-        for block_uid in obj.blocks\n-        if blocks[block_uid].get("@type", "") == "text"\n-    ]\n+    blocks_text = []\n+\n+    for block in blocks.values():\n+\n+        block_type = block.get("@type", "")\n+        adapter = queryMultiAdapter(\n+            (obj, request), IBlockSearchableText, name=block_type\n+        )\n+\n+        if adapter is not None:\n+            text = adapter(block)\n+\n+            if text:\n+                blocks_text.append(text)\n+\n+    std_text = SearchableText(obj)\n     blocks_text.append(std_text)\n-    text = " ".join(blocks_text)\n-    return text\n+\n+    return " ".join(blocks_text)\ndiff --git a/src/plone/restapi/indexers.zcml b/src/plone/restapi/indexers.zcml\nindex d3a598f56..4a3c2cd22 100644\n--- a/src/plone/restapi/indexers.zcml\n+++ b/src/plone/restapi/indexers.zcml\n@@ -5,6 +5,7 @@\n \n   <configure zcml:condition="installed plone.app.contenttypes">\n     <adapter name="SearchableText" factory=".indexers.SearchableText_blocks" />\n+    <adapter name="text" factory=".indexers.TextBlockSearchableText" />\n   </configure>\n \n </configure>\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex 80be124b4..879b9447d 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -204,3 +204,18 @@ def parse(idx_query):\n         have been reconstructed to the proper data types that the adapted\n         index expects.\n         """\n+\n+\n+class IBlockSearchableText(Interface):\n+    """ Allow blocks to provide text for the SearchableText index\n+\n+    Register as a named adapter, where the name is the block @type\n+    """\n+\n+    def __init__(field, context, request):\n+        """Adapts a context and the request.\n+        """\n+\n+    def __call__(value):\n+        """Extract text from the block value. Returns text\n+        """\ndiff --git a/src/plone/restapi/tests/test_blocks_searchable_text.py b/src/plone/restapi/tests/test_blocks_searchable_text.py\nindex cfc1c9d11..2ffef4034 100644\n--- a/src/plone/restapi/tests/test_blocks_searchable_text.py\n+++ b/src/plone/restapi/tests/test_blocks_searchable_text.py\n@@ -4,10 +4,17 @@\n from plone.app.testing import SITE_OWNER_PASSWORD\n from plone.app.testing import TEST_USER_ID\n from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.interfaces import IDexterityItem\n from plone.dexterity.utils import createContentInContainer\n+from plone.restapi.behaviors import IBlocks\n+from plone.restapi.interfaces import IBlockSearchableText\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from plone.restapi.testing import RelativeSession\n+from zope.component import adapter\n+from zope.component import provideAdapter\n from zope.component import queryUtility\n+from zope.interface import implementer\n+from zope.publisher.interfaces.browser import IBrowserRequest\n \n import transaction\n import unittest\n@@ -96,3 +103,52 @@ def test_search_text(self):\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\n         self.assertEqual(json_response["items"][0]["Title"], "A document")\n+\n+    def test_register_block_searchabletext(self):\n+        @implementer(IBlockSearchableText)\n+        @adapter(IBlocks, IBrowserRequest)\n+        class TestSearchableTextAdapter(object):\n+            def __init__(self, context, request):\n+                self.context = context\n+                self.request = request\n+\n+            def __call__(self, value):\n+\n+                return "discovered: %s" % value["text"]\n+\n+        provideAdapter(\n+            TestSearchableTextAdapter,\n+            (IDexterityItem, IBrowserRequest),\n+            name="test_block",\n+        )\n+\n+        blocks = {\n+            "uuid1": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [],\n+                            "inlineStyleRanges": [],\n+                            "key": "acv4f",\n+                            "text": "Plone " "text " "for " "block ",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {},\n+                },\n+            },\n+            "uuid3": {"@type": "test_block", "text": "sample text"},\n+        }\n+\n+        self.doc.blocks = blocks\n+        from zope.component import queryMultiAdapter\n+        from plone.indexer.interfaces import IIndexableObject\n+\n+        wrapper = queryMultiAdapter(\n+            (self.doc, self.portal.portal_catalog,), IIndexableObject\n+        )\n+\n+        assert "discovered: sample text" in wrapper.SearchableText\n'

