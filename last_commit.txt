Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/5920b753e689f7bf190fbbc855973021bc3708a3

Configuring with plone/meta

Files changed:
A .editorconfig
A .flake8
A .github/workflows/meta.yml
A .meta.toml
A .pre-commit-config.yaml
A news/cc314a2b.internal
A tox.ini
M .gitignore
M pyproject.toml
D setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..919b411\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[*.{json,jsonl,js,jsx,ts,tsx,css,less,scss,html}]  # Frontend development\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [editorconfig]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 0000000..1944a84\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,24 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+per-file-ignores =\n+    Products/statusmessages/tests/test_adapter.py:F821\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [flake8]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.github/workflows/meta.yml b/.github/workflows/meta.yml\nnew file mode 100644\nindex 0000000..a7f25e0\n--- /dev/null\n+++ b/.github/workflows/meta.yml\n@@ -0,0 +1,28 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+name: Meta\n+on:\n+  push:\n+    branches:\n+      - master\n+      - main\n+  pull_request:\n+    branches:\n+      - master\n+      - main\n+  workflow_dispatch:\n+\n+jobs:\n+  qa:\n+    uses: plone/meta/.github/workflows/qa.yml@main\n+  test:\n+    uses: plone/meta/.github/workflows/test.yml@main\n+  coverage:\n+    uses: plone/meta/.github/workflows/coverage.yml@main\n+  dependencies:\n+    uses: plone/meta/.github/workflows/dependencies.yml@main\n+  release-ready:\n+    uses: plone/meta/.github/workflows/release_ready.yml@main\n+  circular:\n+    uses: plone/meta/.github/workflows/circular.yml@main\ndiff --git a/.gitignore b/.gitignore\nindex 35500ac..81594fd 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,9 +1,51 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+# python related\n *.egg-info\n-*.py[co]\n+*.pyc\n+*.pyo\n+\n+# tools related\n+build/\n+.coverage\n+coverage.xml\n+dist/\n+docs/_build\n+__pycache__/\n+.tox\n+.vscode/\n+node_modules/\n+\n+# venv / buildout related\n+bin/\n+develop-eggs/\n+eggs/\n+.eggs/\n+etc/\n .installed.cfg\n-/bin\n-/parts\n-/develop-eggs\n-/include\n-/lib*\n-pip-selfcheck.json\n+include/\n+lib/\n+lib64\n+.mr.developer.cfg\n+parts/\n+pyvenv.cfg\n+var/\n+\n+# mxdev\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\n+.installed.txt\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [gitignore]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..7b21a5f\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,12 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[meta]\n+template = "default"\n+commit-id = "cfffba8c"\n+\n+[flake8]\n+extra_lines = """\n+per-file-ignores =\n+    Products/statusmessages/tests/test_adapter.py:F821\n+"""\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..7de9fd7\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,84 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.4.0\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.1.0a2\n+    hooks:\n+    -   id: zpretty\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  zpretty_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  flake8_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  codespell_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\n+-   repo: https://github.com/mgedmin/check-python-versions\n+    rev: "0.21.2"\n+    hooks:\n+    -   id: check-python-versions\n+        args: [\'--only\', \'setup.py,pyproject.toml\']\n+-   repo: https://github.com/collective/i18ndude\n+    rev: "6.0.0"\n+    hooks:\n+    -   id: i18ndude\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/news/cc314a2b.internal b/news/cc314a2b.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/cc314a2b.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..e442bd0 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,6 +1,9 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [tool.towncrier]\n-filename = "CHANGES.rst"\n directory = "news/"\n+filename = "CHANGES.rst"\n title_format = "{version} ({project_date})"\n underlines = ["-", ""]\n \n@@ -18,3 +21,137 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  towncrier_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.isort]\n+profile = "plone"\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  isort_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  black_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.codespell]\n+ignore-words-list = "discreet,"\n+skip = "*.po,"\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  codespell_ignores = "foo,bar"\n+#  codespell_skip = "*.po,*.map,package-lock.json"\n+##\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  dependencies_ignores = "[\'zestreleaser.towncrier\']"\n+#  dependencies_mappings = [\n+#    "gitpython = [\'git\']",\n+#    "pygithub = [\'github\']",\n+#  ]\n+#  """\n+##\n+\n+[tool.check-manifest]\n+ignore = [\n+    ".editorconfig",\n+    ".meta.toml",\n+    ".pre-commit-config.yaml",\n+    "tox.ini",\n+    ".flake8",\n+    "mx.ini",\n+\n+]\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  check_manifest_ignores = """\n+#      "*.map.js",\n+#      "*.pyc",\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/setup.cfg b/setup.cfg\ndeleted file mode 100644\nindex f3d8371..0000000\n--- a/setup.cfg\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[check-manifest]\n-ignore =\n-    buildout.cfg\n-\n-[bdist_wheel]\n-universal = 1\n-\n-[zest.releaser]\n-create-wheel = yes\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..1247dcb\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,189 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    lint\n+    test\n+    dependencies\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  envlist_lines = """\n+#      my_other_environment\n+#  """\n+#  config_lines = """\n+#  my_extra_top_level_tox_configuration_lines\n+#  """\n+##\n+\n+[testenv]\n+skip_install = true\n+allowlist_externals =\n+    echo\n+    false\n+# Make sure typos like `tox -e formaat` are caught instead of silently doing nothing.\n+# See https://github.com/tox-dev/tox/issues/2858.\n+commands =\n+    echo "Unrecognized environment name {envname}"\n+    false\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the dependencies of the package\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the distribution tests\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+##\n+# Specify a custom constraints file in .meta.toml:\n+#  [tox]\n+#  constraints_file = "https://my-server.com/constraints.txt"\n+##\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s Products.statusmessages {posargs}\n+extras =\n+    test\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  test_extras = """\n+#      tests\n+#      widgets\n+#  """\n+##\n+\n+[testenv:coverage]\n+description = get a test coverage report\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run --branch --source Products.statusmessages {envbindir}/zope-testrunner --quiet --all --test-path={toxinidir} -s Products.statusmessages {posargs}\n+    coverage report -m --format markdown\n+    coverage xml\n+extras =\n+    test\n+\n+\n+[testenv:release-check]\n+description = ensure that the distribution is ready to release\n+skip_install = true\n+deps =\n+    twine\n+    build\n+    towncrier\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # fake version to not have to install the package\n+    # we build the change log as news entries might break\n+    # the README that is displayed on PyPI\n+    towncrier build --version=100.0.0 --yes\n+    python -m build --sdist --no-isolation\n+    twine check dist/*\n+\n+[testenv:circular]\n+description = ensure there are no cyclic dependencies\n+use_develop = true\n+skip_install = false\n+set_env =\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree\n+    pipforester\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # Generate the full dependency tree\n+    sh -c \'pipdeptree -j > forest.json\'\n+    # Generate a DOT graph with the circular dependencies, if any\n+    pipforester -i forest.json -o forest.dot --cycles\n+    # Report if there are any circular dependencies, i.e. error if there are any\n+    pipforester -i forest.json --check-cycles -o /dev/null\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/7a5f0e47556f14608def18af47b8c9e7c4b918d3

cleanup: remove old files

Files changed:
D buildout.cfg
D requirements.txt

b'diff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex e93924d..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[buildout]\n-parts = test\n-extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions.cfg\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs = Products.statusmessages [test]\n-\ndiff --git a/requirements.txt b/requirements.txt\ndeleted file mode 100644\nindex 244887f..0000000\n--- a/requirements.txt\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-setuptools==33.1.1\n-zc.buildout==2.8.0\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/17540d2948b3082afbf800aa21e4cc0e99389a15

chore: pyupgrade

Files changed:
M Products/__init__.py
M Products/statusmessages/__init__.py
M Products/statusmessages/adapter.py
M Products/statusmessages/interfaces.py
M Products/statusmessages/message.py
M Products/statusmessages/tests/test_adapter.py
M Products/statusmessages/tests/test_doctests.py
M Products/statusmessages/tests/test_encoding.py
M setup.py

b'diff --git a/Products/__init__.py b/Products/__init__.py\nindex 68c04af..de40ea7 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n __import__(\'pkg_resources\').declare_namespace(__name__)\ndiff --git a/Products/statusmessages/__init__.py b/Products/statusmessages/__init__.py\nindex 0d98752..b303b49 100644\n--- a/Products/statusmessages/__init__.py\n+++ b/Products/statusmessages/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n STATUSMESSAGEKEY = \'statusmessages\'\ndiff --git a/Products/statusmessages/adapter.py b/Products/statusmessages/adapter.py\nindex 6d490ad..41e22fe 100644\n--- a/Products/statusmessages/adapter.py\n+++ b/Products/statusmessages/adapter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.statusmessages import STATUSMESSAGEKEY\n from Products.statusmessages.interfaces import IStatusMessage\n from Products.statusmessages.message import decode\n@@ -15,7 +14,7 @@\n \n \n @implementer(IStatusMessage)\n-class StatusMessage(object):\n+class StatusMessage:\n     """Adapter for the BrowserRequest to handle status messages.\n \n     Let\'s make sure that this implementation actually fulfills the\n@@ -29,7 +28,7 @@ class StatusMessage(object):\n     def __init__(self, context):\n         self.context = context  # the context must be the request\n \n-    def add(self, text, type=u\'info\'):\n+    def add(self, text, type=\'info\'):\n         """Add a status message.\n         """\n         context = self.context\ndiff --git a/Products/statusmessages/interfaces.py b/Products/statusmessages/interfaces.py\nindex fa19f88..f69d5b7 100644\n--- a/Products/statusmessages/interfaces.py\n+++ b/Products/statusmessages/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n \n@@ -14,10 +13,10 @@ class IMessage(Interface):\n class IStatusMessage(Interface):\n     """An adapter for the BrowserRequest to handle status messages."""\n \n-    def addStatusMessage(text, type=u\'info\'):\n+    def addStatusMessage(text, type=\'info\'):\n         """Add a status message."""\n \n-    def add(text, type=u\'info\'):\n+    def add(text, type=\'info\'):\n         """Add a status message."""\n \n     def showStatusMessages():\ndiff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 3c8b592..45501c7 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -1,5 +1,3 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import unicode_literals\n from Products.statusmessages.interfaces import IMessage\n from zope.interface import implementer\n \n@@ -8,19 +6,19 @@\n \n \n def _utf8(value):\n-    if isinstance(value, six.text_type):\n+    if isinstance(value, str):\n         return value.encode(\'utf-8\')\n-    elif isinstance(value, six.binary_type):\n+    elif isinstance(value, bytes):\n         return value\n     return b\'\'\n \n \n def _unicode(value):\n-    return six.text_type(value, \'utf-8\', \'ignore\')\n+    return str(value, \'utf-8\', \'ignore\')\n \n \n @implementer(IMessage)\n-class Message(object):\n+class Message:\n     """A single status message.\n \n     Let\'s make sure that this implementation actually fulfills the\n@@ -79,10 +77,7 @@ def encode(self):\n         message length and 5 bits for the type length followed by two values.\n         """\n \n-        if six.PY3:\n-            fmt_tpl = \'!H{0}s{1}s\'\n-        else:\n-            fmt_tpl = b\'!H{0}s{1}s\'\n+        fmt_tpl = \'!H{0}s{1}s\'\n         message = _utf8(self.message)[:0x3FF]  # we can store 2^11 bytes\n         type_ = _utf8(self.type)[:0x1F]  # we can store 2^5 bytes\n         size = (len(message) << 5) + (len(type_) & 31)  # pack into 16 bits\ndiff --git a/Products/statusmessages/tests/test_adapter.py b/Products/statusmessages/tests/test_adapter.py\nindex 5420ef8..85cfc66 100644\n--- a/Products/statusmessages/tests/test_adapter.py\n+++ b/Products/statusmessages/tests/test_adapter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: UTF-8 -*-\n """ StatusMessage adapter tests. """\n import unittest\n \ndiff --git a/Products/statusmessages/tests/test_doctests.py b/Products/statusmessages/tests/test_doctests.py\nindex face234..045a630 100644\n--- a/Products/statusmessages/tests/test_doctests.py\n+++ b/Products/statusmessages/tests/test_doctests.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from doctest import DocTestSuite\n from unittest import TestSuite\n \ndiff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 1af3325..24a6c14 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -1,6 +1,3 @@\n-# -*- coding: UTF-8 -*-\n-from __future__ import unicode_literals\n-\n import unittest\n \n \ndiff --git a/setup.py b/setup.py\nindex dd06f1e..f2d76e4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from setuptools import find_packages\n from setuptools import setup\n \n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/a73fa5341b5437750effe842f8d2ff55cc7306ad

chore: isort

Files changed:
M Products/statusmessages/tests/test_encoding.py

b'diff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 24a6c14..3aaede1 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -6,8 +6,8 @@ class TestEncoding(unittest.TestCase):\n     def test_encoding_msg_with_type(self):\n         """Test message encoding:\n         """\n-        from Products.statusmessages.message import Message\n         from Products.statusmessages.message import decode\n+        from Products.statusmessages.message import Message\n         m = Message(\'sp\xc3\xa4m\', \'eggs\')\n         self.assertEqual(\n             m.encode(),\n@@ -16,8 +16,8 @@ def test_encoding_msg_with_type(self):\n         self.assertEqual(decode(m.encode())[0], m)\n \n     def test_encoding_msg_without_type(self):\n-        from Products.statusmessages.message import Message\n         from Products.statusmessages.message import decode\n+        from Products.statusmessages.message import Message\n         m = Message(\'sp\xc3\xa4m\')\n         self.assertEqual(\n             m,\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/cdbc5c51a05fe607a0194a4b9b3afb16e043463e

chore: black

Files changed:
M Products/__init__.py
M Products/statusmessages/__init__.py
M Products/statusmessages/adapter.py
M Products/statusmessages/interfaces.py
M Products/statusmessages/message.py
M Products/statusmessages/tests/test_adapter.py
M Products/statusmessages/tests/test_doctests.py
M Products/statusmessages/tests/test_encoding.py
M setup.py

b'diff --git a/Products/__init__.py b/Products/__init__.py\nindex de40ea7..5284146 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1 +1 @@\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/Products/statusmessages/__init__.py b/Products/statusmessages/__init__.py\nindex b303b49..5bac36c 100644\n--- a/Products/statusmessages/__init__.py\n+++ b/Products/statusmessages/__init__.py\n@@ -1 +1 @@\n-STATUSMESSAGEKEY = \'statusmessages\'\n+STATUSMESSAGEKEY = "statusmessages"\ndiff --git a/Products/statusmessages/adapter.py b/Products/statusmessages/adapter.py\nindex 41e22fe..ca5baa4 100644\n--- a/Products/statusmessages/adapter.py\n+++ b/Products/statusmessages/adapter.py\n@@ -10,7 +10,7 @@\n import logging\n \n \n-logger = logging.getLogger(\'statusmessages\')\n+logger = logging.getLogger("statusmessages")\n \n \n @implementer(IStatusMessage)\n@@ -28,9 +28,8 @@ class StatusMessage:\n     def __init__(self, context):\n         self.context = context  # the context must be the request\n \n-    def add(self, text, type=\'info\'):\n-        """Add a status message.\n-        """\n+    def add(self, text, type="info"):\n+        """Add a status message."""\n         context = self.context\n         text = translate(text, context=context)\n         annotations = IAnnotations(context)\n@@ -40,12 +39,11 @@ def add(self, text, type=\'info\'):\n             context.cookies.get(STATUSMESSAGEKEY),\n         )\n         value = _encodeCookieValue(text, type, old=old)\n-        context.response.setCookie(STATUSMESSAGEKEY, value, path=\'/\')\n+        context.response.setCookie(STATUSMESSAGEKEY, value, path="/")\n         annotations[STATUSMESSAGEKEY] = value\n \n     def show(self):\n-        """Removes all status messages and returns them for display.\n-        """\n+        """Removes all status messages and returns them for display."""\n         context = self.context\n         annotations = IAnnotations(context)\n         value = annotations.get(\n@@ -62,7 +60,7 @@ def show(self):\n         # are sloppy).\n         if self.context.response.getStatus() not in (301, 302, 304):\n             context.cookies[STATUSMESSAGEKEY] = None\n-            context.response.expireCookie(STATUSMESSAGEKEY, path=\'/\')\n+            context.response.expireCookie(STATUSMESSAGEKEY, path="/")\n             annotations[STATUSMESSAGEKEY] = None\n \n         return value\n@@ -74,8 +72,8 @@ def show(self):\n \n def _encodeCookieValue(text, type, old=None):\n     """Encodes text and type to a list of Messages. If there is already some old\n-       existing list, add the new Message at the end but don\'t add duplicate\n-       messages.\n+    existing list, add the new Message at the end but don\'t add duplicate\n+    messages.\n     """\n     results = []\n     message = Message(text, type=type)\n@@ -85,18 +83,17 @@ def _encodeCookieValue(text, type, old=None):\n     if message not in results:\n         results.append(message)\n \n-    messages = b\'\'.join([r.encode() for r in results])\n+    messages = b"".join([r.encode() for r in results])\n     bin_value = binascii.b2a_base64(messages).rstrip()\n     # remove the stupid b that will lead to values like "b\'AYR...\'"\n-    return bin_value.decode(\'utf-8\')\n+    return bin_value.decode("utf-8")\n \n \n def _decodeCookieValue(string):\n-    """Decode a cookie value to a list of Messages.\n-    """\n+    """Decode a cookie value to a list of Messages."""\n     results = []\n     # Return nothing if the cookie is marked as deleted\n-    if string == \'deleted\':\n+    if string == "deleted":\n         return results\n     # Try to decode the cookie value\n     try:\n@@ -106,7 +103,7 @@ def _decodeCookieValue(string):\n             if message is not None:\n                 results.append(message)\n     except (binascii.Error, UnicodeEncodeError):\n-        logger.exception(\'Unexpected value in statusmessages cookie\')\n+        logger.exception("Unexpected value in statusmessages cookie")\n         return []\n \n     return results\ndiff --git a/Products/statusmessages/interfaces.py b/Products/statusmessages/interfaces.py\nindex f69d5b7..89058f7 100644\n--- a/Products/statusmessages/interfaces.py\n+++ b/Products/statusmessages/interfaces.py\n@@ -5,23 +5,22 @@\n class IMessage(Interface):\n     """A single status message."""\n \n-    message = Attribute(\'The text of this message. Usally a Message object.\')\n+    message = Attribute("The text of this message. Usally a Message object.")\n \n-    type = Attribute(\'The type of this message.\')\n+    type = Attribute("The type of this message.")\n \n \n class IStatusMessage(Interface):\n     """An adapter for the BrowserRequest to handle status messages."""\n \n-    def addStatusMessage(text, type=\'info\'):\n+    def addStatusMessage(text, type="info"):\n         """Add a status message."""\n \n-    def add(text, type=\'info\'):\n+    def add(text, type="info"):\n         """Add a status message."""\n \n     def showStatusMessages():\n-        """Removes all status messages and returns them for display.\n-        """\n+        """Removes all status messages and returns them for display."""\n+\n     def show():\n-        """Removes all status messages and returns them for display.\n-        """\n+        """Removes all status messages and returns them for display."""\ndiff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 45501c7..46e211e 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -7,14 +7,14 @@\n \n def _utf8(value):\n     if isinstance(value, str):\n-        return value.encode(\'utf-8\')\n+        return value.encode("utf-8")\n     elif isinstance(value, bytes):\n         return value\n-    return b\'\'\n+    return b""\n \n \n def _unicode(value):\n-    return str(value, \'utf-8\', \'ignore\')\n+    return str(value, "utf-8", "ignore")\n \n \n @implementer(IMessage)\n@@ -58,7 +58,7 @@ class Message:\n \n     """\n \n-    def __init__(self, message, type=\'\'):\n+    def __init__(self, message, type=""):\n         self.message = message\n         self.type = type\n \n@@ -77,7 +77,7 @@ def encode(self):\n         message length and 5 bits for the type length followed by two values.\n         """\n \n-        fmt_tpl = \'!H{0}s{1}s\'\n+        fmt_tpl = "!H{0}s{1}s"\n         message = _utf8(self.message)[:0x3FF]  # we can store 2^11 bytes\n         type_ = _utf8(self.type)[:0x1F]  # we can store 2^5 bytes\n         size = (len(message) << 5) + (len(type_) & 31)  # pack into 16 bits\n@@ -95,11 +95,11 @@ def decode(value):\n     We expect at least 2 bytes (size information).\n     """\n     if len(value) >= 2:\n-        size = struct.unpack(b\'!H\', value[:2])[0]\n+        size = struct.unpack(b"!H", value[:2])[0]\n         msize, tsize = (size >> 5, size & 31)\n         message = Message(\n-            _unicode(value[2:msize + 2]),\n-            _unicode(value[msize + 2:msize + tsize + 2]),\n+            _unicode(value[2 : msize + 2]),\n+            _unicode(value[msize + 2 : msize + tsize + 2]),\n         )\n-        return message, value[msize + tsize + 2:]\n-    return None, b\'\'\n+        return message, value[msize + tsize + 2 :]\n+    return None, b""\ndiff --git a/Products/statusmessages/tests/test_adapter.py b/Products/statusmessages/tests/test_adapter.py\nindex 85cfc66..6f1891e 100644\n--- a/Products/statusmessages/tests/test_adapter.py\n+++ b/Products/statusmessages/tests/test_adapter.py\n@@ -3,7 +3,6 @@\n \n \n class TestAdapter(unittest.TestCase):\n-\n     def test_directives(self):\n         """\n         Test status messages\ndiff --git a/Products/statusmessages/tests/test_doctests.py b/Products/statusmessages/tests/test_doctests.py\nindex 045a630..4664f21 100644\n--- a/Products/statusmessages/tests/test_doctests.py\n+++ b/Products/statusmessages/tests/test_doctests.py\n@@ -3,8 +3,8 @@\n \n \n test_list = (\n-    DocTestSuite(\'Products.statusmessages.adapter\'),\n-    DocTestSuite(\'Products.statusmessages.message\'),\n+    DocTestSuite("Products.statusmessages.adapter"),\n+    DocTestSuite("Products.statusmessages.message"),\n )\n \n \ndiff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 3aaede1..2c6f232 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -2,73 +2,72 @@\n \n \n class TestEncoding(unittest.TestCase):\n-\n     def test_encoding_msg_with_type(self):\n-        """Test message encoding:\n-        """\n+        """Test message encoding:"""\n         from Products.statusmessages.message import decode\n         from Products.statusmessages.message import Message\n-        m = Message(\'sp\xc3\xa4m\', \'eggs\')\n+\n+        m = Message("sp\xc3\xa4m", "eggs")\n         self.assertEqual(\n             m.encode(),\n-            b\'\\x00\\xa4sp\\xc3\\xa4meggs\',\n+            b"\\x00\\xa4sp\\xc3\\xa4meggs",\n         )\n         self.assertEqual(decode(m.encode())[0], m)\n \n     def test_encoding_msg_without_type(self):\n         from Products.statusmessages.message import decode\n         from Products.statusmessages.message import Message\n-        m = Message(\'sp\xc3\xa4m\')\n+\n+        m = Message("sp\xc3\xa4m")\n         self.assertEqual(\n             m,\n-            Message(\'sp\xc3\xa4m\'),\n+            Message("sp\xc3\xa4m"),\n         )\n-        self.assertEqual(m.encode(), b\'\\x00\\xa0sp\\xc3\\xa4m\')\n+        self.assertEqual(m.encode(), b"\\x00\\xa0sp\\xc3\\xa4m")\n         self.assertEqual(decode(m.encode())[0], m)\n \n     def test_decoding(self):\n-        """Test message decoding:\n-        """\n+        """Test message decoding:"""\n         from Products.statusmessages.message import decode\n \n         # Craft a wrong value:\n-        m, rem = decode(b\'\\x01\\x84spameggs\')\n+        m, rem = decode(b"\\x01\\x84spameggs")\n         self.assertEqual(\n             m.message,\n-            \'spameggs\',\n+            "spameggs",\n         )\n         self.assertEqual(\n             m.type,\n-            \'\',\n+            "",\n         )\n-        self.assertEqual(rem, b\'\')\n+        self.assertEqual(rem, b"")\n \n         # Craft another wrong value:\n-        m, rem = decode(b\'\\x00\\x24spameggs\')\n+        m, rem = decode(b"\\x00\\x24spameggs")\n         self.assertEqual(\n             m.message,\n-            \'s\',\n+            "s",\n         )\n         self.assertEqual(\n             m.type,\n-            \'pame\',\n+            "pame",\n         )\n-        self.assertEqual(rem, b\'ggs\')\n+        self.assertEqual(rem, b"ggs")\n \n         # And another wrong value:\n-        m, rem = decode(b\'\\x00spameggs\')\n+        m, rem = decode(b"\\x00spameggs")\n         self.assertEqual(\n             m.message,\n-            \'pam\',\n+            "pam",\n         )\n         self.assertEqual(\n             m.type,\n-            \'eggs\',\n+            "eggs",\n         )\n-        self.assertEqual(rem, b\'\')\n+        self.assertEqual(rem, b"")\n \n         # And yet another wrong value:\n-        m, rem = decode(\'\')\n+        m, rem = decode("")\n \n         self.assertIs(m, None)\n-        self.assertEqual(rem, b\'\')\n+        self.assertEqual(rem, b"")\ndiff --git a/setup.py b/setup.py\nindex f2d76e4..7f25cc4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,54 +2,53 @@\n from setuptools import setup\n \n \n-version = \'5.0.6.dev0\'\n+version = "5.0.6.dev0"\n \n setup(\n-    name=\'Products.statusmessages\',\n+    name="Products.statusmessages",\n     version=version,\n-    description=\'statusmessages provides an easy way of handling \'\n-                \'internationalized status messages managed via an \'\n-                \'BrowserRequest adapter storing status messages in \'\n-                \'client-side cookies.\',\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(\'CHANGES.rst\').read()),\n+    description="statusmessages provides an easy way of handling "\n+    "internationalized status messages managed via an "\n+    "BrowserRequest adapter storing status messages in "\n+    "client-side cookies.",\n+    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope2\',\n-        \'Framework :: Zope :: 4\',\n-        \'License :: OSI Approved :: BSD License\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.5\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 5.0",\n+        "Framework :: Plone :: 5.1",\n+        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope2",\n+        "Framework :: Zope :: 4",\n+        "License :: OSI Approved :: BSD License",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.5",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n     ],\n-    keywords=\'Zope CMF Plone status messages i18n\',\n-    author=\'Hanno Schlichting\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.statusmessages\',\n-    license=\'BSD\',\n+    keywords="Zope CMF Plone status messages i18n",\n+    author="Hanno Schlichting",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/Products.statusmessages",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n     extras_require=dict(\n         test=[\n-            \'zope.component\',\n-            \'Zope2\',\n+            "zope.component",\n+            "Zope2",\n         ],\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.annotation\',\n-        \'zope.i18n\',\n-        \'zope.interface\',\n+        "setuptools",\n+        "six",\n+        "zope.annotation",\n+        "zope.i18n",\n+        "zope.interface",\n     ],\n )\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/b4af2e726832ae2de8c4c357f52aa85eedd7e2ef

chore: zpretty

Files changed:
M Products/statusmessages/configure.zcml

b'diff --git a/Products/statusmessages/configure.zcml b/Products/statusmessages/configure.zcml\nindex 5ba0b66..6c6b233 100644\n--- a/Products/statusmessages/configure.zcml\n+++ b/Products/statusmessages/configure.zcml\n@@ -1,14 +1,16 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n \n   <adapter\n-      for="zope.publisher.interfaces.browser.IBrowserRequest"\n-      provides=".interfaces.IStatusMessage"\n       factory=".adapter.StatusMessage"\n+      provides=".interfaces.IStatusMessage"\n+      for="zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <class class=".message.Message">\n-      <allow interface=".interfaces.IMessage" />\n+    <allow interface=".interfaces.IMessage" />\n   </class>\n \n   <!-- We need to make the request annotatable for this to work -->\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/3a08c5365a52179488326cddae39f20c2a34f02b

chore: update trove classifiers

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 7f25cc4..ee965f4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -14,20 +14,17 @@\n     long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.0",\n-        "Framework :: Plone :: 5.1",\n-        "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n-        "Framework :: Zope2",\n-        "Framework :: Zope :: 4",\n+        "Framework :: Zope :: 5",\n         "License :: OSI Approved :: BSD License",\n         "Programming Language :: Python",\n-        "Programming Language :: Python :: 2.7",\n-        "Programming Language :: Python :: 3.5",\n-        "Programming Language :: Python :: 3.6",\n-        "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n     keywords="Zope CMF Plone status messages i18n",\n     author="Hanno Schlichting",\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:03+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/770deec9d6460551011a286c2ae9d60214c1a151

feat: pyroma

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex ee965f4..441362b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -35,6 +35,7 @@\n     namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n             "zope.component",\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:04+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/b6513d75ec60ebcc3d2153e10179ceb427673836

feat: codespell

Files changed:
M Products/statusmessages/interfaces.py

b'diff --git a/Products/statusmessages/interfaces.py b/Products/statusmessages/interfaces.py\nindex 89058f7..c623e35 100644\n--- a/Products/statusmessages/interfaces.py\n+++ b/Products/statusmessages/interfaces.py\n@@ -5,7 +5,7 @@\n class IMessage(Interface):\n     """A single status message."""\n \n-    message = Attribute("The text of this message. Usally a Message object.")\n+    message = Attribute("The text of this message. Usually a Message object.")\n \n     type = Attribute("The type of this message.")\n \n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:04+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/51e82f5ad56416d2f2f8eee1e0666ae778c8325d

cleanup: drop six usage

Files changed:
M Products/statusmessages/message.py
M Products/statusmessages/tests/test_adapter.py
M setup.py

b'diff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 46e211e..66f0f64 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -1,7 +1,6 @@\n from Products.statusmessages.interfaces import IMessage\n from zope.interface import implementer\n \n-import six\n import struct\n \n \ndiff --git a/Products/statusmessages/tests/test_adapter.py b/Products/statusmessages/tests/test_adapter.py\nindex 6f1891e..64d2f8c 100644\n--- a/Products/statusmessages/tests/test_adapter.py\n+++ b/Products/statusmessages/tests/test_adapter.py\n@@ -209,7 +209,7 @@ def test_directives(self):\n           >>> status.add(u\'t\xc3\xa4st\' * 40, type=u\'info\')\n           >>> cookies = [c[\'value\'] for c in request.response.cookies.values()]\n           >>> cookies = \'\'.join(cookies)\n-          >>> cookies == six.text_type(cookies).encode(\'ASCII\')\n+          >>> cookies == str(cookies).encode(\'ASCII\')\n           True\n           >>> \'\\\\n\' in cookies\n           False\ndiff --git a/setup.py b/setup.py\nindex 441362b..33fb1c5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -44,7 +44,6 @@\n     ),\n     install_requires=[\n         "setuptools",\n-        "six",\n         "zope.annotation",\n         "zope.i18n",\n         "zope.interface",\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:04+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/a3751c6b52d3008f56eb167977947f96f8baaaf8

feat: declare dependencies

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 33fb1c5..609753f 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -38,8 +38,7 @@\n     python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n-            "zope.component",\n-            "Zope2",\n+            "Zope",\n         ],\n     ),\n     install_requires=[\n@@ -47,5 +46,6 @@\n         "zope.annotation",\n         "zope.i18n",\n         "zope.interface",\n+        "zope.publisher",\n     ],\n )\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-26T17:34:04+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/c6668268c8a392766afd526895fb167442902684

fix: adjust setup.py

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 609753f..65c6f85 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,9 +1,14 @@\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n \n version = "5.0.6.dev0"\n \n+long_description = (\n+    f"{Path(\'README.rst\').read_text()}\\n{Path(\'CHANGES.rst\').read_text()}"\n+)\n+\n setup(\n     name="Products.statusmessages",\n     version=version,\n@@ -11,7 +16,10 @@\n     "internationalized status messages managed via an "\n     "BrowserRequest adapter storing status messages in "\n     "client-side cookies.",\n-    long_description=(open("README.rst").read() + "\\n" + open("CHANGES.rst").read()),\n+    long_description=long_description,\n+    long_description_content_type="text/x-rst",\n+    # Get more strings from\n+    # https://pypi.org/classifiers/\n     classifiers=[\n         "Development Status :: 5 - Production/Stable",\n         "Environment :: Web Environment",\n'

Repository: Products.statusmessages


Branch: refs/heads/master
Date: 2023-06-30T18:49:29+03:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/Products.statusmessages/commit/50597b5dab693b91e25ac1f968f0aa75763598e0

Merge pull request #12 from plone/config-with-default-template-bc249389

Config with default template

Files changed:
A .editorconfig
A .flake8
A .github/workflows/meta.yml
A .meta.toml
A .pre-commit-config.yaml
A news/cc314a2b.internal
A tox.ini
M .gitignore
M Products/__init__.py
M Products/statusmessages/__init__.py
M Products/statusmessages/adapter.py
M Products/statusmessages/configure.zcml
M Products/statusmessages/interfaces.py
M Products/statusmessages/message.py
M Products/statusmessages/tests/test_adapter.py
M Products/statusmessages/tests/test_doctests.py
M Products/statusmessages/tests/test_encoding.py
M pyproject.toml
M setup.py
D buildout.cfg
D requirements.txt
D setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..919b411\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,53 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+#\n+# EditorConfig Configuration file, for more details see:\n+# http://EditorConfig.org\n+# EditorConfig is a convention description, that could be interpreted\n+# by multiple editors to enforce common coding conventions for specific\n+# file types\n+\n+# top-most EditorConfig file:\n+# Will ignore other EditorConfig files in Home directory or upper tree level.\n+root = true\n+\n+\n+[*]  # For All Files\n+# Unix-style newlines with a newline ending every file\n+end_of_line = lf\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+# Set default charset\n+charset = utf-8\n+# Indent style default\n+indent_style = space\n+# Max Line Length - a hard line wrap, should be disabled\n+max_line_length = off\n+\n+[*.{py,cfg,ini}]\n+# 4 space indentation\n+indent_size = 4\n+\n+[*.{yml,zpt,pt,dtml,zcml}]\n+# 2 space indentation\n+indent_size = 2\n+\n+[*.{json,jsonl,js,jsx,ts,tsx,css,less,scss,html}]  # Frontend development\n+# 2 space indentation\n+indent_size = 2\n+\n+[{Makefile,.gitmodules}]\n+# Tab indentation (no size specified, but view as 4 spaces)\n+indent_style = tab\n+indent_size = unset\n+tab_width = unset\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [editorconfig]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 0000000..1944a84\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,24 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[flake8]\n+doctests = 1\n+ignore =\n+    # black takes care of line length\n+    E501,\n+    # black takes care of where to break lines\n+    W503,\n+    # black takes care of spaces within slicing (list[:])\n+    E203,\n+    # black takes care of spaces after commas\n+    E231,\n+per-file-ignores =\n+    Products/statusmessages/tests/test_adapter.py:F821\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [flake8]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.github/workflows/meta.yml b/.github/workflows/meta.yml\nnew file mode 100644\nindex 0000000..a7f25e0\n--- /dev/null\n+++ b/.github/workflows/meta.yml\n@@ -0,0 +1,28 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+name: Meta\n+on:\n+  push:\n+    branches:\n+      - master\n+      - main\n+  pull_request:\n+    branches:\n+      - master\n+      - main\n+  workflow_dispatch:\n+\n+jobs:\n+  qa:\n+    uses: plone/meta/.github/workflows/qa.yml@main\n+  test:\n+    uses: plone/meta/.github/workflows/test.yml@main\n+  coverage:\n+    uses: plone/meta/.github/workflows/coverage.yml@main\n+  dependencies:\n+    uses: plone/meta/.github/workflows/dependencies.yml@main\n+  release-ready:\n+    uses: plone/meta/.github/workflows/release_ready.yml@main\n+  circular:\n+    uses: plone/meta/.github/workflows/circular.yml@main\ndiff --git a/.gitignore b/.gitignore\nindex 35500ac..81594fd 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,9 +1,51 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+# python related\n *.egg-info\n-*.py[co]\n+*.pyc\n+*.pyo\n+\n+# tools related\n+build/\n+.coverage\n+coverage.xml\n+dist/\n+docs/_build\n+__pycache__/\n+.tox\n+.vscode/\n+node_modules/\n+\n+# venv / buildout related\n+bin/\n+develop-eggs/\n+eggs/\n+.eggs/\n+etc/\n .installed.cfg\n-/bin\n-/parts\n-/develop-eggs\n-/include\n-/lib*\n-pip-selfcheck.json\n+include/\n+lib/\n+lib64\n+.mr.developer.cfg\n+parts/\n+pyvenv.cfg\n+var/\n+\n+# mxdev\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\n+.installed.txt\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [gitignore]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.meta.toml b/.meta.toml\nnew file mode 100644\nindex 0000000..7b21a5f\n--- /dev/null\n+++ b/.meta.toml\n@@ -0,0 +1,12 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[meta]\n+template = "default"\n+commit-id = "cfffba8c"\n+\n+[flake8]\n+extra_lines = """\n+per-file-ignores =\n+    Products/statusmessages/tests/test_adapter.py:F821\n+"""\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..7de9fd7\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,84 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+ci:\n+    autofix_prs: false\n+    autoupdate_schedule: monthly\n+\n+repos:\n+-   repo: https://github.com/asottile/pyupgrade\n+    rev: v3.4.0\n+    hooks:\n+    -   id: pyupgrade\n+        args: [--py38-plus]\n+-   repo: https://github.com/pycqa/isort\n+    rev: 5.12.0\n+    hooks:\n+    -   id: isort\n+-   repo: https://github.com/psf/black\n+    rev: 23.3.0\n+    hooks:\n+    -   id: black\n+-   repo: https://github.com/collective/zpretty\n+    rev: 3.1.0a2\n+    hooks:\n+    -   id: zpretty\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  zpretty_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/PyCQA/flake8\n+    rev: 6.0.0\n+    hooks:\n+    -   id: flake8\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  flake8_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/codespell-project/codespell\n+    rev: v2.2.4\n+    hooks:\n+    -   id: codespell\n+        additional_dependencies:\n+          - tomli\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  codespell_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n+-   repo: https://github.com/mgedmin/check-manifest\n+    rev: "0.49"\n+    hooks:\n+    -   id: check-manifest\n+-   repo: https://github.com/regebro/pyroma\n+    rev: "4.2"\n+    hooks:\n+    -   id: pyroma\n+-   repo: https://github.com/mgedmin/check-python-versions\n+    rev: "0.21.2"\n+    hooks:\n+    -   id: check-python-versions\n+        args: [\'--only\', \'setup.py,pyproject.toml\']\n+-   repo: https://github.com/collective/i18ndude\n+    rev: "6.0.0"\n+    hooks:\n+    -   id: i18ndude\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/Products/__init__.py b/Products/__init__.py\nindex 68c04af..5284146 100644\n--- a/Products/__init__.py\n+++ b/Products/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/Products/statusmessages/__init__.py b/Products/statusmessages/__init__.py\nindex 0d98752..5bac36c 100644\n--- a/Products/statusmessages/__init__.py\n+++ b/Products/statusmessages/__init__.py\n@@ -1,2 +1 @@\n-# -*- coding: utf-8 -*-\n-STATUSMESSAGEKEY = \'statusmessages\'\n+STATUSMESSAGEKEY = "statusmessages"\ndiff --git a/Products/statusmessages/adapter.py b/Products/statusmessages/adapter.py\nindex 6d490ad..ca5baa4 100644\n--- a/Products/statusmessages/adapter.py\n+++ b/Products/statusmessages/adapter.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from Products.statusmessages import STATUSMESSAGEKEY\n from Products.statusmessages.interfaces import IStatusMessage\n from Products.statusmessages.message import decode\n@@ -11,11 +10,11 @@\n import logging\n \n \n-logger = logging.getLogger(\'statusmessages\')\n+logger = logging.getLogger("statusmessages")\n \n \n @implementer(IStatusMessage)\n-class StatusMessage(object):\n+class StatusMessage:\n     """Adapter for the BrowserRequest to handle status messages.\n \n     Let\'s make sure that this implementation actually fulfills the\n@@ -29,9 +28,8 @@ class StatusMessage(object):\n     def __init__(self, context):\n         self.context = context  # the context must be the request\n \n-    def add(self, text, type=u\'info\'):\n-        """Add a status message.\n-        """\n+    def add(self, text, type="info"):\n+        """Add a status message."""\n         context = self.context\n         text = translate(text, context=context)\n         annotations = IAnnotations(context)\n@@ -41,12 +39,11 @@ def add(self, text, type=u\'info\'):\n             context.cookies.get(STATUSMESSAGEKEY),\n         )\n         value = _encodeCookieValue(text, type, old=old)\n-        context.response.setCookie(STATUSMESSAGEKEY, value, path=\'/\')\n+        context.response.setCookie(STATUSMESSAGEKEY, value, path="/")\n         annotations[STATUSMESSAGEKEY] = value\n \n     def show(self):\n-        """Removes all status messages and returns them for display.\n-        """\n+        """Removes all status messages and returns them for display."""\n         context = self.context\n         annotations = IAnnotations(context)\n         value = annotations.get(\n@@ -63,7 +60,7 @@ def show(self):\n         # are sloppy).\n         if self.context.response.getStatus() not in (301, 302, 304):\n             context.cookies[STATUSMESSAGEKEY] = None\n-            context.response.expireCookie(STATUSMESSAGEKEY, path=\'/\')\n+            context.response.expireCookie(STATUSMESSAGEKEY, path="/")\n             annotations[STATUSMESSAGEKEY] = None\n \n         return value\n@@ -75,8 +72,8 @@ def show(self):\n \n def _encodeCookieValue(text, type, old=None):\n     """Encodes text and type to a list of Messages. If there is already some old\n-       existing list, add the new Message at the end but don\'t add duplicate\n-       messages.\n+    existing list, add the new Message at the end but don\'t add duplicate\n+    messages.\n     """\n     results = []\n     message = Message(text, type=type)\n@@ -86,18 +83,17 @@ def _encodeCookieValue(text, type, old=None):\n     if message not in results:\n         results.append(message)\n \n-    messages = b\'\'.join([r.encode() for r in results])\n+    messages = b"".join([r.encode() for r in results])\n     bin_value = binascii.b2a_base64(messages).rstrip()\n     # remove the stupid b that will lead to values like "b\'AYR...\'"\n-    return bin_value.decode(\'utf-8\')\n+    return bin_value.decode("utf-8")\n \n \n def _decodeCookieValue(string):\n-    """Decode a cookie value to a list of Messages.\n-    """\n+    """Decode a cookie value to a list of Messages."""\n     results = []\n     # Return nothing if the cookie is marked as deleted\n-    if string == \'deleted\':\n+    if string == "deleted":\n         return results\n     # Try to decode the cookie value\n     try:\n@@ -107,7 +103,7 @@ def _decodeCookieValue(string):\n             if message is not None:\n                 results.append(message)\n     except (binascii.Error, UnicodeEncodeError):\n-        logger.exception(\'Unexpected value in statusmessages cookie\')\n+        logger.exception("Unexpected value in statusmessages cookie")\n         return []\n \n     return results\ndiff --git a/Products/statusmessages/configure.zcml b/Products/statusmessages/configure.zcml\nindex 5ba0b66..6c6b233 100644\n--- a/Products/statusmessages/configure.zcml\n+++ b/Products/statusmessages/configure.zcml\n@@ -1,14 +1,16 @@\n-<configure xmlns="http://namespaces.zope.org/zope"\n-    xmlns:zcml="http://namespaces.zope.org/zcml">\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n+    >\n \n   <adapter\n-      for="zope.publisher.interfaces.browser.IBrowserRequest"\n-      provides=".interfaces.IStatusMessage"\n       factory=".adapter.StatusMessage"\n+      provides=".interfaces.IStatusMessage"\n+      for="zope.publisher.interfaces.browser.IBrowserRequest"\n       />\n \n   <class class=".message.Message">\n-      <allow interface=".interfaces.IMessage" />\n+    <allow interface=".interfaces.IMessage" />\n   </class>\n \n   <!-- We need to make the request annotatable for this to work -->\ndiff --git a/Products/statusmessages/interfaces.py b/Products/statusmessages/interfaces.py\nindex fa19f88..c623e35 100644\n--- a/Products/statusmessages/interfaces.py\n+++ b/Products/statusmessages/interfaces.py\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n from zope.interface import Attribute\n from zope.interface import Interface\n \n@@ -6,23 +5,22 @@\n class IMessage(Interface):\n     """A single status message."""\n \n-    message = Attribute(\'The text of this message. Usally a Message object.\')\n+    message = Attribute("The text of this message. Usually a Message object.")\n \n-    type = Attribute(\'The type of this message.\')\n+    type = Attribute("The type of this message.")\n \n \n class IStatusMessage(Interface):\n     """An adapter for the BrowserRequest to handle status messages."""\n \n-    def addStatusMessage(text, type=u\'info\'):\n+    def addStatusMessage(text, type="info"):\n         """Add a status message."""\n \n-    def add(text, type=u\'info\'):\n+    def add(text, type="info"):\n         """Add a status message."""\n \n     def showStatusMessages():\n-        """Removes all status messages and returns them for display.\n-        """\n+        """Removes all status messages and returns them for display."""\n+\n     def show():\n-        """Removes all status messages and returns them for display.\n-        """\n+        """Removes all status messages and returns them for display."""\ndiff --git a/Products/statusmessages/message.py b/Products/statusmessages/message.py\nindex 3c8b592..66f0f64 100644\n--- a/Products/statusmessages/message.py\n+++ b/Products/statusmessages/message.py\n@@ -1,26 +1,23 @@\n-# -*- coding: utf-8 -*-\n-from __future__ import unicode_literals\n from Products.statusmessages.interfaces import IMessage\n from zope.interface import implementer\n \n-import six\n import struct\n \n \n def _utf8(value):\n-    if isinstance(value, six.text_type):\n-        return value.encode(\'utf-8\')\n-    elif isinstance(value, six.binary_type):\n+    if isinstance(value, str):\n+        return value.encode("utf-8")\n+    elif isinstance(value, bytes):\n         return value\n-    return b\'\'\n+    return b""\n \n \n def _unicode(value):\n-    return six.text_type(value, \'utf-8\', \'ignore\')\n+    return str(value, "utf-8", "ignore")\n \n \n @implementer(IMessage)\n-class Message(object):\n+class Message:\n     """A single status message.\n \n     Let\'s make sure that this implementation actually fulfills the\n@@ -60,7 +57,7 @@ class Message(object):\n \n     """\n \n-    def __init__(self, message, type=\'\'):\n+    def __init__(self, message, type=""):\n         self.message = message\n         self.type = type\n \n@@ -79,10 +76,7 @@ def encode(self):\n         message length and 5 bits for the type length followed by two values.\n         """\n \n-        if six.PY3:\n-            fmt_tpl = \'!H{0}s{1}s\'\n-        else:\n-            fmt_tpl = b\'!H{0}s{1}s\'\n+        fmt_tpl = "!H{0}s{1}s"\n         message = _utf8(self.message)[:0x3FF]  # we can store 2^11 bytes\n         type_ = _utf8(self.type)[:0x1F]  # we can store 2^5 bytes\n         size = (len(message) << 5) + (len(type_) & 31)  # pack into 16 bits\n@@ -100,11 +94,11 @@ def decode(value):\n     We expect at least 2 bytes (size information).\n     """\n     if len(value) >= 2:\n-        size = struct.unpack(b\'!H\', value[:2])[0]\n+        size = struct.unpack(b"!H", value[:2])[0]\n         msize, tsize = (size >> 5, size & 31)\n         message = Message(\n-            _unicode(value[2:msize + 2]),\n-            _unicode(value[msize + 2:msize + tsize + 2]),\n+            _unicode(value[2 : msize + 2]),\n+            _unicode(value[msize + 2 : msize + tsize + 2]),\n         )\n-        return message, value[msize + tsize + 2:]\n-    return None, b\'\'\n+        return message, value[msize + tsize + 2 :]\n+    return None, b""\ndiff --git a/Products/statusmessages/tests/test_adapter.py b/Products/statusmessages/tests/test_adapter.py\nindex 5420ef8..64d2f8c 100644\n--- a/Products/statusmessages/tests/test_adapter.py\n+++ b/Products/statusmessages/tests/test_adapter.py\n@@ -1,10 +1,8 @@\n-# -*- coding: UTF-8 -*-\n """ StatusMessage adapter tests. """\n import unittest\n \n \n class TestAdapter(unittest.TestCase):\n-\n     def test_directives(self):\n         """\n         Test status messages\n@@ -211,7 +209,7 @@ def test_directives(self):\n           >>> status.add(u\'t\xc3\xa4st\' * 40, type=u\'info\')\n           >>> cookies = [c[\'value\'] for c in request.response.cookies.values()]\n           >>> cookies = \'\'.join(cookies)\n-          >>> cookies == six.text_type(cookies).encode(\'ASCII\')\n+          >>> cookies == str(cookies).encode(\'ASCII\')\n           True\n           >>> \'\\\\n\' in cookies\n           False\ndiff --git a/Products/statusmessages/tests/test_doctests.py b/Products/statusmessages/tests/test_doctests.py\nindex face234..4664f21 100644\n--- a/Products/statusmessages/tests/test_doctests.py\n+++ b/Products/statusmessages/tests/test_doctests.py\n@@ -1,11 +1,10 @@\n-# -*- coding: utf-8 -*-\n from doctest import DocTestSuite\n from unittest import TestSuite\n \n \n test_list = (\n-    DocTestSuite(\'Products.statusmessages.adapter\'),\n-    DocTestSuite(\'Products.statusmessages.message\'),\n+    DocTestSuite("Products.statusmessages.adapter"),\n+    DocTestSuite("Products.statusmessages.message"),\n )\n \n \ndiff --git a/Products/statusmessages/tests/test_encoding.py b/Products/statusmessages/tests/test_encoding.py\nindex 1af3325..2c6f232 100644\n--- a/Products/statusmessages/tests/test_encoding.py\n+++ b/Products/statusmessages/tests/test_encoding.py\n@@ -1,77 +1,73 @@\n-# -*- coding: UTF-8 -*-\n-from __future__ import unicode_literals\n-\n import unittest\n \n \n class TestEncoding(unittest.TestCase):\n-\n     def test_encoding_msg_with_type(self):\n-        """Test message encoding:\n-        """\n-        from Products.statusmessages.message import Message\n+        """Test message encoding:"""\n         from Products.statusmessages.message import decode\n-        m = Message(\'sp\xc3\xa4m\', \'eggs\')\n+        from Products.statusmessages.message import Message\n+\n+        m = Message("sp\xc3\xa4m", "eggs")\n         self.assertEqual(\n             m.encode(),\n-            b\'\\x00\\xa4sp\\xc3\\xa4meggs\',\n+            b"\\x00\\xa4sp\\xc3\\xa4meggs",\n         )\n         self.assertEqual(decode(m.encode())[0], m)\n \n     def test_encoding_msg_without_type(self):\n-        from Products.statusmessages.message import Message\n         from Products.statusmessages.message import decode\n-        m = Message(\'sp\xc3\xa4m\')\n+        from Products.statusmessages.message import Message\n+\n+        m = Message("sp\xc3\xa4m")\n         self.assertEqual(\n             m,\n-            Message(\'sp\xc3\xa4m\'),\n+            Message("sp\xc3\xa4m"),\n         )\n-        self.assertEqual(m.encode(), b\'\\x00\\xa0sp\\xc3\\xa4m\')\n+        self.assertEqual(m.encode(), b"\\x00\\xa0sp\\xc3\\xa4m")\n         self.assertEqual(decode(m.encode())[0], m)\n \n     def test_decoding(self):\n-        """Test message decoding:\n-        """\n+        """Test message decoding:"""\n         from Products.statusmessages.message import decode\n \n         # Craft a wrong value:\n-        m, rem = decode(b\'\\x01\\x84spameggs\')\n+        m, rem = decode(b"\\x01\\x84spameggs")\n         self.assertEqual(\n             m.message,\n-            \'spameggs\',\n+            "spameggs",\n         )\n         self.assertEqual(\n             m.type,\n-            \'\',\n+            "",\n         )\n-        self.assertEqual(rem, b\'\')\n+        self.assertEqual(rem, b"")\n \n         # Craft another wrong value:\n-        m, rem = decode(b\'\\x00\\x24spameggs\')\n+        m, rem = decode(b"\\x00\\x24spameggs")\n         self.assertEqual(\n             m.message,\n-            \'s\',\n+            "s",\n         )\n         self.assertEqual(\n             m.type,\n-            \'pame\',\n+            "pame",\n         )\n-        self.assertEqual(rem, b\'ggs\')\n+        self.assertEqual(rem, b"ggs")\n \n         # And another wrong value:\n-        m, rem = decode(b\'\\x00spameggs\')\n+        m, rem = decode(b"\\x00spameggs")\n         self.assertEqual(\n             m.message,\n-            \'pam\',\n+            "pam",\n         )\n         self.assertEqual(\n             m.type,\n-            \'eggs\',\n+            "eggs",\n         )\n-        self.assertEqual(rem, b\'\')\n+        self.assertEqual(rem, b"")\n \n         # And yet another wrong value:\n-        m, rem = decode(\'\')\n+        m, rem = decode("")\n \n         self.assertIs(m, None)\n-        self.assertEqual(rem, b\'\')\n+        self.assertEqual(rem, b"")\ndiff --git a/buildout.cfg b/buildout.cfg\ndeleted file mode 100644\nindex e93924d..0000000\n--- a/buildout.cfg\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[buildout]\n-parts = test\n-extends = https://raw.githubusercontent.com/zopefoundation/Zope/4.0a6/versions.cfg\n-develop = .\n-\n-[test]\n-recipe = zc.recipe.testrunner\n-eggs = Products.statusmessages [test]\n-\ndiff --git a/news/cc314a2b.internal b/news/cc314a2b.internal\nnew file mode 100644\nindex 0000000..c08f539\n--- /dev/null\n+++ b/news/cc314a2b.internal\n@@ -0,0 +1,2 @@\n+Update configuration files.\n+[plone devs]\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 05b615d..e442bd0 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,6 +1,9 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [tool.towncrier]\n-filename = "CHANGES.rst"\n directory = "news/"\n+filename = "CHANGES.rst"\n title_format = "{version} ({project_date})"\n underlines = ["-", ""]\n \n@@ -18,3 +21,137 @@ showcontent = true\n directory = "bugfix"\n name = "Bug fixes:"\n showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "internal"\n+name = "Internal:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "documentation"\n+name = "Documentation:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "tests"\n+name = "Tests"\n+showcontent = true\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  towncrier_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.isort]\n+profile = "plone"\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  isort_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.black]\n+target-version = ["py38"]\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  black_extra_lines = """\n+#  extra_configuration\n+#  """\n+##\n+\n+[tool.codespell]\n+ignore-words-list = "discreet,"\n+skip = "*.po,"\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  codespell_ignores = "foo,bar"\n+#  codespell_skip = "*.po,*.map,package-lock.json"\n+##\n+\n+[tool.dependencychecker]\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n+python-dateutil = [\'dateutil\']\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  dependencies_ignores = "[\'zestreleaser.towncrier\']"\n+#  dependencies_mappings = [\n+#    "gitpython = [\'git\']",\n+#    "pygithub = [\'github\']",\n+#  ]\n+#  """\n+##\n+\n+[tool.check-manifest]\n+ignore = [\n+    ".editorconfig",\n+    ".meta.toml",\n+    ".pre-commit-config.yaml",\n+    "tox.ini",\n+    ".flake8",\n+    "mx.ini",\n+\n+]\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  check_manifest_ignores = """\n+#      "*.map.js",\n+#      "*.pyc",\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/requirements.txt b/requirements.txt\ndeleted file mode 100644\nindex 244887f..0000000\n--- a/requirements.txt\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-setuptools==33.1.1\n-zc.buildout==2.8.0\ndiff --git a/setup.cfg b/setup.cfg\ndeleted file mode 100644\nindex f3d8371..0000000\n--- a/setup.cfg\n+++ /dev/null\n@@ -1,9 +0,0 @@\n-[check-manifest]\n-ignore =\n-    buildout.cfg\n-\n-[bdist_wheel]\n-universal = 1\n-\n-[zest.releaser]\n-create-wheel = yes\ndiff --git a/setup.py b/setup.py\nindex dd06f1e..65c6f85 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,56 +1,59 @@\n-# -*- coding: utf-8 -*-\n+from pathlib import Path\n from setuptools import find_packages\n from setuptools import setup\n \n \n-version = \'5.0.6.dev0\'\n+version = "5.0.6.dev0"\n+\n+long_description = (\n+    f"{Path(\'README.rst\').read_text()}\\n{Path(\'CHANGES.rst\').read_text()}"\n+)\n \n setup(\n-    name=\'Products.statusmessages\',\n+    name="Products.statusmessages",\n     version=version,\n-    description=\'statusmessages provides an easy way of handling \'\n-                \'internationalized status messages managed via an \'\n-                \'BrowserRequest adapter storing status messages in \'\n-                \'client-side cookies.\',\n-    long_description=(open(\'README.rst\').read() + \'\\n\' +\n-                      open(\'CHANGES.rst\').read()),\n+    description="statusmessages provides an easy way of handling "\n+    "internationalized status messages managed via an "\n+    "BrowserRequest adapter storing status messages in "\n+    "client-side cookies.",\n+    long_description=long_description,\n+    long_description_content_type="text/x-rst",\n+    # Get more strings from\n+    # https://pypi.org/classifiers/\n     classifiers=[\n-        \'Development Status :: 5 - Production/Stable\',\n-        \'Framework :: Plone\',\n-        \'Framework :: Plone :: 5.0\',\n-        \'Framework :: Plone :: 5.1\',\n-        \'Framework :: Plone :: 5.2\',\n-        \'Framework :: Plone :: Core\',\n-        \'Framework :: Zope2\',\n-        \'Framework :: Zope :: 4\',\n-        \'License :: OSI Approved :: BSD License\',\n-        \'Programming Language :: Python\',\n-        \'Programming Language :: Python :: 2.7\',\n-        \'Programming Language :: Python :: 3.5\',\n-        \'Programming Language :: Python :: 3.6\',\n-        \'Programming Language :: Python :: 3.7\',\n-        \'Programming Language :: Python :: 3.8\',\n+        "Development Status :: 5 - Production/Stable",\n+        "Environment :: Web Environment",\n+        "Framework :: Plone",\n+        "Framework :: Plone :: 6.0",\n+        "Framework :: Plone :: Core",\n+        "Framework :: Zope :: 5",\n+        "License :: OSI Approved :: BSD License",\n+        "Programming Language :: Python",\n+        "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n+        "Programming Language :: Python :: 3.10",\n+        "Programming Language :: Python :: 3.11",\n     ],\n-    keywords=\'Zope CMF Plone status messages i18n\',\n-    author=\'Hanno Schlichting\',\n-    author_email=\'plone-developers@lists.sourceforge.net\',\n-    url=\'https://pypi.org/project/Products.statusmessages\',\n-    license=\'BSD\',\n+    keywords="Zope CMF Plone status messages i18n",\n+    author="Hanno Schlichting",\n+    author_email="plone-developers@lists.sourceforge.net",\n+    url="https://pypi.org/project/Products.statusmessages",\n+    license="BSD",\n     packages=find_packages(),\n-    namespace_packages=[\'Products\'],\n+    namespace_packages=["Products"],\n     include_package_data=True,\n     zip_safe=False,\n+    python_requires=">=3.8",\n     extras_require=dict(\n         test=[\n-            \'zope.component\',\n-            \'Zope2\',\n+            "Zope",\n         ],\n     ),\n     install_requires=[\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.annotation\',\n-        \'zope.i18n\',\n-        \'zope.interface\',\n+        "setuptools",\n+        "zope.annotation",\n+        "zope.i18n",\n+        "zope.interface",\n+        "zope.publisher",\n     ],\n )\ndiff --git a/tox.ini b/tox.ini\nnew file mode 100644\nindex 0000000..1247dcb\n--- /dev/null\n+++ b/tox.ini\n@@ -0,0 +1,189 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+[tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n+envlist =\n+    lint\n+    test\n+    dependencies\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  envlist_lines = """\n+#      my_other_environment\n+#  """\n+#  config_lines = """\n+#  my_extra_top_level_tox_configuration_lines\n+#  """\n+##\n+\n+[testenv]\n+skip_install = true\n+allowlist_externals =\n+    echo\n+    false\n+# Make sure typos like `tox -e formaat` are caught instead of silently doing nothing.\n+# See https://github.com/tox-dev/tox/issues/2858.\n+commands =\n+    echo "Unrecognized environment name {envname}"\n+    false\n+\n+[testenv:format]\n+description = automatically reformat code\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a pyupgrade\n+    pre-commit run -a isort\n+    pre-commit run -a black\n+    pre-commit run -a zpretty\n+\n+[testenv:lint]\n+description = run linters that will help improve the code style\n+skip_install = true\n+deps =\n+    pre-commit\n+commands =\n+    pre-commit run -a\n+\n+[testenv:dependencies]\n+description = check if the package defines all its dependencies\n+skip_install = true\n+deps =\n+    build\n+    z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the dependencies of the package\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree==2.5.1\n+    graphviz  # optional dependency of pipdeptree\n+commands =\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+\n+[testenv:test]\n+description = run the distribution tests\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+deps =\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+##\n+# Specify a custom constraints file in .meta.toml:\n+#  [tox]\n+#  constraints_file = "https://my-server.com/constraints.txt"\n+##\n+commands =\n+    zope-testrunner --all --test-path={toxinidir} -s Products.statusmessages {posargs}\n+extras =\n+    test\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  test_extras = """\n+#      tests\n+#      widgets\n+#  """\n+##\n+\n+[testenv:coverage]\n+description = get a test coverage report\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env =\n+    ROBOT_BROWSER=headlesschrome\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run --branch --source Products.statusmessages {envbindir}/zope-testrunner --quiet --all --test-path={toxinidir} -s Products.statusmessages {posargs}\n+    coverage report -m --format markdown\n+    coverage xml\n+extras =\n+    test\n+\n+\n+[testenv:release-check]\n+description = ensure that the distribution is ready to release\n+skip_install = true\n+deps =\n+    twine\n+    build\n+    towncrier\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # fake version to not have to install the package\n+    # we build the change log as news entries might break\n+    # the README that is displayed on PyPI\n+    towncrier build --version=100.0.0 --yes\n+    python -m build --sdist --no-isolation\n+    twine check dist/*\n+\n+[testenv:circular]\n+description = ensure there are no cyclic dependencies\n+use_develop = true\n+skip_install = false\n+set_env =\n+\n+##\n+# Specify extra test environment variables in .meta.toml:\n+#  [tox]\n+#  test_environment_variables = """\n+#      PIP_EXTRA_INDEX_URL=https://my-pypi.my-server.com/\n+#  """\n+##\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree\n+    pipforester\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # Generate the full dependency tree\n+    sh -c \'pipdeptree -j > forest.json\'\n+    # Generate a DOT graph with the circular dependencies, if any\n+    pipforester -i forest.json -o forest.dot --cycles\n+    # Report if there are any circular dependencies, i.e. error if there are any\n+    pipforester -i forest.json --check-cycles -o /dev/null\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n'

