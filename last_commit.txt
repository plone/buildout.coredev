Repository: plone.app.imaging


Branch: refs/heads/master
Date: 2021-06-11T13:33:29-07:00
Author: Ross Patterson (rpatterson) <me@rpatterson.net>
Commit: https://github.com/plone/plone.app.imaging/commit/fafdbff693ebb81d8db069e506fd6239e5d4fe09

fix(traverse): Image content w/ field_scale id

Adds a test that reproduces a bug in the edge case where a user creates a new content
instance of the `Image` type that happens to have a `context.id` that matches the same
`{field}_{scale}` format that is introspected by the image scale traverser to try and
reproduce a bug in that logic.

Also adds a fix for the bug.  I went with a conditional at the top of
`plone.app.imaging.traverse:ImageTraverser.publishTraverse` because I'm not sure of all
the implications of just calling `self.fallback(request, name)` first, otherwise I would
have gone with that as it seems like the correct behavior to me.  So LMK if someone who
knows better than I also thinks that's the right approach and I'll make the change.

Due to [an unrelated
bug](https://github.com/plone/Products.CMFPlone/issues/2200#issuecomment-843632261), I
wasn't able to get this test to reproduce the bug on the latest applicable Plone that
still supports Archetypes, version 5.2 under Python 2.7.  I found it easiest to develop
the test case and fix against the branch used in the latest `buildout.coredev` branch
where `ATContentTypes` was the default, namely `4.3`.  Once we're done making changes to
the test and fix I'll also forward port this commit to the `5.0-5.2` branches.

Files changed:
A src/plone/app/imaging/profiles/testing/metadata.xml
A src/plone/app/imaging/profiles/testing/types.xml
A src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml
A src/plone/app/imaging/tests/newsitemfolder.py
A src/plone/app/imaging/tests/tmp/.gitignore
M CHANGES.rst
M src/plone/app/imaging/testing.py
M src/plone/app/imaging/testing.zcml
M src/plone/app/imaging/tests/__init__.py
M src/plone/app/imaging/tests/base.py
M src/plone/app/imaging/tests/traversal.txt
M src/plone/app/imaging/traverse.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 63a791f..9af5e60 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix traversal handling of subobjects with ids that may also be image scales.\n+  [rpatterson]\n \n \n 2.1.1 (2019-10-09)\ndiff --git a/src/plone/app/imaging/profiles/testing/metadata.xml b/src/plone/app/imaging/profiles/testing/metadata.xml\nnew file mode 100644\nindex 0000000..9feb078\n--- /dev/null\n+++ b/src/plone/app/imaging/profiles/testing/metadata.xml\n@@ -0,0 +1,4 @@\n+<?xml version="1.0"?>\n+<metadata>\n+  <version>1.0</version>\n+</metadata>\ndiff --git a/src/plone/app/imaging/profiles/testing/types.xml b/src/plone/app/imaging/profiles/testing/types.xml\nnew file mode 100644\nindex 0000000..fe3c385\n--- /dev/null\n+++ b/src/plone/app/imaging/profiles/testing/types.xml\n@@ -0,0 +1,5 @@\n+<?xml version="1.0"?>\n+<object name="portal_types" meta_type="Plone Types Tool">\n+ <object name="News Item Folder"\n+    meta_type="Factory-based Type Information with dynamic views"/>\n+</object>\ndiff --git a/src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml b/src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml\nnew file mode 100644\nindex 0000000..9c0ae93\n--- /dev/null\n+++ b/src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml\n@@ -0,0 +1,46 @@\n+<?xml version="1.0"?>\n+<object name="News Item Folder"\n+   meta_type="Factory-based Type Information with dynamic views"\n+   i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+ <property name="title" i18n:translate="">News Item Folder</property>\n+ <property name="description"\n+     i18n:translate="">An announcement that will show up in news listings.</property>\n+ <property name="icon_expr"></property>\n+ <property name="content_meta_type">ATNewsItemFolder</property>\n+ <property name="product">plone.app.imaging.tests</property>\n+ <property name="factory">addATNewsItemFolder</property>\n+ <property name="immediate_view">newsitem_view</property>\n+ <property name="global_allow">True</property>\n+ <property name="filter_content_types">False</property>\n+ <property name="allowed_content_types"/>\n+ <property name="allow_discussion">False</property>\n+ <property name="default_view">newsitem_view</property>\n+ <property name="view_methods">\n+  <element value="newsitem_view"/>\n+ </property>\n+ <alias from="(Default)" to="(dynamic view)"/>\n+ <alias from="edit" to="atct_edit"/>\n+ <alias from="sharing" to="@@sharing"/>\n+ <alias from="view" to="(selected layout)"/>\n+ <action title="View" action_id="view" category="object" condition_expr=""\n+    url_expr="string:${object_url}" visible="True"\n+    i18n:attributes="title">\n+  <permission value="View"/>\n+ </action>\n+ <action title="Edit" action_id="edit" category="object" condition_expr="not:object/@@plone_lock_info/is_locked_for_current_user|python:True"\n+    url_expr="string:${object_url}/edit" visible="True"\n+    i18n:attributes="title">\n+  <permission value="Modify portal content"/>\n+ </action>\n+ <action title="History" action_id="history" category="object"\n+    condition_expr="" url_expr="string:${object_url}/atct_history"\n+    visible="False" i18n:attributes="title">\n+  <permission value="ATContentTypes: View history"/>\n+ </action>\n+ <action title="External Edit" action_id="external_edit" category="object"\n+    condition_expr="object/externalEditorEnabled"\n+    url_expr="string:${object_url}/external_edit" visible="False"\n+    i18n:attributes="title">\n+  <permission value="Modify portal content"/>\n+ </action>\n+</object>\ndiff --git a/src/plone/app/imaging/testing.py b/src/plone/app/imaging/testing.py\nindex 010a0e2..54f65bb 100644\n--- a/src/plone/app/imaging/testing.py\n+++ b/src/plone/app/imaging/testing.py\n@@ -11,8 +11,9 @@ class ImagingFixture(PloneTestCaseFixture):\n     def setUpZope(self, app, configurationContext):\n         super(ImagingFixture, self).setUpZope(app, configurationContext)\n         import plone.app.imaging\n-        self.loadZCML(package=plone.app.imaging)\n+        self.loadZCML(name=\'testing.zcml\', package=plone.app.imaging)\n         z2.installProduct(app, \'plone.app.imaging\')\n+        z2.installProduct(app, \'plone.app.imaging.tests\')\n \n     def setUpPloneSite(self, portal):\n         super(ImagingFixture, self).setUpPloneSite(portal)\ndiff --git a/src/plone/app/imaging/testing.zcml b/src/plone/app/imaging/testing.zcml\nindex 5e7def0..f7c6036 100644\n--- a/src/plone/app/imaging/testing.zcml\n+++ b/src/plone/app/imaging/testing.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     i18n_domain="plone.app.imaging">\n \n   <include package="plone.app.imaging" />\n@@ -8,4 +10,14 @@\n   <include zcml:condition="installed plone.app.blob"\n       package="plone.app.blob.tests" file="testing.zcml" />\n \n+  <five:registerPackage package=".tests" initialize=".tests.initialize" />\n+\n+  <genericsetup:registerProfile\n+    name="testing"\n+    title="plone.app.imaging.testing"\n+    description="Additional set up and configuration for testing images"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    provides="Products.GenericSetup.interfaces.EXTENSION"\n+    />\n+\n </configure>\ndiff --git a/src/plone/app/imaging/tests/__init__.py b/src/plone/app/imaging/tests/__init__.py\nindex e24f9f2..8729264 100644\n--- a/src/plone/app/imaging/tests/__init__.py\n+++ b/src/plone/app/imaging/tests/__init__.py\n@@ -1,2 +1,36 @@\n # -*- coding: utf-8 -*-\n-# non-empty init file to turn this directory into a module...\n+"""\n+Tests for Plone\'s imaging support.\n+"""\n+\n+from Products.CMFCore.utils import ContentInit\n+\n+from . import newsitemfolder  # noqa\n+\n+PROJECTNAME = "plone.app.imaging.tests"\n+\n+permissions = {\n+    "News Item Folder": "plone.app.imaging.tests: Add News Item Folder",\n+}\n+\n+\n+# Copied from Products.ATContentTypes\n+def initialize(context):\n+    from Products.Archetypes.atapi import process_types\n+    from Products.Archetypes.atapi import listTypes\n+\n+    listOfTypes = listTypes(PROJECTNAME)\n+\n+    content_types, constructors, ftis = process_types(\n+        listOfTypes,\n+        PROJECTNAME)\n+\n+    allTypes = zip(content_types, constructors)\n+    for atype, constructor in allTypes:\n+        kind = "%s: %s" % (PROJECTNAME, atype.archetype_name)\n+        ContentInit(\n+            kind,\n+            content_types=(atype,),\n+            permission=permissions[atype.portal_type],\n+            extra_constructors=(constructor,),\n+            ).initialize(context)\ndiff --git a/src/plone/app/imaging/tests/base.py b/src/plone/app/imaging/tests/base.py\nindex da1347f..852027f 100644\n--- a/src/plone/app/imaging/tests/base.py\n+++ b/src/plone/app/imaging/tests/base.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+"""\n+Common, internal, `plone.app.imaging` testing support.\n+"""\n+\n from os.path import dirname\n from os.path import join\n from plone.app.imaging import testing\n@@ -11,6 +15,8 @@\n from six import StringIO\n from zope.component import queryUtility\n \n+TESTS_PATH = dirname(__file__)\n+\n \n def getSettings():\n     registry = queryUtility(IRegistry)\ndiff --git a/src/plone/app/imaging/tests/newsitemfolder.py b/src/plone/app/imaging/tests/newsitemfolder.py\nnew file mode 100644\nindex 0000000..7a4ba93\n--- /dev/null\n+++ b/src/plone/app/imaging/tests/newsitemfolder.py\n@@ -0,0 +1,33 @@\n+"""\n+A folderish content type with an image field for testing such edge cases.\n+"""\n+\n+from Products.ATContentTypes.content import schemata\n+from Products.ATContentTypes.content import base\n+from Products.ATContentTypes.content import folder\n+from Products.ATContentTypes.content import newsitem\n+\n+ATNewsItemFolderSchema = (\n+    folder.ATBTreeFolderSchema.copy() + newsitem.ATNewsItemSchema.copy()\n+)\n+\n+schemata.finalizeATCTSchema(ATNewsItemFolderSchema)\n+\n+\n+class ATNewsItemFolder(folder.ATBTreeFolder, newsitem.ATNewsItem):\n+    """\n+    A folderish content type with an image field for testing such edge cases.\n+    """\n+\n+    schema = ATNewsItemFolderSchema\n+\n+    portal_type = \'News Item Folder\'\n+    archetype_name = \'News Item Folder\'\n+    _atct_newTypeFor = {\n+        \'portal_type\': \'CMF News Item Folder\',\n+        \'meta_type\': \'News Item Folder\',\n+    }\n+    assocFileExt = ()\n+\n+\n+base.registerATCT(ATNewsItemFolder, "plone.app.imaging.tests")\ndiff --git a/src/plone/app/imaging/tests/tmp/.gitignore b/src/plone/app/imaging/tests/tmp/.gitignore\nnew file mode 100644\nindex 0000000..a68d087\n--- /dev/null\n+++ b/src/plone/app/imaging/tests/tmp/.gitignore\n@@ -0,0 +1,2 @@\n+/*\n+!/.gitignore\ndiff --git a/src/plone/app/imaging/tests/traversal.txt b/src/plone/app/imaging/tests/traversal.txt\nindex 58ae326..bab2121 100644\n--- a/src/plone/app/imaging/tests/traversal.txt\n+++ b/src/plone/app/imaging/tests/traversal.txt\n@@ -62,3 +62,48 @@ expression:\n \n   >>> bool(eval_expression(\'exists:portal/foo/image_thumb\'))\n   True\n+\n+Content can be added with ids that correspond to field names and scales:\n+\n+  >>> import os\n+  >>> import shutil\n+  >>> from plone.app.imaging.tests import base\n+  >>> test_image_scale_name = os.path.join(\n+  ...     base.TESTS_PATH,\n+  ...     "tmp",\n+  ...     "image_thumb.jpg",\n+  ... )\n+  >>> shutil.copyfile(\n+  ...     os.path.join(base.TESTS_PATH, "image.jpg"),\n+  ...     test_image_scale_name,\n+  ... )\n+\n+  >>> import __builtin__\n+  >>> portal.portal_setup.runAllImportStepsFromProfile("plone.app.imaging:testing")\n+  {...types: \'News Item Folder\'...}\n+  >>> with __builtin__.open(test_image_scale_name) as test_image_scale_name_opened:\n+  ...     portal.invokeFactory(\n+  ...         "News Item Folder",\n+  ...         id="bar-folder",\n+  ...         title="Bar Folder",\n+  ...         image=test_image_scale_name_opened,\n+  ...     )\n+  \'bar-folder\'\n+  >>> commit()\n+\n+  >>> browser.handleErrors = False\n+  >>> browser.open("http://nohost/plone/bar-folder/")\n+  >>> browser.getLink(url="createObject?type_name=Image").click()\n+  >>> with __builtin__.open(test_image_scale_name) as test_image_scale_name_opened:\n+  ...     browser.getControl(name="id").value = "image_thumb"\n+  ...     browser.getControl(name="image_file").add_file(\n+  ...         test_image_scale_name_opened, "image/jpg", "image_thumb.jpg")\n+  ...     browser.getControl("Save").click()\n+  >>> browser.url\n+  \'http://nohost/plone/bar-folder/image_thumb/view\'\n+  >>> print(browser.contents)\n+  <!DOCTYPE html>\n+  <html...\n+  >>> browser.open("http://nohost/plone/bar-folder/image_thumb")\n+  >>> browser.contents\n+  \'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF...\ndiff --git a/src/plone/app/imaging/traverse.py b/src/plone/app/imaging/traverse.py\nindex 8fee683..f463be2 100644\n--- a/src/plone/app/imaging/traverse.py\n+++ b/src/plone/app/imaging/traverse.py\n@@ -1,18 +1,22 @@\n # -*- coding: utf-8 -*-\n from logging import exception\n+\n from zope.component import adapts\n from zope.interface import implementer\n+from zope.globalrequest import getRequest\n+from zope.interface import alsoProvides\n from zope.publisher.interfaces import IRequest\n-from Products.Archetypes.interfaces import IImageField\n-from Products.Archetypes.Field import HAS_PIL\n+\n from ZODB.POSException import ConflictError\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n+from OFS import interfaces as ofs_ifaces\n+\n+from Products.Archetypes.interfaces import IImageField\n+from Products.Archetypes.Field import HAS_PIL\n from plone.app.imaging.interfaces import IBaseObject\n from plone.app.imaging.interfaces import IImageScaleHandler\n from plone.app.imaging.scale import ImageScale\n from plone.protect.interfaces import IDisableCSRFProtection\n-from zope.interface import alsoProvides\n-from zope.globalrequest import getRequest\n \n \n import six\n@@ -26,6 +30,12 @@ def fallback(self, request, name):\n         return super(ImageTraverser, self).publishTraverse(request, name)\n \n     def publishTraverse(self, request, name):\n+        if (\n+                ofs_ifaces.IObjectManager.providedBy(self.context)\n+                and name in self.context.objectIds()\n+        ):\n+            # The name is for an actual subobject of this folderish context.\n+            return self.fallback(request, name)\n         schema = self.context.Schema()\n         if \'_\' in name:\n             fieldname, scale = name.split(\'_\', 1)\n'

Repository: plone.app.imaging


Branch: refs/heads/master
Date: 2021-06-12T12:54:39+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.app.imaging/commit/6d08a0579f6b5e77ceca21a362dc18b8f1790e46

Merge pull request #42 from plone/fix/traverse-subobject-scale-name-v2.1

fix(traverse): Image content w/ field_scale id

Files changed:
A src/plone/app/imaging/profiles/testing/metadata.xml
A src/plone/app/imaging/profiles/testing/types.xml
A src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml
A src/plone/app/imaging/tests/newsitemfolder.py
A src/plone/app/imaging/tests/tmp/.gitignore
M CHANGES.rst
M src/plone/app/imaging/testing.py
M src/plone/app/imaging/testing.zcml
M src/plone/app/imaging/tests/__init__.py
M src/plone/app/imaging/tests/base.py
M src/plone/app/imaging/tests/traversal.txt
M src/plone/app/imaging/traverse.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 63a791f..9af5e60 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -14,7 +14,8 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix traversal handling of subobjects with ids that may also be image scales.\n+  [rpatterson]\n \n \n 2.1.1 (2019-10-09)\ndiff --git a/src/plone/app/imaging/profiles/testing/metadata.xml b/src/plone/app/imaging/profiles/testing/metadata.xml\nnew file mode 100644\nindex 0000000..9feb078\n--- /dev/null\n+++ b/src/plone/app/imaging/profiles/testing/metadata.xml\n@@ -0,0 +1,4 @@\n+<?xml version="1.0"?>\n+<metadata>\n+  <version>1.0</version>\n+</metadata>\ndiff --git a/src/plone/app/imaging/profiles/testing/types.xml b/src/plone/app/imaging/profiles/testing/types.xml\nnew file mode 100644\nindex 0000000..fe3c385\n--- /dev/null\n+++ b/src/plone/app/imaging/profiles/testing/types.xml\n@@ -0,0 +1,5 @@\n+<?xml version="1.0"?>\n+<object name="portal_types" meta_type="Plone Types Tool">\n+ <object name="News Item Folder"\n+    meta_type="Factory-based Type Information with dynamic views"/>\n+</object>\ndiff --git a/src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml b/src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml\nnew file mode 100644\nindex 0000000..9c0ae93\n--- /dev/null\n+++ b/src/plone/app/imaging/profiles/testing/types/News_Item_Folder.xml\n@@ -0,0 +1,46 @@\n+<?xml version="1.0"?>\n+<object name="News Item Folder"\n+   meta_type="Factory-based Type Information with dynamic views"\n+   i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">\n+ <property name="title" i18n:translate="">News Item Folder</property>\n+ <property name="description"\n+     i18n:translate="">An announcement that will show up in news listings.</property>\n+ <property name="icon_expr"></property>\n+ <property name="content_meta_type">ATNewsItemFolder</property>\n+ <property name="product">plone.app.imaging.tests</property>\n+ <property name="factory">addATNewsItemFolder</property>\n+ <property name="immediate_view">newsitem_view</property>\n+ <property name="global_allow">True</property>\n+ <property name="filter_content_types">False</property>\n+ <property name="allowed_content_types"/>\n+ <property name="allow_discussion">False</property>\n+ <property name="default_view">newsitem_view</property>\n+ <property name="view_methods">\n+  <element value="newsitem_view"/>\n+ </property>\n+ <alias from="(Default)" to="(dynamic view)"/>\n+ <alias from="edit" to="atct_edit"/>\n+ <alias from="sharing" to="@@sharing"/>\n+ <alias from="view" to="(selected layout)"/>\n+ <action title="View" action_id="view" category="object" condition_expr=""\n+    url_expr="string:${object_url}" visible="True"\n+    i18n:attributes="title">\n+  <permission value="View"/>\n+ </action>\n+ <action title="Edit" action_id="edit" category="object" condition_expr="not:object/@@plone_lock_info/is_locked_for_current_user|python:True"\n+    url_expr="string:${object_url}/edit" visible="True"\n+    i18n:attributes="title">\n+  <permission value="Modify portal content"/>\n+ </action>\n+ <action title="History" action_id="history" category="object"\n+    condition_expr="" url_expr="string:${object_url}/atct_history"\n+    visible="False" i18n:attributes="title">\n+  <permission value="ATContentTypes: View history"/>\n+ </action>\n+ <action title="External Edit" action_id="external_edit" category="object"\n+    condition_expr="object/externalEditorEnabled"\n+    url_expr="string:${object_url}/external_edit" visible="False"\n+    i18n:attributes="title">\n+  <permission value="Modify portal content"/>\n+ </action>\n+</object>\ndiff --git a/src/plone/app/imaging/testing.py b/src/plone/app/imaging/testing.py\nindex 010a0e2..54f65bb 100644\n--- a/src/plone/app/imaging/testing.py\n+++ b/src/plone/app/imaging/testing.py\n@@ -11,8 +11,9 @@ class ImagingFixture(PloneTestCaseFixture):\n     def setUpZope(self, app, configurationContext):\n         super(ImagingFixture, self).setUpZope(app, configurationContext)\n         import plone.app.imaging\n-        self.loadZCML(package=plone.app.imaging)\n+        self.loadZCML(name=\'testing.zcml\', package=plone.app.imaging)\n         z2.installProduct(app, \'plone.app.imaging\')\n+        z2.installProduct(app, \'plone.app.imaging.tests\')\n \n     def setUpPloneSite(self, portal):\n         super(ImagingFixture, self).setUpPloneSite(portal)\ndiff --git a/src/plone/app/imaging/testing.zcml b/src/plone/app/imaging/testing.zcml\nindex 5e7def0..f7c6036 100644\n--- a/src/plone/app/imaging/testing.zcml\n+++ b/src/plone/app/imaging/testing.zcml\n@@ -1,6 +1,8 @@\n <configure\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:zcml="http://namespaces.zope.org/zcml"\n+    xmlns:five="http://namespaces.zope.org/five"\n+    xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     i18n_domain="plone.app.imaging">\n \n   <include package="plone.app.imaging" />\n@@ -8,4 +10,14 @@\n   <include zcml:condition="installed plone.app.blob"\n       package="plone.app.blob.tests" file="testing.zcml" />\n \n+  <five:registerPackage package=".tests" initialize=".tests.initialize" />\n+\n+  <genericsetup:registerProfile\n+    name="testing"\n+    title="plone.app.imaging.testing"\n+    description="Additional set up and configuration for testing images"\n+    for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+    provides="Products.GenericSetup.interfaces.EXTENSION"\n+    />\n+\n </configure>\ndiff --git a/src/plone/app/imaging/tests/__init__.py b/src/plone/app/imaging/tests/__init__.py\nindex e24f9f2..8729264 100644\n--- a/src/plone/app/imaging/tests/__init__.py\n+++ b/src/plone/app/imaging/tests/__init__.py\n@@ -1,2 +1,36 @@\n # -*- coding: utf-8 -*-\n-# non-empty init file to turn this directory into a module...\n+"""\n+Tests for Plone\'s imaging support.\n+"""\n+\n+from Products.CMFCore.utils import ContentInit\n+\n+from . import newsitemfolder  # noqa\n+\n+PROJECTNAME = "plone.app.imaging.tests"\n+\n+permissions = {\n+    "News Item Folder": "plone.app.imaging.tests: Add News Item Folder",\n+}\n+\n+\n+# Copied from Products.ATContentTypes\n+def initialize(context):\n+    from Products.Archetypes.atapi import process_types\n+    from Products.Archetypes.atapi import listTypes\n+\n+    listOfTypes = listTypes(PROJECTNAME)\n+\n+    content_types, constructors, ftis = process_types(\n+        listOfTypes,\n+        PROJECTNAME)\n+\n+    allTypes = zip(content_types, constructors)\n+    for atype, constructor in allTypes:\n+        kind = "%s: %s" % (PROJECTNAME, atype.archetype_name)\n+        ContentInit(\n+            kind,\n+            content_types=(atype,),\n+            permission=permissions[atype.portal_type],\n+            extra_constructors=(constructor,),\n+            ).initialize(context)\ndiff --git a/src/plone/app/imaging/tests/base.py b/src/plone/app/imaging/tests/base.py\nindex da1347f..852027f 100644\n--- a/src/plone/app/imaging/tests/base.py\n+++ b/src/plone/app/imaging/tests/base.py\n@@ -1,4 +1,8 @@\n # -*- coding: utf-8 -*-\n+"""\n+Common, internal, `plone.app.imaging` testing support.\n+"""\n+\n from os.path import dirname\n from os.path import join\n from plone.app.imaging import testing\n@@ -11,6 +15,8 @@\n from six import StringIO\n from zope.component import queryUtility\n \n+TESTS_PATH = dirname(__file__)\n+\n \n def getSettings():\n     registry = queryUtility(IRegistry)\ndiff --git a/src/plone/app/imaging/tests/newsitemfolder.py b/src/plone/app/imaging/tests/newsitemfolder.py\nnew file mode 100644\nindex 0000000..7a4ba93\n--- /dev/null\n+++ b/src/plone/app/imaging/tests/newsitemfolder.py\n@@ -0,0 +1,33 @@\n+"""\n+A folderish content type with an image field for testing such edge cases.\n+"""\n+\n+from Products.ATContentTypes.content import schemata\n+from Products.ATContentTypes.content import base\n+from Products.ATContentTypes.content import folder\n+from Products.ATContentTypes.content import newsitem\n+\n+ATNewsItemFolderSchema = (\n+    folder.ATBTreeFolderSchema.copy() + newsitem.ATNewsItemSchema.copy()\n+)\n+\n+schemata.finalizeATCTSchema(ATNewsItemFolderSchema)\n+\n+\n+class ATNewsItemFolder(folder.ATBTreeFolder, newsitem.ATNewsItem):\n+    """\n+    A folderish content type with an image field for testing such edge cases.\n+    """\n+\n+    schema = ATNewsItemFolderSchema\n+\n+    portal_type = \'News Item Folder\'\n+    archetype_name = \'News Item Folder\'\n+    _atct_newTypeFor = {\n+        \'portal_type\': \'CMF News Item Folder\',\n+        \'meta_type\': \'News Item Folder\',\n+    }\n+    assocFileExt = ()\n+\n+\n+base.registerATCT(ATNewsItemFolder, "plone.app.imaging.tests")\ndiff --git a/src/plone/app/imaging/tests/tmp/.gitignore b/src/plone/app/imaging/tests/tmp/.gitignore\nnew file mode 100644\nindex 0000000..a68d087\n--- /dev/null\n+++ b/src/plone/app/imaging/tests/tmp/.gitignore\n@@ -0,0 +1,2 @@\n+/*\n+!/.gitignore\ndiff --git a/src/plone/app/imaging/tests/traversal.txt b/src/plone/app/imaging/tests/traversal.txt\nindex 58ae326..bab2121 100644\n--- a/src/plone/app/imaging/tests/traversal.txt\n+++ b/src/plone/app/imaging/tests/traversal.txt\n@@ -62,3 +62,48 @@ expression:\n \n   >>> bool(eval_expression(\'exists:portal/foo/image_thumb\'))\n   True\n+\n+Content can be added with ids that correspond to field names and scales:\n+\n+  >>> import os\n+  >>> import shutil\n+  >>> from plone.app.imaging.tests import base\n+  >>> test_image_scale_name = os.path.join(\n+  ...     base.TESTS_PATH,\n+  ...     "tmp",\n+  ...     "image_thumb.jpg",\n+  ... )\n+  >>> shutil.copyfile(\n+  ...     os.path.join(base.TESTS_PATH, "image.jpg"),\n+  ...     test_image_scale_name,\n+  ... )\n+\n+  >>> import __builtin__\n+  >>> portal.portal_setup.runAllImportStepsFromProfile("plone.app.imaging:testing")\n+  {...types: \'News Item Folder\'...}\n+  >>> with __builtin__.open(test_image_scale_name) as test_image_scale_name_opened:\n+  ...     portal.invokeFactory(\n+  ...         "News Item Folder",\n+  ...         id="bar-folder",\n+  ...         title="Bar Folder",\n+  ...         image=test_image_scale_name_opened,\n+  ...     )\n+  \'bar-folder\'\n+  >>> commit()\n+\n+  >>> browser.handleErrors = False\n+  >>> browser.open("http://nohost/plone/bar-folder/")\n+  >>> browser.getLink(url="createObject?type_name=Image").click()\n+  >>> with __builtin__.open(test_image_scale_name) as test_image_scale_name_opened:\n+  ...     browser.getControl(name="id").value = "image_thumb"\n+  ...     browser.getControl(name="image_file").add_file(\n+  ...         test_image_scale_name_opened, "image/jpg", "image_thumb.jpg")\n+  ...     browser.getControl("Save").click()\n+  >>> browser.url\n+  \'http://nohost/plone/bar-folder/image_thumb/view\'\n+  >>> print(browser.contents)\n+  <!DOCTYPE html>\n+  <html...\n+  >>> browser.open("http://nohost/plone/bar-folder/image_thumb")\n+  >>> browser.contents\n+  \'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF...\ndiff --git a/src/plone/app/imaging/traverse.py b/src/plone/app/imaging/traverse.py\nindex 8fee683..f463be2 100644\n--- a/src/plone/app/imaging/traverse.py\n+++ b/src/plone/app/imaging/traverse.py\n@@ -1,18 +1,22 @@\n # -*- coding: utf-8 -*-\n from logging import exception\n+\n from zope.component import adapts\n from zope.interface import implementer\n+from zope.globalrequest import getRequest\n+from zope.interface import alsoProvides\n from zope.publisher.interfaces import IRequest\n-from Products.Archetypes.interfaces import IImageField\n-from Products.Archetypes.Field import HAS_PIL\n+\n from ZODB.POSException import ConflictError\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n+from OFS import interfaces as ofs_ifaces\n+\n+from Products.Archetypes.interfaces import IImageField\n+from Products.Archetypes.Field import HAS_PIL\n from plone.app.imaging.interfaces import IBaseObject\n from plone.app.imaging.interfaces import IImageScaleHandler\n from plone.app.imaging.scale import ImageScale\n from plone.protect.interfaces import IDisableCSRFProtection\n-from zope.interface import alsoProvides\n-from zope.globalrequest import getRequest\n \n \n import six\n@@ -26,6 +30,12 @@ def fallback(self, request, name):\n         return super(ImageTraverser, self).publishTraverse(request, name)\n \n     def publishTraverse(self, request, name):\n+        if (\n+                ofs_ifaces.IObjectManager.providedBy(self.context)\n+                and name in self.context.objectIds()\n+        ):\n+            # The name is for an actual subobject of this folderish context.\n+            return self.fallback(request, name)\n         schema = self.context.Schema()\n         if \'_\' in name:\n             fieldname, scale = name.split(\'_\', 1)\n'

