Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-15T15:33:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/6709e3a0630ea21837f28b5581255e154952183f

rip out plone.app.discussion

Files changed:
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/factory.py
M Products/CMFPlone/profiles/default/types.xml
M Products/CMFPlone/profiles/default/workflows.xml
M Products/CMFPlone/profiles/dependencies/metadata.xml
M Products/CMFPlone/tests/testMigrationTool.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testSecurity.py
M setup.py
D Products/CMFPlone/profiles/default/types/Discussion_Item.xml

b'diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 1b45f330a1..723d71e8b9 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -10,7 +10,6 @@\n from BTrees.Length import Length\n from DateTime import DateTime\n from OFS.interfaces import IOrderedContainer\n-from plone.app.discussion.interfaces import DISCUSSION_ANNOTATION_KEY\n from plone.base.interfaces import INonStructuralFolder\n from plone.base.interfaces import IPloneCatalogTool\n from plone.base.utils import base_hasattr\n@@ -46,6 +45,13 @@\n \n \n logger = logging.getLogger("Plone")\n+try:\n+    from plone.app.discussion.interfaces import DISCUSSION_ANNOTATION_KEY\n+except ImportError:  # pragma: no cover\n+    DISCUSSION_ANNOTATION_KEY = None\n+\n+\n+logger = logging.getLogger(\'Plone\')\n \n _marker = object()\n \n@@ -455,9 +461,13 @@ def indexObject(obj, path):\n             ):\n                 try:\n                     self.reindexObject(obj, idxs=idxs)\n-                    # index conversions from plone.app.discussion\n+                    # index conversations from plone.app.discussion\n                     annotions = IAnnotations(obj)\n-                    if DISCUSSION_ANNOTATION_KEY in annotions:\n+                    if (\n+                        DISCUSSION_ANNOTATION_KEY is not None\n+                        and DISCUSSION_ANNOTATION_KEY in annotions\n+\n+                    ):\n                         conversation = annotions[DISCUSSION_ANNOTATION_KEY]\n                         conversation = conversation.__of__(obj)\n                         for comment in conversation.getComments():\ndiff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py\nindex e536921af7..6473f9c4f5 100644\n--- a/Products/CMFPlone/factory.py\n+++ b/Products/CMFPlone/factory.py\n@@ -62,7 +62,6 @@ def getNonInstallableProducts(self):\n             "borg.localrole",\n             "plone.app.caching",\n             "plone.app.dexterity",\n-            "plone.app.discussion",\n             "plone.app.event",\n             "plone.app.intid",\n             "plone.app.linkintegrity",\n@@ -106,7 +105,6 @@ def getNonInstallableProfiles(self):\n             "plone.protect:default",\n             "plone.app.contenttypes:default",\n             "plone.app.dexterity:default",\n-            "plone.app.discussion:default",\n             "plone.app.event:default",\n             "plone.app.linkintegrity:default",\n             "plone.app.registry:default",\ndiff --git a/Products/CMFPlone/profiles/default/types.xml b/Products/CMFPlone/profiles/default/types.xml\nindex ea78dfcba6..55bf830c30 100644\n--- a/Products/CMFPlone/profiles/default/types.xml\n+++ b/Products/CMFPlone/profiles/default/types.xml\n@@ -3,9 +3,6 @@\n         name="portal_types"\n >\n   <property name="title">Controls the available content types in your portal</property>\n-  <object meta_type="Factory-based Type Information"\n-          name="Discussion Item"\n-  />\n   <object meta_type="Factory-based Type Information"\n           name="TempFolder"\n   />\ndiff --git a/Products/CMFPlone/profiles/default/types/Discussion_Item.xml b/Products/CMFPlone/profiles/default/types/Discussion_Item.xml\ndeleted file mode 100644\nindex d3c321ac3e..0000000000\n--- a/Products/CMFPlone/profiles/default/types/Discussion_Item.xml\n+++ /dev/null\n@@ -1,49 +0,0 @@\n-<?xml version="1.0" encoding="utf-8"?>\n-<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-        meta_type="Factory-based Type Information"\n-        name="Discussion Item"\n-        i18n:domain="plone"\n->\n-  <property name="title"\n-            i18n:translate=""\n-  />\n-  <property name="description"\n-            i18n:translate=""\n-  >Discussion Items are documents which reply to other content.\n-  They should *not* be addable through the standard \'folder_factories\' interface.</property>\n-  <property name="icon_expr">string:${portal_url}/discussionitem_icon.png</property>\n-  <property name="content_meta_type">Discussion Item</property>\n-  <property name="product" />\n-  <property name="factory" />\n-  <property name="immediate_view" />\n-  <property name="global_allow">True</property>\n-  <property name="filter_content_types">True</property>\n-  <property name="allowed_content_types" />\n-  <property name="allow_discussion">False</property>\n-  <alias from="(Default)"\n-         to="discussionitem_view"\n-  />\n-  <alias from="view"\n-         to="discussionitem_view"\n-  />\n-  <action action_id="view"\n-          category="object"\n-          condition_expr=""\n-          title="View"\n-          url_expr="string:${object_url}/discussionitem_view"\n-          visible="True"\n-          i18n:attributes="title"\n-  >\n-    <permission value="View" />\n-  </action>\n-  <action action_id="external_edit"\n-          category="object"\n-          condition_expr=""\n-          title="External Edit"\n-          url_expr="string:$object_url/external_edit"\n-          visible="False"\n-          i18n:attributes="title"\n-  >\n-    <permission value="Modify portal content" />\n-  </action>\n-</object>\ndiff --git a/Products/CMFPlone/profiles/default/workflows.xml b/Products/CMFPlone/profiles/default/workflows.xml\nindex d9b00d3aae..e1efd4185f 100644\n--- a/Products/CMFPlone/profiles/default/workflows.xml\n+++ b/Products/CMFPlone/profiles/default/workflows.xml\n@@ -38,7 +38,6 @@\n     <type type_id="ATSimpleIntCriterion" />\n     <type type_id="ATSimpleStringCriterion" />\n     <type type_id="ATSortCriterion" />\n-    <type type_id="Discussion Item" />\n     <type type_id="File" />\n     <type type_id="Image" />\n     <type type_id="Plone Site" />\ndiff --git a/Products/CMFPlone/profiles/dependencies/metadata.xml b/Products/CMFPlone/profiles/dependencies/metadata.xml\nindex 191b32119e..a00e76d0ac 100644\n--- a/Products/CMFPlone/profiles/dependencies/metadata.xml\n+++ b/Products/CMFPlone/profiles/dependencies/metadata.xml\n@@ -6,7 +6,6 @@\n     <dependency>profile-Products.PortalTransforms:PortalTransforms</dependency>\n     <dependency>profile-Products.CMFEditions:CMFEditions</dependency>\n     <dependency>profile-Products.PlonePAS:PlonePAS</dependency>\n-    <dependency>profile-plone.app.discussion:default</dependency>\n     <dependency>profile-plone.app.linkintegrity:default</dependency>\n     <dependency>profile-plone.app.registry:default</dependency>\n     <dependency>profile-plone.app.theming:default</dependency>\ndiff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py\nindex 342a0856d5..142be2c5ef 100644\n--- a/Products/CMFPlone/tests/testMigrationTool.py\n+++ b/Products/CMFPlone/tests/testMigrationTool.py\n@@ -177,14 +177,13 @@ def test_upgrade_all(self):\n \n         # real ones:\n         cmfeditions = Addon(profile_id="Products.CMFEditions:CMFEditions")\n-        discussion = Addon(profile_id="plone.app.discussion:default")\n         # real one with failing check_module:\n         dexterity = Addon(\n             profile_id="plone.app.dexterity:default", check_module="no.such.module"\n         )\n         # non-existing one:\n         foo = Addon(profile_id="foo")\n-        addonlist = AddonList([cmfeditions, discussion, dexterity, foo])\n+        addonlist = AddonList([cmfeditions, dexterity, foo])\n         # Calling it should give no errors.\n         addonlist.upgrade_all(self.portal)\n \n@@ -196,9 +195,6 @@ def test_upgrade_all(self):\n         # Now mess with the profile versions.\n         setup.setLastVersionForProfile(cmfeditions.profile_id, "2.0")\n         setup.setLastVersionForProfile(dexterity.profile_id, "0.1")\n-        # \'unknown\' needs special handling, otherwise the version will\n-        # become a tuple (\'unknown\',):\n-        setup._profile_upgrade_versions[discussion.profile_id] = "unknown"\n \n         # Run the upgrade again.\n         addonlist.upgrade_all(self.portal)\n@@ -228,28 +224,23 @@ def test_plone_addonlist_upgrade_all(self):\n         # Several addons did not get fully upgraded in the past, which\n         # is why this list was created.\n         cmfeditions_id = "Products.CMFEditions:CMFEditions"\n-        discussion_id = "plone.app.discussion:default"\n         querystring_id = "plone.app.querystring:default"\n         # Note the current versions.\n         setup = getToolByName(self.portal, "portal_setup")\n         getversion = setup.getLastVersionForProfile\n         cmfeditions_version = getversion(cmfeditions_id)\n-        discussion_version = getversion(discussion_id)\n         querystring_version = getversion(querystring_id)\n         # Check that they are not unknown\n         self.assertNotEqual(cmfeditions_version, "unknown")\n-        self.assertNotEqual(discussion_version, "unknown")\n         self.assertNotEqual(querystring_version, "unknown")\n         # So let\'s mess with some profile versions.  We get some older\n         # versions that really exist.\n         setversion = setup.setLastVersionForProfile\n         setversion(cmfeditions_id, "2.0")\n-        setversion(discussion_id, "100")\n         setversion(querystring_id, "7")\n         # Check that it worked, that the profile versions really are\n         # different.\n         self.assertNotEqual(cmfeditions_version, getversion(cmfeditions_id))\n-        self.assertNotEqual(discussion_version, getversion(discussion_id))\n         self.assertNotEqual(querystring_version, getversion(querystring_id))\n \n         # Run the upgrade.\n@@ -258,5 +249,4 @@ def test_plone_addonlist_upgrade_all(self):\n         # Check that it worked, that the profiles are now at their\n         # original versions.\n         self.assertEqual(cmfeditions_version, getversion(cmfeditions_id))\n-        self.assertEqual(discussion_version, getversion(discussion_id))\n         self.assertEqual(querystring_version, getversion(querystring_id))\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex ea0e56fc1e..208e60c3eb 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -608,13 +608,6 @@ def testMemberHasViewGroupsPermission(self):\n         ][0]\n         self.assertTrue(member_has_permission["selected"])\n \n-    def testDiscussionItemWorkflow(self):\n-        # By default the discussion item has the comment_one_state_workflow\n-        self.assertEqual(\n-            self.workflow.getChainForPortalType("Discussion Item"),\n-            ("comment_one_state_workflow",),\n-        )\n-\n     def testFolderHasFolderListingView(self):\n         # Folder type should allow \'folder_listing\'\n         self.assertTrue("listing_view" in self.types.Folder.view_methods)\ndiff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py\nindex 2a895be962..379fca60f3 100644\n--- a/Products/CMFPlone/tests/testSecurity.py\n+++ b/Products/CMFPlone/tests/testSecurity.py\n@@ -71,7 +71,7 @@ def test_gtbn_funcglobals(self):\n             self.fail("getToolByName should block access to non CMF tools")\n \n     def test_widget_traversal_1(self):\n-        res = self.publish("/plone/@@discussion-settings/++widget++moderator_email")\n+        res = self.publish("/plone/@@mail-controlpanel/++widget++email_from_address")\n         self.assertEqual(302, res.status)\n         self.assertTrue(\n             res.headers["location"].startswith(\n@@ -81,8 +81,7 @@ def test_widget_traversal_1(self):\n \n     def test_widget_traversal_2(self):\n         res = self.publish(\n-            "/plone/@@discussion-settings/++widget++captcha/terms/field/interface/setTaggedValue?tag=cake&value=lovely"\n-        )\n+            "/plone/@@mail-controlpanel/++widget++email_from_address/terms/field/interface/setTaggedValue?tag=cake&value=lovely")\n         self.assertEqual(404, res.status)\n         # self.assertTrue(res.headers[\'location\'].startswith(\n         #     \'http://nohost/plone/acl_users/credentials_cookie_auth/require_login\'))\ndiff --git a/setup.py b/setup.py\nindex 23eda3836d..ac11203d1d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -61,7 +61,6 @@\n         "plone.app.contenttypes",\n         "plone.app.customerize",\n         "plone.app.dexterity",\n-        "plone.app.discussion",\n         "plone.app.i18n",\n         "plone.app.layout >= 2.5.15",\n         "plone.app.linkintegrity >=1.0.3",\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-15T15:33:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/017c8d190b1b7472fce4122ca293443818ed5b8a

do not enable behavior plone.allowdiscussion

Files changed:
M Products/CMFPlone/profiles/default/types/Plone_Site.xml

b'diff --git a/Products/CMFPlone/profiles/default/types/Plone_Site.xml b/Products/CMFPlone/profiles/default/types/Plone_Site.xml\nindex f6b324d8e1..b7cdf1c072 100644\n--- a/Products/CMFPlone/profiles/default/types/Plone_Site.xml\n+++ b/Products/CMFPlone/profiles/default/types/Plone_Site.xml\n@@ -38,7 +38,6 @@\n     <element value="plone.richtext" />\n     <element value="plone.relateditems" />\n     <element value="plone.locking" />\n-    <element value="plone.allowdiscussion" />\n     <element value="plone.excludefromnavigation" />\n     <element value="plone.tableofcontents" />\n   </property>\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-15T15:33:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/c937837e483c5f45b07c850664c31432ebb878e8

sort permissions in test

Files changed:
M Products/CMFPlone/tests/testSiteAdminRole.py

b'diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py\nindex 836c9c2992..fb7069916f 100644\n--- a/Products/CMFPlone/tests/testSiteAdminRole.py\n+++ b/Products/CMFPlone/tests/testSiteAdminRole.py\n@@ -18,8 +18,8 @@ def testExpectedPermissions(self):\n             "Access contents information": 1,\n             "Access inactive portal content": 1,\n             "Add Accelerated HTTP Cache Managers": 0,\n-            "Add BTreeFolder2s": 0,\n             "Add Browser Id Manager": 0,\n+            "Add BTreeFolder2s": 0,\n             "Add CMF Action Icons Tools": 0,\n             "Add CMF Caching Policy Managers": 0,\n             "Add CMF Calendar Tools": 0,\n@@ -52,15 +52,21 @@ def testExpectedPermissions(self):\n             "Add Placeful Workflow Tools": 0,\n             "Add Plone Language Tools": 0,\n             "Add Plone Tools": 0,\n+            "Add plone.app.customerizes": 0,\n             "Add PlonePAS Tools": 0,\n             "Add Pluggable Index": 0,\n             "Add Plugin Registrys": 0,\n+            "Add portal content": 1,\n+            "Add portal events": 1,\n+            "Add portal folders": 1,\n+            "Add portal member": 1,\n             "Add PortalTransforms Tools": 0,\n             "Add Python Scripts": 0,\n             "Add RAM Cache Managers": 0,\n-            "Add ReStructuredText Documents": 0,\n             "Add Repositories": 0,\n             "Add ResourceRegistries Tools": 0,\n+            "Add ReStructuredText Documents": 0,\n+            "Add secure MailHost objects": 0,\n             "Add Session Data Manager": 0,\n             "Add Site Roots": 0,\n             "Add Temporary Folder": 0,\n@@ -72,36 +78,30 @@ def testExpectedPermissions(self):\n             "Add Workflow Policy": 0,\n             "Add ZCatalogs": 0,\n             "Add ZODB Mount Points": 0,\n-            "Add plone.app.customerizes": 0,\n-            "Add portal content": 1,\n-            "Add portal events": 1,\n-            "Add portal folders": 1,\n-            "Add portal member": 1,\n-            "Add secure MailHost objects": 0,\n             "Allow sendto": 1,\n-            "CMFEditions: Access previous versions": 1,\n-            "CMFEditions: Apply version control": 1,\n-            "CMFEditions: Checkout to location": 1,\n-            "CMFEditions: Manage versioning policies": 1,\n-            "CMFEditions: Purge version": 1,\n-            "CMFEditions: Revert to previous versions": 1,\n-            "CMFEditions: Save new version": 1,\n+            "Change bindings": 0,\n             "Change Browser Id Manager": 0,\n+            "Change cache managers": 0,\n+            "Change cache settings": 0,\n+            "Change configuration": 0,\n+            "Change Database Methods": 0,\n             "Change DTML Documents": 0,\n             "Change DTML Methods": 0,\n-            "Change Database Methods": 0,\n             "Change External Methods": 0,\n             "Change Images and Files": 0,\n-            "Change Page Templates": 0,\n-            "Change Python Scripts": 0,\n-            "Change Session Data Manager": 0,\n-            "Change bindings": 0,\n-            "Change cache managers": 0,\n-            "Change cache settings": 0,\n-            "Change configuration": 0,\n             "Change local roles": 1,\n+            "Change Page Templates": 0,\n             "Change permissions": 0,\n             "Change proxy roles": 0,\n+            "Change Python Scripts": 0,\n+            "Change Session Data Manager": 0,\n+            "CMFEditions: Access previous versions": 1,\n+            "CMFEditions: Apply version control": 1,\n+            "CMFEditions: Checkout to location": 1,\n+            "CMFEditions: Manage versioning policies": 1,\n+            "CMFEditions: Purge version": 1,\n+            "CMFEditions: Revert to previous versions": 1,\n+            "CMFEditions: Save new version": 1,\n             "Content rules: Manage rules": 1,\n             "Copy or Move": 1,\n             "Create Transient Objects": 0,\n@@ -109,8 +109,8 @@ def testExpectedPermissions(self):\n             "Delete Groups": 0,\n             "Delete objects": 1,\n             "Edit ReStructuredText": 0,\n-            "FTP access": 1,\n             "Five: Add TTW View Template": 0,\n+            "FTP access": 1,\n             "Import/Export objects": 0,\n             "List folder contents": 1,\n             "List portal members": 1,\n@@ -121,29 +121,32 @@ def testExpectedPermissions(self):\n             "Manage Access Rules": 0,\n             "Manage Five local sites": 0,\n             "Manage Groups": 0,\n+            "Manage portal": 0,\n+            "Manage properties": 1,\n+            "Manage repositories": 0,\n             "Manage Site": 0,\n             "Manage Transient Object Container": 0,\n+            "Manage users": 0,\n             "Manage Vocabulary": 0,\n             "Manage WebDAV Locks": 0,\n             "Manage ZCatalog Entries": 0,\n             "Manage ZCatalogIndex Entries": 0,\n-            "Manage portal": 0,\n-            "Manage properties": 1,\n-            "Manage repositories": 0,\n-            "Manage users": 0,\n             "Modify Cookie Crumblers": 0,\n             "Modify portal content": 1,\n             "Modify view template": 1,\n             "Open/Close Database Connections": 0,\n             "Plone Site Setup: Overview": 1,\n+            "plone.portlet.collection: Add collection portlet": 1,\n+            "plone.portlet.static: Add static portlet": 1,\n             "Portlets: Manage own portlets": 1,\n             "Portlets: Manage portlets": 1,\n             "Portlets: View dashboard": 1,\n             "Query Vocabulary": 0,\n+            "Reply to item": 0,\n             "Request review": 1,\n             "Review portal content": 1,\n-            "Search ZCatalog": 1,\n             "Search for principals": 0,\n+            "Search ZCatalog": 1,\n             "Set Group Ownership": 0,\n             "Set own password": 1,\n             "Set own properties": 1,\n@@ -156,15 +159,12 @@ def testExpectedPermissions(self):\n             "Undo changes": 1,\n             "Use mailhost services": 1,\n             "Use version control": 1,\n-            "Reply to item": 0,\n-            "View": 1,\n             "View Groups": 1,\n             "View management screens": 0,\n+            "View": 1,\n+            "WebDAV access": 1,\n             "WebDAV Lock items": 1,\n             "WebDAV Unlock items": 1,\n-            "WebDAV access": 1,\n-            "plone.portlet.collection: Add collection portlet": 1,\n-            "plone.portlet.static: Add static portlet": 1,\n         }\n         try:\n             import plone.app.iterate\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-15T15:33:14+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/b51b016c3d45cd90026ba1805491f0c96f85c21f

move check for 'Reply to item' permission to plone.app.discussion.

Files changed:
M Products/CMFPlone/tests/testSiteAdminRole.py

b'diff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py\nindex fb7069916f..ca0d7013b7 100644\n--- a/Products/CMFPlone/tests/testSiteAdminRole.py\n+++ b/Products/CMFPlone/tests/testSiteAdminRole.py\n@@ -142,7 +142,6 @@ def testExpectedPermissions(self):\n             "Portlets: Manage portlets": 1,\n             "Portlets: View dashboard": 1,\n             "Query Vocabulary": 0,\n-            "Reply to item": 0,\n             "Request review": 1,\n             "Review portal content": 1,\n             "Search for principals": 0,\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-15T15:47:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/d39797361dcefe681d3856fb6e7a5dbbf273343d

switch test to use plone.app.event instead of plone.app.discusision as crash-test dummy

Files changed:
M Products/CMFPlone/tests/testMigrationTool.py

b'diff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py\nindex 142be2c5ef..d241051379 100644\n--- a/Products/CMFPlone/tests/testMigrationTool.py\n+++ b/Products/CMFPlone/tests/testMigrationTool.py\n@@ -177,13 +177,14 @@ def test_upgrade_all(self):\n \n         # real ones:\n         cmfeditions = Addon(profile_id="Products.CMFEditions:CMFEditions")\n+        pae = Addon(profile_id="plone.app.event:default")\n         # real one with failing check_module:\n         dexterity = Addon(\n             profile_id="plone.app.dexterity:default", check_module="no.such.module"\n         )\n         # non-existing one:\n         foo = Addon(profile_id="foo")\n-        addonlist = AddonList([cmfeditions, dexterity, foo])\n+        addonlist = AddonList([cmfeditions, pae, dexterity, foo])\n         # Calling it should give no errors.\n         addonlist.upgrade_all(self.portal)\n \n@@ -195,6 +196,9 @@ def test_upgrade_all(self):\n         # Now mess with the profile versions.\n         setup.setLastVersionForProfile(cmfeditions.profile_id, "2.0")\n         setup.setLastVersionForProfile(dexterity.profile_id, "0.1")\n+        # \'unknown\' needs special handling, otherwise the version will\n+        # become a tuple (\'unknown\',):\n+        setup._profile_upgrade_versions[pae.profile_id] = "unknown"\n \n         # Run the upgrade again.\n         addonlist.upgrade_all(self.portal)\n@@ -204,10 +208,10 @@ def test_upgrade_all(self):\n         self.assertEqual(\n             setup.getLastVersionForProfile(cmfeditions.profile_id), cmfeditions_version\n         )\n-        # We had set discussion to unknown, so it will not have been\n+        # We had set pae to unknown, so it will not have been\n         # upgraded:\n         self.assertEqual(\n-            setup.getLastVersionForProfile(discussion.profile_id), "unknown"\n+            setup.getLastVersionForProfile(pae.profile_id), "unknown"\n         )\n         # We had given dexterity a failing check_module, so it will\n         # not have been upgraded:\n@@ -224,23 +228,28 @@ def test_plone_addonlist_upgrade_all(self):\n         # Several addons did not get fully upgraded in the past, which\n         # is why this list was created.\n         cmfeditions_id = "Products.CMFEditions:CMFEditions"\n+        pae_id = "plone.app.event:default"\n         querystring_id = "plone.app.querystring:default"\n         # Note the current versions.\n         setup = getToolByName(self.portal, "portal_setup")\n         getversion = setup.getLastVersionForProfile\n         cmfeditions_version = getversion(cmfeditions_id)\n+        pae_version = getversion(pae_id)\n         querystring_version = getversion(querystring_id)\n         # Check that they are not unknown\n         self.assertNotEqual(cmfeditions_version, "unknown")\n+        self.assertNotEqual(pae_version, "unknown")\n         self.assertNotEqual(querystring_version, "unknown")\n         # So let\'s mess with some profile versions.  We get some older\n         # versions that really exist.\n         setversion = setup.setLastVersionForProfile\n         setversion(cmfeditions_id, "2.0")\n+        setversion(pae_id, "100")\n         setversion(querystring_id, "7")\n         # Check that it worked, that the profile versions really are\n         # different.\n         self.assertNotEqual(cmfeditions_version, getversion(cmfeditions_id))\n+        self.assertNotEqual(pae_version, getversion(pae_id))\n         self.assertNotEqual(querystring_version, getversion(querystring_id))\n \n         # Run the upgrade.\n@@ -249,4 +258,5 @@ def test_plone_addonlist_upgrade_all(self):\n         # Check that it worked, that the profiles are now at their\n         # original versions.\n         self.assertEqual(cmfeditions_version, getversion(cmfeditions_id))\n+        self.assertEqual(pae_version, getversion(pae_id))\n         self.assertEqual(querystring_version, getversion(querystring_id))\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-15T15:52:19+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/44b6e9f1727a7d911814f30d8fc561070e683a09

do not ttest 3 times, skip pad

Files changed:
M Products/CMFPlone/tests/testMigrationTool.py

b'diff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py\nindex d241051379..f8895a40e0 100644\n--- a/Products/CMFPlone/tests/testMigrationTool.py\n+++ b/Products/CMFPlone/tests/testMigrationTool.py\n@@ -228,28 +228,23 @@ def test_plone_addonlist_upgrade_all(self):\n         # Several addons did not get fully upgraded in the past, which\n         # is why this list was created.\n         cmfeditions_id = "Products.CMFEditions:CMFEditions"\n-        pae_id = "plone.app.event:default"\n         querystring_id = "plone.app.querystring:default"\n         # Note the current versions.\n         setup = getToolByName(self.portal, "portal_setup")\n         getversion = setup.getLastVersionForProfile\n         cmfeditions_version = getversion(cmfeditions_id)\n-        pae_version = getversion(pae_id)\n         querystring_version = getversion(querystring_id)\n         # Check that they are not unknown\n         self.assertNotEqual(cmfeditions_version, "unknown")\n-        self.assertNotEqual(pae_version, "unknown")\n         self.assertNotEqual(querystring_version, "unknown")\n         # So let\'s mess with some profile versions.  We get some older\n         # versions that really exist.\n         setversion = setup.setLastVersionForProfile\n         setversion(cmfeditions_id, "2.0")\n-        setversion(pae_id, "100")\n         setversion(querystring_id, "7")\n         # Check that it worked, that the profile versions really are\n         # different.\n         self.assertNotEqual(cmfeditions_version, getversion(cmfeditions_id))\n-        self.assertNotEqual(pae_version, getversion(pae_id))\n         self.assertNotEqual(querystring_version, getversion(querystring_id))\n \n         # Run the upgrade.\n@@ -258,5 +253,4 @@ def test_plone_addonlist_upgrade_all(self):\n         # Check that it worked, that the profiles are now at their\n         # original versions.\n         self.assertEqual(cmfeditions_version, getversion(cmfeditions_id))\n-        self.assertEqual(pae_version, getversion(pae_id))\n         self.assertEqual(querystring_version, getversion(querystring_id))\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-20T20:48:47+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/8c485391b2c370b50687f1fe7a18813b610d14b5

Merge branch 'master' into pa-discussion-core-addon

Files changed:
A news/3949.bugfix
A news/3960.bugfix
M Products/CMFPlone/browser/navigation.py
M Products/CMFPlone/browser/navtree.py
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/syndication/adapters.py
M Products/CMFPlone/browser/syndication/templates/search-rss.pt
M Products/CMFPlone/browser/syndication/views.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py
M Products/CMFPlone/tests/testNavTree.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/tests/testSecurityDeclarations.py
D Products/CMFPlone/skins/plone_scripts/getFolderContents.py
D Products/CMFPlone/skins/plone_scripts/queryCatalog.py
D Products/CMFPlone/tests/testQueryCatalog.py

b'diff --git a/Products/CMFPlone/browser/navigation.py b/Products/CMFPlone/browser/navigation.py\nindex e6799e20b7..39266987f2 100644\n--- a/Products/CMFPlone/browser/navigation.py\n+++ b/Products/CMFPlone/browser/navigation.py\n@@ -2,10 +2,10 @@\n from Acquisition import aq_inner\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.navtree import buildFolderTree\n-from plone.app.layout.navigation.root import getNavigationRoot\n from plone.base.defaultpage import check_default_page_via_view\n from plone.base.interfaces import IHideFromBreadcrumbs\n from plone.base.interfaces import INavigationSchema\n+from plone.base.navigationroot import get_navigation_root\n from plone.base.utils import pretty_title_or_id\n from plone.base.utils import safe_callable\n from plone.registry.interfaces import IRegistry\n@@ -79,7 +79,7 @@ def _getNavQuery(self):\n         else:\n             query = {}\n \n-        query["path"] = {"query": getNavigationRoot(self.context), "depth": 1}\n+        query["path"] = {"query": get_navigation_root(self.context), "depth": 1}\n         query["portal_type"] = [t for t in navigation_settings.displayed_types]\n         query["sort_on"] = navigation_settings.sort_tabs_on\n         if navigation_settings.sort_tabs_reversed:\n@@ -189,7 +189,7 @@ def breadcrumbs(self):\n         dec_result = [(len(r.getPath()), r) for r in rawresult]\n         dec_result.sort()\n \n-        rootPath = getNavigationRoot(context)\n+        rootPath = get_navigation_root(context)\n \n         # Build result dict\n         result = []\n@@ -234,7 +234,7 @@ def breadcrumbs(self):\n         if IHideFromBreadcrumbs.providedBy(context):\n             return base\n \n-        rootPath = getNavigationRoot(context)\n+        rootPath = get_navigation_root(context)\n         itemPath = "/".join(context.getPhysicalPath())\n \n         # don\'t show default pages in breadcrumbs or pages above the navigation\ndiff --git a/Products/CMFPlone/browser/navtree.py b/Products/CMFPlone/browser/navtree.py\nindex d161ad83c7..75e7c79ffb 100644\n--- a/Products/CMFPlone/browser/navtree.py\n+++ b/Products/CMFPlone/browser/navtree.py\n@@ -7,8 +7,8 @@\n from plone.app.layout.navigation.interfaces import INavigationQueryBuilder\n from plone.app.layout.navigation.interfaces import INavtreeStrategy\n from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n-from plone.app.layout.navigation.root import getNavigationRoot\n from plone.base.interfaces import INavigationSchema\n+from plone.base.navigationroot import get_navigation_root\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -44,7 +44,7 @@ def __init__(self, context):\n \n         # Construct the path query\n \n-        rootPath = getNavigationRoot(context)\n+        rootPath = get_navigation_root(context)\n         currentPath = "/".join(context.getPhysicalPath())\n \n         # If we are above the navigation root, a navtree query would return\n@@ -115,7 +115,7 @@ def __init__(self, context, view=None):\n         )\n \n         self.showAllParents = True\n-        self.rootPath = getNavigationRoot(context)\n+        self.rootPath = get_navigation_root(context)\n \n         membership = getToolByName(context, "portal_membership")\n         self.memberId = membership.getAuthenticatedMember().getId()\n@@ -196,7 +196,7 @@ def __init__(self, context, view=None):\n         if view is not None:\n             self.rootPath = view.navigationTreeRootPath()\n         else:\n-            self.rootPath = getNavigationRoot(context)\n+            self.rootPath = get_navigation_root(context)\n \n     def subtreeFilter(self, node):\n         sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\ndiff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 84503505dd..ae4d6cbe27 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -1,12 +1,12 @@\n from DateTime import DateTime\n from plone.app.contentlisting.interfaces import IContentListing\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.base.batch import Batch\n+from plone.base.interfaces import INavigationRoot\n from plone.base.interfaces import ISearchSchema\n from plone.base.interfaces.siteroot import IPloneSiteRoot\n+from plone.base.navigationroot import get_navigation_root\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.browser.navtree import getNavigationRoot\n from Products.ZCTextIndex.ParseTree import ParseError\n from zope.cachedescriptors.property import Lazy as lazy_property\n from zope.component import getMultiAdapter\n@@ -147,7 +147,7 @@ def _filter_query(self, query):\n         query["show_inactive"] = False\n         # respect navigation root if we\'re not at the site root.\n         if "path" not in query and not IPloneSiteRoot.providedBy(self.context):\n-            query["path"] = getNavigationRoot(self.context)\n+            query["path"] = get_navigation_root(self.context)\n \n         if "sort_order" in query and not query["sort_order"]:\n             del query["sort_order"]\ndiff --git a/Products/CMFPlone/browser/syndication/adapters.py b/Products/CMFPlone/browser/syndication/adapters.py\nindex 4d51bb1507..2a97b9d69d 100644\n--- a/Products/CMFPlone/browser/syndication/adapters.py\n+++ b/Products/CMFPlone/browser/syndication/adapters.py\n@@ -1,10 +1,13 @@\n from DateTime import DateTime\n from OFS.interfaces import IItem\n from plone.app.contenttypes.behaviors.leadimage import ILeadImageBehavior\n+from plone.base.batch import Batch\n+from plone.base.interfaces import IPloneSiteRoot\n from plone.base.interfaces.syndication import IFeed\n from plone.base.interfaces.syndication import IFeedItem\n from plone.base.interfaces.syndication import IFeedSettings\n from plone.base.interfaces.syndication import ISearchFeed\n+from plone.base.navigationroot import get_navigation_root_object\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedField\n from plone.registry.interfaces import IRegistry\n@@ -154,21 +157,27 @@ def language(self):\n \n class CollectionFeed(FolderFeed):\n     def _brains(self):\n+        # call the collection query method as defined in\n+        # plone.app.contenttypes.interfaces.ICollection\n+        # usually implemented at plone.aapp.contenttypes.item.collection\n         return self.context.queryCatalog(batch=False)[: self.limit]\n \n \n @implementer(ISearchFeed)\n class SearchFeed(FolderFeed):\n     def _brains(self):\n-        max_items = self.limit\n         request = self.context.REQUEST\n+        navroot = get_navigation_root_object(self.context, IPloneSiteRoot(self.context))\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        query = {\n+            "path": {"query": navroot.absolute_url_path(), "depth": 1},\n+            "sort_order": "reverse",\n+            "sort_on": request.get("sort_on", "effective"),\n+        }\n+        result = catalog(**query)\n         start = int(request.get("b_start", 0))\n-        end = int(request.get("b_end", start + max_items))\n-        request.set("sort_order", "reverse")\n-        request.set("sort_on", request.get("sort_on", "effective"))\n-        return self.context.queryCatalog(\n-            show_all=1, use_types_blacklist=True, use_navigation_root=True\n-        )[start:end]\n+        end = int(request.get("b_end", start + self.limit))\n+        return Batch(result, start, end)\n \n \n @adapter(IItem, IFeed)\ndiff --git a/Products/CMFPlone/browser/syndication/templates/search-rss.pt b/Products/CMFPlone/browser/syndication/templates/search-rss.pt\nindex 513e757697..cd21ca32ff 100644\n--- a/Products/CMFPlone/browser/syndication/templates/search-rss.pt\n+++ b/Products/CMFPlone/browser/syndication/templates/search-rss.pt\n@@ -8,11 +8,11 @@\n   xmlns:tal="http://xml.zope.org/namespaces/tal"\n   tal:define="syn context/@@syndication-util;">\n \n-<tal:synd tal:define="feed view/feed;\n+<tal:synd tal:define="feed python:view.feed();\n                       objects python: [i for i in feed.items];">\n <channel rdf:about="" tal:attributes="rdf:about request/URL">\n-  <title tal:content="context/pretty_title_or_id">The title</title>\n-  <link tal:content="context/portal_url">http://url.to.portal</link>\n+  <title tal:content="python:context.Title() or context.getId()">The title</title>\n+  <link tal:content="python:context.portal_url">http://url.to.portal</link>\n \n   <image tal:attributes="rdf:resource feed/logo" />\n \n@@ -29,7 +29,7 @@\n \n <tal:block repeat="item python: objects">\n   <item rdf:about="" tal:attributes="rdf:about item/link">\n-    <title tal:content="item/title">Title</title>\n+    <title tal:content="python:item.Title()">Title</title>\n     <link tal:content="item/link">Identifier</link>\n     <description tal:content="item/description">Description</description>\n     <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"\ndiff --git a/Products/CMFPlone/browser/syndication/views.py b/Products/CMFPlone/browser/syndication/views.py\nindex f165c80024..ee2a477469 100644\n--- a/Products/CMFPlone/browser/syndication/views.py\n+++ b/Products/CMFPlone/browser/syndication/views.py\n@@ -20,10 +20,10 @@ class FeedView(BrowserView):\n     content_type = "application/atom+xml"\n \n     def feed(self):\n-        f = queryAdapter(self.context, IFeed)\n-        if f is None:\n+        feed = queryAdapter(self.context, IFeed)\n+        if feed is None:\n             raise NotFound\n-        return f\n+        return feed\n \n     def __call__(self):\n         util = getMultiAdapter((self.context, self.request), name="syndication-util")\n@@ -40,10 +40,10 @@ def __call__(self):\n \n class SearchFeedView(FeedView):\n     def feed(self):\n-        f = queryAdapter(self.context, ISearchFeed)\n-        if f is None:\n+        feed = queryAdapter(self.context, ISearchFeed)\n+        if feed is None:\n             raise NotFound\n-        return f\n+        return feed\n \n     def __call__(self):\n         util = getMultiAdapter((self.context, self.request), name="syndication-util")\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\nindex 3a219f5e57..4099a0f60f 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_redirection.py\n@@ -465,7 +465,7 @@ def test_manage_aliases_remove(self):\n         self.assertEqual(storage.get("/plone/alias3"), "/plone/test-folder")\n \n     def test_manage_aliases_navigation_root(self):\n-        from plone.app.layout.navigation.interfaces import INavigationRoot\n+        from plone.base.interfaces import INavigationRoot\n         from zope.interface import alsoProvides\n \n         storage = getUtility(IRedirectionStorage)\ndiff --git a/Products/CMFPlone/skins/plone_scripts/getFolderContents.py b/Products/CMFPlone/skins/plone_scripts/getFolderContents.py\ndeleted file mode 100644\nindex 01ce2b879b..0000000000\n--- a/Products/CMFPlone/skins/plone_scripts/getFolderContents.py\n+++ /dev/null\n@@ -1,61 +0,0 @@\n-## Script (Python) "getFolderContents"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=contentFilter=None,batch=False,b_size=100,full_objects=False\n-##title=wrapper method around to use catalog to get folder contents\n-\n-# NOTE: This script is obsolete, use the browser view\n-#       @@folderListing in plone.app.contentlisting\n-\n-from zExceptions import Forbidden\n-\n-\n-if container.REQUEST.get("PUBLISHED") is script:\n-    raise Forbidden("Script may not be published.")\n-\n-mtool = context.portal_membership\n-cur_path = "/".join(context.getPhysicalPath())\n-path = {}\n-\n-if not contentFilter:\n-    contentFilter = {}\n-else:\n-    contentFilter = dict(contentFilter)\n-\n-if not contentFilter.get("sort_on", None):\n-    contentFilter["sort_on"] = "getObjPositionInParent"\n-\n-if contentFilter.get("path", None) is None:\n-    path["query"] = cur_path\n-    path["depth"] = 1\n-    contentFilter["path"] = path\n-\n-show_inactive = mtool.checkPermission("Access inactive portal content", context)\n-\n-# Provide batching hints to the catalog\n-b_start = int(context.REQUEST.get("b_start", 0))\n-contentFilter["b_start"] = b_start\n-if batch:\n-    contentFilter["b_size"] = b_size\n-\n-# Evaluate in catalog context because some containers override queryCatalog\n-# with their own unrelated method (Topics)\n-contents = context.portal_catalog.queryCatalog(\n-    contentFilter,\n-    show_all=1,\n-    show_inactive=show_inactive,\n-)\n-\n-if full_objects:\n-    contents = [b.getObject() for b in contents]\n-\n-if batch:\n-    from Products.CMFPlone import Batch\n-\n-    batch = Batch(contents, b_size, b_start, orphan=0)\n-    return batch\n-\n-return contents\ndiff --git a/Products/CMFPlone/skins/plone_scripts/queryCatalog.py b/Products/CMFPlone/skins/plone_scripts/queryCatalog.py\ndeleted file mode 100644\nindex e00fdee9b7..0000000000\n--- a/Products/CMFPlone/skins/plone_scripts/queryCatalog.py\n+++ /dev/null\n@@ -1,128 +0,0 @@\n-## Script (Python) "queryCatalog"\n-##bind container=container\n-##bind context=context\n-##bind namespace=\n-##bind script=script\n-##bind subpath=traverse_subpath\n-##parameters=REQUEST=None,show_all=0,quote_logic=0,quote_logic_indexes=[\'SearchableText\',\'Description\',\'Title\'],use_types_blacklist=False,show_inactive=False,use_navigation_root=False\n-##title=wraps the portal_catalog with a rules qualified query\n-\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.browser.navtree import getNavigationRoot\n-from Products.ZCTextIndex.ParseTree import ParseError\n-from ZODB.POSException import ConflictError\n-\n-\n-results = []\n-catalog = context.portal_catalog\n-indexes = catalog.indexes()\n-query = {}\n-show_query = show_all\n-second_pass = {}\n-\n-if REQUEST is None:\n-    REQUEST = context.REQUEST\n-\n-multispace = "\\u3000"\n-\n-\n-def quotestring(s):\n-    return \'"%s"\' % s\n-\n-\n-def quotequery(s):\n-    if not s:\n-        return s\n-    try:\n-        terms = s.split()\n-    except ConflictError:\n-        raise\n-    except Exception:\n-        return s\n-    tokens = ("OR", "AND", "NOT")\n-    s_tokens = ("OR", "AND")\n-    check = (0, -1)\n-    for idx in check:\n-        if terms[idx].upper() in tokens:\n-            terms[idx] = quotestring(terms[idx])\n-    for idx in range(1, len(terms)):\n-        if terms[idx].upper() in s_tokens and terms[idx - 1].upper() in tokens:\n-            terms[idx] = quotestring(terms[idx])\n-    return " ".join(terms)\n-\n-\n-# We need to quote parentheses when searching text indices (we use\n-# quote_logic_indexes as the list of text indices)\n-def quote_bad_chars(s):\n-    bad_chars = ["(", ")"]\n-    for char in bad_chars:\n-        s = s.replace(char, quotestring(char))\n-    return s\n-\n-\n-def ensureFriendlyTypes(query):\n-    ploneUtils = getToolByName(context, "plone_utils")\n-    portal_type = query.get("portal_type", [])\n-    if not same_type(portal_type, []):\n-        portal_type = [portal_type]\n-    Type = query.get("Type", [])\n-    if not same_type(Type, []):\n-        Type = [Type]\n-    typesList = portal_type + Type\n-    if not typesList:\n-        friendlyTypes = ploneUtils.getUserFriendlyTypes(typesList)\n-        query["portal_type"] = friendlyTypes\n-\n-\n-def rootAtNavigationRoot(query):\n-    if "path" not in query:\n-        query["path"] = getNavigationRoot(context)\n-\n-\n-# Avoid creating a session implicitly.\n-for k in REQUEST.keys():\n-    if k in ("SESSION",):\n-        continue\n-    v = REQUEST.get(k)\n-    if v and k in indexes:\n-        if k in quote_logic_indexes:\n-            v = quote_bad_chars(v)\n-            if multispace in v:\n-                v = v.replace(multispace, " ")\n-            if quote_logic:\n-                v = quotequery(v)\n-        query[k] = v\n-        show_query = 1\n-    elif k.endswith("_usage"):\n-        key = k[:-6]\n-        param, value = v.split(":")\n-        second_pass[key] = {param: value}\n-    elif k in ("sort_on", "sort_order", "sort_limit"):\n-        if k == "sort_limit" and not same_type(v, 0):\n-            query[k] = int(v)\n-        else:\n-            query[k] = v\n-\n-for k in second_pass.keys():\n-    v = second_pass[k]\n-    qs = query.get(k)\n-    if qs is None:\n-        continue\n-    query[k] = q = {"query": qs}\n-    q.update(v)\n-\n-# doesn\'t normal call catalog unless some field has been queried\n-# against. if you want to call the catalog _regardless_ of whether\n-# any items were found, then you can pass show_all=1.\n-if show_query:\n-    try:\n-        if use_types_blacklist:\n-            ensureFriendlyTypes(query)\n-        if use_navigation_root:\n-            rootAtNavigationRoot(query)\n-        query["show_inactive"] = show_inactive\n-        results = catalog(**query)\n-    except ParseError:\n-        pass\n-\n-return results\ndiff --git a/Products/CMFPlone/tests/testNavTree.py b/Products/CMFPlone/tests/testNavTree.py\nindex 40dc220684..0876d8be55 100644\n--- a/Products/CMFPlone/tests/testNavTree.py\n+++ b/Products/CMFPlone/tests/testNavTree.py\n@@ -1,8 +1,8 @@\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.app.layout.navigation.navtree import buildFolderTree\n from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n-from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.base.interfaces import INavigationRoot\n from plone.base.interfaces import INonStructuralFolder\n+from plone.base.navigationroot import get_navigation_root\n from Products.CMFCore.CMFCatalogAware import CatalogAware\n from Products.CMFCore.PortalFolder import PortalFolderBase\n from Products.CMFCore.utils import getToolByName\n@@ -48,8 +48,8 @@ def populateSite(self):\n         """\n         self.setRoles(["Manager"])\n \n-        for item in self.portal.getFolderContents():\n-            self.portal._delObject(item.getId)\n+        for cid in self.portal.contentIds():\n+            self.portal._delObject(cid)\n \n         self.portal.invokeFactory("Document", "doc1")\n         self.portal.invokeFactory("Document", "doc2")\n@@ -577,33 +577,33 @@ def testCurrentParent(self):\n \n \n class TestNavigationRoot(PloneTestCase.PloneTestCase):\n-    def testGetNavigationRootPropertyNotSet(self):\n+    def testGet_navigation_rootPropertyNotSet(self):\n         del self.portal.portal_registry.records["plone.root"]\n-        root = getNavigationRoot(self.portal)\n+        root = get_navigation_root(self.portal)\n         self.assertEqual(root, "/".join(self.portal.getPhysicalPath()))\n \n-    def testGetNavigationRootPropertyEmptyNoVirtualHost(self):\n+    def testGet_navigation_rootPropertyEmptyNoVirtualHost(self):\n         self.portal.portal_registry["plone.root"] = ""\n-        root = getNavigationRoot(self.portal)\n+        root = get_navigation_root(self.portal)\n         self.assertEqual(root, "/".join(self.portal.getPhysicalPath()))\n \n-    def testGetNavigationRootPropertyIsRoot(self):\n+    def testGet_navigation_rootPropertyIsRoot(self):\n         self.portal.portal_registry["plone.root"] = "/"\n-        root = getNavigationRoot(self.portal)\n+        root = get_navigation_root(self.portal)\n         self.assertEqual(root, "/".join(self.portal.getPhysicalPath()))\n \n-    def testGetNavigationRootPropertyIsFolder(self):\n+    def testGet_navigation_rootPropertyIsFolder(self):\n         folderPath = "/".join(self.folder.getPhysicalPath())\n         portalPath = "/".join(self.portal.getPhysicalPath())\n         relativePath = folderPath[len(portalPath) :]\n         self.portal.portal_registry["plone.root"] = relativePath\n-        root = getNavigationRoot(self.portal)\n+        root = get_navigation_root(self.portal)\n         self.assertEqual(root, folderPath)\n \n-    def testGetNavigationRootWithINavigationRoot(self):\n+    def testGet_navigation_rootWithINavigationRoot(self):\n         folderPath = "/".join(self.folder.getPhysicalPath())\n         self.folder.invokeFactory("Folder", "folder1")\n         self.folder.folder1.invokeFactory("Document", "doc1")\n         directlyProvides(self.folder, INavigationRoot)\n-        root = getNavigationRoot(self.folder.folder1.doc1)\n+        root = get_navigation_root(self.folder.folder1.doc1)\n         self.assertEqual(root, folderPath)\ndiff --git a/Products/CMFPlone/tests/testQueryCatalog.py b/Products/CMFPlone/tests/testQueryCatalog.py\ndeleted file mode 100644\nindex 09fd22ccad..0000000000\n--- a/Products/CMFPlone/tests/testQueryCatalog.py\n+++ /dev/null\n@@ -1,266 +0,0 @@\n-# Test queryCatalog and plone search forms\n-from plone.app.textfield.value import RichTextValue\n-from plone.base.interfaces import INavigationSchema\n-from plone.base.interfaces import ISearchSchema\n-from plone.base.interfaces.syndication import ISiteSyndicationSettings\n-from plone.registry.interfaces import IRegistry\n-from Products.CMFPlone.tests import PloneTestCase\n-from Products.ZCTextIndex.ParseTree import ParseError\n-from zExceptions import NotFound\n-from zope.component import getMultiAdapter\n-from zope.component import getUtility\n-\n-\n-class TestQueryCatalog(PloneTestCase.PloneTestCase):\n-    """Test queryCatalog script.\n-\n-    Test function of queryCatalog script, **not** the\n-    functionality of the catalog itself. Therefore, we\'ll replace\n-    the actual call to the catalog to a dummy routine that just\n-    returns the catalog search dictionary so we can examine what\n-    would be searched.\n-    """\n-\n-    def dummyCatalog(self, REQUEST=None, **kw):\n-        return kw\n-\n-    def stripStuff(self, query_dict):\n-        # strip portal_types and show_inactive parameter which is\n-        # auto-set with types blacklisting. Useful to simplify test\n-        # assertions when we don\'t care\n-        if isinstance(query_dict, dict):\n-            for ignore in ["portal_type", "show_inactive"]:\n-                if ignore in query_dict:\n-                    del query_dict[ignore]\n-        return query_dict\n-\n-    def afterSetUp(self):\n-        self.portal.portal_catalog.__call__ = self.dummyCatalog\n-\n-    def testEmptyRequest(self):\n-        request = {}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), [])\n-\n-    def testNonexistantIndex(self):\n-        request = {"foo": "bar"}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), [])\n-\n-    def testRealIndex(self):\n-        request = {"SearchableText": "bar"}\n-        self.assertEqual(\n-            self.stripStuff(self.folder.queryCatalog(request)),\n-            {"SearchableText": "bar"},\n-        )\n-\n-    def testTwoIndexes(self):\n-        request = {"SearchableText": "bar", "foo": "bar"}\n-        self.assertEqual(\n-            self.stripStuff(self.folder.queryCatalog(request)),\n-            {"SearchableText": "bar"},\n-        )\n-\n-    def testRealIndexes(self):\n-        request = {"SearchableText": "bar", "Subject": "bar"}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), request)\n-\n-    def testOnlySort(self):\n-        # if we only sort, we shouldn\'t actually call the catalog\n-        request = {"sort_on": "foozle"}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), [])\n-        request = {"sort_order": "foozle", "sort_on": "foozle"}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), [])\n-        request = {"sort_order": "foozle"}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), [])\n-\n-    def testOnlyUsage(self):\n-        request = {"date_usage": "range:min"}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), [])\n-\n-    def testRealWithUsage(self):\n-        request = {"modified": "2004-01-01", "modified_usage": "range:min"}\n-        expected = {"modified": {"query": "2004-01-01", "range": "min"}}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), expected)\n-\n-    def testSortLimit(self):\n-        # the script ignored \'sort_limit\'; test to show it no longer does.\n-        request = {"SearchableText": "bar", "sort_on": "foozle", "sort_limit": 50}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), request)\n-\n-    def testBlacklistedTypes(self):\n-        request = {"SearchableText": "a*"}\n-        registry = getUtility(IRegistry)\n-        search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        search_settings.types_not_searched = ("Event",)\n-        qry = self.folder.queryCatalog(request, use_types_blacklist=True)\n-        self.assertTrue("Document" in qry["portal_type"])\n-        self.assertTrue("Event" not in qry["portal_type"])\n-\n-    def testNavigationRoot(self):\n-        request = {"SearchableText": "a*"}\n-        registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n-        navigation_settings.root = "/"\n-        qry = self.folder.queryCatalog(request, use_navigation_root=True)\n-        self.assertEqual("/".join(self.portal.getPhysicalPath()), qry["path"])\n-        self.setRoles(("Manager",))\n-        self.portal.invokeFactory("Folder", "foo")\n-        navigation_settings.root = "/foo"\n-        qry = self.folder.queryCatalog(request, use_navigation_root=True)\n-        self.assertEqual("/".join(self.portal.foo.getPhysicalPath()), qry["path"])\n-\n-    def testNavigationRootDoesNotOverrideExplicitPath(self):\n-        request = {"SearchableText": "a*", "path": "/yyy/zzz"}\n-        self.setRoles(("Manager",))\n-        self.portal.invokeFactory("Folder", "foo")\n-        registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n-        navigation_settings.root = "/"\n-        qry = self.folder.queryCatalog(request, use_navigation_root=True)\n-        self.assertEqual("/yyy/zzz", qry["path"])\n-\n-\n-class TestQueryCatalogQuoting(PloneTestCase.PloneTestCase):\n-    """Test logic quoting features queryCatalog script.\n-\n-    Test function of queryCatalog script, **not** the\n-    functionality of the catalog itself. Therefore, we\'ll replace\n-    the actual call to the catalog to a dummy routine that just\n-    returns the catalog search dictionary so we can examine what\n-    would be searched.\n-    """\n-\n-    def dummyCatalog(self, REQUEST=None, **kw):\n-        return kw\n-\n-    def stripStuff(self, query_dict):\n-        # strip portal_types and show_inactive parameter which is\n-        # auto-set with types blacklisting. Useful to simplify test\n-        # assertions when we don\'t care\n-        if isinstance(query_dict, dict):\n-            for ignore in ["portal_type", "show_inactive"]:\n-                if ignore in query_dict:\n-                    del query_dict[ignore]\n-        return query_dict\n-\n-    def afterSetUp(self):\n-        self.portal.portal_catalog.__call__ = self.dummyCatalog\n-\n-    def testQuotingNone(self):\n-        request = {"SearchableText": "Hello Joel"}\n-        expected = request\n-        self.assertEqual(\n-            self.stripStuff(self.folder.queryCatalog(request, quote_logic=1)), expected\n-        )\n-\n-    def testQuotingNotNeeded(self):\n-        request = {"SearchableText": "Hello or Joel"}\n-        expected = request\n-        self.assertEqual(\n-            self.stripStuff(self.folder.queryCatalog(request, quote_logic=1)), expected\n-        )\n-\n-    def testQuotingNotNeededWithNot(self):\n-        request = {"SearchableText": "Hello or not Joel"}\n-        expected = request\n-        self.assertEqual(\n-            self.stripStuff(self.folder.queryCatalog(request, quote_logic=1)), expected\n-        )\n-\n-    def testQuotingRequiredToEscape(self):\n-        request = {"SearchableText": "Hello Joel Or"}\n-        expected = {"SearchableText": \'Hello Joel "Or"\'}\n-        self.assertEqual(\n-            self.stripStuff(self.folder.queryCatalog(request, quote_logic=1)), expected\n-        )\n-\n-    def testQuotingRequiredToEscapeOptionOff(self):\n-        request = {"SearchableText": "Hello Joel Or"}\n-        expected = request\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), expected)\n-\n-    def testQuotingWithLeadingNot(self):\n-        request = {"SearchableText": "Not Hello Joel"}\n-        expected = request\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), expected)\n-\n-    def testEmptyItem(self):\n-        request = {"SearchableText": ""}\n-        # queryCatalog will return empty result without calling the catalog\n-        # tool\n-        expected = []\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), expected)\n-\n-    def testEmptyItemShowAll(self):\n-        request = {"SearchableText": ""}\n-        # Catalog gets a blank search, and returns the empty dict\n-        expected = {}\n-        self.assertEqual(\n-            self.stripStuff(self.folder.queryCatalog(request, show_all=1)), expected\n-        )\n-\n-    def testBadCharsAreQuoted(self):\n-        request = {"SearchableText": "context(1)"}\n-        # Catalog gets ( or ) in search and quotes them to avoid parse error\n-        expected = {"SearchableText": \'context"("1")"\'}\n-        self.assertEqual(self.stripStuff(self.folder.queryCatalog(request)), expected)\n-\n-\n-class TestQueryCatalogParseError(PloneTestCase.PloneTestCase):\n-    """Checks that the queryCatalog script returns an empty result set\n-    in case of ZCTextIndex ParseErrors.\n-\n-    This testcase uses the real catalog, not a stub.\n-    """\n-\n-    def afterSetUp(self):\n-        self.folder.invokeFactory(\n-            "Document", id="doc", text=RichTextValue("foo bar baz")\n-        )\n-\n-    def testSearchableText(self):\n-        request = {"SearchableText": "foo"}\n-        # We expect a non-empty result set\n-        self.assertTrue(self.portal.queryCatalog(request))\n-\n-    def testParseError(self):\n-        # ZCTextIndex raises ParseError\n-        self.assertRaises(ParseError, self.portal.portal_catalog, SearchableText="-foo")\n-\n-    def testQueryCatalogParseError(self):\n-        request = {"SearchableText": "-foo"}\n-        # ZCTextIndex raises ParseError which translates to empty result\n-        expected = []\n-        self.assertEqual(self.portal.queryCatalog(request), expected)\n-\n-    def testQueryCatalogParseError3050(self):\n-        # http://dev.plone.org/plone/ticket/3050\n-        request = {"SearchableText": "AND"}\n-        # ZCTextIndex raises ParseError which translates to empty result\n-        expected = []\n-        self.assertEqual(self.portal.queryCatalog(request), expected)\n-\n-\n-AddPortalTopics = "Add portal topics"\n-\n-\n-class TestSearchForms(PloneTestCase.PloneTestCase):\n-    """Render all forms related to queryCatalog"""\n-\n-    def testRenderSearchForm(self):\n-        searchView = getMultiAdapter((self.portal, self.app.REQUEST), name="search")\n-        searchView()\n-\n-    def testRenderSearchRSS(self):\n-        searchRssView = getMultiAdapter(\n-            (self.portal, self.app.REQUEST), name="search_rss"\n-        )\n-        searchRssView()\n-\n-    def testSearchGives404WhenDisabled(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ISiteSyndicationSettings)\n-        settings.search_rss_enabled = False\n-        searchRssView = getMultiAdapter(\n-            (self.portal, self.app.REQUEST), name="search_rss"\n-        )\n-        self.assertRaises(NotFound, searchRssView)\ndiff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py\nindex 379fca60f3..ade829a54f 100644\n--- a/Products/CMFPlone/tests/testSecurity.py\n+++ b/Products/CMFPlone/tests/testSecurity.py\n@@ -123,10 +123,6 @@ def test_getMemberInfo(self):\n         res = self.publish("/plone/portal_membership/getMemberInfo?id=admin")\n         self.assertEqual(404, res.status)\n \n-    def test_queryCatalog(self):\n-        res = self.publish("/plone/news/aggregator/queryCatalog")\n-        self.assertEqual(404, res.status)\n-\n     def test_resolve_url(self):\n         res = self.publish("/plone/uid_catalog/resolve_url?path=/evil")\n         self.assertEqual(404, res.status)\n@@ -135,10 +131,6 @@ def test_atat_does_not_return_anything(self):\n         res = self.publish("/plone/@@")\n         self.assertEqual(404, res.status)\n \n-    def test_getFolderContents(self):\n-        res = self.publish("/plone/getFolderContents")\n-        self.assertEqual(403, res.status)\n-\n     def test_translate(self):\n         res = self.publish("/plone/translate?msgid=foo")\n         self.assertEqual(403, res.status)\ndiff --git a/Products/CMFPlone/tests/testSecurityDeclarations.py b/Products/CMFPlone/tests/testSecurityDeclarations.py\nindex fd4cf2d532..5025c6260d 100644\n--- a/Products/CMFPlone/tests/testSecurityDeclarations.py\n+++ b/Products/CMFPlone/tests/testSecurityDeclarations.py\n@@ -468,6 +468,3 @@ def testSitemapQueryBuilder(self):\n             "n=SitemapQueryBuilder(context);"\n             "n();"\n         )\n-\n-    def testGetNavigationRoot(self):\n-        self.check("from Products.CMFPlone.browser.navtree import getNavigationRoot")\ndiff --git a/news/3949.bugfix b/news/3949.bugfix\nnew file mode 100644\nindex 0000000000..bf15b1c268\n--- /dev/null\n+++ b/news/3949.bugfix\n@@ -0,0 +1 @@\n+Reduce DeprecationWarnings. [@jensens]\ndiff --git a/news/3960.bugfix b/news/3960.bugfix\nnew file mode 100644\nindex 0000000000..b1fe215568\n--- /dev/null\n+++ b/news/3960.bugfix\n@@ -0,0 +1,3 @@\n+Remove queryCatalog and getFolderContents skins script.\n+This includes a refactoring in the search RSS and updates to soe tests\n+[@jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-20T20:50:29+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/6d1c641f03c3ebb842b6918ecdfca9e7db9bce24

add change log entry

Files changed:
A news/3782.bugfix

b'diff --git a/news/3782.bugfix b/news/3782.bugfix\nnew file mode 100644\nindex 0000000000..959bc31b2b\n--- /dev/null\n+++ b/news/3782.bugfix\n@@ -0,0 +1,2 @@\n+Turn plone.app.discussion in a core-addon.\n+[@jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-22T13:48:26+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/d4e6a0d3d0af56909dabcaf36cfa59ab27900c79

no offensive wording

Files changed:
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/controlpanel/browser/types.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py
M Products/CMFPlone/profiles/default/types/TempFolder.xml
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testSearch.py

b'diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 886d93ff63..21fdaf37c9 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -758,7 +758,7 @@ def acquireLocalRoles(self, obj, status=1, REQUEST=None):\n         # If status is 1, allow acquisition of local roles (regular\n         # behaviour).\n         # If it\'s 0, prohibit it (it will allow some kind of local role\n-        # blacklisting).\n+        # denylisting).\n         mt = getToolByName(self, "portal_membership")\n         if not mt.checkPermission(ModifyPortalContent, obj):\n             raise Unauthorized\n@@ -937,7 +937,7 @@ def getUserFriendlyTypes(self, typesList=None):\n             typesList = []\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        blacklistedTypes = search_settings.types_not_searched\n+        denylistedTypes = search_settings.types_not_searched\n \n         ttool = getToolByName(self, "portal_types")\n         tool_types = ttool.keys()\n@@ -946,7 +946,7 @@ def getUserFriendlyTypes(self, typesList=None):\n         else:\n             types = tool_types\n \n-        friendlyTypes = set(types) - set(blacklistedTypes)\n+        friendlyTypes = set(types) - set(denylistedTypes)\n         return list(friendlyTypes)\n \n     @security.public\ndiff --git a/Products/CMFPlone/controlpanel/browser/types.py b/Products/CMFPlone/controlpanel/browser/types.py\nindex 2e4361594b..09f38ef9b0 100644\n--- a/Products/CMFPlone/controlpanel/browser/types.py\n+++ b/Products/CMFPlone/controlpanel/browser/types.py\n@@ -169,12 +169,12 @@ def __call__(self):\n \n                 searchable = form.get("searchable", False)\n                 site_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-                blacklisted = [i for i in site_settings.types_not_searched]\n-                if searchable and type_id in blacklisted:\n-                    blacklisted.remove(type_id)\n-                elif not searchable and type_id not in blacklisted:\n-                    blacklisted.append(type_id)\n-                site_settings.types_not_searched = tuple(blacklisted)\n+                denylisted = [i for i in site_settings.types_not_searched]\n+                if searchable and type_id in denylisted:\n+                    denylisted.remove(type_id)\n+                elif not searchable and type_id not in denylisted:\n+                    denylisted.append(type_id)\n+                site_settings.types_not_searched = tuple(denylisted)\n \n                 default_page_type = form.get("default_page_type", False)\n                 types_settings = registry.forInterface(ITypesSchema, prefix="plone")\n@@ -307,8 +307,8 @@ def current_versioning_policy(self):\n     def is_searchable(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        blacklisted = settings.types_not_searched\n-        return self.type_id not in blacklisted\n+        denylisted = settings.types_not_searched\n+        return self.type_id not in denylisted\n \n     def is_default_page_type(self):\n         registry = getUtility(IRegistry)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\nindex bfc28b52f4..0865585b51 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n@@ -80,7 +80,6 @@ def test_displayed_types(self):\n         settings = registry.forInterface(INavigationSchema, prefix="plone")\n         self.browser.open("%s/@@navigation-controlpanel" % self.portal_url)\n         self.browser.getControl("Collection", index=0).selected = True\n-        self.browser.getControl("Comment").selected = True\n         self.browser.getControl("Event").selected = True\n         self.browser.getControl("File").selected = True\n         self.browser.getControl("Folder").selected = True\n@@ -91,7 +90,6 @@ def test_displayed_types(self):\n         self.browser.getControl("Save").click()\n \n         self.assertTrue("Collection" in settings.displayed_types)\n-        self.assertTrue("Discussion Item" in settings.displayed_types)\n         self.assertTrue("Event" in settings.displayed_types)\n         self.assertTrue("File" in settings.displayed_types)\n         self.assertTrue("Folder" in settings.displayed_types)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\nindex f2cc9bf507..f0b6c31daa 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\n@@ -58,12 +58,10 @@ def test_enable_livesearch(self):\n     def test_types_not_searched(self):\n         self.browser.open("%s/@@search-controlpanel" % self.portal_url)\n         self.browser.getControl(name="form.widgets.types_not_searched:list").value = [\n-            "Discussion Item",\n             "News Item",\n         ]\n         self.browser.getControl("Save").click()\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        self.assertTrue("Discussion Item" in settings.types_not_searched)\n         self.assertTrue("News Item" in settings.types_not_searched)\ndiff --git a/Products/CMFPlone/profiles/default/types/TempFolder.xml b/Products/CMFPlone/profiles/default/types/TempFolder.xml\nindex aa3e58c625..3fd51aa7e3 100644\n--- a/Products/CMFPlone/profiles/default/types/TempFolder.xml\n+++ b/Products/CMFPlone/profiles/default/types/TempFolder.xml\n@@ -18,7 +18,6 @@\n   <property name="global_allow">False</property>\n   <property name="filter_content_types">False</property>\n   <property name="allowed_content_types">\n-    <element value="Discussion Item" />\n     <element value="Document" />\n     <element value="Event" />\n     <element value="File" />\ndiff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py\nindex 712dbb04aa..3e3be2c3ea 100644\n--- a/Products/CMFPlone/tests/testPloneTool.py\n+++ b/Products/CMFPlone/tests/testPloneTool.py\n@@ -134,17 +134,17 @@ def testGetUserFriendlyTypes(self):\n         types = set(ttool.keys())\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        blacklistedTypes = search_settings.types_not_searched\n+        denylistedTypes = search_settings.types_not_searched\n \n-        # \'ChangeSet\' is blacklisted, but not in the types by default,\n+        # \'ChangeSet\' is denylisted, but not in the types by default,\n         # so we filter that out.\n-        blacklistedTypes = {t for t in blacklistedTypes if t in types}\n+        denylistedTypes = {t for t in denylistedTypes if t in types}\n         # No black listed types should be returned.\n         self.assertEqual(\n-            [t for t in self.utils.getUserFriendlyTypes() if t in blacklistedTypes], []\n+            [t for t in self.utils.getUserFriendlyTypes() if t in denylistedTypes], []\n         )\n         self.assertEqual(\n-            len(self.utils.getUserFriendlyTypes()), len(types) - len(blacklistedTypes)\n+            len(self.utils.getUserFriendlyTypes()), len(types) - len(denylistedTypes)\n         )\n         # Non-existing types should be filtered out.\n         self.assertEqual(self.utils.getUserFriendlyTypes(["File"]), ["File"])\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex e1d00b8567..7c8eb6b483 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -135,8 +135,8 @@ def crumbs(item):\n         title = crumbs(second_level_folder.third_level_document)[0]["Title"]\n         self.assertEqual(title, "First Level Folder")\n \n-    def test_blacklisted_types_in_results(self):\n-        """Make sure we don\'t break types\' blacklisting in the new search\n+    def test_Denylisted_types_in_results(self):\n+        """Make sure we don\'t break types\' Denylisting in the new search\n         results view.\n         """\n         portal = self.layer["portal"]\n@@ -154,7 +154,7 @@ def test_blacklisted_types_in_results(self):\n         res = portal.restrictedTraverse("@@search").results(query=q, batch=False)\n         self.assertFalse(\n             "my-page1" in [r.getId() for r in res],\n-            \'Blacklisted type "Document" has been found in search results.\',\n+            \'Denylisted type "Document" has been found in search results.\',\n         )\n \n     def test_default_search_order_relevance(self):\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-23T11:50:31+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/4de205c6c8ec3cdbd8b122049896264a6fcac36e

Merge branch 'master' into pa-discussion-core-addon

Files changed:
A news/3756.bugfix
A news/3962.bugfix
M Products/CMFPlone/browser/navtree.py
M Products/CMFPlone/controlpanel/browser/error_log_form.py
M setup.py

b'diff --git a/Products/CMFPlone/browser/navtree.py b/Products/CMFPlone/browser/navtree.py\nindex 75e7c79ffb..36a59e22bb 100644\n--- a/Products/CMFPlone/browser/navtree.py\n+++ b/Products/CMFPlone/browser/navtree.py\n@@ -9,12 +9,12 @@\n from plone.app.layout.navigation.navtree import NavtreeStrategyBase\n from plone.base.interfaces import INavigationSchema\n from plone.base.navigationroot import get_navigation_root\n+from plone.base.utils import pretty_title_or_id\n+from plone.base.utils import safe_callable\n from plone.i18n.normalizer.interfaces import IIDNormalizer\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone import utils\n from zope.component import getUtility\n-from zope.component import queryUtility\n from zope.interface import implementer\n \n \n@@ -32,12 +32,12 @@ class NavtreeQueryBuilder:\n     """Build a navtree query based on the settings in navtree_properties"""\n \n     def __init__(self, context):\n-        registry = getUtility(IRegistry)\n-        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n+        self.registry = getUtility(IRegistry)\n+        navigation_settings = self.registry.forInterface(INavigationSchema, prefix="plone")\n \n         # Acquire a custom nav query if available\n         customQuery = getattr(context, "getCustomNavQuery", None)\n-        if customQuery is not None and utils.safe_callable(customQuery):\n+        if customQuery is not None and safe_callable(customQuery):\n             query = customQuery()\n         else:\n             query = {}\n@@ -62,7 +62,7 @@ def __init__(self, context):\n         # seem to work with EPI.\n \n         # Only list the applicable types\n-        query["portal_type"] = utils.typesToList(context)\n+        query["portal_type"] = self.registry.get("plone.displayed_types", ())\n \n         # Apply the desired sort\n         sortAttribute = navigation_settings.sort_tabs_on\n@@ -87,10 +87,9 @@ class SitemapQueryBuilder(NavtreeQueryBuilder):\n     """Build a folder tree query suitable for a sitemap"""\n \n     def __init__(self, context):\n-        NavtreeQueryBuilder.__init__(self, context)\n+        super().__init__(context)\n         portal_url = getToolByName(context, "portal_url")\n-        registry = getUtility(IRegistry)\n-        sitemap_depth = registry.get("plone.sitemap_depth", 3)\n+        sitemap_depth = self.registry.get("plone.sitemap_depth", 3)\n         self.query["path"] = {\n             "query": portal_url.getPortalPath(),\n             "depth": sitemap_depth,\n@@ -149,7 +148,7 @@ def decoratorFactory(self, node):\n         if isFolderish and (portalType is None or portalType not in self.parentTypesNQ):\n             showChildren = True\n \n-        newNode["Title"] = utils.pretty_title_or_id(context, item)\n+        newNode["Title"] = pretty_title_or_id(context, item)\n         newNode["id"] = item.getId\n         newNode["UID"] = item.UID\n         newNode["absolute_url"] = itemUrl\n@@ -169,7 +168,7 @@ def decoratorFactory(self, node):\n             newNode["getRemoteUrl"] and newNode["Creator"] != self.memberId\n         )\n \n-        idnormalizer = queryUtility(IIDNormalizer)\n+        idnormalizer = getUtility(IIDNormalizer)\n         newNode["normalized_portal_type"] = idnormalizer.normalize(portalType)\n         newNode["normalized_review_state"] = idnormalizer.normalize(\n             newNode["review_state"]\ndiff --git a/Products/CMFPlone/controlpanel/browser/error_log_form.py b/Products/CMFPlone/controlpanel/browser/error_log_form.py\nindex b91169ff4c..9c61401dcf 100644\n--- a/Products/CMFPlone/controlpanel/browser/error_log_form.py\n+++ b/Products/CMFPlone/controlpanel/browser/error_log_form.py\n@@ -1,14 +1,14 @@\n from DateTime import DateTime\n from plone.base import PloneMessageFactory as _\n+from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone.utils import safe_nativestring\n from Products.Five import BrowserView\n \n-import plone.api as api\n-\n \n class ErrorLogUpdate(BrowserView):\n     def __call__(self):\n-        member = api.user.get_current()\n+        portal_membership = getToolByName(self.context, "portal_membership")\n+        member = portal_membership.getAuthenticatedMember()\n \n         if getattr(self.request, "form.button.search", None) is not None:\n             search = self.request.form.get("search_entry")\ndiff --git a/news/3756.bugfix b/news/3756.bugfix\nnew file mode 100644\nindex 0000000000..4f3c022774\n--- /dev/null\n+++ b/news/3756.bugfix\n@@ -0,0 +1,2 @@\n+Fix deprecation warnings in "navtree" code + some micro optimizations\n+[jensens]\ndiff --git a/news/3962.bugfix b/news/3962.bugfix\nnew file mode 100644\nindex 0000000000..d49decfcd7\n--- /dev/null\n+++ b/news/3962.bugfix\n@@ -0,0 +1 @@\n+Products.CMFPlone  must not depend on plone.api [@jensens]\ndiff --git a/setup.py b/setup.py\nindex ac11203d1d..d6a543abca 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -53,7 +53,6 @@\n         "borg.localrole",\n         "five.customerize",\n         "lxml",\n-        "plone.api >= 1.4.4",\n         "plone.app.content",\n         "plone.app.contentlisting",\n         "plone.app.contentmenu >= 2.0.1",\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-30T16:26:22+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/110d688c49a48497e4d60c3aa5558164328a2620

zcml:condition for plone.app.discussion

Files changed:
M Products/CMFPlone/configure.zcml

b'diff --git a/Products/CMFPlone/configure.zcml b/Products/CMFPlone/configure.zcml\nindex c1a3ba041d..bc83b75869 100644\n--- a/Products/CMFPlone/configure.zcml\n+++ b/Products/CMFPlone/configure.zcml\n@@ -44,12 +44,10 @@\n   <include package="plone.app.contenttypes" />\n   <include package="plone.app.customerize" />\n   <include package="plone.app.dexterity" />\n-  <include package="plone.app.discussion" />\n   <include package="plone.app.i18n" />\n   <include package="plone.app.layout" />\n   <include package="plone.app.linkintegrity" />\n   <include package="plone.app.locales" />\n-  <include zcml:condition="installed plone.app.multilingual" package="plone.app.multilingual" />\n   <include package="plone.app.portlets" />\n   <include package="plone.app.redirector" />\n   <include package="plone.app.registry" />\n@@ -65,12 +63,22 @@\n   <include package="plone.portlet.collection" />\n   <include package="plonetheme.barceloneta" />\n \n-  <!-- conditional -->\n+  <!-- plone.app.* optional/conditional Core Add-ons -->\n+  <include\n+      package="plone.app.discussion"\n+      zcml:condition="installed plone.app.discussion"\n+      />\n+  <include\n+      package="plone.app.multilingual"\n+      zcml:condition="installed plone.app.multilingual"\n+      />\n   <include\n       package="plone.app.upgrade"\n       zcml:condition="installed plone.app.upgrade"\n       />\n \n+\n+\n   <include package=".resources" />\n   <include package=".patterns" />\n \n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-30T16:35:11+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/bc2b937fc54f51a66459d46a7966325c27c33823

name shift here??

Files changed:
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py

b'diff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\nindex 0865585b51..ec6159b0c6 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n@@ -109,7 +109,7 @@ def test_workflow_settings(self):\n         self.browser.getControl(\n             "Internally published [internally_published]"\n         ).selected = True  # noqa\n-        self.browser.getControl("Pending [pending]").selected = True\n+        self.browser.getControl("Pending review [pending]").selected = True\n         self.browser.getControl("Private [private]").selected = True\n         self.browser.getControl("Public draft [visible]").selected = True\n         self.browser.getControl("Published [published]").selected = True\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-05-31T18:34:08+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/fc9cbecb290b9d74cb1e84a2821f0269d185e003

allow discussion settings will be tested in pa.discussion

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_types.robot

b'diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\nindex 56fed5385a..9a8da1d5c4 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n@@ -21,8 +21,6 @@ Scenario: Allow comments for Link Type\n    When I select \'Link\' in types dropdown\n     and Allow discussion\n    Then Wait until page contains  Content Settings\n-   When I add new Link \'my_link\'\n-    Then Link \'my_link\' should have comments enabled\n \n Scenario: Change default workflow\n   Given a logged-in site administrator\n@@ -74,11 +72,6 @@ I add new Link \'${id}\'\n \n # --- THEN -------------------------------------------------------------------\n \n-Link \'${id}\' should have comments enabled\n-  Go to  ${PLONE_URL}/${id}\n-  Wait until page contains  ${id}\n-  Page should contain element  xpath=//div[@id="commenting"]\n-\n Link \'${id}\' should have Single State Workflow enabled\n   Go to  ${PLONE_URL}/${id}\n   Wait until page contains  ${id}\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-06-03T11:51:49-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/5281c5d7daddc4bb2f4bff246ea4704344fd4a9c

Merge branch 'master' into pa-discussion-core-addon

Files changed:
A news/3964.bugfix
A news/3965.bugfix
A news/3966.bugfix
A news/3967.bugfix
M Products/CMFPlone/controlpanel/browser/maintenance.pt
M Products/CMFPlone/controlpanel/browser/maintenance.py
M Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt
M Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt
M Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.pt
M Products/CMFPlone/controlpanel/browser/usergroups_usermembership.pt
M Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.pt
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py
M Products/CMFPlone/tests/csrf.txt
M Products/CMFPlone/tests/testPortalCreation.py

b'diff --git a/Products/CMFPlone/controlpanel/browser/maintenance.pt b/Products/CMFPlone/controlpanel/browser/maintenance.pt\nindex 5440bff8fe..6123e04c33 100644\n--- a/Products/CMFPlone/controlpanel/browser/maintenance.pt\n+++ b/Products/CMFPlone/controlpanel/browser/maintenance.pt\n@@ -45,7 +45,8 @@\n \n         <div id="content-core">\n \n-            <form action="."\n+            <form tal:condition="python:view.isShutdownable() or view.isRestartable()"\n+                  action="."\n                   tal:attributes="action request/URL"\n                   method="post"\n                   class="edit-form"\n@@ -58,7 +59,8 @@\n \n                     <div id="actionsView" class="formControls">\n                         <span class="actionButtons">\n-                            <button type="submit"\n+                            <button tal:condition="view/isShutdownable"\n+                                   type="submit"\n                                    id="form.buttons.shutdown"\n                                    name="form.buttons.shutdown"\n                                    value="Shut down"\ndiff --git a/Products/CMFPlone/controlpanel/browser/maintenance.py b/Products/CMFPlone/controlpanel/browser/maintenance.py\nindex 9d64f2f6a3..f62f174b15 100644\n--- a/Products/CMFPlone/controlpanel/browser/maintenance.py\n+++ b/Products/CMFPlone/controlpanel/browser/maintenance.py\n@@ -2,6 +2,7 @@\n from AccessControl.Permissions import view_management_screens\n from Acquisition import aq_inner\n from App.config import getConfiguration\n+from html import escape\n from plone.autoform.form import AutoExtensibleForm\n from plone.base import PloneMessageFactory as _\n from plone.base.interfaces import IMaintenanceSchema\n@@ -24,12 +25,6 @@\n except ImportError:\n     LIFETIME = False\n \n-try:\n-    from html import escape\n-except ImportError:\n-    from cgi import escape\n-\n-\n logger = logging.getLogger(__file__)\n \n \n@@ -90,7 +85,7 @@ def handle_shutdown_action(self, action):\n         if LIFETIME:\n             shutdown(0)\n         else:\n-            raise\n+            raise NotImplementedError("Lifetime is not available.")\n         # TODO: returning html has no effect in button handlers\n         self.request.response.setHeader("X-Theme-Disabled", "True")\n         return """<html><head></head><body>{}</body></html>""".format(\n@@ -137,6 +132,9 @@ def isRestartable(self):\n             return True\n         return False\n \n+    def isShutdownable(self):\n+        return LIFETIME\n+\n     def isDevelopmentMode(self):\n         return bool(getConfiguration().debug_mode)\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt\nindex 67e738a52d..39ec596a4e 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupdetails.pt\n@@ -17,7 +17,7 @@\n \n \n   <!-- When no group is specified, this gets used as the add group page page -->\n-  <article id="content" tal:condition="not:view/group">\n+  <tal:not_group tal:condition="not:view/group">\n       <metal:block metal:use-macro="template/macros/props">\n           <metal:title metal:fill-slot="content-title">\n               <h1 class="documentFirstHeading"\n@@ -39,9 +39,9 @@\n               </div>\n           </metal:name>\n       </metal:block>\n-  </article>\n+  </tal:not_group>\n \n-  <article id="content" tal:condition="view/group | nothing">\n+  <tal:group tal:condition="view/group | nothing">\n     <metal:block define-macro="props">\n \n       <a href="${portal_url}/@@usergroup-groupprefs"\n@@ -211,7 +211,7 @@\n         </div>\n       </div>\n     </metal:block>\n-  </article>\n+  </tal:group>\n \n </metal:main>\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt\nindex 6ff5ab4d2b..a8b643edd9 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupmembership.pt\n@@ -13,7 +13,7 @@\n                  errors python:request.get(\'errors\', {});\n                  portal_roles view/portal_roles;">\n \n-  <article id="content">\n+  <tal:content>\n \n     <tal:ifnogroups tal:condition="not:view/group | nothing">\n       <h1 class="documentFirstHeading"\n@@ -332,7 +332,7 @@\n       </tal:defs>\n     </tal:ifgroups>\n \n-  </article>\n+  </tal:content>\n \n </metal:main>\n </body>\ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.pt b/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.pt\nindex 8fa939eafc..8dbeadaa8b 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.pt\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_groupsoverview.pt\n@@ -21,7 +21,7 @@\n                         batchformkeys python:[\'searchstring\',\'_authenticator\'];\n                         portal_url context/portal_url;">\n \n-  <article id="content">\n+  <tal:content>\n     <header>\n         <h1 class="documentFirstHeading"\n             i18n:translate="">Groups</h1>\n@@ -207,7 +207,7 @@\n             </div>\n         </form>\n     </div>\n-  </article>\n+  </tal:content>\n \n </metal:main>\n </body>\ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.pt b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.pt\nindex 22fc535621..337456d5b7 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.pt\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.pt\n@@ -31,7 +31,7 @@\n                  batch python:Batch(view.searchResults, b_size, int(b_start));\n                  batchformkeys python:[\'searchstring\',\'_authenticator\', \'userid\'];">\n \n-  <article id="content" tal:define="many_groups view/many_groups">\n+  <tal:many_groups tal:define="many_groups view/many_groups">\n \n     <a href=""\n        class="link-parent"\n@@ -206,7 +206,7 @@\n \n       </div>\n     </div>\n-  </article>\n+  </tal:many_groups>\n \n </metal:main>\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.pt b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.pt\nindex 6bf0192991..4ba04fb288 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.pt\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usersoverview.pt\n@@ -17,7 +17,7 @@\n                 portal_roles view/portal_roles;\n                 portal_url context/portal_url;">\n \n-    <article id="content">\n+    <tal:content>\n \n     <header>\n \n@@ -225,7 +225,7 @@\n       </div>\n     </div>\n \n-  </article>\n+  </tal:content>\n \n </metal:main>\n \ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\nindex 0216c1077c..9bf825009f 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_maintenance.py\n@@ -1,14 +1,12 @@\n-from pkg_resources import get_distribution\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing.zope import Browser\n from plone.testing.zope import login\n+from Products.CMFPlone.controlpanel.browser.maintenance import LIFETIME\n from Products.CMFPlone.testing import PRODUCTS_CMFPLONE_FUNCTIONAL_TESTING\n \n import unittest\n-\n-\n-has_zope4 = get_distribution("Zope2").version.startswith("4")\n+import zExceptions\n \n \n class MaintenanceControlPanelFunctionalTest(unittest.TestCase):\n@@ -84,3 +82,18 @@ def pack(self, t=None, days=0):\n         self.assertTrue(self.browser.url.endswith("maintenance-controlpanel"))\n         self.assertTrue("Packed the database." in self.browser.contents)\n         db.pack = original_pack\n+\n+    @unittest.skipIf(not LIFETIME, "Lifetime for shutdown not available")\n+    def test_maintenance_shutdown_CSRF_protection(self):\n+        login(self.app["acl_users"], "app")\n+        import transaction\n+\n+        transaction.commit()\n+        self.browser.handleErrors = False\n+        self.browser.addHeader("Authorization", f"Basic app:{TEST_USER_PASSWORD}")\n+        self.browser.open("/@@overview-controlpanel")\n+        self.browser.getLink("Maintenance").click()\n+        self.browser.getControl(name="_authenticator", index=0).value = "invalid!"\n+        self.browser.getControl(name="_authenticator", index=1).value = "invalid!"\n+        with self.asserRaises(zExceptions.Forbidden):\n+            self.browser.getControl("Shut down").click()\ndiff --git a/Products/CMFPlone/tests/csrf.txt b/Products/CMFPlone/tests/csrf.txt\nindex f03dbbb376..b18c93b87d 100644\n--- a/Products/CMFPlone/tests/csrf.txt\n+++ b/Products/CMFPlone/tests/csrf.txt\n@@ -417,23 +417,3 @@ Traceback (most recent call last):\n ...\n zExceptions.Forbidden: Form authenticator is invalid.\n \n-Exceptions to the rule is the "Maintenance" configlet, which is tested\n-separately. The "Maintenance" configlet has some special security\n-limitations, which is why we need to log in as the portal owner first:\n-\n-  >>> app_browser = Browser(app)\n-  >>> app_browser.handleErrors = False\n-  >>> app.acl_users.userFolderAddUser(\'app\', TEST_USER_PASSWORD, [\'Manager\'], [])\n-  >>> from plone.testing import zope\n-  >>> zope.logout()\n-  >>> zope.login(app[\'acl_users\'], \'app\')\n-  >>> import transaction; transaction.commit()\n-  >>> app_browser.addHeader(\'Authorization\', f\'Basic app:{TEST_USER_PASSWORD}\')\n-  >>> app_browser.open(\'http://nohost/plone/@@overview-controlpanel\')\n-  >>> app_browser.getLink(\'Maintenance\').click()\n-  >>> app_browser.getControl(name=\'_authenticator\', index=0).value = \'invalid!\'\n-  >>> app_browser.getControl(name=\'_authenticator\', index=1).value = \'invalid!\'\n-  >>> app_browser.getControl(\'Shut down\').click()\n-  Traceback (most recent call last):\n-  ...\n-  zExceptions.Forbidden: Form authenticator is invalid.\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 208e60c3eb..5fa0b55ae4 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -198,7 +198,6 @@ def testUnfriendlyTypesProperty(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISearchSchema, prefix="plone")\n         self.assertTrue("plone.types_not_searched" in registry)\n-        self.assertTrue("Plone Site" in settings.types_not_searched)\n \n     def testDefaultSortOrderProperty(self):\n         # We should have an sort_on property\ndiff --git a/news/3964.bugfix b/news/3964.bugfix\nnew file mode 100644\nindex 0000000000..08994471a3\n--- /dev/null\n+++ b/news/3964.bugfix\n@@ -0,0 +1,2 @@\n+Removes duplicate `<article id="content">` in controlpanel templates\n+[@szakitibi]\ndiff --git a/news/3965.bugfix b/news/3965.bugfix\nnew file mode 100644\nindex 0000000000..de4d0d6091\n--- /dev/null\n+++ b/news/3965.bugfix\n@@ -0,0 +1,2 @@\n+Do not test types_not_searched for a element that is not part of the underlying vocabulary.\n+[@jensens]\ndiff --git a/news/3966.bugfix b/news/3966.bugfix\nnew file mode 100644\nindex 0000000000..1c962a9e34\n--- /dev/null\n+++ b/news/3966.bugfix\n@@ -0,0 +1 @@\n+Remove unused leftover reference to the Zope2 package from test. [@jensens]\ndiff --git a/news/3967.bugfix b/news/3967.bugfix\nnew file mode 100644\nindex 0000000000..8cbd922fef\n--- /dev/null\n+++ b/news/3967.bugfix\n@@ -0,0 +1,3 @@\n+Fix: Traceback in maintenance control panel on shutdown if feature is not available.\n+Hide button if action is not possible.\n+[@jensens]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-06-10T16:42:46+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/cde4f1a750950eff02ee7dc0d4797a7b10ea2abf

move test with comments to pone.app.discussion

Files changed:
M Products/CMFPlone/tests/robot/test_controlpanel_types.robot

b"diff --git a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\nindex 9a8da1d5c4..b611a93109 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n@@ -13,15 +13,6 @@ Test Teardown  Run keywords  Plone Test Teardown\n \n \n *** Test Cases ***************************************************************\n-\n-Scenario: Allow comments for Link Type\n-  Given a logged-in manager\n-    and Globally enabled comments\n-    and the types control panel\n-   When I select 'Link' in types dropdown\n-    and Allow discussion\n-   Then Wait until page contains  Content Settings\n-\n Scenario: Change default workflow\n   Given a logged-in site administrator\n     and the types control panel\n@@ -34,32 +25,12 @@ Scenario: Change default workflow\n *** Keywords *****************************************************************\n \n # --- GIVEN ------------------------------------------------------------------\n-\n-a logged-in manager\n-  Enable autologin as  Manager\n-\n the types control panel\n   Go to  ${PLONE_URL}/@@content-controlpanel\n   Wait until page contains  Content Settings\n \n-Globally enabled comments\n-  Go to  ${PLONE_URL}/@@discussion-settings\n-  Wait until page contains  Discussion settings\n-  Select checkbox  name=form.widgets.globally_enabled:list\n-  Click button  Save\n-\n-\n \n # --- WHEN -------------------------------------------------------------------\n-\n-I select '${content_type}' in types dropdown\n-  Select from list by label  name=type_id  ${content_type}\n-  Wait until page contains  Globally addable\n-\n-Allow discussion\n-  Select checkbox  name=allow_discussion:boolean\n-  Click Button  Save\n-\n I select '${workflow}' workflow\n   Select from list by label  name=new_workflow  ${workflow}\n   Click Button  Save\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-06-10T10:43:26-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/2cb388aba0e9afa8ca28727f726ae57790bd3a0d

Merge branch 'master' into pa-discussion-core-addon

Files changed:
A news/3952.bugfix
M Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py

b"diff --git a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py\nindex 57ea21eeed..755c807856 100644\n--- a/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py\n+++ b/Products/CMFPlone/controlpanel/browser/usergroups_usermembership.py\n@@ -63,7 +63,7 @@ def getGroups(self):\n             for m in self.gtool.getGroupsForPrincipal(self.member)\n         ]\n         groupResults.sort(\n-            key=lambda x: x is not None and normalizeString(x.getGroupTitleOrName())\n+            key=lambda x: normalizeString(x.getGroupTitleOrName()) if x else ''\n         )\n         return [i for i in groupResults if i]\n \ndiff --git a/news/3952.bugfix b/news/3952.bugfix\nnew file mode 100644\nindex 0000000000..a63571e60a\n--- /dev/null\n+++ b/news/3952.bugfix\n@@ -0,0 +1,2 @@\n+Fix TypeError in getGroups sorting\n+[@rohnsha0]\n\\ No newline at end of file\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-09T05:18:50-04:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/cb2e823f50961cd179a47347147ab1f9d5a3ab9b

Merge branch 'master' into pa-discussion-core-addon

Files changed:
M .github/ISSUE_TEMPLATE/PLIP.md
M CHANGES.md
M Products/CMFPlone/RegistrationTool.py
M Products/CMFPlone/browser/admin.py
M Products/CMFPlone/browser/author.py
M Products/CMFPlone/browser/configure.zcml
M Products/CMFPlone/browser/templates/author.pt
M Products/CMFPlone/browser/templates/plone-upgrade.pt
M Products/CMFPlone/controlpanel/browser/resourceregistry.pt
M Products/CMFPlone/controlpanel/browser/tinymce.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/patterns/settings.py
M Products/CMFPlone/patterns/tinymce.py
M Products/CMFPlone/tests/testEmailLogin.py
M Products/CMFPlone/tests/testMigrationTool.py
M Products/CMFPlone/tests/testResourceRegistries.py
M Products/CMFPlone/tests/test_patternsettings.py
M setup.py
D news/3756.bugfix
D news/3945.bugfix
D news/3946.bugfix
D news/3949.bugfix
D news/3952.bugfix
D news/3960.bugfix
D news/3962.bugfix
D news/3964.bugfix
D news/3965.bugfix
D news/3966.bugfix
D news/3967.bugfix
D news/6103.internal

b'diff --git a/.github/ISSUE_TEMPLATE/PLIP.md b/.github/ISSUE_TEMPLATE/PLIP.md\nindex 271a1c9345..e570a1162f 100644\n--- a/.github/ISSUE_TEMPLATE/PLIP.md\n+++ b/.github/ISSUE_TEMPLATE/PLIP.md\n@@ -2,8 +2,9 @@\n name: "\\U0001F680 PLIP"\n about: Plone Improvement Proposal\n title: \'\'\n-labels: \'\'\n+labels: \'03 type: feature (plip)\'\n assignees: \'\'\n+projects: \'plone/47\'\n \n ---\n \n@@ -11,9 +12,7 @@ assignees: \'\'\n \n <!--\n \n-Read http://docs.plone.org/develop/coredev/docs/plips.html first!\n-\n-Set "03 type: feature: plip" as label.\n+Read https://5.docs.plone.org/develop/coredev/docs/plips.html first!\n \n Mention the @plone/framework-team when the PLIP is information complete!\n \ndiff --git a/CHANGES.md b/CHANGES.md\nindex de2bfdcf2c..06a95f78ec 100644\n--- a/CHANGES.md\n+++ b/CHANGES.md\n@@ -15,6 +15,60 @@\n \n <!-- towncrier release notes start -->\n \n+## 6.1.0a4.dev0 (2024-07-08)\n+\n+\n+### Bug fixes:\n+\n+- Mockup TinyMCE settings: Remove unused loadingBaseUrl option. 3765-1\n+- Mockup TinyMCE settings: Remove deprecated AtD plugin settings. 3765-2\n+- Mockup TinyMCE settings: Remove unused AtD related views. 3765-3\n+- Mockup TinyMCE settings: Remove unused ITinyMCESpellCheckerSchema and ITinyMCESpellCheckerForm. 3765-4\n+- Fix deprecation warnings in "navtree" code + some micro optimizations\n+  [jensens] #3756\n+- Use details element for collapsibles in the resource registry.\n+  Makes it possible to toggle elements even with broken or missing javascript.\n+  Also properly connect form labels with their inputs.\n+  Fixes #3942\n+- Import INavigationRoot from plone.base, removes DeprecationWarning.\n+  [@jensens] #3945\n+- Use `context` instead of `here` in templates.\n+  Call `@@main_template` (with prefix `@@`) to optimize lookup.\n+  [@jensens] #3946\n+- Reduce DeprecationWarnings. [@jensens] #3949\n+- Fix TypeError in getGroups sorting\n+  [@rohnsha0] #3952\n+- Remove queryCatalog and getFolderContents skins script.\n+  This includes a refactoring in the search RSS and updates to soe tests\n+  [@jensens] #3960\n+- Products.CMFPlone  must not depend on plone.api [@jensens] #3962\n+- Removes duplicate `<article id="content">` in controlpanel templates\n+  [@szakitibi] #3964\n+- Do not test types_not_searched for a element that is not part of the underlying vocabulary.\n+  [@jensens] #3965\n+- Remove unused leftover reference to the Zope2 package from test. [@jensens] #3966\n+- Fix: Traceback in maintenance control panel on shutdown if feature is not available.\n+  Hide button if action is not possible.\n+  [@jensens] #3967\n+- Fixed RegistrationTool to take user email with `__+__@abc.com`.\n+  [@rohnsha0] #3968\n+- Plone upgrade page: show error when upgrade is needed but no upgrades are available.\n+  Especially show a note when the `plone.app.upgrade` package is not available.\n+  [maurits] #3975\n+- Plone upgrade page: show list of previously installed packages that are currently missing.\n+  For example: `plone.app.discussion` may be missing in Plone 6.1, unless you explicitly add it, or depend on the `Plone` package.\n+  [maurits] #3975\n+\n+\n+### Internal:\n+\n+- Resourceregistry controlpanel: zprettify template.\n+  [thet] #3942\n+- Automatically set the label to `03 type: feature (plip)` for PLIPs. @stevepiercy #3982\n+- Automatically add a PLIP issue to the PLIP project board. @stevepiercy #3984\n+- Updated metadata version to 6103.\n+  [maurits] #6103\n+\n ## 6.1.0a3 (2024-04-26)\n \n \ndiff --git a/Products/CMFPlone/RegistrationTool.py b/Products/CMFPlone/RegistrationTool.py\nindex b3a1931cea..905fc35b6c 100644\n--- a/Products/CMFPlone/RegistrationTool.py\n+++ b/Products/CMFPlone/RegistrationTool.py\n@@ -107,7 +107,7 @@ class RegistrationTool(PloneBaseTool, BaseTool):\n     plone_tool = 1\n     md5key = None\n     _v_md5base = None\n-    default_member_id_pattern = r"^\\w[\\w\\.\\-@]+\\w$"\n+    default_member_id_pattern = r"^\\w[\\w\\.\\-@+]+\\w$"\n     _ALLOWED_MEMBER_ID_PATTERN = re.compile(default_member_id_pattern)\n \n     def __init__(self):\ndiff --git a/Products/CMFPlone/browser/admin.py b/Products/CMFPlone/browser/admin.py\nindex 6c96868982..e6273a812a 100644\n--- a/Products/CMFPlone/browser/admin.py\n+++ b/Products/CMFPlone/browser/admin.py\n@@ -1,6 +1,9 @@\n from AccessControl import getSecurityManager\n from AccessControl.Permissions import view as View\n from collections import OrderedDict\n+from functools import cached_property\n+from importlib.metadata import distribution\n+from importlib.metadata import PackageNotFoundError\n from OFS.interfaces import IApplication\n from plone.base.interfaces import INonInstallable\n from plone.base.interfaces import IPloneSiteRoot\n@@ -35,14 +38,18 @@\n from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n import logging\n-import pkg_resources\n \n \n try:\n-    pkg_resources.get_distribution("plone.volto")\n+    distribution("plone.volto")\n     HAS_VOLTO = True\n-except pkg_resources.DistributionNotFound:\n+except PackageNotFoundError:\n     HAS_VOLTO = False\n+try:\n+    distribution("plone.app.upgrade")\n+    HAS_UPGRADE = True\n+except PackageNotFoundError:\n+    HAS_UPGRADE = False\n LOGGER = logging.getLogger("Products.CMFPlone")\n \n \n@@ -313,10 +320,43 @@ def __call__(self):\n \n \n class Upgrade(BrowserView):\n+    has_upgrade = HAS_UPGRADE\n+\n     def upgrades(self):\n         pm = getattr(self.context, "portal_migration")\n         return pm.listUpgrades()\n \n+    @cached_property\n+    def missing_packages(self):\n+        """Get list of missing packages that were installed in GS.\n+\n+        Main use case:\n+\n+        * Create a Product.CMFPlone 6.0 site.\n+        * Upgrade the code to Products.CMFPlone 6.1.\n+        * Now the plone.app.discussion package is missing.\n+          This will give problems, because its GS profile was installed\n+          by default in 6.0.\n+\n+        Beware of false positives.  For example when upgrading from Plone 5.2,\n+        CMFFormController will be missing, but we have code in plone.app.upgrade\n+        to properly clean this up. So we should not bother the admin with this.\n+        """\n+        setup = getattr(self.context, "portal_setup")\n+        installed = sorted(\n+            set([x.split(":")[0] for x in setup._profile_upgrade_versions.keys()])\n+        )\n+        ignore = ["Products.CMFFormController"]\n+        missing = []\n+        for package in installed:\n+            if package in ignore:\n+                continue\n+            try:\n+                distribution(package)\n+            except PackageNotFoundError:\n+                missing.append(package)\n+        return missing\n+\n     def versions(self):\n         pm = getattr(self.context, "portal_migration")\n         result = {}\ndiff --git a/Products/CMFPlone/browser/author.py b/Products/CMFPlone/browser/author.py\nindex ed13dd4e98..644099ea71 100644\n--- a/Products/CMFPlone/browser/author.py\n+++ b/Products/CMFPlone/browser/author.py\n@@ -20,6 +20,7 @@\n from zope.component import getUtility\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n+from ZTUtils import make_query\n \n import logging\n \n@@ -137,6 +138,9 @@ def publishTraverse(self, request, name):\n         self.username = name\n         return self\n \n+    def makeQuery(self, **kw):\n+        return make_query(**kw)\n+\n     @property\n     def is_anonymous(self):\n         return self.portal_state.anonymous()\ndiff --git a/Products/CMFPlone/browser/configure.zcml b/Products/CMFPlone/browser/configure.zcml\nindex 36941da36b..23ecdcfdd3 100644\n--- a/Products/CMFPlone/browser/configure.zcml\n+++ b/Products/CMFPlone/browser/configure.zcml\n@@ -224,15 +224,6 @@\n       permission="zope2.View"\n       />\n \n-  <!-- AtD Support -->\n-  <browser:page\n-      name="checkDocument"\n-      for="*"\n-      class=".atd.ATDProxyView"\n-      attribute="checkDocument"\n-      permission="zope2.View"\n-      />\n-\n   <!-- Default Page View -->\n   <browser:page\n       name="default_page"\ndiff --git a/Products/CMFPlone/browser/templates/author.pt b/Products/CMFPlone/browser/templates/author.pt\nindex 19cd4b0d6e..d60cd86555 100644\n--- a/Products/CMFPlone/browser/templates/author.pt\n+++ b/Products/CMFPlone/browser/templates/author.pt\n@@ -218,9 +218,8 @@\n                           </div>\n \n                           <p>\n-                          <a href=""\n-                             tal:attributes="href string:$here_url/search?Creator=${username}&amp;sort_on=created&amp;sort_order=reverse"\n-                             i18n:translate="go_to_search_author_content">\n+                          <a href="${here_url}/search?${python:view.makeQuery(Creator=username, sort_on=\'created\', sort_order=\'reverse\')}"\n+                             i18n:translate="go_to_search_author_content">                       \n                               All content created by\n                               <span i18n:name="user" tal:omit-tag="" tal:content="python:authorinfo[\'fullname\'] or username"/>&hellip;\n                           </a>\ndiff --git a/Products/CMFPlone/browser/templates/plone-upgrade.pt b/Products/CMFPlone/browser/templates/plone-upgrade.pt\nindex 9b9cdecc7d..8752241612 100644\n--- a/Products/CMFPlone/browser/templates/plone-upgrade.pt\n+++ b/Products/CMFPlone/browser/templates/plone-upgrade.pt\n@@ -21,6 +21,7 @@\n \n <body id="plone-upgrade-screen"\n       tal:define="versions view/versions;\n+                  upgrades view/upgrades;\n                   report options/report|nothing;">\n \n     <div class="container admin mt-5 mb-5 p-4">\n@@ -45,6 +46,12 @@\n         </header>\n         <article class="row mb-4">\n           <div class="col-md-12 mb-3">\n+            <div class="alert alert-danger" tal:condition="view/missing_packages">\n+              <p><strong i18n:translate="msg_missing_packages">The following packages were previously installed, but are currently missing. This may be a problem.</strong></p>\n+              <ul>\n+                <li tal:repeat="package view/missing_packages">${package}</li>\n+              </ul>\n+            </div>\n             <p class="alert alert-success p-2" tal:condition="versions/equal">\n               <span i18n:translate="" tal:omit-tag="">Your site is up to date.</span>\n             </p>\n@@ -101,7 +108,7 @@\n           </p>\n \n           <dl class="mb-4">\n-            <tal:block tal:repeat="upgrade_info view/upgrades">\n+            <tal:block tal:repeat="upgrade_info upgrades">\n \n                 <tal:single condition="python:not isinstance(upgrade_info, list)"\n                             define="info upgrade_info">\n@@ -144,9 +151,20 @@\n           </div>\n         </div>\n \n+        <p class="alert alert-danger p-2" tal:condition="not:upgrades">\n+          <span i18n:translate="msg_no_upgrades">\n+            No upgrade steps are available.\n+          </span>\n+          <strong tal:condition="not:view/has_upgrade"\n+                i18n:translate="msg_plone_app_upgrade_missing">\n+            The plone.app.upgrade package is missing.\n+          </strong>\n+        </p>\n+\n         <input type="hidden" name="form.submitted:boolean" value="True" />\n         <button type="submit"\n                 name="submit"\n+                tal:attributes="disabled python:\'disabled\' if not upgrades else \'\'"\n                 class="btn btn-primary"\n                 i18n:translate="" >Upgrade</button>\n     </form>\ndiff --git a/Products/CMFPlone/controlpanel/browser/resourceregistry.pt b/Products/CMFPlone/controlpanel/browser/resourceregistry.pt\nindex 4279bdb02b..2385c90f98 100644\n--- a/Products/CMFPlone/controlpanel/browser/resourceregistry.pt\n+++ b/Products/CMFPlone/controlpanel/browser/resourceregistry.pt\n@@ -1,169 +1,278 @@\n-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"\n-      xmlns:tal="http://xml.zope.org/namespaces/tal"\n-      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+<html xmlns="http://www.w3.org/1999/xhtml"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n+      xmlns:metal="http://xml.zope.org/namespaces/metal"\n+      xmlns:tal="http://xml.zope.org/namespaces/tal"\n       lang="en"\n       metal:use-macro="context/prefs_main_template/macros/master"\n-      i18n:domain="plone">\n-\n-<body>\n-\n-\n-<metal:main metal:fill-slot="prefs_configlet_main" i18n:domain="plone">\n-  <header>\n+      xml:lang="en"\n+      i18n:domain="plone"\n+>\n+  <body>\n \n-    <h1 class="documentFirstHeading"\n-        i18n:translate="">Resource Registry</h1>\n+    <metal:main metal:fill-slot="prefs_configlet_main"\n+                i18n:domain="plone"\n+    >\n+      <header>\n+        <h1 class="documentFirstHeading"\n+            i18n:translate=""\n+        >Resource Registry</h1>\n \n-    <div class="text-muted"\n-       i18n:translate="">\n+        <div class="text-muted"\n+             i18n:translate=""\n+        >\n       Configure Plone JavaScript/CSS resource bundles.\n-    </div>\n-  </header>\n+        </div>\n+      </header>\n \n-   <div id="content-core">\n-    <div class="portalMessage statusmessage statusmessage-error alert alert-danger js-errors">\n-        <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-error\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1 me-2\')" />\n-        <strong i18n:translate="">Javascript disabled or error(s) occurred</strong>\n-        <span class="content"\n-              i18n:translate="">\n+      <div id="content-core">\n+        <div class="portalMessage statusmessage statusmessage-error alert alert-danger js-errors">\n+          <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-error\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1 me-2\')" />\n+          <strong i18n:translate="">Javascript disabled or error(s) occurred</strong>\n+          <span class="content"\n+                i18n:translate=""\n+          >\n             If this message persists, a Javascript Error occurred within the\n             resources below.\n-        </span>\n-    </div>\n-    <div tal:condition="python:view.global_debug_mode()"\n-         class="portalMessage statusmessage statusmessage-info alert alert-info"\n-         role="alert">\n-        <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-info\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1 me-2\')" />\n-        <strong i18n:translate="">Global Debug Mode Activated</strong>\n-        <span class="content"\n-              i18n:translate="">\n+          </span>\n+        </div>\n+        <div class="portalMessage statusmessage statusmessage-info alert alert-info"\n+             role="alert"\n+             tal:condition="python:view.global_debug_mode()"\n+        >\n+          <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-info\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1 me-2\')" />\n+          <strong i18n:translate="">Global Debug Mode Activated</strong>\n+          <span class="content"\n+                i18n:translate=""\n+          >\n             This is great for development.\n             Resource hashes will be recalculated on each request.\n             This is expensive, do not use use in production!\n-        </span>\n-    </div>\n-    <form tal:condition="python:not view.global_debug_mode() and view.debug_mode()"\n-          method="post" action="${python:context.absolute_url()}/@@resourceregistry-controlpanel">\n-      <div class="portalMessage statusmessage statusmessage-info alert alert-warning"\n-         role="alert">\n-          <button name="action" value="deactivate_cache" type="submit" class="btn btn-primary ms-1 me-1 mb-1 float-end" i18n:translate="">Deactivate</button>\n-        <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-warning\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1\')" />\n-        <strong i18n:translate="">Resource Debug Mode Activated</strong>\n-        <span class="content"\n-              i18n:translate="">\n+          </span>\n+        </div>\n+        <form action="${python:context.absolute_url()}/@@resourceregistry-controlpanel"\n+              method="post"\n+              tal:condition="python:not view.global_debug_mode() and view.debug_mode()"\n+        >\n+          <div class="portalMessage statusmessage statusmessage-info alert alert-warning"\n+               role="alert"\n+          >\n+            <button class="btn btn-primary ms-1 me-1 mb-1 float-end"\n+                    name="action"\n+                    type="submit"\n+                    value="deactivate_cache"\n+                    i18n:translate=""\n+            >Deactivate</button>\n+            <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-warning\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1\')" />\n+            <strong i18n:translate="">Resource Debug Mode Activated</strong>\n+            <span class="content"\n+                  i18n:translate=""\n+            >\n             Resources are not cached in Plone.\n             Their hashes will be recalculated on each request.\n             This is expensive, do not use use in production!\n-        </span>\n-      </div>\n-    </form>\n-    <form tal:condition="python:not view.global_debug_mode() and not view.debug_mode()"\n-          method="post" action="${python:context.absolute_url()}/@@resourceregistry-controlpanel">\n-      <div class="portalMessage statusmessage statusmessage-info alert alert-info"\n-         role="alert">\n-          <button name="action" value="activate_cache" type="submit" class="btn btn-primary ms-1 me-1 mb-1 float-end" i18n:translate="">Activate Debug Mode</button>\n-        <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-info\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1\')" />\n-        <strong i18n:translate="">Production Mode Activated</strong>\n-        <span class="content"\n-              i18n:translate="">\n+            </span>\n+          </div>\n+        </form>\n+        <form action="${python:context.absolute_url()}/@@resourceregistry-controlpanel"\n+              method="post"\n+              tal:condition="python:not view.global_debug_mode() and not view.debug_mode()"\n+        >\n+          <div class="portalMessage statusmessage statusmessage-info alert alert-info"\n+               role="alert"\n+          >\n+            <button class="btn btn-primary ms-1 me-1 mb-1 float-end"\n+                    name="action"\n+                    type="submit"\n+                    value="activate_cache"\n+                    i18n:translate=""\n+            >Activate Debug Mode</button>\n+            <tal:icon tal:replace="structure python:icons.tag(\'plone-statusmessage-info\', tag_alt=\'\', tag_class=\'statusmessage-icon mb-1\')" />\n+            <strong i18n:translate="">Production Mode Activated</strong>\n+            <span class="content"\n+                  i18n:translate=""\n+            >\n             Resources are fast and hashes are cached in Plone.\n-        </span>\n-      </div>\n-    </form>\n-    <div class="accordion" id="accordionRR" tal:define="dummy python:view.process_form()">\n-      <tal:block tal:repeat="bundle python:view.bundles_data">\n-      <div class="accordion-item ${python:\'active\' if bundle[\'name\'] == request.form.get(\'name\', None) else \'\'}">\n-           <h2 class="accordion-header" id="heading-${python:bundle[\'safe_name\']}">\n-            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${python:bundle[\'safe_name\']}" aria-expanded="false" aria-controls="collapse-${python:bundle[\'safe_name\']}">\n-              <span tal:condition="python:bundle[\'name\'] and bundle[\'enabled\']" i18n:translate="" class="me-2"><tal:icon tal:replace="structure python:icons.tag(\'file-check\', tag_alt=\'Enabled bundle\')" /></span>\n-              <span tal:condition="python:bundle[\'name\'] and not bundle[\'enabled\']" i18n:translate="" class="me-2"><tal:icon tal:replace="structure python:icons.tag(\'file-x\', tag_alt=\'Disabled bundle\')" /></span>\n-              <span tal:condition="python:not bundle[\'name\']" i18n:translate="" class="me-2"><tal:icon tal:replace="structure python:icons.tag(\'file-plus\', tag_alt=\'Add a bundle\')" /></span>\n-              <strong tal:condition="python:bundle[\'name\']">${python:bundle["name"]}</strong>\n-              <strong tal:condition="python:not bundle[\'name\']" i18n:translate="">Add new bundle</strong>\n-            </button>\n-          </h2>\n-          <div id="collapse-${python:bundle[\'safe_name\']}" class="accordion-collapse collapse show" aria-labelledby="heading${python:bundle[\'safe_name\']}" data-bs-parent="#accordionRR">\n-            <div class="accordion-body">\n-              <form method="post" action="${python:context.absolute_url()}/@@resourceregistry-controlpanel">\n-                <input type="hidden" name="original_name" value="${python:bundle[\'name\']}" />\n+            </span>\n+          </div>\n+        </form>\n+        <div class="accordion"\n+             id="accordionRR"\n+             tal:define="\n+               dummy python:view.process_form();\n+             "\n+        >\n+          <tal:block tal:repeat="bundle python:view.bundles_data">\n+            <details class="accordion-item ${python:\'active\' if bundle[\'name\'] == request.form.get(\'name\', None) else \'\'}">\n+              <summary class="accordion-button">\n+                <span class="me-2"\n+                      tal:condition="python:bundle[\'name\'] and bundle[\'enabled\']"\n+                      i18n:translate=""\n+                ><tal:icon tal:replace="structure python:icons.tag(\'file-check\', tag_alt=\'Enabled bundle\')" /></span>\n+                <span class="me-2"\n+                      tal:condition="python:bundle[\'name\'] and not bundle[\'enabled\']"\n+                      i18n:translate=""\n+                ><tal:icon tal:replace="structure python:icons.tag(\'file-x\', tag_alt=\'Disabled bundle\')" /></span>\n+                <span class="me-2"\n+                      tal:condition="python:not bundle[\'name\']"\n+                      i18n:translate=""\n+                ><tal:icon tal:replace="structure python:icons.tag(\'file-plus\', tag_alt=\'Add a bundle\')" /></span>\n+                <h2 class="accordion-header fs-5 fw-bold" tal:condition="python:bundle[\'name\']">${python:bundle["name"]}</h2>\n+                <h2 class="accordion-header fs-5 fw-bold" tal:condition="python:not bundle[\'name\']"\n+                        i18n:translate=""\n+                >Add new bundle</h2>\n+              </summary>\n+              <form class="accordion-body"\n+                    action="${python:context.absolute_url()}/@@resourceregistry-controlpanel"\n+                    method="post"\n+              >\n+                <input name="original_name"\n+                       type="hidden"\n+                       value="${python:bundle[\'name\']}"\n+                />\n                 <div class="mb-3">\n-                  <label for="name" class="form-label" i18n:translate="label_bundle_name">Name</label>\n-                  <input type="text" class="form-control" name="name" value="${python:bundle[\'name\']}"/>\n+                  <label class="form-label">\n+                    <tal:i18n i18n:translate="label_bundle_name">Name</tal:i18n>\n+                    <input class="form-control"\n+                           name="name"\n+                           type="text"\n+                           value="${python:bundle[\'name\']}"\n+                    />\n+                  </label>\n                 </div>\n                 <div class="mb-3">\n-                  <label for="jscompilation" class="form-label">Javascript</label>\n-                  <input type="text" class="form-control" name="jscompilation" value="${python:bundle[\'jscompilation\']}"/>\n+                  <label class="form-label">\n+                    JavaScript\n+                    <input class="form-control"\n+                           name="jscompilation"\n+                           type="text"\n+                           value="${python:bundle[\'jscompilation\']}"\n+                    />\n+                  </label>\n                 </div>\n                 <div class="mb-3">\n-                  <label for="csscompilation" class="form-label">CSS</label>\n-                  <input type="text" class="form-control" name="csscompilation" value="${python:bundle[\'csscompilation\']}"/>\n+                  <label class="form-label">\n+                    CSS\n+                    <input class="form-control"\n+                           name="csscompilation"\n+                           type="text"\n+                           value="${python:bundle[\'csscompilation\']}"\n+                    />\n+                  </label>\n                 </div>\n                 <div class="form-check mb-3">\n-                  <input class="form-check-input" type="checkbox" value="" name="enabled" ${python:"checked" if bundle["enabled"] else \'\'} />\n-                  <label class="form-check-label" for="enabled" i18n:translate="label_bundle_enabled">\n-                    enabled\n+                  <label class="form-check-label">\n+                    <input class="form-check-input"\n+                           checked="${python:\'checked\' if bundle[\'enabled\'] else None}"\n+                           name="enabled"\n+                           type="checkbox"\n+                           value=""\n+                    />\n+                    <tal:i18n i18n:translate="label_bundle_enabled">enabled</tal:i18n>\n                   </label>\n                 </div>\n                 <div class="mb-3">\n-                  <label for="expression" class="form-label" i18n:translate="label_bundle_condition">Condition</label>\n-                  <input type="text" class="form-control" name="expression" value="${python:bundle[\'expression\']}" placeholder="expression" i18n:attributes="placeholder label_expression_placeholder"/>\n+                  <label class="form-label">\n+                    <tal:i18n i18n:translate="label_bundle_condition">Condition</tal:i18n>\n+                    <input class="form-control"\n+                           name="expression"\n+                           placeholder="expression"\n+                           type="text"\n+                           value="${python:bundle[\'expression\']}"\n+                           i18n:attributes="placeholder label_expression_placeholder"\n+                    />\n+                  </label>\n                 </div>\n                 <div class="mb-3">\n-                  <label for="depends" class="form-label" i18n:translate="">Depends on</label>\n-                  <input type="text" class="form-control" name="depends" value="${python:bundle[\'depends\']}" />\n+                  <label class="form-label">\n+                    <tal:i18n i18n:translate="">Depends on</tal:i18n>\n+                    <input class="form-control"\n+                           name="depends"\n+                           type="text"\n+                           value="${python:bundle[\'depends\']}"\n+                    />\n+                  </label>\n                 </div>\n                 <div class="form-check mb-3">\n-                  <input class="form-check-input" type="checkbox" value="1" name="load_async" ${python:"checked" if bundle["load_async"] else \'\'} />\n-                  <label class="form-check-label" for="load_async" i18n:translate="label_bundle_js_load_async">\n-                    Async\n+                  <label class="form-check-label">\n+                    <input class="form-check-input"\n+                           checked="${python:\'checked\' if bundle[\'load_async\'] else None}"\n+                           name="load_async"\n+                           type="checkbox"\n+                           value="1"\n+                    />\n+                    <tal:i18n i18n:translate="label_bundle_js_load_async">Async</tal:i18n>\n                   </label>\n                 </div>\n                 <div class="form-check mb-3">\n-                  <input class="form-check-input" type="checkbox" value="1" name="load_defer" ${python:"checked" if bundle["load_defer"] else \'\'} />\n-                  <label class="form-check-label" for="load_defer" i18n:translate="label_bundle_js_load_defer">\n-                    Defer\n+                  <label class="form-check-label">\n+                    <input class="form-check-input"\n+                           checked="${python:\'checked\' if bundle[\'load_defer\'] else None}"\n+                           name="load_defer"\n+                           type="checkbox"\n+                           value="1"\n+                    />\n+                    <tal:i18n i18n:translate="label_bundle_js_load_defer">Defer</tal:i18n>\n                   </label>\n                 </div>\n                 <div class="mb-3">\n-                  <button tal:condition="python:bundle[\'name\']" name="action" value="update" type="submit" class="btn btn-primary me-1" i18n:translate="">Save</button>\n-                  <button tal:condition="python:not bundle[\'name\']" name="action" value="add" type="submit" class="btn btn-success me-1" i18n:translate="">Add</button>\n-                  <button tal:condition="python:bundle[\'name\']" name="action" value="delete" type="submit" class="btn btn-danger" i18n:translate="">Delete</button>\n+                  <button class="btn btn-primary me-1"\n+                          name="action"\n+                          type="submit"\n+                          value="update"\n+                          tal:condition="python:bundle[\'name\']"\n+                          i18n:translate=""\n+                  >Save</button>\n+                  <button class="btn btn-success me-1"\n+                          name="action"\n+                          type="submit"\n+                          value="add"\n+                          tal:condition="python:not bundle[\'name\']"\n+                          i18n:translate=""\n+                  >Add</button>\n+                  <button class="btn btn-danger"\n+                          name="action"\n+                          type="submit"\n+                          value="delete"\n+                          tal:condition="python:bundle[\'name\']"\n+                          i18n:translate=""\n+                  >Delete</button>\n                 </div>\n               </form>\n-          </div>\n+            </details>\n+          </tal:block>\n         </div>\n-      </div>\n-      </tal:block>\n-    </div>\n-    <div class="mt-3">\n-      <h2 i18n:translate="">Additional Resources</h2>\n-      <p i18n:translate="">After the above resources, the following might get loaded:</p>\n-      <dl>\n-        <dt i18n:translate="">Theme CSS and JavaScript</dt>\n-        <dd i18n:translate="">\n+\n+        <div class="mt-3">\n+          <h2 i18n:translate="">Additional Resources</h2>\n+          <p i18n:translate="">After the above resources, the following might get loaded:</p>\n+          <dl>\n+            <dt i18n:translate="">Theme CSS and JavaScript</dt>\n+            <dd i18n:translate="">\n           The activated Plone-Theme usually provides one CSS bundle and sometimes a javascript bundle.\n-        </dd>\n-        <dt i18n:translate="">Custom CSS</dt>\n-        <dd i18n:translate="">\n+            </dd>\n+            <dt i18n:translate="">Custom CSS</dt>\n+            <dd i18n:translate="">\n           At last a custom CSS is loaded, if non-empty.\n           It can be used to override the previous loaded CSS.\n           It is provided for tinkerers and those in need of urgent through-the-web changes.\n-          Hint: <a href="${python:context.absolute_url()}/@@theming-controlpanel#autotoc-item-autotoc-1" i18n:name="link" i18n:translate="">Edit the Custom CSS in the Theming-Control-Panel</a>.\n-        </dd>\n-      </dl>\n-    </div>\n-   </div>\n-   <script>\n-     /* collapse accordion via script here, so that it stays open when JS is disabled */\n-     window.addEventListener(\'DOMContentLoaded\', (event) => {\n-      document.querySelector(".alert.js-errors").style.display = "none";\n-      document.querySelectorAll(".accordion-item:not(.active) .accordion-button").forEach(el => el.classList.add("collapsed"));\n-      document.querySelectorAll(".accordion-item:not(.active) .accordion-collapse").forEach(el => el.classList.remove("show"));\n-    });\n-   </script>\n-</metal:main>\n+          Hint:\n+              <a href="${python:context.absolute_url()}/@@theming-controlpanel#autotoc-item-autotoc-1"\n+                 i18n:name="link"\n+                 i18n:translate=""\n+              >Edit the Custom CSS in the Theming-Control-Panel</a>.\n+            </dd>\n+          </dl>\n+        </div>\n+      </div>\n \n-</body>\n-</html>\n+      <script>\n+        window.addEventListener(\'DOMContentLoaded\', (event) => {\n+          /* Hide the JavaScript warning when JavaScript is enabled. */\n+          document.querySelector(".alert.js-errors").style.display = "none";\n+        });\n+      </script>\n+\n+    </metal:main>\n \n+  </body>\n+</html>\ndiff --git a/Products/CMFPlone/controlpanel/browser/tinymce.py b/Products/CMFPlone/controlpanel/browser/tinymce.py\nindex a7cd3e97ee..aa829445e2 100644\n--- a/Products/CMFPlone/controlpanel/browser/tinymce.py\n+++ b/Products/CMFPlone/controlpanel/browser/tinymce.py\n@@ -5,7 +5,6 @@\n from plone.base.interfaces import ITinyMCEPluginSchema\n from plone.base.interfaces import ITinyMCEResourceTypesSchema\n from plone.base.interfaces import ITinyMCESchema\n-from plone.base.interfaces import ITinyMCESpellCheckerSchema\n from z3c.form import field\n from z3c.form import group\n from z3c.form.browser.checkbox import CheckBoxFieldWidget\n@@ -16,11 +15,6 @@ class TinyMCEPluginForm(group.GroupForm):\n     fields = field.Fields(ITinyMCEPluginSchema)\n \n \n-class TinyMCESpellCheckerForm(group.GroupForm):\n-    label = _("Spell Checker")\n-    fields = field.Fields(ITinyMCESpellCheckerSchema)\n-\n-\n class TinyMCEResourceTypesForm(group.GroupForm):\n     label = _("Resource Types")\n     fields = field.Fields(ITinyMCEResourceTypesSchema)\n@@ -39,7 +33,6 @@ class TinyMCEControlPanelForm(controlpanel.RegistryEditForm):\n     fields = field.Fields(ITinyMCELayoutSchema)\n     groups = (\n         TinyMCEPluginForm,\n-        TinyMCESpellCheckerForm,\n         TinyMCEResourceTypesForm,\n         TinyMCEAdvancedForm,\n     )\ndiff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py\nindex f00871004f..afb3e1df15 100644\n--- a/Products/CMFPlone/interfaces/__init__.py\n+++ b/Products/CMFPlone/interfaces/__init__.py\n@@ -31,7 +31,6 @@\n     ITinyMCEPluginSchema="plone.base.interfaces.controlpanel:ITinyMCEPluginSchema",\n     ITinyMCEResourceTypesSchema="plone.base.interfaces.controlpanel:ITinyMCEResourceTypesSchema",\n     ITinyMCESchema="plone.base.interfaces.controlpanel:ITinyMCESchema",\n-    ITinyMCESpellCheckerSchema="plone.base.interfaces.controlpanel:ITinyMCESpellCheckerSchema",\n     ITypesSchema="plone.base.interfaces.controlpanel:ITypesSchema",\n     IUserGroupsSettingsSchema="plone.base.interfaces.controlpanel:IUserGroupsSettingsSchema",\n     IConfigurationChangedEvent="plone.base.interfaces.events:IConfigurationChangedEvent",\ndiff --git a/Products/CMFPlone/patterns/settings.py b/Products/CMFPlone/patterns/settings.py\nindex 84c9f663a2..5573868983 100644\n--- a/Products/CMFPlone/patterns/settings.py\n+++ b/Products/CMFPlone/patterns/settings.py\n@@ -156,9 +156,6 @@ def tinymce(self):\n             "pictureVariants": self.picture_variants,\n             "imageCaptioningEnabled": self.image_captioning,\n             "linkAttribute": "UID",\n-            # This is for loading the languages on tinymce\n-            "loadingBaseUrl": "{}/++plone++static/components/tinymce-builded/"\n-            "js/tinymce".format(portal_url),\n             "relatedItems": related_items_config,\n             "prependToScalePart": "/@@images/image/",\n             "prependToUrl": "{}/resolveuid/".format(site_path.rstrip("/")),\ndiff --git a/Products/CMFPlone/patterns/tinymce.py b/Products/CMFPlone/patterns/tinymce.py\nindex 27d569ef83..62fca9c63d 100644\n--- a/Products/CMFPlone/patterns/tinymce.py\n+++ b/Products/CMFPlone/patterns/tinymce.py\n@@ -139,31 +139,6 @@ def get_tiny_config(self):\n                 "plonelink ploneimage inserttable |" " cell row column deletetable"\n             )\n \n-        if settings.libraries_spellchecker_choice == "AtD":\n-            mtool = getToolByName(self.context, "portal_membership")\n-            member = mtool.getAuthenticatedMember()\n-            member_id = member.getId()\n-            if member_id:\n-                if "compat3x" not in tiny_config["plugins"]:\n-                    tiny_config["plugins"].append("compat3x")\n-                tiny_config["external_plugins"][\n-                    "AtD"\n-                ] = "{}/++plone++static/tinymce-AtD-plugin/" "editor_plugin.js".format(\n-                    self.nav_root_url\n-                )\n-                # None when Anonymous User\n-                tiny_config["atd_rpc_id"] = "plone-" + member_id\n-                tiny_config["atd_rpc_url"] = self.nav_root_url\n-                tiny_config["atd_show_types"] = ",".join(\n-                    settings.libraries_atd_show_types\n-                )\n-                tiny_config["atd_ignore_strings"] = ",".join(\n-                    settings.libraries_atd_ignore_strings\n-                )\n-                toolbar_additions.append("AtD")\n-        elif settings.libraries_spellchecker_choice == "AtD":\n-            tiny_config["browser_spellcheck"] = True\n-\n         if toolbar_additions:\n             tiny_config["toolbar"] += " | {}".format(" ".join(toolbar_additions))\n \ndiff --git a/Products/CMFPlone/tests/testEmailLogin.py b/Products/CMFPlone/tests/testEmailLogin.py\nindex 87dc5ecaf3..3179e27507 100644\n--- a/Products/CMFPlone/tests/testEmailLogin.py\n+++ b/Products/CMFPlone/tests/testEmailLogin.py\n@@ -79,12 +79,9 @@ def testEmailMemberIdsAllowed(self):\n         # Strange, but valid as id:\n         self.assertTrue(pattern.match("no.address@example"))\n         self.assertTrue(registration.isMemberIdAllowed("no.address@example"))\n-        # http://dev.plone.org/ticket/11616 mentions some non-standard\n-        # email addresses.\n-        # A plus sign in the id gives problems in some parts of the\n-        # UI, so we do not allow it.\n-        self.assertFalse(pattern.match("user+test@example.org"))\n-        self.assertFalse(registration.isMemberIdAllowed("user+test@example.org"))\n+        # testing if it breaks anything (according to https://github.com/plone/Products.CMFPlone/issues/3968)\n+        self.assertTrue(pattern.match("user+test@example.org")) \n+        self.assertTrue(registration.isMemberIdAllowed("user+test@example.org"))\n         # An apostrophe also sounds like a bad idea to use in an id,\n         # though this is a valid email address:\n         self.assertFalse(pattern.match("o\'hara@example.org"))\ndiff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py\nindex f8895a40e0..bd697372d5 100644\n--- a/Products/CMFPlone/tests/testMigrationTool.py\n+++ b/Products/CMFPlone/tests/testMigrationTool.py\n@@ -254,3 +254,27 @@ def test_plone_addonlist_upgrade_all(self):\n         # original versions.\n         self.assertEqual(cmfeditions_version, getversion(cmfeditions_id))\n         self.assertEqual(querystring_version, getversion(querystring_id))\n+\n+\n+class TestPloneUpgradePage(PloneTestCase.PloneTestCase):\n+    def afterSetUp(self):\n+        self.migration = getToolByName(self.portal, "portal_migration")\n+        self.setup = getToolByName(self.portal, "portal_setup")\n+\n+    def test_upgrades(self):\n+        self.setRoles(["Manager"])\n+        view = self.portal.restrictedTraverse("@@plone-upgrade")\n+        self.assertEqual(view.upgrades(), [])\n+        self.setup.setLastVersionForProfile(_DEFAULT_PROFILE, START_PROFILE)\n+        self.assertGreater(len(view.upgrades()), 0)\n+\n+    def test_missing_packages(self):\n+        self.setRoles(["Manager"])\n+        view = self.portal.restrictedTraverse("@@plone-upgrade")\n+        self.assertEqual(view.missing_packages, [])\n+\n+        # Fake a missing package that was installed.\n+        self.setup.setLastVersionForProfile("my.dummy.package:default", 1)\n+        # Delete the cached property.\n+        del view.missing_packages\n+        self.assertEqual(view.missing_packages, ["my.dummy.package"])\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 29ae11ae00..12021ceb0a 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -489,7 +489,7 @@ def test_add_resource(self):\n         add_form.getControl("add").click()\n \n         self.assertIn(\n-            \'<h2 class="accordion-header" id="heading-my-resource">\',\n+            \'<h2 class="accordion-header fs-5 fw-bold">my-resource</h2>\',\n             self.browser.contents,\n         )\n \n@@ -507,6 +507,6 @@ def test_update_resource(self):\n         form.getControl("update").click()\n \n         self.assertIn(\n-            \'<h2 class="accordion-header" id="heading-new-resource-name">\',\n+            \'<h2 class="accordion-header fs-5 fw-bold">new-resource-name</h2>\',\n             self.browser.contents,\n         )\ndiff --git a/Products/CMFPlone/tests/test_patternsettings.py b/Products/CMFPlone/tests/test_patternsettings.py\nindex e485b2bff3..b447b96e51 100644\n--- a/Products/CMFPlone/tests/test_patternsettings.py\n+++ b/Products/CMFPlone/tests/test_patternsettings.py\n@@ -22,15 +22,6 @@ def get_conf(self):\n         )\n         return json.loads(adapter.tinymce()["data-pat-tinymce"])\n \n-    def test_atd_included(self):\n-        registry = getUtility(IRegistry)\n-        settings = registry.forInterface(ITinyMCESchema, prefix="plone")\n-        settings.libraries_spellchecker_choice = "AtD"\n-        login(self.layer["portal"], TEST_USER_NAME)\n-        conf = self.get_conf()\n-        self.assertTrue("compat3x" in conf["tiny"]["plugins"])\n-        self.assertTrue("AtD" in conf["tiny"]["external_plugins"])\n-\n     def test_style_formats(self):\n         conf = self.get_conf()\n         self.assertEqual(len(conf["tiny"]["style_formats"]), 5)\ndiff --git a/news/3756.bugfix b/news/3756.bugfix\ndeleted file mode 100644\nindex 4f3c022774..0000000000\n--- a/news/3756.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix deprecation warnings in "navtree" code + some micro optimizations\n-[jensens]\ndiff --git a/news/3945.bugfix b/news/3945.bugfix\ndeleted file mode 100644\nindex d6e4076422..0000000000\n--- a/news/3945.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Import INavigationRoot from plone.base, removes DeprecationWarning.\n-[@jensens]\n\\ No newline at end of file\ndiff --git a/news/3946.bugfix b/news/3946.bugfix\ndeleted file mode 100644\nindex 1853b16830..0000000000\n--- a/news/3946.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Use `context` instead of `here` in templates.\n-Call `@@main_template` (with prefix `@@`) to optimize lookup.\n-[@jensens]\n\\ No newline at end of file\ndiff --git a/news/3949.bugfix b/news/3949.bugfix\ndeleted file mode 100644\nindex bf15b1c268..0000000000\n--- a/news/3949.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Reduce DeprecationWarnings. [@jensens]\ndiff --git a/news/3952.bugfix b/news/3952.bugfix\ndeleted file mode 100644\nindex a63571e60a..0000000000\n--- a/news/3952.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix TypeError in getGroups sorting\n-[@rohnsha0]\n\\ No newline at end of file\ndiff --git a/news/3960.bugfix b/news/3960.bugfix\ndeleted file mode 100644\nindex b1fe215568..0000000000\n--- a/news/3960.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Remove queryCatalog and getFolderContents skins script.\n-This includes a refactoring in the search RSS and updates to soe tests\n-[@jensens]\ndiff --git a/news/3962.bugfix b/news/3962.bugfix\ndeleted file mode 100644\nindex d49decfcd7..0000000000\n--- a/news/3962.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Products.CMFPlone  must not depend on plone.api [@jensens]\ndiff --git a/news/3964.bugfix b/news/3964.bugfix\ndeleted file mode 100644\nindex 08994471a3..0000000000\n--- a/news/3964.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Removes duplicate `<article id="content">` in controlpanel templates\n-[@szakitibi]\ndiff --git a/news/3965.bugfix b/news/3965.bugfix\ndeleted file mode 100644\nindex de4d0d6091..0000000000\n--- a/news/3965.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Do not test types_not_searched for a element that is not part of the underlying vocabulary.\n-[@jensens]\ndiff --git a/news/3966.bugfix b/news/3966.bugfix\ndeleted file mode 100644\nindex 1c962a9e34..0000000000\n--- a/news/3966.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Remove unused leftover reference to the Zope2 package from test. [@jensens]\ndiff --git a/news/3967.bugfix b/news/3967.bugfix\ndeleted file mode 100644\nindex 8cbd922fef..0000000000\n--- a/news/3967.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Fix: Traceback in maintenance control panel on shutdown if feature is not available.\n-Hide button if action is not possible.\n-[@jensens]\ndiff --git a/news/6103.internal b/news/6103.internal\ndeleted file mode 100644\nindex efbd58ca7e..0000000000\n--- a/news/6103.internal\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Updated metadata version to 6103.\n-[maurits]\ndiff --git a/setup.py b/setup.py\nindex d6a543abca..61c25104b5 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "6.1.0a4.dev0"\n+version = "6.1.0a4.dev1"\n \n \n setup(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-08-02T19:10:12+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/8b4537b532f3d4e0fbfde6e1137d1b87d668c9fc

Merge branch 'master' into pa-discussion-core-addon

Files changed:
A news/6104.internal
M .github/ISSUE_TEMPLATE/PLIP.md
M CHANGES.md
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/__init__.py
M Products/CMFPlone/browser/author.py
M Products/CMFPlone/browser/templates/ajax_main_template.pt
M Products/CMFPlone/browser/templates/main_template.pt
M Products/CMFPlone/exportimport/configure.zcml
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/profiles/default/componentregistry.xml
M Products/CMFPlone/profiles/default/metadata.xml
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/tests/testInterfaces.py
M Products/CMFPlone/tests/testNavigationView.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testWebDAV.py
M Products/CMFPlone/tests/test_defaultpage.py
M Products/CMFPlone/tests/test_zmi.py
M setup.py
D Products/CMFPlone/PropertiesTool.py
D Products/CMFPlone/exportimport/propertiestool.py
D Products/CMFPlone/exportimport/tests/testPropertiesTool.py
D Products/CMFPlone/profiles/default/propertiestool.xml
D Products/CMFPlone/www/addPropertySheet.zpt

b'diff --git a/.github/ISSUE_TEMPLATE/PLIP.md b/.github/ISSUE_TEMPLATE/PLIP.md\nindex e570a1162f..df9efd7ad5 100644\n--- a/.github/ISSUE_TEMPLATE/PLIP.md\n+++ b/.github/ISSUE_TEMPLATE/PLIP.md\n@@ -12,7 +12,7 @@ projects: \'plone/47\'\n \n <!--\n \n-Read https://5.docs.plone.org/develop/coredev/docs/plips.html first!\n+Read https://6.docs.plone.org/contributing/core/plips.html first!\n \n Mention the @plone/framework-team when the PLIP is information complete!\n \ndiff --git a/CHANGES.md b/CHANGES.md\nindex 06a95f78ec..89b8127809 100644\n--- a/CHANGES.md\n+++ b/CHANGES.md\n@@ -15,6 +15,21 @@\n \n <!-- towncrier release notes start -->\n \n+## 6.1.0a4 (2024-08-01)\n+\n+\n+### Breaking changes:\n+\n+- Remove `propertiestool` import step and usage of `portal_properties`.\n+  Remove `site_properties` from `main_template.pt` and ajax template.\n+  Remove `PropertiesTool` module.\n+  [maurits] #125\n+\n+\n+### Internal:\n+\n+- Update the link to the PLIPs page for Plone 6 Documentation. @stevepiercy #3988\n+\n ## 6.1.0a4.dev0 (2024-07-08)\n \n \ndiff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 21fdaf37c9..0c549327a2 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -623,9 +623,8 @@ def browserDefault(self, obj):\n         # 3. If the object has a property default_page set and this gives a list\n         #     of, or single, object id, and that object is is found in the\n         #     folder or is the name of a skin template, return that id\n-        # 4. If the property default_page is set in site_properties and that\n-        #     property contains a list of ids of which one id is found in the\n-        #     folder, return that id\n+        # 4. Look up the property plone.default_page in the registry for\n+        #     magic ids and test these.\n         # 5. If the object implements IBrowserDefault, try to get the selected\n         #     layout.\n         # 6. If the type has a \'folderlisting\' action and no default page is\n@@ -928,7 +927,7 @@ def getUserFriendlyTypes(self, typesList=None):\n         # and selection purposes.\n         #\n         # This is the list of types available in the portal, minus those\n-        # defined in the types_not_searched property in site_properties, if it\n+        # defined in the types_not_searched property in the registry, if it\n         # exists.\n         #\n         # If typesList is given, this is used as the base list; else all types\ndiff --git a/Products/CMFPlone/PropertiesTool.py b/Products/CMFPlone/PropertiesTool.py\ndeleted file mode 100644\nindex 4cc6feb44e..0000000000\n--- a/Products/CMFPlone/PropertiesTool.py\n+++ /dev/null\n@@ -1,144 +0,0 @@\n-from AccessControl import ClassSecurityInfo\n-from AccessControl.class_init import InitializeClass\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from App.special_dtml import DTMLFile\n-from OFS.Folder import Folder\n-from OFS.PropertyManager import PropertyManager\n-from OFS.SimpleItem import SimpleItem\n-from plone.base.interfaces import IPropertiesTool\n-from plone.base.interfaces import ISimpleItemWithProperties\n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.CMFCore.permissions import ManagePortal\n-from Products.CMFCore.utils import UniqueObject\n-from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n-from Products.CMFPlone.utils import WWW_DIR\n-from Products.MailHost.interfaces import IMailHost\n-from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from zope.component import getUtility\n-from zope.component import queryUtility\n-from zope.deprecation import deprecate\n-from zope.interface import implementer\n-\n-\n-@implementer(IPropertiesTool)\n-class PropertiesTool(PloneBaseTool, Folder, UniqueObject):\n-    """Plone properties tool"""\n-\n-    id = "portal_properties"\n-    toolicon = "skins/plone_images/topic_icon.png"\n-\n-    meta_type = "Plone Properties Tool"\n-    meta_types = (\n-        {"name": "Plone Property Sheet", "action": "manage_addPropertySheetForm"},\n-    )\n-\n-    manage_options = (\n-        (Folder.manage_options[0],)\n-        + ({"label": "Overview", "action": "manage_overview"},)\n-        + SimpleItem.manage_options\n-    )\n-\n-    manage_addPropertySheetForm = PageTemplateFile("www/addPropertySheet", globals())\n-\n-    security = ClassSecurityInfo()\n-\n-    security.declareProtected(ManagePortal, "manage_overview")\n-    manage_overview = DTMLFile("explainPropertiesTool", WWW_DIR)\n-\n-    def all_meta_types(self, interfaces=None):\n-        return self.meta_types\n-\n-    security.declareProtected(ManagePortal, "addPropertySheet")\n-\n-    def addPropertySheet(self, id, title="", propertysheet=None):\n-        # Add a new PropertySheet.\n-        o = SimpleItemWithProperties(id, title)\n-\n-        # copy the propertysheet values onto the new instance\n-        if propertysheet is not None:\n-            if not hasattr(propertysheet, "propertyIds"):\n-                raise TypeError("propertysheet needs to be a PropertyManager")\n-\n-            for property in propertysheet.propertyMap():\n-                pid = property.get("id")\n-                ptype = property.get("type")\n-                pvalue = propertysheet.getProperty(pid)\n-                if not hasattr(o, pid):\n-                    o._setProperty(pid, pvalue, ptype)\n-\n-        self._setObject(id, o)\n-\n-    security.declareProtected(ManagePortal, "manage_addPropertySheet")\n-\n-    def manage_addPropertySheet(self, id, title="", propertysheet=None, REQUEST=None):\n-        """Add a instance of a Property Sheet if handed a\n-        propertysheet put the properties into new propertysheet.\n-        """\n-        self.addPropertySheet(id, title, propertysheet)\n-\n-        if REQUEST is not None:\n-            return self.manage_main()\n-\n-    #\n-    #   \'portal_properties\' interface methods\n-    #\n-    security.declareProtected(ManagePortal, "editProperties")\n-\n-    def editProperties(self, props):\n-        # Change portal settings.\n-        aq_parent(aq_inner(self)).manage_changeProperties(props)\n-        if hasattr(self, "propertysheets"):\n-            ps = self.propertysheets\n-            if hasattr(ps, "props"):\n-                ps.props.manage_changeProperties(props)\n-\n-    def title(self):\n-        site = queryUtility(ISiteRoot)\n-        if site is None:\n-            # fallback\n-            return aq_parent(aq_inner(self)).title\n-        return site.title\n-\n-    def smtp_server(self):\n-        return getUtility(IMailHost).smtp_host\n-\n-    @deprecate(\n-        "The portal portal_properties tool will be removed in Plone 6.1. "\n-        "Use the portal_registry instead. "\n-        "Check https://github.com/plone/Products.CMFPlone/issues/125 "\n-        "for more details."\n-    )\n-    def hasProperty(self, id):\n-        return super().hasProperty(id)\n-\n-\n-InitializeClass(PropertiesTool)\n-\n-\n-@implementer(ISimpleItemWithProperties)\n-class SimpleItemWithProperties(PropertyManager, SimpleItem):\n-    """\n-    A common base class for objects with configurable\n-    properties in a fixed schema.\n-    """\n-\n-    def __init__(self, id, title=""):\n-        self.id = id\n-        self.title = title\n-\n-    meta_type = "Plone Property Sheet"\n-\n-    manage_options = PropertyManager.manage_options + SimpleItem.manage_options\n-\n-    @deprecate(\n-        "The portal portal_properties tool will be removed in Plone 6.1. "\n-        "Use the portal_registry instead. "\n-        "Check https://github.com/plone/Products.CMFPlone/issues/125 "\n-        "for more details."\n-    )\n-    def hasProperty(self, id):\n-        return super().hasProperty(id)\n-\n-\n-InitializeClass(SimpleItemWithProperties)\ndiff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py\nindex ff52822e9e..f9fab8c26f 100644\n--- a/Products/CMFPlone/__init__.py\n+++ b/Products/CMFPlone/__init__.py\n@@ -153,7 +153,6 @@ def initialize(context):\n     from Products.CMFPlone import patches  # noqa\n     from Products.CMFPlone import PloneControlPanel\n     from Products.CMFPlone import PloneTool\n-    from Products.CMFPlone import PropertiesTool\n     from Products.CMFPlone import RegistrationTool\n     from Products.CMFPlone import SkinsTool\n     from Products.CMFPlone import TranslationServiceTool\n@@ -166,7 +165,6 @@ def initialize(context):\n         PloneTool.PloneTool,\n         WorkflowTool.WorkflowTool,\n         CachingPolicyManager.CachingPolicyManager,\n-        PropertiesTool.PropertiesTool,\n         MigrationTool.MigrationTool,\n         PloneControlPanel.PloneControlPanel,\n         RegistrationTool.RegistrationTool,\ndiff --git a/Products/CMFPlone/browser/author.py b/Products/CMFPlone/browser/author.py\nindex 644099ea71..2b0fef236c 100644\n--- a/Products/CMFPlone/browser/author.py\n+++ b/Products/CMFPlone/browser/author.py\n@@ -5,7 +5,6 @@\n from plone.base.interfaces.controlpanel import IMailSchema\n from plone.base.utils import pretty_title_or_id\n from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.interfaces import IPropertiesTool\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n from Products.MailHost.interfaces import IMailHost\n@@ -201,11 +200,7 @@ def home_folder(self, username):\n         return self.membership_tool.getHomeFolder(id=username)\n \n     def __call__(self):\n-        self.portal_properties = getUtility(IPropertiesTool)\n-\n         self.portal_catalog = getToolByName(self.context, "portal_catalog")\n-\n-        # XXX: getUtility call does not work.\n         self.membership_tool = getToolByName(self.context, "portal_membership")\n \n         self.portal_state = getMultiAdapter(\ndiff --git a/Products/CMFPlone/browser/templates/ajax_main_template.pt b/Products/CMFPlone/browser/templates/ajax_main_template.pt\nindex 81eab03a4a..f4efc3b8e7 100644\n--- a/Products/CMFPlone/browser/templates/ajax_main_template.pt\n+++ b/Products/CMFPlone/browser/templates/ajax_main_template.pt\n@@ -15,7 +15,6 @@\n           dummy python: plone_layout.mark_view(view);\n           portal_url python:portal_state.portal_url();\n           checkPermission python:context.restrictedTraverse(\'portal_membership\').checkPermission;\n-          site_properties python:context.restrictedTraverse(\'portal_properties\').site_properties;\n           ajax_include_head python:request.get(\'ajax_include_head\', False);\n           ajax_load python:False;"\n       i18n:domain="plone"\ndiff --git a/Products/CMFPlone/browser/templates/main_template.pt b/Products/CMFPlone/browser/templates/main_template.pt\nindex 9bffd9a9bb..efe9eac05e 100644\n--- a/Products/CMFPlone/browser/templates/main_template.pt\n+++ b/Products/CMFPlone/browser/templates/main_template.pt\n@@ -15,7 +15,6 @@\n           dummy python: plone_layout.mark_view(view);\n           portal_url python:portal_state.portal_url();\n           checkPermission python:context.restrictedTraverse(\'portal_membership\').checkPermission;\n-          site_properties python:context.restrictedTraverse(\'portal_properties\').site_properties;\n           ajax_include_head python:request.get(\'ajax_include_head\', False);\n           ajax_load python:False;"\n       i18n:domain="plone"\ndiff --git a/Products/CMFPlone/exportimport/configure.zcml b/Products/CMFPlone/exportimport/configure.zcml\nindex ca451845e8..b3fe625468 100644\n--- a/Products/CMFPlone/exportimport/configure.zcml\n+++ b/Products/CMFPlone/exportimport/configure.zcml\n@@ -54,19 +54,9 @@\n     <depends name="catalog" />\n     <depends name="viewlets" />\n     <depends name="controlpanel" />\n-    <depends name="propertiestool" />\n     <depends name="workflow" />\n   </genericsetup:importStep>\n \n-  <genericsetup:importStep\n-      name="propertiestool"\n-      title="Plone Properties"\n-      description="Import plone properties tool and subobjects."\n-      handler="Products.CMFPlone.exportimport.propertiestool.importPloneProperties"\n-      >\n-    <depends name="componentregistry" />\n-  </genericsetup:importStep>\n-\n   <genericsetup:importStep\n       name="update-workflow-rolemap"\n       title="Update workflow role mappings"\n@@ -105,13 +95,6 @@\n       handler="Products.CMFPlone.exportimport.memberdata_properties.exportMemberDataProperties"\n       />\n \n-  <genericsetup:exportStep\n-      name="propertiestool"\n-      title="Plone Properties"\n-      description="Export plone properties tool and subobjects."\n-      handler="Products.CMFPlone.exportimport.propertiestool.exportPloneProperties"\n-      />\n-\n   <genericsetup:exportStep\n       name="viewlets"\n       title="Viewlet Settings"\n@@ -119,34 +102,12 @@\n       handler="plone.app.viewletmanager.exportimport.storage.exportViewletSettingsStorage"\n       />\n \n-  <adapter\n-      factory=".propertiestool.PlonePropertiesToolXMLAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="plone.base.interfaces.IPropertiesTool\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n-  <adapter\n-      factory=".propertiestool.SimpleItemWithPropertiesXMLAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="plone.base.interfaces.ISimpleItemWithProperties\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n   <adapter\n       factory="Products.CMFCore.exportimport.content.StructureFolderWalkingAdapter"\n       provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n       for="Products.CMFCore.interfaces.ISiteRoot"\n       />\n \n-  <adapter\n-      factory=".propertiestool.SimpleItemWithPropertiesXMLAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="Products.CMFCore.interfaces.IMemberDataTool\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      zcml:condition="not-installed Products.CMFCore.exportimport.memberdata"\n-      />\n-\n   <adapter\n       factory=".controlpanel.ControlPanelXMLAdapter"\n       provides="Products.GenericSetup.interfaces.IBody"\ndiff --git a/Products/CMFPlone/exportimport/propertiestool.py b/Products/CMFPlone/exportimport/propertiestool.py\ndeleted file mode 100644\nindex 94e21a1326..0000000000\n--- a/Products/CMFPlone/exportimport/propertiestool.py\n+++ /dev/null\n@@ -1,140 +0,0 @@\n-"""Plone Properties tool setup handlers.\n-\n-$Id:$\n-"""\n-\n-from plone.base.interfaces import IPropertiesTool as IPlonePropertiesTool\n-from plone.base.interfaces import ISimpleItemWithProperties\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n-from Products.GenericSetup.interfaces import IBody\n-from Products.GenericSetup.interfaces import INode\n-from Products.GenericSetup.utils import ObjectManagerHelpers\n-from Products.GenericSetup.utils import PropertyManagerHelpers\n-from Products.GenericSetup.utils import XMLAdapterBase\n-from zope.component import queryMultiAdapter\n-\n-\n-_FILENAME = "propertiestool.xml"\n-\n-\n-def importPloneProperties(context):\n-    """Import plone properties tool."""\n-    site = context.getSite()\n-    logger = context.getLogger("propertiestool")\n-    ptool = getToolByName(site, "portal_properties")\n-\n-    body = context.readDataFile(_FILENAME)\n-    if body is None:\n-        return\n-\n-    importer = queryMultiAdapter((ptool, context), IBody)\n-    if importer is None:\n-        logger.warning("Import adapter missing.")\n-        return\n-\n-    importer.body = body\n-    logger.info("Properties tool imported.")\n-\n-\n-def exportPloneProperties(context):\n-    """Export plone properties tool."""\n-    site = context.getSite()\n-    logger = context.getLogger("propertiestool")\n-    ptool = getToolByName(site, "portal_properties", None)\n-    if ptool is None:\n-        return\n-\n-    exporter = queryMultiAdapter((ptool, context), IBody)\n-    # IBody(ptool)\n-    if exporter is None:\n-        logger.warning("Export adapter missing.")\n-        return\n-\n-    context.writeDataFile(_FILENAME, exporter.body, exporter.mime_type)\n-    logger.info("Properties tool exported.")\n-\n-\n-class SimpleItemWithPropertiesXMLAdapter(XMLAdapterBase, PropertyManagerHelpers):\n-\n-    """Node im- and exporter for SimpleItemWithProperties."""\n-\n-    __used_for__ = ISimpleItemWithProperties\n-\n-    def _exportNode(self):\n-        """Export the object as a DOM node."""\n-        # self._doc = doc\n-        node = self._getObjectNode("object")\n-        node.appendChild(self._extractProperties())\n-        return node\n-\n-    def _importNode(self, node):\n-        """Import the object from the DOM node."""\n-        self._initProperties(node)\n-\n-    node = property(_exportNode, _importNode)\n-\n-\n-class PlonePropertiesToolXMLAdapter(XMLAdapterBase, ObjectManagerHelpers):\n-\n-    """Node im- and exporter for Plone PropertiesTool."""\n-\n-    __used_for__ = IPlonePropertiesTool\n-\n-    def _exportNode(self):\n-        """Export the object as a DOM node."""\n-        # self._doc = doc\n-        node = self._getObjectNode("object")\n-        # node.setAttribute(\'xmlns:i18n\', I18NURI)\n-        node.appendChild(self._extractObjects())\n-        return node\n-\n-    def _importNode(self, node):\n-        """Import the object from the DOM node."""\n-        if self.environ.shouldPurge():\n-            self._purgeObjects()\n-\n-        self._initObjects(node)\n-\n-    def _initObjects(self, node):\n-        """Import subobjects"""\n-        # XXX: We could just use the _initObjects() from\n-        # ObjectManagerHelpers except that it looks up the object\n-        # constructor from Products.meta_type and\n-        # SimpleItemWithProperties doesn\'t get registered there.\n-        for child in node.childNodes:\n-            if child.nodeName != "object":\n-                continue\n-            if child.hasAttribute("deprecated"):\n-                continue\n-            parent = self.context\n-\n-            obj_id = str(child.getAttribute("name"))\n-            if obj_id not in parent:\n-                parent._setObject(obj_id, SimpleItemWithProperties(obj_id))\n-\n-            if child.hasAttribute("insert-before"):\n-                insert_before = child.getAttribute("insert-before")\n-                if insert_before == "*":\n-                    parent.moveObjectsToTop(obj_id)\n-                else:\n-                    try:\n-                        position = parent.getObjectPosition(insert_before)\n-                        parent.moveObjectToPosition(obj_id, position)\n-                    except ValueError:\n-                        pass\n-            elif child.hasAttribute("insert-after"):\n-                insert_after = child.getAttribute("insert-after")\n-                if insert_after == "*":\n-                    parent.moveObjectsToBottom(obj_id)\n-                else:\n-                    try:\n-                        position = parent.getObjectPosition(insert_after)\n-                        parent.moveObjectToPosition(obj_id, position + 1)\n-                    except ValueError:\n-                        pass\n-\n-            obj = getattr(self.context, obj_id)\n-            importer = queryMultiAdapter((obj, self.environ), INode)\n-            if importer:\n-                importer.node = child\ndiff --git a/Products/CMFPlone/exportimport/tests/testPropertiesTool.py b/Products/CMFPlone/exportimport/tests/testPropertiesTool.py\ndeleted file mode 100644\nindex 48e13f8075..0000000000\n--- a/Products/CMFPlone/exportimport/tests/testPropertiesTool.py\n+++ /dev/null\n@@ -1,95 +0,0 @@\n-from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase\n-from Products.CMFPlone.PropertiesTool import PropertiesTool\n-from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n-from zope.component import provideAdapter\n-\n-\n-_PROPERTYSHEET_XML = b"""\\\n-<?xml version="1.0" encoding="utf-8"?>\n-<object name="site_properties" meta_type="Plone Property Sheet">\n- <property name="title">Site wide properties</property>\n- <property name="displayPublicationDateInByline"\n-    type="boolean">True</property>\n-</object>\n-"""\n-\n-_PROPERTIESTOOL_XML = b"""\\\n-<?xml version="1.0" encoding="utf-8"?>\n-<object name="portal_properties" meta_type="Plone Properties Tool">\n- <object name="site_properties" meta_type="Plone Property Sheet">\n-  <property name="title">Site wide properties</property>\n-  <property name="displayPublicationDateInByline"\n-     type="boolean">True</property>\n- </object>\n-</object>\n-"""\n-\n-\n-class PropertySheetXMLAdapterTests(BodyAdapterTestCase):\n-    def _getTargetClass(self):\n-        from Products.CMFPlone.exportimport.propertiestool import (\n-            SimpleItemWithPropertiesXMLAdapter,\n-        )\n-\n-        return SimpleItemWithPropertiesXMLAdapter\n-\n-    def _populate(self, obj):\n-        obj.manage_changeProperties(title="Site wide properties")\n-        obj.manage_addProperty("displayPublicationDateInByline", True, "boolean")\n-\n-    def setUp(self):\n-        from plone.base.interfaces import ISimpleItemWithProperties\n-        from Products.GenericSetup.interfaces import IBody\n-        from Products.GenericSetup.interfaces import ISetupEnviron\n-\n-        provideAdapter(\n-            self._getTargetClass(), (ISimpleItemWithProperties, ISetupEnviron), IBody\n-        )\n-\n-        self._obj = SimpleItemWithProperties("site_properties")\n-        self._BODY = _PROPERTYSHEET_XML\n-\n-\n-class PropertiesToolXMLAdapterTests(BodyAdapterTestCase):\n-    def _getTargetClass(self):\n-        from Products.CMFPlone.exportimport.propertiestool import (\n-            PlonePropertiesToolXMLAdapter,\n-        )\n-\n-        return PlonePropertiesToolXMLAdapter\n-\n-    def _populate(self, obj):\n-        obj._setObject("site_properties", SimpleItemWithProperties("site_properties"))\n-        obj.site_properties.manage_changeProperties(title="Site wide properties")\n-        obj.site_properties.manage_addProperty(\n-            "displayPublicationDateInByline", True, "boolean"\n-        )\n-\n-    def setUp(self):\n-        from plone.base.interfaces import IPropertiesTool\n-        from plone.base.interfaces import ISimpleItemWithProperties\n-        from Products.CMFPlone.exportimport.propertiestool import (\n-            SimpleItemWithPropertiesXMLAdapter,\n-        )\n-        from Products.GenericSetup.interfaces import IBody\n-        from Products.GenericSetup.interfaces import ISetupEnviron\n-\n-        provideAdapter(self._getTargetClass(), (IPropertiesTool, ISetupEnviron), IBody)\n-        provideAdapter(\n-            SimpleItemWithPropertiesXMLAdapter,\n-            (ISimpleItemWithProperties, ISetupEnviron),\n-            IBody,\n-        )\n-\n-        self._obj = PropertiesTool()\n-        self._BODY = _PROPERTIESTOOL_XML\n-\n-\n-def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(PropertySheetXMLAdapterTests))\n-    suite.addTest(makeSuite(PropertiesToolXMLAdapterTests))\n-    return suite\ndiff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py\nindex afb3e1df15..b275ed2efd 100644\n--- a/Products/CMFPlone/interfaces/__init__.py\n+++ b/Products/CMFPlone/interfaces/__init__.py\n@@ -51,8 +51,6 @@\n     IPasswordResetToolView="plone.base.interfaces.password_reset:IPasswordResetToolView",\n     IPWResetTool="plone.base.interfaces.password_reset:IPWResetTool",\n     IPatternsSettings="plone.base.interfaces.patterns:IPatternsSettings",\n-    IPropertiesTool="plone.base.interfaces.properties:IPropertiesTool",\n-    ISimpleItemWithProperties="plone.base.interfaces.properties:ISimpleItemWithProperties",\n     IBundleRegistry="plone.base.interfaces.resources:IBundleRegistry",\n     IResourceRegistry="plone.base.interfaces.resources:IResourceRegistry",\n     IMigratingPloneSiteRoot="plone.base.interfaces.siteroot:IMigratingPloneSiteRoot",\ndiff --git a/Products/CMFPlone/profiles/default/componentregistry.xml b/Products/CMFPlone/profiles/default/componentregistry.xml\nindex f35d005476..f1195c4eb2 100644\n--- a/Products/CMFPlone/profiles/default/componentregistry.xml\n+++ b/Products/CMFPlone/profiles/default/componentregistry.xml\n@@ -68,9 +68,6 @@\n     <utility factory="plone.app.viewletmanager.storage.ViewletSettingsStorage"\n              interface="plone.app.viewletmanager.interfaces.IViewletSettingsStorage"\n     />\n-    <utility interface="Products.CMFCore.interfaces.IPropertiesTool"\n-             object="portal_properties"\n-    />\n     <utility interface="Products.CMFCore.interfaces.ISiteRoot"\n              object=""\n     />\ndiff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml\nindex d6d72c30c5..74dbe99aa0 100644\n--- a/Products/CMFPlone/profiles/default/metadata.xml\n+++ b/Products/CMFPlone/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-  <version>6103</version>\n+  <version>6104</version>\n </metadata>\ndiff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml\ndeleted file mode 100644\nindex d90844dacd..0000000000\n--- a/Products/CMFPlone/profiles/default/propertiestool.xml\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-<?xml version="1.0" encoding="utf-8"?>\n-<object meta_type="Plone Properties Tool"\n-        name="portal_properties"\n->\n-  <object meta_type="Plone Property Sheet"\n-          name="navtree_properties"\n-  >\n-    <property name="title">NavigationTree properties</property>\n-  </object>\n-  <object meta_type="Plone Property Sheet"\n-          name="site_properties"\n-  >\n-    <property name="title">Site wide properties</property>\n-  </object>\n-</object>\ndiff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml\nindex dfbff83fe0..1a225138d1 100644\n--- a/Products/CMFPlone/profiles/default/toolset.xml\n+++ b/Products/CMFPlone/profiles/default/toolset.xml\n@@ -42,9 +42,6 @@\n   <required class="Products.CMFPlone.PasswordResetTool.PasswordResetTool"\n             tool_id="portal_password_reset"\n   />\n-  <required class="Products.CMFPlone.PropertiesTool.PropertiesTool"\n-            tool_id="portal_properties"\n-  />\n   <required class="Products.CMFPlone.RegistrationTool.RegistrationTool"\n             tool_id="portal_registration"\n   />\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex a44348e62f..1766742b07 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -6,8 +6,6 @@\n from Products.CMFPlone.PloneControlPanel import PloneControlPanel\n from Products.CMFPlone.PloneTool import PloneTool\n from Products.CMFPlone.Portal import PloneSite\n-from Products.CMFPlone.PropertiesTool import PropertiesTool\n-from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n from Products.CMFPlone.RegistrationTool import RegistrationTool\n from Products.CMFPlone.SkinsTool import SkinsTool\n from Products.CMFPlone.TypesTool import TypesTool\n@@ -300,8 +298,6 @@ def _testStuff(self):\n     (PloneConfiglet, ()),\n     (PloneTool, ()),\n     (PloneSite, ()),\n-    (PropertiesTool, ()),\n-    (SimpleItemWithProperties, ()),\n     (RegistrationTool, ()),\n     (SkinsTool, ()),\n     (TypesTool, ()),\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex fa8d525a6b..aeddd0ba26 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -121,29 +121,6 @@ def path(x):\n         self.assertEqual(subfolder221map["item"].getPath(), path(subfolder221))\n         self.assertEqual(len(subfolder221map["children"]), 0)\n \n-    def testSitemapUnchangedWithTopLevel(self):\n-        # Test that setting topLevel does not alter the sitemap\n-        ntp = self.portal.portal_properties.navtree_properties\n-        for topLevel in range(0, 5):\n-            ntp.manage_changeProperties(topLevel=topLevel)\n-            view = self.view_class(self.portal, self.request)\n-            sitemap = view.siteMap()\n-            self.assertEqual(\n-                sitemap["children"][-1]["item"].getPath(), "/plone/folder2"\n-            )\n-\n-    def testSitemapUnchangedWithBottomLevel(self):\n-        # Test that setting bottomLevel does not alter the sitemap\n-        ntp = self.portal.portal_properties.navtree_properties\n-        for bottomLevel in range(0, 5):\n-            ntp.manage_changeProperties(bottomLevel=bottomLevel)\n-            view = self.view_class(self.portal, self.request)\n-            sitemap = view.siteMap()\n-            self.assertEqual(\n-                sitemap["children"][-1]["item"].getPath(), "/plone/folder2"\n-            )\n-            self.assertTrue(len(sitemap["children"][-1]["children"]) > 0)\n-\n     def testSitemapWithNavigationRoot(self):\n         self.navigation_settings.root = "/folder2"\n         view = self.view_class(self.portal, self.request)\n@@ -270,7 +247,7 @@ def testTabInfo(self):\n         self.assertTrue("review_state" in tab and tab["review_state"])\n \n     def testDisableFolderTabs(self):\n-        # Setting the site_property disable_folder_sections should remove\n+        # Setting the registry setting generate_tabs to False should remove\n         # all folder based tabs\n         self.navigation_settings.generate_tabs = False\n         view = self.view_class(self.portal, self.request)\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 5fa0b55ae4..57d7959e3c 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -42,7 +42,6 @@ def afterSetUp(self):\n         self.types = self.portal.portal_types\n         self.cp = self.portal.portal_controlpanel\n         self.actions = self.portal.portal_actions\n-        self.properties = self.portal.portal_properties\n         self.memberdata = self.portal.portal_memberdata\n         self.catalog = self.portal.portal_catalog\n         self.groups = self.portal.portal_groups\n@@ -146,35 +145,11 @@ def testNoPortalNavigationTool(self):\n         # portal_navigation should have been removed\n         self.assertFalse("portal_navigation" in self.portal)\n \n-    def testNoFormProperties(self):\n-        # form_properties should have been removed\n-        self.assertFalse("form_properties" in self.properties)\n-\n-    def testNoNavigationProperties(self):\n-        # navigation_properties should have been removed\n-        self.assertFalse("navigation_properties" in self.properties)\n-\n     def testFormToolTipsProperty(self):\n         # formtooltips should have been removed\n         self.assertFalse(self.memberdata.hasProperty("formtooltips"))\n \n     def testNavTreeProperties(self):\n-        # navtree_properties should contain the new properties\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("parentMetaTypesNotToQuery")\n-        )\n-        self.assertFalse(self.properties.navtree_properties.hasProperty("sitemapDepth"))\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("showAllParents")\n-        )\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("metaTypesNotToList")\n-        )  # noqa\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("sortAttribute")\n-        )\n-        self.assertFalse(self.properties.navtree_properties.hasProperty("sortOrder"))\n-\n         registry = getUtility(IRegistry)\n         self.assertTrue("plone.workflow_states_to_show" in registry)\n         self.assertTrue("plone.filter_on_workflow" in registry)\n@@ -939,9 +914,6 @@ def testFinalStepsWithMembersFolderDeleted(self):\n \n \n class TestManagementPageCharset(PloneTestCase.PloneTestCase):\n-    def afterSetUp(self):\n-        self.properties = self.portal.portal_properties\n-\n     def testManagementPageCharset(self):\n         manage_charset = getattr(self.portal, "management_page_charset", None)\n         self.assertTrue(manage_charset)\ndiff --git a/Products/CMFPlone/tests/testWebDAV.py b/Products/CMFPlone/tests/testWebDAV.py\nindex 2105ae4390..e3938407ef 100644\n--- a/Products/CMFPlone/tests/testWebDAV.py\n+++ b/Products/CMFPlone/tests/testWebDAV.py\n@@ -18,17 +18,6 @@\n """\n \n \n-class TestDAVProperties(PloneTestCase.PloneTestCase):\n-    def testPropertiesToolTitle(self):\n-        ptool = getToolByName(self.portal, "portal_properties")\n-        psets = dict(ptool.propertysheets.items())\n-        self.assertTrue("webdav" in psets.keys())\n-        default = psets["webdav"]\n-        items = dict(default.propertyItems())\n-        self.assertTrue("displayname" in items.keys())\n-        self.assertEqual(items["displayname"], ptool.title)\n-\n-\n class TestPUTObjects(PloneTestCase.PloneTestCase):\n     # PUT objects into Plone including special cases like index_html.\n     # Confirms fix for http://dev.plone.org/plone/ticket/1375\ndiff --git a/Products/CMFPlone/tests/test_defaultpage.py b/Products/CMFPlone/tests/test_defaultpage.py\nindex 3be7eafd7d..ac633b5d6b 100644\n--- a/Products/CMFPlone/tests/test_defaultpage.py\n+++ b/Products/CMFPlone/tests/test_defaultpage.py\n@@ -106,8 +106,8 @@ def test_get_default_page_step_3_2(self):\n         self.assertEqual("d1", get_default_page(self.folder))\n \n     def test_get_default_page_step_4(self):\n-        # 4. Else, look up the property default_page in site_properties for\n-        #   magic ids and test these\n+        # 4. Else, look up the property plone.default_page in the registry for\n+        #    magic ids and test these\n         registry = getUtility(IRegistry)\n         registry["plone.default_page"] = ["d1"]\n         self.folder.invokeFactory("Document", "d1", title="Doc 1")\ndiff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py\nindex 3ec5997246..8be5e75e98 100644\n--- a/Products/CMFPlone/tests/test_zmi.py\n+++ b/Products/CMFPlone/tests/test_zmi.py\n@@ -121,11 +121,6 @@ def test_portal_modifier(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=f"{url} is broken")\n \n-    def test_portal_properties(self):\n-        url = "portal_properties/manage_main"\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=f"{url} is broken")\n-\n     def test_portal_purgepolicy(self):\n         url = "portal_purgepolicy/manage_propertiesForm"\n         view = self.portal.restrictedTraverse(url)\ndiff --git a/Products/CMFPlone/www/addPropertySheet.zpt b/Products/CMFPlone/www/addPropertySheet.zpt\ndeleted file mode 100644\nindex 2d01f3bcda..0000000000\n--- a/Products/CMFPlone/www/addPropertySheet.zpt\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-<tal:doctype tal:replace="structure string:&lt;!DOCTYPE html&gt;" />\n-<html>\n-<head>\n-<meta http-equiv="content-type" content="text/html;charset=utf-8"\n-      tal:define="charset context/management_page_charset | string:utf-8;"\n-      tal:attributes="content string:text/html;;charset=$charset;"/>\n-\n-<title>Zope</title>\n-<link rel="stylesheet" type="text/css" href="/manage_page_style.css" />\n-\n-</head>\n-<body bgcolor="#ffffff" link="#000099" alink="#000099" vlink="#000099">\n-\n-  <div class="form-title">\n-  Add Propertysheet\n-  </div>\n-\n-<form action="manage_addPropertySheet" method="post">\n-    <div class="form-help">\n-    Enter an ID and title to add a new PropertySheet.\n-    </div>\n-    <div class="form-label">\n-    Id\n-    </div>\n-    <input type="text" name="id" size="40" />\n-\n-    <div class="form-label">\n-    Title\n-    </div>\n-    <input type="text" name="title" size="40" value="" />\n-\n-    <div class="form-element">\n-    <input class="form-element" type="submit" name="submit"\n-     value=" Add PropertySheet " />\n-    </div>\n-</form>\n-\n-  </body>\n-</html>\ndiff --git a/news/6104.internal b/news/6104.internal\nnew file mode 100644\nindex 0000000000..05e73167c4\n--- /dev/null\n+++ b/news/6104.internal\n@@ -0,0 +1,2 @@\n+Updated metadata version to 6104.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex 61c25104b5..eba4785df4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "6.1.0a4.dev1"\n+version = "6.1.0a5.dev0"\n \n \n setup(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-08-13T18:52:20+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/67133211feb496fd2912911b1dffafb141ac7744

Merge branch 'master' into pa-discussion-core-addon

Files changed:
A news/3860.bugfix
A news/3998.bugfix
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt
M Products/CMFPlone/utils.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex ae4d6cbe27..505f493748 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -14,6 +14,7 @@\n from zope.component import queryUtility\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n+from zope.schema.interfaces import IVocabularyFactory\n from ZTUtils import make_query\n \n import json\n@@ -183,7 +184,28 @@ def filter_types(self, types):\n         plone_utils = getToolByName(self.context, "plone_utils")\n         if not isinstance(types, list):\n             types = [types]\n-        return plone_utils.getUserFriendlyTypes(types)\n+\n+        # We want to have the configured types to be exposed in the search sorted for humans (by translated Title).\n+        # Those are stored in the Plone registry. They are called here UserFriendlyTypes.\n+        #\n+        # Confusingly, on the other hand we have the ReallyUserFriendlyTypes vocabulary from\n+        # plone.app.vocabularies, which is already sorted accordingly and contain all possible types,\n+        # except "Temp Folder", "Plone Site" and deprecated types.\n+\n+        # fetch the sorted ReallyUserFriendlyTypes vocabulary\n+        vocab_factory = queryUtility(\n+            IVocabularyFactory, "plone.app.vocabularies.ReallyUserFriendlyTypes"\n+        )\n+        vocab = vocab_factory(self.context)\n+\n+        # get the configured values from the registry and pass the input types to be reduced to possible values\n+        user_friendly_types = plone_utils.getUserFriendlyTypes(types)\n+\n+        # Filter the sorted ReallyUserFriendlyTypes down to the configured values from the registry,\n+        #  but keep the order.\n+        sorted_types = [term.value for term in vocab if term.value in user_friendly_types]\n+\n+        return sorted_types\n \n     def types_list(self):\n         # only show those types that have any content\ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex 3e0d611acf..5e89454238 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -87,7 +87,7 @@\n             </a>\n           </div>\n \n-          <div class="nav-item dropdown" id="search-filter">\n+          <div class="nav-item dropdown me-3" id="search-filter">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="search-filter-toggle" i18n:translate="narrow_search_options">\n               Filter the results\n             </a>\ndiff --git a/Products/CMFPlone/utils.py b/Products/CMFPlone/utils.py\nindex 11bead9cb7..03ffff10cc 100644\n--- a/Products/CMFPlone/utils.py\n+++ b/Products/CMFPlone/utils.py\n@@ -163,11 +163,11 @@ def isExpired(content):\n     # convert to a DateTime\n \n     # Try DC accessor first\n-    if base_hasattr(content, "ExpirationDate"):\n+    if base_utils.base_hasattr(content, "ExpirationDate"):\n         expiry = content.ExpirationDate\n \n     # Try the direct way\n-    if not expiry and base_hasattr(content, "expires"):\n+    if not expiry and base_utils.base_hasattr(content, "expires"):\n         expiry = content.expires\n \n     # See if we have a callable\n@@ -675,13 +675,13 @@ def _check_for_collision(contained_by, id, **kwargs):\n     # Check for an existing object.\n     if id in contained_by:\n         existing_obj = getattr(contained_by, id, None)\n-        if base_hasattr(existing_obj, "portal_type"):\n+        if base_utils.base_hasattr(existing_obj, "portal_type"):\n             return _(\n                 "There is already an item named ${name} in this folder.",\n                 mapping={"name": id},\n             )\n \n-    if base_hasattr(contained_by, "checkIdAvailable"):\n+    if base_utils.base_hasattr(contained_by, "checkIdAvailable"):\n         # This used to be called from the check_id skin script,\n         # which would check the permission automatically,\n         # and the code would catch the Unauthorized exception.\n@@ -690,7 +690,7 @@ def _check_for_collision(contained_by, id, **kwargs):\n                 return _("${name} is reserved.", mapping={"name": id})\n \n     # containers may implement this hook to further restrict ids\n-    if base_hasattr(contained_by, "checkValidId"):\n+    if base_utils.base_hasattr(contained_by, "checkValidId"):\n         try:\n             contained_by.checkValidId(id)\n         except ConflictError:\ndiff --git a/news/3860.bugfix b/news/3860.bugfix\nnew file mode 100644\nindex 0000000000..e9ef737970\n--- /dev/null\n+++ b/news/3860.bugfix\n@@ -0,0 +1 @@\n+Sort portal types in search filter according to `ReallyUserFriendlyTypes` using `unidecode` in `plone.app.vocabularies`. @rohnsha0\n\\ No newline at end of file\ndiff --git a/news/3998.bugfix b/news/3998.bugfix\nnew file mode 100644\nindex 0000000000..d74a637292\n--- /dev/null\n+++ b/news/3998.bugfix\n@@ -0,0 +1,2 @@\n+Do not use deprecated `base_hasattr` in `utils.py`.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-09-02T16:34:47+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@py76.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/ec0a6342206c335d7bec475eef07ac3198c5fa09

Merge pull request #3782 from plone/pa-discussion-core-addon

Discussion core addon

Files changed:
A news/3782.bugfix
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/configure.zcml
M Products/CMFPlone/controlpanel/browser/types.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py
M Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py
M Products/CMFPlone/factory.py
M Products/CMFPlone/profiles/default/types.xml
M Products/CMFPlone/profiles/default/types/Plone_Site.xml
M Products/CMFPlone/profiles/default/types/TempFolder.xml
M Products/CMFPlone/profiles/default/workflows.xml
M Products/CMFPlone/profiles/dependencies/metadata.xml
M Products/CMFPlone/tests/robot/test_controlpanel_types.robot
M Products/CMFPlone/tests/testMigrationTool.py
M Products/CMFPlone/tests/testPloneTool.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testSearch.py
M Products/CMFPlone/tests/testSecurity.py
M Products/CMFPlone/tests/testSiteAdminRole.py
M setup.py
D Products/CMFPlone/profiles/default/types/Discussion_Item.xml

b'diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex 1b45f330a1..723d71e8b9 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -10,7 +10,6 @@\n from BTrees.Length import Length\n from DateTime import DateTime\n from OFS.interfaces import IOrderedContainer\n-from plone.app.discussion.interfaces import DISCUSSION_ANNOTATION_KEY\n from plone.base.interfaces import INonStructuralFolder\n from plone.base.interfaces import IPloneCatalogTool\n from plone.base.utils import base_hasattr\n@@ -46,6 +45,13 @@\n \n \n logger = logging.getLogger("Plone")\n+try:\n+    from plone.app.discussion.interfaces import DISCUSSION_ANNOTATION_KEY\n+except ImportError:  # pragma: no cover\n+    DISCUSSION_ANNOTATION_KEY = None\n+\n+\n+logger = logging.getLogger(\'Plone\')\n \n _marker = object()\n \n@@ -455,9 +461,13 @@ def indexObject(obj, path):\n             ):\n                 try:\n                     self.reindexObject(obj, idxs=idxs)\n-                    # index conversions from plone.app.discussion\n+                    # index conversations from plone.app.discussion\n                     annotions = IAnnotations(obj)\n-                    if DISCUSSION_ANNOTATION_KEY in annotions:\n+                    if (\n+                        DISCUSSION_ANNOTATION_KEY is not None\n+                        and DISCUSSION_ANNOTATION_KEY in annotions\n+\n+                    ):\n                         conversation = annotions[DISCUSSION_ANNOTATION_KEY]\n                         conversation = conversation.__of__(obj)\n                         for comment in conversation.getComments():\ndiff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex e5ec5bd1be..0c549327a2 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -757,7 +757,7 @@ def acquireLocalRoles(self, obj, status=1, REQUEST=None):\n         # If status is 1, allow acquisition of local roles (regular\n         # behaviour).\n         # If it\'s 0, prohibit it (it will allow some kind of local role\n-        # blacklisting).\n+        # denylisting).\n         mt = getToolByName(self, "portal_membership")\n         if not mt.checkPermission(ModifyPortalContent, obj):\n             raise Unauthorized\n@@ -936,7 +936,7 @@ def getUserFriendlyTypes(self, typesList=None):\n             typesList = []\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        blacklistedTypes = search_settings.types_not_searched\n+        denylistedTypes = search_settings.types_not_searched\n \n         ttool = getToolByName(self, "portal_types")\n         tool_types = ttool.keys()\n@@ -945,7 +945,7 @@ def getUserFriendlyTypes(self, typesList=None):\n         else:\n             types = tool_types\n \n-        friendlyTypes = set(types) - set(blacklistedTypes)\n+        friendlyTypes = set(types) - set(denylistedTypes)\n         return list(friendlyTypes)\n \n     @security.public\ndiff --git a/Products/CMFPlone/configure.zcml b/Products/CMFPlone/configure.zcml\nindex b44a78d4de..b0f6a96eb3 100644\n--- a/Products/CMFPlone/configure.zcml\n+++ b/Products/CMFPlone/configure.zcml\n@@ -46,12 +46,10 @@\n   <include package="plone.app.contenttypes" />\n   <include package="plone.app.customerize" />\n   <include package="plone.app.dexterity" />\n-  <include package="plone.app.discussion" />\n   <include package="plone.app.i18n" />\n   <include package="plone.app.layout" />\n   <include package="plone.app.linkintegrity" />\n   <include package="plone.app.locales" />\n-  <include zcml:condition="installed plone.app.multilingual" package="plone.app.multilingual" />\n   <include package="plone.app.portlets" />\n   <include package="plone.app.redirector" />\n   <include package="plone.app.registry" />\n@@ -67,12 +65,22 @@\n   <include package="plone.portlet.collection" />\n   <include package="plonetheme.barceloneta" />\n \n-  <!-- conditional -->\n+  <!-- plone.app.* optional/conditional Core Add-ons -->\n+  <include\n+      package="plone.app.discussion"\n+      zcml:condition="installed plone.app.discussion"\n+      />\n+  <include\n+      package="plone.app.multilingual"\n+      zcml:condition="installed plone.app.multilingual"\n+      />\n   <include\n       package="plone.app.upgrade"\n       zcml:condition="installed plone.app.upgrade"\n       />\n \n+\n+\n   <include package=".resources" />\n   <include package=".patterns" />\n \ndiff --git a/Products/CMFPlone/controlpanel/browser/types.py b/Products/CMFPlone/controlpanel/browser/types.py\nindex 2e4361594b..09f38ef9b0 100644\n--- a/Products/CMFPlone/controlpanel/browser/types.py\n+++ b/Products/CMFPlone/controlpanel/browser/types.py\n@@ -169,12 +169,12 @@ def __call__(self):\n \n                 searchable = form.get("searchable", False)\n                 site_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-                blacklisted = [i for i in site_settings.types_not_searched]\n-                if searchable and type_id in blacklisted:\n-                    blacklisted.remove(type_id)\n-                elif not searchable and type_id not in blacklisted:\n-                    blacklisted.append(type_id)\n-                site_settings.types_not_searched = tuple(blacklisted)\n+                denylisted = [i for i in site_settings.types_not_searched]\n+                if searchable and type_id in denylisted:\n+                    denylisted.remove(type_id)\n+                elif not searchable and type_id not in denylisted:\n+                    denylisted.append(type_id)\n+                site_settings.types_not_searched = tuple(denylisted)\n \n                 default_page_type = form.get("default_page_type", False)\n                 types_settings = registry.forInterface(ITypesSchema, prefix="plone")\n@@ -307,8 +307,8 @@ def current_versioning_policy(self):\n     def is_searchable(self):\n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        blacklisted = settings.types_not_searched\n-        return self.type_id not in blacklisted\n+        denylisted = settings.types_not_searched\n+        return self.type_id not in denylisted\n \n     def is_default_page_type(self):\n         registry = getUtility(IRegistry)\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\nindex bfc28b52f4..ec6159b0c6 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_navigation.py\n@@ -80,7 +80,6 @@ def test_displayed_types(self):\n         settings = registry.forInterface(INavigationSchema, prefix="plone")\n         self.browser.open("%s/@@navigation-controlpanel" % self.portal_url)\n         self.browser.getControl("Collection", index=0).selected = True\n-        self.browser.getControl("Comment").selected = True\n         self.browser.getControl("Event").selected = True\n         self.browser.getControl("File").selected = True\n         self.browser.getControl("Folder").selected = True\n@@ -91,7 +90,6 @@ def test_displayed_types(self):\n         self.browser.getControl("Save").click()\n \n         self.assertTrue("Collection" in settings.displayed_types)\n-        self.assertTrue("Discussion Item" in settings.displayed_types)\n         self.assertTrue("Event" in settings.displayed_types)\n         self.assertTrue("File" in settings.displayed_types)\n         self.assertTrue("Folder" in settings.displayed_types)\n@@ -111,7 +109,7 @@ def test_workflow_settings(self):\n         self.browser.getControl(\n             "Internally published [internally_published]"\n         ).selected = True  # noqa\n-        self.browser.getControl("Pending [pending]").selected = True\n+        self.browser.getControl("Pending review [pending]").selected = True\n         self.browser.getControl("Private [private]").selected = True\n         self.browser.getControl("Public draft [visible]").selected = True\n         self.browser.getControl("Published [published]").selected = True\ndiff --git a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\nindex f2cc9bf507..f0b6c31daa 100644\n--- a/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\n+++ b/Products/CMFPlone/controlpanel/tests/test_controlpanel_browser_search.py\n@@ -58,12 +58,10 @@ def test_enable_livesearch(self):\n     def test_types_not_searched(self):\n         self.browser.open("%s/@@search-controlpanel" % self.portal_url)\n         self.browser.getControl(name="form.widgets.types_not_searched:list").value = [\n-            "Discussion Item",\n             "News Item",\n         ]\n         self.browser.getControl("Save").click()\n \n         registry = getUtility(IRegistry)\n         settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        self.assertTrue("Discussion Item" in settings.types_not_searched)\n         self.assertTrue("News Item" in settings.types_not_searched)\ndiff --git a/Products/CMFPlone/factory.py b/Products/CMFPlone/factory.py\nindex e536921af7..6473f9c4f5 100644\n--- a/Products/CMFPlone/factory.py\n+++ b/Products/CMFPlone/factory.py\n@@ -62,7 +62,6 @@ def getNonInstallableProducts(self):\n             "borg.localrole",\n             "plone.app.caching",\n             "plone.app.dexterity",\n-            "plone.app.discussion",\n             "plone.app.event",\n             "plone.app.intid",\n             "plone.app.linkintegrity",\n@@ -106,7 +105,6 @@ def getNonInstallableProfiles(self):\n             "plone.protect:default",\n             "plone.app.contenttypes:default",\n             "plone.app.dexterity:default",\n-            "plone.app.discussion:default",\n             "plone.app.event:default",\n             "plone.app.linkintegrity:default",\n             "plone.app.registry:default",\ndiff --git a/Products/CMFPlone/profiles/default/types.xml b/Products/CMFPlone/profiles/default/types.xml\nindex ea78dfcba6..55bf830c30 100644\n--- a/Products/CMFPlone/profiles/default/types.xml\n+++ b/Products/CMFPlone/profiles/default/types.xml\n@@ -3,9 +3,6 @@\n         name="portal_types"\n >\n   <property name="title">Controls the available content types in your portal</property>\n-  <object meta_type="Factory-based Type Information"\n-          name="Discussion Item"\n-  />\n   <object meta_type="Factory-based Type Information"\n           name="TempFolder"\n   />\ndiff --git a/Products/CMFPlone/profiles/default/types/Discussion_Item.xml b/Products/CMFPlone/profiles/default/types/Discussion_Item.xml\ndeleted file mode 100644\nindex d3c321ac3e..0000000000\n--- a/Products/CMFPlone/profiles/default/types/Discussion_Item.xml\n+++ /dev/null\n@@ -1,49 +0,0 @@\n-<?xml version="1.0" encoding="utf-8"?>\n-<object xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n-        meta_type="Factory-based Type Information"\n-        name="Discussion Item"\n-        i18n:domain="plone"\n->\n-  <property name="title"\n-            i18n:translate=""\n-  />\n-  <property name="description"\n-            i18n:translate=""\n-  >Discussion Items are documents which reply to other content.\n-  They should *not* be addable through the standard \'folder_factories\' interface.</property>\n-  <property name="icon_expr">string:${portal_url}/discussionitem_icon.png</property>\n-  <property name="content_meta_type">Discussion Item</property>\n-  <property name="product" />\n-  <property name="factory" />\n-  <property name="immediate_view" />\n-  <property name="global_allow">True</property>\n-  <property name="filter_content_types">True</property>\n-  <property name="allowed_content_types" />\n-  <property name="allow_discussion">False</property>\n-  <alias from="(Default)"\n-         to="discussionitem_view"\n-  />\n-  <alias from="view"\n-         to="discussionitem_view"\n-  />\n-  <action action_id="view"\n-          category="object"\n-          condition_expr=""\n-          title="View"\n-          url_expr="string:${object_url}/discussionitem_view"\n-          visible="True"\n-          i18n:attributes="title"\n-  >\n-    <permission value="View" />\n-  </action>\n-  <action action_id="external_edit"\n-          category="object"\n-          condition_expr=""\n-          title="External Edit"\n-          url_expr="string:$object_url/external_edit"\n-          visible="False"\n-          i18n:attributes="title"\n-  >\n-    <permission value="Modify portal content" />\n-  </action>\n-</object>\ndiff --git a/Products/CMFPlone/profiles/default/types/Plone_Site.xml b/Products/CMFPlone/profiles/default/types/Plone_Site.xml\nindex f6b324d8e1..b7cdf1c072 100644\n--- a/Products/CMFPlone/profiles/default/types/Plone_Site.xml\n+++ b/Products/CMFPlone/profiles/default/types/Plone_Site.xml\n@@ -38,7 +38,6 @@\n     <element value="plone.richtext" />\n     <element value="plone.relateditems" />\n     <element value="plone.locking" />\n-    <element value="plone.allowdiscussion" />\n     <element value="plone.excludefromnavigation" />\n     <element value="plone.tableofcontents" />\n   </property>\ndiff --git a/Products/CMFPlone/profiles/default/types/TempFolder.xml b/Products/CMFPlone/profiles/default/types/TempFolder.xml\nindex aa3e58c625..3fd51aa7e3 100644\n--- a/Products/CMFPlone/profiles/default/types/TempFolder.xml\n+++ b/Products/CMFPlone/profiles/default/types/TempFolder.xml\n@@ -18,7 +18,6 @@\n   <property name="global_allow">False</property>\n   <property name="filter_content_types">False</property>\n   <property name="allowed_content_types">\n-    <element value="Discussion Item" />\n     <element value="Document" />\n     <element value="Event" />\n     <element value="File" />\ndiff --git a/Products/CMFPlone/profiles/default/workflows.xml b/Products/CMFPlone/profiles/default/workflows.xml\nindex d9b00d3aae..e1efd4185f 100644\n--- a/Products/CMFPlone/profiles/default/workflows.xml\n+++ b/Products/CMFPlone/profiles/default/workflows.xml\n@@ -38,7 +38,6 @@\n     <type type_id="ATSimpleIntCriterion" />\n     <type type_id="ATSimpleStringCriterion" />\n     <type type_id="ATSortCriterion" />\n-    <type type_id="Discussion Item" />\n     <type type_id="File" />\n     <type type_id="Image" />\n     <type type_id="Plone Site" />\ndiff --git a/Products/CMFPlone/profiles/dependencies/metadata.xml b/Products/CMFPlone/profiles/dependencies/metadata.xml\nindex 191b32119e..a00e76d0ac 100644\n--- a/Products/CMFPlone/profiles/dependencies/metadata.xml\n+++ b/Products/CMFPlone/profiles/dependencies/metadata.xml\n@@ -6,7 +6,6 @@\n     <dependency>profile-Products.PortalTransforms:PortalTransforms</dependency>\n     <dependency>profile-Products.CMFEditions:CMFEditions</dependency>\n     <dependency>profile-Products.PlonePAS:PlonePAS</dependency>\n-    <dependency>profile-plone.app.discussion:default</dependency>\n     <dependency>profile-plone.app.linkintegrity:default</dependency>\n     <dependency>profile-plone.app.registry:default</dependency>\n     <dependency>profile-plone.app.theming:default</dependency>\ndiff --git a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\nindex 56fed5385a..b611a93109 100644\n--- a/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n+++ b/Products/CMFPlone/tests/robot/test_controlpanel_types.robot\n@@ -13,17 +13,6 @@ Test Teardown  Run keywords  Plone Test Teardown\n \n \n *** Test Cases ***************************************************************\n-\n-Scenario: Allow comments for Link Type\n-  Given a logged-in manager\n-    and Globally enabled comments\n-    and the types control panel\n-   When I select \'Link\' in types dropdown\n-    and Allow discussion\n-   Then Wait until page contains  Content Settings\n-   When I add new Link \'my_link\'\n-    Then Link \'my_link\' should have comments enabled\n-\n Scenario: Change default workflow\n   Given a logged-in site administrator\n     and the types control panel\n@@ -36,32 +25,12 @@ Scenario: Change default workflow\n *** Keywords *****************************************************************\n \n # --- GIVEN ------------------------------------------------------------------\n-\n-a logged-in manager\n-  Enable autologin as  Manager\n-\n the types control panel\n   Go to  ${PLONE_URL}/@@content-controlpanel\n   Wait until page contains  Content Settings\n \n-Globally enabled comments\n-  Go to  ${PLONE_URL}/@@discussion-settings\n-  Wait until page contains  Discussion settings\n-  Select checkbox  name=form.widgets.globally_enabled:list\n-  Click button  Save\n-\n-\n \n # --- WHEN -------------------------------------------------------------------\n-\n-I select \'${content_type}\' in types dropdown\n-  Select from list by label  name=type_id  ${content_type}\n-  Wait until page contains  Globally addable\n-\n-Allow discussion\n-  Select checkbox  name=allow_discussion:boolean\n-  Click Button  Save\n-\n I select \'${workflow}\' workflow\n   Select from list by label  name=new_workflow  ${workflow}\n   Click Button  Save\n@@ -74,11 +43,6 @@ I add new Link \'${id}\'\n \n # --- THEN -------------------------------------------------------------------\n \n-Link \'${id}\' should have comments enabled\n-  Go to  ${PLONE_URL}/${id}\n-  Wait until page contains  ${id}\n-  Page should contain element  xpath=//div[@id="commenting"]\n-\n Link \'${id}\' should have Single State Workflow enabled\n   Go to  ${PLONE_URL}/${id}\n   Wait until page contains  ${id}\ndiff --git a/Products/CMFPlone/tests/testMigrationTool.py b/Products/CMFPlone/tests/testMigrationTool.py\nindex e9a820f3d4..bd697372d5 100644\n--- a/Products/CMFPlone/tests/testMigrationTool.py\n+++ b/Products/CMFPlone/tests/testMigrationTool.py\n@@ -177,14 +177,14 @@ def test_upgrade_all(self):\n \n         # real ones:\n         cmfeditions = Addon(profile_id="Products.CMFEditions:CMFEditions")\n-        discussion = Addon(profile_id="plone.app.discussion:default")\n+        pae = Addon(profile_id="plone.app.event:default")\n         # real one with failing check_module:\n         dexterity = Addon(\n             profile_id="plone.app.dexterity:default", check_module="no.such.module"\n         )\n         # non-existing one:\n         foo = Addon(profile_id="foo")\n-        addonlist = AddonList([cmfeditions, discussion, dexterity, foo])\n+        addonlist = AddonList([cmfeditions, pae, dexterity, foo])\n         # Calling it should give no errors.\n         addonlist.upgrade_all(self.portal)\n \n@@ -198,7 +198,7 @@ def test_upgrade_all(self):\n         setup.setLastVersionForProfile(dexterity.profile_id, "0.1")\n         # \'unknown\' needs special handling, otherwise the version will\n         # become a tuple (\'unknown\',):\n-        setup._profile_upgrade_versions[discussion.profile_id] = "unknown"\n+        setup._profile_upgrade_versions[pae.profile_id] = "unknown"\n \n         # Run the upgrade again.\n         addonlist.upgrade_all(self.portal)\n@@ -208,10 +208,10 @@ def test_upgrade_all(self):\n         self.assertEqual(\n             setup.getLastVersionForProfile(cmfeditions.profile_id), cmfeditions_version\n         )\n-        # We had set discussion to unknown, so it will not have been\n+        # We had set pae to unknown, so it will not have been\n         # upgraded:\n         self.assertEqual(\n-            setup.getLastVersionForProfile(discussion.profile_id), "unknown"\n+            setup.getLastVersionForProfile(pae.profile_id), "unknown"\n         )\n         # We had given dexterity a failing check_module, so it will\n         # not have been upgraded:\n@@ -228,28 +228,23 @@ def test_plone_addonlist_upgrade_all(self):\n         # Several addons did not get fully upgraded in the past, which\n         # is why this list was created.\n         cmfeditions_id = "Products.CMFEditions:CMFEditions"\n-        discussion_id = "plone.app.discussion:default"\n         querystring_id = "plone.app.querystring:default"\n         # Note the current versions.\n         setup = getToolByName(self.portal, "portal_setup")\n         getversion = setup.getLastVersionForProfile\n         cmfeditions_version = getversion(cmfeditions_id)\n-        discussion_version = getversion(discussion_id)\n         querystring_version = getversion(querystring_id)\n         # Check that they are not unknown\n         self.assertNotEqual(cmfeditions_version, "unknown")\n-        self.assertNotEqual(discussion_version, "unknown")\n         self.assertNotEqual(querystring_version, "unknown")\n         # So let\'s mess with some profile versions.  We get some older\n         # versions that really exist.\n         setversion = setup.setLastVersionForProfile\n         setversion(cmfeditions_id, "2.0")\n-        setversion(discussion_id, "100")\n         setversion(querystring_id, "7")\n         # Check that it worked, that the profile versions really are\n         # different.\n         self.assertNotEqual(cmfeditions_version, getversion(cmfeditions_id))\n-        self.assertNotEqual(discussion_version, getversion(discussion_id))\n         self.assertNotEqual(querystring_version, getversion(querystring_id))\n \n         # Run the upgrade.\n@@ -258,7 +253,6 @@ def test_plone_addonlist_upgrade_all(self):\n         # Check that it worked, that the profiles are now at their\n         # original versions.\n         self.assertEqual(cmfeditions_version, getversion(cmfeditions_id))\n-        self.assertEqual(discussion_version, getversion(discussion_id))\n         self.assertEqual(querystring_version, getversion(querystring_id))\n \n \ndiff --git a/Products/CMFPlone/tests/testPloneTool.py b/Products/CMFPlone/tests/testPloneTool.py\nindex 712dbb04aa..3e3be2c3ea 100644\n--- a/Products/CMFPlone/tests/testPloneTool.py\n+++ b/Products/CMFPlone/tests/testPloneTool.py\n@@ -134,17 +134,17 @@ def testGetUserFriendlyTypes(self):\n         types = set(ttool.keys())\n         registry = getUtility(IRegistry)\n         search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n-        blacklistedTypes = search_settings.types_not_searched\n+        denylistedTypes = search_settings.types_not_searched\n \n-        # \'ChangeSet\' is blacklisted, but not in the types by default,\n+        # \'ChangeSet\' is denylisted, but not in the types by default,\n         # so we filter that out.\n-        blacklistedTypes = {t for t in blacklistedTypes if t in types}\n+        denylistedTypes = {t for t in denylistedTypes if t in types}\n         # No black listed types should be returned.\n         self.assertEqual(\n-            [t for t in self.utils.getUserFriendlyTypes() if t in blacklistedTypes], []\n+            [t for t in self.utils.getUserFriendlyTypes() if t in denylistedTypes], []\n         )\n         self.assertEqual(\n-            len(self.utils.getUserFriendlyTypes()), len(types) - len(blacklistedTypes)\n+            len(self.utils.getUserFriendlyTypes()), len(types) - len(denylistedTypes)\n         )\n         # Non-existing types should be filtered out.\n         self.assertEqual(self.utils.getUserFriendlyTypes(["File"]), ["File"])\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex f3474cf2c7..57d7959e3c 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -582,13 +582,6 @@ def testMemberHasViewGroupsPermission(self):\n         ][0]\n         self.assertTrue(member_has_permission["selected"])\n \n-    def testDiscussionItemWorkflow(self):\n-        # By default the discussion item has the comment_one_state_workflow\n-        self.assertEqual(\n-            self.workflow.getChainForPortalType("Discussion Item"),\n-            ("comment_one_state_workflow",),\n-        )\n-\n     def testFolderHasFolderListingView(self):\n         # Folder type should allow \'folder_listing\'\n         self.assertTrue("listing_view" in self.types.Folder.view_methods)\ndiff --git a/Products/CMFPlone/tests/testSearch.py b/Products/CMFPlone/tests/testSearch.py\nindex e1d00b8567..7c8eb6b483 100644\n--- a/Products/CMFPlone/tests/testSearch.py\n+++ b/Products/CMFPlone/tests/testSearch.py\n@@ -135,8 +135,8 @@ def crumbs(item):\n         title = crumbs(second_level_folder.third_level_document)[0]["Title"]\n         self.assertEqual(title, "First Level Folder")\n \n-    def test_blacklisted_types_in_results(self):\n-        """Make sure we don\'t break types\' blacklisting in the new search\n+    def test_Denylisted_types_in_results(self):\n+        """Make sure we don\'t break types\' Denylisting in the new search\n         results view.\n         """\n         portal = self.layer["portal"]\n@@ -154,7 +154,7 @@ def test_blacklisted_types_in_results(self):\n         res = portal.restrictedTraverse("@@search").results(query=q, batch=False)\n         self.assertFalse(\n             "my-page1" in [r.getId() for r in res],\n-            \'Blacklisted type "Document" has been found in search results.\',\n+            \'Denylisted type "Document" has been found in search results.\',\n         )\n \n     def test_default_search_order_relevance(self):\ndiff --git a/Products/CMFPlone/tests/testSecurity.py b/Products/CMFPlone/tests/testSecurity.py\nindex 62b8f4eae1..ade829a54f 100644\n--- a/Products/CMFPlone/tests/testSecurity.py\n+++ b/Products/CMFPlone/tests/testSecurity.py\n@@ -71,7 +71,7 @@ def test_gtbn_funcglobals(self):\n             self.fail("getToolByName should block access to non CMF tools")\n \n     def test_widget_traversal_1(self):\n-        res = self.publish("/plone/@@discussion-settings/++widget++moderator_email")\n+        res = self.publish("/plone/@@mail-controlpanel/++widget++email_from_address")\n         self.assertEqual(302, res.status)\n         self.assertTrue(\n             res.headers["location"].startswith(\n@@ -81,8 +81,7 @@ def test_widget_traversal_1(self):\n \n     def test_widget_traversal_2(self):\n         res = self.publish(\n-            "/plone/@@discussion-settings/++widget++captcha/terms/field/interface/setTaggedValue?tag=cake&value=lovely"\n-        )\n+            "/plone/@@mail-controlpanel/++widget++email_from_address/terms/field/interface/setTaggedValue?tag=cake&value=lovely")\n         self.assertEqual(404, res.status)\n         # self.assertTrue(res.headers[\'location\'].startswith(\n         #     \'http://nohost/plone/acl_users/credentials_cookie_auth/require_login\'))\ndiff --git a/Products/CMFPlone/tests/testSiteAdminRole.py b/Products/CMFPlone/tests/testSiteAdminRole.py\nindex 836c9c2992..ca0d7013b7 100644\n--- a/Products/CMFPlone/tests/testSiteAdminRole.py\n+++ b/Products/CMFPlone/tests/testSiteAdminRole.py\n@@ -18,8 +18,8 @@ def testExpectedPermissions(self):\n             "Access contents information": 1,\n             "Access inactive portal content": 1,\n             "Add Accelerated HTTP Cache Managers": 0,\n-            "Add BTreeFolder2s": 0,\n             "Add Browser Id Manager": 0,\n+            "Add BTreeFolder2s": 0,\n             "Add CMF Action Icons Tools": 0,\n             "Add CMF Caching Policy Managers": 0,\n             "Add CMF Calendar Tools": 0,\n@@ -52,15 +52,21 @@ def testExpectedPermissions(self):\n             "Add Placeful Workflow Tools": 0,\n             "Add Plone Language Tools": 0,\n             "Add Plone Tools": 0,\n+            "Add plone.app.customerizes": 0,\n             "Add PlonePAS Tools": 0,\n             "Add Pluggable Index": 0,\n             "Add Plugin Registrys": 0,\n+            "Add portal content": 1,\n+            "Add portal events": 1,\n+            "Add portal folders": 1,\n+            "Add portal member": 1,\n             "Add PortalTransforms Tools": 0,\n             "Add Python Scripts": 0,\n             "Add RAM Cache Managers": 0,\n-            "Add ReStructuredText Documents": 0,\n             "Add Repositories": 0,\n             "Add ResourceRegistries Tools": 0,\n+            "Add ReStructuredText Documents": 0,\n+            "Add secure MailHost objects": 0,\n             "Add Session Data Manager": 0,\n             "Add Site Roots": 0,\n             "Add Temporary Folder": 0,\n@@ -72,36 +78,30 @@ def testExpectedPermissions(self):\n             "Add Workflow Policy": 0,\n             "Add ZCatalogs": 0,\n             "Add ZODB Mount Points": 0,\n-            "Add plone.app.customerizes": 0,\n-            "Add portal content": 1,\n-            "Add portal events": 1,\n-            "Add portal folders": 1,\n-            "Add portal member": 1,\n-            "Add secure MailHost objects": 0,\n             "Allow sendto": 1,\n-            "CMFEditions: Access previous versions": 1,\n-            "CMFEditions: Apply version control": 1,\n-            "CMFEditions: Checkout to location": 1,\n-            "CMFEditions: Manage versioning policies": 1,\n-            "CMFEditions: Purge version": 1,\n-            "CMFEditions: Revert to previous versions": 1,\n-            "CMFEditions: Save new version": 1,\n+            "Change bindings": 0,\n             "Change Browser Id Manager": 0,\n+            "Change cache managers": 0,\n+            "Change cache settings": 0,\n+            "Change configuration": 0,\n+            "Change Database Methods": 0,\n             "Change DTML Documents": 0,\n             "Change DTML Methods": 0,\n-            "Change Database Methods": 0,\n             "Change External Methods": 0,\n             "Change Images and Files": 0,\n-            "Change Page Templates": 0,\n-            "Change Python Scripts": 0,\n-            "Change Session Data Manager": 0,\n-            "Change bindings": 0,\n-            "Change cache managers": 0,\n-            "Change cache settings": 0,\n-            "Change configuration": 0,\n             "Change local roles": 1,\n+            "Change Page Templates": 0,\n             "Change permissions": 0,\n             "Change proxy roles": 0,\n+            "Change Python Scripts": 0,\n+            "Change Session Data Manager": 0,\n+            "CMFEditions: Access previous versions": 1,\n+            "CMFEditions: Apply version control": 1,\n+            "CMFEditions: Checkout to location": 1,\n+            "CMFEditions: Manage versioning policies": 1,\n+            "CMFEditions: Purge version": 1,\n+            "CMFEditions: Revert to previous versions": 1,\n+            "CMFEditions: Save new version": 1,\n             "Content rules: Manage rules": 1,\n             "Copy or Move": 1,\n             "Create Transient Objects": 0,\n@@ -109,8 +109,8 @@ def testExpectedPermissions(self):\n             "Delete Groups": 0,\n             "Delete objects": 1,\n             "Edit ReStructuredText": 0,\n-            "FTP access": 1,\n             "Five: Add TTW View Template": 0,\n+            "FTP access": 1,\n             "Import/Export objects": 0,\n             "List folder contents": 1,\n             "List portal members": 1,\n@@ -121,29 +121,31 @@ def testExpectedPermissions(self):\n             "Manage Access Rules": 0,\n             "Manage Five local sites": 0,\n             "Manage Groups": 0,\n+            "Manage portal": 0,\n+            "Manage properties": 1,\n+            "Manage repositories": 0,\n             "Manage Site": 0,\n             "Manage Transient Object Container": 0,\n+            "Manage users": 0,\n             "Manage Vocabulary": 0,\n             "Manage WebDAV Locks": 0,\n             "Manage ZCatalog Entries": 0,\n             "Manage ZCatalogIndex Entries": 0,\n-            "Manage portal": 0,\n-            "Manage properties": 1,\n-            "Manage repositories": 0,\n-            "Manage users": 0,\n             "Modify Cookie Crumblers": 0,\n             "Modify portal content": 1,\n             "Modify view template": 1,\n             "Open/Close Database Connections": 0,\n             "Plone Site Setup: Overview": 1,\n+            "plone.portlet.collection: Add collection portlet": 1,\n+            "plone.portlet.static: Add static portlet": 1,\n             "Portlets: Manage own portlets": 1,\n             "Portlets: Manage portlets": 1,\n             "Portlets: View dashboard": 1,\n             "Query Vocabulary": 0,\n             "Request review": 1,\n             "Review portal content": 1,\n-            "Search ZCatalog": 1,\n             "Search for principals": 0,\n+            "Search ZCatalog": 1,\n             "Set Group Ownership": 0,\n             "Set own password": 1,\n             "Set own properties": 1,\n@@ -156,15 +158,12 @@ def testExpectedPermissions(self):\n             "Undo changes": 1,\n             "Use mailhost services": 1,\n             "Use version control": 1,\n-            "Reply to item": 0,\n-            "View": 1,\n             "View Groups": 1,\n             "View management screens": 0,\n+            "View": 1,\n+            "WebDAV access": 1,\n             "WebDAV Lock items": 1,\n             "WebDAV Unlock items": 1,\n-            "WebDAV access": 1,\n-            "plone.portlet.collection: Add collection portlet": 1,\n-            "plone.portlet.static: Add static portlet": 1,\n         }\n         try:\n             import plone.app.iterate\ndiff --git a/news/3782.bugfix b/news/3782.bugfix\nnew file mode 100644\nindex 0000000000..959bc31b2b\n--- /dev/null\n+++ b/news/3782.bugfix\n@@ -0,0 +1,2 @@\n+Turn plone.app.discussion in a core-addon.\n+[@jensens]\ndiff --git a/setup.py b/setup.py\nindex 35f8fbeec3..eba4785df4 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -60,7 +60,6 @@\n         "plone.app.contenttypes",\n         "plone.app.customerize",\n         "plone.app.dexterity",\n-        "plone.app.discussion",\n         "plone.app.i18n",\n         "plone.app.layout >= 2.5.15",\n         "plone.app.linkintegrity >=1.0.3",\n'

