Repository: plone.app.theming


Branch: refs/heads/master
Date: 2024-04-16T00:15:06+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/58ac445e3b7347872c8059413ef0beb53d9a16f6

Traverse to theme resources from the navigation root again.

Only when this gives an Unauthorized, try it on the portal as a fall back.
This fixes other use cases of traversing to absolute urls in a theme.

Fixes https://github.com/plone/plone.app.theming/issues/236

Files changed:
A news/236.bugfix
A src/plone/app/theming/tests/browser.py
M src/plone/app/theming/tests/configure.zcml
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

b'diff --git a/news/236.bugfix b/news/236.bugfix\nnew file mode 100644\nindex 00000000..a82788d2\n--- /dev/null\n+++ b/news/236.bugfix\n@@ -0,0 +1,4 @@\n+Traverse to theme resources from the navigation root again.\n+Only when this gives an Unauthorized, try it on the portal as a fall back.\n+This fixes other use cases of traversing to absolute urls in a theme.\n+[maurits]\ndiff --git a/src/plone/app/theming/tests/browser.py b/src/plone/app/theming/tests/browser.py\nnew file mode 100644\nindex 00000000..36058cae\n--- /dev/null\n+++ b/src/plone/app/theming/tests/browser.py\n@@ -0,0 +1,6 @@\n+from Products.Five import BrowserView\n+\n+\n+class Title(BrowserView):\n+    def __call__(self):\n+        return self.context.Title()\ndiff --git a/src/plone/app/theming/tests/configure.zcml b/src/plone/app/theming/tests/configure.zcml\nindex 54c940f3..e42d8d6d 100644\n--- a/src/plone/app/theming/tests/configure.zcml\n+++ b/src/plone/app/theming/tests/configure.zcml\n@@ -28,4 +28,18 @@\n       permission="zope.Public"\n       />\n \n+  <browser:page\n+      name="test-title"\n+      for="*"\n+      class=".browser.Title"\n+      permission="zope2.View"\n+      />\n+\n+  <browser:page\n+      name="test-public-title"\n+      for="*"\n+      class=".browser.Title"\n+      permission="zope.Public"\n+      />\n+\n </configure>\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 7baa55bf..e3c4330c 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,11 +1,18 @@\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import extractThemeInfo\n from plone.app.theming.utils import getTheme\n+from plone.app.theming.utils import InternalResolver\n+from plone.base.interfaces import INavigationRoot\n from plone.testing.zope import Browser\n+from Products.CMFCore.utils import getToolByName\n+from zExceptions import Unauthorized\n+from zope.interface import alsoProvides\n \n import os.path\n import tempfile\n@@ -33,6 +40,26 @@\n PACKAGE_THEME = os.path.join(HERE, PACKAGE_THEME_FILENAME)\n \n \n+class InternalResolverAsString(InternalResolver):\n+    """InternalResolver with some simplicifications.\n+\n+    InternalResolver has this main method:\n+\n+        def resolve(self, system_url, public_id, context):\n+\n+    At the end it calls:\n+\n+        return self.resolve_string(result, context)\n+\n+    This turns a string into some internal lxml document, and I don\'t know how\n+    to turn that back into a string for easier testing.  So override that\n+    method to simply return the original string.\n+    """\n+\n+    def resolve_string(self, result, context):\n+        return result\n+\n+\n class TestIntegration(unittest.TestCase):\n     layer = THEMING_INTEGRATION_TESTING\n \n@@ -329,6 +356,126 @@ def test_createThemeFromTemplate_ja_unicode_title(self):\n             self.fail(msg="Unicode Encode Error")\n \n \n+class TestInternalResolverNavigationRoot(unittest.TestCase):\n+    """Test how the InternalResolver handles navigation roots."""\n+\n+    layer = THEMING_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def resolve(self, system_url):\n+        """Resolve the system_url.\n+\n+        The standard resolve method ignores the public_id and the context,\n+        so I don\'t want to pass it in all tests.\n+        """\n+        resolver = InternalResolverAsString()\n+        return resolver.resolve(system_url, public_id=None, context=None)\n+\n+    def setup_public(self):\n+        # Create a public navigation root containing a public page.\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.invokeFactory("Folder", "public", title="Public Folder")\n+        folder = self.portal.public\n+        alsoProvides(folder, INavigationRoot)\n+        folder.invokeFactory("Document", "page", title="Public page in public folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(folder, action="publish")\n+        wftool.doActionFor(folder.page, action="publish")\n+\n+        # If we want a page in the site root:\n+        # self.portal.invokeFactory("Document", "page", title="Public page")\n+        # wftool.doActionFor(self.portal.page, action="publish")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n+        return folder\n+\n+    def setup_private(self):\n+        # Create a private navigation root containing a public page.\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.invokeFactory("Folder", "private", title="Private Folder")\n+        folder = self.portal.private\n+        alsoProvides(folder, INavigationRoot)\n+        folder.invokeFactory("Document", "page", title="Public page in private folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(folder.page, action="publish")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n+        return folder\n+\n+    def test_internal_resolver_site_root(self):\n+        self.request.traverse("/plone")\n+        # absolute\n+        self.assertEqual("Plone site", self.resolve("/@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Plone site", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+    def test_internal_resolver_navigation_root_public(self):\n+        self.setup_public()\n+        self.request.traverse("/plone/public")\n+        # absolute\n+        self.assertEqual("Public Folder", self.resolve("/@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Public Folder", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+    def test_internal_resolver_navigation_root_public_page(self):\n+        self.setup_public()\n+        self.request.traverse("/plone/public/page")\n+        # absolute\n+        self.assertEqual("Public Folder", self.resolve("/@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Public page in public folder", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+    def test_internal_resolver_navigation_root_private(self):\n+        self.setup_private()\n+        # A traverse to "/plone/private" fails, because we are anonymous and\n+        # cannot access this private navigation root:\n+        with self.assertRaises(Unauthorized):\n+            self.request.traverse("/plone/private")\n+        self.request.traverse("/plone/private/page")\n+        # An absolute browser view would fail, because we are not authorized\n+        # to access this view on the private navigation root.  But we fall back\n+        # to accessing it on the site root.\n+        self.assertEqual("Plone site", self.resolve("/@@test-title"))\n+        # A publicly available version of the same browser view works fine though:\n+        self.assertEqual("Private Folder", self.resolve("/@@test-public-title"))\n+        # absolute resource\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Public page in private folder", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+\n class TestUnit(unittest.TestCase):\n     def _open_zipfile(self, filename):\n         """Helper that opens a zip file in our test directory"""\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex dcba1a4e..58041df4 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -1,3 +1,4 @@\n+from Acquisition import aq_base\n from configparser import ConfigParser\n from diazo.compiler import compile_theme\n from diazo.compiler import quote_param\n@@ -161,10 +162,10 @@ def resolve(self, system_url, public_id, context):\n \n         context = findContext(request)\n         portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n-        portal = portalState.portal()\n+        root = portalState.navigation_root()\n \n-        if not system_url.startswith("/"):  # only for relative urls\n-            root = portalState.navigation_root()\n+        is_absolute_url = system_url.startswith("/")\n+        if not is_absolute_url:\n             root_path = root.getPhysicalPath()\n             context_path = context.getPhysicalPath()[len(root_path) :]\n             if len(context_path) == 0:\n@@ -172,7 +173,16 @@ def resolve(self, system_url, public_id, context):\n             else:\n                 system_url = "/{:s}/{:s}".format("/".join(context_path), system_url)\n \n-        response = subrequest(system_url, root=portal)\n+        response = subrequest(system_url, root=root)\n+        if is_absolute_url and response.status == 401:\n+            # If we tried on the navigation root we can retry on the portal:\n+            # the navigation root may be private.  This is especially needed\n+            # when requesting theme resources: otherwise accessing a public\n+            # page within a private navigation root would show unstyled.\n+            # See https://github.com/plone/plone.app.theming/issues/142\n+            portal = portalState.portal()\n+            if aq_base(portal) is not aq_base(root):\n+                response = subrequest(system_url, root=portal)\n         if response.status != 200:\n             LOGGER.error(f"Couldn\'t resolve {system_url:s}")\n             return None\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2024-04-22T11:37:02+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.theming/commit/6580fab54297fa3852d5a1d0169ae10741821859

Merge pull request #237 from plone/maurits-issue-236

Traverse to theme resources from the navigation root again.

Files changed:
A news/236.bugfix
A src/plone/app/theming/tests/browser.py
M src/plone/app/theming/tests/configure.zcml
M src/plone/app/theming/tests/test_utils.py
M src/plone/app/theming/utils.py

b'diff --git a/news/236.bugfix b/news/236.bugfix\nnew file mode 100644\nindex 00000000..a82788d2\n--- /dev/null\n+++ b/news/236.bugfix\n@@ -0,0 +1,4 @@\n+Traverse to theme resources from the navigation root again.\n+Only when this gives an Unauthorized, try it on the portal as a fall back.\n+This fixes other use cases of traversing to absolute urls in a theme.\n+[maurits]\ndiff --git a/src/plone/app/theming/tests/browser.py b/src/plone/app/theming/tests/browser.py\nnew file mode 100644\nindex 00000000..36058cae\n--- /dev/null\n+++ b/src/plone/app/theming/tests/browser.py\n@@ -0,0 +1,6 @@\n+from Products.Five import BrowserView\n+\n+\n+class Title(BrowserView):\n+    def __call__(self):\n+        return self.context.Title()\ndiff --git a/src/plone/app/theming/tests/configure.zcml b/src/plone/app/theming/tests/configure.zcml\nindex 54c940f3..e42d8d6d 100644\n--- a/src/plone/app/theming/tests/configure.zcml\n+++ b/src/plone/app/theming/tests/configure.zcml\n@@ -28,4 +28,18 @@\n       permission="zope.Public"\n       />\n \n+  <browser:page\n+      name="test-title"\n+      for="*"\n+      class=".browser.Title"\n+      permission="zope2.View"\n+      />\n+\n+  <browser:page\n+      name="test-public-title"\n+      for="*"\n+      class=".browser.Title"\n+      permission="zope.Public"\n+      />\n+\n </configure>\ndiff --git a/src/plone/app/theming/tests/test_utils.py b/src/plone/app/theming/tests/test_utils.py\nindex 7baa55bf..e3c4330c 100644\n--- a/src/plone/app/theming/tests/test_utils.py\n+++ b/src/plone/app/theming/tests/test_utils.py\n@@ -1,11 +1,18 @@\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.app.theming.testing import THEMING_FUNCTIONAL_TESTING\n from plone.app.theming.testing import THEMING_INTEGRATION_TESTING\n from plone.app.theming.utils import applyTheme\n from plone.app.theming.utils import extractThemeInfo\n from plone.app.theming.utils import getTheme\n+from plone.app.theming.utils import InternalResolver\n+from plone.base.interfaces import INavigationRoot\n from plone.testing.zope import Browser\n+from Products.CMFCore.utils import getToolByName\n+from zExceptions import Unauthorized\n+from zope.interface import alsoProvides\n \n import os.path\n import tempfile\n@@ -33,6 +40,26 @@\n PACKAGE_THEME = os.path.join(HERE, PACKAGE_THEME_FILENAME)\n \n \n+class InternalResolverAsString(InternalResolver):\n+    """InternalResolver with some simplicifications.\n+\n+    InternalResolver has this main method:\n+\n+        def resolve(self, system_url, public_id, context):\n+\n+    At the end it calls:\n+\n+        return self.resolve_string(result, context)\n+\n+    This turns a string into some internal lxml document, and I don\'t know how\n+    to turn that back into a string for easier testing.  So override that\n+    method to simply return the original string.\n+    """\n+\n+    def resolve_string(self, result, context):\n+        return result\n+\n+\n class TestIntegration(unittest.TestCase):\n     layer = THEMING_INTEGRATION_TESTING\n \n@@ -329,6 +356,126 @@ def test_createThemeFromTemplate_ja_unicode_title(self):\n             self.fail(msg="Unicode Encode Error")\n \n \n+class TestInternalResolverNavigationRoot(unittest.TestCase):\n+    """Test how the InternalResolver handles navigation roots."""\n+\n+    layer = THEMING_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+    def resolve(self, system_url):\n+        """Resolve the system_url.\n+\n+        The standard resolve method ignores the public_id and the context,\n+        so I don\'t want to pass it in all tests.\n+        """\n+        resolver = InternalResolverAsString()\n+        return resolver.resolve(system_url, public_id=None, context=None)\n+\n+    def setup_public(self):\n+        # Create a public navigation root containing a public page.\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.invokeFactory("Folder", "public", title="Public Folder")\n+        folder = self.portal.public\n+        alsoProvides(folder, INavigationRoot)\n+        folder.invokeFactory("Document", "page", title="Public page in public folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(folder, action="publish")\n+        wftool.doActionFor(folder.page, action="publish")\n+\n+        # If we want a page in the site root:\n+        # self.portal.invokeFactory("Document", "page", title="Public page")\n+        # wftool.doActionFor(self.portal.page, action="publish")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n+        return folder\n+\n+    def setup_private(self):\n+        # Create a private navigation root containing a public page.\n+        setRoles(self.portal, TEST_USER_ID, ("Manager",))\n+        self.portal.invokeFactory("Folder", "private", title="Private Folder")\n+        folder = self.portal.private\n+        alsoProvides(folder, INavigationRoot)\n+        folder.invokeFactory("Document", "page", title="Public page in private folder")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(folder.page, action="publish")\n+        setRoles(self.portal, TEST_USER_ID, ("Member",))\n+        return folder\n+\n+    def test_internal_resolver_site_root(self):\n+        self.request.traverse("/plone")\n+        # absolute\n+        self.assertEqual("Plone site", self.resolve("/@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Plone site", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+    def test_internal_resolver_navigation_root_public(self):\n+        self.setup_public()\n+        self.request.traverse("/plone/public")\n+        # absolute\n+        self.assertEqual("Public Folder", self.resolve("/@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Public Folder", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+    def test_internal_resolver_navigation_root_public_page(self):\n+        self.setup_public()\n+        self.request.traverse("/plone/public/page")\n+        # absolute\n+        self.assertEqual("Public Folder", self.resolve("/@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Public page in public folder", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+    def test_internal_resolver_navigation_root_private(self):\n+        self.setup_private()\n+        # A traverse to "/plone/private" fails, because we are anonymous and\n+        # cannot access this private navigation root:\n+        with self.assertRaises(Unauthorized):\n+            self.request.traverse("/plone/private")\n+        self.request.traverse("/plone/private/page")\n+        # An absolute browser view would fail, because we are not authorized\n+        # to access this view on the private navigation root.  But we fall back\n+        # to accessing it on the site root.\n+        self.assertEqual("Plone site", self.resolve("/@@test-title"))\n+        # A publicly available version of the same browser view works fine though:\n+        self.assertEqual("Private Folder", self.resolve("/@@test-public-title"))\n+        # absolute resource\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("/++theme++plone.app.theming.tests/resource.css"),\n+        )\n+        # relative\n+        self.assertEqual("Public page in private folder", self.resolve("@@test-title"))\n+        self.assertIn(\n+            "A CSS file",\n+            self.resolve("++theme++plone.app.theming.tests/resource.css"),\n+        )\n+\n+\n class TestUnit(unittest.TestCase):\n     def _open_zipfile(self, filename):\n         """Helper that opens a zip file in our test directory"""\ndiff --git a/src/plone/app/theming/utils.py b/src/plone/app/theming/utils.py\nindex dcba1a4e..58041df4 100644\n--- a/src/plone/app/theming/utils.py\n+++ b/src/plone/app/theming/utils.py\n@@ -1,3 +1,4 @@\n+from Acquisition import aq_base\n from configparser import ConfigParser\n from diazo.compiler import compile_theme\n from diazo.compiler import quote_param\n@@ -161,10 +162,10 @@ def resolve(self, system_url, public_id, context):\n \n         context = findContext(request)\n         portalState = queryMultiAdapter((context, request), name="plone_portal_state")\n-        portal = portalState.portal()\n+        root = portalState.navigation_root()\n \n-        if not system_url.startswith("/"):  # only for relative urls\n-            root = portalState.navigation_root()\n+        is_absolute_url = system_url.startswith("/")\n+        if not is_absolute_url:\n             root_path = root.getPhysicalPath()\n             context_path = context.getPhysicalPath()[len(root_path) :]\n             if len(context_path) == 0:\n@@ -172,7 +173,16 @@ def resolve(self, system_url, public_id, context):\n             else:\n                 system_url = "/{:s}/{:s}".format("/".join(context_path), system_url)\n \n-        response = subrequest(system_url, root=portal)\n+        response = subrequest(system_url, root=root)\n+        if is_absolute_url and response.status == 401:\n+            # If we tried on the navigation root we can retry on the portal:\n+            # the navigation root may be private.  This is especially needed\n+            # when requesting theme resources: otherwise accessing a public\n+            # page within a private navigation root would show unstyled.\n+            # See https://github.com/plone/plone.app.theming/issues/142\n+            portal = portalState.portal()\n+            if aq_base(portal) is not aq_base(root):\n+                response = subrequest(system_url, root=portal)\n         if response.status != 200:\n             LOGGER.error(f"Couldn\'t resolve {system_url:s}")\n             return None\n'

