Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-18T00:24:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/ee44c3f9b99cf7679df5eb207a602fae764497d9

Test that autologin after pw reset sets the login times.

Files changed:
M Products/CMFPlone/tests/pwreset_browser.rst

b'diff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex e12dbcb9c1..1f5834abb5 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -8,6 +8,7 @@ Note that our usage of testbrowser is unusual and inconsistent, mostly\n because Plone forms have inconsistencies and because testbrowser makes\n assumptions that are not true for Plone forms.\n \n+  >>> from DateTime import DateTime\n   >>> from plone.testing.zope import Browser\n   >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD\n   >>> browser = Browser(layer[\'app\'])\n@@ -148,6 +149,19 @@ We are not logged in yet at this point.  Let\'s try to log in:\n   >>> "You are now logged in" in browser.contents\n   True\n \n+Two login time properties should have been set on the user:\n+\n+  >>> portal_membership = layer[\'portal\'].portal_membership\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time = member.getProperty(\'login_time\')\n+  >>> isinstance(login_time, DateTime)\n+  True\n+  >>> last_login_time = member.getProperty(\'last_login_time\')\n+  >>> isinstance(last_login_time, DateTime)\n+  True\n+  >>> last_login_time <= login_time\n+  True\n+\n Log out again:\n \n   >>> browser.getLink(\'Log out\').click()\n@@ -222,11 +236,24 @@ Now that we have the address, we will reset our password:\n   >>> form.getControl(name=\'password2\').value = \'secretion\'\n   >>> form.submit()\n \n-We can now logged in:\n+By default \'autologin_after_password_reset\' is turned on, so we are now logged in:\n \n   >>> "Password reset successful, you are logged in now!" in browser.contents\n   True\n \n+The two login time properties should have been updated on the user:\n+\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time < member.getProperty(\'login_time\')\n+  True\n+  >>> last_login_time < member.getProperty(\'last_login_time\')\n+  True\n+\n+The last login time is now set to the previous value of login time:\n+\n+  >>> login_time == member.getProperty(\'last_login_time\')\n+  True\n+\n Log out again:\n \n   >>> browser.getLink(\'Log out\').click()\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-18T10:23:23+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/5a5c9b977cad73728f3c954df8b577d2f5033dc1

During login, when login_time is invalid, warn and reset it to 2000/01/01.

Fixes https://github.com/plone/Products.CMFPlone/issues/3656.

Files changed:
A news/3656.bugfix
M Products/CMFPlone/browser/login/login.py

b"diff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nindex 2ceda23005..076f383810 100644\n--- a/Products/CMFPlone/browser/login/login.py\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from DateTime import DateTime\n+from DateTime.interfaces import SyntaxError as DateTimeSyntaxError\n from plone.app.users.browser.passwordpanel import PasswordPanel\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -22,7 +23,10 @@\n from zope.component import queryUtility\n from zope.interface import implementer\n \n+import logging\n \n+\n+logger = logging.getLogger(__name__)\n # TODO: Scale down this list now that we've removed a lot of\n # templates.\n LOGIN_TEMPLATE_IDS = [\n@@ -134,9 +138,19 @@ def _post_login(self):\n         membership_tool = getToolByName(self.context, 'portal_membership')\n         member = membership_tool.getAuthenticatedMember()\n         must_change_password = member.getProperty('must_change_password', 0)\n-        login_time = member.getProperty('login_time', '2000/01/01')\n+        default = '2000/01/01'\n+        login_time = member.getProperty('login_time', default)\n         if not isinstance(login_time, DateTime):\n-            login_time = DateTime(login_time)\n+            try:\n+                login_time = DateTime(login_time)\n+            except DateTimeSyntaxError:\n+                # https://github.com/plone/Products.CMFPlone/issues/3656\n+                logger.warning(\n+                    '%r is not a valid login_time. Setting %r instead.',\n+                    login_time,\n+                    default,\n+                )\n+                login_time = DateTime(default)\n         is_initial_login = login_time == DateTime('2000/01/01')\n \n         membership_tool.loginUser(self.request)\ndiff --git a/news/3656.bugfix b/news/3656.bugfix\nnew file mode 100644\nindex 0000000000..b36e56eb6d\n--- /dev/null\n+++ b/news/3656.bugfix\n@@ -0,0 +1,3 @@\n+During login, when login_time is invalid, warn and reset it to 2000/01/01.\n+Fixes `issue 3656 <https://github.com/plone/Products.CMFPlone/issues/3656>`_.\n+[maurits]\n"

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-18T11:32:01+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/c581ff3bc4aa8f1668e15840e3895a4a8a5f56c7

Only compare date part of login_time with 2000/01/01.

A timezone may have been set.

Files changed:
M Products/CMFPlone/browser/login/login.py
M Products/CMFPlone/tests/pwreset_browser.rst

b'diff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nindex 076f383810..acc9c75328 100644\n--- a/Products/CMFPlone/browser/login/login.py\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -145,13 +145,12 @@ def _post_login(self):\n                 login_time = DateTime(login_time)\n             except DateTimeSyntaxError:\n                 # https://github.com/plone/Products.CMFPlone/issues/3656\n-                logger.warning(\n-                    \'%r is not a valid login_time. Setting %r instead.\',\n-                    login_time,\n-                    default,\n-                )\n+                logger.warning(\'%r is not a valid login_time.\', login_time)\n                 login_time = DateTime(default)\n-        is_initial_login = login_time == DateTime(\'2000/01/01\')\n+        # We used to compare login_time with DateTime(\'2000/01/01\'),\n+        # but it may have a timezone: I have seen both UTC and GTM+1.\n+        # So compare only the date part.\n+        is_initial_login = login_time.Date() == \'2000/01/01\'\n \n         membership_tool.loginUser(self.request)\n         if is_initial_login:\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex 1f5834abb5..ed89d9fe0d 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -138,6 +138,23 @@ e-mail.\n   >>> "You have been registered" in browser.contents\n   True\n \n+The login times are set to the default in 2000:\n+\n+  >>> portal_membership = layer[\'portal\'].portal_membership\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time = member.getProperty(\'login_time\')\n+  >>> isinstance(login_time, DateTime)\n+  True\n+  >>> login_time.Date()\n+  \'2000/01/01\'\n+  >>> last_login_time = member.getProperty(\'last_login_time\')\n+  >>> isinstance(last_login_time, DateTime)\n+  True\n+  >>> last_login_time <= login_time\n+  True\n+  >>> last_login_time.Date()\n+  \'2000/01/01\'\n+\n We are not logged in yet at this point.  Let\'s try to log in:\n \n   >>> browser.getLink(\'Log in\').click()\n@@ -151,7 +168,6 @@ We are not logged in yet at this point.  Let\'s try to log in:\n \n Two login time properties should have been set on the user:\n \n-  >>> portal_membership = layer[\'portal\'].portal_membership\n   >>> member = portal_membership.getMemberById(\'jsmith\')\n   >>> login_time = member.getProperty(\'login_time\')\n   >>> isinstance(login_time, DateTime)\n@@ -162,6 +178,13 @@ Two login time properties should have been set on the user:\n   >>> last_login_time <= login_time\n   True\n \n+The default login time is January 1 2000.  Check that it is much newer now:\n+\n+  >>> login_time > DateTime(2020, 2, 2)\n+  True\n+  >>> last_login_time > DateTime(2020, 2, 2)\n+  True\n+\n Log out again:\n \n   >>> browser.getLink(\'Log out\').click()\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-18T16:11:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/00ff4928a69657307194679e51b6c23d5ac3e7f2

Test that password reset calls the initial login adapter when needed.

Hint: this test currently fails.

Files changed:
M Products/CMFPlone/tests/test_redirect_after_login.py

b'diff --git a/Products/CMFPlone/tests/test_redirect_after_login.py b/Products/CMFPlone/tests/test_redirect_after_login.py\nindex 6dd1a54221..642219b0fe 100644\n--- a/Products/CMFPlone/tests/test_redirect_after_login.py\n+++ b/Products/CMFPlone/tests/test_redirect_after_login.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing.zope import Browser\n@@ -11,6 +12,8 @@\n from zope.interface import Interface\n from zope.publisher.interfaces import IRequest\n \n+import quopri\n+import transaction\n import unittest\n \n \n@@ -191,3 +194,79 @@ def test_initiallogin_adapter(self):\n         self.assertIn(\'You are now logged out.\',\n                       self.browser.contents,\n                       \'Logout status message not displayed.\')\n+\n+    def test_password_reset_uses_all_adapters(self):\n+        # By default, when you reset your password, you are directly logged in.\n+        # An initial login adapter should be active.\n+        # And the redirect after login adapter too.\n+        from plone.registry.interfaces import IRegistry\n+        from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n+        from zope.component import getGlobalSiteManager\n+        from zope.component import getUtility\n+\n+        # We need to configure the mailhost first.\n+        registry = getUtility(IRegistry, context=self.portal)\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        mail_settings.smtp_host = u\'localhost\'\n+        mail_settings.email_from_address = \'smith@example.com\'\n+        # and an email address for the test user:\n+        member = self.portal.portal_membership.getMemberById(TEST_USER_ID)\n+        member.setProperties(email="dummy@example.org")\n+        transaction.commit()\n+\n+        # Fill in the password reset form.\n+        self.browser.open(\'http://nohost/plone/@@login-help\')\n+        form = self.browser.getForm(index=1)\n+        form.getControl(name=\'form.widgets.reset_password\').value = TEST_USER_NAME\n+        form.submit(name=\'form.buttons.reset\')\n+\n+        # Get the password reset mail from the dummy mailhost.\n+        mailhost = self.portal.MailHost\n+        self.assertEqual(len(mailhost.messages), 1)\n+        msg = mailhost.messages[0]\n+\n+        # Extract the address that lets us reset our password.\n+        msg = quopri.decodestring(msg)\n+        please_visit_text = b"reset your password for Plone site site:"\n+        self.assertIn(please_visit_text, msg)\n+        url_index = msg.index(please_visit_text) + len(please_visit_text)\n+        address = msg[url_index:].strip().split()[0].decode()\n+        self.assertTrue(address.startswith(u\'http://nohost/plone/passwordreset/\'))\n+\n+        # Now that we have the address, we will reset our password:\n+\n+        self.browser.open(address)\n+        self.assertIn("Set your password", self.browser.contents)\n+        form = self.browser.getForm(name=\'pwreset_action\')\n+        form.getControl(name=\'userid\').value = TEST_USER_NAME\n+        form.getControl(name=\'password\').value = \'secretion\'\n+        form.getControl(name=\'password2\').value = \'secretion\'\n+\n+        # Register our adapters, submit the form, and unregister them.\n+        gsm = getGlobalSiteManager()\n+        gsm.registerAdapter(AfterLoginAdapter, (Interface, IRequest))\n+        gsm.registerAdapter(InitialLoginAdapter, (Interface, IRequest))\n+        try:\n+            form.submit()\n+        finally:\n+            gsm.unregisterAdapter(InitialLoginAdapter, (Interface, IRequest))\n+            gsm.unregisterAdapter(AfterLoginAdapter, (Interface, IRequest))\n+\n+        # By default \'autologin_after_password_reset\' is turned on,\n+        # so we are now logged in:\n+        self.assertIn(\n+            "Password reset successful, you are logged in now!",\n+            self.browser.contents,\n+        )\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone/sitemap\',\n+                         \'Successful login did not use the adapter for \'\n+                         \'redirect.\')\n+        self.assertEqual(self.portal.foo, \'foo\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-18T16:11:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/0f42195be8680a9c8d1cd13987ebc6788f689599

Moved initial login time checking to utils.has_logged_in.

Files changed:
A Products/CMFPlone/browser/login/utils.py
M Products/CMFPlone/browser/login/login.py

b'diff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nindex acc9c75328..cf0f094b0e 100644\n--- a/Products/CMFPlone/browser/login/login.py\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n-from DateTime import DateTime\n-from DateTime.interfaces import SyntaxError as DateTimeSyntaxError\n+from .utils import has_logged_in\n from plone.app.users.browser.passwordpanel import PasswordPanel\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -138,19 +137,8 @@ def _post_login(self):\n         membership_tool = getToolByName(self.context, \'portal_membership\')\n         member = membership_tool.getAuthenticatedMember()\n         must_change_password = member.getProperty(\'must_change_password\', 0)\n-        default = \'2000/01/01\'\n-        login_time = member.getProperty(\'login_time\', default)\n-        if not isinstance(login_time, DateTime):\n-            try:\n-                login_time = DateTime(login_time)\n-            except DateTimeSyntaxError:\n-                # https://github.com/plone/Products.CMFPlone/issues/3656\n-                logger.warning(\'%r is not a valid login_time.\', login_time)\n-                login_time = DateTime(default)\n-        # We used to compare login_time with DateTime(\'2000/01/01\'),\n-        # but it may have a timezone: I have seen both UTC and GTM+1.\n-        # So compare only the date part.\n-        is_initial_login = login_time.Date() == \'2000/01/01\'\n+        login_time = member.getProperty(\'login_time\', None)\n+        is_initial_login = not has_logged_in(login_time)\n \n         membership_tool.loginUser(self.request)\n         if is_initial_login:\ndiff --git a/Products/CMFPlone/browser/login/utils.py b/Products/CMFPlone/browser/login/utils.py\nnew file mode 100644\nindex 0000000000..3d347c8c9c\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/utils.py\n@@ -0,0 +1,28 @@\n+from DateTime import DateTime\n+from DateTime.interfaces import SyntaxError as DateTimeSyntaxError\n+\n+import logging\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def has_logged_in(login_time):\n+    """Is this a valid login time?\n+\n+    The login time for new users is set to January 1, 2000.\n+    If that is the login time, the user has not logged in yet.\n+    """\n+    if not login_time:\n+        return False\n+    if not isinstance(login_time, DateTime):\n+        try:\n+            login_time = DateTime(login_time)\n+        except DateTimeSyntaxError:\n+            # https://github.com/plone/Products.CMFPlone/issues/3656\n+            logger.warning(\'%r is not a valid login_time.\', login_time)\n+            return False\n+    # We used to compare login_time with DateTime(\'2000/01/01\'),\n+    # but it may have a timezone: I have seen both UTC and GTM+1.\n+    # So compare only the date part.\n+    return login_time.Date() != \'2000/01/01\'\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-18T16:11:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/ca6b2a8d28f85f57b8f3e75b458614c782c76145

Take over the post login code in password reset.

Files changed:
M Products/CMFPlone/browser/login/password_reset.py
M Products/CMFPlone/tests/pwreset_browser.rst

b'diff --git a/Products/CMFPlone/browser/login/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nindex 9b75c02695..1b6e162cac 100644\n--- a/Products/CMFPlone/browser/login/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -1,13 +1,16 @@\n # -*- coding: utf-8 -*-\n+from .utils import has_logged_in\n from AccessControl.SecurityManagement import getSecurityManager\n-from DateTime import DateTime\n+from AccessControl.SecurityManagement import newSecurityManager\n+from AccessControl.SecurityManagement import setSecurityManager\n from email.header import Header\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.memoize import view\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import IInitialLogin\n from Products.CMFPlone.interfaces import IPasswordResetToolView\n+from Products.CMFPlone.interfaces import IRedirectAfterLogin\n from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n@@ -16,13 +19,11 @@\n from Products.CMFPlone.utils import safeToInt\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.PlonePAS.events import UserInitialLoginInEvent\n-from Products.PlonePAS.events import UserLoggedInEvent\n from Products.PluggableAuthService.interfaces.plugins import ICredentialsUpdatePlugin  # noqa\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.event import notify\n+from zope.component import queryMultiAdapter\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n@@ -101,34 +102,71 @@ def _auto_login(self, userid, password):\n                 password\n             )\n \n+        is_initial_login = False\n+\n+        # Find member by login name or user id.\n+        # If this fails, then this is strange.\n         member = get_member_by_login_name(context, userid, False)\n+        if not member:\n+            self.request.response.redirect(self.context.absolute_url())\n+            IStatusMessage(self.request).addStatusMessage(\n+                _(\n+                    \'password_reset_failed\',\n+                    default=\'Password reset failed.\',\n+                ),\n+                \'info\',\n+            )\n+            return\n \n-        if member:\n-            user = member.getUser()\n-        else:\n-            # Fallback in case we cannot find a user\n-            # with the given userid\n-            user = getSecurityManager().getUser()\n-\n-        default = DateTime(\'2000/01/01\')\n-        login_time = user.getProperty(\'login_time\', default)\n-        if login_time == default:\n-            notify(UserInitialLoginInEvent(user))\n-        else:\n-            notify(UserLoggedInEvent(user))\n+        user = member.getUser()\n+        orig_sm = getSecurityManager()\n+        try:\n+            newSecurityManager(self.request, user)\n+            is_initial_login = self._post_login()\n+            IStatusMessage(self.request).addStatusMessage(\n+                _(\n+                    \'password_reset_successful\',\n+                    default=\'Password reset successful, \'\n+                            \'you are logged in now!\',\n+                ),\n+                \'info\',\n+            )\n+            self.redirect_after_login(is_initial_login=is_initial_login)\n+        finally:\n+            setSecurityManager(orig_sm)\n \n-        IStatusMessage(self.request).addStatusMessage(\n-            _(\n-                \'password_reset_successful\',\n-                default=\'Password reset successful, \'\n-                        \'you are logged in now!\',\n-            ),\n-            \'info\',\n-        )\n-        url = INavigationRoot(self.context).absolute_url()\n-        self.request.response.redirect(url)\n         return\n \n+    def _post_login(self):\n+        membership_tool = getToolByName(self.context, \'portal_membership\')\n+        member = membership_tool.getAuthenticatedMember()\n+        login_time = member.getProperty(\'login_time\', None)\n+        is_initial_login = not has_logged_in(login_time)\n+        membership_tool.loginUser(self.request)\n+        if is_initial_login:\n+            self.handle_initial_login()\n+        return is_initial_login\n+\n+    def handle_initial_login(self):\n+        handler = queryMultiAdapter((self.context, self.request), IInitialLogin)\n+        if handler:\n+            handler()\n+\n+    def redirect_after_login(self, came_from=None, is_initial_login=False):\n+        # Note: for password reset a came_from parameter seems illogical.\n+        # But let\'s allow it, to be the same as in login.py.\n+        # The default implementation does not pass it in though.\n+        adapter = queryMultiAdapter(\n+            (self.context, self.request),\n+            IRedirectAfterLogin\n+        )\n+        if adapter:\n+            came_from = adapter(came_from, is_initial_login)\n+        if not came_from:\n+            came_from = self.context.absolute_url()\n+\n+        self.request.response.redirect(came_from)\n+\n     def _reset_password(self, pw_tool, randomstring):\n         state = self.getErrors()\n         if state:\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex ed89d9fe0d..916934fcad 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -247,6 +247,12 @@ then we extract the address that lets us reset our password:\n   >>> b"If you didn\'t expect to receive this email" in msg\n   True\n \n+Save the current login times again so we can compare them after password reset.\n+\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time = member.getProperty(\'login_time\')\n+  >>> last_login_time = member.getProperty(\'last_login_time\')\n+\n Now that we have the address, we will reset our password:\n \n   >>> browser.open(address)\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-18T16:18:49+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/8c10be0292832996dbb24c20235175431a5d8912

Add news snippet for 3713.

https://github.com/plone/Products.CMFPlone/issues/3713

Files changed:
A news/3713.bugfix

b'diff --git a/news/3713.bugfix b/news/3713.bugfix\nnew file mode 100644\nindex 0000000000..896d57ff98\n--- /dev/null\n+++ b/news/3713.bugfix\n@@ -0,0 +1,5 @@\n+When autologin after password reset is enabled, use the same adapters as during normal login.\n+Specifically: the ``IInitialLogin`` and ``IRedirectAfterLogin`` adapters.\n+Autologin is enabled by default.\n+Fixes `issue 3713 <https://github.com/plone/Products.CMFPlone/issues/3713>`_.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/5.2.x
Date: 2023-01-25T10:39:48+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFPlone/commit/321173197587cb8bc2d2f7e0c69467f7c3b92633

Merge pull request #3714 from plone/maurits-login-times-autologin

Set login times, use adapters, after auto login with password reset [5.2]

Files changed:
A Products/CMFPlone/browser/login/utils.py
A news/3656.bugfix
A news/3713.bugfix
M Products/CMFPlone/browser/login/login.py
M Products/CMFPlone/browser/login/password_reset.py
M Products/CMFPlone/tests/pwreset_browser.rst
M Products/CMFPlone/tests/test_redirect_after_login.py

b'diff --git a/Products/CMFPlone/browser/login/login.py b/Products/CMFPlone/browser/login/login.py\nindex 2ceda23005..cf0f094b0e 100644\n--- a/Products/CMFPlone/browser/login/login.py\n+++ b/Products/CMFPlone/browser/login/login.py\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from DateTime import DateTime\n+from .utils import has_logged_in\n from plone.app.users.browser.passwordpanel import PasswordPanel\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n@@ -22,7 +22,10 @@\n from zope.component import queryUtility\n from zope.interface import implementer\n \n+import logging\n \n+\n+logger = logging.getLogger(__name__)\n # TODO: Scale down this list now that we\'ve removed a lot of\n # templates.\n LOGIN_TEMPLATE_IDS = [\n@@ -134,10 +137,8 @@ def _post_login(self):\n         membership_tool = getToolByName(self.context, \'portal_membership\')\n         member = membership_tool.getAuthenticatedMember()\n         must_change_password = member.getProperty(\'must_change_password\', 0)\n-        login_time = member.getProperty(\'login_time\', \'2000/01/01\')\n-        if not isinstance(login_time, DateTime):\n-            login_time = DateTime(login_time)\n-        is_initial_login = login_time == DateTime(\'2000/01/01\')\n+        login_time = member.getProperty(\'login_time\', None)\n+        is_initial_login = not has_logged_in(login_time)\n \n         membership_tool.loginUser(self.request)\n         if is_initial_login:\ndiff --git a/Products/CMFPlone/browser/login/password_reset.py b/Products/CMFPlone/browser/login/password_reset.py\nindex 9b75c02695..1b6e162cac 100644\n--- a/Products/CMFPlone/browser/login/password_reset.py\n+++ b/Products/CMFPlone/browser/login/password_reset.py\n@@ -1,13 +1,16 @@\n # -*- coding: utf-8 -*-\n+from .utils import has_logged_in\n from AccessControl.SecurityManagement import getSecurityManager\n-from DateTime import DateTime\n+from AccessControl.SecurityManagement import newSecurityManager\n+from AccessControl.SecurityManagement import setSecurityManager\n from email.header import Header\n-from plone.app.layout.navigation.interfaces import INavigationRoot\n from plone.memoize import view\n from plone.registry.interfaces import IRegistry\n from Products.CMFCore.utils import getToolByName\n from Products.CMFPlone import PloneMessageFactory as _\n+from Products.CMFPlone.interfaces import IInitialLogin\n from Products.CMFPlone.interfaces import IPasswordResetToolView\n+from Products.CMFPlone.interfaces import IRedirectAfterLogin\n from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n from Products.CMFPlone.PasswordResetTool import ExpiredRequestError\n from Products.CMFPlone.PasswordResetTool import InvalidRequestError\n@@ -16,13 +19,11 @@\n from Products.CMFPlone.utils import safeToInt\n from Products.Five import BrowserView\n from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile\n-from Products.PlonePAS.events import UserInitialLoginInEvent\n-from Products.PlonePAS.events import UserLoggedInEvent\n from Products.PluggableAuthService.interfaces.plugins import ICredentialsUpdatePlugin  # noqa\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n-from zope.event import notify\n+from zope.component import queryMultiAdapter\n from zope.i18n import translate\n from zope.interface import implementer\n from zope.publisher.interfaces import IPublishTraverse\n@@ -101,34 +102,71 @@ def _auto_login(self, userid, password):\n                 password\n             )\n \n+        is_initial_login = False\n+\n+        # Find member by login name or user id.\n+        # If this fails, then this is strange.\n         member = get_member_by_login_name(context, userid, False)\n+        if not member:\n+            self.request.response.redirect(self.context.absolute_url())\n+            IStatusMessage(self.request).addStatusMessage(\n+                _(\n+                    \'password_reset_failed\',\n+                    default=\'Password reset failed.\',\n+                ),\n+                \'info\',\n+            )\n+            return\n \n-        if member:\n-            user = member.getUser()\n-        else:\n-            # Fallback in case we cannot find a user\n-            # with the given userid\n-            user = getSecurityManager().getUser()\n-\n-        default = DateTime(\'2000/01/01\')\n-        login_time = user.getProperty(\'login_time\', default)\n-        if login_time == default:\n-            notify(UserInitialLoginInEvent(user))\n-        else:\n-            notify(UserLoggedInEvent(user))\n+        user = member.getUser()\n+        orig_sm = getSecurityManager()\n+        try:\n+            newSecurityManager(self.request, user)\n+            is_initial_login = self._post_login()\n+            IStatusMessage(self.request).addStatusMessage(\n+                _(\n+                    \'password_reset_successful\',\n+                    default=\'Password reset successful, \'\n+                            \'you are logged in now!\',\n+                ),\n+                \'info\',\n+            )\n+            self.redirect_after_login(is_initial_login=is_initial_login)\n+        finally:\n+            setSecurityManager(orig_sm)\n \n-        IStatusMessage(self.request).addStatusMessage(\n-            _(\n-                \'password_reset_successful\',\n-                default=\'Password reset successful, \'\n-                        \'you are logged in now!\',\n-            ),\n-            \'info\',\n-        )\n-        url = INavigationRoot(self.context).absolute_url()\n-        self.request.response.redirect(url)\n         return\n \n+    def _post_login(self):\n+        membership_tool = getToolByName(self.context, \'portal_membership\')\n+        member = membership_tool.getAuthenticatedMember()\n+        login_time = member.getProperty(\'login_time\', None)\n+        is_initial_login = not has_logged_in(login_time)\n+        membership_tool.loginUser(self.request)\n+        if is_initial_login:\n+            self.handle_initial_login()\n+        return is_initial_login\n+\n+    def handle_initial_login(self):\n+        handler = queryMultiAdapter((self.context, self.request), IInitialLogin)\n+        if handler:\n+            handler()\n+\n+    def redirect_after_login(self, came_from=None, is_initial_login=False):\n+        # Note: for password reset a came_from parameter seems illogical.\n+        # But let\'s allow it, to be the same as in login.py.\n+        # The default implementation does not pass it in though.\n+        adapter = queryMultiAdapter(\n+            (self.context, self.request),\n+            IRedirectAfterLogin\n+        )\n+        if adapter:\n+            came_from = adapter(came_from, is_initial_login)\n+        if not came_from:\n+            came_from = self.context.absolute_url()\n+\n+        self.request.response.redirect(came_from)\n+\n     def _reset_password(self, pw_tool, randomstring):\n         state = self.getErrors()\n         if state:\ndiff --git a/Products/CMFPlone/browser/login/utils.py b/Products/CMFPlone/browser/login/utils.py\nnew file mode 100644\nindex 0000000000..3d347c8c9c\n--- /dev/null\n+++ b/Products/CMFPlone/browser/login/utils.py\n@@ -0,0 +1,28 @@\n+from DateTime import DateTime\n+from DateTime.interfaces import SyntaxError as DateTimeSyntaxError\n+\n+import logging\n+\n+\n+logger = logging.getLogger(__name__)\n+\n+\n+def has_logged_in(login_time):\n+    """Is this a valid login time?\n+\n+    The login time for new users is set to January 1, 2000.\n+    If that is the login time, the user has not logged in yet.\n+    """\n+    if not login_time:\n+        return False\n+    if not isinstance(login_time, DateTime):\n+        try:\n+            login_time = DateTime(login_time)\n+        except DateTimeSyntaxError:\n+            # https://github.com/plone/Products.CMFPlone/issues/3656\n+            logger.warning(\'%r is not a valid login_time.\', login_time)\n+            return False\n+    # We used to compare login_time with DateTime(\'2000/01/01\'),\n+    # but it may have a timezone: I have seen both UTC and GTM+1.\n+    # So compare only the date part.\n+    return login_time.Date() != \'2000/01/01\'\ndiff --git a/Products/CMFPlone/tests/pwreset_browser.rst b/Products/CMFPlone/tests/pwreset_browser.rst\nindex e12dbcb9c1..916934fcad 100644\n--- a/Products/CMFPlone/tests/pwreset_browser.rst\n+++ b/Products/CMFPlone/tests/pwreset_browser.rst\n@@ -8,6 +8,7 @@ Note that our usage of testbrowser is unusual and inconsistent, mostly\n because Plone forms have inconsistencies and because testbrowser makes\n assumptions that are not true for Plone forms.\n \n+  >>> from DateTime import DateTime\n   >>> from plone.testing.zope import Browser\n   >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD\n   >>> browser = Browser(layer[\'app\'])\n@@ -137,6 +138,23 @@ e-mail.\n   >>> "You have been registered" in browser.contents\n   True\n \n+The login times are set to the default in 2000:\n+\n+  >>> portal_membership = layer[\'portal\'].portal_membership\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time = member.getProperty(\'login_time\')\n+  >>> isinstance(login_time, DateTime)\n+  True\n+  >>> login_time.Date()\n+  \'2000/01/01\'\n+  >>> last_login_time = member.getProperty(\'last_login_time\')\n+  >>> isinstance(last_login_time, DateTime)\n+  True\n+  >>> last_login_time <= login_time\n+  True\n+  >>> last_login_time.Date()\n+  \'2000/01/01\'\n+\n We are not logged in yet at this point.  Let\'s try to log in:\n \n   >>> browser.getLink(\'Log in\').click()\n@@ -148,6 +166,25 @@ We are not logged in yet at this point.  Let\'s try to log in:\n   >>> "You are now logged in" in browser.contents\n   True\n \n+Two login time properties should have been set on the user:\n+\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time = member.getProperty(\'login_time\')\n+  >>> isinstance(login_time, DateTime)\n+  True\n+  >>> last_login_time = member.getProperty(\'last_login_time\')\n+  >>> isinstance(last_login_time, DateTime)\n+  True\n+  >>> last_login_time <= login_time\n+  True\n+\n+The default login time is January 1 2000.  Check that it is much newer now:\n+\n+  >>> login_time > DateTime(2020, 2, 2)\n+  True\n+  >>> last_login_time > DateTime(2020, 2, 2)\n+  True\n+\n Log out again:\n \n   >>> browser.getLink(\'Log out\').click()\n@@ -210,6 +247,12 @@ then we extract the address that lets us reset our password:\n   >>> b"If you didn\'t expect to receive this email" in msg\n   True\n \n+Save the current login times again so we can compare them after password reset.\n+\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time = member.getProperty(\'login_time\')\n+  >>> last_login_time = member.getProperty(\'last_login_time\')\n+\n Now that we have the address, we will reset our password:\n \n   >>> browser.open(address)\n@@ -222,11 +265,24 @@ Now that we have the address, we will reset our password:\n   >>> form.getControl(name=\'password2\').value = \'secretion\'\n   >>> form.submit()\n \n-We can now logged in:\n+By default \'autologin_after_password_reset\' is turned on, so we are now logged in:\n \n   >>> "Password reset successful, you are logged in now!" in browser.contents\n   True\n \n+The two login time properties should have been updated on the user:\n+\n+  >>> member = portal_membership.getMemberById(\'jsmith\')\n+  >>> login_time < member.getProperty(\'login_time\')\n+  True\n+  >>> last_login_time < member.getProperty(\'last_login_time\')\n+  True\n+\n+The last login time is now set to the previous value of login time:\n+\n+  >>> login_time == member.getProperty(\'last_login_time\')\n+  True\n+\n Log out again:\n \n   >>> browser.getLink(\'Log out\').click()\ndiff --git a/Products/CMFPlone/tests/test_redirect_after_login.py b/Products/CMFPlone/tests/test_redirect_after_login.py\nindex 6dd1a54221..642219b0fe 100644\n--- a/Products/CMFPlone/tests/test_redirect_after_login.py\n+++ b/Products/CMFPlone/tests/test_redirect_after_login.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import TEST_USER_ID\n from plone.app.testing import TEST_USER_NAME\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.testing.zope import Browser\n@@ -11,6 +12,8 @@\n from zope.interface import Interface\n from zope.publisher.interfaces import IRequest\n \n+import quopri\n+import transaction\n import unittest\n \n \n@@ -191,3 +194,79 @@ def test_initiallogin_adapter(self):\n         self.assertIn(\'You are now logged out.\',\n                       self.browser.contents,\n                       \'Logout status message not displayed.\')\n+\n+    def test_password_reset_uses_all_adapters(self):\n+        # By default, when you reset your password, you are directly logged in.\n+        # An initial login adapter should be active.\n+        # And the redirect after login adapter too.\n+        from plone.registry.interfaces import IRegistry\n+        from Products.CMFPlone.interfaces.controlpanel import IMailSchema\n+        from zope.component import getGlobalSiteManager\n+        from zope.component import getUtility\n+\n+        # We need to configure the mailhost first.\n+        registry = getUtility(IRegistry, context=self.portal)\n+        mail_settings = registry.forInterface(IMailSchema, prefix="plone")\n+        mail_settings.smtp_host = u\'localhost\'\n+        mail_settings.email_from_address = \'smith@example.com\'\n+        # and an email address for the test user:\n+        member = self.portal.portal_membership.getMemberById(TEST_USER_ID)\n+        member.setProperties(email="dummy@example.org")\n+        transaction.commit()\n+\n+        # Fill in the password reset form.\n+        self.browser.open(\'http://nohost/plone/@@login-help\')\n+        form = self.browser.getForm(index=1)\n+        form.getControl(name=\'form.widgets.reset_password\').value = TEST_USER_NAME\n+        form.submit(name=\'form.buttons.reset\')\n+\n+        # Get the password reset mail from the dummy mailhost.\n+        mailhost = self.portal.MailHost\n+        self.assertEqual(len(mailhost.messages), 1)\n+        msg = mailhost.messages[0]\n+\n+        # Extract the address that lets us reset our password.\n+        msg = quopri.decodestring(msg)\n+        please_visit_text = b"reset your password for Plone site site:"\n+        self.assertIn(please_visit_text, msg)\n+        url_index = msg.index(please_visit_text) + len(please_visit_text)\n+        address = msg[url_index:].strip().split()[0].decode()\n+        self.assertTrue(address.startswith(u\'http://nohost/plone/passwordreset/\'))\n+\n+        # Now that we have the address, we will reset our password:\n+\n+        self.browser.open(address)\n+        self.assertIn("Set your password", self.browser.contents)\n+        form = self.browser.getForm(name=\'pwreset_action\')\n+        form.getControl(name=\'userid\').value = TEST_USER_NAME\n+        form.getControl(name=\'password\').value = \'secretion\'\n+        form.getControl(name=\'password2\').value = \'secretion\'\n+\n+        # Register our adapters, submit the form, and unregister them.\n+        gsm = getGlobalSiteManager()\n+        gsm.registerAdapter(AfterLoginAdapter, (Interface, IRequest))\n+        gsm.registerAdapter(InitialLoginAdapter, (Interface, IRequest))\n+        try:\n+            form.submit()\n+        finally:\n+            gsm.unregisterAdapter(InitialLoginAdapter, (Interface, IRequest))\n+            gsm.unregisterAdapter(AfterLoginAdapter, (Interface, IRequest))\n+\n+        # By default \'autologin_after_password_reset\' is turned on,\n+        # so we are now logged in:\n+        self.assertIn(\n+            "Password reset successful, you are logged in now!",\n+            self.browser.contents,\n+        )\n+        self.assertEqual(self.browser.url,\n+                         \'http://nohost/plone/sitemap\',\n+                         \'Successful login did not use the adapter for \'\n+                         \'redirect.\')\n+        self.assertEqual(self.portal.foo, \'foo\')\n+\n+        # Now log out.\n+        self.browser.getLink(\'Log out\').click()\n+\n+        self.assertIn(\'You are now logged out.\',\n+                      self.browser.contents,\n+                      \'Logout status message not displayed.\')\ndiff --git a/news/3656.bugfix b/news/3656.bugfix\nnew file mode 100644\nindex 0000000000..b36e56eb6d\n--- /dev/null\n+++ b/news/3656.bugfix\n@@ -0,0 +1,3 @@\n+During login, when login_time is invalid, warn and reset it to 2000/01/01.\n+Fixes `issue 3656 <https://github.com/plone/Products.CMFPlone/issues/3656>`_.\n+[maurits]\ndiff --git a/news/3713.bugfix b/news/3713.bugfix\nnew file mode 100644\nindex 0000000000..896d57ff98\n--- /dev/null\n+++ b/news/3713.bugfix\n@@ -0,0 +1,5 @@\n+When autologin after password reset is enabled, use the same adapters as during normal login.\n+Specifically: the ``IInitialLogin`` and ``IRedirectAfterLogin`` adapters.\n+Autologin is enabled by default.\n+Fixes `issue 3713 <https://github.com/plone/Products.CMFPlone/issues/3713>`_.\n+[maurits]\n'

