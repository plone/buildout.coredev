Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-08-23T16:37:28+02:00
Author: Mikel Larreategi (erral) <mlarreategi@codesyntax.com>
Commit: https://github.com/plone/plone.restapi/commit/48d2569b00b4e166556b6699ce4ee086f30a2c7e

Allow passing additional parameters to the @users endpoint when deleting a user (#1599)

* add an option to pass additional parameters to the delete user endpoint

* tests and docs

* black

* changelog

* remove unneeded commits

---------

Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;

Files changed:
A news/1598.feat
A src/plone/restapi/tests/http-examples/users_delete_no_localroles.req
A src/plone/restapi/tests/http-examples/users_delete_no_localroles.resp
A src/plone/restapi/tests/http-examples/users_delete_no_memberareas.req
A src/plone/restapi/tests/http-examples/users_delete_no_memberareas.resp
M docs/source/endpoints/users.md
M src/plone/restapi/services/users/delete.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_services_users.py

b'diff --git a/docs/source/endpoints/users.md b/docs/source/endpoints/users.md\nindex 3bbce14bf9..7a63ea90e7 100644\n--- a/docs/source/endpoints/users.md\n+++ b/docs/source/endpoints/users.md\n@@ -12,7 +12,6 @@ myst:\n Available users in a Plone site can be created, queried, updated, and deleted by interacting with the `/@users` endpoint on portal root.\n This action requires an authenticated user:\n \n-\n ## List Users\n \n To retrieve a list of all current users in the portal, call the `/@users` endpoint with a `GET` request:\n@@ -104,7 +103,6 @@ The server will respond with a list of users where the `fullname`, `email` or `i\n :language: http\n ```\n \n-\n ## Create User\n \n To create a new user, send a `POST` request to the global `/@users` endpoint with a JSON representation of the user you want to create in the body:\n@@ -187,7 +185,6 @@ In this case, the server will respond with a {term}`200 OK` status code and the\n :language: http\n ```\n \n-\n ## Update User\n \n To update the settings of a user, send a `PATCH` request with the user details you want to amend to the URL of that particular user.\n@@ -232,7 +229,6 @@ If you still want Plone to take care of image scaling using the default Plone be\n     :request: ../../../src/plone/restapi/tests/http-examples/users_update_portrait_scale.req\n ```\n \n-\n ## Delete User\n \n To delete a user, send a `DELETE` request to the `/@users` endpoint and append the user ID of the user you want to delete.\n@@ -249,6 +245,47 @@ A successful response will be indicated by a {term}`204 No Content` response:\n :language: http\n ```\n \n+When deleting a user in large sites with a lot of users and content the deleting operation may take a lot of time to the extent of setting it in an unresponsive state.\n+\n+There is a workaround about this which is to request Plone not to delete the Member areas or the local roles that may have been granted in the past.\n+\n+To mark such a behavior we need to pass specific parameters to the delete endpoint.\n+\n+In this case we request not to delete the local roles:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/users_delete_no_localroles.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/users_delete_no_localroles.resp\n+:language: http\n+```\n+\n+In this case we request not to delete the member areas:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/users_delete_no_memberareas.req\n+```\n+\n+A successful response will be indicated by a {term}`204 No Content` response:\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/users_delete_no_memberareas.resp\n+:language: http\n+```\n+\n+Both parameters can be added in the same request.\n+\n+```{warning}\n+These two specific requests should be made with special care because they may leave traces of the deleted users in the Plone database.\n+\n+Specifically, although the user is deleted the reference of its permissions stay on the database.\n+\n+This means that if in the future you add a new user with the same userid, it may get the local roles and member area previously created for the old user.\n+```\n \n ## User registration\n \n@@ -272,7 +309,6 @@ If the user has been created, the server will respond with a {term}`201 Created`\n :language: http\n ```\n \n-\n ## Reset User Password\n \n Plone allows to reset a password for a user by sending a `POST` request to the user resource and appending `/reset-password` to the URL:\n@@ -292,7 +328,6 @@ The token that is part of the reset URL in the email can be used to authorize se\n     :request: ../../../src/plone/restapi/tests/http-examples/users_reset.req\n ```\n \n-\n ### Reset Own Password\n \n Plone also allows a user to reset her own password directly without sending an email.\n@@ -316,7 +351,6 @@ To set the password with the old password, you need either the `Set own password\n \n If an API consumer tries to send a password in the payload that is not the same as the currently logged in user, the server will respond with a {term}`400 Bad Request` response.\n \n-\n ### Return Values\n \n - {term}`200 OK`\ndiff --git a/news/1598.feat b/news/1598.feat\nnew file mode 100644\nindex 0000000000..9671a17169\n--- /dev/null\n+++ b/news/1598.feat\n@@ -0,0 +1,2 @@\n+Allow passing additional parameters to the delete users endpoint to request not to delete local roles and memberareas\n+[erral]\ndiff --git a/src/plone/restapi/services/users/delete.py b/src/plone/restapi/services/users/delete.py\nindex 905de65d16..e7517f6655 100644\n--- a/src/plone/restapi/services/users/delete.py\n+++ b/src/plone/restapi/services/users/delete.py\n@@ -5,6 +5,9 @@\n from zope.publisher.interfaces import IPublishTraverse\n \n \n+FALSE_VALUES = (0, "0", False, "false", "no")\n+\n+\n @implementer(IPublishTraverse)\n class UsersDelete(Service):\n     """Deletes a user."""\n@@ -27,7 +30,20 @@ def _get_user_id(self):\n     def reply(self):\n         portal = getSite()\n         portal_membership = getToolByName(portal, "portal_membership")\n-        delete_successful = portal_membership.deleteMembers((self._get_user_id,))\n+\n+        delete_memberareas = (\n+            self.request.get("delete_memberareas", True) not in FALSE_VALUES\n+        )\n+\n+        delete_localroles = (\n+            self.request.get("delete_localroles", True) not in FALSE_VALUES\n+        )\n+\n+        delete_successful = portal_membership.deleteMembers(\n+            (self._get_user_id,),\n+            delete_memberareas=delete_memberareas,\n+            delete_localroles=delete_localroles,\n+        )\n         if delete_successful:\n             return self.reply_no_content()\n         else:\ndiff --git a/src/plone/restapi/tests/http-examples/users_delete_no_localroles.req b/src/plone/restapi/tests/http-examples/users_delete_no_localroles.req\nnew file mode 100644\nindex 0000000000..8bcfb67b3f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_delete_no_localroles.req\n@@ -0,0 +1,6 @@\n+DELETE /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/x-www-form-urlencoded\n+\n+delete_localroles=0\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_delete_no_localroles.resp b/src/plone/restapi/tests/http-examples/users_delete_no_localroles.resp\nnew file mode 100644\nindex 0000000000..0074ded3bc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_delete_no_localroles.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/users_delete_no_memberareas.req b/src/plone/restapi/tests/http-examples/users_delete_no_memberareas.req\nnew file mode 100644\nindex 0000000000..e5c409db1f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_delete_no_memberareas.req\n@@ -0,0 +1,6 @@\n+DELETE /plone/@users/noam HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/x-www-form-urlencoded\n+\n+delete_memberareas=0\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/users_delete_no_memberareas.resp b/src/plone/restapi/tests/http-examples/users_delete_no_memberareas.resp\nnew file mode 100644\nindex 0000000000..0074ded3bc\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/users_delete_no_memberareas.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex a99b848569..df5f8aef5b 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1107,6 +1107,48 @@ def test_documentation_users_delete(self):\n         response = self.api_session.delete("/@users/noam")\n         save_request_and_response_for_docs("users_delete", response)\n \n+    def test_documentation_users_delete_no_localroles(self):\n+        properties = {\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n+        }\n+        api.user.create(\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            properties=properties,\n+        )\n+        transaction.commit()\n+\n+        response = self.api_session.delete(\n+            "/@users/noam", data={"delete_localroles": 0}\n+        )\n+        save_request_and_response_for_docs("users_delete_no_localroles", response)\n+\n+    def test_documentation_users_delete_no_memberareas(self):\n+        properties = {\n+            "email": "noam.chomsky@example.com",\n+            "username": "noamchomsky",\n+            "fullname": "Noam Avram Chomsky",\n+            "home_page": "web.mit.edu/chomsky",\n+            "description": "Professor of Linguistics",\n+            "location": "Cambridge, MA",\n+        }\n+        api.user.create(\n+            email="noam.chomsky@example.com",\n+            username="noam",\n+            properties=properties,\n+        )\n+        transaction.commit()\n+\n+        response = self.api_session.delete(\n+            "/@users/noam", data={"delete_memberareas": 0}\n+        )\n+        save_request_and_response_for_docs("users_delete_no_memberareas", response)\n+\n     def test_documentation_groups(self):\n         gtool = api.portal.get_tool("portal_groups")\n         properties = {\ndiff --git a/src/plone/restapi/tests/test_services_users.py b/src/plone/restapi/tests/test_services_users.py\nindex 6d355f2d4a..b08170eafc 100644\n--- a/src/plone/restapi/tests/test_services_users.py\n+++ b/src/plone/restapi/tests/test_services_users.py\n@@ -40,6 +40,12 @@ def setUp(self):\n         self.anon_api_session = RelativeSession(self.portal_url, test=self)\n         self.anon_api_session.headers.update({"Accept": "application/json"})\n \n+        api.portal.set_registry_record("plone.enable_user_folders", True)\n+        api.content.create(\n+            container=self.portal, type="Folder", id="Members", title="Members"\n+        )\n+\n+        transaction.commit()\n         properties = {\n             "email": "noam.chomsky@example.com",\n             "username": "noamchomsky",\n@@ -66,6 +72,7 @@ def setUp(self):\n             password="otherpassword",\n         )\n         api.group.add_user(groupname="Reviewers", username="otheruser")\n+\n         transaction.commit()\n \n     def tearDown(self):\n@@ -159,8 +166,7 @@ def test_add_user_password_is_required(self):\n \n         self.assertEqual(400, response.status_code)\n         self.assertTrue(\n-            ("You have to either send a " "password or sendPasswordReset")\n-            in response.text\n+            "You have to either send a password or sendPasswordReset" in response.text\n         )\n \n     def test_add_user_email_is_required_if_email_login_is_enabled(self):\n@@ -169,7 +175,8 @@ def test_add_user_email_is_required_if_email_login_is_enabled(self):\n         security_settings.use_email_as_login = True\n         transaction.commit()\n         response = self.api_session.post(\n-            "/@users", json={"username": "noam", "password": TEST_USER_PASSWORD}\n+            "/@users",\n+            json={"username": "noam", "password": TEST_USER_PASSWORD},\n         )\n \n         self.assertEqual(400, response.status_code)\n@@ -182,7 +189,10 @@ def test_add_user_email_with_email_login_enabled(self):\n         transaction.commit()\n         response = self.api_session.post(\n             "/@users",\n-            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": TEST_USER_PASSWORD,\n+            },\n         )\n         transaction.commit()\n \n@@ -214,7 +224,10 @@ def test_add_user_with_email_login_enabled(self):\n         transaction.commit()\n         response = self.api_session.post(\n             "/@users",\n-            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": TEST_USER_PASSWORD,\n+            },\n         )\n         transaction.commit()\n \n@@ -308,7 +321,10 @@ def test_add_user_with_uuid_as_userid_enabled(self):\n         transaction.commit()\n         response = self.api_session.post(\n             "/@users",\n-            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": TEST_USER_PASSWORD,\n+            },\n         )\n         transaction.commit()\n \n@@ -325,7 +341,8 @@ def test_get_user(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual("noam", response.json().get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + "/@users/noam", response.json().get("@id")\n+            self.portal.absolute_url() + "/@users/noam",\n+            response.json().get("@id"),\n         )\n         self.assertEqual("noam.chomsky@example.com", response.json().get("email"))\n         self.assertEqual("Noam Avram Chomsky", response.json().get("fullname"))\n@@ -377,7 +394,8 @@ def test_get_search_user_with_filter(self):\n         self.assertEqual(len(response.json()), 1)\n         self.assertEqual("noam", response.json()[0].get("id"))\n         self.assertEqual(\n-            self.portal.absolute_url() + "/@users/noam", response.json()[0].get("@id")\n+            self.portal.absolute_url() + "/@users/noam",\n+            response.json()[0].get("@id"),\n         )\n         self.assertEqual("noam.chomsky@example.com", response.json()[0].get("email"))\n         self.assertEqual(\n@@ -696,7 +714,10 @@ def test_user_set_own_password_requires_old_and_new_password(self):\n \n     def test_user_set_own_password_checks_old_password(self):\n         self.api_session.auth = ("noam", "password")\n-        payload = {"new_password": "new_password", "old_password": "wrong_password"}\n+        payload = {\n+            "new_password": "new_password",\n+            "old_password": "wrong_password",\n+        }\n         response = self.api_session.post("/@users/noam/reset-password", json=payload)\n \n         self.assertEqual(response.status_code, 403)\n@@ -747,7 +768,10 @@ def test_reset_with_uuid_as_userid_and_login_email_using_id(self):\n \n         response = self.api_session.post(\n             "/@users",\n-            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": TEST_USER_PASSWORD,\n+            },\n         )\n         transaction.commit()\n \n@@ -777,7 +801,10 @@ def test_reset_with_uuid_as_userid_and_login_email_using_mail(self):\n \n         response = self.api_session.post(\n             "/@users",\n-            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": TEST_USER_PASSWORD,\n+            },\n         )\n         transaction.commit()\n \n@@ -806,7 +833,10 @@ def test_reset_and_login_email_using_mail(self):\n \n         response = self.api_session.post(\n             "/@users",\n-            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": TEST_USER_PASSWORD,\n+            },\n         )\n         transaction.commit()\n \n@@ -834,6 +864,52 @@ def test_delete_user(self):\n         self.assertEqual(response.status_code, 204)\n         self.assertEqual(None, api.user.get(userid="noam"))\n \n+    def test_delete_user_but_not_memberareas(self):\n+        mtool = getToolByName(self.portal, "portal_membership")\n+        mtool.createMemberArea("noam")\n+\n+        response = self.api_session.delete(\n+            "/@users/noam", data={"delete_memberareas": 0}\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(response.status_code, 204)\n+        self.assertEqual(None, api.user.get(userid="noam"))\n+\n+        memberfolder = self.portal.get("Members", None)\n+        self.assertIsNotNone(memberfolder)\n+        if memberfolder is not None:\n+            self.assertIn("noam", memberfolder)\n+\n+    def test_delete_user_but_not_localroles(self):\n+        self.folder = api.content.create(\n+            container=self.portal,\n+            type="Folder",\n+            id="folder",\n+            title="My Folder",\n+        )\n+        api.user.grant_roles(username="noam", roles=["Reviewer"], obj=self.folder)\n+\n+        self.assertIn("Reviewer", api.user.get_roles(username="noam", obj=self.folder))\n+\n+        response = self.api_session.delete(\n+            "/@users/noam", data={"delete_localroles": 0}\n+        )\n+        transaction.commit()\n+\n+        self.assertEqual(response.status_code, 204)\n+        self.assertEqual(None, api.user.get(userid="noam"))\n+\n+        user_local_roles = self.folder.get_local_roles_for_userid(userid="noam")\n+        self.assertIn("Reviewer", user_local_roles)\n+\n+    def test_delete_deletes_localroles(self):\n+        response = self.api_session.delete("/@users/noam?delete_localroles=0")\n+        transaction.commit()\n+\n+        self.assertEqual(response.status_code, 204)\n+        self.assertEqual(None, api.user.get(userid="noam"))\n+\n     def test_delete_non_existing_user(self):\n         response = self.api_session.delete("/@users/non-existing-user")\n         transaction.commit()\n@@ -857,7 +933,10 @@ def test_anonymous_requires_enable_self_reg(self):\n \n         response = self.anon_api_session.post(\n             "/@users",\n-            json={"username": "new_user", "email": "avram.chomsky@example.com"},\n+            json={\n+                "username": "new_user",\n+                "email": "avram.chomsky@example.com",\n+            },\n         )\n         transaction.commit()\n \n@@ -870,7 +949,10 @@ def test_anonymous_without_enable_user_pwd_choice_sends_mail(self):\n \n         response = self.anon_api_session.post(\n             "/@users",\n-            json={"username": "new_user", "email": "avram.chomsky@example.com"},\n+            json={\n+                "username": "new_user",\n+                "email": "avram.chomsky@example.com",\n+            },\n         )\n         transaction.commit()\n \n@@ -1038,7 +1120,10 @@ def test_get_user_portrait_if_email_login_enabled(self):\n \n         response = self.api_session.post(\n             "/@users",\n-            json={"email": "howard.zinn@example.com", "password": TEST_USER_PASSWORD},\n+            json={\n+                "email": "howard.zinn@example.com",\n+                "password": TEST_USER_PASSWORD,\n+            },\n         )\n         transaction.commit()\n \n'

