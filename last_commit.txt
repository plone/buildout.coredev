Repository: plone.restapi


Branch: refs/heads/7.x.x
Date: 2021-10-12T15:45:19+02:00
Author: ichim-david (ichim-david) <ichim.david@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/034a57a1288b69a742ca6a09b4dd95db383fa979

#1125 cherry picked to 7.x.x branch (#1246)

* Pin jsonschema to a version that is still compatible with Python 2.7

* Pin flake8 and pycodestyle that doesn't crash on Python 2.7 or 3.8 and Plone 5.2

* Added news entry for history change

* Add collective.zpretty integration (#1120)

* Run zpretty on zcml files

* Support for bash

* Fix GH workflow name

* Test zpretty wf

* Try to fail on git diff

* Run zpretty

* Add zpretty makefile target

* Add news entry

* Rename news file

(cherry picked from commit 80c0b085381dceb177b48fed34897ecd69d7efa4)

* Set sleep also for test_types_document_patch_properties since it failed

* zpretty fix

* Added missing name to locking patch

* Slate resolveuid (#1125)

* Add slate resolveuid serializer/deserializer/indexer

* Add tests

* Fix slate deserializer; add test for simple link

* Make tests pass

* Remove unused import

* Handle slate simple links, add test

* Add slate link support, add news entry

* Try to get black happy

* Try to make black happy

* Run zpretty

* Remove junk

(cherry picked from commit 4ec785e20d512c0e6d82e0d4ae4970e39948e483)

Co-authored-by: Tiberiu Ichim &lt;tiberiuichim@users.noreply.github.com&gt;

Files changed:
A news/1125.feature
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/indexers.py
M src/plone/restapi/indexers.zcml
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_blocks_searchable_text.py
M src/plone/restapi/tests/test_blocks_serializer.py

b'diff --git a/news/1125.feature b/news/1125.feature\nnew file mode 100644\nindex 000000000..1e646a76b\n--- /dev/null\n+++ b/news/1125.feature\n@@ -0,0 +1 @@\n+Add support for volto-slate blocks: resolveuid for links, transformer support @tiberiuichim\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex 81642f6e3..62fe553cc 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from Acquisition import aq_parent\n+from collections import deque\n from copy import deepcopy\n from plone import api\n from plone.restapi.behaviors import IBlocks\n@@ -21,6 +22,19 @@\n import os\n \n \n+def iterate_children(value):\n+    """iterate_children.\n+\n+    :param value:\n+    """\n+    queue = deque(value)\n+    while queue:\n+        child = queue.pop()\n+        yield child\n+        if child.get("children"):\n+            queue.extend(child["children"] or [])\n+\n+\n def path2uid(context, link):\n     # unrestrictedTraverse requires a string on py3. see:\n     # https://github.com/zopefoundation/Zope/issues/674\n@@ -258,3 +272,65 @@ class ImageBlockDeserializer(ImageBlockDeserializerBase):\n @implementer(IBlockFieldDeserializationTransformer)\n class ImageBlockDeserializerRoot(ImageBlockDeserializerBase):\n     """Deserializer for site root"""\n+\n+\n+def transform_links(context, value, transformer):\n+    """Convert absolute links to resolveuid\n+    http://localhost:55001/plone/link-target\n+    ->\n+    ../resolveuid/023c61b44e194652804d05a15dc126f4"""\n+    data = value.get("data", {})\n+    if data.get("link", {}).get("internal", {}).get("internal_link"):\n+        internal_link = data["link"]["internal"]["internal_link"]\n+        for link in internal_link:\n+            link["@id"] = transformer(context, link["@id"])\n+\n+\n+class SlateBlockTransformer(object):\n+    """SlateBlockTransformer."""\n+\n+    field = "value"\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, block):\n+        value = (block or {}).get(self.field, [])\n+        children = iterate_children(value or [])\n+\n+        for child in children:\n+            node_type = child.get("type")\n+            if node_type:\n+                handler = getattr(self, "handle_{}".format(node_type), None)\n+                if handler:\n+                    handler(child)\n+\n+        return block\n+\n+\n+class SlateBlockDeserializerBase(SlateBlockTransformer):\n+    """SlateBlockDeserializerBase."""\n+\n+    order = 100\n+    block_type = "slate"\n+    disabled = os.environ.get("disable_transform_resolveuid", False)\n+\n+    def handle_a(self, child):\n+        transform_links(self.context, child, transformer=path2uid)\n+\n+    def handle_link(self, child):\n+        if child.get("data", {}).get("url"):\n+            child["data"]["url"] = path2uid(self.context, child["data"]["url"])\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class SlateBlockDeserializer(SlateBlockDeserializerBase):\n+    """Deserializer for content-types that implements IBlocks behavior"""\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class SlateBlockDeserializerRoot(SlateBlockDeserializerBase):\n+    """Deserializer for site root"""\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 2407d7d4b..1c2b64767 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -88,6 +88,15 @@\n       provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n       />\n \n+  <subscriber\n+      factory=".blocks.SlateBlockDeserializer"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n+  <subscriber\n+      factory=".blocks.SlateBlockDeserializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n+\n   <adapter\n       factory=".local_roles.DeserializeFromJson"\n       name="local_roles"\ndiff --git a/src/plone/restapi/indexers.py b/src/plone/restapi/indexers.py\nindex 588f126b8..49148db41 100644\n--- a/src/plone/restapi/indexers.py\n+++ b/src/plone/restapi/indexers.py\n@@ -73,3 +73,30 @@ def SearchableText_blocks(obj):\n     blocks_text.append(std_text)\n \n     return " ".join(blocks_text)\n+\n+\n+class SlateTextIndexer(object):\n+    """SlateTextIndexer."""\n+\n+    def __init__(self, context, request):\n+        """__init__.\n+\n+        :param context:\n+        :param request:\n+        """\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, block):\n+        """__call__.\n+\n+        :param block:\n+        """\n+        # text indexer for slate blocks. Relies on the slate field\n+        block = block or {}\n+\n+        if block.get("searchableText"):\n+            return None\n+\n+        # BBB compatibility with slate blocks that used the "plaintext" field\n+        return (block or {}).get("plaintext", "")\ndiff --git a/src/plone/restapi/indexers.zcml b/src/plone/restapi/indexers.zcml\nindex b9f1e7496..f208d815c 100644\n--- a/src/plone/restapi/indexers.zcml\n+++ b/src/plone/restapi/indexers.zcml\n@@ -13,6 +13,13 @@\n         factory=".indexers.TextBlockSearchableText"\n         name="text"\n         />\n+    <adapter\n+        factory=".indexers.SlateTextIndexer"\n+        provides="plone.restapi.interfaces.IBlockSearchableText"\n+        for="*\n+             *"\n+        name="slate"\n+        />\n   </configure>\n \n </configure>\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex e9571e372..57afc025a 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -3,6 +3,8 @@\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.browser.resolveuid import uuidToURL\n from plone.restapi.behaviors import IBlocks\n+from plone.restapi.deserializer.blocks import SlateBlockTransformer\n+from plone.restapi.deserializer.blocks import transform_links\n from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.interfaces import IObjectPrimaryFieldTarget\n@@ -180,3 +182,33 @@ class TextBlockSerializer(TextBlockSerializerBase):\n @adapter(IPloneSiteRoot, IBrowserRequest)\n class TextBlockSerializerRoot(TextBlockSerializerBase):\n     """Serializer for site root"""\n+\n+\n+class SlateBlockSerializerBase(SlateBlockTransformer):\n+    """SlateBlockSerializerBase."""\n+\n+    order = 100\n+    block_type = "slate"\n+    disabled = os.environ.get("disable_transform_resolveuid", False)\n+\n+    def _uid_to_url(self, context, path):\n+        return uid_to_url(path)\n+\n+    def handle_a(self, child):\n+        transform_links(self.context, child, transformer=self._uid_to_url)\n+\n+    def handle_link(self, child):\n+        if child.get("data", {}).get("url"):\n+            child["data"]["url"] = uid_to_url(child["data"]["url"])\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class SlateBlockSerializer(SlateBlockSerializerBase):\n+    """Serializer for content-types with IBlocks behavior"""\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+class SlateBlockSerializerRoot(SlateBlockSerializerBase):\n+    """Serializer for site root"""\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 69b6dff54..938e5b401 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -44,6 +44,15 @@\n       factory=".blocks.ResolveUIDSerializerRoot"\n       provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n       />\n+  <subscriber\n+      factory=".blocks.SlateBlockSerializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n+\n+  <subscriber\n+      factory=".blocks.SlateBlockSerializer"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n \n   <!--\n       We check for Products.Archetypes.atapi to avoid false positive\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex be350e875..1cedecb0f 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -308,3 +308,79 @@ def test_deserialize_subblocks_transformers(self):\n             "html"\n         ]\n         self.assertEqual(block, u"<div>This stays</div>")\n+\n+    def test_slate_internal_link_deserializer(self):\n+        blocks = {\n+            "2caef9e6-93ff-4edf-896f-8c16654a9923": {\n+                "@type": "slate",\n+                "plaintext": "this is a slate link inside some text",\n+                "value": [\n+                    {\n+                        "type": "p",\n+                        "children": [\n+                            {"text": "this is a "},\n+                            {\n+                                "children": [\n+                                    {"text": ""},\n+                                    {\n+                                        "type": "a",\n+                                        "children": [{"text": "slate link"}],\n+                                        "data": {\n+                                            "link": {\n+                                                "internal": {\n+                                                    "internal_link": [\n+                                                        {\n+                                                            "@id": "%s/image-1"\n+                                                            % self.portal.absolute_url(),\n+                                                            "title": "Image 1",\n+                                                        }\n+                                                    ]\n+                                                }\n+                                            }\n+                                        },\n+                                    },\n+                                    {"text": ""},\n+                                ],\n+                                "type": "strong",\n+                            },\n+                            {"text": " inside some text"},\n+                        ],\n+                    }\n+                ],\n+            },\n+            "6b2be2e6-9857-4bcc-a21a-29c0449e1c68": {"@type": "title"},\n+        }\n+        res = self.deserialize(blocks=blocks)\n+        value = res.blocks["2caef9e6-93ff-4edf-896f-8c16654a9923"]["value"]\n+        link = value[0]["children"][1]["children"][1]\n+        resolve_link = link["data"]["link"]["internal"]["internal_link"][0]["@id"]\n+        self.assertTrue(resolve_link.startswith("../resolveuid/"))\n+\n+    def test_slate_simple_link_deserializer(self):\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": "%s/image-1" % self.portal.absolute_url()\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+\n+        res = self.deserialize(blocks=blocks)\n+        value = res.blocks["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertTrue(link.startswith("../resolveuid/"))\ndiff --git a/src/plone/restapi/tests/test_blocks_searchable_text.py b/src/plone/restapi/tests/test_blocks_searchable_text.py\nindex 1f488a830..063374320 100644\n--- a/src/plone/restapi/tests/test_blocks_searchable_text.py\n+++ b/src/plone/restapi/tests/test_blocks_searchable_text.py\n@@ -144,8 +144,8 @@ def __call__(self, value):\n         }\n \n         self.doc.blocks = blocks\n-        from zope.component import queryMultiAdapter\n         from plone.indexer.interfaces import IIndexableObject\n+        from zope.component import queryMultiAdapter\n \n         wrapper = queryMultiAdapter(\n             (self.doc, self.portal.portal_catalog), IIndexableObject\n@@ -201,3 +201,37 @@ def test_index_searchableText_value(self):\n         json_response = response.json()\n         self.assertEqual(json_response["items_total"], 1)\n         self.assertEqual(json_response["items"][0]["Title"], "A document")\n+\n+    def test_search_slate_text(self):\n+        """test_search_text."""\n+        self.doc.blocks = {\n+            "38541872-06c2-41c9-8709-37107e597b18": {\n+                "@type": "slate",\n+                "plaintext": "Under a new climatic regime, therefore",\n+                "value": [],\n+            },\n+            "4fcfeb9b-f73e-427c-9e06-2e4d53b06865": {\n+                "@type": "slate",\n+                "searchableText": "EEA Climate Change data centre",\n+                "value": [],\n+            },\n+        }\n+        self.doc.blocks_layout = [\n+            "38541872-06c2-41c9-8709-37107e597b18",\n+            "4fcfeb9b-f73e-427c-9e06-2e4d53b06865",\n+        ]\n+        self.portal.portal_catalog.indexObject(self.doc)\n+\n+        query = {"SearchableText": "climatic"}\n+        results = self.portal.portal_catalog.searchResults(**query)\n+        self.assertEqual(len(results), 1)\n+\n+        brain = results[0]\n+        self.assertEqual(brain.Title, "A document")\n+\n+        query = {"SearchableText": "EEA"}\n+        results = self.portal.portal_catalog.searchResults(**query)\n+        self.assertEqual(len(results), 1)\n+\n+        brain = results[0]\n+        self.assertEqual(brain.Title, "A document")\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex af923a047..a93534b9d 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -41,10 +41,13 @@ def setUp(self):\n \n     def serialize(self, context, blocks):\n         fieldname = "blocks"\n+        field = None\n         for schema in iterSchemata(context):\n             if fieldname in schema:\n                 field = schema.get(fieldname)\n                 break\n+        if field is None:\n+            raise ValueError("blocks field not in the schema of %s" % context)\n         dm = getMultiAdapter((context, field), IDataManager)\n         dm.set(blocks)\n         serializer = getMultiAdapter((field, context, self.request), IFieldSerializer)\n@@ -189,3 +192,89 @@ def test_serialize_subblocks_transformers(self):\n         href = value["1"]["data"]["blocks"]["2"]["blocks"]["3"]["href"]\n \n         self.assertEqual(href[0], self.portal.doc1.absolute_url())\n+\n+    def test_internal_link_serializer(self):\n+        doc_uid = IUUID(self.portal["doc1"])\n+        resolve_uid_link = {\n+            "@id": "../resolveuid/{}".format(doc_uid),\n+            "title": "Welcome to Plone",\n+        }\n+        blocks = {\n+            "2caef9e6-93ff-4edf-896f-8c16654a9923": {\n+                "@type": "slate",\n+                "plaintext": "this is a slate link inside some text",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "this is a "},\n+                            {\n+                                "children": [\n+                                    {"text": ""},\n+                                    {\n+                                        "children": [{"text": "slate link"}],\n+                                        "data": {\n+                                            "link": {\n+                                                "internal": {\n+                                                    "internal_link": [resolve_uid_link]\n+                                                }\n+                                            }\n+                                        },\n+                                        "type": "a",\n+                                    },\n+                                    {"text": ""},\n+                                ],\n+                                "type": "strong",\n+                            },\n+                            {"text": " inside some text"},\n+                        ],\n+                        "type": "p",\n+                    }\n+                ],\n+            },\n+            "6b2be2e6-9857-4bcc-a21a-29c0449e1c68": {"@type": "title"},\n+        }\n+\n+        res = self.serialize(\n+            context=self.portal["doc1"],\n+            blocks=blocks,\n+        )\n+\n+        value = res["2caef9e6-93ff-4edf-896f-8c16654a9923"]["value"]\n+        link = value[0]["children"][1]["children"][1]\n+        resolve_link = link["data"]["link"]["internal"]["internal_link"][0]["@id"]\n+\n+        self.assertTrue(resolve_link == self.portal.absolute_url() + "/doc1")\n+\n+    def test_simple_link_serializer(self):\n+        doc_uid = IUUID(self.portal["doc1"])\n+        resolve_uid_link = "../resolveuid/{}".format(doc_uid)\n+\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": resolve_uid_link,\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+        res = self.serialize(\n+            context=self.portal["doc1"],\n+            blocks=blocks,\n+        )\n+        value = res["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertTrue(link, self.portal.absolute_url() + "/doc1")\n'

