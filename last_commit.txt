Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-04T11:47:48+02:00
Author: Fulvio Casali (fulv) <fulviocasali@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/c4ca176c631adfd78274cd6e3d664b0edbbb3e3b

Remove duplicate word (#935)

Minor wording

Match the query to the examples below

Small grammar fixes

Small punctuation and word order issues.

Files changed:
M docs/source/searching.rst

b"diff --git a/docs/source/searching.rst b/docs/source/searching.rst\nindex 76aaaf59..731af201 100644\n--- a/docs/source/searching.rst\n+++ b/docs/source/searching.rst\n@@ -37,12 +37,12 @@ In order to return specific metadata columns, see the documentation of the ``met\n         for more details.\n \n .. note::\n-        Search results results will be **batched** if the size of the\n+        Search results will be **batched** if the size of the\n         resultset exceeds the batch size. See :doc:`/batching` for more\n         details on how to work with batched results.\n \n .. warning::\n-        The @@search view or in Plone LiveSearch widget are coded in a way that the SearchableText parameter is expanded by including a * wildcard at the end.\n+        The @@search view or the Plone LiveSearch widget are coded in a way that the SearchableText parameter is expanded by including a * wildcard at the end.\n         This is done in order to match also the partial results of the beginning of a search term(s).\n         plone.restapi @search endpoint will not do that for you. You'll have to add it if you want to keep this feature.\n \n@@ -67,7 +67,7 @@ In case you want to supply query options to a query against a particular index,\n \n For example, to specify the ``depth`` query option for a path query, the original query as a Python dictionary would look like this::\n \n-    query = {'path': {'query': '/folder',\n+    query = {'path': {'query': '/folder1',\n                       'depth': 2}}\n \n This dictionary will need to be flattened in dotted notation in order to pass it in a query string:\n@@ -102,14 +102,14 @@ This dictionary will need to be flattened in dotted notation in order to pass it\n Data types in queries\n ^^^^^^^^^^^^^^^^^^^^^\n \n-Because HTTP query strings contain no information about data types, any query string parameter value ends up as a string in the Zope's request.\n-This means, that for values types that aren't string, these data types need to be reconstructed on the server side in plone.restapi.\n+Because HTTP query strings contain no information about data types, any query string parameter value ends up as a string in the Zope request.\n+This means that for value types that aren't string these data types need to be reconstructed on the server side in plone.restapi.\n \n-For most index types and their query values and query options, plone.restapi can handle this for you.\n+For most index types and their query values and query options plone.restapi can handle this for you.\n If you pass it ``path.query=foo&path.depth=1``, it has the necessary knowledge about the ``ExtendedPathIndex``'s options to turn the string ``1`` for the ``depth`` argument back into an integer before passing the query on to the catalog.\n \n However, certain index types (a ``FieldIndex`` for example) may take arbitrary data types as query values.\n-In that case, ``plone.restapi`` simply can't know what data type to cast your query value to, and you'll need to specify it using ZPublisher type hints:\n+In that case, ``plone.restapi`` simply can't know what data type to cast your query value to and you'll need to specify it using ZPublisher type hints:\n \n .. code-block:: http\n \n@@ -124,7 +124,7 @@ Please refer to the `Documentation on Argument Conversion in ZPublisher <http://\n Retrieving additional metadata\n ------------------------------\n \n-By default the results are represented as summaries that only contain the most basic information about the items, like their URL and title.\n+By default, the results are represented as summaries that only contain the most basic information about the items, like their URL and title.\n If you need to retrieve additional metadata columns, you can do so by specifying the additional column names in the ``metadata_fields`` parameter:\n \n ..  http:example:: curl httpie python-requests\n@@ -133,7 +133,7 @@ If you need to retrieve additional metadata columns, you can do so by specifying\n .. literalinclude:: ../../src/plone/restapi/tests/http-examples/search_metadata_fields.resp\n    :language: http\n \n-The metadata from those columns then will be included in the results.\n+The metadata from those columns will then be included in the results.\n In order to specify multiple columns, simply repeat the query string parameter once for every column name (the ``requests`` module will do this automatically for you if you pass it a list of values for a query string parameter).\n \n In order to retrieve all metadata columns that the catalog knows about, use ``metadata_fields=_all``.\n@@ -154,4 +154,4 @@ You do so by specifying the ``fullobjects`` parameter:\n \n .. warning::\n \n-    Be aware that this might induce performance issues when retrieving a lot of resources. Normally the search just serializes catalog brains, but with full objects we wake up all the returned objects.\n+    Be aware that this might induce performance issues when retrieving a lot of resources. Normally the search just serializes catalog brains, but with full objects, we wake up all the returned objects.\n"

