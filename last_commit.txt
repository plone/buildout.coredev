Repository: plone.volto


Branch: refs/heads/main
Date: 2023-06-21T11:06:48-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/2f968ce9f81a6611fcf6048c312e16b07d2d28bc

Traverse subblocks using IBlockVisitor instead of nested (de)serializers

Files changed:
M setup.py
M src/plone/volto/configure.zcml
M src/plone/volto/transforms.py

b'diff --git a/setup.py b/setup.py\nindex 25b2c9a..e6be10d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -59,6 +59,7 @@ def readfile(name):\n         "plone.api",\n         "Products.GenericSetup",\n         "setuptools",\n+        # TODO update pin once https://github.com/plone/plone.restapi/pull/1648 is released\n         "plone.restapi>=8.13.0",\n         "plone.app.vocabularies>=4.3.0",\n         "collective.monkeypatcher",\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex 84dec90..e7652bb 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -59,44 +59,30 @@\n       name="plone.volto.summary_serializer_metadata"\n       />\n \n-  <configure zcml:condition="have plonerestapi-7">\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDDeserializer"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDDeserializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDSerializer"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDSerializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDDeserializer"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDDeserializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDSerializer"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDSerializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n+  <subscriber\n+      factory=".transforms.NestedBlocksVisitor"\n+      provides="plone.restapi.interfaces.IBlockVisitor"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDDeserializer"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDDeserializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDSerializer"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDSerializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n \n-    <subscriber\n-        factory=".linkintegrity.NestedBlockLinkRetriever"\n-        provides="plone.restapi.interfaces.IBlockFieldLinkIntegrityRetriever"\n-        />\n-  </configure>\n+  <subscriber\n+      factory=".linkintegrity.NestedBlockLinkRetriever"\n+      provides="plone.restapi.interfaces.IBlockFieldLinkIntegrityRetriever"\n+      />\n \n </configure>\ndiff --git a/src/plone/volto/transforms.py b/src/plone/volto/transforms.py\nindex 4a48077..ca422dc 100644\n--- a/src/plone/volto/transforms.py\n+++ b/src/plone/volto/transforms.py\n@@ -2,112 +2,29 @@\n from plone.restapi.deserializer.blocks import ResolveUIDDeserializerBase\n from plone.restapi.interfaces import IBlockFieldDeserializationTransformer\n from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n+from plone.restapi.interfaces import IBlockVisitor\n from plone.restapi.serializer.blocks import ResolveUIDSerializerBase\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n-from zope.component import subscribers\n from zope.interface import implementer\n+from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n \n-class NestedResolveUIDDeserializerBase(object):\n-    """The "url" smart block field for nested blocks\n-\n-    This is a generic handler. In all blocks, it converts any "url"\n-    field from using resolveuid to an "absolute" URL\n-    """\n-\n-    order = 1\n-    block_type = None\n+@implementer(IBlockVisitor)\n+@adapter(Interface, IBrowserRequest)\n+class NestedBlocksVisitor:\n+    """Visit nested blocks in columns, hrefList, or slides."""\n \n     def __init__(self, context, request):\n-        self.context = context\n-        self.request = request\n-\n-    def _transform(self, block):\n-        """this mutates the object directly"""\n-\n-        block_type = block.get("@type", "")\n-        handlers = []\n-        for h in subscribers(\n-            (self.context, self.request), IBlockFieldDeserializationTransformer\n-        ):\n-            if h.block_type == block_type or h.block_type is None:\n-                h.blockid = block.get("id", None)\n-                handlers.append(h)\n-\n-        for handler in sorted(handlers, key=lambda h: h.order):\n-            block = handler(block)\n+        pass\n \n-        return block\n-\n-    def __call__(self, block):\n-        for nested_name in ["columns", "hrefList", "slides"]:\n-            nested_blocks = block.get(nested_name, [])\n+    def __call__(self, block_value):\n+        for nested_name in ("columns", "hrefList", "slides"):\n+            nested_blocks = block_value.get(nested_name, [])\n             if not isinstance(nested_blocks, list):\n                 continue\n-            for nested_block in nested_blocks:\n-                self._transform(nested_block)\n-        return block\n-\n-\n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDDeserializer(NestedResolveUIDDeserializerBase):\n-    """Deserializer for content-types that implements IBlocks behavior"""\n-\n-\n-@adapter(IPloneSiteRoot, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDDeserializerRoot(NestedResolveUIDDeserializerBase):\n-    """Deserializer for site root"""\n-\n-\n-class NestedResolveUIDSerializerBase(object):\n-    order = 1\n-    block_type = None\n-\n-    def __init__(self, context, request):\n-        self.context = context\n-        self.request = request\n-\n-    def _transform(self, block):\n-        """this mutates the object directly"""\n-\n-        block_type = block.get("@type", "")\n-        handlers = []\n-        for h in subscribers(\n-            (self.context, self.request), IBlockFieldSerializationTransformer\n-        ):\n-            if h.block_type == block_type or h.block_type is None:\n-                h.blockid = block.get("id", None)\n-                handlers.append(h)\n-\n-        for handler in sorted(handlers, key=lambda h: h.order):\n-            block = handler(block)\n-\n-        return block\n-\n-    def __call__(self, block):\n-        for nested_name in ["columns", "hrefList", "slides"]:\n-            nested_blocks = block.get(nested_name, [])\n-            if not isinstance(nested_blocks, list):\n-                continue\n-            for nested_block in nested_blocks:\n-                self._transform(nested_block)\n-        return block\n-\n-\n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDSerializer(NestedResolveUIDSerializerBase):\n-    """Deserializer for content-types that implements IBlocks behavior"""\n-\n-\n-@adapter(IPloneSiteRoot, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDSerializerRoot(NestedResolveUIDSerializerBase):\n-    """Deserializer for site root"""\n+            yield from nested_blocks\n \n \n @adapter(IBlocks, IBrowserRequest)\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-06-21T11:15:10-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/91f3b93985e58279157ba76ac508f5be789ff17e

changelog

Files changed:
A news/127.bugfix

b'diff --git a/news/127.bugfix b/news/127.bugfix\nnew file mode 100644\nindex 0000000..f34f157\n--- /dev/null\n+++ b/news/127.bugfix\n@@ -0,0 +1 @@\n+Change the implementation for finding nested blocks to use an IBlockVisitor adapter. @davisagli\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-06-22T22:21:55-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/5d455e5599ae32676a0a4b4a16a3f691f91d6f2b

Restore base classes

Files changed:
M src/plone/volto/transforms.py

b'diff --git a/src/plone/volto/transforms.py b/src/plone/volto/transforms.py\nindex ca422dc..1635520 100644\n--- a/src/plone/volto/transforms.py\n+++ b/src/plone/volto/transforms.py\n@@ -6,6 +6,7 @@\n from plone.restapi.serializer.blocks import ResolveUIDSerializerBase\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n+from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserRequest\n@@ -27,6 +28,90 @@ def __call__(self, block_value):\n             yield from nested_blocks\n \n \n+class NestedResolveUIDDeserializerBase(object):\n+    """The "url" smart block field for nested blocks\n+\n+    [Deprecated -- replaced by NestedBlocksVisitor above,\n+    but the base class is still here in case someone extended it.]\n+\n+    This is a generic handler. In all blocks, it converts any "url"\n+    field from using resolveuid to an "absolute" URL\n+    """\n+\n+    order = 1\n+    block_type = None\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def _transform(self, block):\n+        """this mutates the object directly"""\n+\n+        block_type = block.get("@type", "")\n+        handlers = []\n+        for h in subscribers(\n+            (self.context, self.request), IBlockFieldDeserializationTransformer\n+        ):\n+            if h.block_type == block_type or h.block_type is None:\n+                h.blockid = block.get("id", None)\n+                handlers.append(h)\n+\n+        for handler in sorted(handlers, key=lambda h: h.order):\n+            block = handler(block)\n+\n+        return block\n+\n+    def __call__(self, block):\n+        for nested_name in ["columns", "hrefList", "slides"]:\n+            nested_blocks = block.get(nested_name, [])\n+            if not isinstance(nested_blocks, list):\n+                continue\n+            for nested_block in nested_blocks:\n+                self._transform(nested_block)\n+        return block\n+\n+\n+class NestedResolveUIDSerializerBase(object):\n+    """\n+    [Deprecated -- replaced by NestedBlocksVisitor above,\n+    but the base class is still here in case someone extended it.]\n+    """\n+\n+    order = 1\n+    block_type = None\n+\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def _transform(self, block):\n+        """this mutates the object directly"""\n+\n+        block_type = block.get("@type", "")\n+        handlers = []\n+        for h in subscribers(\n+            (self.context, self.request), IBlockFieldSerializationTransformer\n+        ):\n+            if h.block_type == block_type or h.block_type is None:\n+                h.blockid = block.get("id", None)\n+                handlers.append(h)\n+\n+        for handler in sorted(handlers, key=lambda h: h.order):\n+            block = handler(block)\n+\n+        return block\n+\n+    def __call__(self, block):\n+        for nested_name in ["columns", "hrefList", "slides"]:\n+            nested_blocks = block.get(nested_name, [])\n+            if not isinstance(nested_blocks, list):\n+                continue\n+            for nested_block in nested_blocks:\n+                self._transform(nested_block)\n+        return block\n+\n+\n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class PreviewImageResolveUIDDeserializer(ResolveUIDDeserializerBase):\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-06-22T22:22:18-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/7606fb229f255f954c2dd1c88ddc3f9024b13643

Merge branch 'main' into block-visitor

Files changed:
M CHANGES.rst
M setup.py
D news/122.bugfix
D news/124.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 846ac5a..5c0fb46 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,18 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.9 (2023-06-22)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Let the migration-form @@migrate_to_volto transform richtext to slate-blocks by default.\n+  [pbauer] (#122)\n+- Fix value of unchecked checkboxes in migrate_to_volto.\n+  [pbauer] (#124)\n+\n+\n 4.0.8 (2023-03-23)\n ------------------\n \ndiff --git a/news/122.bugfix b/news/122.bugfix\ndeleted file mode 100644\nindex ac9c929..0000000\n--- a/news/122.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Let the migration-form @@migrate_to_volto transform richtext to slate-blocks by default.\n-[pbauer]\n\\ No newline at end of file\ndiff --git a/news/124.bugfix b/news/124.bugfix\ndeleted file mode 100644\nindex 57ad10a..0000000\n--- a/news/124.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix value of unchecked checkboxes in migrate_to_volto.\n-[pbauer]\n\\ No newline at end of file\ndiff --git a/setup.py b/setup.py\nindex e6be10d..3e0deea 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,7 +25,7 @@ def readfile(name):\n \n setup(\n     name="plone.volto",\n-    version="4.0.9.dev0",\n+    version="4.0.10.dev0",\n     description="Volto integration add-on for Plone",\n     long_description=long_description,\n     # Get more from https://pypi.org/classifiers/\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-06-29T18:07:04-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/b70780f64db180241d1cb46fb0a480c93e141740

update pin

Files changed:
M setup.py

b'diff --git a/setup.py b/setup.py\nindex 3e0deea..d6b71b8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -59,8 +59,7 @@ def readfile(name):\n         "plone.api",\n         "Products.GenericSetup",\n         "setuptools",\n-        # TODO update pin once https://github.com/plone/plone.restapi/pull/1648 is released\n-        "plone.restapi>=8.13.0",\n+        "plone.restapi>=8.41.0",\n         "plone.app.vocabularies>=4.3.0",\n         "collective.monkeypatcher",\n     ],\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-07-18T22:04:08-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/d64ed8a7c009e10b5341b432577a000cd7e4a0a6

Merge branch 'main' into block-visitor

Files changed:
A news/4778.feature
A src/plone/volto/tests/test_indexers.py
M CHANGES.rst
M setup.py
M src/plone/volto/configure.zcml
M src/plone/volto/indexers.py
M src/plone/volto/profiles.zcml
M src/plone/volto/profiles/default/catalog.xml
M src/plone/volto/profiles/default/metadata.xml
M src/plone/volto/setuphandlers.py
M src/plone/volto/upgrades.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 5c0fb46d..b8af2ae8 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -8,6 +8,16 @@ Changelog\n \n .. towncrier release notes start\n \n+4.0.10 (2023-07-14)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Use the plone.app.multilingual conditionally so as is not an explicit dependency\n+  [@foxtrot-01] (#119)\n+\n+\n 4.0.9 (2023-06-22)\n ------------------\n \ndiff --git a/news/4778.feature b/news/4778.feature\nnew file mode 100644\nindex 00000000..626d4668\n--- /dev/null\n+++ b/news/4778.feature\n@@ -0,0 +1,3 @@\n+Add `block_types` index to zcatalog. By default it is only added for new Plone sites.\n+To add it to an existing site, run `plone.volto.upgrades.add_block_types_index` manually.\n+[margaridasp, davisagli]\ndiff --git a/setup.py b/setup.py\nindex d6b71b84..85e4b721 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -25,7 +25,7 @@ def readfile(name):\n \n setup(\n     name="plone.volto",\n-    version="4.0.10.dev0",\n+    version="4.0.11.dev0",\n     description="Volto integration add-on for Plone",\n     long_description=long_description,\n     # Get more from https://pypi.org/classifiers/\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex e7652bbf..8de14e08 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -53,6 +53,10 @@\n       factory=".indexers.image_field_indexer"\n       name="image_field"\n       />\n+  <adapter\n+      factory=".indexers.block_types_indexer"\n+      name="block_types"\n+      />\n \n   <utility\n       factory=".summary.JSONSummarySerializerMetadata"\ndiff --git a/src/plone/volto/indexers.py b/src/plone/volto/indexers.py\nindex b8e92ff3..8ee37aa9 100644\n--- a/src/plone/volto/indexers.py\n+++ b/src/plone/volto/indexers.py\n@@ -1,6 +1,7 @@\n from Acquisition import aq_base\n from plone.dexterity.interfaces import IDexterityContent\n from plone.indexer.decorator import indexer\n+from plone.restapi.blocks import visit_blocks\n from plone.volto.behaviors.preview import IPreview\n \n \n@@ -33,3 +34,14 @@ def image_field_indexer(obj):\n     elif getattr(base_obj, "image", False):\n         image_field = "image"\n     return image_field\n+\n+\n+@indexer(IDexterityContent)\n+def block_types_indexer(obj):\n+    """Indexer for all block types included in a page."""\n+    block_types = set()\n+    for block in visit_blocks(obj, obj.blocks):\n+        block_type = block.get("@type")\n+        if block_type:\n+            block_types.add(block_type)\n+    return block_types\ndiff --git a/src/plone/volto/profiles.zcml b/src/plone/volto/profiles.zcml\nindex 60e759fc..83cffdb7 100644\n--- a/src/plone/volto/profiles.zcml\n+++ b/src/plone/volto/profiles.zcml\n@@ -2,6 +2,7 @@\n     xmlns="http://namespaces.zope.org/zope"\n     xmlns:genericsetup="http://namespaces.zope.org/genericsetup"\n     xmlns:i18n="http://namespaces.zope.org/i18n"\n+    xmlns:zcml="http://namespaces.zope.org/zcml"\n     i18n_domain="plone.volto"\n     >\n \n@@ -77,6 +78,7 @@\n       provides="Products.GenericSetup.interfaces.EXTENSION"\n       directory="profiles/multilingual"\n       post_handler=".setuphandlers.post_install_multilingual"\n+      zcml:condition="installed plone.app.multilingual"\n       />\n \n   <genericsetup:registerProfile\ndiff --git a/src/plone/volto/profiles/default/catalog.xml b/src/plone/volto/profiles/default/catalog.xml\nindex 4c0e0094..d8289451 100644\n--- a/src/plone/volto/profiles/default/catalog.xml\n+++ b/src/plone/volto/profiles/default/catalog.xml\n@@ -4,4 +4,9 @@\n   <column value="head_title" />\n   <column value="hasPreviewImage" />\n   <column value="image_field" />\n+  <index meta_type="KeywordIndex"\n+         name="block_types"\n+  >\n+    <indexed_attr value="block_types" />\n+  </index>\n </object>\ndiff --git a/src/plone/volto/profiles/default/metadata.xml b/src/plone/volto/profiles/default/metadata.xml\nindex f746bae4..f32183b5 100644\n--- a/src/plone/volto/profiles/default/metadata.xml\n+++ b/src/plone/volto/profiles/default/metadata.xml\n@@ -1,6 +1,6 @@\n <?xml version="1.0" encoding="UTF-8"?>\n <metadata>\n-  <version>1016</version>\n+  <version>1017</version>\n   <dependencies>\n     <dependency>profile-plone.restapi:blocks</dependency>\n   </dependencies>\ndiff --git a/src/plone/volto/setuphandlers.py b/src/plone/volto/setuphandlers.py\nindex 314d9d46..3aa3072d 100644\n--- a/src/plone/volto/setuphandlers.py\n+++ b/src/plone/volto/setuphandlers.py\n@@ -1,8 +1,6 @@\n # -*- coding: utf-8 -*-\n from importlib import import_module\n from plone import api\n-from plone.app.multilingual.browser.setup import SetupMultilingualSite\n-from plone.app.multilingual.setuphandlers import enable_translatable_behavior\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.volto.default_homepage.default import default_home\n from plone.volto.default_homepage.demo import demo_home_page\n@@ -15,9 +13,19 @@\n \n import json\n import logging\n+import pkg_resources\n import transaction\n \n \n+try:\n+    pkg_resources.get_distribution("plone.app.multilingual")\n+    from plone.app.multilingual.browser.setup import SetupMultilingualSite\n+    from plone.app.multilingual.setuphandlers import enable_translatable_behavior\n+\n+    HAS_MULTILINGUAL = True\n+except pkg_resources.DistributionNotFound:\n+    HAS_MULTILINGUAL = False\n+\n PLONE_6 = getattr(import_module("Products.CMFPlone.factory"), "PLONE60MARKER", False)\n \n logger = logging.getLogger("plone.volto")\n@@ -68,12 +76,13 @@ def post_install_multilingual(context):\n \n \n def enable_pam(portal):\n-    # Ensure that portal is portal\n-    portal = api.portal.get()\n-    # Setup the plone.app.multilingual data\n-    sms = SetupMultilingualSite(portal)\n-    sms.setupSite(portal)\n-    enable_translatable_behavior(portal)\n+    if HAS_MULTILINGUAL:\n+        # Ensure that portal is portal\n+        portal = api.portal.get()\n+        # Setup the plone.app.multilingual data\n+        sms = SetupMultilingualSite(portal)\n+        sms.setupSite(portal)\n+        enable_translatable_behavior(portal)\n \n \n def ensure_pam_consistency(portal):\ndiff --git a/src/plone/volto/tests/test_indexers.py b/src/plone/volto/tests/test_indexers.py\nnew file mode 100644\nindex 00000000..c004159e\n--- /dev/null\n+++ b/src/plone/volto/tests/test_indexers.py\n@@ -0,0 +1,79 @@\n+# -*- coding: utf-8 -*-\n+from plone.volto.testing import PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+from unittest import TestCase\n+\n+\n+class TestBlockTypesIndexer(TestCase):\n+    layer = PLONE_VOLTO_CORE_INTEGRATION_TESTING\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+\n+        self.doc1 = self.portal[\n+            self.portal.invokeFactory(\n+                "Document", id="doc1", title="Document with Blocks"\n+            )\n+        ]\n+        self.catalog = self.portal.portal_catalog\n+\n+    def test_block_types_are_indexed(self):\n+        """Ensure that when blocks are updated, the block_types index is updated."""\n+        blocks = {\n+            "1": {"@type": "image", "url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="image")\n+        self.assertEqual(len(brains), 1)\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 1)\n+\n+    def test_mixed_blocks(self):\n+        """Check that when some blocks have type and others don\'t, it doesn\'t fail."""\n+        blocks = {\n+            "1": {"url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="image")\n+        self.assertEqual(len(brains), 0)\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 1)\n+\n+    def test_removed_blocks(self):\n+        """Ensure that when blocks are removed, the block_types index is updated."""\n+        blocks = {\n+            "1": {"@type": "image", "url": ""},\n+            "2": {"@type": "teaser", "styles": {"align": "left"}},\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        self.portal.doc1.blocks = {}\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 0)\n+        block_types_index = self.catalog._catalog.indexes["block_types"]\n+        self.assertEqual(block_types_index.numObjects(), 0)\n+\n+    def test_nested_blocks(self):\n+        """Ensure that nested block types are also included in block_types."""\n+        blocks = {\n+            "1": {\n+                "@type": "gridBlock",\n+                "blocks": {\n+                    "2": {"@type": "teaser"},\n+                },\n+            },\n+        }\n+        self.portal.doc1.blocks = blocks\n+        self.portal.doc1.reindexObject(idxs=["block_types"])\n+        brains = self.catalog(block_types="teaser")\n+        self.assertEqual(len(brains), 1)\ndiff --git a/src/plone/volto/upgrades.py b/src/plone/volto/upgrades.py\nindex ba6ea096..96dd2692 100644\n--- a/src/plone/volto/upgrades.py\n+++ b/src/plone/volto/upgrades.py\n@@ -9,8 +9,11 @@\n from plone.volto import logger\n from plone.volto.setuphandlers import NO_RICHTEXT_BEHAVIOR_CONTENT_TYPES\n from plone.volto.setuphandlers import remove_behavior\n+from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n \n+import transaction\n+\n \n MIGRATION = {\n     "Document": content.FolderishDocument,\n@@ -123,3 +126,20 @@ def add_control_panel_classic_icon(context):\n         field.TextLine(title="Plone Icon Volto Control Panel"),\n     )\n     registry["plone.icon.volto-settings"] = "++plone++plone.volto/volto.svg"\n+\n+\n+def add_block_types_index(context):\n+    catalog = getToolByName(context, "portal_catalog")\n+    indexes = catalog.indexes()\n+    if "block_types" not in indexes:\n+        catalog.addIndex("block_types", "KeywordIndex")\n+        logger.info("Added block_types index.")\n+    brains = catalog(object_provides="plone.restapi.behaviors.IBlocks")\n+    total = len(brains)\n+    for index, brain in enumerate(brains):\n+        obj = brain.getObject()\n+        obj.reindexObject(idxs=["block_types"], update_metadata=0)\n+        logger.info("Reindexing object %s.", brain.getPath())\n+        if index % 250 == 0:\n+            logger.info(f"Reindexed {index}/{total} objects")\n+            transaction.commit()\n'

Repository: plone.volto


Branch: refs/heads/main
Date: 2023-07-18T22:06:41-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.volto/commit/6f5b14281147696443e664ab5ff8a01ab819f2d6

Merge pull request #127 from plone/block-visitor

Traverse subblocks using IBlockVisitor instead of nested (de)serializers

Files changed:
A news/127.bugfix
M setup.py
M src/plone/volto/configure.zcml
M src/plone/volto/transforms.py

b'diff --git a/news/127.bugfix b/news/127.bugfix\nnew file mode 100644\nindex 0000000..f34f157\n--- /dev/null\n+++ b/news/127.bugfix\n@@ -0,0 +1 @@\n+Change the implementation for finding nested blocks to use an IBlockVisitor adapter. @davisagli\ndiff --git a/setup.py b/setup.py\nindex 4a3166b..85e4b72 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -59,7 +59,7 @@ def readfile(name):\n         "plone.api",\n         "Products.GenericSetup",\n         "setuptools",\n-        "plone.restapi>=8.40.1.dev0",\n+        "plone.restapi>=8.41.0",\n         "plone.app.vocabularies>=4.3.0",\n         "collective.monkeypatcher",\n     ],\ndiff --git a/src/plone/volto/configure.zcml b/src/plone/volto/configure.zcml\nindex 669e9b7..8de14e0 100644\n--- a/src/plone/volto/configure.zcml\n+++ b/src/plone/volto/configure.zcml\n@@ -63,44 +63,30 @@\n       name="plone.volto.summary_serializer_metadata"\n       />\n \n-  <configure zcml:condition="have plonerestapi-7">\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDDeserializer"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDDeserializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDSerializer"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.NestedResolveUIDSerializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDDeserializer"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDDeserializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDSerializer"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n-    <subscriber\n-        factory=".transforms.PreviewImageResolveUIDSerializerRoot"\n-        provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n-        />\n+  <subscriber\n+      factory=".transforms.NestedBlocksVisitor"\n+      provides="plone.restapi.interfaces.IBlockVisitor"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDDeserializer"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDDeserializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDSerializer"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n+  <subscriber\n+      factory=".transforms.PreviewImageResolveUIDSerializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"\n+      />\n \n-    <subscriber\n-        factory=".linkintegrity.NestedBlockLinkRetriever"\n-        provides="plone.restapi.interfaces.IBlockFieldLinkIntegrityRetriever"\n-        />\n-  </configure>\n+  <subscriber\n+      factory=".linkintegrity.NestedBlockLinkRetriever"\n+      provides="plone.restapi.interfaces.IBlockFieldLinkIntegrityRetriever"\n+      />\n \n </configure>\ndiff --git a/src/plone/volto/transforms.py b/src/plone/volto/transforms.py\nindex 4a48077..1635520 100644\n--- a/src/plone/volto/transforms.py\n+++ b/src/plone/volto/transforms.py\n@@ -2,17 +2,38 @@\n from plone.restapi.deserializer.blocks import ResolveUIDDeserializerBase\n from plone.restapi.interfaces import IBlockFieldDeserializationTransformer\n from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n+from plone.restapi.interfaces import IBlockVisitor\n from plone.restapi.serializer.blocks import ResolveUIDSerializerBase\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import subscribers\n from zope.interface import implementer\n+from zope.interface import Interface\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n \n+@implementer(IBlockVisitor)\n+@adapter(Interface, IBrowserRequest)\n+class NestedBlocksVisitor:\n+    """Visit nested blocks in columns, hrefList, or slides."""\n+\n+    def __init__(self, context, request):\n+        pass\n+\n+    def __call__(self, block_value):\n+        for nested_name in ("columns", "hrefList", "slides"):\n+            nested_blocks = block_value.get(nested_name, [])\n+            if not isinstance(nested_blocks, list):\n+                continue\n+            yield from nested_blocks\n+\n+\n class NestedResolveUIDDeserializerBase(object):\n     """The "url" smart block field for nested blocks\n \n+    [Deprecated -- replaced by NestedBlocksVisitor above,\n+    but the base class is still here in case someone extended it.]\n+\n     This is a generic handler. In all blocks, it converts any "url"\n     field from using resolveuid to an "absolute" URL\n     """\n@@ -51,19 +72,12 @@ def __call__(self, block):\n         return block\n \n \n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDDeserializer(NestedResolveUIDDeserializerBase):\n-    """Deserializer for content-types that implements IBlocks behavior"""\n-\n-\n-@adapter(IPloneSiteRoot, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDDeserializerRoot(NestedResolveUIDDeserializerBase):\n-    """Deserializer for site root"""\n-\n-\n class NestedResolveUIDSerializerBase(object):\n+    """\n+    [Deprecated -- replaced by NestedBlocksVisitor above,\n+    but the base class is still here in case someone extended it.]\n+    """\n+\n     order = 1\n     block_type = None\n \n@@ -98,18 +112,6 @@ def __call__(self, block):\n         return block\n \n \n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDSerializer(NestedResolveUIDSerializerBase):\n-    """Deserializer for content-types that implements IBlocks behavior"""\n-\n-\n-@adapter(IPloneSiteRoot, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class NestedResolveUIDSerializerRoot(NestedResolveUIDSerializerBase):\n-    """Deserializer for site root"""\n-\n-\n @adapter(IBlocks, IBrowserRequest)\n @implementer(IBlockFieldDeserializationTransformer)\n class PreviewImageResolveUIDDeserializer(ResolveUIDDeserializerBase):\n'

