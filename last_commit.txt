Repository: plone.releaser


Branch: refs/heads/master
Date: 2023-12-01T00:05:10+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/cbd412fc91d3c6ce0cd21c26f1d254f1c27eb977

Manage changelog: read markdown files as well.

Fixes https://github.com/plone/plone.releaser/issues/48

Files changed:
A news/48.bugfix
A plone/releaser/tests/input/changes.md
M plone/releaser/changelog.py
M plone/releaser/tests/test_changelog.py

b'diff --git a/news/48.bugfix b/news/48.bugfix\nnew file mode 100644\nindex 0000000..98f3c32\n--- /dev/null\n+++ b/news/48.bugfix\n@@ -0,0 +1,2 @@\n+Manage changelog: read markdown files as well.\n+[maurits]\ndiff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py\nindex 00f0ce8..e1f8d06 100644\n--- a/plone/releaser/changelog.py\n+++ b/plone/releaser/changelog.py\n@@ -8,9 +8,12 @@\n from plone.releaser.release import OLD_HEADING_MAPPING\n from urllib.request import urlopen\n \n+import re\n \n-DIST_URL = "https://dist.plone.org/release/{0}/versions.cfg"\n \n+DIST_URL = "https://dist.plone.org/release/{0}/versions.cfg"\n+MD_HEADING_RE = re.compile(r"## (\\S*).*")\n+MD_SUB_HEADING_RE = re.compile(r"### (.*)")\n buildout = Buildout()\n \n \n@@ -62,7 +65,7 @@ def get_changelog(package_name):\n     if not source_url:\n         return ""\n     file_names = ["CHANGES", "HISTORY"]\n-    file_extensions = [".rst", ".txt"]\n+    file_extensions = [".rst", ".md", ".txt"]\n     if "github" in source_url:\n         paths = [f"{branch}/", f"{branch}/docs/"]\n     else:\n@@ -130,7 +133,7 @@ def latest(self):\n             return list(self.data.items())[0]\n         return None\n \n-    def _parse(self, content):\n+    def _parse_rst(self, content):\n         tree = publish_doctree(content)\n \n         def is_valid_version_section(x):\n@@ -173,6 +176,74 @@ def is_list_item(x):\n                 entries[current] = [a.rawsource.strip() for a in list_items]\n             self.data[version] = entries\n \n+    def _parse_md(self, content):\n+        # Parse as markdown.\n+        # I thought of using markdown-it-py, but I don\'t find it intuitive\n+        # enough for our use case.  So try it "by hand".\n+\n+        def heading(text):\n+            if text in HEADINGS:\n+                return text\n+            # Might be an old heading or unknown.\n+            return OLD_HEADING_MAPPING.get(text, "other")\n+\n+        version = None\n+        current = "other"\n+        entries = defaultdict(list)\n+        list_item = None\n+        for line in content.splitlines():\n+            if not line.strip():\n+                continue\n+            match = MD_HEADING_RE.match(line)\n+            if match:\n+                if list_item:\n+                    # add previous list item\n+                    entries[current].append(list_item)\n+                if version:\n+                    # Store the previous version\n+                    self.data[version] = entries\n+                list_item = None\n+                entries = defaultdict(list)\n+                current = "other"\n+                version = match.groups()[0]\n+                continue\n+            if not version:\n+                continue\n+            match = MD_SUB_HEADING_RE.match(line)\n+            if match:\n+                if list_item:\n+                    # add previous list item\n+                    entries[current].append(list_item)\n+                list_item = None\n+                text = match.groups()[0]\n+                child_heading = heading(text)\n+                if child_heading:\n+                    current = child_heading\n+                continue\n+            # Now look for the real entries: list items.\n+            if line.startswith("- ") or line.startswith("* "):\n+                if list_item:\n+                    # add previous list item\n+                    entries[current].append(list_item)\n+                # start new list item\n+                list_item = line[2:]\n+                continue\n+            if list_item:\n+                list_item += "\\n" + line.strip()\n+        if list_item:\n+            # Store the last list item.\n+            entries[current].append(list_item)\n+        if version:\n+            # Store the last version.\n+            self.data[version] = entries\n+\n+    def _parse(self, content):\n+        # Try to parse as restructuredtext.\n+        self._parse_rst(content)\n+        if not self.data:\n+            # Try to parse as markdown.\n+            self._parse_md(content)\n+\n \n def build_unified_changelog(start_version, end_version):\n     try:\ndiff --git a/plone/releaser/tests/input/changes.md b/plone/releaser/tests/input/changes.md\nnew file mode 100644\nindex 0000000..6acb43a\n--- /dev/null\n+++ b/plone/releaser/tests/input/changes.md\n@@ -0,0 +1,28 @@\n+Example MarkDown changelog from Products.CMFPlone package.\n+\n+## 6.0.5rc1 (2023-05-25)\n+\n+\n+### Bug fixes:\n+\n+- Do not truncate the sortable_title index\n+  [erral] #3690\n+- Fix password validation tests. [tschorr] #3784\n+- Updated metadata version to 6016.\n+  [maurits] #6016\n+\n+\n+### Internal:\n+\n+- Update configuration files.\n+  [plone devs] 2a5f5557\n+\n+\n+## 6.0.4 (2023-04-24)\n+\n+\n+### Bug fixes:\n+\n+- Prepare 6.0.4 final. No changes compared to the release candidate.\n+  [maurits] #604\n+\ndiff --git a/plone/releaser/tests/test_changelog.py b/plone/releaser/tests/test_changelog.py\nindex 5f69457..73239ec 100644\n--- a/plone/releaser/tests/test_changelog.py\n+++ b/plone/releaser/tests/test_changelog.py\n@@ -5,11 +5,12 @@\n \n TESTS_DIR = pathlib.Path(__file__).parent\n INPUT_DIR = TESTS_DIR / "input"\n-CHANGES_FILE = INPUT_DIR / "changes.rst"\n+CHANGES_RST = INPUT_DIR / "changes.rst"\n+CHANGES_MD = INPUT_DIR / "changes.md"\n \n \n-def test_get_changes():\n-    cf = Changelog(CHANGES_FILE)\n+def test_get_changes_rst():\n+    cf = Changelog(CHANGES_RST)\n     assert "3.0.2" in cf\n     assert "3.0.3" in cf\n     assert sorted(list(cf.get("3.0.3").keys())) == ["Bug fixes:", "Internal:", "other"]\n@@ -24,3 +25,19 @@ def test_get_changes():\n         "Internal:",\n         "Update configuration files.\\n[plone devs] (55bda5c9)",\n     ]\n+\n+\n+def test_get_changes_md():\n+    cf = Changelog(CHANGES_MD)\n+    assert "6.0.5rc1" in cf\n+    assert "6.0.4" in cf\n+    # assert sorted(list(cf.get("6.0.5rc1").keys())) == ["Bug fixes:", "Internal:"]\n+    assert cf.get_changes("6.0.5rc1") == []\n+    assert cf.get_changes("6.0.4") == [\n+        "Bug fixes:",\n+        "Do not truncate the sortable_title index\\n[erral] #3690",\n+        "Fix password validation tests. [tschorr] #3784",\n+        "Updated metadata version to 6016.\\n[maurits] #6016",\n+        "Internal:",\n+        "Update configuration files.\\n[plone devs] 2a5f5557",\n+    ]\n'

Repository: plone.releaser


Branch: refs/heads/master
Date: 2023-12-05T18:51:55+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/2368be5d9434902e35fb0d17200a6a5d60539955

In Changelog turn bytes content into string.

Files changed:
M plone/releaser/changelog.py
M plone/releaser/tests/test_changelog.py

b'diff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py\nindex e1f8d06..c7ac40b 100644\n--- a/plone/releaser/changelog.py\n+++ b/plone/releaser/changelog.py\n@@ -87,6 +87,8 @@ class Changelog:\n     def __init__(self, file_location=None, content=None):\n         self.data = OrderedDict()\n         if content is not None:\n+            if isinstance(content, bytes):\n+                content = content.decode("utf-8")\n             self._parse(content)\n         elif file_location is not None:\n             with open(file_location) as f:\n@@ -95,6 +97,9 @@ def __init__(self, file_location=None, content=None):\n     def __iter__(self):\n         return self.data.__iter__()\n \n+    def __eq__(self, other):\n+        return self.data == other.data\n+\n     def iteritems(self):\n         return self.data.items()\n \ndiff --git a/plone/releaser/tests/test_changelog.py b/plone/releaser/tests/test_changelog.py\nindex 73239ec..8075658 100644\n--- a/plone/releaser/tests/test_changelog.py\n+++ b/plone/releaser/tests/test_changelog.py\n@@ -41,3 +41,14 @@ def test_get_changes_md():\n         "Internal:",\n         "Update configuration files.\\n[plone devs] 2a5f5557",\n     ]\n+\n+\n+def test_get_changes_content():\n+    from_file = Changelog(CHANGES_RST)\n+    from_string = Changelog(content=CHANGES_RST.read_bytes())\n+    from_bytes = Changelog(content=CHANGES_RST.read_bytes())\n+    assert "3.0.2" in from_file\n+    assert "3.0.2" in from_string\n+    assert "3.0.2" in from_bytes\n+    assert from_file == from_string\n+    assert from_string == from_bytes\n'

Repository: plone.releaser


Branch: refs/heads/master
Date: 2023-12-07T10:23:35+01:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.releaser/commit/849d81be520fddbc668dd46a9be02bbdb671faf7

manage changelog: add --package option.

I see a problem getting the changelog from plone.restapi, so it is useful to be able to restrict the command to this package.
Found the problem: the start version of plone.restapi is not included in its CHANGES.rst on the main branch.
Explained this corner case in the new help text.

Files changed:
M plone/releaser/changelog.py
M plone/releaser/manage.py

b'diff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py\nindex c7ac40b..b3183df 100644\n--- a/plone/releaser/changelog.py\n+++ b/plone/releaser/changelog.py\n@@ -85,6 +85,8 @@ def get_changelog(package_name):\n \n class Changelog:\n     def __init__(self, file_location=None, content=None):\n+        self.file_location = file_location\n+        self.content = content\n         self.data = OrderedDict()\n         if content is not None:\n             if isinstance(content, bytes):\n@@ -114,11 +116,15 @@ def get_changes(self, start_version, end_version=None):\n             try:\n                 end_version_index = versions.index(str(end_version))\n             except ValueError:\n-                raise ValueError(f"Unknown version {end_version}")\n+                raise ValueError(\n+                    f"End version {end_version} not found in changelog contents."\n+                )\n         try:\n             start_version_index = versions.index(str(start_version))\n         except ValueError:\n-            raise ValueError(f"Unknown version {start_version}")\n+            raise ValueError(\n+                f"Start version {start_version} not found in changelog contents."\n+            )\n \n         newer_releases = versions[end_version_index:start_version_index]\n         changes = defaultdict(list)\n@@ -250,7 +256,7 @@ def _parse(self, content):\n             self._parse_md(content)\n \n \n-def build_unified_changelog(start_version, end_version):\n+def build_unified_changelog(start_version, end_version, packages=None):\n     try:\n         prior_versions = pull_versions(start_version)\n         current_versions = pull_versions(end_version)\n@@ -258,9 +264,15 @@ def build_unified_changelog(start_version, end_version):\n         print(e)\n         return\n \n+    if isinstance(packages, str):\n+        packages = packages.split(",")\n+\n     output_str = ""\n     try:\n         for package, version in current_versions.items():\n+            if packages is not None and package not in packages:\n+                # We are not interested in this package.\n+                continue\n             if package in prior_versions:\n                 prior_version = prior_versions[package]\n                 try:\n@@ -279,13 +291,13 @@ def build_unified_changelog(start_version, end_version):\n \n                         logtext = get_changelog(package)\n                         if not logtext:\n-                            print("No changelog found.")\n+                            print("WARNING: No changelog found.")\n                             continue\n                         changelog = Changelog(content=logtext)\n                         try:\n                             changes = changelog.get_changes(prior_version, version)\n                         except ValueError as e:\n-                            print(e)\n+                            print(f"ERROR: {e}")\n                         else:\n                             bullet = "- "\n                             for change in changes:\ndiff --git a/plone/releaser/manage.py b/plone/releaser/manage.py\nindex 661155a..6a34519 100644\n--- a/plone/releaser/manage.py\n+++ b/plone/releaser/manage.py\n@@ -88,10 +88,47 @@ def checkAllPackagesForUpdates(**kwargs):\n @named("changelog")\n @arg("--start")\n @arg("--end", default="here")\n+@arg("--package", default=None)\n def changelog(**kwargs):\n+    """Build a unified changelog.\n+\n+    For each package we get the changes between the start and end version,\n+    and unify them, so the changes of all intermediate versions get combined:\n+    all bug fixes together, all new features, etcetera.\n+\n+    - \'start\' is for example 6.0.7.\n+      This is used to get versions.cfg from dist.plone.org.\n+    - Same for \'end\', where the default is \'here\', meaning we take\n+      versions.cfg from the current directory.\n+    - With \'package\' you can restrict to a single package.]\n+      This is mostly useful when debugging this command.\n+      You can separate packages with a comma:\n+      --package=plone.restapi,Products.CMFPlone\n+\n+    We get the changes from the repository for this package,\n+    as defined in sources.cfg, and try a few locations, for example:\n+    https://raw.githubusercontent.com/plone/plone.restapi/main/CHANGES.rst\n+\n+    Sample output in a problematic case:\n+\n+        $ bin/manage changelog --start=6.0.7 --end=6.0.8 --package=plone.restapi\n+        Parsed https://dist.plone.org/release/6.0.7/versions.cfg\n+        Parsed https://dist.plone.org/release/6.0.8/versions.cfg\n+        plone.restapi has a newer version\n+        ERROR: Start version 8.43.3 not found in changelog contents.\n+\n+        plone.restapi: 8.43.3 \xe2\x86\x92 9.1.2\n+        -----------------------------\n+\n+    The problem here is we get the CHANGES.rst file from the main plone.restapi branch,\n+    and this does not include a header for version 8.43.3: this header is only on the\n+    8.x branch.\n+    When we run the same command with `--start=6.0.6`, it does work, and you get the\n+    unified changes between version 8.40.0 and 9.1.2.\n+    """\n     from plone.releaser.changelog import build_unified_changelog\n \n-    build_unified_changelog(kwargs["start"], kwargs["end"])\n+    build_unified_changelog(kwargs["start"], kwargs["end"], packages=kwargs["package"])\n \n \n def _get_checkouts(path=None):\n'

Repository: plone.releaser


Branch: refs/heads/master
Date: 2023-12-08T13:06:23+01:00
Author: Gil Forcada Codinachs (gforcada) <gil.gnome@gmail.com>
Commit: https://github.com/plone/plone.releaser/commit/518ab4ec6170b122ebe803a2d9e1e9615f555ed1

Merge pull request #63 from plone/maurits-changelog-parse-markdown

Manage changelog: read markdown files as well.

Files changed:
A news/48.bugfix
A plone/releaser/tests/input/changes.md
M plone/releaser/changelog.py
M plone/releaser/manage.py
M plone/releaser/tests/test_changelog.py

b'diff --git a/news/48.bugfix b/news/48.bugfix\nnew file mode 100644\nindex 0000000..98f3c32\n--- /dev/null\n+++ b/news/48.bugfix\n@@ -0,0 +1,2 @@\n+Manage changelog: read markdown files as well.\n+[maurits]\ndiff --git a/plone/releaser/changelog.py b/plone/releaser/changelog.py\nindex 00f0ce8..b3183df 100644\n--- a/plone/releaser/changelog.py\n+++ b/plone/releaser/changelog.py\n@@ -8,9 +8,12 @@\n from plone.releaser.release import OLD_HEADING_MAPPING\n from urllib.request import urlopen\n \n+import re\n \n-DIST_URL = "https://dist.plone.org/release/{0}/versions.cfg"\n \n+DIST_URL = "https://dist.plone.org/release/{0}/versions.cfg"\n+MD_HEADING_RE = re.compile(r"## (\\S*).*")\n+MD_SUB_HEADING_RE = re.compile(r"### (.*)")\n buildout = Buildout()\n \n \n@@ -62,7 +65,7 @@ def get_changelog(package_name):\n     if not source_url:\n         return ""\n     file_names = ["CHANGES", "HISTORY"]\n-    file_extensions = [".rst", ".txt"]\n+    file_extensions = [".rst", ".md", ".txt"]\n     if "github" in source_url:\n         paths = [f"{branch}/", f"{branch}/docs/"]\n     else:\n@@ -82,8 +85,12 @@ def get_changelog(package_name):\n \n class Changelog:\n     def __init__(self, file_location=None, content=None):\n+        self.file_location = file_location\n+        self.content = content\n         self.data = OrderedDict()\n         if content is not None:\n+            if isinstance(content, bytes):\n+                content = content.decode("utf-8")\n             self._parse(content)\n         elif file_location is not None:\n             with open(file_location) as f:\n@@ -92,6 +99,9 @@ def __init__(self, file_location=None, content=None):\n     def __iter__(self):\n         return self.data.__iter__()\n \n+    def __eq__(self, other):\n+        return self.data == other.data\n+\n     def iteritems(self):\n         return self.data.items()\n \n@@ -106,11 +116,15 @@ def get_changes(self, start_version, end_version=None):\n             try:\n                 end_version_index = versions.index(str(end_version))\n             except ValueError:\n-                raise ValueError(f"Unknown version {end_version}")\n+                raise ValueError(\n+                    f"End version {end_version} not found in changelog contents."\n+                )\n         try:\n             start_version_index = versions.index(str(start_version))\n         except ValueError:\n-            raise ValueError(f"Unknown version {start_version}")\n+            raise ValueError(\n+                f"Start version {start_version} not found in changelog contents."\n+            )\n \n         newer_releases = versions[end_version_index:start_version_index]\n         changes = defaultdict(list)\n@@ -130,7 +144,7 @@ def latest(self):\n             return list(self.data.items())[0]\n         return None\n \n-    def _parse(self, content):\n+    def _parse_rst(self, content):\n         tree = publish_doctree(content)\n \n         def is_valid_version_section(x):\n@@ -173,8 +187,76 @@ def is_list_item(x):\n                 entries[current] = [a.rawsource.strip() for a in list_items]\n             self.data[version] = entries\n \n+    def _parse_md(self, content):\n+        # Parse as markdown.\n+        # I thought of using markdown-it-py, but I don\'t find it intuitive\n+        # enough for our use case.  So try it "by hand".\n+\n+        def heading(text):\n+            if text in HEADINGS:\n+                return text\n+            # Might be an old heading or unknown.\n+            return OLD_HEADING_MAPPING.get(text, "other")\n \n-def build_unified_changelog(start_version, end_version):\n+        version = None\n+        current = "other"\n+        entries = defaultdict(list)\n+        list_item = None\n+        for line in content.splitlines():\n+            if not line.strip():\n+                continue\n+            match = MD_HEADING_RE.match(line)\n+            if match:\n+                if list_item:\n+                    # add previous list item\n+                    entries[current].append(list_item)\n+                if version:\n+                    # Store the previous version\n+                    self.data[version] = entries\n+                list_item = None\n+                entries = defaultdict(list)\n+                current = "other"\n+                version = match.groups()[0]\n+                continue\n+            if not version:\n+                continue\n+            match = MD_SUB_HEADING_RE.match(line)\n+            if match:\n+                if list_item:\n+                    # add previous list item\n+                    entries[current].append(list_item)\n+                list_item = None\n+                text = match.groups()[0]\n+                child_heading = heading(text)\n+                if child_heading:\n+                    current = child_heading\n+                continue\n+            # Now look for the real entries: list items.\n+            if line.startswith("- ") or line.startswith("* "):\n+                if list_item:\n+                    # add previous list item\n+                    entries[current].append(list_item)\n+                # start new list item\n+                list_item = line[2:]\n+                continue\n+            if list_item:\n+                list_item += "\\n" + line.strip()\n+        if list_item:\n+            # Store the last list item.\n+            entries[current].append(list_item)\n+        if version:\n+            # Store the last version.\n+            self.data[version] = entries\n+\n+    def _parse(self, content):\n+        # Try to parse as restructuredtext.\n+        self._parse_rst(content)\n+        if not self.data:\n+            # Try to parse as markdown.\n+            self._parse_md(content)\n+\n+\n+def build_unified_changelog(start_version, end_version, packages=None):\n     try:\n         prior_versions = pull_versions(start_version)\n         current_versions = pull_versions(end_version)\n@@ -182,9 +264,15 @@ def build_unified_changelog(start_version, end_version):\n         print(e)\n         return\n \n+    if isinstance(packages, str):\n+        packages = packages.split(",")\n+\n     output_str = ""\n     try:\n         for package, version in current_versions.items():\n+            if packages is not None and package not in packages:\n+                # We are not interested in this package.\n+                continue\n             if package in prior_versions:\n                 prior_version = prior_versions[package]\n                 try:\n@@ -203,13 +291,13 @@ def build_unified_changelog(start_version, end_version):\n \n                         logtext = get_changelog(package)\n                         if not logtext:\n-                            print("No changelog found.")\n+                            print("WARNING: No changelog found.")\n                             continue\n                         changelog = Changelog(content=logtext)\n                         try:\n                             changes = changelog.get_changes(prior_version, version)\n                         except ValueError as e:\n-                            print(e)\n+                            print(f"ERROR: {e}")\n                         else:\n                             bullet = "- "\n                             for change in changes:\ndiff --git a/plone/releaser/manage.py b/plone/releaser/manage.py\nindex 661155a..6a34519 100644\n--- a/plone/releaser/manage.py\n+++ b/plone/releaser/manage.py\n@@ -88,10 +88,47 @@ def checkAllPackagesForUpdates(**kwargs):\n @named("changelog")\n @arg("--start")\n @arg("--end", default="here")\n+@arg("--package", default=None)\n def changelog(**kwargs):\n+    """Build a unified changelog.\n+\n+    For each package we get the changes between the start and end version,\n+    and unify them, so the changes of all intermediate versions get combined:\n+    all bug fixes together, all new features, etcetera.\n+\n+    - \'start\' is for example 6.0.7.\n+      This is used to get versions.cfg from dist.plone.org.\n+    - Same for \'end\', where the default is \'here\', meaning we take\n+      versions.cfg from the current directory.\n+    - With \'package\' you can restrict to a single package.]\n+      This is mostly useful when debugging this command.\n+      You can separate packages with a comma:\n+      --package=plone.restapi,Products.CMFPlone\n+\n+    We get the changes from the repository for this package,\n+    as defined in sources.cfg, and try a few locations, for example:\n+    https://raw.githubusercontent.com/plone/plone.restapi/main/CHANGES.rst\n+\n+    Sample output in a problematic case:\n+\n+        $ bin/manage changelog --start=6.0.7 --end=6.0.8 --package=plone.restapi\n+        Parsed https://dist.plone.org/release/6.0.7/versions.cfg\n+        Parsed https://dist.plone.org/release/6.0.8/versions.cfg\n+        plone.restapi has a newer version\n+        ERROR: Start version 8.43.3 not found in changelog contents.\n+\n+        plone.restapi: 8.43.3 \xe2\x86\x92 9.1.2\n+        -----------------------------\n+\n+    The problem here is we get the CHANGES.rst file from the main plone.restapi branch,\n+    and this does not include a header for version 8.43.3: this header is only on the\n+    8.x branch.\n+    When we run the same command with `--start=6.0.6`, it does work, and you get the\n+    unified changes between version 8.40.0 and 9.1.2.\n+    """\n     from plone.releaser.changelog import build_unified_changelog\n \n-    build_unified_changelog(kwargs["start"], kwargs["end"])\n+    build_unified_changelog(kwargs["start"], kwargs["end"], packages=kwargs["package"])\n \n \n def _get_checkouts(path=None):\ndiff --git a/plone/releaser/tests/input/changes.md b/plone/releaser/tests/input/changes.md\nnew file mode 100644\nindex 0000000..6acb43a\n--- /dev/null\n+++ b/plone/releaser/tests/input/changes.md\n@@ -0,0 +1,28 @@\n+Example MarkDown changelog from Products.CMFPlone package.\n+\n+## 6.0.5rc1 (2023-05-25)\n+\n+\n+### Bug fixes:\n+\n+- Do not truncate the sortable_title index\n+  [erral] #3690\n+- Fix password validation tests. [tschorr] #3784\n+- Updated metadata version to 6016.\n+  [maurits] #6016\n+\n+\n+### Internal:\n+\n+- Update configuration files.\n+  [plone devs] 2a5f5557\n+\n+\n+## 6.0.4 (2023-04-24)\n+\n+\n+### Bug fixes:\n+\n+- Prepare 6.0.4 final. No changes compared to the release candidate.\n+  [maurits] #604\n+\ndiff --git a/plone/releaser/tests/test_changelog.py b/plone/releaser/tests/test_changelog.py\nindex 5f69457..8075658 100644\n--- a/plone/releaser/tests/test_changelog.py\n+++ b/plone/releaser/tests/test_changelog.py\n@@ -5,11 +5,12 @@\n \n TESTS_DIR = pathlib.Path(__file__).parent\n INPUT_DIR = TESTS_DIR / "input"\n-CHANGES_FILE = INPUT_DIR / "changes.rst"\n+CHANGES_RST = INPUT_DIR / "changes.rst"\n+CHANGES_MD = INPUT_DIR / "changes.md"\n \n \n-def test_get_changes():\n-    cf = Changelog(CHANGES_FILE)\n+def test_get_changes_rst():\n+    cf = Changelog(CHANGES_RST)\n     assert "3.0.2" in cf\n     assert "3.0.3" in cf\n     assert sorted(list(cf.get("3.0.3").keys())) == ["Bug fixes:", "Internal:", "other"]\n@@ -24,3 +25,30 @@ def test_get_changes():\n         "Internal:",\n         "Update configuration files.\\n[plone devs] (55bda5c9)",\n     ]\n+\n+\n+def test_get_changes_md():\n+    cf = Changelog(CHANGES_MD)\n+    assert "6.0.5rc1" in cf\n+    assert "6.0.4" in cf\n+    # assert sorted(list(cf.get("6.0.5rc1").keys())) == ["Bug fixes:", "Internal:"]\n+    assert cf.get_changes("6.0.5rc1") == []\n+    assert cf.get_changes("6.0.4") == [\n+        "Bug fixes:",\n+        "Do not truncate the sortable_title index\\n[erral] #3690",\n+        "Fix password validation tests. [tschorr] #3784",\n+        "Updated metadata version to 6016.\\n[maurits] #6016",\n+        "Internal:",\n+        "Update configuration files.\\n[plone devs] 2a5f5557",\n+    ]\n+\n+\n+def test_get_changes_content():\n+    from_file = Changelog(CHANGES_RST)\n+    from_string = Changelog(content=CHANGES_RST.read_bytes())\n+    from_bytes = Changelog(content=CHANGES_RST.read_bytes())\n+    assert "3.0.2" in from_file\n+    assert "3.0.2" in from_string\n+    assert "3.0.2" in from_bytes\n+    assert from_file == from_string\n+    assert from_string == from_bytes\n'

