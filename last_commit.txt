Repository: plone.app.querystring


Branch: refs/heads/master
Date: 2022-05-23T22:17:46+02:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.app.querystring/commit/08376be5e6a135f1e05c5ae16dc7f7aef93f91aa

Fix query update with custom query (#103)

* Fix query update with custom query

* add changelog

* fix check

* simpler code and one more test to verify

Co-authored-by: Peter Mathis &lt;peter.mathis@kombinat.at&gt;

Files changed:
A news/103.bugfix
M plone/app/querystring/querybuilder.py
M plone/app/querystring/tests/testQueryBuilder.py

b'diff --git a/news/103.bugfix b/news/103.bugfix\nnew file mode 100644\nindex 0000000..f7791b9\n--- /dev/null\n+++ b/news/103.bugfix\n@@ -0,0 +1 @@\n+Fix how to merge custom_query with parsedquery without overriding values. [cekk]\ndiff --git a/plone/app/querystring/querybuilder.py b/plone/app/querystring/querybuilder.py\nindex 31689be..8cd3c39 100644\n--- a/plone/app/querystring/querybuilder.py\n+++ b/plone/app/querystring/querybuilder.py\n@@ -160,11 +160,18 @@ def _makequery(self, query=None, batch=False, b_start=0, b_size=30,\n             # Update the parsed query with an extra query dictionary. This may\n             # override the parsed query. The custom_query is a dictonary of\n             # index names and their associated query values.\n-            parsedquery.update(custom_query)\n+            for key in custom_query:\n+                if (\n+                    isinstance(parsedquery.get(key), dict)\n+                    and isinstance(custom_query.get(key), dict)\n+                ):\n+                    parsedquery[key].update(custom_query[key])\n+                    continue\n+                parsedquery[key] = custom_query[key]\n             empty_query = False\n \n         # filter bad term and operator in query\n-        parsedquery =  self.filter_query(parsedquery)\n+        parsedquery = self.filter_query(parsedquery)\n         results = []\n         if not empty_query:\n             results = catalog(**parsedquery)\ndiff --git a/plone/app/querystring/tests/testQueryBuilder.py b/plone/app/querystring/tests/testQueryBuilder.py\nindex 419a531..3565ecc 100644\n--- a/plone/app/querystring/tests/testQueryBuilder.py\n+++ b/plone/app/querystring/tests/testQueryBuilder.py\n@@ -188,6 +188,45 @@ def testQueryBuilderCustomQuery(self):\n         self.assertEqual(len(results), 1)\n         self.assertEqual(results[0].Title(), \'Test Folder\')\n \n+    def testQueryBuilderCustomQueryDoNotOverrideValues(self):\n+        """Test if custom queries do not override values if they are dicts\n+        """\n+        self.portal.invokeFactory("Document",\n+                                  "collectionstestpage-2",\n+                                  title="Collectionstestpage 2")\n+        testpage2 = self.portal[\'collectionstestpage-2\']\n+        query = [{\n+            \'i\': \'UID\',\n+            \'o\': \'plone.app.querystring.operation.string.is\',\n+            \'v\': [self.testpage.UID(), testpage2.UID()],\n+        }]\n+\n+        results = self.querybuilder._makequery(query=query)\n+        self.assertEqual(len(results), 2)\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n+        self.assertEqual(results[1].Title(), \'Collectionstestpage 2\')\n+\n+        # if we add new values to the query, they should not be overwritten\n+        results = self.querybuilder._makequery(\n+            query=query,\n+            custom_query={\'UID\': {\'not\': testpage2.UID()}})\n+        self.assertEqual(len(results), 1)\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage\')\n+\n+        # if we add the same values to the query, they should be overwritten\n+        results = self.querybuilder._makequery(\n+            query=query,\n+            custom_query={\'UID\': {\'query\': testpage2.UID()}})\n+        self.assertEqual(len(results), 1)\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage 2\')\n+\n+        # add simple custom query\n+        results = self.querybuilder._makequery(\n+            query=query,\n+            custom_query={\'UID\': testpage2.UID()})\n+        self.assertEqual(len(results), 1)\n+        self.assertEqual(results[0].Title(), \'Collectionstestpage 2\')\n+\n \n class TestQuerybuilderResultTypes(unittest.TestCase):\n \n'

