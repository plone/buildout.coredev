Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-10T17:22:58+02:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/3e19b3fdf6c0061d5a3f38b23431c03ed5820506

Improve speed when getting resources from the cache

Fixes #19

Files changed:
A news/19.bugfix
M plone/memoize/view.py

b'diff --git a/news/19.bugfix b/news/19.bugfix\nnew file mode 100644\nindex 0000000..1a80bb2\n--- /dev/null\n+++ b/news/19.bugfix\n@@ -0,0 +1 @@\n+Improve speed when getting resources from the cache [ale-rt]\ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex dc57f7f..1c5200d 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -6,8 +6,6 @@\n from functools import wraps\n from zope.annotation.interfaces import IAnnotations\n \n-_marker = object()\n-\n \n class ViewMemo(object):\n \n@@ -22,10 +20,9 @@ def memogetter(*args, **kwargs):\n             request = getattr(instance, "request", None)\n \n             annotations = IAnnotations(request)\n-            cache = annotations.get(self.key, _marker)\n-\n-            if cache is _marker:\n-                cache = annotations[self.key] = dict()\n+            if self.key not in annotations:\n+                annotations[self.key] = dict()\n+            cache = annotations[self.key]\n \n             # XXX: Not the most elegant thing in the world; in a Zope 2\n             # context, the physical path is a better key, since the id could\n@@ -47,10 +44,9 @@ def memogetter(*args, **kwargs):\n                 args[1:],\n                 frozenset(kwargs.items()),\n             )\n-            value = cache.get(key, _marker)\n-            if value is _marker:\n-                value = cache[key] = func(*args, **kwargs)\n-            return value\n+            if key not in cache:\n+                cache[key] = func(*args, **kwargs)\n+            return cache[key]\n \n         return memogetter\n \n@@ -60,10 +56,9 @@ def memogetter(*args, **kwargs):\n             request = getattr(instance, "request", None)\n \n             annotations = IAnnotations(request)\n-            cache = annotations.get(self.key, _marker)\n-\n-            if cache is _marker:\n-                cache = annotations[self.key] = dict()\n+            if self.key not in annotations:\n+                annotations[self.key] = dict()\n+            cache = annotations[self.key]\n \n             key = (\n                 instance.__class__.__name__,\n@@ -71,10 +66,9 @@ def memogetter(*args, **kwargs):\n                 args[1:],\n                 frozenset(kwargs.items()),\n             )\n-            value = cache.get(key, _marker)\n-            if value is _marker:\n-                value = cache[key] = func(*args, **kwargs)\n-            return value\n+            if key not in cache:\n+                cache[key] = func(*args, **kwargs)\n+            return cache[key]\n \n         return memogetter\n \n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-11T10:54:24+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.memoize/commit/de09635d5c477f9519841e9dd6a75482f7f59884

Merge pull request #20 from plone/19-speedup

Improve speed when getting resources from the cache

Files changed:
A news/19.bugfix
M plone/memoize/view.py

b'diff --git a/news/19.bugfix b/news/19.bugfix\nnew file mode 100644\nindex 0000000..1a80bb2\n--- /dev/null\n+++ b/news/19.bugfix\n@@ -0,0 +1 @@\n+Improve speed when getting resources from the cache [ale-rt]\ndiff --git a/plone/memoize/view.py b/plone/memoize/view.py\nindex dc57f7f..1c5200d 100644\n--- a/plone/memoize/view.py\n+++ b/plone/memoize/view.py\n@@ -6,8 +6,6 @@\n from functools import wraps\n from zope.annotation.interfaces import IAnnotations\n \n-_marker = object()\n-\n \n class ViewMemo(object):\n \n@@ -22,10 +20,9 @@ def memogetter(*args, **kwargs):\n             request = getattr(instance, "request", None)\n \n             annotations = IAnnotations(request)\n-            cache = annotations.get(self.key, _marker)\n-\n-            if cache is _marker:\n-                cache = annotations[self.key] = dict()\n+            if self.key not in annotations:\n+                annotations[self.key] = dict()\n+            cache = annotations[self.key]\n \n             # XXX: Not the most elegant thing in the world; in a Zope 2\n             # context, the physical path is a better key, since the id could\n@@ -47,10 +44,9 @@ def memogetter(*args, **kwargs):\n                 args[1:],\n                 frozenset(kwargs.items()),\n             )\n-            value = cache.get(key, _marker)\n-            if value is _marker:\n-                value = cache[key] = func(*args, **kwargs)\n-            return value\n+            if key not in cache:\n+                cache[key] = func(*args, **kwargs)\n+            return cache[key]\n \n         return memogetter\n \n@@ -60,10 +56,9 @@ def memogetter(*args, **kwargs):\n             request = getattr(instance, "request", None)\n \n             annotations = IAnnotations(request)\n-            cache = annotations.get(self.key, _marker)\n-\n-            if cache is _marker:\n-                cache = annotations[self.key] = dict()\n+            if self.key not in annotations:\n+                annotations[self.key] = dict()\n+            cache = annotations[self.key]\n \n             key = (\n                 instance.__class__.__name__,\n@@ -71,10 +66,9 @@ def memogetter(*args, **kwargs):\n                 args[1:],\n                 frozenset(kwargs.items()),\n             )\n-            value = cache.get(key, _marker)\n-            if value is _marker:\n-                value = cache[key] = func(*args, **kwargs)\n-            return value\n+            if key not in cache:\n+                cache[key] = func(*args, **kwargs)\n+            return cache[key]\n \n         return memogetter\n \n'

