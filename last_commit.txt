Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-01T20:31:36+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/8342fca787258659c7d65b9c0ac27dc54efb07bf

6.x.x jmeter images (#933)

* Add jmeter fullobjects tests

* performance tests: add fullobjects test for news items

* Add jmeter tests for a Volto page with 20 images

* jmeter: add thread group for image tests.

* Update Volto images perf test.

Files changed:
A src/plone/restapi/tests/image.jpeg
M Makefile
M performance.jmx
M plone-5.2.x.cfg
M src/plone/restapi/tests/performance.py

b'diff --git a/Makefile b/Makefile\nindex 0f64a30d..18e989cc 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -3,7 +3,7 @@\n SHELL := /bin/bash\n CURRENT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\n \n-version = 3.7\n+version = 3\n \n # We like colors\n # From: https://coderwall.com/p/izxssa/colored-makefile-for-golang-projects\ndiff --git a/performance.jmx b/performance.jmx\nindex 2bdf6088..81bc645f 100644\n--- a/performance.jmx\n+++ b/performance.jmx\n@@ -977,6 +977,33 @@\n           <stringProp name="HTTPSampler.response_timeout"></stringProp>\n         </HTTPSamplerProxy>\n         <hashTree/>\n+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document (fullobjects)" enabled="true">\n+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+            <collectionProp name="Arguments.arguments">\n+              <elementProp name="Accept" elementType="HTTPArgument">\n+                <boolProp name="HTTPArgument.always_encode">false</boolProp>\n+                <stringProp name="Argument.value">application/json</stringProp>\n+                <stringProp name="Argument.metadata">=</stringProp>\n+                <boolProp name="HTTPArgument.use_equals">true</boolProp>\n+                <stringProp name="Argument.name">Accept</stringProp>\n+              </elementProp>\n+            </collectionProp>\n+          </elementProp>\n+          <stringProp name="HTTPSampler.domain"></stringProp>\n+          <stringProp name="HTTPSampler.port"></stringProp>\n+          <stringProp name="HTTPSampler.protocol"></stringProp>\n+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+          <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/document?fullobjects</stringProp>\n+          <stringProp name="HTTPSampler.method">GET</stringProp>\n+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+          <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+        </HTTPSamplerProxy>\n+        <hashTree/>\n         <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document (next/prev)" enabled="true">\n           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n             <collectionProp name="Arguments.arguments">\n@@ -1395,6 +1422,731 @@\n         </HTTPSamplerProxy>\n         <hashTree/>\n       </hashTree>\n+      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Volto Images (Read)" enabled="true">\n+        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n+        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Schleifen-Controller (Loop Controller)" enabled="true">\n+          <boolProp name="LoopController.continue_forever">false</boolProp>\n+          <stringProp name="LoopController.loops">1</stringProp>\n+        </elementProp>\n+        <stringProp name="ThreadGroup.num_threads">1</stringProp>\n+        <stringProp name="ThreadGroup.ramp_time">1</stringProp>\n+        <longProp name="ThreadGroup.start_time">1463570296000</longProp>\n+        <longProp name="ThreadGroup.end_time">1463570296000</longProp>\n+        <boolProp name="ThreadGroup.scheduler">false</boolProp>\n+        <stringProp name="ThreadGroup.duration"></stringProp>\n+        <stringProp name="ThreadGroup.delay"></stringProp>\n+        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>\n+      </ThreadGroup>\n+      <hashTree>\n+        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">\n+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n+            <collectionProp name="Arguments.arguments">\n+              <elementProp name="" elementType="HTTPArgument">\n+                <boolProp name="HTTPArgument.always_encode">false</boolProp>\n+                <stringProp name="Argument.value"></stringProp>\n+                <stringProp name="Argument.metadata">=</stringProp>\n+                <boolProp name="HTTPArgument.use_equals">true</boolProp>\n+              </elementProp>\n+            </collectionProp>\n+          </elementProp>\n+          <stringProp name="HTTPSampler.domain">localhost</stringProp>\n+          <stringProp name="HTTPSampler.port">12345</stringProp>\n+          <stringProp name="HTTPSampler.protocol">http</stringProp>\n+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+          <stringProp name="HTTPSampler.path">/Plone/${testfolder}/</stringProp>\n+          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>\n+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+          <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+        </ConfigTestElement>\n+        <hashTree/>\n+        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">\n+          <collectionProp name="HeaderManager.headers">\n+            <elementProp name="" elementType="Header">\n+              <stringProp name="Header.name">Accept</stringProp>\n+              <stringProp name="Header.value">application/json</stringProp>\n+            </elementProp>\n+          </collectionProp>\n+        </HeaderManager>\n+        <hashTree/>\n+        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Volto Page with 30 images" enabled="true">\n+          <boolProp name="PARENT_SAMPLE">false</boolProp>\n+        </com.blazemeter.jmeter.controller.ParallelSampler>\n+        <hashTree>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 01 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image1/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 02 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image2/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 03 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image3/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 04 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image4/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 05 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image5/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 06 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image6/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 07 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image7/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 08 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image8/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 09 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image9/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 10 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image10/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 11 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image11/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 12 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image12/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 13 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image13/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 14 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image14/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 15 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image15/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 16 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image16/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 17 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image17/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 18 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image18/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 19 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image19/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 20 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image20/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 21" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image21/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 22" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image22/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 23" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image23/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 24" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image24/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 25" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image25/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 26" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image26/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 27" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image27/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 28" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image28/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 29" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image29/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 30" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image30/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+        </hashTree>\n+        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">\n+          <boolProp name="ResultCollector.error_logging">false</boolProp>\n+          <objProp>\n+            <name>saveConfig</name>\n+            <value class="SampleSaveConfiguration">\n+              <time>true</time>\n+              <latency>true</latency>\n+              <timestamp>true</timestamp>\n+              <success>true</success>\n+              <label>true</label>\n+              <code>true</code>\n+              <message>true</message>\n+              <threadName>true</threadName>\n+              <dataType>true</dataType>\n+              <encoding>false</encoding>\n+              <assertions>true</assertions>\n+              <subresults>true</subresults>\n+              <responseData>false</responseData>\n+              <samplerData>false</samplerData>\n+              <xml>false</xml>\n+              <fieldNames>true</fieldNames>\n+              <responseHeaders>false</responseHeaders>\n+              <requestHeaders>false</requestHeaders>\n+              <responseDataOnError>false</responseDataOnError>\n+              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>\n+              <assertionsResultsToSave>0</assertionsResultsToSave>\n+              <bytes>true</bytes>\n+              <sentBytes>true</sentBytes>\n+              <url>true</url>\n+              <threadCounts>true</threadCounts>\n+              <idleTime>true</idleTime>\n+              <connectTime>true</connectTime>\n+            </value>\n+          </objProp>\n+          <stringProp name="filename"></stringProp>\n+        </ResultCollector>\n+        <hashTree/>\n+        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">\n+          <boolProp name="ResultCollector.error_logging">false</boolProp>\n+          <objProp>\n+            <name>saveConfig</name>\n+            <value class="SampleSaveConfiguration">\n+              <time>true</time>\n+              <latency>true</latency>\n+              <timestamp>true</timestamp>\n+              <success>true</success>\n+              <label>true</label>\n+              <code>true</code>\n+              <message>true</message>\n+              <threadName>true</threadName>\n+              <dataType>true</dataType>\n+              <encoding>false</encoding>\n+              <assertions>true</assertions>\n+              <subresults>true</subresults>\n+              <responseData>false</responseData>\n+              <samplerData>false</samplerData>\n+              <xml>false</xml>\n+              <fieldNames>false</fieldNames>\n+              <responseHeaders>false</responseHeaders>\n+              <requestHeaders>false</requestHeaders>\n+              <responseDataOnError>false</responseDataOnError>\n+              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>\n+              <assertionsResultsToSave>0</assertionsResultsToSave>\n+              <bytes>true</bytes>\n+              <threadCounts>true</threadCounts>\n+            </value>\n+          </objProp>\n+          <stringProp name="filename"></stringProp>\n+        </ResultCollector>\n+        <hashTree/>\n+        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">\n+          <boolProp name="ResultCollector.error_logging">false</boolProp>\n+          <objProp>\n+            <name>saveConfig</name>\n+            <value class="SampleSaveConfiguration">\n+              <time>true</time>\n+              <latency>true</latency>\n+              <timestamp>true</timestamp>\n+              <success>true</success>\n+              <label>true</label>\n+              <code>true</code>\n+              <message>true</message>\n+              <threadName>true</threadName>\n+              <dataType>true</dataType>\n+              <encoding>false</encoding>\n+              <assertions>true</assertions>\n+              <subresults>true</subresults>\n+              <responseData>false</responseData>\n+              <samplerData>false</samplerData>\n+              <xml>false</xml>\n+              <fieldNames>false</fieldNames>\n+              <responseHeaders>false</responseHeaders>\n+              <requestHeaders>false</requestHeaders>\n+              <responseDataOnError>false</responseDataOnError>\n+              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>\n+              <assertionsResultsToSave>0</assertionsResultsToSave>\n+              <bytes>true</bytes>\n+              <threadCounts>true</threadCounts>\n+            </value>\n+          </objProp>\n+          <stringProp name="filename"></stringProp>\n+        </ResultCollector>\n+        <hashTree/>\n+      </hashTree>\n       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup" enabled="true">\n         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 46149643..c8025c70 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -4,3 +4,6 @@ extends =\n     http://dist.plone.org/release/5.2.1/versions.cfg\n find-links += http://dist.plone.org/thirdparty/\n versions=versions\n+\n+[versions]\n+plone.restapi =\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/image.jpeg b/src/plone/restapi/tests/image.jpeg\nnew file mode 100644\nindex 00000000..e6ee8168\nBinary files /dev/null and b/src/plone/restapi/tests/image.jpeg differ\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex cc9513f7..4bb7725e 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -2,6 +2,7 @@\n from datetime import datetime\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.interfaces import IDexterityContent\n+from plone.namedfile.file import NamedBlobImage\n from Products.CMFCore.utils import getToolByName\n from six.moves import range\n from zope.component.hooks import getSite\n@@ -36,8 +37,7 @@ def set_image(obj):\n         from plone.namedfile.file import NamedBlobImage\n \n         filename = os.path.join(os.path.dirname(__file__), u"image.png")\n-        obj.image = NamedBlobImage(\n-            data=open(filename, "rb").read(), filename=filename)\n+        obj.image = NamedBlobImage(data=open(filename, "rb").read(), filename=filename)\n     else:\n         filename = os.path.join(os.path.dirname(__file__), u"image.png")\n         obj.setImage(open(filename, "rb").read())\n@@ -74,13 +74,11 @@ def step_setup_content(context):\n     portal = getSite()\n \n     # Testfolder WRITE\n-    portal.invokeFactory("Folder", id="testfolder-write",\n-                         title="Testfolder Write")\n+    portal.invokeFactory("Folder", id="testfolder-write", title="Testfolder Write")\n     publish(portal["testfolder-write"])\n \n     # Testfolder READ\n-    portal.invokeFactory("Folder", id="testfolder-read",\n-                         title="Testfolder Read")\n+    portal.invokeFactory("Folder", id="testfolder-read", title="Testfolder Read")\n     publish(portal["testfolder-read"])\n     portal = portal["testfolder-read"]\n \n@@ -105,8 +103,7 @@ def step_setup_content(context):\n     publish(portal.folder)\n \n     # Folder with 10 Items\n-    portal.invokeFactory(\n-        "Folder", id="folder-with-10-items", title="Folder 10")\n+    portal.invokeFactory("Folder", id="folder-with-10-items", title="Folder 10")\n     folder10 = portal["folder-with-10-items"]\n     set_description(folder10)\n     publish(folder10)\n@@ -117,8 +114,7 @@ def step_setup_content(context):\n         publish(folder10["doc{}".format(i)])\n \n     # Folder with 100 Items\n-    portal.invokeFactory(\n-        "Folder", id="folder-with-100-items", title="Folder 100")\n+    portal.invokeFactory("Folder", id="folder-with-100-items", title="Folder 100")\n     folder100 = portal["folder-with-100-items"]\n     set_description(folder100)\n     publish(folder100)\n@@ -129,8 +125,7 @@ def step_setup_content(context):\n         publish(folder100["doc{}".format(i)])\n \n     # Folder with 1000 Items\n-    portal.invokeFactory(\n-        "Folder", id="folder-with-1000-items", title="Folder 1000")\n+    portal.invokeFactory("Folder", id="folder-with-1000-items", title="Folder 1000")\n     folder1000 = portal["folder-with-1000-items"]\n     set_description(folder1000)\n     publish(folder1000)\n@@ -141,8 +136,11 @@ def step_setup_content(context):\n         publish(folder1000["doc{}".format(i)])\n \n     # Folder with 10 Items and next/previous enabled\n-    portal.invokeFactory("Folder", id="folder-with-10-items-next-prev-enabled",\n-                         title="Folder 10 (next/prev enabled)")\n+    portal.invokeFactory(\n+        "Folder",\n+        id="folder-with-10-items-next-prev-enabled",\n+        title="Folder 10 (next/prev enabled)",\n+    )\n     folder10np = portal["folder-with-10-items-next-prev-enabled"]\n     folder10np.nextPreviousEnabled = True\n     set_description(folder10np)\n@@ -202,3 +200,326 @@ def step_setup_content(context):\n     portal.invokeFactory("File", id="file", title="File")\n     set_description(portal.file)\n     set_file(portal.file)\n+\n+    # Volto Page with images\n+    portal.invokeFactory("Folder", id="volto-page", title="Volto Page")\n+    volto_page = portal.get("volto-page")\n+    publish(volto_page)\n+    for i in range(1, 31):\n+        volto_page.invokeFactory(\n+            "Image", id="image{}".format(i), title="Image {}".format(i)\n+        )\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.jpeg")\n+        with open(image_file, "rb") as f:\n+            image_data = f.read()\n+        volto_page.get("image{}".format(i)).image = NamedBlobImage(\n+            data=image_data, contentType="image/jpeg", filename=u"image.jpeg"\n+        )\n+\n+    # Volto\n+    # portal.invokeFactory("Document", id="volto", title="Volto")\n+    # portal.volto.description = LOREMIPSUM_TEXT_PARAGRAPH\n+    volto_page.blocks = {\n+        "0d57ccc7-8ceb-4b8f-bf95-5919eb859925": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "4q33c",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "2172b929-70de-416b-b345-b98916a9726f": {\n+            "@type": "image",\n+            "alt": "jamie-street-PzGiZBpv72Y-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/jamie-street-pzgizbpv72y-unsplash.jpg",\n+        },\n+        "23dd130c-d90e-48d8-ab5a-9fb85a2136a4": {\n+            "@type": "image",\n+            "alt": "anastasia-petrova-xu2WYJek5AI-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/anastasia-petrova-xu2wyjek5ai-unsplash.jpg",\n+        },\n+        "23e99d38-da30-441b-8713-bbbad4344a85": {\n+            "@type": "image",\n+            "alt": "matt-artz-oSly6rQh7YA-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/matt-artz-osly6rqh7ya-unsplash.jpg",\n+        },\n+        "24b5b799-d755-4e43-97f5-e240d6b3b7df": {\n+            "@type": "image",\n+            "alt": "christopher-windus-ys_PVhkEC6c-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/christopher-windus-ys_pvhkec6c-unsplash.jpg",\n+        },\n+        "28b1c856-4ecd-4c43-bce5-9be127f29a34": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "c0mrv",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "2e005fdb-a109-4148-b78c-855dab1e83a9": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "b6u11",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "367aacb2-8124-43ce-8989-c9394b71ba97": {\n+            "@type": "image",\n+            "alt": "hector-j-rivas-QNc9tTNHRyI-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/hector-j-rivas-qnc9ttnhryi-unsplash.jpg",\n+        },\n+        "374bcb3f-d6c7-4ec0-9a26-aa9ee148a22a": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "6o8vv",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "38076104-d93a-4e25-b2b6-7917be41dd48": {\n+            "@type": "image",\n+            "alt": "jukan-tateisi-bJhT_8nbUA0-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/jukan-tateisi-bjht_8nbua0-unsplash.jpg",\n+        },\n+        "4664c4dc-89a2-4dd0-9267-ab4ff65af757": {\n+            "@type": "image",\n+            "alt": "max-kukurudziak-MedRVIJX2P0-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/max-kukurudziak-medrvijx2p0-unsplash.jpg",\n+        },\n+        "4b07582a-771a-4ce9-92bf-456e33134dd3": {\n+            "@type": "image",\n+            "alt": "daniel-cheung-cPF2nlWcMY4-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/daniel-cheung-cpf2nlwcmy4-unsplash.jpg",\n+        },\n+        "5c4e9474-0ccb-45a4-a91d-5eba411e43ef": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "98gs2",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "6ab1e289-f46a-495f-b07d-6967c436e369": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "f0er1",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "7471143d-70da-493c-b3c5-56a021407bed": {"@type": "title"},\n+        "7550e1c3-03b9-432a-bdd1-2d2f33ef6d68": {\n+            "@type": "image",\n+            "alt": "clem-onojeghuo-RfAEjh_J6e0-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/clem-onojeghuo-rfaejh_j6e0-unsplash.jpg",\n+        },\n+        "828b9212-2b98-4192-92bd-ac6acc08b01f": {\n+            "@type": "image",\n+            "alt": "daniel-von-appen-tb4heMa-ZRo-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/daniel-von-appen-tb4hema-zro-unsplash.jpg",\n+        },\n+        "82b244cc-25fd-41c7-91bd-d8aea6540b61": {\n+            "@type": "image",\n+            "alt": "cristina-gottardi-Pl8ZMtFiyi8-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/cristina-gottardi-pl8zmtfiyi8-unsplash.jpg",\n+        },\n+        "976bea21-fe53-477f-b1a8-47fd51d88492": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "3m6c5",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "9d1f39db-dfe5-4315-9306-1be2738e0068": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "4q22n",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "a1fafe33-f85f-46fa-919a-19111a8bde52": {\n+            "@type": "image",\n+            "alt": "doug-linstedt-q07oPCdhPlw-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/doug-linstedt-q07opcdhplw-unsplash.jpg",\n+        },\n+        "c513539d-3b75-4f36-baa3-7145324f79ff": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "1l2bg",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "cce67a5b-3dae-4e78-9352-7ccb24bb16a5": {\n+            "@type": "image",\n+            "alt": "christian-regg-jOicNGJIwZA-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/christian-regg-joicngjiwza-unsplash.jpg",\n+        },\n+        "d43abdc7-29c4-4cae-b3ed-443c87c449cd": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "8iog5",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "dc517784-5cfc-4cf8-8fad-15fd154cd43a": {\n+            "@type": "image",\n+            "alt": "john-barkiple-l090uFWoPaI-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/john-barkiple-l090ufwopai-unsplash.jpg",\n+        },\n+        "e44ec113-a62d-4913-89d0-ba8d7e50d248": {\n+            "@type": "image",\n+            "alt": "denny-muller-jLjfAWwHdB8-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/denny-muller-jljfawwhdb8-unsplash.jpg",\n+        },\n+    }\n+    volto_page.blocks_layout = {\n+        "items": [\n+            "7471143d-70da-493c-b3c5-56a021407bed",\n+            "7550e1c3-03b9-432a-bdd1-2d2f33ef6d68",\n+            "23dd130c-d90e-48d8-ab5a-9fb85a2136a4",\n+            "cce67a5b-3dae-4e78-9352-7ccb24bb16a5",\n+            "24b5b799-d755-4e43-97f5-e240d6b3b7df",\n+            "82b244cc-25fd-41c7-91bd-d8aea6540b61",\n+            "4b07582a-771a-4ce9-92bf-456e33134dd3",\n+            "828b9212-2b98-4192-92bd-ac6acc08b01f",\n+            "e44ec113-a62d-4913-89d0-ba8d7e50d248",\n+            "a1fafe33-f85f-46fa-919a-19111a8bde52",\n+            "367aacb2-8124-43ce-8989-c9394b71ba97",\n+            "2172b929-70de-416b-b345-b98916a9726f",\n+            "dc517784-5cfc-4cf8-8fad-15fd154cd43a",\n+            "38076104-d93a-4e25-b2b6-7917be41dd48",\n+            "23e99d38-da30-441b-8713-bbbad4344a85",\n+            "4664c4dc-89a2-4dd0-9267-ab4ff65af757",\n+            "374bcb3f-d6c7-4ec0-9a26-aa9ee148a22a",\n+            "c513539d-3b75-4f36-baa3-7145324f79ff",\n+            "28b1c856-4ecd-4c43-bce5-9be127f29a34",\n+            "6ab1e289-f46a-495f-b07d-6967c436e369",\n+            "2e005fdb-a109-4148-b78c-855dab1e83a9",\n+            "d43abdc7-29c4-4cae-b3ed-443c87c449cd",\n+            "5c4e9474-0ccb-45a4-a91d-5eba411e43ef",\n+            "976bea21-fe53-477f-b1a8-47fd51d88492",\n+            "9d1f39db-dfe5-4315-9306-1be2738e0068",\n+            "0d57ccc7-8ceb-4b8f-bf95-5919eb859925",\n+        ]\n+    }\n+    publish(volto_page)\n+    volto_page.reindexObject()\n+\n+    # # add images\n+    # from os import listdir\n+    # from os.path import isfile, join\n+\n+    # currentdir = os.path.dirname(__file__)\n+    # base_image_path = os.path.join(currentdir, "performance")\n+    # filenames = [\n+    #     f for f in listdir(base_image_path) if isfile(join(base_image_path, f))\n+    # ]\n+    # for filename in filenames:\n+    #     imagepath = os.path.join(base_image_path, filename)\n+    #     volto_page.invokeFactory("Image", id=filename, title=filename)\n+    #     import sys\n+    #     import pdb\n+\n+    #     for attr in ("stdin", "stdout", "stderr"):\n+    #         setattr(sys, attr, getattr(sys, "__%s__" % attr))\n+    #     pdb.set_trace()\n+    #     portal.volto[filename].image = NamedBlobImage(\n+    #         data=open(filename, "r").read(),\n+    #         filename=imagepath,\n+    #         contentType="image/jpeg",\n+    #     )\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-01T20:34:37+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/87b06336f595e140aa0d7cd93eb64089bb2ddec0

Install black (#922)

* Install black

* load test: add image scale tests

* Run black

* black

* Ignore E231 for flake8

Files changed:
A src/plone/restapi/tests/test_resolveuid_functional.py
M .travis.yml
M base.cfg
M src/plone/restapi/controlpanels/types.py
M src/plone/restapi/deserializer/controlpanels/types.py
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/deserializer/local_roles.py
M src/plone/restapi/deserializer/mixins.py
M src/plone/restapi/serializer/atcontent.py
M src/plone/restapi/serializer/controlpanels/types.py
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/serializer/dxfields.py
M src/plone/restapi/serializer/nextprev.py
M src/plone/restapi/tests/dxtypes.py
M src/plone/restapi/tests/helpers.py
M src/plone/restapi/tests/test_atcontent_serializer.py
M src/plone/restapi/tests/test_comments.py
M src/plone/restapi/tests/test_content_local_roles.py
M src/plone/restapi/tests/test_content_patch.py
M src/plone/restapi/tests/test_content_post.py
M src/plone/restapi/tests/test_documentation.py
M src/plone/restapi/tests/test_dxcontent_serializer.py
M src/plone/restapi/tests/test_dxfield_serializer.py
M src/plone/restapi/tests/test_serializer.py
M src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py
M src/plone/restapi/tests/test_services_sources.py
M src/plone/restapi/tests/test_services_vocabularies.py
M src/plone/restapi/tests/test_upgrade_ordering.py
M src/plone/restapi/types/utils.py
M src/plone/restapi/upgrades/ordering.py

b'diff --git a/.travis.yml b/.travis.yml\nindex 79bfd9a5..129a59a7 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -52,8 +52,8 @@ install:\n   - sed -ie "s#plone-x.x.x.cfg#plone-$PLONE_VERSION.cfg#" travis.cfg\n   - buildout -t 10 -c travis.cfg\n script:\n+  - if [ "$PLONE_VERSION" == "5.2.x" ] && [ $TRAVIS_PYTHON_VERSION == \'3.7\' ]; then pip install black && black src/ --check; fi\n   - bin/code-analysis\n-  - if [ -f "bin/black" ]; then bin/black src/ --check ; fi\n   - if [ "$PLONE_VERSION" == "5.2.x" ] && [ $TRAVIS_PYTHON_VERSION == \'3.7\' ]; then bin/sphinxbuilder ; fi\n   - bin/test\n   - bin/test-no-uncommitted-doc-changes\ndiff --git a/base.cfg b/base.cfg\nindex 3fbb6442..f833ad16 100644\n--- a/base.cfg\n+++ b/base.cfg\n@@ -102,7 +102,7 @@ recipe = plone.recipe.codeanalysis\n directory = ${buildout:directory}/src\n flake8-exclude=bootstrap.py,bootstrap-buildout.py,docs,bin,*.egg,setup.py,overrides,omelette\n flake8-max-complexity = 25\n-flake8-ignore = E203, E266, E501, W503\n+flake8-ignore = E203, E266, E501, W503, E231\n flake8-max-line-length = 200\n # flake8-select = B,C,E,F,W,T4,B9\n flake8-extensions =\ndiff --git a/src/plone/restapi/controlpanels/types.py b/src/plone/restapi/controlpanels/types.py\nindex fea279a7..c4994e14 100644\n--- a/src/plone/restapi/controlpanels/types.py\n+++ b/src/plone/restapi/controlpanels/types.py\n@@ -36,11 +36,7 @@ def add(self, names):\n \n         description = data.get("description", "")\n \n-        properties = {\n-            "id": tid,\n-            "title": title,\n-            "description": description\n-        }\n+        properties = {"id": tid, "title": title, "description": description}\n \n         # Disable CSRF protection\n         if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n@@ -49,11 +45,13 @@ def add(self, names):\n         if IPloneRestapiLayer.providedBy(self.request):\n             noLongerProvides(self.request, IPloneRestapiLayer)\n \n-        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n-        add_type = queryMultiAdapter((context, self.request), name=\'add-type\')\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+        add_type = queryMultiAdapter((context, self.request), name="add-type")\n         fti = add_type.form_instance.create(data=properties)\n         add_type.form_instance.add(fti)\n-        return self.get([tid, ])\n+        return self.get([tid,])\n \n     def get(self, names):\n         name = names[0]\n@@ -61,7 +59,9 @@ def get(self, names):\n         if IPloneRestapiLayer.providedBy(self.request):\n             noLongerProvides(self.request, IPloneRestapiLayer)\n \n-        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n         context = context.publishTraverse(self.request, name)\n         serializer = ISerializeToJson(self)\n         return serializer(context)\n@@ -72,7 +72,9 @@ def update(self, names):\n         if IPloneRestapiLayer.providedBy(self.request):\n             noLongerProvides(self.request, IPloneRestapiLayer)\n \n-        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n         context = context.publishTraverse(self.request, name)\n         deserializer = IDeserializeFromJson(self)\n         return deserializer(context)\n@@ -83,6 +85,8 @@ def delete(self, names):\n         if IPloneRestapiLayer.providedBy(self.request):\n             noLongerProvides(self.request, IPloneRestapiLayer)\n \n-        context = queryMultiAdapter((self.context, self.request), name=\'dexterity-types\')\n-        edit = queryMultiAdapter((context, self.request), name=\'edit\')\n+        context = queryMultiAdapter(\n+            (self.context, self.request), name="dexterity-types"\n+        )\n+        edit = queryMultiAdapter((context, self.request), name="edit")\n         edit.form_instance.remove((name, None))\ndiff --git a/src/plone/restapi/deserializer/controlpanels/types.py b/src/plone/restapi/deserializer/controlpanels/types.py\nindex 7977dd58..4ba7e90d 100644\n--- a/src/plone/restapi/deserializer/controlpanels/types.py\n+++ b/src/plone/restapi/deserializer/controlpanels/types.py\n@@ -12,9 +12,9 @@\n class DexterityTypesControlpanelDeserializeFromJson(ControlpanelDeserializeFromJson):\n     def deserialize_item(self, proxy):\n         data = json_body(self.request)\n-        overview = queryMultiAdapter((proxy, self.request), name=\'overview\')\n+        overview = queryMultiAdapter((proxy, self.request), name="overview")\n         overview.form_instance.applyChanges(data)\n-        behaviors = queryMultiAdapter((proxy, self.request), name=\'behaviors\')\n+        behaviors = queryMultiAdapter((proxy, self.request), name="behaviors")\n         behaviors.form_instance.applyChanges(data)\n \n     def __call__(self, item=None):\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex ac89d554..a8d9f428 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -31,6 +31,7 @@\n \n if six.PY2:\n     import HTMLParser\n+\n     html_parser = HTMLParser.HTMLParser()\n else:\n     import html as html_parser\ndiff --git a/src/plone/restapi/deserializer/local_roles.py b/src/plone/restapi/deserializer/local_roles.py\nindex 68a2ec80..8f0b02be 100644\n--- a/src/plone/restapi/deserializer/local_roles.py\n+++ b/src/plone/restapi/deserializer/local_roles.py\n@@ -47,7 +47,7 @@ def __call__(self):\n         # roles\n         roles_reindex = False\n         new_roles = data.get("entries", None)\n-        managed_roles = frozenset([r[\'id\'] for r in sharing_view.roles()])\n+        managed_roles = frozenset([r["id"] for r in sharing_view.roles()])\n \n         if new_roles is not None:\n             # the roles are converted into a FrozenSet so we have to filter\ndiff --git a/src/plone/restapi/deserializer/mixins.py b/src/plone/restapi/deserializer/mixins.py\nindex 39e34c8b..7f2bab56 100644\n--- a/src/plone/restapi/deserializer/mixins.py\n+++ b/src/plone/restapi/deserializer/mixins.py\n@@ -38,11 +38,11 @@ def reorderItems(self, obj_id, delta, subset_ids):\n         # Make sure we use bytestring ids for PY2.\n         if six.PY2:\n             if isinstance(obj_id, six.text_type):\n-                obj_id = obj_id.encode(\'utf-8\')\n+                obj_id = obj_id.encode("utf-8")\n             if subset_ids:\n                 subset_ids = [\n-                    id_.encode(\'utf-8\') if isinstance(id_, six.text_type)\n-                    else id_ for id_ in subset_ids\n+                    id_.encode("utf-8") if isinstance(id_, six.text_type) else id_\n+                    for id_ in subset_ids\n                 ]\n \n         # All movement is relative to the subset of ids, if passed in.\ndiff --git a/src/plone/restapi/serializer/atcontent.py b/src/plone/restapi/serializer/atcontent.py\nindex e09ade4d..bee395a1 100644\n--- a/src/plone/restapi/serializer/atcontent.py\n+++ b/src/plone/restapi/serializer/atcontent.py\n@@ -54,10 +54,9 @@ def __call__(self, version=None, include_items=False):\n \n         # Insert next/prev information\n         nextprevious = NextPrevious(obj)\n-        result.update({\n-            "previous_item": nextprevious.previous,\n-            "next_item": nextprevious.next,\n-        })\n+        result.update(\n+            {"previous_item": nextprevious.previous, "next_item": nextprevious.next,}\n+        )\n \n         # Insert expandable elements\n         result.update(expandable_elements(self.context, self.request))\ndiff --git a/src/plone/restapi/serializer/controlpanels/types.py b/src/plone/restapi/serializer/controlpanels/types.py\nindex 0316e08a..01f89241 100644\n--- a/src/plone/restapi/serializer/controlpanels/types.py\n+++ b/src/plone/restapi/serializer/controlpanels/types.py\n@@ -20,9 +20,8 @@\n @adapter(IDexterityTypesControlpanel)\n class DexterityTypesControlpanelSerializeToJson(ControlpanelSerializeToJson):\n     def count(self, portal_type):\n-        catalog = getToolByName(self.controlpanel.context, \'portal_catalog\')\n-        lengths = dict(\n-            catalog.Indexes[\'portal_type\'].uniqueValues(withLengths=True))\n+        catalog = getToolByName(self.controlpanel.context, "portal_catalog")\n+        lengths = dict(catalog.Indexes["portal_type"].uniqueValues(withLengths=True))\n         return lengths.get(portal_type, 0)\n \n     def serialize_item(self, proxy):\n@@ -30,10 +29,15 @@ def serialize_item(self, proxy):\n         json_schema = {}\n         fti = proxy.fti\n \n-        overview = queryMultiAdapter((proxy, self.controlpanel.request), name=\'overview\')\n+        overview = queryMultiAdapter(\n+            (proxy, self.controlpanel.request), name="overview"\n+        )\n         form = overview.form_instance\n         json_schema = get_jsonschema_for_controlpanel(\n-            self.controlpanel, self.controlpanel.context, self.controlpanel.request, form\n+            self.controlpanel,\n+            self.controlpanel.context,\n+            self.controlpanel.request,\n+            form,\n         )\n \n         for name, item in form.fields.items():\n@@ -46,19 +50,26 @@ def serialize_item(self, proxy):\n                 value = getattr(fti, name, None)\n             json_data[json_compatible(name)] = value\n \n-        behaviors = queryMultiAdapter((proxy, self.controlpanel.request), name=\'behaviors\')\n+        behaviors = queryMultiAdapter(\n+            (proxy, self.controlpanel.request), name="behaviors"\n+        )\n         form = behaviors.form_instance\n         behaviors_schema = get_jsonschema_for_controlpanel(\n-            self.controlpanel, self.controlpanel.context, self.controlpanel.request, form\n+            self.controlpanel,\n+            self.controlpanel.context,\n+            self.controlpanel.request,\n+            form,\n         )\n \n-        behaviors_schema[\'fieldsets\'][0][\'id\'] = \'behaviors\'\n-        behaviors_schema[\'fieldsets\'][0][\'title\'] = translate(\'Behaviors\', domain="plone", context=self.controlpanel.request)\n-        json_schema[\'fieldsets\'].extend(behaviors_schema[\'fieldsets\'])\n-        json_schema[\'properties\'].update(behaviors_schema[\'properties\'])\n+        behaviors_schema["fieldsets"][0]["id"] = "behaviors"\n+        behaviors_schema["fieldsets"][0]["title"] = translate(\n+            "Behaviors", domain="plone", context=self.controlpanel.request\n+        )\n+        json_schema["fieldsets"].extend(behaviors_schema["fieldsets"])\n+        json_schema["properties"].update(behaviors_schema["properties"])\n \n         for name, item in form.fields.items():\n-            behaviors = getattr(fti, \'behaviors\', [])\n+            behaviors = getattr(fti, "behaviors", [])\n             json_data[json_compatible(name)] = name in behaviors\n \n         # JSON schema\n@@ -67,14 +78,14 @@ def serialize_item(self, proxy):\n                 self.controlpanel.context.absolute_url(),\n                 SERVICE_ID,\n                 self.controlpanel.__name__,\n-                proxy.__name__\n+                proxy.__name__,\n             ),\n             "title": fti.Title(),\n             "description": fti.Description(),\n             "group": self.controlpanel.group,\n             "schema": json_schema,\n             "data": json_data,\n-            "items": []\n+            "items": [],\n         }\n \n     def __call__(self, item=None):\n@@ -82,7 +93,7 @@ def __call__(self, item=None):\n             return self.serialize_item(item)\n \n         json = super(DexterityTypesControlpanelSerializeToJson, self).__call__()\n-        json[\'items\'] = []\n+        json["items"] = []\n \n         portal = getSite()\n         portal_url = portal.absolute_url()\n@@ -90,13 +101,17 @@ def __call__(self, item=None):\n         ftis = getAllUtilitiesRegisteredFor(IDexterityFTI)\n         for fti in ftis:\n             name = fti.__name__\n-            json[\'items\'].append({\n-                "@id": "{}/@controlpanels/dexterity-types/{}".format(portal_url, name),\n-                "@type": name,\n-                "meta_type": fti.meta_type,\n-                "id": name,\n-                "title": fti.Title(),\n-                "description": fti.Description(),\n-                "count": self.count(name)\n-            })\n+            json["items"].append(\n+                {\n+                    "@id": "{}/@controlpanels/dexterity-types/{}".format(\n+                        portal_url, name\n+                    ),\n+                    "@type": name,\n+                    "meta_type": fti.meta_type,\n+                    "id": name,\n+                    "title": fti.Title(),\n+                    "description": fti.Description(),\n+                    "count": self.count(name),\n+                }\n+            )\n         return json\ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 25aedc0e..3f4a0451 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -69,17 +69,14 @@ def __call__(self, include_items=True):\n             text_mime_type = self.context.mime_type\n         else:\n             text_data = self.context.getText()\n-            text_mime_type = \'text/html\'\n+            text_mime_type = "text/html"\n         return {\n             "@id": url,\n             "@type": self.context.portal_type,\n             "@parent": parent_url,\n             "comment_id": str(self.context.id),\n             "in_reply_to": in_reply_to,\n-            "text": {\n-                "data": text_data,\n-                "mime-type": text_mime_type,\n-            },\n+            "text": {"data": text_data, "mime-type": text_mime_type,},\n             "user_notification": self.context.user_notification,\n             "author_username": self.context.author_username,\n             "author_name": self.context.author_name,\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex b5b7d22d..bd9de513 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -70,10 +70,9 @@ def __call__(self, version=None, include_items=True):\n \n         # Insert next/prev information\n         nextprevious = NextPrevious(obj)\n-        result.update({\n-            "previous_item": nextprevious.previous,\n-            "next_item": nextprevious.next,\n-        })\n+        result.update(\n+            {"previous_item": nextprevious.previous, "next_item": nextprevious.next,}\n+        )\n \n         # Insert expandable elements\n         result.update(expandable_elements(self.context, self.request))\n@@ -98,12 +97,12 @@ def __call__(self, version=None, include_items=True):\n                 # check for a special primary filed target\n                 if name == primary_field_name:\n                     target_adapter = queryMultiAdapter(\n-                        (field, obj, self.request),\n-                        IPrimaryFieldTarget)\n+                        (field, obj, self.request), IPrimaryFieldTarget\n+                    )\n                     if target_adapter:\n                         target = target_adapter()\n                         if target:\n-                            result[\'targetUrl\'] = target\n+                            result["targetUrl"] = target\n \n         result["allow_discussion"] = getMultiAdapter(\n             (self.context, self.request), name="conversation_view"\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 762965d0..06d62747 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -135,7 +135,6 @@ def __call__(self):\n @adapter(IField, IDexterityContent, Interface)\n @implementer(IPrimaryFieldTarget)\n class DefaultPrimaryFieldTarget(object):\n-\n     def __init__(self, field, context, request):\n         self.context = context\n         self.request = request\n@@ -154,7 +153,6 @@ def __call__(self):\n \n @adapter(INamedFileField, IDexterityContent, Interface)\n class PrimaryFileFieldTarget(DefaultPrimaryFieldTarget):\n-\n     def __call__(self):\n         if not self.use_primary_field_target():\n             return\n@@ -163,4 +161,6 @@ def __call__(self):\n         if namedfile is None:\n             return\n \n-        return "/".join((self.context.absolute_url(), "@@download", self.field.__name__))\n+        return "/".join(\n+            (self.context.absolute_url(), "@@download", self.field.__name__)\n+        )\ndiff --git a/src/plone/restapi/serializer/nextprev.py b/src/plone/restapi/serializer/nextprev.py\nindex c0010c72..5e523b93 100644\n--- a/src/plone/restapi/serializer/nextprev.py\n+++ b/src/plone/restapi/serializer/nextprev.py\n@@ -16,7 +16,7 @@ class NextPreviousFixed(NextPreviousBase):\n     def __init__(self, context):\n         self.context = context\n         registry = getUtility(IRegistry)\n-        self.vat = registry.get(\'plone.types_use_view_action_in_listings\', [])\n+        self.vat = registry.get("plone.types_use_view_action_in_listings", [])\n         self.security = getSecurityManager()\n         self.order = self.context.objectIds()\n \n@@ -36,7 +36,7 @@ def next(self):\n         if data is None:\n             return {}\n         return {\n-            "@id": data["url"].lstrip(\'/view\'),\n+            "@id": data["url"].lstrip("/view"),\n             "@type": data["portal_type"],\n             "title": data["title"],\n             "description": data["description"],\n@@ -49,7 +49,7 @@ def previous(self):\n         if data is None:\n             return {}\n         return {\n-            "@id": data["url"].lstrip(\'/view\'),\n+            "@id": data["url"].lstrip("/view"),\n             "@type": data["portal_type"],\n             "title": data["title"],\n             "description": data["description"],\ndiff --git a/src/plone/restapi/tests/dxtypes.py b/src/plone/restapi/tests/dxtypes.py\nindex 8e9dd864..6a4c0f3b 100644\n--- a/src/plone/restapi/tests/dxtypes.py\n+++ b/src/plone/restapi/tests/dxtypes.py\n@@ -86,10 +86,10 @@ def __init__(self, context):\n         self.context = context\n \n         title_words = self.context.title.split()\n-        self.terms = [SimpleTerm(value=w.lower(),\n-                                 token=ascii_token(w.lower()),\n-                                 title=w)\n-                      for w in title_words]\n+        self.terms = [\n+            SimpleTerm(value=w.lower(), token=ascii_token(w.lower()), title=w)\n+            for w in title_words\n+        ]\n \n     def __contains__(self, value):\n         return value in [t.value for t in self.terms]\n@@ -104,10 +104,10 @@ def __init__(self, context):\n         self.context = context\n \n         title_words = self.context.title.split()\n-        self.terms = [SimpleTerm(value=w.lower(),\n-                                 token=ascii_token(w.lower()),\n-                                 title=w)\n-                      for w in title_words]\n+        self.terms = [\n+            SimpleTerm(value=w.lower(), token=ascii_token(w.lower()), title=w)\n+            for w in title_words\n+        ]\n \n     def __contains__(self, value):\n         return value in [t.value for t in self.terms]\n@@ -240,7 +240,7 @@ class IDXTestDocumentSchema(model.Schema):\n     test_namedblobfile_field = namedfile.NamedBlobFile(required=False)\n     test_namedblobimage_field = namedfile.NamedBlobImage(required=False)\n \n-    primary(\'test_primary_namedfile_field\')\n+    primary("test_primary_namedfile_field")\n     test_primary_namedfile_field = namedfile.NamedFile(required=False)\n \n     # z3c.relationfield\ndiff --git a/src/plone/restapi/tests/helpers.py b/src/plone/restapi/tests/helpers.py\nindex eba05f74..da8ca31d 100644\n--- a/src/plone/restapi/tests/helpers.py\n+++ b/src/plone/restapi/tests/helpers.py\n@@ -43,4 +43,4 @@ def ascii_token(text):\n     """Turn a text (unicode in Py2, str in Py3) into a ASCII-only\n     bytestring that is safe to use in term tokens.\n     """\n-    return quopri.encodestring(text.encode(\'utf-8\'))\n+    return quopri.encodestring(text.encode("utf-8"))\ndiff --git a/src/plone/restapi/tests/test_atcontent_serializer.py b/src/plone/restapi/tests/test_atcontent_serializer.py\nindex fe20f1ae..b1ecd6b9 100644\n--- a/src/plone/restapi/tests/test_atcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_atcontent_serializer.py\n@@ -128,7 +128,7 @@ def test_serializer_includes_folder_items(self):\n         )\n \n     def test_serializer_orders_folder_items_by_get_object_position_in_parent(\n-        self\n+        self,\n     ):  # noqa\n         folder = self.portal[\n             self.portal.invokeFactory("ATTestFolder", id="folder", title="Test Folder")\n@@ -206,7 +206,7 @@ def test_nextprev_no_nextprev(self):\n             container=folder,\n             type="ATTestDocument",\n             title="Item 1",\n-            description="One item alone in the folder"\n+            description="One item alone in the folder",\n         )\n         data = self.serialize(doc)\n         self.assertEqual({}, data["previous_item"])\n@@ -223,13 +223,13 @@ def test_nextprev_has_prev(self):\n             container=folder,\n             type="ATTestDocument",\n             title="Item 1",\n-            description="Previous item"\n+            description="Previous item",\n         )\n         doc = api.content.create(\n             container=folder,\n             type="ATTestDocument",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -237,9 +237,9 @@ def test_nextprev_has_prev(self):\n                 "@id": "http://nohost/plone/folder-with-items/item-1",\n                 "@type": "ATTestDocument",\n                 "title": "Item 1",\n-                "description": "Previous item"\n+                "description": "Previous item",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual({}, data["next_item"])\n \n@@ -254,13 +254,13 @@ def test_nextprev_has_next(self):\n             container=folder,\n             type="ATTestDocument",\n             title="Item 1",\n-            description="Current item"\n+            description="Current item",\n         )\n         api.content.create(\n             container=folder,\n             type="ATTestDocument",\n             title="Item 2",\n-            description="Next item"\n+            description="Next item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual({}, data["previous_item"])\n@@ -269,9 +269,9 @@ def test_nextprev_has_next(self):\n                 "@id": "http://nohost/plone/folder-with-items/item-2",\n                 "@type": "ATTestDocument",\n                 "title": "Item 2",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\n \n     def test_nextprev_has_nextprev(self):\n@@ -285,19 +285,19 @@ def test_nextprev_has_nextprev(self):\n             container=folder,\n             type="ATTestDocument",\n             title="Item 1",\n-            description="Previous item"\n+            description="Previous item",\n         )\n         doc = api.content.create(\n             container=folder,\n             type="ATTestDocument",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         api.content.create(\n             container=folder,\n             type="ATTestDocument",\n             title="Item 3",\n-            description="Next item"\n+            description="Next item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -305,18 +305,18 @@ def test_nextprev_has_nextprev(self):\n                 "@id": "http://nohost/plone/folder-with-items/item-1",\n                 "@type": "ATTestDocument",\n                 "title": "Item 1",\n-                "description": "Previous item"\n+                "description": "Previous item",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual(\n             {\n                 "@id": "http://nohost/plone/folder-with-items/item-3",\n                 "@type": "ATTestDocument",\n                 "title": "Item 3",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\n \n     def test_nextprev_root_no_nextprev(self):\n@@ -329,7 +329,7 @@ def test_nextprev_root_has_prev(self):\n             container=self.portal,\n             type="ATTestDocument",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -337,9 +337,9 @@ def test_nextprev_root_has_prev(self):\n                 "@id": "http://nohost/plone/doc1",\n                 "@type": "ATTestDocument",\n                 "title": "Test Document",\n-                "description": ""\n+                "description": "",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual({}, data["next_item"])\n \n@@ -348,7 +348,7 @@ def test_nextprev_root_has_next(self):\n             container=self.portal,\n             type="ATTestDocument",\n             title="Item 2",\n-            description="Next item"\n+            description="Next item",\n         )\n         data = self.serialize(self.doc1)\n         self.assertEqual({}, data["previous_item"])\n@@ -357,9 +357,9 @@ def test_nextprev_root_has_next(self):\n                 "@id": "http://nohost/plone/item-2",\n                 "@type": "ATTestDocument",\n                 "title": "Item 2",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\n \n     def test_nextprev_root_has_nextprev(self):\n@@ -367,19 +367,19 @@ def test_nextprev_root_has_nextprev(self):\n             container=self.portal,\n             type="ATTestDocument",\n             title="Item 1",\n-            description="Previous item"\n+            description="Previous item",\n         )\n         doc = api.content.create(\n             container=self.portal,\n             type="ATTestDocument",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         api.content.create(\n             container=self.portal,\n             type="ATTestDocument",\n             title="Item 3",\n-            description="Next item"\n+            description="Next item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -387,16 +387,16 @@ def test_nextprev_root_has_nextprev(self):\n                 "@id": "http://nohost/plone/item-1",\n                 "@type": "ATTestDocument",\n                 "title": "Item 1",\n-                "description": "Previous item"\n+                "description": "Previous item",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual(\n             {\n                 "@id": "http://nohost/plone/item-3",\n                 "@type": "ATTestDocument",\n                 "title": "Item 3",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex 1ea4836f..d7c181ee 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -101,8 +101,7 @@ def test_comment_with_mimetype_text_plain(self):\n \n         # serializer should return HTML with a clickable link\n         self.assertEqual(\n-            \'Hey, I am plain text!\',\n-            serializer()["text"]["data"],\n+            "Hey, I am plain text!", serializer()["text"]["data"],\n         )\n         # serializer should return mimetype = text/x-web-intelligent\n         self.assertEqual("text/plain", serializer()["text"]["mime-type"])\ndiff --git a/src/plone/restapi/tests/test_content_local_roles.py b/src/plone/restapi/tests/test_content_local_roles.py\nindex bd27f9f4..18139799 100644\n--- a/src/plone/restapi/tests/test_content_local_roles.py\n+++ b/src/plone/restapi/tests/test_content_local_roles.py\n@@ -270,16 +270,18 @@ def test_set_local_roles_for_user(self):\n     def test_may_only_manage_roles_already_held(self):\n         # Grant Editor role to our test user (which gives them the required\n         # "plone.DelegateRoles" permission to manage local roles at all)\n-        api.user.grant_roles(username=TEST_USER_ID, obj=self.portal.folder1,\n-                             roles=[\'Editor\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Editor"]\n+        )\n         transaction.commit()\n \n         # Guard assertion - our test user starts with a limited set of roles\n-        existing_roles = api.user.get_roles(username=TEST_USER_ID,\n-                                            obj=self.portal.folder1)\n+        existing_roles = api.user.get_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1\n+        )\n         self.assertEqual(\n-            sorted([\'Member\', \'Authenticated\', \'Editor\']),\n-            sorted(existing_roles))\n+            sorted(["Member", "Authenticated", "Editor"]), sorted(existing_roles)\n+        )\n \n         # Attempt to gain additional roles not already held\n         response = requests.post(\n@@ -307,21 +309,20 @@ def test_may_only_manage_roles_already_held(self):\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        new_roles = api.user.get_roles(username=TEST_USER_ID,\n-                                       obj=self.portal.folder1)\n+        new_roles = api.user.get_roles(username=TEST_USER_ID, obj=self.portal.folder1)\n \n         # New roles should not contain any new roles that the user didn\'t\n         # have permission to delegate.\n-        self.assertNotIn(u\'Manager\', new_roles)\n-        self.assertNotIn(u\'Publisher\', new_roles)\n-        self.assertNotIn(u\'Reviewer\', new_roles)\n-        self.assertNotIn(u\'Contributor\', new_roles)\n+        self.assertNotIn(u"Manager", new_roles)\n+        self.assertNotIn(u"Publisher", new_roles)\n+        self.assertNotIn(u"Reviewer", new_roles)\n+        self.assertNotIn(u"Contributor", new_roles)\n \n         # \'Reader\' gets added because the permission to delegate it is\n         # assigned to \'Editor\' by default (see p.a.workflow.permissions)\n         self.assertEqual(\n-            sorted([\'Member\', \'Authenticated\', \'Editor\', \'Reader\']),\n-            sorted(new_roles))\n+            sorted(["Member", "Authenticated", "Editor", "Reader"]), sorted(new_roles)\n+        )\n \n     def test_unmanaged_existing_roles_are_retained_on_update(self):\n         """Make sure that existing roles don\'t get dropped when a user that\n@@ -330,30 +331,40 @@ def test_unmanaged_existing_roles_are_retained_on_update(self):\n         """\n         # Create another user that holds the Reviewer role, which is not\n         # managed by our test user\n-        api.user.create(username=\'peter\', email=\'peter@example.org\',\n-                        password=\'secret\', roles=(\'Member\', ))\n+        api.user.create(\n+            username="peter",\n+            email="peter@example.org",\n+            password="secret",\n+            roles=("Member",),\n+        )\n \n-        api.user.grant_roles(username=\'peter\', obj=self.portal.folder1,\n-                             roles=[\'Reviewer\'])\n+        api.user.grant_roles(\n+            username="peter", obj=self.portal.folder1, roles=["Reviewer"]\n+        )\n         transaction.commit()\n \n-        peters_existing_roles = api.user.get_roles(username=\'peter\',\n-                                                   obj=self.portal.folder1)\n-        self.assertEqual(sorted([\'Member\', \'Reviewer\', \'Authenticated\']),\n-                         sorted(peters_existing_roles))\n+        peters_existing_roles = api.user.get_roles(\n+            username="peter", obj=self.portal.folder1\n+        )\n+        self.assertEqual(\n+            sorted(["Member", "Reviewer", "Authenticated"]),\n+            sorted(peters_existing_roles),\n+        )\n \n         # Grant Editor role to our test user (which gives them the required\n         # "plone.DelegateRoles" permission to manage local roles at all)\n-        api.user.grant_roles(username=TEST_USER_ID, obj=self.portal.folder1,\n-                             roles=[\'Editor\'])\n+        api.user.grant_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1, roles=["Editor"]\n+        )\n         transaction.commit()\n \n         # Guard assertion - our test user doesn\'t have/manage Reviewer\n-        existing_roles = api.user.get_roles(username=TEST_USER_ID,\n-                                            obj=self.portal.folder1)\n+        existing_roles = api.user.get_roles(\n+            username=TEST_USER_ID, obj=self.portal.folder1\n+        )\n         self.assertEqual(\n-            sorted([\'Member\', \'Authenticated\', \'Editor\']),\n-            sorted(existing_roles))\n+            sorted(["Member", "Authenticated", "Editor"]), sorted(existing_roles)\n+        )\n \n         # Test user now gives Editor to peter. This should not lead to\n         # peter losing the Reviewer role.\n@@ -382,13 +393,13 @@ def test_unmanaged_existing_roles_are_retained_on_update(self):\n         transaction.commit()\n \n         self.assertEqual(response.status_code, 204)\n-        new_roles = api.user.get_roles(username=\'peter\',\n-                                       obj=self.portal.folder1)\n+        new_roles = api.user.get_roles(username="peter", obj=self.portal.folder1)\n \n-        self.assertIn(u\'Reviewer\', new_roles)\n+        self.assertIn(u"Reviewer", new_roles)\n         self.assertEqual(\n-            sorted([\'Member\', \'Authenticated\', \'Editor\', \'Reader\', \'Reviewer\']),\n-            sorted(new_roles))\n+            sorted(["Member", "Authenticated", "Editor", "Reader", "Reviewer"]),\n+            sorted(new_roles),\n+        )\n \n     def test_unset_local_roles_for_user(self):\n         api.user.grant_roles(\ndiff --git a/src/plone/restapi/tests/test_content_patch.py b/src/plone/restapi/tests/test_content_patch.py\nindex 85668414..02116ee3 100644\n--- a/src/plone/restapi/tests/test_content_patch.py\n+++ b/src/plone/restapi/tests/test_content_patch.py\n@@ -188,7 +188,7 @@ def test_patch_document_with_apostrophe_dont_return_500(self):\n             "text": {\n                 "content-type": "text/html",\n                 "encoding": "utf8",\n-                "data": "<p>example with &#x27;</p>"\n+                "data": "<p>example with &#x27;</p>",\n             }\n         }\n         response = requests.patch(\ndiff --git a/src/plone/restapi/tests/test_content_post.py b/src/plone/restapi/tests/test_content_post.py\nindex 9c25bf9b..b9ba5f38 100644\n--- a/src/plone/restapi/tests/test_content_post.py\n+++ b/src/plone/restapi/tests/test_content_post.py\n@@ -194,14 +194,16 @@ def test_post_to_folder_with_apostrophe_dont_return_500(self):\n                 "text": {\n                     "content-type": "text/html",\n                     "encoding": "utf8",\n-                    "data": "<p>example with &#x27;</p>"\n-                }\n+                    "data": "<p>example with &#x27;</p>",\n+                },\n             },\n         )\n         self.assertEqual(201, response.status_code)\n         transaction.begin()\n-        self.assertEqual("<p>example with \'</p>", self.portal.folder1.mydocument2.text.raw)\n-        self.assertEqual("<p>example with \'</p>", response.json()[\'text\'][\'data\'])\n+        self.assertEqual(\n+            "<p>example with \'</p>", self.portal.folder1.mydocument2.text.raw\n+        )\n+        self.assertEqual("<p>example with \'</p>", response.json()["text"]["data"])\n \n \n class TestATFolderCreate(unittest.TestCase):\ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 2ec99caf..d3523672 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -1563,26 +1563,32 @@ def test_controlpanels_crud_dexterity(self):\n                 "description": "A custom content-type",\n             },\n         )\n-        save_request_and_response_for_docs("controlpanels_post_dexterity_item", response)\n+        save_request_and_response_for_docs(\n+            "controlpanels_post_dexterity_item", response\n+        )\n \n         # GET\n-        response = self.api_session.get("/@controlpanels/dexterity-types/my_custom_content_type")\n+        response = self.api_session.get(\n+            "/@controlpanels/dexterity-types/my_custom_content_type"\n+        )\n         save_request_and_response_for_docs("controlpanels_get_dexterity_item", response)\n \n         # PATCH\n         response = self.api_session.patch(\n             "/@controlpanels/dexterity-types/my_custom_content_type",\n-            json={\n-                "title": "My Content Type",\n-                "description": "A content-type",\n-            },\n+            json={"title": "My Content Type", "description": "A content-type",},\n+        )\n+        save_request_and_response_for_docs(\n+            "controlpanels_patch_dexterity_item", response\n         )\n-        save_request_and_response_for_docs("controlpanels_patch_dexterity_item", response)\n \n         # DELETE\n         response = self.api_session.delete(\n-            "/@controlpanels/dexterity-types/my_custom_content_type")\n-        save_request_and_response_for_docs("controlpanels_delete_dexterity_item", response)\n+            "/@controlpanels/dexterity-types/my_custom_content_type"\n+        )\n+        save_request_and_response_for_docs(\n+            "controlpanels_delete_dexterity_item", response\n+        )\n \n \n @unittest.skipUnless(\ndiff --git a/src/plone/restapi/tests/test_dxcontent_serializer.py b/src/plone/restapi/tests/test_dxcontent_serializer.py\nindex 54acfb0a..7f450d4a 100644\n--- a/src/plone/restapi/tests/test_dxcontent_serializer.py\n+++ b/src/plone/restapi/tests/test_dxcontent_serializer.py\n@@ -200,7 +200,7 @@ def test_nextprev_no_nextprev(self):\n             container=folder,\n             type="Document",\n             title="Item 1",\n-            description="One item alone in the folder"\n+            description="One item alone in the folder",\n         )\n         data = self.serialize(doc)\n         self.assertEqual({}, data["previous_item"])\n@@ -217,13 +217,13 @@ def test_nextprev_has_prev(self):\n             container=folder,\n             type="Document",\n             title="Item 1",\n-            description="Previous item"\n+            description="Previous item",\n         )\n         doc = api.content.create(\n             container=folder,\n             type="Document",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -231,9 +231,9 @@ def test_nextprev_has_prev(self):\n                 "@id": "http://nohost/plone/folder-with-items/item-1",\n                 "@type": "Document",\n                 "title": "Item 1",\n-                "description": "Previous item"\n+                "description": "Previous item",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual({}, data["next_item"])\n \n@@ -248,13 +248,10 @@ def test_nextprev_has_next(self):\n             container=folder,\n             type="Document",\n             title="Item 1",\n-            description="Current item"\n+            description="Current item",\n         )\n         api.content.create(\n-            container=folder,\n-            type="Document",\n-            title="Item 2",\n-            description="Next item"\n+            container=folder, type="Document", title="Item 2", description="Next item"\n         )\n         data = self.serialize(doc)\n         self.assertEqual({}, data["previous_item"])\n@@ -263,9 +260,9 @@ def test_nextprev_has_next(self):\n                 "@id": "http://nohost/plone/folder-with-items/item-2",\n                 "@type": "Document",\n                 "title": "Item 2",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\n \n     def test_nextprev_has_nextprev(self):\n@@ -279,19 +276,16 @@ def test_nextprev_has_nextprev(self):\n             container=folder,\n             type="Document",\n             title="Item 1",\n-            description="Previous item"\n+            description="Previous item",\n         )\n         doc = api.content.create(\n             container=folder,\n             type="Document",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         api.content.create(\n-            container=folder,\n-            type="Document",\n-            title="Item 3",\n-            description="Next item"\n+            container=folder, type="Document", title="Item 3", description="Next item"\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -299,18 +293,18 @@ def test_nextprev_has_nextprev(self):\n                 "@id": "http://nohost/plone/folder-with-items/item-1",\n                 "@type": "Document",\n                 "title": "Item 1",\n-                "description": "Previous item"\n+                "description": "Previous item",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual(\n             {\n                 "@id": "http://nohost/plone/folder-with-items/item-3",\n                 "@type": "Document",\n                 "title": "Item 3",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\n \n     def test_nextprev_root_no_nextprev(self):\n@@ -323,7 +317,7 @@ def test_nextprev_root_has_prev(self):\n             container=self.portal,\n             type="Document",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -331,9 +325,9 @@ def test_nextprev_root_has_prev(self):\n                 "@id": "http://nohost/plone/doc1",\n                 "@type": "DXTestDocument",\n                 "title": "",\n-                "description": ""\n+                "description": "",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual({}, data["next_item"])\n \n@@ -342,7 +336,7 @@ def test_nextprev_root_has_next(self):\n             container=self.portal,\n             type="Document",\n             title="Item 2",\n-            description="Next item"\n+            description="Next item",\n         )\n         data = self.serialize()\n         self.assertEqual({}, data["previous_item"])\n@@ -351,9 +345,9 @@ def test_nextprev_root_has_next(self):\n                 "@id": "http://nohost/plone/item-2",\n                 "@type": "Document",\n                 "title": "Item 2",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\n \n     def test_nextprev_root_has_nextprev(self):\n@@ -361,19 +355,19 @@ def test_nextprev_root_has_nextprev(self):\n             container=self.portal,\n             type="Document",\n             title="Item 1",\n-            description="Previous item"\n+            description="Previous item",\n         )\n         doc = api.content.create(\n             container=self.portal,\n             type="Document",\n             title="Item 2",\n-            description="Current item"\n+            description="Current item",\n         )\n         api.content.create(\n             container=self.portal,\n             type="Document",\n             title="Item 3",\n-            description="Next item"\n+            description="Next item",\n         )\n         data = self.serialize(doc)\n         self.assertEqual(\n@@ -381,18 +375,18 @@ def test_nextprev_root_has_nextprev(self):\n                 "@id": "http://nohost/plone/item-1",\n                 "@type": "Document",\n                 "title": "Item 1",\n-                "description": "Previous item"\n+                "description": "Previous item",\n             },\n-            data["previous_item"]\n+            data["previous_item"],\n         )\n         self.assertEqual(\n             {\n                 "@id": "http://nohost/plone/item-3",\n                 "@type": "Document",\n                 "title": "Item 3",\n-                "description": "Next item"\n+                "description": "Next item",\n             },\n-            data["next_item"]\n+            data["next_item"],\n         )\n \n     def test_richtext_serializer_context(self):\n@@ -498,7 +492,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled(self):\n         self.assertEqual(True, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allowed(\n-        self\n+        self,\n     ):  # noqa\n         self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n@@ -516,7 +510,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_allow\n         self.assertEqual(False, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n-        self\n+        self,\n     ):  # noqa\n         self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n@@ -533,7 +527,7 @@ def test_allow_discussion_fti_allows_allows_global_enabled_but_no_instance_set(\n         self.assertEqual(True, obj["allow_discussion"])\n \n     def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allowed(\n-        self\n+        self,\n     ):  # noqa\n         self.portal.invokeFactory("Document", id=u"doc2")\n         registry = queryUtility(IRegistry)\n@@ -551,7 +545,7 @@ def test_allow_discussion_fti_disallows_allows_global_enabled_but_instance_allow\n         self.assertEqual(True, obj["allow_discussion"])\n \n     def test_allow_discussion_global_enabled_but_instance_has_no_discussion_behavior(\n-        self\n+        self,\n     ):  # noqa\n         registry = queryUtility(IRegistry)\n         settings = registry.forInterface(IDiscussionSettings, check=False)\n@@ -579,9 +573,7 @@ def setUp(self):\n         )\n \n         self.portal.invokeFactory(\n-            "DXTestDocument",\n-            id=u"doc2",\n-            test_primary_namedfile_field=None,\n+            "DXTestDocument", id=u"doc2", test_primary_namedfile_field=None,\n         )\n \n         self.portal.doc1.creation_date = DateTime("2015-04-27T10:14:48+00:00")\n@@ -598,7 +590,10 @@ def test_primary_field_target(self):\n         data = serializer()\n         self.assertIn("targetUrl", data)\n         download_url = u"/".join(\n-            [self.portal.doc1.absolute_url(), u"@@download/test_primary_namedfile_field"]\n+            [\n+                self.portal.doc1.absolute_url(),\n+                u"@@download/test_primary_namedfile_field",\n+            ]\n         )\n         self.assertEqual(data["targetUrl"], download_url)\n \ndiff --git a/src/plone/restapi/tests/test_dxfield_serializer.py b/src/plone/restapi/tests/test_dxfield_serializer.py\nindex 1e3b0d5d..6ae6d9fd 100644\n--- a/src/plone/restapi/tests/test_dxfield_serializer.py\n+++ b/src/plone/restapi/tests/test_dxfield_serializer.py\n@@ -90,7 +90,7 @@ def test_choice_field_serialization_returns_vocabulary_term(self):\n         self.assertEqual({u"token": u"foo", u"title": None}, value)\n \n     def test_choice_field_with_vocabulary_serialization_returns_vocabulary_term(\n-        self\n+        self,\n     ):  # noqa\n         value = self.serialize("test_choice_field_with_vocabulary", u"value1")\n         self.assertTrue(isinstance(value, dict))\n@@ -157,10 +157,7 @@ def test_list_field_with_vocabulary_choice_serialization_no_valid_term(self):\n         )\n         self.assertTrue(isinstance(value, list), "Not a <list>")\n         self.assertEqual(\n-            [\n-                {u"token": u"token3", u"title": u"title3"},\n-            ],\n-            value,\n+            [{u"token": u"token3", u"title": u"title3"},], value,\n         )\n \n     def test_set_field_serialization_returns_list(self):\ndiff --git a/src/plone/restapi/tests/test_resolveuid_functional.py b/src/plone/restapi/tests/test_resolveuid_functional.py\nnew file mode 100644\nindex 00000000..e6ce5afb\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_resolveuid_functional.py\n@@ -0,0 +1,103 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.dexterity.fti import DexterityFTI\n+from plone.restapi.behaviors import IBlocks\n+from plone.uuid.interfaces import IUUID\n+\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from zope.interface import alsoProvides\n+\n+import transaction\n+import unittest\n+\n+\n+class TestResolveUIDFunctional(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        login(self.portal, TEST_USER_NAME)\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        fti = DexterityFTI("blockspage")\n+        self.portal.portal_types._setObject("blockspage", fti)\n+        fti.klass = "plone.dexterity.content.Container"\n+        fti.behaviors = ("volto.blocks",)\n+        self.fti = fti\n+        alsoProvides(self.request, IBlocks)\n+        self.portal_url = self.portal.absolute_url()\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.portal.invokeFactory("Document", id="target", title="Target")\n+        self.target = self.portal.target\n+        self.target_uuid = IUUID(self.target)\n+\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def test_resolveuid(self):\n+        self.api_session.post(\n+            "/",\n+            json={\n+                "title": "Document",\n+                "@type": "blockspage",\n+                "blocks": {\n+                    "ca5908a5-3f58-4cd5-beb7-9bd1539d6744": {"@type": "title"},\n+                    "791bf004-7c88-4278-8490-13b85c3fa4b4": {\n+                        "@type": "text",\n+                        "text": {\n+                            "blocks": [\n+                                {\n+                                    "key": "3bnq6",\n+                                    "text": "Link",\n+                                    "type": "unstyled",\n+                                    "depth": 0,\n+                                    "inlineStyleRanges": [],\n+                                    "entityRanges": [\n+                                        {"offset": 0, "length": 4, "key": 0}\n+                                    ],\n+                                    "data": {},\n+                                }\n+                            ],\n+                            "entityMap": {\n+                                "0": {\n+                                    "type": "LINK",\n+                                    "mutability": "MUTABLE",\n+                                    "data": {\n+                                        "url": "{}/target".format(self.portal_url)\n+                                    },\n+                                }\n+                            },\n+                        },\n+                    },\n+                },\n+                "blocks_layout": {\n+                    "items": [\n+                        "ca5908a5-3f58-4cd5-beb7-9bd1539d6744",\n+                        "791bf004-7c88-4278-8490-13b85c3fa4b4",\n+                    ]\n+                },\n+            },\n+        )\n+        transaction.commit()\n+        self.assertEqual(\n+            "../resolveuid/{}".format(self.target_uuid),\n+            self.portal.document.blocks.get("791bf004-7c88-4278-8490-13b85c3fa4b4")\n+            .get("text")\n+            .get("entityMap")\n+            .get("0")\n+            .get("data")\n+            .get("url"),\n+        )\ndiff --git a/src/plone/restapi/tests/test_serializer.py b/src/plone/restapi/tests/test_serializer.py\nindex a4bbf258..589caf17 100644\n--- a/src/plone/restapi/tests/test_serializer.py\n+++ b/src/plone/restapi/tests/test_serializer.py\n@@ -121,7 +121,7 @@ def test_serialize_on_folder_returns_items_attr(self):\n         )\n \n     def test_serialize_folder_orders_items_by_get_object_position_in_parent(\n-        self\n+        self,\n     ):  # noqa\n         self.portal.invokeFactory("Folder", id="folder1", title="Folder 1")\n         self.portal.folder1.invokeFactory("Document", id="doc1")\ndiff --git a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\nindex 619cee6e..f67a8cd1 100644\n--- a/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n+++ b/src/plone/restapi/tests/test_services_controlpanel_dexterity_types.py\n@@ -60,12 +60,10 @@ def test_controlpanels_dexterity_types_get(self):\n         )\n \n     def test_controlpanels_dexterity_types_document_get(self):\n-        response = self.api_session.get(\n-            "/@controlpanels/dexterity-types/Document")\n+        response = self.api_session.get("/@controlpanels/dexterity-types/Document")\n         self.assertEqual(200, response.status_code)\n         self.assertEqual(\n-            "{}/@controlpanels/dexterity-types/Document".format(\n-                self.portal_url),\n+            "{}/@controlpanels/dexterity-types/Document".format(self.portal_url),\n             response.json().get("@id"),\n         )\n         self.assertEqual("Page", response.json().get("title"))\n@@ -82,17 +80,12 @@ def test_controlpanels_dexterity_types_post(self):\n         self.assertEqual(201, response.status_code)\n         self.assertEqual(\n             "{}/@controlpanels/dexterity-types/my_custom_content_type".format(\n-                self.portal_url),\n+                self.portal_url\n+            ),\n             response.json().get("@id"),\n         )\n-        self.assertEqual(\n-            \'My Custom Content Type\',\n-            response.json().get("title")\n-        )\n-        self.assertEqual(\n-            \'A custom content-type\',\n-            response.json().get("description")\n-        )\n+        self.assertEqual("My Custom Content Type", response.json().get("title"))\n+        self.assertEqual("A custom content-type", response.json().get("description"))\n \n     def test_controlpanels_dexterity_types_document_patch(self):\n         response = self.api_session.patch(\n@@ -106,21 +99,15 @@ def test_controlpanels_dexterity_types_document_patch(self):\n         # PATCH returns no content\n         self.assertEqual(204, response.status_code)\n \n-        response = self.api_session.get(\n-            "/@controlpanels/dexterity-types/Document")\n+        response = self.api_session.get("/@controlpanels/dexterity-types/Document")\n         self.assertEqual(200, response.status_code)\n+        self.assertEqual("New Content Type Title", response.json().get("title"))\n         self.assertEqual(\n-            \'New Content Type Title\',\n-            response.json().get("title")\n-        )\n-        self.assertEqual(\n-            \'New content type description\',\n-            response.json().get("description")\n+            "New content type description", response.json().get("description")\n         )\n \n     def test_controlpanels_dexterity_types_document_delete(self):\n-        response = self.api_session.delete(\n-            "/@controlpanels/dexterity-types/Document")\n+        response = self.api_session.delete("/@controlpanels/dexterity-types/Document")\n \n         self.assertEqual(204, response.status_code)\n         self.assertEqual(\ndiff --git a/src/plone/restapi/tests/test_services_sources.py b/src/plone/restapi/tests/test_services_sources.py\nindex 898dfe8b..0b88f702 100644\n--- a/src/plone/restapi/tests/test_services_sources.py\n+++ b/src/plone/restapi/tests/test_services_sources.py\n@@ -179,7 +179,7 @@ def test_get_source_for_unknown_field(self):\n         )\n \n     def test_context_source(self):\n-        self.doc.title = u\'Foo Bar Baz\'\n+        self.doc.title = u"Foo Bar Baz"\n         transaction.commit()\n \n         response = self.api_session.get(\n@@ -202,11 +202,12 @@ def test_context_source(self):\n         )\n \n     def test_source_filtered_by_non_ascii_title(self):\n-        self.doc.title = u\'B\xc3\xa4r\'\n+        self.doc.title = u"B\xc3\xa4r"\n         transaction.commit()\n \n         response = self.api_session.get(\n-            "%s/@sources/test_choice_with_context_source?title=b%%C3%%A4r" % self.doc.absolute_url()\n+            "%s/@sources/test_choice_with_context_source?title=b%%C3%%A4r"\n+            % self.doc.absolute_url()\n         )\n \n         self.assertEqual(response.status_code, 200)\n@@ -215,9 +216,7 @@ def test_source_filtered_by_non_ascii_title(self):\n             {\n                 u"@id": self.portal_url\n                 + u"/testdoc/@sources/test_choice_with_context_source?title=b%C3%A4r",  # noqa\n-                u"items": [\n-                    {u\'token\': u\'b=C3=A4r\', u\'title\': u\'B\\xe4r\'},\n-                ],\n+                u"items": [{u"token": u"b=C3=A4r", u"title": u"B\\xe4r"},],\n                 u"items_total": 1,\n             },\n         )\ndiff --git a/src/plone/restapi/tests/test_services_vocabularies.py b/src/plone/restapi/tests/test_services_vocabularies.py\nindex 6fdcbd44..fea8e7d7 100644\n--- a/src/plone/restapi/tests/test_services_vocabularies.py\n+++ b/src/plone/restapi/tests/test_services_vocabularies.py\n@@ -148,8 +148,10 @@ def test_get_vocabulary_filtered_by_non_ascii_title(self):\n             {\n                 u"@id": self.portal_url\n                 + u"/@vocabularies/plone.restapi.tests.test_vocabulary?title=t%C3%B6tle",  # noqa\n-                u"items": [{u"title": u"T\\xf6tle 5", u"token": u"token5"},\n-                           {u"title": u"T\\xf6tle 6", u"token": u"token6"}],\n+                u"items": [\n+                    {u"title": u"T\\xf6tle 5", u"token": u"token5"},\n+                    {u"title": u"T\\xf6tle 6", u"token": u"token6"},\n+                ],\n                 u"items_total": 2,\n             },\n         )\ndiff --git a/src/plone/restapi/tests/test_upgrade_ordering.py b/src/plone/restapi/tests/test_upgrade_ordering.py\nindex 412cf030..49f9772f 100644\n--- a/src/plone/restapi/tests/test_upgrade_ordering.py\n+++ b/src/plone/restapi/tests/test_upgrade_ordering.py\n@@ -2,7 +2,9 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n-from plone.restapi.upgrades.ordering import ensure_child_ordering_object_ids_are_native_strings\n+from plone.restapi.upgrades.ordering import (\n+    ensure_child_ordering_object_ids_are_native_strings,\n+)\n \n import unittest\n import six\n@@ -29,17 +31,12 @@ def test_upgrade_ensure_child_ordering_object_ids_are_native_strings(self):\n \n         # use incorrect type for ordering, results in mixed type ordering ids\n         # on folder\n-        ordering.moveObjectsToBottom([six.text_type(\'doc1\')])\n+        ordering.moveObjectsToBottom([six.text_type("doc1")])\n \n         ensure_child_ordering_object_ids_are_native_strings(self.folder)\n \n         self.assertEqual(\n-            [\n-                "doc2",\n-                "doc3",\n-                "doc1",\n-            ],  # noqa\n-            self.folder.objectIds(),\n+            ["doc2", "doc3", "doc1",], self.folder.objectIds(),  # noqa\n         )\n \n         # upgrade helper should ensure bytestring ids in python2 and do nothing\n@@ -57,20 +54,14 @@ def test_upgrade_view(self):\n         ordering = self.folder.getOrdering()\n         # use incorrect type for ordering, results in mixed type ordering ids\n         # on folder\n-        ordering.moveObjectsToBottom([six.text_type(\'doc1\')])\n+        ordering.moveObjectsToBottom([six.text_type("doc1")])\n \n         setRoles(self.portal, TEST_USER_ID, ["Manager"])\n-        view = self.portal.restrictedTraverse(\n-            \'@@plone-restapi-upgrade-fix-ordering\')\n+        view = self.portal.restrictedTraverse("@@plone-restapi-upgrade-fix-ordering")\n         view()\n \n         self.assertEqual(\n-            [\n-                "doc2",\n-                "doc3",\n-                "doc1",\n-            ],  # noqa\n-            self.folder.objectIds(),\n+            ["doc2", "doc3", "doc1",], self.folder.objectIds(),  # noqa\n         )\n \n         # upgrade helper should ensure bytestring ids in python2 and do nothing\ndiff --git a/src/plone/restapi/types/utils.py b/src/plone/restapi/types/utils.py\nindex fdbbdedd..097eaf64 100644\n--- a/src/plone/restapi/types/utils.py\n+++ b/src/plone/restapi/types/utils.py\n@@ -61,18 +61,24 @@ def get_form_fieldsets(form):\n     """ Get fieldsets from form\n     """\n     fieldsets = []\n-    form_fields = getattr(form, \'fields\', {})\n+    form_fields = getattr(form, "fields", {})\n     fields_values = list(form_fields.values())\n     if form_fields:\n-        fieldsets.append({\n-            "id": "default",\n-            "title": translate("label_schema_default", default="Default",\n-                               domain="plone", context=getRequest()),\n-            "fields": fields_values\n-        })\n+        fieldsets.append(\n+            {\n+                "id": "default",\n+                "title": translate(\n+                    "label_schema_default",\n+                    default="Default",\n+                    domain="plone",\n+                    context=getRequest(),\n+                ),\n+                "fields": fields_values,\n+            }\n+        )\n \n     # Additional fieldsets (AKA z3c.form groups)\n-    for group in getattr(form, \'groups\', []):\n+    for group in getattr(form, "groups", []):\n         fieldset = {\n             "id": group.__name__,\n             "title": translate(group.label, context=getRequest()),\ndiff --git a/src/plone/restapi/upgrades/ordering.py b/src/plone/restapi/upgrades/ordering.py\nindex a7c08ed1..916e57dc 100644\n--- a/src/plone/restapi/upgrades/ordering.py\n+++ b/src/plone/restapi/upgrades/ordering.py\n@@ -10,12 +10,12 @@\n \n \n ORDER_KEY = DefaultOrdering.ORDER_KEY\n-QUERY = {\'is_folderish\': True}\n+QUERY = {"is_folderish": True}\n \n \n def safe_utf8(to_utf8):\n     if isinstance(to_utf8, six.text_type):\n-        to_utf8 = to_utf8.encode(\'utf-8\')\n+        to_utf8 = to_utf8.encode("utf-8")\n     return to_utf8\n \n \n@@ -45,7 +45,8 @@ def ensure_child_ordering_object_ids_are_native_strings(container):\n         return\n \n     fixed_ordering = PersistentList(\n-        safe_utf8(item_id) for item_id in annotations[ORDER_KEY])\n+        safe_utf8(item_id) for item_id in annotations[ORDER_KEY]\n+    )\n     annotations[ORDER_KEY] = fixed_ordering\n \n \n@@ -58,6 +59,7 @@ class FixOrderingView(BrowserView):\n     The problem only exists with python 2 so we do nothing when we are\n     called on python 3 by mistake.\n     """\n+\n     def __call__(self):\n         if six.PY3:\n             return "Aborted, fixing ordering is only necessary on python 2."\n'

Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-01T20:38:21+02:00
Author: Timo Stollenwerk (tisto) <stollenwerk@kitconcept.com>
Commit: https://github.com/plone/plone.restapi/commit/928bffabfdea3f83ca5a9bbca5fccae5a00d2d71

Merge branch '6.x.x'

Files changed:
A src/plone/restapi/tests/image.jpeg
M performance.jmx
M plone-5.2.x.cfg
M src/plone/restapi/tests/performance.py

b'diff --git a/performance.jmx b/performance.jmx\nindex d96f6e03..1eb7a11e 100644\n--- a/performance.jmx\n+++ b/performance.jmx\n@@ -1146,6 +1146,33 @@\n           <stringProp name="HTTPSampler.response_timeout"></stringProp>\n         </HTTPSamplerProxy>\n         <hashTree/>\n+        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document (fullobjects)" enabled="true">\n+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+            <collectionProp name="Arguments.arguments">\n+              <elementProp name="Accept" elementType="HTTPArgument">\n+                <boolProp name="HTTPArgument.always_encode">false</boolProp>\n+                <stringProp name="Argument.value">application/json</stringProp>\n+                <stringProp name="Argument.metadata">=</stringProp>\n+                <boolProp name="HTTPArgument.use_equals">true</boolProp>\n+                <stringProp name="Argument.name">Accept</stringProp>\n+              </elementProp>\n+            </collectionProp>\n+          </elementProp>\n+          <stringProp name="HTTPSampler.domain"></stringProp>\n+          <stringProp name="HTTPSampler.port"></stringProp>\n+          <stringProp name="HTTPSampler.protocol"></stringProp>\n+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+          <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/document?fullobjects</stringProp>\n+          <stringProp name="HTTPSampler.method">GET</stringProp>\n+          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+          <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+        </HTTPSamplerProxy>\n+        <hashTree/>\n         <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Document (next/prev)" enabled="true">\n           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n             <collectionProp name="Arguments.arguments">\n@@ -1564,6 +1591,731 @@\n         </HTTPSamplerProxy>\n         <hashTree/>\n       </hashTree>\n+      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Volto Images (Read)" enabled="true">\n+        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n+        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Schleifen-Controller (Loop Controller)" enabled="true">\n+          <boolProp name="LoopController.continue_forever">false</boolProp>\n+          <stringProp name="LoopController.loops">1</stringProp>\n+        </elementProp>\n+        <stringProp name="ThreadGroup.num_threads">1</stringProp>\n+        <stringProp name="ThreadGroup.ramp_time">1</stringProp>\n+        <longProp name="ThreadGroup.start_time">1463570296000</longProp>\n+        <longProp name="ThreadGroup.end_time">1463570296000</longProp>\n+        <boolProp name="ThreadGroup.scheduler">false</boolProp>\n+        <stringProp name="ThreadGroup.duration"></stringProp>\n+        <stringProp name="ThreadGroup.delay"></stringProp>\n+        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>\n+      </ThreadGroup>\n+      <hashTree>\n+        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">\n+          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n+            <collectionProp name="Arguments.arguments">\n+              <elementProp name="" elementType="HTTPArgument">\n+                <boolProp name="HTTPArgument.always_encode">false</boolProp>\n+                <stringProp name="Argument.value"></stringProp>\n+                <stringProp name="Argument.metadata">=</stringProp>\n+                <boolProp name="HTTPArgument.use_equals">true</boolProp>\n+              </elementProp>\n+            </collectionProp>\n+          </elementProp>\n+          <stringProp name="HTTPSampler.domain">localhost</stringProp>\n+          <stringProp name="HTTPSampler.port">12345</stringProp>\n+          <stringProp name="HTTPSampler.protocol">http</stringProp>\n+          <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+          <stringProp name="HTTPSampler.path">/Plone/${testfolder}/</stringProp>\n+          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>\n+          <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+          <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+        </ConfigTestElement>\n+        <hashTree/>\n+        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">\n+          <collectionProp name="HeaderManager.headers">\n+            <elementProp name="" elementType="Header">\n+              <stringProp name="Header.name">Accept</stringProp>\n+              <stringProp name="Header.value">application/json</stringProp>\n+            </elementProp>\n+          </collectionProp>\n+        </HeaderManager>\n+        <hashTree/>\n+        <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="Volto Page with 30 images" enabled="true">\n+          <boolProp name="PARENT_SAMPLE">false</boolProp>\n+        </com.blazemeter.jmeter.controller.ParallelSampler>\n+        <hashTree>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 01 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image1/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 02 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image2/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 03 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image3/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 04 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image4/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 05 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image5/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 06 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image6/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 07 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image7/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 08 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image8/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 09 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image9/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 10 (Large)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image10/@@images/image/large</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 11 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image11/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 12 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image12/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 13 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image13/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 14 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image14/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 15 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image15/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 16 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image16/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 17 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image17/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 18 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image18/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 19 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image19/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 20 (Preview)" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image20/@@images/image/preview</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 21" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image21/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 22" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image22/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 23" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image23/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 24" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image24/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 25" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image25/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 26" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image26/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 27" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image27/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 28" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image28/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 29" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image29/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Image 30" enabled="true">\n+            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">\n+              <collectionProp name="Arguments.arguments"/>\n+            </elementProp>\n+            <stringProp name="HTTPSampler.domain"></stringProp>\n+            <stringProp name="HTTPSampler.port"></stringProp>\n+            <stringProp name="HTTPSampler.protocol"></stringProp>\n+            <stringProp name="HTTPSampler.contentEncoding"></stringProp>\n+            <stringProp name="HTTPSampler.path">/Plone/${testfolder-read}/volto-page/image30/@@images/image</stringProp>\n+            <stringProp name="HTTPSampler.method">GET</stringProp>\n+            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>\n+            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>\n+            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>\n+            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>\n+            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>\n+            <stringProp name="HTTPSampler.connect_timeout"></stringProp>\n+            <stringProp name="HTTPSampler.response_timeout"></stringProp>\n+          </HTTPSamplerProxy>\n+          <hashTree/>\n+        </hashTree>\n+        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">\n+          <boolProp name="ResultCollector.error_logging">false</boolProp>\n+          <objProp>\n+            <name>saveConfig</name>\n+            <value class="SampleSaveConfiguration">\n+              <time>true</time>\n+              <latency>true</latency>\n+              <timestamp>true</timestamp>\n+              <success>true</success>\n+              <label>true</label>\n+              <code>true</code>\n+              <message>true</message>\n+              <threadName>true</threadName>\n+              <dataType>true</dataType>\n+              <encoding>false</encoding>\n+              <assertions>true</assertions>\n+              <subresults>true</subresults>\n+              <responseData>false</responseData>\n+              <samplerData>false</samplerData>\n+              <xml>false</xml>\n+              <fieldNames>true</fieldNames>\n+              <responseHeaders>false</responseHeaders>\n+              <requestHeaders>false</requestHeaders>\n+              <responseDataOnError>false</responseDataOnError>\n+              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>\n+              <assertionsResultsToSave>0</assertionsResultsToSave>\n+              <bytes>true</bytes>\n+              <sentBytes>true</sentBytes>\n+              <url>true</url>\n+              <threadCounts>true</threadCounts>\n+              <idleTime>true</idleTime>\n+              <connectTime>true</connectTime>\n+            </value>\n+          </objProp>\n+          <stringProp name="filename"></stringProp>\n+        </ResultCollector>\n+        <hashTree/>\n+        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">\n+          <boolProp name="ResultCollector.error_logging">false</boolProp>\n+          <objProp>\n+            <name>saveConfig</name>\n+            <value class="SampleSaveConfiguration">\n+              <time>true</time>\n+              <latency>true</latency>\n+              <timestamp>true</timestamp>\n+              <success>true</success>\n+              <label>true</label>\n+              <code>true</code>\n+              <message>true</message>\n+              <threadName>true</threadName>\n+              <dataType>true</dataType>\n+              <encoding>false</encoding>\n+              <assertions>true</assertions>\n+              <subresults>true</subresults>\n+              <responseData>false</responseData>\n+              <samplerData>false</samplerData>\n+              <xml>false</xml>\n+              <fieldNames>false</fieldNames>\n+              <responseHeaders>false</responseHeaders>\n+              <requestHeaders>false</requestHeaders>\n+              <responseDataOnError>false</responseDataOnError>\n+              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>\n+              <assertionsResultsToSave>0</assertionsResultsToSave>\n+              <bytes>true</bytes>\n+              <threadCounts>true</threadCounts>\n+            </value>\n+          </objProp>\n+          <stringProp name="filename"></stringProp>\n+        </ResultCollector>\n+        <hashTree/>\n+        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">\n+          <boolProp name="ResultCollector.error_logging">false</boolProp>\n+          <objProp>\n+            <name>saveConfig</name>\n+            <value class="SampleSaveConfiguration">\n+              <time>true</time>\n+              <latency>true</latency>\n+              <timestamp>true</timestamp>\n+              <success>true</success>\n+              <label>true</label>\n+              <code>true</code>\n+              <message>true</message>\n+              <threadName>true</threadName>\n+              <dataType>true</dataType>\n+              <encoding>false</encoding>\n+              <assertions>true</assertions>\n+              <subresults>true</subresults>\n+              <responseData>false</responseData>\n+              <samplerData>false</samplerData>\n+              <xml>false</xml>\n+              <fieldNames>false</fieldNames>\n+              <responseHeaders>false</responseHeaders>\n+              <requestHeaders>false</requestHeaders>\n+              <responseDataOnError>false</responseDataOnError>\n+              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>\n+              <assertionsResultsToSave>0</assertionsResultsToSave>\n+              <bytes>true</bytes>\n+              <threadCounts>true</threadCounts>\n+            </value>\n+          </objProp>\n+          <stringProp name="filename"></stringProp>\n+        </ResultCollector>\n+        <hashTree/>\n+      </hashTree>\n       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Cleanup" enabled="true">\n         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex 202ba821..8ae68264 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -7,4 +7,4 @@ versions=versions\n \n [versions]\n plone.restapi =\n-# plone.namedfile = 5.3.0\n\\ No newline at end of file\n+# plone.namedfile = 5.3.0\ndiff --git a/src/plone/restapi/tests/image.jpeg b/src/plone/restapi/tests/image.jpeg\nnew file mode 100644\nindex 00000000..e6ee8168\nBinary files /dev/null and b/src/plone/restapi/tests/image.jpeg differ\ndiff --git a/src/plone/restapi/tests/performance.py b/src/plone/restapi/tests/performance.py\nindex 81ae1225..894bd6cd 100644\n--- a/src/plone/restapi/tests/performance.py\n+++ b/src/plone/restapi/tests/performance.py\n@@ -228,3 +228,326 @@ def step_setup_content(context):\n     portal.get("image-10mb").image = NamedBlobImage(\n         data=open(filename, "rb").read(), filename=filename\n     )\n+\n+    # Volto Page with images\n+    portal.invokeFactory("Folder", id="volto-page", title="Volto Page")\n+    volto_page = portal.get("volto-page")\n+    publish(volto_page)\n+    for i in range(1, 31):\n+        volto_page.invokeFactory(\n+            "Image", id="image{}".format(i), title="Image {}".format(i)\n+        )\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.jpeg")\n+        with open(image_file, "rb") as f:\n+            image_data = f.read()\n+        volto_page.get("image{}".format(i)).image = NamedBlobImage(\n+            data=image_data, contentType="image/jpeg", filename=u"image.jpeg"\n+        )\n+\n+    # Volto\n+    # portal.invokeFactory("Document", id="volto", title="Volto")\n+    # portal.volto.description = LOREMIPSUM_TEXT_PARAGRAPH\n+    volto_page.blocks = {\n+        "0d57ccc7-8ceb-4b8f-bf95-5919eb859925": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "4q33c",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "2172b929-70de-416b-b345-b98916a9726f": {\n+            "@type": "image",\n+            "alt": "jamie-street-PzGiZBpv72Y-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/jamie-street-pzgizbpv72y-unsplash.jpg",\n+        },\n+        "23dd130c-d90e-48d8-ab5a-9fb85a2136a4": {\n+            "@type": "image",\n+            "alt": "anastasia-petrova-xu2WYJek5AI-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/anastasia-petrova-xu2wyjek5ai-unsplash.jpg",\n+        },\n+        "23e99d38-da30-441b-8713-bbbad4344a85": {\n+            "@type": "image",\n+            "alt": "matt-artz-oSly6rQh7YA-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/matt-artz-osly6rqh7ya-unsplash.jpg",\n+        },\n+        "24b5b799-d755-4e43-97f5-e240d6b3b7df": {\n+            "@type": "image",\n+            "alt": "christopher-windus-ys_PVhkEC6c-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/christopher-windus-ys_pvhkec6c-unsplash.jpg",\n+        },\n+        "28b1c856-4ecd-4c43-bce5-9be127f29a34": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "c0mrv",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "2e005fdb-a109-4148-b78c-855dab1e83a9": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "b6u11",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "367aacb2-8124-43ce-8989-c9394b71ba97": {\n+            "@type": "image",\n+            "alt": "hector-j-rivas-QNc9tTNHRyI-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/hector-j-rivas-qnc9ttnhryi-unsplash.jpg",\n+        },\n+        "374bcb3f-d6c7-4ec0-9a26-aa9ee148a22a": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "6o8vv",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "38076104-d93a-4e25-b2b6-7917be41dd48": {\n+            "@type": "image",\n+            "alt": "jukan-tateisi-bJhT_8nbUA0-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/jukan-tateisi-bjht_8nbua0-unsplash.jpg",\n+        },\n+        "4664c4dc-89a2-4dd0-9267-ab4ff65af757": {\n+            "@type": "image",\n+            "alt": "max-kukurudziak-MedRVIJX2P0-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/max-kukurudziak-medrvijx2p0-unsplash.jpg",\n+        },\n+        "4b07582a-771a-4ce9-92bf-456e33134dd3": {\n+            "@type": "image",\n+            "alt": "daniel-cheung-cPF2nlWcMY4-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/daniel-cheung-cpf2nlwcmy4-unsplash.jpg",\n+        },\n+        "5c4e9474-0ccb-45a4-a91d-5eba411e43ef": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "98gs2",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "6ab1e289-f46a-495f-b07d-6967c436e369": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "f0er1",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "7471143d-70da-493c-b3c5-56a021407bed": {"@type": "title"},\n+        "7550e1c3-03b9-432a-bdd1-2d2f33ef6d68": {\n+            "@type": "image",\n+            "alt": "clem-onojeghuo-RfAEjh_J6e0-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/clem-onojeghuo-rfaejh_j6e0-unsplash.jpg",\n+        },\n+        "828b9212-2b98-4192-92bd-ac6acc08b01f": {\n+            "@type": "image",\n+            "alt": "daniel-von-appen-tb4heMa-ZRo-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/daniel-von-appen-tb4hema-zro-unsplash.jpg",\n+        },\n+        "82b244cc-25fd-41c7-91bd-d8aea6540b61": {\n+            "@type": "image",\n+            "alt": "cristina-gottardi-Pl8ZMtFiyi8-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/cristina-gottardi-pl8zmtfiyi8-unsplash.jpg",\n+        },\n+        "976bea21-fe53-477f-b1a8-47fd51d88492": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "3m6c5",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "9d1f39db-dfe5-4315-9306-1be2738e0068": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "4q22n",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "a1fafe33-f85f-46fa-919a-19111a8bde52": {\n+            "@type": "image",\n+            "alt": "doug-linstedt-q07oPCdhPlw-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/doug-linstedt-q07opcdhplw-unsplash.jpg",\n+        },\n+        "c513539d-3b75-4f36-baa3-7145324f79ff": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "1l2bg",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "cce67a5b-3dae-4e78-9352-7ccb24bb16a5": {\n+            "@type": "image",\n+            "alt": "christian-regg-jOicNGJIwZA-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/christian-regg-joicngjiwza-unsplash.jpg",\n+        },\n+        "d43abdc7-29c4-4cae-b3ed-443c87c449cd": {\n+            "@type": "text",\n+            "text": {\n+                "blocks": [\n+                    {\n+                        "data": {},\n+                        "depth": 0,\n+                        "entityRanges": [],\n+                        "inlineStyleRanges": [],\n+                        "key": "8iog5",\n+                        "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. ",\n+                        "type": "unstyled",\n+                    }\n+                ],\n+                "entityMap": {},\n+            },\n+        },\n+        "dc517784-5cfc-4cf8-8fad-15fd154cd43a": {\n+            "@type": "image",\n+            "alt": "john-barkiple-l090uFWoPaI-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/john-barkiple-l090ufwopai-unsplash.jpg",\n+        },\n+        "e44ec113-a62d-4913-89d0-ba8d7e50d248": {\n+            "@type": "image",\n+            "alt": "denny-muller-jLjfAWwHdB8-unsplash.jpg",\n+            "url": "http://localhost:8080/Plone/page/denny-muller-jljfawwhdb8-unsplash.jpg",\n+        },\n+    }\n+    volto_page.blocks_layout = {\n+        "items": [\n+            "7471143d-70da-493c-b3c5-56a021407bed",\n+            "7550e1c3-03b9-432a-bdd1-2d2f33ef6d68",\n+            "23dd130c-d90e-48d8-ab5a-9fb85a2136a4",\n+            "cce67a5b-3dae-4e78-9352-7ccb24bb16a5",\n+            "24b5b799-d755-4e43-97f5-e240d6b3b7df",\n+            "82b244cc-25fd-41c7-91bd-d8aea6540b61",\n+            "4b07582a-771a-4ce9-92bf-456e33134dd3",\n+            "828b9212-2b98-4192-92bd-ac6acc08b01f",\n+            "e44ec113-a62d-4913-89d0-ba8d7e50d248",\n+            "a1fafe33-f85f-46fa-919a-19111a8bde52",\n+            "367aacb2-8124-43ce-8989-c9394b71ba97",\n+            "2172b929-70de-416b-b345-b98916a9726f",\n+            "dc517784-5cfc-4cf8-8fad-15fd154cd43a",\n+            "38076104-d93a-4e25-b2b6-7917be41dd48",\n+            "23e99d38-da30-441b-8713-bbbad4344a85",\n+            "4664c4dc-89a2-4dd0-9267-ab4ff65af757",\n+            "374bcb3f-d6c7-4ec0-9a26-aa9ee148a22a",\n+            "c513539d-3b75-4f36-baa3-7145324f79ff",\n+            "28b1c856-4ecd-4c43-bce5-9be127f29a34",\n+            "6ab1e289-f46a-495f-b07d-6967c436e369",\n+            "2e005fdb-a109-4148-b78c-855dab1e83a9",\n+            "d43abdc7-29c4-4cae-b3ed-443c87c449cd",\n+            "5c4e9474-0ccb-45a4-a91d-5eba411e43ef",\n+            "976bea21-fe53-477f-b1a8-47fd51d88492",\n+            "9d1f39db-dfe5-4315-9306-1be2738e0068",\n+            "0d57ccc7-8ceb-4b8f-bf95-5919eb859925",\n+        ]\n+    }\n+    publish(volto_page)\n+    volto_page.reindexObject()\n+\n+    # # add images\n+    # from os import listdir\n+    # from os.path import isfile, join\n+\n+    # currentdir = os.path.dirname(__file__)\n+    # base_image_path = os.path.join(currentdir, "performance")\n+    # filenames = [\n+    #     f for f in listdir(base_image_path) if isfile(join(base_image_path, f))\n+    # ]\n+    # for filename in filenames:\n+    #     imagepath = os.path.join(base_image_path, filename)\n+    #     volto_page.invokeFactory("Image", id=filename, title=filename)\n+    #     import sys\n+    #     import pdb\n+\n+    #     for attr in ("stdin", "stdout", "stderr"):\n+    #         setattr(sys, attr, getattr(sys, "__%s__" % attr))\n+    #     pdb.set_trace()\n+    #     portal.volto[filename].image = NamedBlobImage(\n+    #         data=open(filename, "r").read(),\n+    #         filename=imagepath,\n+    #         contentType="image/jpeg",\n+    #     )\n'

