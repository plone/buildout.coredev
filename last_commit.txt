Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2020-06-30T12:06:35+02:00
Author: Vincent Fretin (vincentfretin) <vincent.fretin@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/5f0a7f354f9f452e7669850bd5197d864dd8895e

Internationalize selectable columns in collection form and tabular view on folder and collection

Files changed:
A news/559.bugfix
M plone/app/contenttypes/behaviors/collection.py
M plone/app/contenttypes/behaviors/configure.zcml
M plone/app/contenttypes/browser/collection.py
M plone/app/contenttypes/browser/folder.py
M plone/app/contenttypes/browser/templates/listing_tabular.pt
M plone/app/contenttypes/configure.zcml
M plone/app/contenttypes/tests/test_collection.py
M setup.py

b'diff --git a/news/559.bugfix b/news/559.bugfix\nnew file mode 100644\nindex 00000000..cf7ba409\n--- /dev/null\n+++ b/news/559.bugfix\n@@ -0,0 +1,3 @@\n+Internationalize selectable columns in collection and tabular view.\n+This fixes https://github.com/plone/Products.CMFPlone/issues/2597\n+[vincentfretin]\ndiff --git a/plone/app/contenttypes/behaviors/collection.py b/plone/app/contenttypes/behaviors/collection.py\nindex 234bac44..1d1f2d50 100644\n--- a/plone/app/contenttypes/behaviors/collection.py\n+++ b/plone/app/contenttypes/behaviors/collection.py\n@@ -13,26 +13,22 @@\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.deferredimport import deprecated\n from zope.interface import implementer\n from zope.interface import provider\n from zope.schema.interfaces import IVocabularyFactory\n-from zope.schema.vocabulary import SimpleTerm\n-from zope.schema.vocabulary import SimpleVocabulary\n \n \n-@implementer(IVocabularyFactory)\n-class MetaDataFieldsVocabulary(object):\n+deprecated(\n+    "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n+    MetaDataFieldsVocabulary=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabulary\',\n+)\n \n-    def __call__(self, context):\n-        cat = getToolByName(context, \'portal_catalog\')\n-        items = [\n-            SimpleTerm(column, column, column)\n-            for column in cat.schema()\n-        ]\n-        return SimpleVocabulary(items)\n \n-\n-MetaDataFieldsVocabularyFactory = MetaDataFieldsVocabulary()\n+deprecated(\n+    "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n+    MetaDataFieldsVocabularyFactory=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabularyFactory\',\n+)\n \n \n @provider(IFormFieldProvider, ISyndicatable)\n@@ -84,7 +80,7 @@ class ICollection(model.Schema):\n                       u"\'Tabular view\' is selected in the display menu."),\n         default=[\'Title\', \'Creator\', \'Type\', \'ModificationDate\'],\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.contenttypes.metadatafields\'),\n+            vocabulary=\'plone.app.vocabularies.MetadataFields\'),\n         required=False,\n     )\n \n@@ -130,7 +126,7 @@ def selectedViewFields(self):\n         """\n         _mapping = {}\n         vocab = getUtility(IVocabularyFactory,\n-                           name=\'plone.app.contenttypes.metadatafields\')\n+                           name=\'plone.app.vocabularies.MetadataFields\')\n         for field in vocab(self.context):\n             _mapping[field.value] = (field.value, field.title)\n         ret = [_mapping[field] for field in self.customViewFields]\ndiff --git a/plone/app/contenttypes/behaviors/configure.zcml b/plone/app/contenttypes/behaviors/configure.zcml\nindex a5136858..92560d5e 100644\n--- a/plone/app/contenttypes/behaviors/configure.zcml\n+++ b/plone/app/contenttypes/behaviors/configure.zcml\n@@ -72,8 +72,10 @@\n     template="richtext_gettext.pt"\n     />\n \n+  <!-- Register the plone.app.vocabularies.MetadataFields under the old\n+       name for backward compatibility. -->\n   <utility\n-      component=".collection.MetaDataFieldsVocabularyFactory"\n+      component="plone.app.vocabularies.metadatafields.MetaDataFieldsVocabularyFactory"\n       name="plone.app.contenttypes.metadatafields" />\n \n   <adapter factory=".collection.CollectionFeed"\ndiff --git a/plone/app/contenttypes/browser/collection.py b/plone/app/contenttypes/browser/collection.py\nindex a41b6959..09559831 100644\n--- a/plone/app/contenttypes/browser/collection.py\n+++ b/plone/app/contenttypes/browser/collection.py\n@@ -77,7 +77,7 @@ def album_folders(self):\n         return self._album_results[\'folders\']\n \n     def tabular_fields(self):\n-        """Returns a list of all metadata fields from the catalog that were\n+        """Return a list of all metadata fields from the catalog that were\n            selected.\n         """\n         context = aq_inner(self.context)\ndiff --git a/plone/app/contenttypes/browser/folder.py b/plone/app/contenttypes/browser/folder.py\nindex 99fdd13a..644bd468 100644\n--- a/plone/app/contenttypes/browser/folder.py\n+++ b/plone/app/contenttypes/browser/folder.py\n@@ -3,6 +3,7 @@\n from Acquisition import aq_inner\n from plone.app.contenttypes import _\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n+from plone.app.vocabularies.metadatafields import get_field_label\n from plone.app.contenttypes.interfaces import IFolder\n from plone.app.contenttypes.interfaces import IImage\n from plone.event.interfaces import IEvent\n@@ -167,6 +168,12 @@ def tabular_fields(self):\n             ret.append(\'ModificationDate\')\n         return ret\n \n+    def tabular_field_label(self, field):\n+        """Return the internationalized label (Message object) corresponding\n+           to the field.\n+        """\n+        return get_field_label(field)\n+\n     def tabular_fielddata(self, item, fieldname):\n         value = getattr(item, fieldname, \'\')\n         if safe_callable(value):\ndiff --git a/plone/app/contenttypes/browser/templates/listing_tabular.pt b/plone/app/contenttypes/browser/templates/listing_tabular.pt\nindex b9b44218..6ba21d1a 100644\n--- a/plone/app/contenttypes/browser/templates/listing_tabular.pt\n+++ b/plone/app/contenttypes/browser/templates/listing_tabular.pt\n@@ -37,7 +37,7 @@\n               <th class="nosort"\n                   i18n:translate=""\n                   tal:repeat="field view/tabular_fields"\n-                  tal:content="field">Field name</th>\n+                  tal:content="python:view.tabular_field_label(field)">Field name</th>\n             </tr>\n           </thead>\n           <tbody tal:define="portal context/@@plone_portal_state/portal;\ndiff --git a/plone/app/contenttypes/configure.zcml b/plone/app/contenttypes/configure.zcml\nindex c26d2c0f..3399fbc3 100644\n--- a/plone/app/contenttypes/configure.zcml\n+++ b/plone/app/contenttypes/configure.zcml\n@@ -24,6 +24,7 @@\n   <include package="plone.app.querystring" />\n   <include package="plone.app.relationfield" />\n   <include package="plone.app.versioningbehavior" />\n+  <include package="plone.app.vocabularies" />\n   <include package="plone.app.z3cform" />\n \n   <include file="profiles.zcml" />\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 5f3569fc..a4bafb35 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -64,12 +64,12 @@ def test_results(self):\n     def test_bbb_selectedViewFields(self):\n         self.assertEqual(\n             self.collection.selectedViewFields(),\n-            [(\'Title\', \'Title\'), (\'Creator\', \'Creator\'),\n-             (\'Type\', \'Type\'), (\'ModificationDate\', \'ModificationDate\')]\n+            [(\'Title\', u\'Title\'), (\'Creator\', u\'Creator\'),\n+             (\'Type\', u\'Type\'), (\'ModificationDate\', u\'Last modified\')]\n         )\n         self.collection.customViewFields = [\'Title\', \'Description\']\n         self.assertEqual(self.collection.selectedViewFields(),\n-                         [(\'Title\', \'Title\'), (\'Description\', \'Description\')])\n+                         [(\'Title\', u\'Title\'), (\'Description\', u\'Description\')])\n \n     def test_bbb_setQuery(self):\n         self.collection.setQuery(query)\ndiff --git a/setup.py b/setup.py\nindex d3b07588..87e8bd50 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -55,6 +55,7 @@ def read(*rnames):\n           \'plone.app.relationfield\',\n           \'plone.namedfile [blobs] >= 4.2.0\',\n           \'plone.app.versioningbehavior\',\n+          \'plone.app.vocabularies>4.1.2\',\n           \'plone.app.lockingbehavior\',\n           \'plone.behavior >= 1.3.0\',\n           \'pytz\',\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2020-06-30T16:27:45+02:00
Author: Vincent Fretin (vincentfretin) <vincent.fretin@gmail.com>
Commit: https://github.com/plone/plone.app.contenttypes/commit/19ae7eb7850c6f2034ae475d4cb83475f1e951ec

Merge pull request #559 from plone/fix-i18n-columns-title

Internationalize selectable columns in collection and tabular view

Files changed:
A news/559.bugfix
M plone/app/contenttypes/behaviors/collection.py
M plone/app/contenttypes/behaviors/configure.zcml
M plone/app/contenttypes/browser/collection.py
M plone/app/contenttypes/browser/folder.py
M plone/app/contenttypes/browser/templates/listing_tabular.pt
M plone/app/contenttypes/configure.zcml
M plone/app/contenttypes/tests/test_collection.py
M setup.py

b'diff --git a/news/559.bugfix b/news/559.bugfix\nnew file mode 100644\nindex 00000000..cf7ba409\n--- /dev/null\n+++ b/news/559.bugfix\n@@ -0,0 +1,3 @@\n+Internationalize selectable columns in collection and tabular view.\n+This fixes https://github.com/plone/Products.CMFPlone/issues/2597\n+[vincentfretin]\ndiff --git a/plone/app/contenttypes/behaviors/collection.py b/plone/app/contenttypes/behaviors/collection.py\nindex 234bac44..1d1f2d50 100644\n--- a/plone/app/contenttypes/behaviors/collection.py\n+++ b/plone/app/contenttypes/behaviors/collection.py\n@@ -13,26 +13,22 @@\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n+from zope.deferredimport import deprecated\n from zope.interface import implementer\n from zope.interface import provider\n from zope.schema.interfaces import IVocabularyFactory\n-from zope.schema.vocabulary import SimpleTerm\n-from zope.schema.vocabulary import SimpleVocabulary\n \n \n-@implementer(IVocabularyFactory)\n-class MetaDataFieldsVocabulary(object):\n+deprecated(\n+    "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n+    MetaDataFieldsVocabulary=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabulary\',\n+)\n \n-    def __call__(self, context):\n-        cat = getToolByName(context, \'portal_catalog\')\n-        items = [\n-            SimpleTerm(column, column, column)\n-            for column in cat.schema()\n-        ]\n-        return SimpleVocabulary(items)\n \n-\n-MetaDataFieldsVocabularyFactory = MetaDataFieldsVocabulary()\n+deprecated(\n+    "Import from plone.app.vocabularies.metadatafields instead (this compatibility layer will be removed in Plone 6)",\n+    MetaDataFieldsVocabularyFactory=\'plone.app.vocabularies.metadatafields:MetaDataFieldsVocabularyFactory\',\n+)\n \n \n @provider(IFormFieldProvider, ISyndicatable)\n@@ -84,7 +80,7 @@ class ICollection(model.Schema):\n                       u"\'Tabular view\' is selected in the display menu."),\n         default=[\'Title\', \'Creator\', \'Type\', \'ModificationDate\'],\n         value_type=schema.Choice(\n-            vocabulary=\'plone.app.contenttypes.metadatafields\'),\n+            vocabulary=\'plone.app.vocabularies.MetadataFields\'),\n         required=False,\n     )\n \n@@ -130,7 +126,7 @@ def selectedViewFields(self):\n         """\n         _mapping = {}\n         vocab = getUtility(IVocabularyFactory,\n-                           name=\'plone.app.contenttypes.metadatafields\')\n+                           name=\'plone.app.vocabularies.MetadataFields\')\n         for field in vocab(self.context):\n             _mapping[field.value] = (field.value, field.title)\n         ret = [_mapping[field] for field in self.customViewFields]\ndiff --git a/plone/app/contenttypes/behaviors/configure.zcml b/plone/app/contenttypes/behaviors/configure.zcml\nindex a5136858..92560d5e 100644\n--- a/plone/app/contenttypes/behaviors/configure.zcml\n+++ b/plone/app/contenttypes/behaviors/configure.zcml\n@@ -72,8 +72,10 @@\n     template="richtext_gettext.pt"\n     />\n \n+  <!-- Register the plone.app.vocabularies.MetadataFields under the old\n+       name for backward compatibility. -->\n   <utility\n-      component=".collection.MetaDataFieldsVocabularyFactory"\n+      component="plone.app.vocabularies.metadatafields.MetaDataFieldsVocabularyFactory"\n       name="plone.app.contenttypes.metadatafields" />\n \n   <adapter factory=".collection.CollectionFeed"\ndiff --git a/plone/app/contenttypes/browser/collection.py b/plone/app/contenttypes/browser/collection.py\nindex a41b6959..09559831 100644\n--- a/plone/app/contenttypes/browser/collection.py\n+++ b/plone/app/contenttypes/browser/collection.py\n@@ -77,7 +77,7 @@ def album_folders(self):\n         return self._album_results[\'folders\']\n \n     def tabular_fields(self):\n-        """Returns a list of all metadata fields from the catalog that were\n+        """Return a list of all metadata fields from the catalog that were\n            selected.\n         """\n         context = aq_inner(self.context)\ndiff --git a/plone/app/contenttypes/browser/folder.py b/plone/app/contenttypes/browser/folder.py\nindex 99fdd13a..644bd468 100644\n--- a/plone/app/contenttypes/browser/folder.py\n+++ b/plone/app/contenttypes/browser/folder.py\n@@ -3,6 +3,7 @@\n from Acquisition import aq_inner\n from plone.app.contenttypes import _\n from plone.app.contenttypes.behaviors.leadimage import ILeadImage\n+from plone.app.vocabularies.metadatafields import get_field_label\n from plone.app.contenttypes.interfaces import IFolder\n from plone.app.contenttypes.interfaces import IImage\n from plone.event.interfaces import IEvent\n@@ -167,6 +168,12 @@ def tabular_fields(self):\n             ret.append(\'ModificationDate\')\n         return ret\n \n+    def tabular_field_label(self, field):\n+        """Return the internationalized label (Message object) corresponding\n+           to the field.\n+        """\n+        return get_field_label(field)\n+\n     def tabular_fielddata(self, item, fieldname):\n         value = getattr(item, fieldname, \'\')\n         if safe_callable(value):\ndiff --git a/plone/app/contenttypes/browser/templates/listing_tabular.pt b/plone/app/contenttypes/browser/templates/listing_tabular.pt\nindex b9b44218..6ba21d1a 100644\n--- a/plone/app/contenttypes/browser/templates/listing_tabular.pt\n+++ b/plone/app/contenttypes/browser/templates/listing_tabular.pt\n@@ -37,7 +37,7 @@\n               <th class="nosort"\n                   i18n:translate=""\n                   tal:repeat="field view/tabular_fields"\n-                  tal:content="field">Field name</th>\n+                  tal:content="python:view.tabular_field_label(field)">Field name</th>\n             </tr>\n           </thead>\n           <tbody tal:define="portal context/@@plone_portal_state/portal;\ndiff --git a/plone/app/contenttypes/configure.zcml b/plone/app/contenttypes/configure.zcml\nindex c26d2c0f..3399fbc3 100644\n--- a/plone/app/contenttypes/configure.zcml\n+++ b/plone/app/contenttypes/configure.zcml\n@@ -24,6 +24,7 @@\n   <include package="plone.app.querystring" />\n   <include package="plone.app.relationfield" />\n   <include package="plone.app.versioningbehavior" />\n+  <include package="plone.app.vocabularies" />\n   <include package="plone.app.z3cform" />\n \n   <include file="profiles.zcml" />\ndiff --git a/plone/app/contenttypes/tests/test_collection.py b/plone/app/contenttypes/tests/test_collection.py\nindex 5f3569fc..a4bafb35 100644\n--- a/plone/app/contenttypes/tests/test_collection.py\n+++ b/plone/app/contenttypes/tests/test_collection.py\n@@ -64,12 +64,12 @@ def test_results(self):\n     def test_bbb_selectedViewFields(self):\n         self.assertEqual(\n             self.collection.selectedViewFields(),\n-            [(\'Title\', \'Title\'), (\'Creator\', \'Creator\'),\n-             (\'Type\', \'Type\'), (\'ModificationDate\', \'ModificationDate\')]\n+            [(\'Title\', u\'Title\'), (\'Creator\', u\'Creator\'),\n+             (\'Type\', u\'Type\'), (\'ModificationDate\', u\'Last modified\')]\n         )\n         self.collection.customViewFields = [\'Title\', \'Description\']\n         self.assertEqual(self.collection.selectedViewFields(),\n-                         [(\'Title\', \'Title\'), (\'Description\', \'Description\')])\n+                         [(\'Title\', u\'Title\'), (\'Description\', u\'Description\')])\n \n     def test_bbb_setQuery(self):\n         self.collection.setQuery(query)\ndiff --git a/setup.py b/setup.py\nindex d3b07588..87e8bd50 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -55,6 +55,7 @@ def read(*rnames):\n           \'plone.app.relationfield\',\n           \'plone.namedfile [blobs] >= 4.2.0\',\n           \'plone.app.versioningbehavior\',\n+          \'plone.app.vocabularies>4.1.2\',\n           \'plone.app.lockingbehavior\',\n           \'plone.behavior >= 1.3.0\',\n           \'pytz\',\n'

