Repository: plone.restapi


Branch: refs/heads/master
Date: 2023-05-22T22:27:56-07:00
Author: Katja Süss (ksuess) <k.suess@rohberg.ch>
Commit: https://github.com/plone/plone.restapi/commit/880e98321b0120954c9b9ab88c9ea689df5ad0ce

Add universal relations service (#1602)

* Query relations with universal endpoint.

* Catch Products.CMFPlone.relationhelper ImportError

* Remove unused imports

* Add option to restrict number of queried relations.

* Rebuild relations

* @relations: onlyBroken: Return broken relations

* Update relations.md

* Add tests for relations

* Draft/placeholder: provide vocabulary query of relation

* Provide vocabulary query of relation for …

fields with registered named StaticCatalogVocabularyQuery

* Add relations

* Modification of relations only if plone.api.relation available

* Delete relations.

Now some more tests and it's done!

* flake

* Create 1432.feature

* Add UID to relationvalue_converter summary

Support RelationList field with named StaticCatalogVocabulary and SelectWidget

* Update resps

* Fix exceptions

* Update resps

* Restore make_summary

* Update tests

* More tests

* Delete relations by relation name, source, or target, or combination

* Remove debug logging

* Fix f-strings

* Fix error messages

* Update test_relations_get.py: test if relation stuff available

* Update test_relations_get.py

* Delete test_relations_get.py

* Test: Is vocabulary query included in response

Register named StaticCatalogVocabulary

* Moooree tests

* How to use @relations service to query or modify relations

* Update relations.md

* broken link

* Delete by relation name

* more tests for deleting relations

* Test for anonymous

* Use api.content.get with authorization check included

* Revert "Use api.content.get with authorization check included"

No plone.api, except in tests!

* make flake shake

* Update docu

* prettier

* Provide querying by source and target (SearchableText or path)

Assures relations control panel can handle many relations

* Fix required permissions in documentation

* Log errors on creating relations

* Log which source or target not found

* myst fix

* Update upgrade-guide.md

* Apply suggestions from code review

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Apply suggestions from code review

Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;
Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Log source, target if not found. Log and reply with requested source, target, relation

* Do not remove image info from summary of relation source and target on querying

* Run black

* Enhance response on failure on creating or deleting relation

* Fix error type

Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;

* Amend documentation of querying options

* Deleting relations: Rely on plone.api

* Fix documentation

* Update delete.py

* Apply suggestions from code review

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Apply suggestions from code review

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Update response code and content on deleting relations

* Update format of @relations GET

* Request to rebuild relations now POST with /rebuild

* run black

* black

* Update docs description as suggested by Steve

* Update response format in onlyBroken docs, and remove old unused example

* Change relations -&gt; stats in the get_stats response

* Fix tests according to 'Change relations -&gt; stats in the get_stats response'

* Uncomment "delete by relation name" after release of plone.api 2.0.2

* Respond with "Unprocessable Entity" if creating fails

* docu more precise

* run black

* Apply suggestions from code review

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Apply suggestions from code review

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

* Precise documentation on deleting list of relations

A list of relations can be deleted in one request. Maybe the wording is not optimal 'list of single relations'

* run black

* Fix format for broken relations according format for relations

* run black

* Apply docs suggestions from code review

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

---------

Co-authored-by: Alin Voinea &lt;contact@avoinea.com&gt;
Co-authored-by: Timo Stollenwerk &lt;tisto@users.noreply.github.com&gt;
Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;
Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;
Co-authored-by: Érico Andrei &lt;ericof@gmail.com&gt;

Files changed:
A docs/source/endpoints/relations.md
A news/1432.feature
A src/plone/restapi/services/relations/__init__.py
A src/plone/restapi/services/relations/add.py
A src/plone/restapi/services/relations/configure.zcml
A src/plone/restapi/services/relations/delete.py
A src/plone/restapi/services/relations/get.py
A src/plone/restapi/tests/http-examples/relations_catalog_get_stats.req
A src/plone/restapi/tests/http-examples/relations_catalog_get_stats.resp
A src/plone/restapi/tests/http-examples/relations_del.req
A src/plone/restapi/tests/http-examples/relations_del.resp
A src/plone/restapi/tests/http-examples/relations_del_anonymous.req
A src/plone/restapi/tests/http-examples/relations_del_anonymous.resp
A src/plone/restapi/tests/http-examples/relations_del_combi.req
A src/plone/restapi/tests/http-examples/relations_del_combi.resp
A src/plone/restapi/tests/http-examples/relations_del_failure.req
A src/plone/restapi/tests/http-examples/relations_del_failure.resp
A src/plone/restapi/tests/http-examples/relations_del_path_uid.req
A src/plone/restapi/tests/http-examples/relations_del_path_uid.resp
A src/plone/restapi/tests/http-examples/relations_del_relationname.req
A src/plone/restapi/tests/http-examples/relations_del_relationname.resp
A src/plone/restapi/tests/http-examples/relations_del_source.req
A src/plone/restapi/tests/http-examples/relations_del_source.resp
A src/plone/restapi/tests/http-examples/relations_del_target.req
A src/plone/restapi/tests/http-examples/relations_del_target.resp
A src/plone/restapi/tests/http-examples/relations_get_relationname.req
A src/plone/restapi/tests/http-examples/relations_get_relationname.resp
A src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.req
A src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.resp
A src/plone/restapi/tests/http-examples/relations_get_source_and_relation.req
A src/plone/restapi/tests/http-examples/relations_get_source_and_relation.resp
A src/plone/restapi/tests/http-examples/relations_get_source_anonymous.req
A src/plone/restapi/tests/http-examples/relations_get_source_anonymous.resp
A src/plone/restapi/tests/http-examples/relations_get_source_by_path.req
A src/plone/restapi/tests/http-examples/relations_get_source_by_path.resp
A src/plone/restapi/tests/http-examples/relations_get_source_by_uid.req
A src/plone/restapi/tests/http-examples/relations_get_source_by_uid.resp
A src/plone/restapi/tests/http-examples/relations_get_target.req
A src/plone/restapi/tests/http-examples/relations_get_target.resp
A src/plone/restapi/tests/http-examples/relations_post.req
A src/plone/restapi/tests/http-examples/relations_post.resp
A src/plone/restapi/tests/http-examples/relations_post_anonyous.req
A src/plone/restapi/tests/http-examples/relations_post_anonyous.resp
A src/plone/restapi/tests/http-examples/relations_post_failure.req
A src/plone/restapi/tests/http-examples/relations_post_failure.resp
A src/plone/restapi/tests/http-examples/relations_post_with_uid.req
A src/plone/restapi/tests/http-examples/relations_post_with_uid.resp
A src/plone/restapi/tests/http-examples/relations_rebuild.req
A src/plone/restapi/tests/http-examples/relations_rebuild.resp
A src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.req
A src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.resp
A src/plone/restapi/tests/test_documentation_relations.py
M docs/source/endpoints/index.md
M src/plone/restapi/services/configure.zcml

b'diff --git a/docs/source/endpoints/index.md b/docs/source/endpoints/index.md\nindex 82d2b0c35..975d6fda2 100644\n--- a/docs/source/endpoints/index.md\n+++ b/docs/source/endpoints/index.md\n@@ -41,6 +41,7 @@ principals\n querystring\n querystringsearch\n registry\n+relations\n roles\n searching\n system\ndiff --git a/docs/source/endpoints/relations.md b/docs/source/endpoints/relations.md\nnew file mode 100644\nindex 000000000..2e60bf84e\n--- /dev/null\n+++ b/docs/source/endpoints/relations.md\n@@ -0,0 +1,314 @@\n+---\n+myst:\n+  html_meta:\n+    "description": "Create, query, and delete relations between content items with the relations endpoint."\n+    "property=og:description": "Create, query, and delete relations between content items with the relations endpoint."\n+    "property=og:title": "Relations"\n+    "keywords": "Plone, plone.restapi, REST, API, relations, service, endpoint"\n+---\n+\n+(restapi-relations-label)=\n+\n+# Relations\n+\n+Plone\'s relations represent binary relationships between content objects.\n+\n+A single relation is defined by source, target, and relation name.\n+\n+You can define relations either with content type schema fields `RelationChoice` or `RelationList`, or with types `isReferencing` or `iterate-working-copy`.\n+\n+- Relations based on fields of a content type schema are editable by users.\n+- The relations `isReferencing` (block text links to a Plone content object) and `iterate-working-copy` (working copy is enabled and the content object is a working copy) are not editable.\n+  They are created and deleted with links in text, respectively creating and deleting working copies.\n+\n+You can create, query, and delete relations by interacting through the `@relations` endpoint on the site root.\n+Querying relations with the `@relations` endpoint requires the `zope2.View` permission on both the source and target objects.\n+Therefore results include relations if and only if both the source and target are accessible by the querying user.\n+Creating and deleting relations requires `zope2.View` permission on the target object and `cmf.ModifyPortalContent` permission on the source object.\n+\n+(restapi-relations-getting-statistics-for-all-relations-label)=\n+\n+## Getting statistics for all relations\n+\n+The call without any parameters returns statistics on all existing relations to which the user has access.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_catalog_get_stats.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_catalog_get_stats.resp\n+:language: http\n+```\n+\n+(restapi-relations-querying-relations-label)=\n+\n+## Querying relations\n+\n+You can query relations by a single source, target, or relation type.\n+Combinations are allowed.\n+The source and target must be either a UID or path.\n+\n+Queried relations require the `View` permission on the source and target.\n+If the user lacks permission to access these relations, then they are omitted from the query results.\n+\n+The relations are grouped by relation name, source, and target, and are provided in a summarized format.\n+\n+\n+Query relations of a **relation type**:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_get_relationname.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_get_relationname.resp\n+:language: http\n+```\n+\n+Query relations of a **source** object by path:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_get_source_by_path.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_get_source_by_path.resp\n+:language: http\n+```\n+\n+Query relations of a **source** object by UID:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_get_source_by_uid.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_get_source_by_uid.resp\n+:language: http\n+```\n+\n+Query relations by **relation name and source**:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_get_source_and_relation.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_get_source_and_relation.resp\n+:language: http\n+```\n+\n+Query relations to a **target**:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_get_target.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_get_target.resp\n+:language: http\n+```\n+\n+### Refining\n+\n+Querying can be further refined by applying the `query_target` search parameter to restrict the source or target to either contain a search string or be located under a path.\n+\n+Search string example:\n+\n+```\n+/@relations?relation=comprisesComponentPart&query_target=wheel\n+```\n+\n+Path example:\n+\n+```\n+/@relations?relation=comprisesComponentPart&query_target=/inside/garden\n+```\n+\n+### Limit the results\n+\n+Limit the number of results by `max` to, for example, at most 100 results:\n+\n+```\n+/@relations?relation=comprisesComponentPart&source=/documents/doc-1&max=100\n+```\n+\n+### Only broken relations\n+\n+Retrieve items with broken relations by querying with `onlyBroken`:\n+\n+```\n+/@relations?onlyBroken=true\n+```\n+\n+This returns a JSON object, for example:\n+\n+```json\n+{\n+  "@id": "http://localhost:55001/plone/@relations?onlyBroken=true",\n+  "relations": {\n+    "relatedItems": {\n+      "items": [\n+        "http://localhost:55001/plone/document-2",\n+      ],\n+      "items_total": 1\n+    }\n+  }\n+}\n+```\n+\n+\n+(restapi-relations-creating-relations-label)=\n+\n+## Creating relations\n+\n+You can create relations by providing a list of the source, target, and name of the relation.\n+The source and target must be either a UID or path.\n+\n+If the relation is based on a `RelationChoice` or `RelationList` field of the source object, the value of the field is updated accordingly.\n+\n+Create a relation by **path**:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_post.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_post.resp\n+:language: http\n+```\n+\n+Create a relation by **UID**:\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_post_with_uid.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_post_with_uid.resp\n+:language: http\n+```\n+\n+If either the source or target do not exist, then an attempt to create a relation will fail, and will return a `422 Unprocessable Entity` response.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_post_failure.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_post_failure.resp\n+:language: http\n+```\n+\n+(restapi-relations-deleting-relations-label)=\n+\n+## Deleting relations\n+\n+You can delete relations by relation name, source object, target object, or a combination of these.\n+You can also delete relations by providing a list of relations.\n+\n+If a deleted relation is based on a `RelationChoice` or `RelationList` field, the value of the field is removed or updated accordingly on the source object.\n+\n+### Delete a list of relations\n+\n+You can delete relations by either UID or path.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_del_path_uid.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_del_path_uid.resp\n+:language: http\n+```\n+\n+If either the source or target do not exist, then an attempt to delete a relation will fail, and will return a `422 Unprocessable Entity` response.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_del_failure.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_del_failure.resp\n+:language: http\n+```\n+\n+### Delete relations by relation name\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_del_relationname.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_del_relationname.resp\n+:language: http\n+```\n+\n+### Delete relations by source\n+\n+You can delete relations by either source UID or path.\n+\n+The following example shows how to delete a relation by source path.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_del_source.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_del_source.resp\n+:language: http\n+```\n+\n+### Delete relations by target\n+\n+You can delete relations by either target UID or path.\n+\n+The following example shows how to delete a relation by target path.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_del_target.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_del_target.resp\n+:language: http\n+```\n+\n+### Delete relations by a combination of source, target, and relation name\n+\n+You can delete relations by a combination of either any two of their relation name, source, and target, or a combination of all three.\n+In the following example, you would delete a relation by its relation name and target.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_del_combi.req\n+```\n+\n+```{literalinclude} ../../../src/plone/restapi/tests/http-examples/relations_del_combi.resp\n+:language: http\n+```\n+\n+\n+## Fix relations\n+\n+Broken relations can be fixed by releasing and re-indexing them.\n+A successfully fixed relation will return a `204 No Content` response.\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_rebuild.req\n+```\n+\n+In rare cases, you may need to flush the `intIds`.\n+You can rebuild relations by flushing the `intIds` with the following HTTP POST request.\n+\n+```{warning}\n+If your code relies on `intIds`, you should take caution and think carefully before you flush them.\n+```\n+\n+\n+```{eval-rst}\n+..  http:example:: curl httpie python-requests\n+    :request: ../../../src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.req\n+```\ndiff --git a/news/1432.feature b/news/1432.feature\nnew file mode 100644\nindex 000000000..abcc20493\n--- /dev/null\n+++ b/news/1432.feature\n@@ -0,0 +1 @@\n+Create relations service. Query, add, delete. @ksuess\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 0af1402ec..1fd3c0568 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -30,6 +30,7 @@\n   <include package=".querystring" />\n   <include package=".querystringsearch" />\n   <include package=".registry" />\n+  <include package=".relations" />\n   <include package=".roles" />\n   <include package=".rules" />\n   <include package=".search" />\ndiff --git a/src/plone/restapi/services/relations/__init__.py b/src/plone/restapi/services/relations/__init__.py\nnew file mode 100644\nindex 000000000..e5c9bfc3f\n--- /dev/null\n+++ b/src/plone/restapi/services/relations/__init__.py\n@@ -0,0 +1,36 @@\n+try:\n+    from plone.api.relation import create as api_relation_create\n+    from plone.api.relation import delete as api_relation_delete\n+except ImportError:\n+    api_relation_create = None\n+    api_relation_delete = None\n+\n+from plone.app.uuid.utils import uuidToObject\n+from Products.CMFCore.DynamicType import DynamicType\n+from zope.component.hooks import getSite\n+\n+\n+def plone_api_content_get(path=None, UID=None):\n+    """Get an object.\n+\n+    copy pasted from plone.api\n+    """\n+    if path:\n+        site = getSite()\n+        site_absolute_path = "/".join(site.getPhysicalPath())\n+        if not path.startswith("{path}".format(path=site_absolute_path)):\n+            path = "{site_path}{relative_path}".format(\n+                site_path=site_absolute_path,\n+                relative_path=path,\n+            )\n+        try:\n+            content = site.restrictedTraverse(path)\n+        except (KeyError, AttributeError):\n+            return None  # When no object is found don\'t raise an error\n+        else:\n+            # Only return a content if it implements DynamicType,\n+            # which is true for Dexterity content and Comment (plone.app.discussion)\n+            return content if isinstance(content, DynamicType) else None\n+\n+    elif UID:\n+        return uuidToObject(UID)\ndiff --git a/src/plone/restapi/services/relations/add.py b/src/plone/restapi/services/relations/add.py\nnew file mode 100644\nindex 000000000..a86eac073\n--- /dev/null\n+++ b/src/plone/restapi/services/relations/add.py\n@@ -0,0 +1,129 @@\n+from AccessControl.SecurityManagement import getSecurityManager\n+from plone import api\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.services import Service\n+from plone.restapi.services.relations import plone_api_content_get\n+from plone.restapi.services.relations import api_relation_create\n+from Products.CMFCore.permissions import ManagePortal\n+from zope.interface import alsoProvides\n+from zope.interface import implementer\n+from zope.publisher.interfaces import IPublishTraverse\n+import plone.protect.interfaces\n+import logging\n+\n+\n+log = logging.getLogger(__name__)\n+\n+try:\n+    from Products.CMFPlone.relationhelper import rebuild_relations\n+except ImportError:\n+    try:\n+        from collective.relationhelpers.api import rebuild_relations\n+    except ImportError:\n+        rebuild_relations = None\n+\n+\n+@implementer(IPublishTraverse)\n+class PostRelations(Service):\n+    """Create new relations."""\n+\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+        self.params = []\n+        self.sm = getSecurityManager()\n+\n+    def publishTraverse(self, request, name):\n+        # Treat any path segments after /@relations as parameters\n+        self.params.append(name)\n+        return self\n+\n+    def reply(self):\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        if not api_relation_create:\n+            raise NotImplementedError()\n+\n+        data = json_body(self.request)\n+\n+        # Rebuild relations with or without regenerating intIds\n+        if "rebuild" in self.params:\n+            if api.user.has_permission(ManagePortal):\n+                if rebuild_relations:\n+                    flush = True if data.get("flush", False) else False\n+                    try:\n+                        rebuild_relations(flush_and_rebuild_intids=flush)\n+                        print("*** Relations rebuild. flush:", flush)\n+                        return self.reply_no_content()\n+                    except Exception as e:\n+                        self.request.response.setStatus(500)\n+                        return dict(\n+                            error=dict(\n+                                # type="ImportError",\n+                                message=str(e),\n+                            )\n+                        )\n+                else:\n+                    self.request.response.setStatus(501)\n+                    return dict(\n+                        error=dict(\n+                            type="ImportError",\n+                            message="Relationhelpers not available. Install collective.relationhelpers or upgrade to Plone 6!",\n+                        )\n+                    )\n+            else:\n+                self.request.response.setStatus(403)\n+                return dict(\n+                    error=dict(\n+                        type="Forbidden",\n+                    )\n+                )\n+\n+        failed_relations = []\n+        for relationdata in data["items"]:\n+            source_obj = plone_api_content_get(UID=relationdata["source"])\n+            if not source_obj:\n+                source_obj = plone_api_content_get(path=relationdata["source"])\n+            target_obj = plone_api_content_get(UID=relationdata["target"])\n+            if not target_obj:\n+                target_obj = plone_api_content_get(path=relationdata["target"])\n+\n+            if not source_obj or not target_obj:\n+                msg = (\n+                    "Source and target not found."\n+                    if not source_obj and not target_obj\n+                    else "Source not found."\n+                    if not source_obj\n+                    else "Target not found."\n+                )\n+                msg = f"Failed on creating a relation. {msg}"\n+                log.error(f"{msg} {relationdata}")\n+                failed_relations.append((relationdata, msg))\n+                continue\n+\n+            try:\n+                api_relation_create(\n+                    source=source_obj,\n+                    target=target_obj,\n+                    relationship=relationdata["relation"],\n+                )\n+            except Exception as e:\n+                msg = f"{type(e).__name__}: {str(e)}. Failed on creating a relation. source:{source_obj}, target: {target_obj}"\n+                log.error(f"{msg} {relationdata}")\n+                failed_relations.append((relationdata, msg))\n+                continue\n+\n+        if len(failed_relations) > 0:\n+            return self._error(\n+                422,\n+                "Unprocessable Content",\n+                "Failed on creating relations",\n+                failed_relations,\n+            )\n+\n+        return self.reply_no_content()\n+\n+    def _error(self, status, type, message, failed=[]):\n+        self.request.response.setStatus(status)\n+        return {"error": {"type": type, "message": message, "failed": failed}}\ndiff --git a/src/plone/restapi/services/relations/configure.zcml b/src/plone/restapi/services/relations/configure.zcml\nnew file mode 100644\nindex 000000000..f21cd0ac1\n--- /dev/null\n+++ b/src/plone/restapi/services/relations/configure.zcml\n@@ -0,0 +1,31 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone"\n+    >\n+\n+  <plone:service\n+      method="GET"\n+      accept="application/json,application/schema+json"\n+      factory=".get.GetRelations"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="zope2.View"\n+      name="@relations"\n+      />\n+\n+  <plone:service\n+      method="POST"\n+      factory=".add.PostRelations"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@relations"\n+      />\n+\n+  <plone:service\n+      method="DELETE"\n+      factory=".delete.DeleteRelations"\n+      for="Products.CMFPlone.interfaces.IPloneSiteRoot"\n+      permission="cmf.ModifyPortalContent"\n+      name="@relations"\n+      />\n+\n+</configure>\ndiff --git a/src/plone/restapi/services/relations/delete.py b/src/plone/restapi/services/relations/delete.py\nnew file mode 100644\nindex 000000000..5d8f69119\n--- /dev/null\n+++ b/src/plone/restapi/services/relations/delete.py\n@@ -0,0 +1,113 @@\n+from plone.restapi.deserializer import json_body\n+from plone.restapi.services import Service\n+from plone.restapi.services.relations import plone_api_content_get\n+from plone.restapi.services.relations import api_relation_delete\n+from zope.interface import alsoProvides\n+import plone.protect.interfaces\n+import logging\n+\n+\n+log = logging.getLogger(__name__)\n+\n+\n+class DeleteRelations(Service):\n+    """Delete relations."""\n+\n+    def reply(self):\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        if not api_relation_delete:\n+            raise NotImplementedError()\n+\n+        data = json_body(self.request)\n+\n+        failed_relations = []\n+        # List of single relations\n+        if data.get("items", None):\n+            for relationdata in data["items"]:\n+                # UIDs provided?\n+                source_obj = plone_api_content_get(UID=relationdata["source"])\n+                target_obj = plone_api_content_get(UID=relationdata["target"])\n+                # Or maybe path provided?\n+                if not source_obj:\n+                    source_obj = plone_api_content_get(path=relationdata["source"])\n+                if not target_obj:\n+                    target_obj = plone_api_content_get(path=relationdata["target"])\n+                # Source or target not found by UID or path\n+                if not source_obj or not target_obj:\n+                    msg = (\n+                        "Source and target not found."\n+                        if not source_obj and not target_obj\n+                        else "Source not found."\n+                        if not source_obj\n+                        else "Target not found."\n+                    )\n+                    msg = f"Failed on deleting a relation. {msg}"\n+                    log.error(f"{msg} {relationdata}")\n+                    failed_relations.append((relationdata, msg))\n+                    continue\n+\n+                try:\n+                    api_relation_delete(\n+                        source=source_obj,\n+                        target=target_obj,\n+                        relationship=relationdata["relation"],\n+                    )\n+                except Exception as e:\n+                    msg = f"{type(e).__name__}: {str(e)}. Failed on deleting a relation. source:{source_obj}, target: {target_obj}"\n+                    log.error(f"{msg} {relationdata}")\n+                    failed_relations.append((relationdata, msg))\n+                    continue\n+\n+            if len(failed_relations) > 0:\n+                return self._error(\n+                    422,\n+                    "Unprocessable Content",\n+                    "Failed on deleting relations",\n+                    failed_relations,\n+                )\n+\n+        # Bunch of relations defined by source, target, relation name, or a combination of them\n+        else:\n+            relation = data.get("relation", None)\n+            source = data.get("source", None)\n+            target = data.get("target", None)\n+\n+            source_obj = None\n+            if source:\n+                source_obj = plone_api_content_get(UID=source)\n+                if not source_obj:\n+                    source_obj = plone_api_content_get(path=source)\n+                if not source_obj:\n+                    msg = f"Failed on deleting relations. Source not found: {source}"\n+                    log.error(msg)\n+                    return self._error(422, "Unprocessable Content", msg)\n+\n+            target_obj = None\n+            if target:\n+                target_obj = plone_api_content_get(UID=target)\n+                if not target_obj:\n+                    target_obj = plone_api_content_get(path=target)\n+                if not target_obj:\n+                    msg = f"Failed on deleting relations. Target not found: {target}"\n+                    log.error(msg)\n+                    return self._error(422, "Unprocessable Content", msg)\n+\n+            try:\n+                api_relation_delete(\n+                    source=source_obj,\n+                    target=target_obj,\n+                    relationship=relation,\n+                )\n+            except Exception as e:\n+                msg = f"{type(e).__name__}: {str(e)}. Failed on deleting a relation. source:{source}, target: {target}, relation: {relation}"\n+                log.error(f"{msg} {data}")\n+                return self._error(422, type(e).__name__, msg)\n+\n+        return self.reply_no_content()\n+\n+    def _error(self, status, type, message, failed=[]):\n+        self.request.response.setStatus(status)\n+        return {"error": {"type": type, "message": message, "failed": failed}}\ndiff --git a/src/plone/restapi/services/relations/get.py b/src/plone/restapi/services/relations/get.py\nnew file mode 100644\nindex 000000000..ea79c96b5\n--- /dev/null\n+++ b/src/plone/restapi/services/relations/get.py\n@@ -0,0 +1,305 @@\n+from AccessControl.SecurityManagement import getSecurityManager\n+from collections import defaultdict\n+from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.serializer.converters import json_compatible\n+from plone.restapi.services import Service\n+from plone.restapi.services.relations import api_relation_create\n+from plone.restapi.services.relations import plone_api_content_get\n+from Products.CMFCore.utils import getToolByName\n+from zc.relation import catalog as zcr_catalog\n+from zc.relation.interfaces import ICatalog\n+from zExceptions import Unauthorized\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryUtility\n+from zope.component.hooks import getSite\n+from zope.globalrequest import getRequest\n+from zope.intid.interfaces import IIntIds\n+from zope.intid.interfaces import IntIdMissingError\n+from zope.interface import alsoProvides\n+from zope.schema.interfaces import IVocabularyFactory\n+\n+import plone.protect.interfaces\n+\n+MAX = 2500\n+\n+try:\n+    from Products.CMFPlone.relationhelper import get_relations_stats\n+except ImportError:\n+    try:\n+        from collective.relationhelpers.api import get_relations_stats\n+    except ImportError:\n+        get_relations_stats = None\n+\n+try:\n+    from Products.CMFPlone.relationhelper import rebuild_relations\n+except ImportError:\n+    try:\n+        from collective.relationhelpers.api import rebuild_relations\n+    except ImportError:\n+        rebuild_relations = None\n+\n+\n+def make_summary(obj, request):\n+    """Add UID to metadata_fields."""\n+    metadata_fields = request.form.get("metadata_fields", []) or []\n+    if not isinstance(metadata_fields, list):\n+        metadata_fields = [metadata_fields]\n+    metadata_fields.append("UID")\n+    request.form["metadata_fields"] = list(set(metadata_fields))\n+    summary = getMultiAdapter((obj, request), ISerializeToJsonSummary)()\n+    summary = json_compatible(summary)\n+    return summary\n+\n+\n+def get_relations(\n+    sources=None,\n+    targets=None,\n+    relationship=None,\n+    request=None,\n+    unrestricted=False,\n+    onlyBroken=False,\n+    max=None,\n+):\n+    """Get valid relations."""\n+    results = defaultdict(list)\n+    if request is None:\n+        request = getRequest()\n+    intids = getUtility(IIntIds)\n+    relation_catalog = queryUtility(ICatalog)\n+    if relation_catalog is None:\n+        return results\n+\n+    query = {}\n+    if sources is not None:\n+        iids = []\n+        for el in sources:\n+            try:\n+                iids.append(intids.getId(el))\n+            except IntIdMissingError:\n+                continue\n+        query["from_id"] = zcr_catalog.any(*iids)\n+\n+    if targets is not None:\n+        iids = []\n+        for el in targets:\n+            try:\n+                iids.append(intids.getId(el))\n+            except IntIdMissingError:\n+                continue\n+        query["to_id"] = zcr_catalog.any(*iids)\n+    if relationship is not None:\n+        query["from_attribute"] = relationship\n+\n+    if not unrestricted:\n+        checkPermission = getSecurityManager().checkPermission\n+\n+    if max:\n+        try:\n+            max = int(max)\n+        except TypeError as e:\n+            raise ValueError(str(e))\n+    count = 0\n+    relations = relation_catalog.findRelations(query)\n+    for relation in relations:\n+        if relation.isBroken():\n+            if not onlyBroken:\n+                continue\n+        else:\n+            if onlyBroken:\n+                continue\n+        count += 1\n+        if max and count > max:\n+            break\n+\n+        source_obj = relation.from_object\n+        target_obj = relation.to_object\n+\n+        if not unrestricted:\n+            can_view = (not source_obj or checkPermission("View", source_obj)) and (\n+                not target_obj or checkPermission("View", target_obj)\n+            )\n+            if not can_view:\n+                continue\n+\n+        if onlyBroken:\n+            results[relation.from_attribute].append(\n+                [\n+                    source_obj and source_obj.absolute_url() or "",\n+                    target_obj and target_obj.absolute_url() or "",\n+                ]\n+            )\n+        else:\n+            results[relation.from_attribute].append(\n+                {\n+                    "source": make_summary(source_obj, request),\n+                    "target": make_summary(target_obj, request),\n+                }\n+            )\n+    return results\n+\n+\n+def relation_stats():\n+    if get_relations_stats is not None:\n+        rels, broken = get_relations_stats()\n+        results = {"stats": rels, "broken": broken}\n+        return json_compatible(results)\n+    else:\n+        raise NotImplementedError("Not implemented in this version of Plone")\n+\n+\n+def getBrokenRelationNames():\n+    relation_catalog = queryUtility(ICatalog)\n+    if relation_catalog is None:\n+        return []\n+\n+    relations = relation_stats()\n+    return relations["broken"] and relations["broken"].keys() or []\n+\n+\n+def getStaticCatalogVocabularyQuery(vocabularyFactoryName):\n+    factory = queryUtility(IVocabularyFactory, vocabularyFactoryName)\n+    if factory:\n+        return factory().query\n+    return\n+\n+\n+class GetRelations(Service):\n+    """Get relations or stats\n+\n+        source: UID of content item\n+        target: UID of content item\n+        relation: name of a relation\n+        max: integer: maximum of results\n+        onlyBroken: boolean: dictionary with broken relations per relation type\n+        query_source: Restrict relations by path or SearchableText\n+        query_target: Restrict relations by path or SearchableText\n+        rebuild: Rebuild relations\n+        flush: If rebuild, then this also flushes the intIds\n+\n+    Returns:\n+        stats if no parameter, else relations\n+    """\n+\n+    def __init__(self, context, request):\n+        super().__init__(context, request)\n+\n+    def reply(self):\n+        # Disable CSRF protection\n+        if "IDisableCSRFProtection" in dir(plone.protect.interfaces):\n+            alsoProvides(self.request, plone.protect.interfaces.IDisableCSRFProtection)\n+\n+        source = self.request.get("source", None)\n+        target = self.request.get("target", None)\n+        relationship = self.request.get("relation", None)\n+        max = self.request.get("max", False)\n+        onlyBroken = self.request.get("onlyBroken", False)\n+        query_source = self.request.get("query_source", None)\n+        query_target = self.request.get("query_target", None)\n+\n+        targets = None\n+        sources = None\n+\n+        catalog = getToolByName(self.context, "portal_catalog")\n+        portal = getSite()\n+\n+        # Get broken relations for all relation types\n+        if onlyBroken:\n+            relationNames = getBrokenRelationNames()\n+            if len(relationNames) == 0:\n+                return self.reply_no_content(status=204)\n+            result = {\n+                "@id": f\'{self.request["SERVER_URL"]}{self.request.environ["REQUEST_URI"]}\',\n+                "relations": {},\n+            }\n+            for relationName in relationNames:\n+                rels = get_relations(relationship=relationName, onlyBroken=True)\n+                result["relations"][relationName] = {\n+                    "items": rels[relationName],\n+                    "items_total": len(rels),\n+                }\n+            return result\n+\n+        # Stats\n+        if not source and not target and not relationship:\n+            try:\n+                stats = relation_stats()\n+                stats[\n+                    "@id"\n+                ] = f\'{self.request["SERVER_URL"]}{self.request.environ["REQUEST_URI"]}\'\n+                return stats\n+            except ImportError:\n+                self.request.response.setStatus(501)\n+                return dict(\n+                    error=dict(\n+                        type="ImportError",\n+                        message="Relationhelpers not available. Install collective.relationhelpers or upgrade to Plone 6!",\n+                    )\n+                )\n+            except Unauthorized:\n+                return self.reply_no_content(status=401)\n+\n+        # Query relations\n+        if source:\n+            if source[0:1] == "/":\n+                source = plone_api_content_get(path=source)\n+            else:\n+                source = plone_api_content_get(UID=source)\n+            if not source:\n+                return self.reply_no_content(status=404)\n+            else:\n+                sources = [source]\n+\n+        if target:\n+            if target[0:1] == "/":\n+                target = plone_api_content_get(path=target)\n+            else:\n+                target = plone_api_content_get(UID=target)\n+            if not target:\n+                return self.reply_no_content(status=404)\n+            else:\n+                targets = [target]\n+\n+        if query_source:\n+            query_objects = {}\n+            if query_source[0] == "/":\n+                query_objects["path"] = {"query": f"{portal.id}/{query_source}"}\n+            else:\n+                query_objects["SearchableText"] = query_source\n+            results = catalog.searchResults(**query_objects)\n+            sources = [el.getObject() for el in results]\n+\n+        if query_target:\n+            query_objects = {}\n+            if query_target[0] == "/":\n+                query_objects["path"] = {"query": query_target}\n+            else:\n+                query_objects["SearchableText"] = query_target\n+            results = catalog.searchResults(**query_objects)\n+            targets = [el.getObject() for el in results]\n+\n+        data = get_relations(\n+            sources=sources,\n+            targets=targets,\n+            relationship=relationship,\n+            max=max,\n+            request=self.request,\n+        )\n+\n+        result = {\n+            "@id": f\'{self.request["SERVER_URL"]}{self.request.environ["REQUEST_URI"]}\',\n+            "relations": {},\n+        }\n+        if relationship and not data:\n+            result["relations"][relationship] = {"items": [], "items_total": 0}\n+        for key in data:\n+            result["relations"][key] = {\n+                "items": data[key],\n+                "items_total": len(data[key]),\n+            }\n+        if relationship:\n+            scvq = getStaticCatalogVocabularyQuery(relationship)\n+            result["relations"][relationship]["staticCatalogVocabularyQuery"] = scvq\n+            result["relations"][relationship]["readonly"] = not api_relation_create\n+\n+        return result\ndiff --git a/src/plone/restapi/tests/http-examples/relations_catalog_get_stats.req b/src/plone/restapi/tests/http-examples/relations_catalog_get_stats.req\nnew file mode 100644\nindex 000000000..6a930d610\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_catalog_get_stats.req\n@@ -0,0 +1,3 @@\n+GET /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/relations_catalog_get_stats.resp b/src/plone/restapi/tests/http-examples/relations_catalog_get_stats.resp\nnew file mode 100644\nindex 000000000..3b60709a6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_catalog_get_stats.resp\n@@ -0,0 +1,11 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations",\n+    "broken": {},\n+    "stats": {\n+        "comprisesComponentPart": 2,\n+        "relatedItems": 2\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del.req b/src/plone/restapi/tests/http-examples/relations_del.req\nnew file mode 100644\nindex 000000000..f7b0ab637\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del.req\n@@ -0,0 +1,14 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "SomeUUID000000000000000000000001",\n+            "target": "SomeUUID000000000000000000000002"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del.resp b/src/plone/restapi/tests/http-examples/relations_del.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_anonymous.req b/src/plone/restapi/tests/http-examples/relations_del_anonymous.req\nnew file mode 100644\nindex 000000000..f03468b12\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_anonymous.req\n@@ -0,0 +1,13 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "/document",\n+            "target": "/document-2"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_anonymous.resp b/src/plone/restapi/tests/http-examples/relations_del_anonymous.resp\nnew file mode 100644\nindex 000000000..325f535a7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_anonymous.resp\n@@ -0,0 +1,7 @@\n+HTTP/1.1 401 Unauthorized\n+Content-Type: application/json\n+\n+{\n+    "message": "You are not authorized to access this resource.",\n+    "type": "Unauthorized"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_combi.req b/src/plone/restapi/tests/http-examples/relations_del_combi.req\nnew file mode 100644\nindex 000000000..109d86fe1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_combi.req\n@@ -0,0 +1,9 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "relation": "relatedItems",\n+    "target": "/document"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_combi.resp b/src/plone/restapi/tests/http-examples/relations_del_combi.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_combi.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_failure.req b/src/plone/restapi/tests/http-examples/relations_del_failure.req\nnew file mode 100644\nindex 000000000..03080d1ec\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_failure.req\n@@ -0,0 +1,19 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "/document",\n+            "target": "/dont-know-this-doc"\n+        },\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "/doc-does-not-exist",\n+            "target": "/document"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_failure.resp b/src/plone/restapi/tests/http-examples/relations_del_failure.resp\nnew file mode 100644\nindex 000000000..8d686c5e1\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_failure.resp\n@@ -0,0 +1,27 @@\n+HTTP/1.1 422 Unprocessable Entity\n+Content-Type: application/json\n+\n+{\n+    "error": {\n+        "failed": [\n+            [\n+                {\n+                    "relation": "comprisesComponentPart",\n+                    "source": "/document",\n+                    "target": "/dont-know-this-doc"\n+                },\n+                "Failed on deleting a relation. Target not found."\n+            ],\n+            [\n+                {\n+                    "relation": "comprisesComponentPart",\n+                    "source": "/doc-does-not-exist",\n+                    "target": "/document"\n+                },\n+                "Failed on deleting a relation. Source not found."\n+            ]\n+        ],\n+        "message": "Failed on deleting relations",\n+        "type": "Unprocessable Content"\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_path_uid.req b/src/plone/restapi/tests/http-examples/relations_del_path_uid.req\nnew file mode 100644\nindex 000000000..121f42896\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_path_uid.req\n@@ -0,0 +1,19 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "/document",\n+            "target": "/document-2"\n+        },\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "SomeUUID000000000000000000000001",\n+            "target": "SomeUUID000000000000000000000003"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_path_uid.resp b/src/plone/restapi/tests/http-examples/relations_del_path_uid.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_path_uid.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_relationname.req b/src/plone/restapi/tests/http-examples/relations_del_relationname.req\nnew file mode 100644\nindex 000000000..70a218a43\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_relationname.req\n@@ -0,0 +1,8 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "relation": "relatedItems"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_relationname.resp b/src/plone/restapi/tests/http-examples/relations_del_relationname.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_relationname.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_source.req b/src/plone/restapi/tests/http-examples/relations_del_source.req\nnew file mode 100644\nindex 000000000..af04c1816\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_source.req\n@@ -0,0 +1,8 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "source": "/document"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_source.resp b/src/plone/restapi/tests/http-examples/relations_del_source.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_source.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_target.req b/src/plone/restapi/tests/http-examples/relations_del_target.req\nnew file mode 100644\nindex 000000000..05632f733\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_target.req\n@@ -0,0 +1,8 @@\n+DELETE /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "target": "/document"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_del_target.resp b/src/plone/restapi/tests/http-examples/relations_del_target.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_del_target.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_relationname.req b/src/plone/restapi/tests/http-examples/relations_get_relationname.req\nnew file mode 100644\nindex 000000000..ce27a66f6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_relationname.req\n@@ -0,0 +1,3 @@\n+GET /plone/@relations?relation=comprisesComponentPart HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_relationname.resp b/src/plone/restapi/tests/http-examples/relations_get_relationname.resp\nnew file mode 100644\nindex 000000000..2e4ba27cf\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_relationname.resp\n@@ -0,0 +1,55 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations?relation=comprisesComponentPart",\n+    "relations": {\n+        "comprisesComponentPart": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-2",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000002",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 2",\n+                        "type_title": "Page"\n+                    }\n+                },\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-3",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000003",\n+                        "description": "",\n+                        "review_state": "private",\n+                        "title": "Test document 3",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 2,\n+            "readonly": false,\n+            "staticCatalogVocabularyQuery": null\n+        }\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.req b/src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.req\nnew file mode 100644\nindex 000000000..12ddbaa69\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.req\n@@ -0,0 +1,2 @@\n+GET /plone/@relations?relation=comprisesComponentPart HTTP/1.1\n+Accept: application/json\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.resp b/src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.resp\nnew file mode 100644\nindex 000000000..ebf6c8554\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_relationname_anonymous.resp\n@@ -0,0 +1,35 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations?relation=comprisesComponentPart",\n+    "relations": {\n+        "comprisesComponentPart": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-2",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000002",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 2",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 1,\n+            "readonly": false,\n+            "staticCatalogVocabularyQuery": null\n+        }\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_and_relation.req b/src/plone/restapi/tests/http-examples/relations_get_source_and_relation.req\nnew file mode 100644\nindex 000000000..98c6aa53b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_and_relation.req\n@@ -0,0 +1,3 @@\n+GET /plone/@relations?source=/document&relation=comprisesComponentPart HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_and_relation.resp b/src/plone/restapi/tests/http-examples/relations_get_source_and_relation.resp\nnew file mode 100644\nindex 000000000..fad9ba942\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_and_relation.resp\n@@ -0,0 +1,55 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations?source=/document&relation=comprisesComponentPart",\n+    "relations": {\n+        "comprisesComponentPart": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-2",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000002",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 2",\n+                        "type_title": "Page"\n+                    }\n+                },\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-3",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000003",\n+                        "description": "",\n+                        "review_state": "private",\n+                        "title": "Test document 3",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 2,\n+            "readonly": false,\n+            "staticCatalogVocabularyQuery": null\n+        }\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_anonymous.req b/src/plone/restapi/tests/http-examples/relations_get_source_anonymous.req\nnew file mode 100644\nindex 000000000..73075407c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_anonymous.req\n@@ -0,0 +1,2 @@\n+GET /plone/@relations?source=/document HTTP/1.1\n+Accept: application/json\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_anonymous.resp b/src/plone/restapi/tests/http-examples/relations_get_source_anonymous.resp\nnew file mode 100644\nindex 000000000..c7e0ae18f\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_anonymous.resp\n@@ -0,0 +1,33 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations?source=/document",\n+    "relations": {\n+        "comprisesComponentPart": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-2",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000002",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 2",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 1\n+        }\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_by_path.req b/src/plone/restapi/tests/http-examples/relations_get_source_by_path.req\nnew file mode 100644\nindex 000000000..055de329e\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_by_path.req\n@@ -0,0 +1,3 @@\n+GET /plone/@relations?source=/document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_by_path.resp b/src/plone/restapi/tests/http-examples/relations_get_source_by_path.resp\nnew file mode 100644\nindex 000000000..9d8937e66\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_by_path.resp\n@@ -0,0 +1,78 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations?source=/document",\n+    "relations": {\n+        "comprisesComponentPart": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-2",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000002",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 2",\n+                        "type_title": "Page"\n+                    }\n+                },\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-3",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000003",\n+                        "description": "",\n+                        "review_state": "private",\n+                        "title": "Test document 3",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 2\n+        },\n+        "relatedItems": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-3",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000003",\n+                        "description": "",\n+                        "review_state": "private",\n+                        "title": "Test document 3",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 1\n+        }\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_by_uid.req b/src/plone/restapi/tests/http-examples/relations_get_source_by_uid.req\nnew file mode 100644\nindex 000000000..73921c0fd\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_by_uid.req\n@@ -0,0 +1,3 @@\n+GET /plone/@relations?source=SomeUUID000000000000000000000001 HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_source_by_uid.resp b/src/plone/restapi/tests/http-examples/relations_get_source_by_uid.resp\nnew file mode 100644\nindex 000000000..366bd4d06\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_source_by_uid.resp\n@@ -0,0 +1,78 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations?source=SomeUUID000000000000000000000001",\n+    "relations": {\n+        "comprisesComponentPart": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-2",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000002",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 2",\n+                        "type_title": "Page"\n+                    }\n+                },\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-3",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000003",\n+                        "description": "",\n+                        "review_state": "private",\n+                        "title": "Test document 3",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 2\n+        },\n+        "relatedItems": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document-3",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000003",\n+                        "description": "",\n+                        "review_state": "private",\n+                        "title": "Test document 3",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 1\n+        }\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_target.req b/src/plone/restapi/tests/http-examples/relations_get_target.req\nnew file mode 100644\nindex 000000000..7ad5065c6\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_target.req\n@@ -0,0 +1,3 @@\n+GET /plone/@relations?target=/document HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/relations_get_target.resp b/src/plone/restapi/tests/http-examples/relations_get_target.resp\nnew file mode 100644\nindex 000000000..f6fdd7f86\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_get_target.resp\n@@ -0,0 +1,33 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+    "@id": "http://localhost:55001/plone/@relations?target=/document",\n+    "relations": {\n+        "relatedItems": {\n+            "items": [\n+                {\n+                    "source": {\n+                        "@id": "http://localhost:55001/plone/document-2",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000002",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 2",\n+                        "type_title": "Page"\n+                    },\n+                    "target": {\n+                        "@id": "http://localhost:55001/plone/document",\n+                        "@type": "Document",\n+                        "UID": "SomeUUID000000000000000000000001",\n+                        "description": "",\n+                        "review_state": "published",\n+                        "title": "Test document 1",\n+                        "type_title": "Page"\n+                    }\n+                }\n+            ],\n+            "items_total": 1\n+        }\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post.req b/src/plone/restapi/tests/http-examples/relations_post.req\nnew file mode 100644\nindex 000000000..5d796890a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post.req\n@@ -0,0 +1,19 @@\n+POST /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "relatedItems",\n+            "source": "/document-3",\n+            "target": "/document"\n+        },\n+        {\n+            "relation": "relatedItems",\n+            "source": "/document-3",\n+            "target": "/document-2"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post.resp b/src/plone/restapi/tests/http-examples/relations_post.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post_anonyous.req b/src/plone/restapi/tests/http-examples/relations_post_anonyous.req\nnew file mode 100644\nindex 000000000..3ea1ef91a\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post_anonyous.req\n@@ -0,0 +1,13 @@\n+POST /plone/@relations HTTP/1.1\n+Accept: application/json\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "/document",\n+            "target": "/document-2"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post_anonyous.resp b/src/plone/restapi/tests/http-examples/relations_post_anonyous.resp\nnew file mode 100644\nindex 000000000..325f535a7\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post_anonyous.resp\n@@ -0,0 +1,7 @@\n+HTTP/1.1 401 Unauthorized\n+Content-Type: application/json\n+\n+{\n+    "message": "You are not authorized to access this resource.",\n+    "type": "Unauthorized"\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post_failure.req b/src/plone/restapi/tests/http-examples/relations_post_failure.req\nnew file mode 100644\nindex 000000000..1dce76554\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post_failure.req\n@@ -0,0 +1,14 @@\n+POST /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "/document",\n+            "target": "/document-does-not-exist"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post_failure.resp b/src/plone/restapi/tests/http-examples/relations_post_failure.resp\nnew file mode 100644\nindex 000000000..276f67cd9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post_failure.resp\n@@ -0,0 +1,19 @@\n+HTTP/1.1 422 Unprocessable Entity\n+Content-Type: application/json\n+\n+{\n+    "error": {\n+        "failed": [\n+            [\n+                {\n+                    "relation": "comprisesComponentPart",\n+                    "source": "/document",\n+                    "target": "/document-does-not-exist"\n+                },\n+                "Failed on creating a relation. Target not found."\n+            ]\n+        ],\n+        "message": "Failed on creating relations",\n+        "type": "Unprocessable Content"\n+    }\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post_with_uid.req b/src/plone/restapi/tests/http-examples/relations_post_with_uid.req\nnew file mode 100644\nindex 000000000..75459fdea\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post_with_uid.req\n@@ -0,0 +1,19 @@\n+POST /plone/@relations HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "items": [\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "SomeUUID000000000000000000000001",\n+            "target": "SomeUUID000000000000000000000002"\n+        },\n+        {\n+            "relation": "comprisesComponentPart",\n+            "source": "SomeUUID000000000000000000000003",\n+            "target": "SomeUUID000000000000000000000002"\n+        }\n+    ]\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_post_with_uid.resp b/src/plone/restapi/tests/http-examples/relations_post_with_uid.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_post_with_uid.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_rebuild.req b/src/plone/restapi/tests/http-examples/relations_rebuild.req\nnew file mode 100644\nindex 000000000..f2b6c88b0\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_rebuild.req\n@@ -0,0 +1,3 @@\n+POST /plone/@relations/rebuild HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/relations_rebuild.resp b/src/plone/restapi/tests/http-examples/relations_rebuild.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_rebuild.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.req b/src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.req\nnew file mode 100644\nindex 000000000..9d55e7149\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.req\n@@ -0,0 +1,8 @@\n+POST /plone/@relations/rebuild HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\n+Content-Type: application/json\n+\n+{\n+    "flush": 1\n+}\ndiff --git a/src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.resp b/src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.resp\nnew file mode 100644\nindex 000000000..0074ded3b\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/relations_rebuild_with_flush.resp\n@@ -0,0 +1,2 @@\n+HTTP/1.1 204 No Content\n+\ndiff --git a/src/plone/restapi/tests/test_documentation_relations.py b/src/plone/restapi/tests/test_documentation_relations.py\nnew file mode 100644\nindex 000000000..88ee2d07e\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_documentation_relations.py\n@@ -0,0 +1,552 @@\n+from plone import api\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.vocabularies.catalog import StaticCatalogVocabulary\n+from plone.restapi.services.relations import api_relation_create\n+from plone.restapi.services.relations.get import getStaticCatalogVocabularyQuery\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.tests.test_documentation import TestDocumentationBase\n+from plone.restapi.tests.test_documentation import save_request_and_response_for_docs\n+from zope.component import provideUtility\n+from zope.schema.interfaces import IVocabularyFactory\n+\n+import transaction\n+\n+try:\n+    from Products.CMFPlone.relationhelper import rebuild_relations\n+except ImportError:\n+    try:\n+        from collective.relationhelpers.api import rebuild_relations\n+    except ImportError:\n+        rebuild_relations = None\n+\n+\n+def ExamplesVocabularyFactory(context=None):\n+    return StaticCatalogVocabulary(\n+        {\n+            "portal_type": ["example"],\n+            "review_state": "published",\n+            "sort_on": "sortable_title",\n+        }\n+    )\n+\n+\n+class TestRelationsDocumentation(TestDocumentationBase):\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        super().setUp()\n+\n+        if api_relation_create:\n+            self.doc1 = api.content.create(\n+                container=self.portal,\n+                type="Document",\n+                id="document",\n+                title="Test document 1",\n+            )\n+            api.content.transition(self.doc1, "publish")\n+\n+            self.doc2 = api.content.create(\n+                container=self.portal,\n+                type="Document",\n+                id="document-2",\n+                title="Test document 2",\n+            )\n+            api.content.transition(self.doc2, "publish")\n+\n+            self.doc3 = api.content.create(\n+                container=self.portal,\n+                type="Document",\n+                id="document-3",\n+                title="Test document 3",\n+            )\n+\n+            transaction.commit()\n+\n+            api_relation_create(\n+                source=self.doc1,\n+                target=self.doc2,\n+                relationship="comprisesComponentPart",\n+            )\n+            api_relation_create(\n+                source=self.doc1,\n+                target=self.doc3,\n+                relationship="comprisesComponentPart",\n+            )\n+            api_relation_create(\n+                source=self.doc1,\n+                target=self.doc3,\n+                relationship="relatedItems",\n+            )\n+            api_relation_create(\n+                source=self.doc2,\n+                target=self.doc1,\n+                relationship="relatedItems",\n+            )\n+            transaction.commit()\n+\n+    def tearDown(self):\n+        super().tearDown()\n+\n+    def test_documentation_GET_relations(self):\n+        if api_relation_create:\n+            self.assertEqual(\n+                set(\n+                    [\n+                        relationvalue.to_object\n+                        for relationvalue in api.relation.get(\n+                            source=self.doc1, relationship="comprisesComponentPart"\n+                        )\n+                    ]\n+                ),\n+                {self.doc2, self.doc3},\n+            )\n+            self.assertEqual(\n+                set(\n+                    [\n+                        relationvalue.to_object\n+                        for relationvalue in api.relation.get(\n+                            source=self.doc1, relationship="relatedItems"\n+                        )\n+                    ]\n+                ),\n+                {self.doc3},\n+            )\n+\n+            """\n+            Stats of relations\n+            """\n+            response = self.api_session.get(\n+                "/@relations",\n+            )\n+            save_request_and_response_for_docs("relations_catalog_get_stats", response)\n+\n+            self.assertEqual(response.status_code, 200)\n+            resp = response.json()\n+            self.assertIn("stats", resp)\n+            self.assertIn("broken", resp)\n+            self.assertEqual(resp["stats"]["comprisesComponentPart"], 2)\n+            self.assertEqual(resp["broken"], {})\n+\n+            """\n+            Query relations\n+            """\n+            # relation name\n+            response = self.api_session.get(\n+                "/@relations?relation=comprisesComponentPart",\n+            )\n+            save_request_and_response_for_docs("relations_get_relationname", response)\n+            resp = response.json()\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"]["items_total"], 2\n+            )\n+            self.assertIn(\n+                "UID", resp["relations"]["comprisesComponentPart"]["items"][0]["source"]\n+            )\n+\n+            # relation name (sub set of relations for Anonymous)\n+            self.api_session.auth = None\n+            response = self.api_session.get(\n+                "/@relations?relation=comprisesComponentPart",\n+            )\n+            save_request_and_response_for_docs(\n+                "relations_get_relationname_anonymous", response\n+            )\n+            resp = response.json()\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"]["items_total"], 1\n+            )  # not 2 as for admin\n+            self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+            # source by path\n+            response = self.api_session.get(\n+                "/@relations?source=/document",\n+            )\n+            save_request_and_response_for_docs("relations_get_source_by_path", response)\n+            resp = response.json()\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"]["items_total"], 2\n+            )\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 1)\n+\n+            # source by uid\n+            response = self.api_session.get(\n+                f"/@relations?source={self.doc1.UID()}",\n+            )\n+            save_request_and_response_for_docs("relations_get_source_by_uid", response)\n+\n+            # source by path (sub set of relations for Anonymous)\n+            self.api_session.auth = None\n+            response = self.api_session.get(\n+                "/@relations?source=/document",\n+            )\n+            save_request_and_response_for_docs(\n+                "relations_get_source_anonymous", response\n+            )\n+            resp = response.json()\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"]["items_total"], 1\n+            )  # subset of results for manager\n+            self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+            # source and relation\n+            response = self.api_session.get(\n+                "/@relations?source=/document&relation=comprisesComponentPart",\n+            )\n+            save_request_and_response_for_docs(\n+                "relations_get_source_and_relation", response\n+            )\n+\n+            # target\n+            response = self.api_session.get(\n+                "/@relations?target=/document",\n+            )\n+            save_request_and_response_for_docs("relations_get_target", response)\n+            resp = response.json()\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 1)\n+\n+    def test_documentation_GET_relations_vocabulary(self):\n+        if api_relation_create:\n+            # Register named staticCatalogVocabulary\n+            factory = ExamplesVocabularyFactory  # ()\n+            provideUtility(\n+                factory, provides=IVocabularyFactory, name="comprisesComponentPart"\n+            )\n+\n+            # Query relations\n+            response = self.api_session.get(\n+                "/@relations?relation=comprisesComponentPart",\n+            )\n+\n+            resp = response.json()\n+            # Is the vocabulary registered?\n+            self.assertEqual(\n+                getStaticCatalogVocabularyQuery("comprisesComponentPart"),\n+                {\n+                    "portal_type": ["example"],\n+                    "review_state": "published",\n+                    "sort_on": "sortable_title",\n+                },\n+            )\n+            # Is the vocabulary included in response?\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"][\n+                    "staticCatalogVocabularyQuery"\n+                ],\n+                {\n+                    "portal_type": ["example"],\n+                    "review_state": "published",\n+                    "sort_on": "sortable_title",\n+                },\n+            )\n+\n+    def test_documentation_POST_relations(self):\n+        """\n+        Add relations\n+        """\n+        self.maxDiff = None\n+\n+        if api_relation_create:\n+            response = self.api_session.get(\n+                "/@relations?relation=relatedItems",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 2)\n+\n+            response = self.api_session.post(\n+                "/@relations",\n+                json={\n+                    "items": [\n+                        {\n+                            "source": "/document-3",\n+                            "target": "/document",\n+                            "relation": "relatedItems",\n+                        },\n+                        {\n+                            "source": "/document-3",\n+                            "target": "/document-2",\n+                            "relation": "relatedItems",\n+                        },\n+                    ]\n+                },\n+            )\n+            save_request_and_response_for_docs("relations_post", response)\n+\n+            response = self.api_session.get(\n+                "/@relations?relation=relatedItems",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 4)\n+\n+            # Failing addition\n+            response = self.api_session.post(\n+                "/@relations",\n+                json={\n+                    "items": [\n+                        {\n+                            "source": "/document",\n+                            "target": "/document-does-not-exist",\n+                            "relation": "comprisesComponentPart",\n+                        }\n+                    ]\n+                },\n+            )\n+            save_request_and_response_for_docs("relations_post_failure", response)\n+            resp = response.json()\n+            self.assertIn("failed", resp["error"])\n+\n+            # Add by UID\n+            response = self.api_session.post(\n+                "/@relations",\n+                json={\n+                    "items": [\n+                        {\n+                            "source": self.doc1.UID(),\n+                            "target": self.doc2.UID(),\n+                            "relation": "comprisesComponentPart",\n+                        },\n+                        {\n+                            "source": self.doc3.UID(),\n+                            "target": self.doc2.UID(),\n+                            "relation": "comprisesComponentPart",\n+                        },\n+                    ]\n+                },\n+            )\n+            save_request_and_response_for_docs("relations_post_with_uid", response)\n+\n+    def test_documentation_POST_relations_anonymous(self):\n+        """\n+        Post relations\n+        """\n+\n+        if api_relation_create:\n+            self.api_session.auth = None\n+            response = self.api_session.post(\n+                "/@relations",\n+                json={\n+                    "items": [\n+                        {\n+                            "source": "/document",\n+                            "target": "/document-2",\n+                            "relation": "comprisesComponentPart",\n+                        }\n+                    ]\n+                },\n+            )\n+            self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+            save_request_and_response_for_docs("relations_post_anonyous", response)\n+\n+            # Get relations and test that no relation is removed.\n+            response = self.api_session.get(\n+                "/@relations?relation=comprisesComponentPart",\n+            )\n+            resp = response.json()\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"]["items_total"], 2\n+            )\n+\n+    def test_documentation_DEL_relations_list(self):\n+        """\n+        Delete relations\n+        """\n+        self.maxDiff = None\n+\n+        if api_relation_create:\n+            # Delete list by path and UID\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={\n+                    "items": [\n+                        {\n+                            "source": "/document",\n+                            "target": "/document-2",\n+                            "relation": "comprisesComponentPart",\n+                        },\n+                        {\n+                            "source": self.doc1.UID(),\n+                            "target": self.doc3.UID(),\n+                            "relation": "comprisesComponentPart",\n+                        },\n+                    ]\n+                },\n+            )\n+            save_request_and_response_for_docs("relations_del_path_uid", response)\n+\n+            # Get relations and test that the deleted relations are removed.\n+            response = self.api_session.get(\n+                "/@relations?relation=comprisesComponentPart",\n+            )\n+            resp = response.json()\n+\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"]["items_total"], 0\n+            )  # instead of 2 before deletion\n+\n+            # Failing deletion\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={\n+                    "items": [\n+                        {\n+                            "source": "/document",\n+                            "target": "/dont-know-this-doc",\n+                            "relation": "comprisesComponentPart",\n+                        },\n+                        {\n+                            "source": "/doc-does-not-exist",\n+                            "target": "/document",\n+                            "relation": "comprisesComponentPart",\n+                        },\n+                    ]\n+                },\n+            )\n+            save_request_and_response_for_docs("relations_del_failure", response)\n+            resp = response.json()\n+            self.assertIn("error", resp)\n+\n+    def test_documentation_DEL_relations_list_anonymous(self):\n+        """\n+        Delete relations\n+        """\n+\n+        if api_relation_create:\n+            self.api_session.auth = None\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={\n+                    "items": [\n+                        {\n+                            "source": "/document",\n+                            "target": "/document-2",\n+                            "relation": "comprisesComponentPart",\n+                        }\n+                    ]\n+                },\n+            )\n+            self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+            save_request_and_response_for_docs("relations_del_anonymous", response)\n+\n+            # Get relations and test that no relation is removed.\n+            response = self.api_session.get(\n+                "/@relations?relation=comprisesComponentPart",\n+            )\n+            resp = response.json()\n+            self.assertEqual(\n+                resp["relations"]["comprisesComponentPart"]["items_total"], 2\n+            )\n+\n+    def test_documentation_DEL_relations_by_relationship(self):\n+        """\n+        Delete relations\n+        """\n+        self.maxDiff = None\n+\n+        if api_relation_create:\n+\n+            response = self.api_session.get(\n+                "/@relations?relation=relatedItems",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 2)\n+\n+            # Delete by relation name\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={"relation": "relatedItems"},\n+            )\n+            save_request_and_response_for_docs("relations_del_relationname", response)\n+\n+            response = self.api_session.get(\n+                "/@relations?relation=relatedItems",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 0)\n+\n+    def test_documentation_DEL_relations_by_source_or_target(self):\n+        """\n+        Delete relations\n+        """\n+        self.maxDiff = None\n+\n+        if api_relation_create:\n+            # Delete by source\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={"source": "/document"},\n+            )\n+            save_request_and_response_for_docs("relations_del_source", response)\n+\n+            response = self.api_session.get(\n+                "/@relations?relation=relatedItems",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 1)\n+\n+            # Delete by target\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={"target": "/document"},\n+            )\n+            save_request_and_response_for_docs("relations_del_target", response)\n+\n+            response = self.api_session.get(\n+                "/@relations?relation=relatedItems",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["relations"]["relatedItems"]["items_total"], 0)\n+\n+    def test_documentation_DEL_relations_bunch_combi(self):\n+        """\n+        Delete relations\n+        """\n+        self.maxDiff = None\n+\n+        if api_relation_create:\n+            response = self.api_session.get(\n+                "/@relations",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["stats"]["comprisesComponentPart"], 2)\n+            self.assertEqual(resp["stats"]["relatedItems"], 2)\n+\n+            # Delete by combination of source and relation name\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={"source": "/document", "relation": "relatedItems"},\n+            )\n+            save_request_and_response_for_docs("relations_del_combi", response)\n+\n+            response = self.api_session.get(\n+                "/@relations",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["stats"]["comprisesComponentPart"], 2)\n+            self.assertEqual(resp["stats"]["relatedItems"], 1)\n+\n+            # Delete by combination of target and relation name\n+            response = self.api_session.delete(\n+                "/@relations",\n+                json={"target": "/document", "relation": "relatedItems"},\n+            )\n+            save_request_and_response_for_docs("relations_del_combi", response)\n+\n+            response = self.api_session.get(\n+                "/@relations",\n+            )\n+            resp = response.json()\n+            self.assertEqual(resp["stats"]["comprisesComponentPart"], 2)\n+            self.assertNotIn("relatedItems", resp["stats"])\n+\n+    def test_documentation_POST_rebuild(self):\n+        if rebuild_relations:\n+            response = self.api_session.post("/@relations/rebuild")\n+            save_request_and_response_for_docs("relations_rebuild", response)\n+\n+            response = self.api_session.post(\n+                "/@relations/rebuild",\n+                json={"flush": 1},\n+            )\n+            save_request_and_response_for_docs("relations_rebuild_with_flush", response)\n'

