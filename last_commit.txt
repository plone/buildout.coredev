Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-02T00:06:00+05:30
Author: Rohan Shaw (rohnsha0) <rohnsha0@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/62df2834df8b8677a54ea0fff21f0f64ef7a2e7a

Fix: Sort portal types alphabetically in search filter

Files changed:
A news/3860.bugfix
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex ae4d6cbe27..02e0350b71 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -189,7 +189,8 @@ def types_list(self):\n         # only show those types that have any content\n         catalog = getToolByName(self.context, "portal_catalog")\n         used_types = catalog._catalog.getIndex("portal_type").uniqueValues()\n-        return self.filter_types(list(used_types))\n+        filtered_list= self.filter_types(list(used_types))\n+        return sorted(filtered_list)\n \n     def sort_options(self):\n         """Sorting options for search results view."""\ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex 3e0d611acf..5e89454238 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -87,7 +87,7 @@\n             </a>\n           </div>\n \n-          <div class="nav-item dropdown" id="search-filter">\n+          <div class="nav-item dropdown me-3" id="search-filter">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="search-filter-toggle" i18n:translate="narrow_search_options">\n               Filter the results\n             </a>\ndiff --git a/news/3860.bugfix b/news/3860.bugfix\nnew file mode 100644\nindex 0000000000..63b7442188\n--- /dev/null\n+++ b/news/3860.bugfix\n@@ -0,0 +1,2 @@\n+Fixes sort portal types alphabetically in search filter\n+[rohnsha0]\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-13T08:06:45+05:30
Author: Rohan Shaw (rohnsha0) <rohnsha0@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/40dccb46ecc25632e236a664731866ccc1378095

Sort portal types alphabetically using pyicu for locale-aware sorting

Files changed:
M Products/CMFPlone/browser/search.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 02e0350b71..5455cffeb0 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -18,6 +18,7 @@\n \n import json\n import re\n+from icu import Locale, Collator\n \n \n _ = MessageFactory("plone")\n@@ -189,18 +190,29 @@ def types_list(self):\n         # only show those types that have any content\n         catalog = getToolByName(self.context, "portal_catalog")\n         used_types = catalog._catalog.getIndex("portal_type").uniqueValues()\n-        filtered_list= self.filter_types(list(used_types))\n-        return sorted(filtered_list)\n+        return self.filter_types(list(used_types))\n \n     def sort_options(self):\n         """Sorting options for search results view."""\n         if "sort_on" not in self.request.form:\n             self.request.form["sort_on"] = self.default_sort_on\n-        return (\n+        \n+        options = [\n             SortOption(self.request, _("relevance"), "relevance"),\n             SortOption(self.request, _("date (newest first)"), "Date", reverse=True),\n             SortOption(self.request, _("alphabetically"), "sortable_title"),\n-        )\n+        ]\n+        \n+        # Get the current locale\n+        language_tool = getToolByName(self.context, \'portal_languages\')\n+        current_lang = language_tool.getPreferredLanguage()\n+        locale = Locale(current_lang)\n+        \n+        # Create a collator for the current locale\n+        collator = Collator.createInstance(locale)\n+        \n+        # Sort the options using PyICU\n+        return sorted(options, key=lambda x: collator.getSortKey(x.title))\n \n     def show_advanced_search(self):\n         """Whether we need to show advanced search options a.k.a. filters?"""\n@@ -328,3 +340,17 @@ def url(self):\n \n         base_url = self.request.URL\n         return base_url + "?" + make_query(q)\n+    \n+    def icu_sorted(iterable, key=None, reverse=False):\n+        """\n+        Sort the iterable using ICU collation rules for the current locale.\n+        """\n+        language_tool = getToolByName(None, \'portal_languages\')\n+        current_lang = language_tool.getPreferredLanguage()\n+        locale = Locale(current_lang)\n+        collator = Collator.createInstance(locale)\n+        \n+        if key is None:\n+            key = lambda x: x\n+        \n+        return sorted(iterable, key=lambda x: collator.getSortKey(key(x)), reverse=reverse)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-13T08:07:09+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c1c0811797d1a3175d69ddffff6d94f33553efbe

Merge branch 'master' into rohnsha0-3860

Files changed:
M CHANGES.md
M setup.py
D news/3756.bugfix
D news/3765-1.bugfix
D news/3765-2.bugfix
D news/3765-3.bugfix
D news/3765-4.bugfix
D news/3942.bugfix
D news/3942.internal
D news/3945.bugfix
D news/3946.bugfix
D news/3949.bugfix
D news/3952.bugfix
D news/3960.bugfix
D news/3962.bugfix
D news/3964.bugfix
D news/3965.bugfix
D news/3966.bugfix
D news/3967.bugfix
D news/3968.bugfix
D news/3975.bugfix.1
D news/3975.bugfix.2
D news/3982.internal
D news/3984.internal
D news/6103.internal

b'diff --git a/CHANGES.md b/CHANGES.md\nindex de2bfdcf2c..06a95f78ec 100644\n--- a/CHANGES.md\n+++ b/CHANGES.md\n@@ -15,6 +15,60 @@\n \n <!-- towncrier release notes start -->\n \n+## 6.1.0a4.dev0 (2024-07-08)\n+\n+\n+### Bug fixes:\n+\n+- Mockup TinyMCE settings: Remove unused loadingBaseUrl option. 3765-1\n+- Mockup TinyMCE settings: Remove deprecated AtD plugin settings. 3765-2\n+- Mockup TinyMCE settings: Remove unused AtD related views. 3765-3\n+- Mockup TinyMCE settings: Remove unused ITinyMCESpellCheckerSchema and ITinyMCESpellCheckerForm. 3765-4\n+- Fix deprecation warnings in "navtree" code + some micro optimizations\n+  [jensens] #3756\n+- Use details element for collapsibles in the resource registry.\n+  Makes it possible to toggle elements even with broken or missing javascript.\n+  Also properly connect form labels with their inputs.\n+  Fixes #3942\n+- Import INavigationRoot from plone.base, removes DeprecationWarning.\n+  [@jensens] #3945\n+- Use `context` instead of `here` in templates.\n+  Call `@@main_template` (with prefix `@@`) to optimize lookup.\n+  [@jensens] #3946\n+- Reduce DeprecationWarnings. [@jensens] #3949\n+- Fix TypeError in getGroups sorting\n+  [@rohnsha0] #3952\n+- Remove queryCatalog and getFolderContents skins script.\n+  This includes a refactoring in the search RSS and updates to soe tests\n+  [@jensens] #3960\n+- Products.CMFPlone  must not depend on plone.api [@jensens] #3962\n+- Removes duplicate `<article id="content">` in controlpanel templates\n+  [@szakitibi] #3964\n+- Do not test types_not_searched for a element that is not part of the underlying vocabulary.\n+  [@jensens] #3965\n+- Remove unused leftover reference to the Zope2 package from test. [@jensens] #3966\n+- Fix: Traceback in maintenance control panel on shutdown if feature is not available.\n+  Hide button if action is not possible.\n+  [@jensens] #3967\n+- Fixed RegistrationTool to take user email with `__+__@abc.com`.\n+  [@rohnsha0] #3968\n+- Plone upgrade page: show error when upgrade is needed but no upgrades are available.\n+  Especially show a note when the `plone.app.upgrade` package is not available.\n+  [maurits] #3975\n+- Plone upgrade page: show list of previously installed packages that are currently missing.\n+  For example: `plone.app.discussion` may be missing in Plone 6.1, unless you explicitly add it, or depend on the `Plone` package.\n+  [maurits] #3975\n+\n+\n+### Internal:\n+\n+- Resourceregistry controlpanel: zprettify template.\n+  [thet] #3942\n+- Automatically set the label to `03 type: feature (plip)` for PLIPs. @stevepiercy #3982\n+- Automatically add a PLIP issue to the PLIP project board. @stevepiercy #3984\n+- Updated metadata version to 6103.\n+  [maurits] #6103\n+\n ## 6.1.0a3 (2024-04-26)\n \n \ndiff --git a/news/3756.bugfix b/news/3756.bugfix\ndeleted file mode 100644\nindex 4f3c022774..0000000000\n--- a/news/3756.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix deprecation warnings in "navtree" code + some micro optimizations\n-[jensens]\ndiff --git a/news/3765-1.bugfix b/news/3765-1.bugfix\ndeleted file mode 100644\nindex befe772169..0000000000\n--- a/news/3765-1.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Mockup TinyMCE settings: Remove unused loadingBaseUrl option.\ndiff --git a/news/3765-2.bugfix b/news/3765-2.bugfix\ndeleted file mode 100644\nindex 64cdb7bfc9..0000000000\n--- a/news/3765-2.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Mockup TinyMCE settings: Remove deprecated AtD plugin settings.\ndiff --git a/news/3765-3.bugfix b/news/3765-3.bugfix\ndeleted file mode 100644\nindex 0f699fdb93..0000000000\n--- a/news/3765-3.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Mockup TinyMCE settings: Remove unused AtD related views.\ndiff --git a/news/3765-4.bugfix b/news/3765-4.bugfix\ndeleted file mode 100644\nindex 47a716e6a4..0000000000\n--- a/news/3765-4.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Mockup TinyMCE settings: Remove unused ITinyMCESpellCheckerSchema and ITinyMCESpellCheckerForm.\ndiff --git a/news/3942.bugfix b/news/3942.bugfix\ndeleted file mode 100644\nindex a939eff395..0000000000\n--- a/news/3942.bugfix\n+++ /dev/null\n@@ -1,6 +0,0 @@\n-Use details element for collapsibles in the resource registry\n-\n-Makes it possible to toggle elements even with broken or missing javascript.\n-Also properly connect form labels with their inputs.\n-\n-Fixes #3942\ndiff --git a/news/3942.internal b/news/3942.internal\ndeleted file mode 100644\nindex 062c197fa0..0000000000\n--- a/news/3942.internal\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Resourceregistry controlpanel: zprettify template.\n-[thet]\ndiff --git a/news/3945.bugfix b/news/3945.bugfix\ndeleted file mode 100644\nindex d6e4076422..0000000000\n--- a/news/3945.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Import INavigationRoot from plone.base, removes DeprecationWarning.\n-[@jensens]\n\\ No newline at end of file\ndiff --git a/news/3946.bugfix b/news/3946.bugfix\ndeleted file mode 100644\nindex 1853b16830..0000000000\n--- a/news/3946.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Use `context` instead of `here` in templates.\n-Call `@@main_template` (with prefix `@@`) to optimize lookup.\n-[@jensens]\n\\ No newline at end of file\ndiff --git a/news/3949.bugfix b/news/3949.bugfix\ndeleted file mode 100644\nindex bf15b1c268..0000000000\n--- a/news/3949.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Reduce DeprecationWarnings. [@jensens]\ndiff --git a/news/3952.bugfix b/news/3952.bugfix\ndeleted file mode 100644\nindex a63571e60a..0000000000\n--- a/news/3952.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fix TypeError in getGroups sorting\n-[@rohnsha0]\n\\ No newline at end of file\ndiff --git a/news/3960.bugfix b/news/3960.bugfix\ndeleted file mode 100644\nindex b1fe215568..0000000000\n--- a/news/3960.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Remove queryCatalog and getFolderContents skins script.\n-This includes a refactoring in the search RSS and updates to soe tests\n-[@jensens]\ndiff --git a/news/3962.bugfix b/news/3962.bugfix\ndeleted file mode 100644\nindex d49decfcd7..0000000000\n--- a/news/3962.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Products.CMFPlone  must not depend on plone.api [@jensens]\ndiff --git a/news/3964.bugfix b/news/3964.bugfix\ndeleted file mode 100644\nindex 08994471a3..0000000000\n--- a/news/3964.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Removes duplicate `<article id="content">` in controlpanel templates\n-[@szakitibi]\ndiff --git a/news/3965.bugfix b/news/3965.bugfix\ndeleted file mode 100644\nindex de4d0d6091..0000000000\n--- a/news/3965.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Do not test types_not_searched for a element that is not part of the underlying vocabulary.\n-[@jensens]\ndiff --git a/news/3966.bugfix b/news/3966.bugfix\ndeleted file mode 100644\nindex 1c962a9e34..0000000000\n--- a/news/3966.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Remove unused leftover reference to the Zope2 package from test. [@jensens]\ndiff --git a/news/3967.bugfix b/news/3967.bugfix\ndeleted file mode 100644\nindex 8cbd922fef..0000000000\n--- a/news/3967.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Fix: Traceback in maintenance control panel on shutdown if feature is not available.\n-Hide button if action is not possible.\n-[@jensens]\ndiff --git a/news/3968.bugfix b/news/3968.bugfix\ndeleted file mode 100644\nindex c81fb575d7..0000000000\n--- a/news/3968.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fixed RegistrationTool to take user email with `__+__@abc.com`.\n-[@rohnsha0]\n\\ No newline at end of file\ndiff --git a/news/3975.bugfix.1 b/news/3975.bugfix.1\ndeleted file mode 100644\nindex e93d7ef4ab..0000000000\n--- a/news/3975.bugfix.1\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Plone upgrade page: show error when upgrade is needed but no upgrades are available.\n-Especially show a note when the `plone.app.upgrade` package is not available.\n-[maurits]\ndiff --git a/news/3975.bugfix.2 b/news/3975.bugfix.2\ndeleted file mode 100644\nindex ffd645a7c0..0000000000\n--- a/news/3975.bugfix.2\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Plone upgrade page: show list of previously installed packages that are currently missing.\n-For example: `plone.app.discussion` may be missing in Plone 6.1, unless you explicitly add it, or depend on the `Plone` package.\n-[maurits]\ndiff --git a/news/3982.internal b/news/3982.internal\ndeleted file mode 100644\nindex f2a9d60744..0000000000\n--- a/news/3982.internal\n+++ /dev/null\n@@ -1 +0,0 @@\n-Automatically set the label to `03 type: feature (plip)` for PLIPs. @stevepiercy\ndiff --git a/news/3984.internal b/news/3984.internal\ndeleted file mode 100644\nindex 97a602f581..0000000000\n--- a/news/3984.internal\n+++ /dev/null\n@@ -1 +0,0 @@\n-Automatically add a PLIP issue to the PLIP project board. @stevepiercy\ndiff --git a/news/6103.internal b/news/6103.internal\ndeleted file mode 100644\nindex efbd58ca7e..0000000000\n--- a/news/6103.internal\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Updated metadata version to 6103.\n-[maurits]\ndiff --git a/setup.py b/setup.py\nindex 52f7d51108..d296af837a 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "6.1.0a4.dev0"\n+version = "6.1.0a4.dev1"\n \n \n setup(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-15T17:45:23+05:30
Author: Rohan Shaw (rohnsha0) <rohnsha0@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/ad3e412531d5f013561f0bdc04d3c7c8f6d1f321

implemented portal_types sorting using plone.app.vocab

Files changed:
M Products/CMFPlone/browser/search.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 5455cffeb0..044b6321eb 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -15,10 +15,10 @@\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n from ZTUtils import make_query\n+from zope.schema.interfaces import IVocabularyFactory\n \n import json\n import re\n-from icu import Locale, Collator\n \n \n _ = MessageFactory("plone")\n@@ -184,10 +184,27 @@ def filter_types(self, types):\n         plone_utils = getToolByName(self.context, "plone_utils")\n         if not isinstance(types, list):\n             types = [types]\n-        return plone_utils.getUserFriendlyTypes(types)\n+\n+        # Get the vocabulary\n+        vocab_factory = self._portal_types_vocabulary()\n+        if vocab_factory is None:\n+            # Fallback to original behavior if vocabulary is not available\n+            return plone_utils.getUserFriendlyTypes(types)\n+\n+        vocab = vocab_factory(self.context)\n+\n+        # Filter types based on plone_utils and maintain vocabulary order\n+        user_friendly_types = set(plone_utils.getUserFriendlyTypes(types))\n+        sorted_types = [term.value for term in vocab if term.value in user_friendly_types]\n+\n+        return sorted_types\n+    \n+    def _portal_types_vocabulary(self):\n+        return queryUtility(\n+            IVocabularyFactory, "plone.app.vocabularies.ReallyUserFriendlyTypes"\n+        )\n \n     def types_list(self):\n-        # only show those types that have any content\n         catalog = getToolByName(self.context, "portal_catalog")\n         used_types = catalog._catalog.getIndex("portal_type").uniqueValues()\n         return self.filter_types(list(used_types))\n@@ -196,23 +213,11 @@ def sort_options(self):\n         """Sorting options for search results view."""\n         if "sort_on" not in self.request.form:\n             self.request.form["sort_on"] = self.default_sort_on\n-        \n-        options = [\n+        return (\n             SortOption(self.request, _("relevance"), "relevance"),\n             SortOption(self.request, _("date (newest first)"), "Date", reverse=True),\n             SortOption(self.request, _("alphabetically"), "sortable_title"),\n-        ]\n-        \n-        # Get the current locale\n-        language_tool = getToolByName(self.context, \'portal_languages\')\n-        current_lang = language_tool.getPreferredLanguage()\n-        locale = Locale(current_lang)\n-        \n-        # Create a collator for the current locale\n-        collator = Collator.createInstance(locale)\n-        \n-        # Sort the options using PyICU\n-        return sorted(options, key=lambda x: collator.getSortKey(x.title))\n+        )\n \n     def show_advanced_search(self):\n         """Whether we need to show advanced search options a.k.a. filters?"""\n@@ -340,17 +345,3 @@ def url(self):\n \n         base_url = self.request.URL\n         return base_url + "?" + make_query(q)\n-    \n-    def icu_sorted(iterable, key=None, reverse=False):\n-        """\n-        Sort the iterable using ICU collation rules for the current locale.\n-        """\n-        language_tool = getToolByName(None, \'portal_languages\')\n-        current_lang = language_tool.getPreferredLanguage()\n-        locale = Locale(current_lang)\n-        collator = Collator.createInstance(locale)\n-        \n-        if key is None:\n-            key = lambda x: x\n-        \n-        return sorted(iterable, key=lambda x: collator.getSortKey(key(x)), reverse=reverse)\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-22T20:18:25+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/5b0051c59d3cf60d4035de8ba34dce5cd74b0e5e

Merge branch 'master' into rohnsha0-3860

Files changed:
A news/3988.internal
M .github/ISSUE_TEMPLATE/PLIP.md

b"diff --git a/.github/ISSUE_TEMPLATE/PLIP.md b/.github/ISSUE_TEMPLATE/PLIP.md\nindex e570a1162f..df9efd7ad5 100644\n--- a/.github/ISSUE_TEMPLATE/PLIP.md\n+++ b/.github/ISSUE_TEMPLATE/PLIP.md\n@@ -12,7 +12,7 @@ projects: 'plone/47'\n \n <!--\n \n-Read https://5.docs.plone.org/develop/coredev/docs/plips.html first!\n+Read https://6.docs.plone.org/contributing/core/plips.html first!\n \n Mention the @plone/framework-team when the PLIP is information complete!\n \ndiff --git a/news/3988.internal b/news/3988.internal\nnew file mode 100644\nindex 0000000000..420c7c968f\n--- /dev/null\n+++ b/news/3988.internal\n@@ -0,0 +1 @@\n+Update the link to the PLIPs page for Plone 6 Documentation. @stevepiercy\n"

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-25T16:22:31+05:30
Author: Rohan Shaw (rohnsha0) <rohnsha0@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/35a1e59402912f109c723c44b9d8f5c69e65e7d1

incorp. suggested changes

Files changed:
M Products/CMFPlone/browser/search.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 044b6321eb..da688d099b 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -186,11 +186,9 @@ def filter_types(self, types):\n             types = [types]\n \n         # Get the vocabulary\n-        vocab_factory = self._portal_types_vocabulary()\n-        if vocab_factory is None:\n-            # Fallback to original behavior if vocabulary is not available\n-            return plone_utils.getUserFriendlyTypes(types)\n-\n+        vocab_factory = self.queryUtility(\n+            IVocabularyFactory, "plone.app.vocabularies.ReallyUserFriendlyTypes"\n+        )\n         vocab = vocab_factory(self.context)\n \n         # Filter types based on plone_utils and maintain vocabulary order\n@@ -205,6 +203,7 @@ def _portal_types_vocabulary(self):\n         )\n \n     def types_list(self):\n+        # only show those types that have any content\n         catalog = getToolByName(self.context, "portal_catalog")\n         used_types = catalog._catalog.getIndex("portal_type").uniqueValues()\n         return self.filter_types(list(used_types))\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-25T17:11:50+05:30
Author: Rohan Shaw (rohnsha0) <rohnsha0@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/89d928f8612ed15550bec335e044e34908c5733e

fix failing tests

Files changed:
M Products/CMFPlone/browser/search.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex da688d099b..add7502cca 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -186,7 +186,7 @@ def filter_types(self, types):\n             types = [types]\n \n         # Get the vocabulary\n-        vocab_factory = self.queryUtility(\n+        vocab_factory = queryUtility(\n             IVocabularyFactory, "plone.app.vocabularies.ReallyUserFriendlyTypes"\n         )\n         vocab = vocab_factory(self.context)\n@@ -196,11 +196,6 @@ def filter_types(self, types):\n         sorted_types = [term.value for term in vocab if term.value in user_friendly_types]\n \n         return sorted_types\n-    \n-    def _portal_types_vocabulary(self):\n-        return queryUtility(\n-            IVocabularyFactory, "plone.app.vocabularies.ReallyUserFriendlyTypes"\n-        )\n \n     def types_list(self):\n         # only show those types that have any content\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-25T20:16:44+05:30
Author: Rohan Shaw (rohnsha0) <rohnsha0@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/9abac40344f350988deb3c74ed58044e74e02d27

alphabetical imports, req. changes -&gt; search.py

Files changed:
M Products/CMFPlone/browser/search.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex add7502cca..5687ec5121 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -14,8 +14,8 @@\n from zope.component import queryUtility\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n-from ZTUtils import make_query\n from zope.schema.interfaces import IVocabularyFactory\n+from ZTUtils import make_query\n \n import json\n import re\n@@ -192,7 +192,7 @@ def filter_types(self, types):\n         vocab = vocab_factory(self.context)\n \n         # Filter types based on plone_utils and maintain vocabulary order\n-        user_friendly_types = set(plone_utils.getUserFriendlyTypes(types))\n+        user_friendly_types = plone_utils.getUserFriendlyTypes(types)\n         sorted_types = [term.value for term in vocab if term.value in user_friendly_types]\n \n         return sorted_types\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-25T23:57:33+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/c0bf144234933c49a8d0153f70f71a98a48e8e81

Update news/3860.bugfix

Co-authored-by: Steve Piercy &lt;web@stevepiercy.com&gt;

Files changed:
M news/3860.bugfix

b'diff --git a/news/3860.bugfix b/news/3860.bugfix\nindex 63b7442188..bd7b2fbf45 100644\n--- a/news/3860.bugfix\n+++ b/news/3860.bugfix\n@@ -1,2 +1 @@\n-Fixes sort portal types alphabetically in search filter\n-[rohnsha0]\n\\ No newline at end of file\n+Fixes sort portal types alphabetically in search filter\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-25T23:58:57+05:30
Author: Rohan Shaw (rohnsha0) <rohnsha0@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/0860bbe2c1ea82c31960316060409bad8daacd67

update news

Files changed:
M news/3860.bugfix

b'diff --git a/news/3860.bugfix b/news/3860.bugfix\nindex bd7b2fbf45..e9ef737970 100644\n--- a/news/3860.bugfix\n+++ b/news/3860.bugfix\n@@ -1 +1 @@\n-Fixes sort portal types alphabetically in search filter\n\\ No newline at end of file\n+Sort portal types in search filter according to `ReallyUserFriendlyTypes` using `unidecode` in `plone.app.vocabularies`. @rohnsha0\n\\ No newline at end of file\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-07-25T13:20:57-07:00
Author: Steve Piercy (stevepiercy) <web@stevepiercy.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/cbba8c8d3388ab8793062f376c395ceeed02c926

Merge branch 'master' into rohnsha0-3860

Files changed:
A news/125.breaking
M Products/CMFPlone/PloneTool.py
M Products/CMFPlone/browser/author.py
M Products/CMFPlone/browser/templates/ajax_main_template.pt
M Products/CMFPlone/browser/templates/main_template.pt
M Products/CMFPlone/exportimport/configure.zcml
M Products/CMFPlone/profiles/default/componentregistry.xml
M Products/CMFPlone/profiles/default/toolset.xml
M Products/CMFPlone/tests/testNavigationView.py
M Products/CMFPlone/tests/testPortalCreation.py
M Products/CMFPlone/tests/testWebDAV.py
M Products/CMFPlone/tests/test_defaultpage.py
M Products/CMFPlone/tests/test_zmi.py
D Products/CMFPlone/exportimport/propertiestool.py
D Products/CMFPlone/exportimport/tests/testPropertiesTool.py
D Products/CMFPlone/profiles/default/propertiestool.xml

b'diff --git a/Products/CMFPlone/PloneTool.py b/Products/CMFPlone/PloneTool.py\nindex 886d93ff63..e5ec5bd1be 100644\n--- a/Products/CMFPlone/PloneTool.py\n+++ b/Products/CMFPlone/PloneTool.py\n@@ -623,9 +623,8 @@ def browserDefault(self, obj):\n         # 3. If the object has a property default_page set and this gives a list\n         #     of, or single, object id, and that object is is found in the\n         #     folder or is the name of a skin template, return that id\n-        # 4. If the property default_page is set in site_properties and that\n-        #     property contains a list of ids of which one id is found in the\n-        #     folder, return that id\n+        # 4. Look up the property plone.default_page in the registry for\n+        #     magic ids and test these.\n         # 5. If the object implements IBrowserDefault, try to get the selected\n         #     layout.\n         # 6. If the type has a \'folderlisting\' action and no default page is\n@@ -928,7 +927,7 @@ def getUserFriendlyTypes(self, typesList=None):\n         # and selection purposes.\n         #\n         # This is the list of types available in the portal, minus those\n-        # defined in the types_not_searched property in site_properties, if it\n+        # defined in the types_not_searched property in the registry, if it\n         # exists.\n         #\n         # If typesList is given, this is used as the base list; else all types\ndiff --git a/Products/CMFPlone/browser/author.py b/Products/CMFPlone/browser/author.py\nindex 644099ea71..2b0fef236c 100644\n--- a/Products/CMFPlone/browser/author.py\n+++ b/Products/CMFPlone/browser/author.py\n@@ -5,7 +5,6 @@\n from plone.base.interfaces.controlpanel import IMailSchema\n from plone.base.utils import pretty_title_or_id\n from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.interfaces import IPropertiesTool\n from Products.CMFCore.utils import getToolByName\n from Products.Five.browser import BrowserView\n from Products.MailHost.interfaces import IMailHost\n@@ -201,11 +200,7 @@ def home_folder(self, username):\n         return self.membership_tool.getHomeFolder(id=username)\n \n     def __call__(self):\n-        self.portal_properties = getUtility(IPropertiesTool)\n-\n         self.portal_catalog = getToolByName(self.context, "portal_catalog")\n-\n-        # XXX: getUtility call does not work.\n         self.membership_tool = getToolByName(self.context, "portal_membership")\n \n         self.portal_state = getMultiAdapter(\ndiff --git a/Products/CMFPlone/browser/templates/ajax_main_template.pt b/Products/CMFPlone/browser/templates/ajax_main_template.pt\nindex 81eab03a4a..f4efc3b8e7 100644\n--- a/Products/CMFPlone/browser/templates/ajax_main_template.pt\n+++ b/Products/CMFPlone/browser/templates/ajax_main_template.pt\n@@ -15,7 +15,6 @@\n           dummy python: plone_layout.mark_view(view);\n           portal_url python:portal_state.portal_url();\n           checkPermission python:context.restrictedTraverse(\'portal_membership\').checkPermission;\n-          site_properties python:context.restrictedTraverse(\'portal_properties\').site_properties;\n           ajax_include_head python:request.get(\'ajax_include_head\', False);\n           ajax_load python:False;"\n       i18n:domain="plone"\ndiff --git a/Products/CMFPlone/browser/templates/main_template.pt b/Products/CMFPlone/browser/templates/main_template.pt\nindex 9bffd9a9bb..efe9eac05e 100644\n--- a/Products/CMFPlone/browser/templates/main_template.pt\n+++ b/Products/CMFPlone/browser/templates/main_template.pt\n@@ -15,7 +15,6 @@\n           dummy python: plone_layout.mark_view(view);\n           portal_url python:portal_state.portal_url();\n           checkPermission python:context.restrictedTraverse(\'portal_membership\').checkPermission;\n-          site_properties python:context.restrictedTraverse(\'portal_properties\').site_properties;\n           ajax_include_head python:request.get(\'ajax_include_head\', False);\n           ajax_load python:False;"\n       i18n:domain="plone"\ndiff --git a/Products/CMFPlone/exportimport/configure.zcml b/Products/CMFPlone/exportimport/configure.zcml\nindex ca451845e8..b3fe625468 100644\n--- a/Products/CMFPlone/exportimport/configure.zcml\n+++ b/Products/CMFPlone/exportimport/configure.zcml\n@@ -54,19 +54,9 @@\n     <depends name="catalog" />\n     <depends name="viewlets" />\n     <depends name="controlpanel" />\n-    <depends name="propertiestool" />\n     <depends name="workflow" />\n   </genericsetup:importStep>\n \n-  <genericsetup:importStep\n-      name="propertiestool"\n-      title="Plone Properties"\n-      description="Import plone properties tool and subobjects."\n-      handler="Products.CMFPlone.exportimport.propertiestool.importPloneProperties"\n-      >\n-    <depends name="componentregistry" />\n-  </genericsetup:importStep>\n-\n   <genericsetup:importStep\n       name="update-workflow-rolemap"\n       title="Update workflow role mappings"\n@@ -105,13 +95,6 @@\n       handler="Products.CMFPlone.exportimport.memberdata_properties.exportMemberDataProperties"\n       />\n \n-  <genericsetup:exportStep\n-      name="propertiestool"\n-      title="Plone Properties"\n-      description="Export plone properties tool and subobjects."\n-      handler="Products.CMFPlone.exportimport.propertiestool.exportPloneProperties"\n-      />\n-\n   <genericsetup:exportStep\n       name="viewlets"\n       title="Viewlet Settings"\n@@ -119,34 +102,12 @@\n       handler="plone.app.viewletmanager.exportimport.storage.exportViewletSettingsStorage"\n       />\n \n-  <adapter\n-      factory=".propertiestool.PlonePropertiesToolXMLAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="plone.base.interfaces.IPropertiesTool\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n-  <adapter\n-      factory=".propertiestool.SimpleItemWithPropertiesXMLAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="plone.base.interfaces.ISimpleItemWithProperties\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      />\n-\n   <adapter\n       factory="Products.CMFCore.exportimport.content.StructureFolderWalkingAdapter"\n       provides="Products.GenericSetup.interfaces.IFilesystemImporter"\n       for="Products.CMFCore.interfaces.ISiteRoot"\n       />\n \n-  <adapter\n-      factory=".propertiestool.SimpleItemWithPropertiesXMLAdapter"\n-      provides="Products.GenericSetup.interfaces.IBody"\n-      for="Products.CMFCore.interfaces.IMemberDataTool\n-           Products.GenericSetup.interfaces.ISetupEnviron"\n-      zcml:condition="not-installed Products.CMFCore.exportimport.memberdata"\n-      />\n-\n   <adapter\n       factory=".controlpanel.ControlPanelXMLAdapter"\n       provides="Products.GenericSetup.interfaces.IBody"\ndiff --git a/Products/CMFPlone/exportimport/propertiestool.py b/Products/CMFPlone/exportimport/propertiestool.py\ndeleted file mode 100644\nindex 94e21a1326..0000000000\n--- a/Products/CMFPlone/exportimport/propertiestool.py\n+++ /dev/null\n@@ -1,140 +0,0 @@\n-"""Plone Properties tool setup handlers.\n-\n-$Id:$\n-"""\n-\n-from plone.base.interfaces import IPropertiesTool as IPlonePropertiesTool\n-from plone.base.interfaces import ISimpleItemWithProperties\n-from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n-from Products.GenericSetup.interfaces import IBody\n-from Products.GenericSetup.interfaces import INode\n-from Products.GenericSetup.utils import ObjectManagerHelpers\n-from Products.GenericSetup.utils import PropertyManagerHelpers\n-from Products.GenericSetup.utils import XMLAdapterBase\n-from zope.component import queryMultiAdapter\n-\n-\n-_FILENAME = "propertiestool.xml"\n-\n-\n-def importPloneProperties(context):\n-    """Import plone properties tool."""\n-    site = context.getSite()\n-    logger = context.getLogger("propertiestool")\n-    ptool = getToolByName(site, "portal_properties")\n-\n-    body = context.readDataFile(_FILENAME)\n-    if body is None:\n-        return\n-\n-    importer = queryMultiAdapter((ptool, context), IBody)\n-    if importer is None:\n-        logger.warning("Import adapter missing.")\n-        return\n-\n-    importer.body = body\n-    logger.info("Properties tool imported.")\n-\n-\n-def exportPloneProperties(context):\n-    """Export plone properties tool."""\n-    site = context.getSite()\n-    logger = context.getLogger("propertiestool")\n-    ptool = getToolByName(site, "portal_properties", None)\n-    if ptool is None:\n-        return\n-\n-    exporter = queryMultiAdapter((ptool, context), IBody)\n-    # IBody(ptool)\n-    if exporter is None:\n-        logger.warning("Export adapter missing.")\n-        return\n-\n-    context.writeDataFile(_FILENAME, exporter.body, exporter.mime_type)\n-    logger.info("Properties tool exported.")\n-\n-\n-class SimpleItemWithPropertiesXMLAdapter(XMLAdapterBase, PropertyManagerHelpers):\n-\n-    """Node im- and exporter for SimpleItemWithProperties."""\n-\n-    __used_for__ = ISimpleItemWithProperties\n-\n-    def _exportNode(self):\n-        """Export the object as a DOM node."""\n-        # self._doc = doc\n-        node = self._getObjectNode("object")\n-        node.appendChild(self._extractProperties())\n-        return node\n-\n-    def _importNode(self, node):\n-        """Import the object from the DOM node."""\n-        self._initProperties(node)\n-\n-    node = property(_exportNode, _importNode)\n-\n-\n-class PlonePropertiesToolXMLAdapter(XMLAdapterBase, ObjectManagerHelpers):\n-\n-    """Node im- and exporter for Plone PropertiesTool."""\n-\n-    __used_for__ = IPlonePropertiesTool\n-\n-    def _exportNode(self):\n-        """Export the object as a DOM node."""\n-        # self._doc = doc\n-        node = self._getObjectNode("object")\n-        # node.setAttribute(\'xmlns:i18n\', I18NURI)\n-        node.appendChild(self._extractObjects())\n-        return node\n-\n-    def _importNode(self, node):\n-        """Import the object from the DOM node."""\n-        if self.environ.shouldPurge():\n-            self._purgeObjects()\n-\n-        self._initObjects(node)\n-\n-    def _initObjects(self, node):\n-        """Import subobjects"""\n-        # XXX: We could just use the _initObjects() from\n-        # ObjectManagerHelpers except that it looks up the object\n-        # constructor from Products.meta_type and\n-        # SimpleItemWithProperties doesn\'t get registered there.\n-        for child in node.childNodes:\n-            if child.nodeName != "object":\n-                continue\n-            if child.hasAttribute("deprecated"):\n-                continue\n-            parent = self.context\n-\n-            obj_id = str(child.getAttribute("name"))\n-            if obj_id not in parent:\n-                parent._setObject(obj_id, SimpleItemWithProperties(obj_id))\n-\n-            if child.hasAttribute("insert-before"):\n-                insert_before = child.getAttribute("insert-before")\n-                if insert_before == "*":\n-                    parent.moveObjectsToTop(obj_id)\n-                else:\n-                    try:\n-                        position = parent.getObjectPosition(insert_before)\n-                        parent.moveObjectToPosition(obj_id, position)\n-                    except ValueError:\n-                        pass\n-            elif child.hasAttribute("insert-after"):\n-                insert_after = child.getAttribute("insert-after")\n-                if insert_after == "*":\n-                    parent.moveObjectsToBottom(obj_id)\n-                else:\n-                    try:\n-                        position = parent.getObjectPosition(insert_after)\n-                        parent.moveObjectToPosition(obj_id, position + 1)\n-                    except ValueError:\n-                        pass\n-\n-            obj = getattr(self.context, obj_id)\n-            importer = queryMultiAdapter((obj, self.environ), INode)\n-            if importer:\n-                importer.node = child\ndiff --git a/Products/CMFPlone/exportimport/tests/testPropertiesTool.py b/Products/CMFPlone/exportimport/tests/testPropertiesTool.py\ndeleted file mode 100644\nindex 48e13f8075..0000000000\n--- a/Products/CMFPlone/exportimport/tests/testPropertiesTool.py\n+++ /dev/null\n@@ -1,95 +0,0 @@\n-from Products.CMFPlone.exportimport.tests.base import BodyAdapterTestCase\n-from Products.CMFPlone.PropertiesTool import PropertiesTool\n-from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n-from zope.component import provideAdapter\n-\n-\n-_PROPERTYSHEET_XML = b"""\\\n-<?xml version="1.0" encoding="utf-8"?>\n-<object name="site_properties" meta_type="Plone Property Sheet">\n- <property name="title">Site wide properties</property>\n- <property name="displayPublicationDateInByline"\n-    type="boolean">True</property>\n-</object>\n-"""\n-\n-_PROPERTIESTOOL_XML = b"""\\\n-<?xml version="1.0" encoding="utf-8"?>\n-<object name="portal_properties" meta_type="Plone Properties Tool">\n- <object name="site_properties" meta_type="Plone Property Sheet">\n-  <property name="title">Site wide properties</property>\n-  <property name="displayPublicationDateInByline"\n-     type="boolean">True</property>\n- </object>\n-</object>\n-"""\n-\n-\n-class PropertySheetXMLAdapterTests(BodyAdapterTestCase):\n-    def _getTargetClass(self):\n-        from Products.CMFPlone.exportimport.propertiestool import (\n-            SimpleItemWithPropertiesXMLAdapter,\n-        )\n-\n-        return SimpleItemWithPropertiesXMLAdapter\n-\n-    def _populate(self, obj):\n-        obj.manage_changeProperties(title="Site wide properties")\n-        obj.manage_addProperty("displayPublicationDateInByline", True, "boolean")\n-\n-    def setUp(self):\n-        from plone.base.interfaces import ISimpleItemWithProperties\n-        from Products.GenericSetup.interfaces import IBody\n-        from Products.GenericSetup.interfaces import ISetupEnviron\n-\n-        provideAdapter(\n-            self._getTargetClass(), (ISimpleItemWithProperties, ISetupEnviron), IBody\n-        )\n-\n-        self._obj = SimpleItemWithProperties("site_properties")\n-        self._BODY = _PROPERTYSHEET_XML\n-\n-\n-class PropertiesToolXMLAdapterTests(BodyAdapterTestCase):\n-    def _getTargetClass(self):\n-        from Products.CMFPlone.exportimport.propertiestool import (\n-            PlonePropertiesToolXMLAdapter,\n-        )\n-\n-        return PlonePropertiesToolXMLAdapter\n-\n-    def _populate(self, obj):\n-        obj._setObject("site_properties", SimpleItemWithProperties("site_properties"))\n-        obj.site_properties.manage_changeProperties(title="Site wide properties")\n-        obj.site_properties.manage_addProperty(\n-            "displayPublicationDateInByline", True, "boolean"\n-        )\n-\n-    def setUp(self):\n-        from plone.base.interfaces import IPropertiesTool\n-        from plone.base.interfaces import ISimpleItemWithProperties\n-        from Products.CMFPlone.exportimport.propertiestool import (\n-            SimpleItemWithPropertiesXMLAdapter,\n-        )\n-        from Products.GenericSetup.interfaces import IBody\n-        from Products.GenericSetup.interfaces import ISetupEnviron\n-\n-        provideAdapter(self._getTargetClass(), (IPropertiesTool, ISetupEnviron), IBody)\n-        provideAdapter(\n-            SimpleItemWithPropertiesXMLAdapter,\n-            (ISimpleItemWithProperties, ISetupEnviron),\n-            IBody,\n-        )\n-\n-        self._obj = PropertiesTool()\n-        self._BODY = _PROPERTIESTOOL_XML\n-\n-\n-def test_suite():\n-    from unittest import makeSuite\n-    from unittest import TestSuite\n-\n-    suite = TestSuite()\n-    suite.addTest(makeSuite(PropertySheetXMLAdapterTests))\n-    suite.addTest(makeSuite(PropertiesToolXMLAdapterTests))\n-    return suite\ndiff --git a/Products/CMFPlone/profiles/default/componentregistry.xml b/Products/CMFPlone/profiles/default/componentregistry.xml\nindex f35d005476..f1195c4eb2 100644\n--- a/Products/CMFPlone/profiles/default/componentregistry.xml\n+++ b/Products/CMFPlone/profiles/default/componentregistry.xml\n@@ -68,9 +68,6 @@\n     <utility factory="plone.app.viewletmanager.storage.ViewletSettingsStorage"\n              interface="plone.app.viewletmanager.interfaces.IViewletSettingsStorage"\n     />\n-    <utility interface="Products.CMFCore.interfaces.IPropertiesTool"\n-             object="portal_properties"\n-    />\n     <utility interface="Products.CMFCore.interfaces.ISiteRoot"\n              object=""\n     />\ndiff --git a/Products/CMFPlone/profiles/default/propertiestool.xml b/Products/CMFPlone/profiles/default/propertiestool.xml\ndeleted file mode 100644\nindex d90844dacd..0000000000\n--- a/Products/CMFPlone/profiles/default/propertiestool.xml\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-<?xml version="1.0" encoding="utf-8"?>\n-<object meta_type="Plone Properties Tool"\n-        name="portal_properties"\n->\n-  <object meta_type="Plone Property Sheet"\n-          name="navtree_properties"\n-  >\n-    <property name="title">NavigationTree properties</property>\n-  </object>\n-  <object meta_type="Plone Property Sheet"\n-          name="site_properties"\n-  >\n-    <property name="title">Site wide properties</property>\n-  </object>\n-</object>\ndiff --git a/Products/CMFPlone/profiles/default/toolset.xml b/Products/CMFPlone/profiles/default/toolset.xml\nindex dfbff83fe0..1a225138d1 100644\n--- a/Products/CMFPlone/profiles/default/toolset.xml\n+++ b/Products/CMFPlone/profiles/default/toolset.xml\n@@ -42,9 +42,6 @@\n   <required class="Products.CMFPlone.PasswordResetTool.PasswordResetTool"\n             tool_id="portal_password_reset"\n   />\n-  <required class="Products.CMFPlone.PropertiesTool.PropertiesTool"\n-            tool_id="portal_properties"\n-  />\n   <required class="Products.CMFPlone.RegistrationTool.RegistrationTool"\n             tool_id="portal_registration"\n   />\ndiff --git a/Products/CMFPlone/tests/testNavigationView.py b/Products/CMFPlone/tests/testNavigationView.py\nindex fa8d525a6b..aeddd0ba26 100644\n--- a/Products/CMFPlone/tests/testNavigationView.py\n+++ b/Products/CMFPlone/tests/testNavigationView.py\n@@ -121,29 +121,6 @@ def path(x):\n         self.assertEqual(subfolder221map["item"].getPath(), path(subfolder221))\n         self.assertEqual(len(subfolder221map["children"]), 0)\n \n-    def testSitemapUnchangedWithTopLevel(self):\n-        # Test that setting topLevel does not alter the sitemap\n-        ntp = self.portal.portal_properties.navtree_properties\n-        for topLevel in range(0, 5):\n-            ntp.manage_changeProperties(topLevel=topLevel)\n-            view = self.view_class(self.portal, self.request)\n-            sitemap = view.siteMap()\n-            self.assertEqual(\n-                sitemap["children"][-1]["item"].getPath(), "/plone/folder2"\n-            )\n-\n-    def testSitemapUnchangedWithBottomLevel(self):\n-        # Test that setting bottomLevel does not alter the sitemap\n-        ntp = self.portal.portal_properties.navtree_properties\n-        for bottomLevel in range(0, 5):\n-            ntp.manage_changeProperties(bottomLevel=bottomLevel)\n-            view = self.view_class(self.portal, self.request)\n-            sitemap = view.siteMap()\n-            self.assertEqual(\n-                sitemap["children"][-1]["item"].getPath(), "/plone/folder2"\n-            )\n-            self.assertTrue(len(sitemap["children"][-1]["children"]) > 0)\n-\n     def testSitemapWithNavigationRoot(self):\n         self.navigation_settings.root = "/folder2"\n         view = self.view_class(self.portal, self.request)\n@@ -270,7 +247,7 @@ def testTabInfo(self):\n         self.assertTrue("review_state" in tab and tab["review_state"])\n \n     def testDisableFolderTabs(self):\n-        # Setting the site_property disable_folder_sections should remove\n+        # Setting the registry setting generate_tabs to False should remove\n         # all folder based tabs\n         self.navigation_settings.generate_tabs = False\n         view = self.view_class(self.portal, self.request)\ndiff --git a/Products/CMFPlone/tests/testPortalCreation.py b/Products/CMFPlone/tests/testPortalCreation.py\nindex 080d3c6beb..f3474cf2c7 100644\n--- a/Products/CMFPlone/tests/testPortalCreation.py\n+++ b/Products/CMFPlone/tests/testPortalCreation.py\n@@ -42,7 +42,6 @@ def afterSetUp(self):\n         self.types = self.portal.portal_types\n         self.cp = self.portal.portal_controlpanel\n         self.actions = self.portal.portal_actions\n-        self.properties = self.portal.portal_properties\n         self.memberdata = self.portal.portal_memberdata\n         self.catalog = self.portal.portal_catalog\n         self.groups = self.portal.portal_groups\n@@ -146,35 +145,11 @@ def testNoPortalNavigationTool(self):\n         # portal_navigation should have been removed\n         self.assertFalse("portal_navigation" in self.portal)\n \n-    def testNoFormProperties(self):\n-        # form_properties should have been removed\n-        self.assertFalse("form_properties" in self.properties)\n-\n-    def testNoNavigationProperties(self):\n-        # navigation_properties should have been removed\n-        self.assertFalse("navigation_properties" in self.properties)\n-\n     def testFormToolTipsProperty(self):\n         # formtooltips should have been removed\n         self.assertFalse(self.memberdata.hasProperty("formtooltips"))\n \n     def testNavTreeProperties(self):\n-        # navtree_properties should contain the new properties\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("parentMetaTypesNotToQuery")\n-        )\n-        self.assertFalse(self.properties.navtree_properties.hasProperty("sitemapDepth"))\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("showAllParents")\n-        )\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("metaTypesNotToList")\n-        )  # noqa\n-        self.assertFalse(\n-            self.properties.navtree_properties.hasProperty("sortAttribute")\n-        )\n-        self.assertFalse(self.properties.navtree_properties.hasProperty("sortOrder"))\n-\n         registry = getUtility(IRegistry)\n         self.assertTrue("plone.workflow_states_to_show" in registry)\n         self.assertTrue("plone.filter_on_workflow" in registry)\n@@ -946,9 +921,6 @@ def testFinalStepsWithMembersFolderDeleted(self):\n \n \n class TestManagementPageCharset(PloneTestCase.PloneTestCase):\n-    def afterSetUp(self):\n-        self.properties = self.portal.portal_properties\n-\n     def testManagementPageCharset(self):\n         manage_charset = getattr(self.portal, "management_page_charset", None)\n         self.assertTrue(manage_charset)\ndiff --git a/Products/CMFPlone/tests/testWebDAV.py b/Products/CMFPlone/tests/testWebDAV.py\nindex 2105ae4390..e3938407ef 100644\n--- a/Products/CMFPlone/tests/testWebDAV.py\n+++ b/Products/CMFPlone/tests/testWebDAV.py\n@@ -18,17 +18,6 @@\n """\n \n \n-class TestDAVProperties(PloneTestCase.PloneTestCase):\n-    def testPropertiesToolTitle(self):\n-        ptool = getToolByName(self.portal, "portal_properties")\n-        psets = dict(ptool.propertysheets.items())\n-        self.assertTrue("webdav" in psets.keys())\n-        default = psets["webdav"]\n-        items = dict(default.propertyItems())\n-        self.assertTrue("displayname" in items.keys())\n-        self.assertEqual(items["displayname"], ptool.title)\n-\n-\n class TestPUTObjects(PloneTestCase.PloneTestCase):\n     # PUT objects into Plone including special cases like index_html.\n     # Confirms fix for http://dev.plone.org/plone/ticket/1375\ndiff --git a/Products/CMFPlone/tests/test_defaultpage.py b/Products/CMFPlone/tests/test_defaultpage.py\nindex 3be7eafd7d..ac633b5d6b 100644\n--- a/Products/CMFPlone/tests/test_defaultpage.py\n+++ b/Products/CMFPlone/tests/test_defaultpage.py\n@@ -106,8 +106,8 @@ def test_get_default_page_step_3_2(self):\n         self.assertEqual("d1", get_default_page(self.folder))\n \n     def test_get_default_page_step_4(self):\n-        # 4. Else, look up the property default_page in site_properties for\n-        #   magic ids and test these\n+        # 4. Else, look up the property plone.default_page in the registry for\n+        #    magic ids and test these\n         registry = getUtility(IRegistry)\n         registry["plone.default_page"] = ["d1"]\n         self.folder.invokeFactory("Document", "d1", title="Doc 1")\ndiff --git a/Products/CMFPlone/tests/test_zmi.py b/Products/CMFPlone/tests/test_zmi.py\nindex 3ec5997246..8be5e75e98 100644\n--- a/Products/CMFPlone/tests/test_zmi.py\n+++ b/Products/CMFPlone/tests/test_zmi.py\n@@ -121,11 +121,6 @@ def test_portal_modifier(self):\n         view = self.portal.restrictedTraverse(url)\n         self.assertTrue(view(), msg=f"{url} is broken")\n \n-    def test_portal_properties(self):\n-        url = "portal_properties/manage_main"\n-        view = self.portal.restrictedTraverse(url)\n-        self.assertTrue(view(), msg=f"{url} is broken")\n-\n     def test_portal_purgepolicy(self):\n         url = "portal_purgepolicy/manage_propertiesForm"\n         view = self.portal.restrictedTraverse(url)\ndiff --git a/news/125.breaking b/news/125.breaking\nnew file mode 100644\nindex 0000000000..6c3870d67e\n--- /dev/null\n+++ b/news/125.breaking\n@@ -0,0 +1,3 @@\n+Remove `propertiestool` import step and usage of `portal_properties`.\n+Remove `site_properties` from `main_template.pt` and ajax template.\n+[maurits]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-08-05T20:53:02+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/32554c8324256acd5bc7e3f8eccaeef3fae6920a

Merge branch 'master' into rohnsha0-3860

Files changed:
A news/6104.internal
M CHANGES.md
M Products/CMFPlone/__init__.py
M Products/CMFPlone/interfaces/__init__.py
M Products/CMFPlone/profiles/default/metadata.xml
M Products/CMFPlone/tests/testInterfaces.py
M setup.py
D Products/CMFPlone/PropertiesTool.py
D Products/CMFPlone/www/addPropertySheet.zpt
D news/125.breaking
D news/3988.internal

b'diff --git a/CHANGES.md b/CHANGES.md\nindex 06a95f78ec..89b8127809 100644\n--- a/CHANGES.md\n+++ b/CHANGES.md\n@@ -15,6 +15,21 @@\n \n <!-- towncrier release notes start -->\n \n+## 6.1.0a4 (2024-08-01)\n+\n+\n+### Breaking changes:\n+\n+- Remove `propertiestool` import step and usage of `portal_properties`.\n+  Remove `site_properties` from `main_template.pt` and ajax template.\n+  Remove `PropertiesTool` module.\n+  [maurits] #125\n+\n+\n+### Internal:\n+\n+- Update the link to the PLIPs page for Plone 6 Documentation. @stevepiercy #3988\n+\n ## 6.1.0a4.dev0 (2024-07-08)\n \n \ndiff --git a/Products/CMFPlone/PropertiesTool.py b/Products/CMFPlone/PropertiesTool.py\ndeleted file mode 100644\nindex 4cc6feb44e..0000000000\n--- a/Products/CMFPlone/PropertiesTool.py\n+++ /dev/null\n@@ -1,144 +0,0 @@\n-from AccessControl import ClassSecurityInfo\n-from AccessControl.class_init import InitializeClass\n-from Acquisition import aq_inner\n-from Acquisition import aq_parent\n-from App.special_dtml import DTMLFile\n-from OFS.Folder import Folder\n-from OFS.PropertyManager import PropertyManager\n-from OFS.SimpleItem import SimpleItem\n-from plone.base.interfaces import IPropertiesTool\n-from plone.base.interfaces import ISimpleItemWithProperties\n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.CMFCore.permissions import ManagePortal\n-from Products.CMFCore.utils import UniqueObject\n-from Products.CMFPlone.PloneBaseTool import PloneBaseTool\n-from Products.CMFPlone.utils import WWW_DIR\n-from Products.MailHost.interfaces import IMailHost\n-from Products.PageTemplates.PageTemplateFile import PageTemplateFile\n-from zope.component import getUtility\n-from zope.component import queryUtility\n-from zope.deprecation import deprecate\n-from zope.interface import implementer\n-\n-\n-@implementer(IPropertiesTool)\n-class PropertiesTool(PloneBaseTool, Folder, UniqueObject):\n-    """Plone properties tool"""\n-\n-    id = "portal_properties"\n-    toolicon = "skins/plone_images/topic_icon.png"\n-\n-    meta_type = "Plone Properties Tool"\n-    meta_types = (\n-        {"name": "Plone Property Sheet", "action": "manage_addPropertySheetForm"},\n-    )\n-\n-    manage_options = (\n-        (Folder.manage_options[0],)\n-        + ({"label": "Overview", "action": "manage_overview"},)\n-        + SimpleItem.manage_options\n-    )\n-\n-    manage_addPropertySheetForm = PageTemplateFile("www/addPropertySheet", globals())\n-\n-    security = ClassSecurityInfo()\n-\n-    security.declareProtected(ManagePortal, "manage_overview")\n-    manage_overview = DTMLFile("explainPropertiesTool", WWW_DIR)\n-\n-    def all_meta_types(self, interfaces=None):\n-        return self.meta_types\n-\n-    security.declareProtected(ManagePortal, "addPropertySheet")\n-\n-    def addPropertySheet(self, id, title="", propertysheet=None):\n-        # Add a new PropertySheet.\n-        o = SimpleItemWithProperties(id, title)\n-\n-        # copy the propertysheet values onto the new instance\n-        if propertysheet is not None:\n-            if not hasattr(propertysheet, "propertyIds"):\n-                raise TypeError("propertysheet needs to be a PropertyManager")\n-\n-            for property in propertysheet.propertyMap():\n-                pid = property.get("id")\n-                ptype = property.get("type")\n-                pvalue = propertysheet.getProperty(pid)\n-                if not hasattr(o, pid):\n-                    o._setProperty(pid, pvalue, ptype)\n-\n-        self._setObject(id, o)\n-\n-    security.declareProtected(ManagePortal, "manage_addPropertySheet")\n-\n-    def manage_addPropertySheet(self, id, title="", propertysheet=None, REQUEST=None):\n-        """Add a instance of a Property Sheet if handed a\n-        propertysheet put the properties into new propertysheet.\n-        """\n-        self.addPropertySheet(id, title, propertysheet)\n-\n-        if REQUEST is not None:\n-            return self.manage_main()\n-\n-    #\n-    #   \'portal_properties\' interface methods\n-    #\n-    security.declareProtected(ManagePortal, "editProperties")\n-\n-    def editProperties(self, props):\n-        # Change portal settings.\n-        aq_parent(aq_inner(self)).manage_changeProperties(props)\n-        if hasattr(self, "propertysheets"):\n-            ps = self.propertysheets\n-            if hasattr(ps, "props"):\n-                ps.props.manage_changeProperties(props)\n-\n-    def title(self):\n-        site = queryUtility(ISiteRoot)\n-        if site is None:\n-            # fallback\n-            return aq_parent(aq_inner(self)).title\n-        return site.title\n-\n-    def smtp_server(self):\n-        return getUtility(IMailHost).smtp_host\n-\n-    @deprecate(\n-        "The portal portal_properties tool will be removed in Plone 6.1. "\n-        "Use the portal_registry instead. "\n-        "Check https://github.com/plone/Products.CMFPlone/issues/125 "\n-        "for more details."\n-    )\n-    def hasProperty(self, id):\n-        return super().hasProperty(id)\n-\n-\n-InitializeClass(PropertiesTool)\n-\n-\n-@implementer(ISimpleItemWithProperties)\n-class SimpleItemWithProperties(PropertyManager, SimpleItem):\n-    """\n-    A common base class for objects with configurable\n-    properties in a fixed schema.\n-    """\n-\n-    def __init__(self, id, title=""):\n-        self.id = id\n-        self.title = title\n-\n-    meta_type = "Plone Property Sheet"\n-\n-    manage_options = PropertyManager.manage_options + SimpleItem.manage_options\n-\n-    @deprecate(\n-        "The portal portal_properties tool will be removed in Plone 6.1. "\n-        "Use the portal_registry instead. "\n-        "Check https://github.com/plone/Products.CMFPlone/issues/125 "\n-        "for more details."\n-    )\n-    def hasProperty(self, id):\n-        return super().hasProperty(id)\n-\n-\n-InitializeClass(SimpleItemWithProperties)\ndiff --git a/Products/CMFPlone/__init__.py b/Products/CMFPlone/__init__.py\nindex ff52822e9e..f9fab8c26f 100644\n--- a/Products/CMFPlone/__init__.py\n+++ b/Products/CMFPlone/__init__.py\n@@ -153,7 +153,6 @@ def initialize(context):\n     from Products.CMFPlone import patches  # noqa\n     from Products.CMFPlone import PloneControlPanel\n     from Products.CMFPlone import PloneTool\n-    from Products.CMFPlone import PropertiesTool\n     from Products.CMFPlone import RegistrationTool\n     from Products.CMFPlone import SkinsTool\n     from Products.CMFPlone import TranslationServiceTool\n@@ -166,7 +165,6 @@ def initialize(context):\n         PloneTool.PloneTool,\n         WorkflowTool.WorkflowTool,\n         CachingPolicyManager.CachingPolicyManager,\n-        PropertiesTool.PropertiesTool,\n         MigrationTool.MigrationTool,\n         PloneControlPanel.PloneControlPanel,\n         RegistrationTool.RegistrationTool,\ndiff --git a/Products/CMFPlone/interfaces/__init__.py b/Products/CMFPlone/interfaces/__init__.py\nindex afb3e1df15..b275ed2efd 100644\n--- a/Products/CMFPlone/interfaces/__init__.py\n+++ b/Products/CMFPlone/interfaces/__init__.py\n@@ -51,8 +51,6 @@\n     IPasswordResetToolView="plone.base.interfaces.password_reset:IPasswordResetToolView",\n     IPWResetTool="plone.base.interfaces.password_reset:IPWResetTool",\n     IPatternsSettings="plone.base.interfaces.patterns:IPatternsSettings",\n-    IPropertiesTool="plone.base.interfaces.properties:IPropertiesTool",\n-    ISimpleItemWithProperties="plone.base.interfaces.properties:ISimpleItemWithProperties",\n     IBundleRegistry="plone.base.interfaces.resources:IBundleRegistry",\n     IResourceRegistry="plone.base.interfaces.resources:IResourceRegistry",\n     IMigratingPloneSiteRoot="plone.base.interfaces.siteroot:IMigratingPloneSiteRoot",\ndiff --git a/Products/CMFPlone/profiles/default/metadata.xml b/Products/CMFPlone/profiles/default/metadata.xml\nindex d6d72c30c5..74dbe99aa0 100644\n--- a/Products/CMFPlone/profiles/default/metadata.xml\n+++ b/Products/CMFPlone/profiles/default/metadata.xml\n@@ -1,4 +1,4 @@\n <?xml version="1.0" encoding="utf-8"?>\n <metadata>\n-  <version>6103</version>\n+  <version>6104</version>\n </metadata>\ndiff --git a/Products/CMFPlone/tests/testInterfaces.py b/Products/CMFPlone/tests/testInterfaces.py\nindex a44348e62f..1766742b07 100644\n--- a/Products/CMFPlone/tests/testInterfaces.py\n+++ b/Products/CMFPlone/tests/testInterfaces.py\n@@ -6,8 +6,6 @@\n from Products.CMFPlone.PloneControlPanel import PloneControlPanel\n from Products.CMFPlone.PloneTool import PloneTool\n from Products.CMFPlone.Portal import PloneSite\n-from Products.CMFPlone.PropertiesTool import PropertiesTool\n-from Products.CMFPlone.PropertiesTool import SimpleItemWithProperties\n from Products.CMFPlone.RegistrationTool import RegistrationTool\n from Products.CMFPlone.SkinsTool import SkinsTool\n from Products.CMFPlone.TypesTool import TypesTool\n@@ -300,8 +298,6 @@ def _testStuff(self):\n     (PloneConfiglet, ()),\n     (PloneTool, ()),\n     (PloneSite, ()),\n-    (PropertiesTool, ()),\n-    (SimpleItemWithProperties, ()),\n     (RegistrationTool, ()),\n     (SkinsTool, ()),\n     (TypesTool, ()),\ndiff --git a/Products/CMFPlone/www/addPropertySheet.zpt b/Products/CMFPlone/www/addPropertySheet.zpt\ndeleted file mode 100644\nindex 2d01f3bcda..0000000000\n--- a/Products/CMFPlone/www/addPropertySheet.zpt\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-<tal:doctype tal:replace="structure string:&lt;!DOCTYPE html&gt;" />\n-<html>\n-<head>\n-<meta http-equiv="content-type" content="text/html;charset=utf-8"\n-      tal:define="charset context/management_page_charset | string:utf-8;"\n-      tal:attributes="content string:text/html;;charset=$charset;"/>\n-\n-<title>Zope</title>\n-<link rel="stylesheet" type="text/css" href="/manage_page_style.css" />\n-\n-</head>\n-<body bgcolor="#ffffff" link="#000099" alink="#000099" vlink="#000099">\n-\n-  <div class="form-title">\n-  Add Propertysheet\n-  </div>\n-\n-<form action="manage_addPropertySheet" method="post">\n-    <div class="form-help">\n-    Enter an ID and title to add a new PropertySheet.\n-    </div>\n-    <div class="form-label">\n-    Id\n-    </div>\n-    <input type="text" name="id" size="40" />\n-\n-    <div class="form-label">\n-    Title\n-    </div>\n-    <input type="text" name="title" size="40" value="" />\n-\n-    <div class="form-element">\n-    <input class="form-element" type="submit" name="submit"\n-     value=" Add PropertySheet " />\n-    </div>\n-</form>\n-\n-  </body>\n-</html>\ndiff --git a/news/125.breaking b/news/125.breaking\ndeleted file mode 100644\nindex 6c3870d67e..0000000000\n--- a/news/125.breaking\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Remove `propertiestool` import step and usage of `portal_properties`.\n-Remove `site_properties` from `main_template.pt` and ajax template.\n-[maurits]\ndiff --git a/news/3988.internal b/news/3988.internal\ndeleted file mode 100644\nindex 420c7c968f..0000000000\n--- a/news/3988.internal\n+++ /dev/null\n@@ -1 +0,0 @@\n-Update the link to the PLIPs page for Plone 6 Documentation. @stevepiercy\ndiff --git a/news/6104.internal b/news/6104.internal\nnew file mode 100644\nindex 0000000000..05e73167c4\n--- /dev/null\n+++ b/news/6104.internal\n@@ -0,0 +1,2 @@\n+Updated metadata version to 6104.\n+[maurits]\ndiff --git a/setup.py b/setup.py\nindex d296af837a..35f8fbeec3 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -2,7 +2,7 @@\n from setuptools import setup\n \n \n-version = "6.1.0a4.dev1"\n+version = "6.1.0a5.dev0"\n \n \n setup(\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-08-08T22:03:29+05:30
Author: Rohan Shaw (rohnsha0) <86848116+rohnsha0@users.noreply.github.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/54efb42cdaee0e450b302550fd447a89aedcdb6b

Update Products/CMFPlone/browser/search.py

adds documentations to code

Co-authored-by: Jens W. Klein &lt;jk@kleinundpartner.at&gt;

Files changed:
M Products/CMFPlone/browser/search.py

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex 5687ec5121..46668ee03b 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -185,14 +185,24 @@ def filter_types(self, types):\n         if not isinstance(types, list):\n             types = [types]\n \n-        # Get the vocabulary\n-        vocab_factory = queryUtility(\n+        # We want to have the configured types to be exposed in the search sorted for humans (by translated Title).     \n+        # Those are stored in the Plone registry. They are called here UserFriendlyTypes.        \n+        # \n+        # Confusingly, on the other hand we have the ReallyUserFriendlyTypes vocabulary from \n+        # plone.app.vocabularies, which is already sorted accordingly and contain all possible types, \n+        # except "Temp Folder", "Plone Site" and deprecated types. \n+\n+        # fetch the sorted ReallyUserFriendlyTypes vocabulary\n+          vocab_factory = queryUtility(\n             IVocabularyFactory, "plone.app.vocabularies.ReallyUserFriendlyTypes"\n         )\n         vocab = vocab_factory(self.context)\n \n-        # Filter types based on plone_utils and maintain vocabulary order\n+        # get the configured values from the registry and pass the input types to be reduced to possible values\n         user_friendly_types = plone_utils.getUserFriendlyTypes(types)\n+\n+        # Filter the sorted ReallyUserFriendlyTypes down to the configured values from the registry,\n+        #  but keep the order.\n         sorted_types = [term.value for term in vocab if term.value in user_friendly_types]\n \n         return sorted_types\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-08-09T10:15:23+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@py76.be>
Commit: https://github.com/plone/Products.CMFPlone/commit/beadedd16969f0297e62b920510254e326a0dac2

Merge pull request #3985 from plone/rohnsha0-3860

Fix: Sort portal types alphabetically in search filter

Files changed:
A news/3860.bugfix
M Products/CMFPlone/browser/search.py
M Products/CMFPlone/browser/templates/search.pt

b'diff --git a/Products/CMFPlone/browser/search.py b/Products/CMFPlone/browser/search.py\nindex ae4d6cbe27..46668ee03b 100644\n--- a/Products/CMFPlone/browser/search.py\n+++ b/Products/CMFPlone/browser/search.py\n@@ -14,6 +14,7 @@\n from zope.component import queryUtility\n from zope.i18nmessageid import MessageFactory\n from zope.publisher.browser import BrowserView\n+from zope.schema.interfaces import IVocabularyFactory\n from ZTUtils import make_query\n \n import json\n@@ -183,7 +184,28 @@ def filter_types(self, types):\n         plone_utils = getToolByName(self.context, "plone_utils")\n         if not isinstance(types, list):\n             types = [types]\n-        return plone_utils.getUserFriendlyTypes(types)\n+\n+        # We want to have the configured types to be exposed in the search sorted for humans (by translated Title).     \n+        # Those are stored in the Plone registry. They are called here UserFriendlyTypes.        \n+        # \n+        # Confusingly, on the other hand we have the ReallyUserFriendlyTypes vocabulary from \n+        # plone.app.vocabularies, which is already sorted accordingly and contain all possible types, \n+        # except "Temp Folder", "Plone Site" and deprecated types. \n+\n+        # fetch the sorted ReallyUserFriendlyTypes vocabulary\n+          vocab_factory = queryUtility(\n+            IVocabularyFactory, "plone.app.vocabularies.ReallyUserFriendlyTypes"\n+        )\n+        vocab = vocab_factory(self.context)\n+\n+        # get the configured values from the registry and pass the input types to be reduced to possible values\n+        user_friendly_types = plone_utils.getUserFriendlyTypes(types)\n+\n+        # Filter the sorted ReallyUserFriendlyTypes down to the configured values from the registry,\n+        #  but keep the order.\n+        sorted_types = [term.value for term in vocab if term.value in user_friendly_types]\n+\n+        return sorted_types\n \n     def types_list(self):\n         # only show those types that have any content\ndiff --git a/Products/CMFPlone/browser/templates/search.pt b/Products/CMFPlone/browser/templates/search.pt\nindex 3e0d611acf..5e89454238 100644\n--- a/Products/CMFPlone/browser/templates/search.pt\n+++ b/Products/CMFPlone/browser/templates/search.pt\n@@ -87,7 +87,7 @@\n             </a>\n           </div>\n \n-          <div class="nav-item dropdown" id="search-filter">\n+          <div class="nav-item dropdown me-3" id="search-filter">\n             <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="search-filter-toggle" i18n:translate="narrow_search_options">\n               Filter the results\n             </a>\ndiff --git a/news/3860.bugfix b/news/3860.bugfix\nnew file mode 100644\nindex 0000000000..e9ef737970\n--- /dev/null\n+++ b/news/3860.bugfix\n@@ -0,0 +1 @@\n+Sort portal types in search filter according to `ReallyUserFriendlyTypes` using `unidecode` in `plone.app.vocabularies`. @rohnsha0\n\\ No newline at end of file\n'

