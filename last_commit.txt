Repository: plone.restapi


Branch: refs/heads/main
Date: 2024-02-24T11:17:00-08:00
Author: Wesley Barroso Lopes (wesleybl) <wesleybl@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/1f97c6a576d9136057ecf829b0f758fcd1e753ca

Give Site Administrator permission to add users to groups (#1751)

* Give Site Administrator permission to add users to groups

The addMember method requires the user to have the "Manage Users"
permission but the Site Administrator does not have this permission.
Then we use the addPrincipalToGroup method, which does not require this
permission.

* Update news/1750.bugfix

---------

Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;

Files changed:
A news/1750.bugfix
M src/plone/restapi/services/groups/add.py
M src/plone/restapi/services/groups/update.py
M src/plone/restapi/tests/test_services_groups.py

b'diff --git a/news/1750.bugfix b/news/1750.bugfix\nnew file mode 100644\nindex 000000000..9d584f24d\n--- /dev/null\n+++ b/news/1750.bugfix\n@@ -0,0 +1 @@\n+Fixed the permission check for adding users to groups and removing users from groups, so that it is allowed for users with the Site Administrator role. @wesleybl\ndiff --git a/src/plone/restapi/services/groups/add.py b/src/plone/restapi/services/groups/add.py\nindex e9b5ab5d1..43f1d830d 100644\n--- a/src/plone/restapi/services/groups/add.py\n+++ b/src/plone/restapi/services/groups/add.py\n@@ -71,7 +71,7 @@ def reply(self):\n         # Add members\n         group = gtool.getGroupById(groupname)\n         for userid in users:\n-            group.addMember(userid)\n+            gtool.addPrincipalToGroup(userid, groupname)\n \n         self.request.response.setStatus(201)\n         self.request.response.setHeader(\ndiff --git a/src/plone/restapi/services/groups/update.py b/src/plone/restapi/services/groups/update.py\nindex 5cd3212aa..68fd56502 100644\n--- a/src/plone/restapi/services/groups/update.py\n+++ b/src/plone/restapi/services/groups/update.py\n@@ -112,9 +112,9 @@ def reply(self):\n         )\n \n         properties = {}\n-        for id, property in group.propertyItems():\n-            if data.get(id, False):\n-                properties[id] = data[id]\n+        for _id, _property in group.propertyItems():\n+            if data.get(_id, False):\n+                properties[_id] = data[_id]\n         group.setGroupProperties(properties)\n \n         # Add/remove members\n@@ -122,8 +122,8 @@ def reply(self):\n         for userid, allow in users.items():\n             if allow:\n                 if userid not in memberids:\n-                    group.addMember(userid)\n+                    portal_groups.addPrincipalToGroup(userid, group.id)\n             else:\n                 if userid in memberids:\n-                    group.removeMember(userid)\n+                    portal_groups.removePrincipalFromGroup(userid, group.id)\n         return self.reply_no_content()\ndiff --git a/src/plone/restapi/tests/test_services_groups.py b/src/plone/restapi/tests/test_services_groups.py\nindex 428069d84..44ac51065 100644\n--- a/src/plone/restapi/tests/test_services_groups.py\n+++ b/src/plone/restapi/tests/test_services_groups.py\n@@ -188,6 +188,17 @@ def test_delete_non_existing_group(self):\n \n         self.assertEqual(response.status_code, 404)\n \n+    def test_siteadm_add_user_to_group(self):\n+        self.set_siteadm()\n+        payload = {\n+            "users": {TEST_USER_ID: True, SITE_OWNER_NAME: False},\n+        }\n+        self.api_session.patch("/@groups/Reviewers", json=payload)\n+        transaction.commit()\n+\n+        reviewers = self.gtool.getGroupById("Reviewers")\n+        self.assertIn(TEST_USER_ID, reviewers.getGroupMemberIds())\n+\n     def test_siteadm_not_add_user_to_group_with_manager_role(self):\n         self.set_siteadm()\n         payload = {\n'

