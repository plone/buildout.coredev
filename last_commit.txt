Repository: plone.alterego


Branch: refs/heads/master
Date: 2021-11-14T20:12:48+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.alterego/commit/c2581875b9f6f0abc96f8aeab008840929939009

fix ReST

Files changed:
M README.rst

b'diff --git a/README.rst b/README.rst\nindex 1546157..4469fd8 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -12,17 +12,14 @@ Usage\n \n To use this package, you should:\n \n- - Identify an appropriate parent module where the dynamic module will live.\n+- Identify an appropriate parent module where the dynamic module will live.\n \n- - Ensure that plone.alterego.dynamic.create() is called with this module and\n-   a dynamic module name. Typically, you\'d do this in the parent module\n-   itself, so that the dynamic module is instantiated as soon as the parent\n-   module is imported.\n+- Ensure that plone.alterego.dynamic.create() is called with this module and a dynamic module name. \n+  Typically, you\'d do this in the parent module itself, so that the dynamic module is instantiated as soon as the parent module is imported.\n \n- - Register a named utility providing IDynamicObjectFactory. The name should\n-   be the same as the full dotted path to the dynamic module. This utility\n-   will be responsible for creating the objects that inhabit the dynamic\n-   module.\n+- Register a named utility providing IDynamicObjectFactory. \n+  The name should be the same as the full dotted path to the dynamic module. \n+  This utility will be responsible for creating the objects that inhabit the dynamicmodule.\n \n Example\n -------\n@@ -32,6 +29,8 @@ For a more fully-featured example, see the alterego.txt doctest.\n Let\'s say we have a generic content class that should get a unique interface\n for each instance.\n \n+.. code-block:: python\n+\n     >>> from zope import interface\n     >>> class IContent(interface.Interface):\n     ...     pass\n@@ -44,16 +43,22 @@ To create the unique interface, we will use a dynamic module. There is a\n helper method to make this easier. It takes a parent module and a name as\n arguments:\n \n-    >>> from plone.alterego.dynamic import create\n+.. code-block:: python\n+\n+>>> from plone.alterego.dynamic import create\n     >>> dynamic = create(\'plone.alterego.tests.dynamic\')\n \n We can now import this module:\n \n+.. code-block:: python\n+\n     >>> from plone.alterego.tests import dynamic\n \n To make objects on demand, we\'ll need to register a utility that can act\n as a factory.\n \n+.. code-block:: python\n+\n     >>> from plone.alterego.interfaces import IDynamicObjectFactory\n     >>> from zope.interface.interface import InterfaceClass\n     >>> class InterfaceOnDemand(object):\n@@ -66,7 +71,9 @@ as a factory.\n \n This utility should have a name that corresponds to the full,\n dotted name to the dynamic module. This way, we can have different factories\n-for different dynamic modules. We\'d register this in ZCML like so::\n+for different dynamic modules. We\'d register this in ZCML like so:\n+\n+.. code-block:: XML\n \n     <utility\n         name="plone.alterego.tests.dynamic"\n@@ -77,6 +84,8 @@ for different dynamic modules. We\'d register this in ZCML like so::\n From this point forward, when we access an attribute of the dynamic module,\n the factory will be used:\n \n+.. code-block:: python\n+\n     >>> dynamic.IOne\n     <InterfaceClass plone.alterego.tests.dynamic.IOne>\n \n'

