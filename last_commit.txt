Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2020-08-12T23:32:34+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.app.contenttypes/commit/46c97acc8b35866f7ce32c3ce4d6db988703fc01

Fixed problems in getMimeTypeIcon.

The contentType of the file was ignored, and icon paths could have a duplicate `++resource++mimetype.icons/`.

Files changed:
A news/569.bugfix
A plone/app/contenttypes/tests/test_browser_utils.py
M plone/app/contenttypes/browser/utils.py

b'diff --git a/news/569.bugfix b/news/569.bugfix\nnew file mode 100644\nindex 00000000..9bb94336\n--- /dev/null\n+++ b/news/569.bugfix\n@@ -0,0 +1,3 @@\n+Fixed problems in ``getMimeTypeIcon``.\n+The contentType of the file was ignored, and icon paths could have a duplicate ``++resource++mimetype.icons/``.\n+[maurits]\ndiff --git a/plone/app/contenttypes/browser/utils.py b/plone/app/contenttypes/browser/utils.py\nindex ba07fb31..6448f087 100644\n--- a/plone/app/contenttypes/browser/utils.py\n+++ b/plone/app/contenttypes/browser/utils.py\n@@ -9,6 +9,9 @@\n from zope.interface import Interface\n \n \n+PREFIX = "++resource++mimetype.icons/"\n+\n+\n class IUtils(Interface):\n     """\n     """\n@@ -21,43 +24,39 @@ def getMimeTypeIcon(content_file):\n \n @implementer(IUtils)\n class Utils(BrowserView):\n+    def _get_mimes(self, content_file):\n+        # We use \'yield\' so iteration can be cut short\n+        # if the calling code is happy.\n+        context = aq_inner(self.context)\n+        mtr = getToolByName(context, "mimetypes_registry")\n+        if content_file.contentType:\n+            # this gives a tuple\n+            for mime in mtr.lookup(content_file.contentType):\n+                yield mime\n+        if content_file.filename:\n+            # this gives a single mime type\n+            yield mtr.lookupExtension(content_file.filename)\n+        for mime in mtr.lookup("application/octet-stream"):\n+            yield mime\n \n     @memoize\n     def getMimeTypeIcon(self, content_file):\n+        # Get possible mime types, and try to find an icon path.\n+        # Keep the first one, in case there is no good match.\n+        first = None\n+        for mime in self._get_mimes(content_file):\n+            if first is None:\n+                first = mime\n+            if hasattr(mime, "icon_path"):\n+                icon_path = mime.icon_path\n+                if not icon_path.startswith("++"):\n+                    icon_path = PREFIX + icon_path\n+                return icon_path\n+\n+        if first is None:\n+            # Probably does not happen in practice.\n+            return ""\n         context = aq_inner(self.context)\n-        pstate = getMultiAdapter(\n-            (context, self.request),\n-            name=u\'plone_portal_state\'\n-        )\n+        pstate = getMultiAdapter((context, self.request), name=u"plone_portal_state")\n         portal_url = pstate.portal_url()\n-        mtr = getToolByName(context, \'mimetypes_registry\')\n-        mime = []\n-        if content_file.contentType:\n-            mime.append(mtr.lookup(content_file.contentType))\n-        if content_file.filename:\n-            mime.append(mtr.lookupExtension(content_file.filename))\n-        mime.append(mtr.lookup(\'application/octet-stream\')[0])\n-        icon_paths = [\'++resource++mimetype.icons/\' + m.icon_path\n-                      for m in mime if hasattr(m, \'icon_path\')]\n-        if icon_paths:\n-            return icon_paths[0]\n-\n-        return portal_url + \'/\' + guess_icon_path(mime[0])\n-\n-        # function works but is possibly not best implementation. following\n-        # code might work for files where the mimetype is not directly\n-        # recognized\n-\n-#        if len(mime) > 0:\n-#            icon = portal_url + "/" + guess_icon_path(mime[0])\n-#        else:\n-#            mime = mtr.lookupExtension(content_file.filename)\n-#            if mime <> "":\n-#                icon = portal_url + "/" + guess_icon_path(mime)\n-#            else:\n-#                logger.info(\n-#                   "No MimeType Icon found for MimeType: " + \\\n-#                   str(content_file.contentType)\n-#                   )\n-#                icon = portal_url + "/application.png"\n-#        return icon\n+        return portal_url + "/" + guess_icon_path(first)\ndiff --git a/plone/app/contenttypes/tests/test_browser_utils.py b/plone/app/contenttypes/tests/test_browser_utils.py\nnew file mode 100644\nindex 00000000..e1fa2846\n--- /dev/null\n+++ b/plone/app/contenttypes/tests/test_browser_utils.py\n@@ -0,0 +1,54 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n+from zope.component import getMultiAdapter\n+\n+import unittest\n+\n+\n+# The default fallback is the icon for \'application/octet-stream\':\n+FALLBACK = "++resource++mimetype.icons/application.png"\n+# Most or all icons should have this as prefix:\n+PREFIX = "++resource++mimetype.icons/"\n+\n+\n+class DummyFile(object):\n+    """Dummy file object.\n+\n+    For these tests, we only need a contentType and filename.\n+    """\n+\n+    def __init__(self, contentType, filename):\n+        self.contentType = contentType\n+        self.filename = filename\n+\n+\n+class MimeTypeIconIntegrationTest(unittest.TestCase):\n+\n+    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        self.view = getMultiAdapter((portal, request), name="contenttype_utils")\n+\n+    def test_none(self):\n+        self.assertEqual(self.view.getMimeTypeIcon(DummyFile(None, None)), FALLBACK)\n+\n+    def test_unknown(self):\n+        self.assertEqual(\n+            self.view.getMimeTypeIcon(DummyFile("some/unknown", "unkown.unknown")),\n+            FALLBACK,\n+        )\n+\n+    def test_contenttype_pdf(self):\n+        self.assertEqual(\n+            self.view.getMimeTypeIcon(DummyFile("application/pdf", None)),\n+            PREFIX + "pdf.png",\n+        )\n+\n+    def test_filename_pdf(self):\n+        self.assertEqual(\n+            self.view.getMimeTypeIcon(DummyFile(None, "plone.pdf")), PREFIX + "pdf.png"\n+        )\n'

Repository: plone.app.contenttypes


Branch: refs/heads/master
Date: 2020-08-13T10:21:37+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.contenttypes/commit/0726b0152da7d74919a5989814517a7cef473890

Merge pull request #570 from plone/maurits/issue-569-getMimeTypeIcon

Fixed problems in getMimeTypeIcon.

Files changed:
A news/569.bugfix
A plone/app/contenttypes/tests/test_browser_utils.py
M plone/app/contenttypes/browser/utils.py

b'diff --git a/news/569.bugfix b/news/569.bugfix\nnew file mode 100644\nindex 00000000..9bb94336\n--- /dev/null\n+++ b/news/569.bugfix\n@@ -0,0 +1,3 @@\n+Fixed problems in ``getMimeTypeIcon``.\n+The contentType of the file was ignored, and icon paths could have a duplicate ``++resource++mimetype.icons/``.\n+[maurits]\ndiff --git a/plone/app/contenttypes/browser/utils.py b/plone/app/contenttypes/browser/utils.py\nindex ba07fb31..6448f087 100644\n--- a/plone/app/contenttypes/browser/utils.py\n+++ b/plone/app/contenttypes/browser/utils.py\n@@ -9,6 +9,9 @@\n from zope.interface import Interface\n \n \n+PREFIX = "++resource++mimetype.icons/"\n+\n+\n class IUtils(Interface):\n     """\n     """\n@@ -21,43 +24,39 @@ def getMimeTypeIcon(content_file):\n \n @implementer(IUtils)\n class Utils(BrowserView):\n+    def _get_mimes(self, content_file):\n+        # We use \'yield\' so iteration can be cut short\n+        # if the calling code is happy.\n+        context = aq_inner(self.context)\n+        mtr = getToolByName(context, "mimetypes_registry")\n+        if content_file.contentType:\n+            # this gives a tuple\n+            for mime in mtr.lookup(content_file.contentType):\n+                yield mime\n+        if content_file.filename:\n+            # this gives a single mime type\n+            yield mtr.lookupExtension(content_file.filename)\n+        for mime in mtr.lookup("application/octet-stream"):\n+            yield mime\n \n     @memoize\n     def getMimeTypeIcon(self, content_file):\n+        # Get possible mime types, and try to find an icon path.\n+        # Keep the first one, in case there is no good match.\n+        first = None\n+        for mime in self._get_mimes(content_file):\n+            if first is None:\n+                first = mime\n+            if hasattr(mime, "icon_path"):\n+                icon_path = mime.icon_path\n+                if not icon_path.startswith("++"):\n+                    icon_path = PREFIX + icon_path\n+                return icon_path\n+\n+        if first is None:\n+            # Probably does not happen in practice.\n+            return ""\n         context = aq_inner(self.context)\n-        pstate = getMultiAdapter(\n-            (context, self.request),\n-            name=u\'plone_portal_state\'\n-        )\n+        pstate = getMultiAdapter((context, self.request), name=u"plone_portal_state")\n         portal_url = pstate.portal_url()\n-        mtr = getToolByName(context, \'mimetypes_registry\')\n-        mime = []\n-        if content_file.contentType:\n-            mime.append(mtr.lookup(content_file.contentType))\n-        if content_file.filename:\n-            mime.append(mtr.lookupExtension(content_file.filename))\n-        mime.append(mtr.lookup(\'application/octet-stream\')[0])\n-        icon_paths = [\'++resource++mimetype.icons/\' + m.icon_path\n-                      for m in mime if hasattr(m, \'icon_path\')]\n-        if icon_paths:\n-            return icon_paths[0]\n-\n-        return portal_url + \'/\' + guess_icon_path(mime[0])\n-\n-        # function works but is possibly not best implementation. following\n-        # code might work for files where the mimetype is not directly\n-        # recognized\n-\n-#        if len(mime) > 0:\n-#            icon = portal_url + "/" + guess_icon_path(mime[0])\n-#        else:\n-#            mime = mtr.lookupExtension(content_file.filename)\n-#            if mime <> "":\n-#                icon = portal_url + "/" + guess_icon_path(mime)\n-#            else:\n-#                logger.info(\n-#                   "No MimeType Icon found for MimeType: " + \\\n-#                   str(content_file.contentType)\n-#                   )\n-#                icon = portal_url + "/application.png"\n-#        return icon\n+        return portal_url + "/" + guess_icon_path(first)\ndiff --git a/plone/app/contenttypes/tests/test_browser_utils.py b/plone/app/contenttypes/tests/test_browser_utils.py\nnew file mode 100644\nindex 00000000..e1fa2846\n--- /dev/null\n+++ b/plone/app/contenttypes/tests/test_browser_utils.py\n@@ -0,0 +1,54 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.contenttypes.testing import (\n+    PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING,\n+)  # noqa\n+from zope.component import getMultiAdapter\n+\n+import unittest\n+\n+\n+# The default fallback is the icon for \'application/octet-stream\':\n+FALLBACK = "++resource++mimetype.icons/application.png"\n+# Most or all icons should have this as prefix:\n+PREFIX = "++resource++mimetype.icons/"\n+\n+\n+class DummyFile(object):\n+    """Dummy file object.\n+\n+    For these tests, we only need a contentType and filename.\n+    """\n+\n+    def __init__(self, contentType, filename):\n+        self.contentType = contentType\n+        self.filename = filename\n+\n+\n+class MimeTypeIconIntegrationTest(unittest.TestCase):\n+\n+    layer = PLONE_APP_CONTENTTYPES_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        portal = self.layer["portal"]\n+        request = self.layer["request"]\n+        self.view = getMultiAdapter((portal, request), name="contenttype_utils")\n+\n+    def test_none(self):\n+        self.assertEqual(self.view.getMimeTypeIcon(DummyFile(None, None)), FALLBACK)\n+\n+    def test_unknown(self):\n+        self.assertEqual(\n+            self.view.getMimeTypeIcon(DummyFile("some/unknown", "unkown.unknown")),\n+            FALLBACK,\n+        )\n+\n+    def test_contenttype_pdf(self):\n+        self.assertEqual(\n+            self.view.getMimeTypeIcon(DummyFile("application/pdf", None)),\n+            PREFIX + "pdf.png",\n+        )\n+\n+    def test_filename_pdf(self):\n+        self.assertEqual(\n+            self.view.getMimeTypeIcon(DummyFile(None, "plone.pdf")), PREFIX + "pdf.png"\n+        )\n'

