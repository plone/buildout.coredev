Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-20T20:03:26+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/6edf346dec231bd6e67cfb2fd280a51bce67e397

Add custom css fieldset to Theming Controlpanel

Files changed:
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/interfaces.py

b'diff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex a31eb6f..c296300 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -584,6 +584,35 @@\n                     </div>\n \n                 </fieldset>\n+                <fieldset>\n+                    <legend i18n:translate="">Custom Styles</legend>\n+                    <p i18n:translate="description_custom_css_styles">\n+                    </p>\n+\n+                    <div\n+                        tal:define="error errors/custom_css | nothing;\n+                                    custom_css view/theme_settings/custom_css | python: \'\';\n+                                    custom_css python:request.get(\'custom_css\', custom_css)"\n+                        tal:attributes="class python:\'field error\' if error else \'field\'">\n+\n+                        <label for="custom_css" i18n:translate="label_custom_css">Custom CSS</label>\n+                        <div class="formHelp" i18n:translate="help_custom_css">\n+                            Define your own custom CSS in the field below. This is a good place for quick customizations of things like colors and the toolbar. Definitions here will override previously defined CSS of Plone. Please use this only for small customizations, as it is hard keep track of changes here. For bigger changes you most likely want to customize a full theme and make your changes there.\n+                        </div>\n+\n+                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n+\n+                        <textarea\n+                            name="custom_css:lines"\n+                            id="custom_css"\n+                            rows="40"\n+                            cols="160"\n+                            placeholder="Put your plain css..."\n+                            tal:content="custom_css"\n+                            ></textarea>\n+\n+                    </div>\n+                </fieldset>\n             </div>\n \n \ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex fe45d55..1eadd67 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -19,6 +19,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.resource.utils import queryResourceDirectory\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from Products.CMFPlone.interfaces import ILinkSchema\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n@@ -187,6 +188,8 @@ def update(self):\n             markSpecialLinks = form.get(\'markSpecialLinks\', None)\n             extLinksOpenInNewWindow = form.get(\'extLinksOpenInNewWindow\', None)\n \n+            custom_css = form.get(\'custom_css\', \'\')\n+\n             if not self.errors:\n                 # Trigger onDisabled() on plugins if theme was active\n                 # previously and rules were changed\n@@ -197,7 +200,9 @@ def update(self):\n                 self.theme_settings.rules = rules\n                 self.theme_settings.absolutePrefix = prefix\n                 self.theme_settings.parameterExpressions = parameterExpressions\n-                self.theme_settings.hostnameBlacklist = hostnameBlacklist\n+                self.theme_settings.hostnameBlacklist = [\n+                    str(bl) for bl in hostnameBlacklist]\n+                self.theme_settings.custom_css = str(custom_css)\n                 self.theme_settings.doctype = doctype\n \n                 # Theme base settings\ndiff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex 20642ee..f5e0a07 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -139,7 +139,7 @@ class IThemeSettings(Interface):\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n-        default=[u"127.0.0.1"],\n+        default=["127.0.0.1"],\n     )\n \n     parameterExpressions = schema.Dict(\n@@ -171,6 +171,24 @@ class IThemeSettings(Interface):\n         default="",\n     )\n \n+    custom_css = schema.SourceText(\n+        title=_(\n+            u\'Custom CSS\',\n+        ),\n+        description=_(\n+            \'help_custom_css\',\n+            u\'Define your own custom CSS in the field below. This is a good \'\n+            u\'place for quick customizations of things like colors and the \'\n+            u\'toolbar. Definitions here will override previously defined CSS \'\n+            u\'of Plone. Please use this only for small customizations, as it \'\n+            u\'is hard keep track of changes here. For bigger changes you most \'\n+            u\'likely want to customize a full theme and make your changes \'\n+            u\'there.\',\n+        ),\n+        default=u"",\n+        required=False,\n+    )\n+\n \n class IThemingLayer(Interface):\n     """Browser layer used to indicate that plone.app.theming is installed\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-21T18:46:13+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/d6db78dbb930837c296aae87cea16bacde391a9b

fix hostnameBlacklist (Theming ControlPanel) in Py3

Files changed:
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py

b'diff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex c296300..fc8db97 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -460,7 +460,7 @@\n                     <div\n                         tal:define="error errors/hostnameBlacklist | nothing;\n                                     hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];\n-                                    hostnameBlacklist python:request.get(\'hostnameBlacklist\', hostnameBlacklist)"\n+                                    hostnameBlacklist python: view.hostname_blacklist or hostnameBlacklist"\n                         tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                         <label for="hostnameBlacklist" i18n:translate="label_hostname_blacklist">Unthemed host names</label>\n@@ -481,7 +481,7 @@\n                             id="hostnameBlacklist"\n                             rows="5"\n                             cols="50"\n-                            tal:content="python:\'\\n\'.join(hostnameBlacklist)"\n+                            tal:content="python: \'\\n\'.join(hostnameBlacklist)"\n                             ></textarea>\n \n                     </div>\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 1eadd67..a9d39ab 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -51,6 +51,11 @@ def site_url(self):\n         """\n         return getSite().absolute_url()\n \n+    @property\n+    def hostname_blacklist(self):\n+        hostname_blacklist = self.request.get(\'hostnameBlacklist\', [])\n+        return [host.decode() for host in hostname_blacklist]\n+\n     def __call__(self):\n         self.pskin = getToolByName(self.context, \'portal_skins\')\n \n@@ -165,8 +170,6 @@ def update(self):\n             prefix = form.get(\'absolutePrefix\', None)\n             doctype = str(form.get(\'doctype\', ""))\n \n-            hostnameBlacklist = form.get(\'hostnameBlacklist\', [])\n-\n             parameterExpressions = {}\n             parameterExpressionsList = form.get(\'parameterExpressions\', [])\n \n@@ -200,8 +203,7 @@ def update(self):\n                 self.theme_settings.rules = rules\n                 self.theme_settings.absolutePrefix = prefix\n                 self.theme_settings.parameterExpressions = parameterExpressions\n-                self.theme_settings.hostnameBlacklist = [\n-                    str(bl) for bl in hostnameBlacklist]\n+                self.theme_settings.hostnameBlacklist = self.hostname_blacklist\n                 self.theme_settings.custom_css = str(custom_css)\n                 self.theme_settings.doctype = doctype\n \n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-21T18:47:57+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/f31df841a1f3076898952b28df1438cb2ec0b516

Add custom CSS settings and view to theming control panel

Files changed:
A src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py

b'diff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml\nindex 5c03db4..8ff8a1e 100644\n--- a/src/plone/app/theming/browser/configure.zcml\n+++ b/src/plone/app/theming/browser/configure.zcml\n@@ -54,4 +54,11 @@\n         permission="plone.app.controlpanel.Themes"\n         />\n \n+    <browser:page\n+        name="custom.css"\n+        for="*"\n+        class=".custom_css.CustomCSSView"\n+        permission="zope.Public"\n+        />\n+\n </configure>\ndiff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex fc8db97..674f8b4 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -599,11 +599,14 @@\n                         <div class="formHelp" i18n:translate="help_custom_css">\n                             Define your own custom CSS in the field below. This is a good place for quick customizations of things like colors and the toolbar. Definitions here will override previously defined CSS of Plone. Please use this only for small customizations, as it is hard keep track of changes here. For bigger changes you most likely want to customize a full theme and make your changes there.\n                         </div>\n+                        <div class="theming_doc_link">\n+                            <p><a href="https://docs.plone.org/adapt-and-extend/theming" target="_blank" i18n:translate="label_theming_doc_link">Theming documentation</a></p>\n+                        </div>\n \n                         <div class="errorMessage" tal:content="error" tal:condition="error" />\n \n                         <textarea\n-                            name="custom_css:lines"\n+                            name="custom_css"\n                             id="custom_css"\n                             rows="40"\n                             cols="160"\ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex a9d39ab..0b000db 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -58,7 +58,6 @@ def hostname_blacklist(self):\n \n     def __call__(self):\n         self.pskin = getToolByName(self.context, \'portal_skins\')\n-\n         if self.update():\n             return self.index()\n         return \'\'\n@@ -191,7 +190,7 @@ def update(self):\n             markSpecialLinks = form.get(\'markSpecialLinks\', None)\n             extLinksOpenInNewWindow = form.get(\'extLinksOpenInNewWindow\', None)\n \n-            custom_css = form.get(\'custom_css\', \'\')\n+            custom_css = form.get(\'custom_css\', b\'\')\n \n             if not self.errors:\n                 # Trigger onDisabled() on plugins if theme was active\ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nnew file mode 100644\nindex 0000000..c999ae2\n--- /dev/null\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -0,0 +1,19 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.theming.interfaces import IThemeSettings\n+from plone.registry.interfaces import IRegistry\n+from Products.Five.browser import BrowserView\n+from zope.component import getUtility\n+\n+\n+class CustomCSSView(BrowserView):\n+    """\n+    Renders custom CSS stored in registry\n+    """\n+\n+    def __call__(self):\n+\n+        registry = getUtility(IRegistry)\n+        theme_settings = registry.forInterface(IThemeSettings, False)\n+        self.request.response.setHeader(\'Content-Type\', \'text/css\')\n+        custom_css = theme_settings.custom_css\n+        return custom_css\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-22T13:18:11+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/66d1cde0b3e15f6fef291a6bc9375cec4fde2655

Add custom_css_timestamp registry setting and use it to invalidate caching of custom.css

Files changed:
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/interfaces.py

b'diff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex 0b000db..d53ba8b 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n+from datetime import datetime\n from plone.app.theming.interfaces import _\n from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME\n from plone.app.theming.interfaces import IThemeSettings\n@@ -203,6 +204,8 @@ def update(self):\n                 self.theme_settings.absolutePrefix = prefix\n                 self.theme_settings.parameterExpressions = parameterExpressions\n                 self.theme_settings.hostnameBlacklist = self.hostname_blacklist\n+                if custom_css != self.theme_settings.custom_css:\n+                    self.theme_settings.custom_css_timestamp = datetime.now()\n                 self.theme_settings.custom_css = str(custom_css)\n                 self.theme_settings.doctype = doctype\n \ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nindex c999ae2..bc78c5d 100644\n--- a/src/plone/app/theming/browser/custom_css.py\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -3,6 +3,7 @@\n from plone.registry.interfaces import IRegistry\n from Products.Five.browser import BrowserView\n from zope.component import getUtility\n+from plone.app.caching.operations.utils import formatDateTime\n \n \n class CustomCSSView(BrowserView):\n@@ -14,6 +15,13 @@ def __call__(self):\n \n         registry = getUtility(IRegistry)\n         theme_settings = registry.forInterface(IThemeSettings, False)\n-        self.request.response.setHeader(\'Content-Type\', \'text/css\')\n+        self.request.response.setHeader(\n+            \'Content-Type\',\n+            \'text/css; charset=utf-8\',\n+        )\n+        self.request.response.setHeader(\n+            \'Last-Modified\',\n+            formatDateTime(theme_settings.custom_css_timestamp),\n+        )\n         custom_css = theme_settings.custom_css\n         return custom_css\ndiff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex f5e0a07..023c8f5 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -189,6 +189,17 @@ class IThemeSettings(Interface):\n         required=False,\n     )\n \n+    custom_css_timestamp = schema.Datetime(\n+        title=_(\n+            u\'Custom CSS Timestamp\',\n+        ),\n+        description=_(\n+            u\'Time stamp when the custom CSS was changed. \'\n+            u\'Used to generate custom.css with timestamp in URL.\',\n+        ),\n+        required=False,\n+    )\n+\n \n class IThemingLayer(Interface):\n     """Browser layer used to indicate that plone.app.theming is installed\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-23T10:56:31+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/10432c2bc89bbe86025487d75e80f36dcdf7c0bc

Add changelog entry

Files changed:
A news/178.feature

b'diff --git a/news/178.feature b/news/178.feature\nnew file mode 100644\nindex 0000000..a1f838c\n--- /dev/null\n+++ b/news/178.feature\n@@ -0,0 +1,3 @@\n+Add custom CSS settings and view to theming control panel\n+depends on https://github.com/plone/Products.CMFPlone/pull/3089\n+[MrTango]\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-23T11:14:52+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/ac28556fa9619438d65c24fb7adc7eca51fe2f78

Add changelog not for fix hostnameBlacklist (Theming ControlPanel) in Py3

Files changed:
A news/179.bugfix

b'diff --git a/news/179.bugfix b/news/179.bugfix\nnew file mode 100644\nindex 0000000..3973629\n--- /dev/null\n+++ b/news/179.bugfix\n@@ -0,0 +1 @@\n+fix hostnameBlacklist (Theming ControlPanel) in Py3 [MrTango]\n\\ No newline at end of file\n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-23T13:55:04+03:00
Author: MrTango (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/da369d0338b1943220b33192195c42067f498866

add defaultFactory get_default_custom_css_timestamp for custom_css_timestamp

Files changed:
M src/plone/app/theming/interfaces.py

b'diff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex 023c8f5..183e0fc 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from datetime import datetime\n from plone.resource.manifest import ManifestFormat\n from zope import schema\n from zope.i18nmessageid import MessageFactory\n@@ -25,6 +26,9 @@\n \n THEME_EXTENSIONS = frozenset([\'html\', \'htm\'])\n \n+def get_default_custom_css_timestamp():\n+    return datetime.now()\n+\n \n class ITheme(Interface):\n     """A theme, loaded from a resource directory\n@@ -197,6 +201,7 @@ class IThemeSettings(Interface):\n             u\'Time stamp when the custom CSS was changed. \'\n             u\'Used to generate custom.css with timestamp in URL.\',\n         ),\n+        defaultFactory=get_default_custom_css_timestamp,\n         required=False,\n     )\n \n'

Repository: plone.app.theming


Branch: refs/heads/master
Date: 2020-04-23T18:32:32+03:00
Author: Maik Derstappen (MrTango) <md@derico.de>
Commit: https://github.com/plone/plone.app.theming/commit/da291b066b8ff181d9e3822397a2ad0f6ea935e2

Merge pull request #178 from plone/custom_css_view

Custom css view

Files changed:
A news/178.feature
A news/179.bugfix
A src/plone/app/theming/browser/custom_css.py
M src/plone/app/theming/browser/configure.zcml
M src/plone/app/theming/browser/controlpanel.pt
M src/plone/app/theming/browser/controlpanel.py
M src/plone/app/theming/interfaces.py

b'diff --git a/news/178.feature b/news/178.feature\nnew file mode 100644\nindex 0000000..a1f838c\n--- /dev/null\n+++ b/news/178.feature\n@@ -0,0 +1,3 @@\n+Add custom CSS settings and view to theming control panel\n+depends on https://github.com/plone/Products.CMFPlone/pull/3089\n+[MrTango]\ndiff --git a/news/179.bugfix b/news/179.bugfix\nnew file mode 100644\nindex 0000000..3973629\n--- /dev/null\n+++ b/news/179.bugfix\n@@ -0,0 +1 @@\n+fix hostnameBlacklist (Theming ControlPanel) in Py3 [MrTango]\n\\ No newline at end of file\ndiff --git a/src/plone/app/theming/browser/configure.zcml b/src/plone/app/theming/browser/configure.zcml\nindex 5c03db4..8ff8a1e 100644\n--- a/src/plone/app/theming/browser/configure.zcml\n+++ b/src/plone/app/theming/browser/configure.zcml\n@@ -54,4 +54,11 @@\n         permission="plone.app.controlpanel.Themes"\n         />\n \n+    <browser:page\n+        name="custom.css"\n+        for="*"\n+        class=".custom_css.CustomCSSView"\n+        permission="zope.Public"\n+        />\n+\n </configure>\ndiff --git a/src/plone/app/theming/browser/controlpanel.pt b/src/plone/app/theming/browser/controlpanel.pt\nindex a31eb6f..674f8b4 100644\n--- a/src/plone/app/theming/browser/controlpanel.pt\n+++ b/src/plone/app/theming/browser/controlpanel.pt\n@@ -460,7 +460,7 @@\n                     <div\n                         tal:define="error errors/hostnameBlacklist | nothing;\n                                     hostnameBlacklist view/theme_settings/hostnameBlacklist | python:[];\n-                                    hostnameBlacklist python:request.get(\'hostnameBlacklist\', hostnameBlacklist)"\n+                                    hostnameBlacklist python: view.hostname_blacklist or hostnameBlacklist"\n                         tal:attributes="class python:\'field error\' if error else \'field\'">\n \n                         <label for="hostnameBlacklist" i18n:translate="label_hostname_blacklist">Unthemed host names</label>\n@@ -481,7 +481,7 @@\n                             id="hostnameBlacklist"\n                             rows="5"\n                             cols="50"\n-                            tal:content="python:\'\\n\'.join(hostnameBlacklist)"\n+                            tal:content="python: \'\\n\'.join(hostnameBlacklist)"\n                             ></textarea>\n \n                     </div>\n@@ -584,6 +584,38 @@\n                     </div>\n \n                 </fieldset>\n+                <fieldset>\n+                    <legend i18n:translate="">Custom Styles</legend>\n+                    <p i18n:translate="description_custom_css_styles">\n+                    </p>\n+\n+                    <div\n+                        tal:define="error errors/custom_css | nothing;\n+                                    custom_css view/theme_settings/custom_css | python: \'\';\n+                                    custom_css python:request.get(\'custom_css\', custom_css)"\n+                        tal:attributes="class python:\'field error\' if error else \'field\'">\n+\n+                        <label for="custom_css" i18n:translate="label_custom_css">Custom CSS</label>\n+                        <div class="formHelp" i18n:translate="help_custom_css">\n+                            Define your own custom CSS in the field below. This is a good place for quick customizations of things like colors and the toolbar. Definitions here will override previously defined CSS of Plone. Please use this only for small customizations, as it is hard keep track of changes here. For bigger changes you most likely want to customize a full theme and make your changes there.\n+                        </div>\n+                        <div class="theming_doc_link">\n+                            <p><a href="https://docs.plone.org/adapt-and-extend/theming" target="_blank" i18n:translate="label_theming_doc_link">Theming documentation</a></p>\n+                        </div>\n+\n+                        <div class="errorMessage" tal:content="error" tal:condition="error" />\n+\n+                        <textarea\n+                            name="custom_css"\n+                            id="custom_css"\n+                            rows="40"\n+                            cols="160"\n+                            placeholder="Put your plain css..."\n+                            tal:content="custom_css"\n+                            ></textarea>\n+\n+                    </div>\n+                </fieldset>\n             </div>\n \n \ndiff --git a/src/plone/app/theming/browser/controlpanel.py b/src/plone/app/theming/browser/controlpanel.py\nindex fe45d55..d53ba8b 100644\n--- a/src/plone/app/theming/browser/controlpanel.py\n+++ b/src/plone/app/theming/browser/controlpanel.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from AccessControl import Unauthorized\n+from datetime import datetime\n from plone.app.theming.interfaces import _\n from plone.app.theming.interfaces import DEFAULT_THEME_FILENAME\n from plone.app.theming.interfaces import IThemeSettings\n@@ -19,6 +20,7 @@\n from plone.registry.interfaces import IRegistry\n from plone.resource.utils import queryResourceDirectory\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import safe_unicode\n from Products.CMFPlone.interfaces import ILinkSchema\n from Products.statusmessages.interfaces import IStatusMessage\n from zope.component import getMultiAdapter\n@@ -50,9 +52,13 @@ def site_url(self):\n         """\n         return getSite().absolute_url()\n \n+    @property\n+    def hostname_blacklist(self):\n+        hostname_blacklist = self.request.get(\'hostnameBlacklist\', [])\n+        return [host.decode() for host in hostname_blacklist]\n+\n     def __call__(self):\n         self.pskin = getToolByName(self.context, \'portal_skins\')\n-\n         if self.update():\n             return self.index()\n         return \'\'\n@@ -164,8 +170,6 @@ def update(self):\n             prefix = form.get(\'absolutePrefix\', None)\n             doctype = str(form.get(\'doctype\', ""))\n \n-            hostnameBlacklist = form.get(\'hostnameBlacklist\', [])\n-\n             parameterExpressions = {}\n             parameterExpressionsList = form.get(\'parameterExpressions\', [])\n \n@@ -187,6 +191,8 @@ def update(self):\n             markSpecialLinks = form.get(\'markSpecialLinks\', None)\n             extLinksOpenInNewWindow = form.get(\'extLinksOpenInNewWindow\', None)\n \n+            custom_css = form.get(\'custom_css\', b\'\')\n+\n             if not self.errors:\n                 # Trigger onDisabled() on plugins if theme was active\n                 # previously and rules were changed\n@@ -197,7 +203,10 @@ def update(self):\n                 self.theme_settings.rules = rules\n                 self.theme_settings.absolutePrefix = prefix\n                 self.theme_settings.parameterExpressions = parameterExpressions\n-                self.theme_settings.hostnameBlacklist = hostnameBlacklist\n+                self.theme_settings.hostnameBlacklist = self.hostname_blacklist\n+                if custom_css != self.theme_settings.custom_css:\n+                    self.theme_settings.custom_css_timestamp = datetime.now()\n+                self.theme_settings.custom_css = str(custom_css)\n                 self.theme_settings.doctype = doctype\n \n                 # Theme base settings\ndiff --git a/src/plone/app/theming/browser/custom_css.py b/src/plone/app/theming/browser/custom_css.py\nnew file mode 100644\nindex 0000000..bc78c5d\n--- /dev/null\n+++ b/src/plone/app/theming/browser/custom_css.py\n@@ -0,0 +1,27 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.theming.interfaces import IThemeSettings\n+from plone.registry.interfaces import IRegistry\n+from Products.Five.browser import BrowserView\n+from zope.component import getUtility\n+from plone.app.caching.operations.utils import formatDateTime\n+\n+\n+class CustomCSSView(BrowserView):\n+    """\n+    Renders custom CSS stored in registry\n+    """\n+\n+    def __call__(self):\n+\n+        registry = getUtility(IRegistry)\n+        theme_settings = registry.forInterface(IThemeSettings, False)\n+        self.request.response.setHeader(\n+            \'Content-Type\',\n+            \'text/css; charset=utf-8\',\n+        )\n+        self.request.response.setHeader(\n+            \'Last-Modified\',\n+            formatDateTime(theme_settings.custom_css_timestamp),\n+        )\n+        custom_css = theme_settings.custom_css\n+        return custom_css\ndiff --git a/src/plone/app/theming/interfaces.py b/src/plone/app/theming/interfaces.py\nindex 20642ee..183e0fc 100644\n--- a/src/plone/app/theming/interfaces.py\n+++ b/src/plone/app/theming/interfaces.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from datetime import datetime\n from plone.resource.manifest import ManifestFormat\n from zope import schema\n from zope.i18nmessageid import MessageFactory\n@@ -25,6 +26,9 @@\n \n THEME_EXTENSIONS = frozenset([\'html\', \'htm\'])\n \n+def get_default_custom_css_timestamp():\n+    return datetime.now()\n+\n \n class ITheme(Interface):\n     """A theme, loaded from a resource directory\n@@ -139,7 +143,7 @@ class IThemeSettings(Interface):\n         ),\n         value_type=schema.TextLine(),\n         required=False,\n-        default=[u"127.0.0.1"],\n+        default=["127.0.0.1"],\n     )\n \n     parameterExpressions = schema.Dict(\n@@ -171,6 +175,36 @@ class IThemeSettings(Interface):\n         default="",\n     )\n \n+    custom_css = schema.SourceText(\n+        title=_(\n+            u\'Custom CSS\',\n+        ),\n+        description=_(\n+            \'help_custom_css\',\n+            u\'Define your own custom CSS in the field below. This is a good \'\n+            u\'place for quick customizations of things like colors and the \'\n+            u\'toolbar. Definitions here will override previously defined CSS \'\n+            u\'of Plone. Please use this only for small customizations, as it \'\n+            u\'is hard keep track of changes here. For bigger changes you most \'\n+            u\'likely want to customize a full theme and make your changes \'\n+            u\'there.\',\n+        ),\n+        default=u"",\n+        required=False,\n+    )\n+\n+    custom_css_timestamp = schema.Datetime(\n+        title=_(\n+            u\'Custom CSS Timestamp\',\n+        ),\n+        description=_(\n+            u\'Time stamp when the custom CSS was changed. \'\n+            u\'Used to generate custom.css with timestamp in URL.\',\n+        ),\n+        defaultFactory=get_default_custom_css_timestamp,\n+        required=False,\n+    )\n+\n \n class IThemingLayer(Interface):\n     """Browser layer used to indicate that plone.app.theming is installed\n'

