Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-19T11:49:59+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/6e12f0ced16e760c1cb78c4010f56f79d60b2b53

Remove bootstrap-buildout.py. If you use buildout, use virtualenv and pip install zc.buildout instead.

Files changed:
A news/21.bugfix
M setup.cfg
D bootstrap-buildout.py

b'diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\ndeleted file mode 100644\nindex a8bc0c9..0000000\n--- a/bootstrap-buildout.py\n+++ /dev/null\n@@ -1,230 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = "2015-07-01"\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n-\n-usage = """\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-"""\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option(\n-    "--version",\n-    action="store_true",\n-    default=False,\n-    help=("Return bootstrap.py version."),\n-)\n-parser.add_option(\n-    "-t",\n-    "--accept-buildout-test-releases",\n-    dest="accept_buildout_test_releases",\n-    action="store_true",\n-    default=False,\n-    help=(\n-        "Normally, if you do not specify a --version, the "\n-        "bootstrap script and buildout gets the newest "\n-        "*final* versions of zc.buildout and its recipes and "\n-        "extensions for you.  If you use this flag, "\n-        "bootstrap and buildout will get the newest releases "\n-        "even if they are alphas or betas."\n-    ),\n-)\n-parser.add_option(\n-    "-c",\n-    "--config-file",\n-    help=("Specify the path to the buildout configuration " "file to be used."),\n-)\n-parser.add_option(\n-    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n-)\n-parser.add_option(\n-    "--allow-site-packages",\n-    action="store_true",\n-    default=False,\n-    help=("Let bootstrap.py use existing site packages"),\n-)\n-parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n-parser.add_option(\n-    "--setuptools-to-dir",\n-    help=("Allow for re-use of existing directory of " "setuptools versions"),\n-)\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists("ez_setup.py"):\n-    exec(open("ez_setup.py").read(), ez)\n-else:\n-    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, "getsitepackages"):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args["version"] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args["to_dir"] = options.setuptools_to_dir\n-\n-ez["use_setuptools"](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [\n-    sys.executable,\n-    "-c",\n-    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n-    + "from setuptools.command.easy_install import main; main()",\n-    "-mZqNxd",\n-    tmpeggs,\n-]\n-\n-find_links = os.environ.get(\n-    "bootstrap-testing-find-links",\n-    options.find_links\n-    or (\n-        "http://downloads.buildout.org/"\n-        if options.accept_buildout_test_releases\n-        else None\n-    ),\n-)\n-if find_links:\n-    cmd.extend(["-f", find_links])\n-\n-requirement = "zc.buildout"\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-\n-    _final_parts = "*final-", "*final"\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == "*") and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = "==".join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-\n-if subprocess.call(cmd) != 0:\n-    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if "=" not in a]:\n-    args.append("bootstrap")\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = ["-c", options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/21.bugfix b/news/21.bugfix\nnew file mode 100644\nindex 0000000..1bfb230\n--- /dev/null\n+++ b/news/21.bugfix\n@@ -0,0 +1,2 @@\n+- Remove ``bootstrap-buildout.py``. If you use buildout, use virtualenv and pip install zc.buildout instead.\n+[thet]\ndiff --git a/setup.cfg b/setup.cfg\nindex 8d0e054..934bad7 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -2,7 +2,6 @@\n ignore =\n     *.cfg\n     .coveragerc\n-    bootstrap-buildout.py\n     tox.ini\n \n [zest.releaser]\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-19T11:53:56+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/f3a5a4ffff370f655c3f0e2f0e78eb4d2f483321

Add [isort] and [flake8] config sections into setup.cfg.

Files changed:
M news/21.bugfix
M setup.cfg

b'diff --git a/news/21.bugfix b/news/21.bugfix\nindex 1bfb230..36345ba 100644\n--- a/news/21.bugfix\n+++ b/news/21.bugfix\n@@ -1,2 +1,3 @@\n - Remove ``bootstrap-buildout.py``. If you use buildout, use virtualenv and pip install zc.buildout instead.\n+- Add [isort] and [flake8] config sections into setup.cfg.\n [thet]\ndiff --git a/setup.cfg b/setup.cfg\nindex 934bad7..af1e6e3 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -10,3 +10,20 @@ extra-message = [ci skip]\n \n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# for details see\n+# https://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 88\n+multi_line_output=3\n+include_trailing_comma=True\n+not_skip = __init__.py\n+\n+[flake8]\n+exclude = docs,*.egg.,omelette\n+max-complexity = 15\n+max-line-length = 88\n+inline-quotes = "\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-19T11:55:39+02:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/3c2703be5be7f67a28c3b3c4382d1c0225865878

Add [isort] and [flake8] config sections into setup.cfg.
Fixes #21.

Files changed:
M news/21.bugfix
M plone/memoize/compress.py
M plone/memoize/forever.py
M plone/memoize/instance.py
M plone/memoize/ram.py
M plone/memoize/request.py
M plone/memoize/tests.py
M plone/memoize/volatile.py
M setup.py

b'diff --git a/news/21.bugfix b/news/21.bugfix\nindex 36345ba..0e6f390 100644\n--- a/news/21.bugfix\n+++ b/news/21.bugfix\n@@ -1,3 +1,4 @@\n - Remove ``bootstrap-buildout.py``. If you use buildout, use virtualenv and pip install zc.buildout instead.\n - Add [isort] and [flake8] config sections into setup.cfg.\n+- Sort all imports in Python files.\n [thet]\ndiff --git a/plone/memoize/compress.py b/plone/memoize/compress.py\nindex 6ef4bf8..82dc1be 100644\n--- a/plone/memoize/compress.py\n+++ b/plone/memoize/compress.py\n@@ -6,6 +6,7 @@\n from zope.component import queryUtility\n from zope.interface import implementer\n \n+\n SLIMMER = True\n try:\n     from slimmer import xhtml_slimmer\ndiff --git a/plone/memoize/forever.py b/plone/memoize/forever.py\nindex 11ba9ef..1c45edf 100644\n--- a/plone/memoize/forever.py\n+++ b/plone/memoize/forever.py\n@@ -9,6 +9,7 @@\n \n from plone.memoize import volatile\n \n+\n _memos = {}\n \n \ndiff --git a/plone/memoize/instance.py b/plone/memoize/instance.py\nindex f1b0671..32aa8c9 100644\n--- a/plone/memoize/instance.py\n+++ b/plone/memoize/instance.py\n@@ -7,6 +7,7 @@\n """\n from functools import wraps\n \n+\n _marker = object()\n \n \ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex 8876302..bb0fff5 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -11,6 +11,7 @@\n \n import six\n \n+\n try:\n     import pickle  # Python 3\n except ImportError:\ndiff --git a/plone/memoize/request.py b/plone/memoize/request.py\nindex acdc553..29b320b 100644\n--- a/plone/memoize/request.py\n+++ b/plone/memoize/request.py\n@@ -6,8 +6,10 @@\n from functools import wraps\n from plone.memoize import volatile\n from zope.annotation.interfaces import IAnnotations\n+\n import inspect\n \n+\n _marker = object()\n \n \ndiff --git a/plone/memoize/tests.py b/plone/memoize/tests.py\nindex ffbe9b3..20d3ca4 100644\n--- a/plone/memoize/tests.py\n+++ b/plone/memoize/tests.py\n@@ -2,9 +2,11 @@\n from zope.component.testing import setUp\n from zope.component.testing import tearDown\n from zope.configuration.xmlconfig import XMLConfig\n+\n import doctest\n import unittest\n \n+\n optionflags = doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS\n \n \ndiff --git a/plone/memoize/volatile.py b/plone/memoize/volatile.py\nindex 37502a2..d29a002 100644\n--- a/plone/memoize/volatile.py\n+++ b/plone/memoize/volatile.py\n@@ -6,6 +6,7 @@\n """\n \n from functools import wraps\n+\n import time\n \n \ndiff --git a/setup.py b/setup.py\nindex b4a624c..ff095cd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n+from setuptools import find_packages\n+from setuptools import setup\n+\n import os\n-from setuptools import setup, find_packages\n \n \n def read(*rnames):\n'

Repository: plone.memoize


Branch: refs/heads/master
Date: 2020-04-19T17:30:36+02:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.memoize/commit/9753e9967c042ac5ca6fda035e0b2ff8b6ba67bf

Merge pull request #23 from plone/fix-21

isort and other small cleanups

Files changed:
A news/21.bugfix
M plone/memoize/compress.py
M plone/memoize/forever.py
M plone/memoize/instance.py
M plone/memoize/ram.py
M plone/memoize/request.py
M plone/memoize/tests.py
M plone/memoize/volatile.py
M setup.cfg
M setup.py
D bootstrap-buildout.py

b'diff --git a/bootstrap-buildout.py b/bootstrap-buildout.py\ndeleted file mode 100644\nindex a8bc0c9..0000000\n--- a/bootstrap-buildout.py\n+++ /dev/null\n@@ -1,230 +0,0 @@\n-##############################################################################\n-#\n-# Copyright (c) 2006 Zope Foundation and Contributors.\n-# All Rights Reserved.\n-#\n-# This software is subject to the provisions of the Zope Public License,\n-# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n-# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY AND ALL EXPRESS OR IMPLIED\n-# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n-# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n-# FOR A PARTICULAR PURPOSE.\n-#\n-##############################################################################\n-"""Bootstrap a buildout-based project\n-\n-Simply run this script in a directory containing a buildout.cfg.\n-The script accepts buildout command-line options, so you can\n-use the -c option to specify an alternate configuration file.\n-"""\n-\n-import os\n-import shutil\n-import sys\n-import tempfile\n-\n-from optparse import OptionParser\n-\n-__version__ = "2015-07-01"\n-# See zc.buildout\'s changelog if this version is up to date.\n-\n-tmpeggs = tempfile.mkdtemp(prefix="bootstrap-")\n-\n-usage = """\\\n-[DESIRED PYTHON FOR BUILDOUT] bootstrap.py [options]\n-\n-Bootstraps a buildout-based project.\n-\n-Simply run this script in a directory containing a buildout.cfg, using the\n-Python that you want bin/buildout to use.\n-\n-Note that by using --find-links to point to local resources, you can keep\n-this script from going over the network.\n-"""\n-\n-parser = OptionParser(usage=usage)\n-parser.add_option(\n-    "--version",\n-    action="store_true",\n-    default=False,\n-    help=("Return bootstrap.py version."),\n-)\n-parser.add_option(\n-    "-t",\n-    "--accept-buildout-test-releases",\n-    dest="accept_buildout_test_releases",\n-    action="store_true",\n-    default=False,\n-    help=(\n-        "Normally, if you do not specify a --version, the "\n-        "bootstrap script and buildout gets the newest "\n-        "*final* versions of zc.buildout and its recipes and "\n-        "extensions for you.  If you use this flag, "\n-        "bootstrap and buildout will get the newest releases "\n-        "even if they are alphas or betas."\n-    ),\n-)\n-parser.add_option(\n-    "-c",\n-    "--config-file",\n-    help=("Specify the path to the buildout configuration " "file to be used."),\n-)\n-parser.add_option(\n-    "-f", "--find-links", help=("Specify a URL to search for buildout releases")\n-)\n-parser.add_option(\n-    "--allow-site-packages",\n-    action="store_true",\n-    default=False,\n-    help=("Let bootstrap.py use existing site packages"),\n-)\n-parser.add_option("--buildout-version", help="Use a specific zc.buildout version")\n-parser.add_option("--setuptools-version", help="Use a specific setuptools version")\n-parser.add_option(\n-    "--setuptools-to-dir",\n-    help=("Allow for re-use of existing directory of " "setuptools versions"),\n-)\n-\n-options, args = parser.parse_args()\n-if options.version:\n-    print("bootstrap.py version %s" % __version__)\n-    sys.exit(0)\n-\n-\n-######################################################################\n-# load/install setuptools\n-\n-try:\n-    from urllib.request import urlopen\n-except ImportError:\n-    from urllib2 import urlopen\n-\n-ez = {}\n-if os.path.exists("ez_setup.py"):\n-    exec(open("ez_setup.py").read(), ez)\n-else:\n-    exec(urlopen("https://bootstrap.pypa.io/ez_setup.py").read(), ez)\n-\n-if not options.allow_site_packages:\n-    # ez_setup imports site, which adds site packages\n-    # this will remove them from the path to ensure that incompatible versions\n-    # of setuptools are not in the path\n-    import site\n-\n-    # inside a virtualenv, there is no \'getsitepackages\'.\n-    # We can\'t remove these reliably\n-    if hasattr(site, "getsitepackages"):\n-        for sitepackage_path in site.getsitepackages():\n-            # Strip all site-packages directories from sys.path that\n-            # are not sys.prefix; this is because on Windows\n-            # sys.prefix is a site-package directory.\n-            if sitepackage_path != sys.prefix:\n-                sys.path[:] = [x for x in sys.path if sitepackage_path not in x]\n-\n-setup_args = dict(to_dir=tmpeggs, download_delay=0)\n-\n-if options.setuptools_version is not None:\n-    setup_args["version"] = options.setuptools_version\n-if options.setuptools_to_dir is not None:\n-    setup_args["to_dir"] = options.setuptools_to_dir\n-\n-ez["use_setuptools"](**setup_args)\n-import setuptools\n-import pkg_resources\n-\n-# This does not (always?) update the default working set.  We will\n-# do it.\n-for path in sys.path:\n-    if path not in pkg_resources.working_set.entries:\n-        pkg_resources.working_set.add_entry(path)\n-\n-######################################################################\n-# Install buildout\n-\n-ws = pkg_resources.working_set\n-\n-setuptools_path = ws.find(pkg_resources.Requirement.parse("setuptools")).location\n-\n-# Fix sys.path here as easy_install.pth added before PYTHONPATH\n-cmd = [\n-    sys.executable,\n-    "-c",\n-    "import sys; sys.path[0:0] = [%r]; " % setuptools_path\n-    + "from setuptools.command.easy_install import main; main()",\n-    "-mZqNxd",\n-    tmpeggs,\n-]\n-\n-find_links = os.environ.get(\n-    "bootstrap-testing-find-links",\n-    options.find_links\n-    or (\n-        "http://downloads.buildout.org/"\n-        if options.accept_buildout_test_releases\n-        else None\n-    ),\n-)\n-if find_links:\n-    cmd.extend(["-f", find_links])\n-\n-requirement = "zc.buildout"\n-version = options.buildout_version\n-if version is None and not options.accept_buildout_test_releases:\n-    # Figure out the most recent final version of zc.buildout.\n-    import setuptools.package_index\n-\n-    _final_parts = "*final-", "*final"\n-\n-    def _final_version(parsed_version):\n-        try:\n-            return not parsed_version.is_prerelease\n-        except AttributeError:\n-            # Older setuptools\n-            for part in parsed_version:\n-                if (part[:1] == "*") and (part not in _final_parts):\n-                    return False\n-            return True\n-\n-    index = setuptools.package_index.PackageIndex(search_path=[setuptools_path])\n-    if find_links:\n-        index.add_find_links((find_links,))\n-    req = pkg_resources.Requirement.parse(requirement)\n-    if index.obtain(req) is not None:\n-        best = []\n-        bestv = None\n-        for dist in index[req.project_name]:\n-            distv = dist.parsed_version\n-            if _final_version(distv):\n-                if bestv is None or distv > bestv:\n-                    best = [dist]\n-                    bestv = distv\n-                elif distv == bestv:\n-                    best.append(dist)\n-        if best:\n-            best.sort()\n-            version = best[-1].version\n-if version:\n-    requirement = "==".join((requirement, version))\n-cmd.append(requirement)\n-\n-import subprocess\n-\n-if subprocess.call(cmd) != 0:\n-    raise Exception("Failed to execute command:\\n%s" % repr(cmd)[1:-1])\n-\n-######################################################################\n-# Import and run buildout\n-\n-ws.add_entry(tmpeggs)\n-ws.require(requirement)\n-import zc.buildout.buildout\n-\n-if not [a for a in args if "=" not in a]:\n-    args.append("bootstrap")\n-\n-# if -c was provided, we push it back into args for buildout\' main function\n-if options.config_file is not None:\n-    args[0:0] = ["-c", options.config_file]\n-\n-zc.buildout.buildout.main(args)\n-shutil.rmtree(tmpeggs)\ndiff --git a/news/21.bugfix b/news/21.bugfix\nnew file mode 100644\nindex 0000000..0e6f390\n--- /dev/null\n+++ b/news/21.bugfix\n@@ -0,0 +1,4 @@\n+- Remove ``bootstrap-buildout.py``. If you use buildout, use virtualenv and pip install zc.buildout instead.\n+- Add [isort] and [flake8] config sections into setup.cfg.\n+- Sort all imports in Python files.\n+[thet]\ndiff --git a/plone/memoize/compress.py b/plone/memoize/compress.py\nindex 6ef4bf8..82dc1be 100644\n--- a/plone/memoize/compress.py\n+++ b/plone/memoize/compress.py\n@@ -6,6 +6,7 @@\n from zope.component import queryUtility\n from zope.interface import implementer\n \n+\n SLIMMER = True\n try:\n     from slimmer import xhtml_slimmer\ndiff --git a/plone/memoize/forever.py b/plone/memoize/forever.py\nindex 11ba9ef..1c45edf 100644\n--- a/plone/memoize/forever.py\n+++ b/plone/memoize/forever.py\n@@ -9,6 +9,7 @@\n \n from plone.memoize import volatile\n \n+\n _memos = {}\n \n \ndiff --git a/plone/memoize/instance.py b/plone/memoize/instance.py\nindex f1b0671..32aa8c9 100644\n--- a/plone/memoize/instance.py\n+++ b/plone/memoize/instance.py\n@@ -7,6 +7,7 @@\n """\n from functools import wraps\n \n+\n _marker = object()\n \n \ndiff --git a/plone/memoize/ram.py b/plone/memoize/ram.py\nindex 8876302..bb0fff5 100644\n--- a/plone/memoize/ram.py\n+++ b/plone/memoize/ram.py\n@@ -11,6 +11,7 @@\n \n import six\n \n+\n try:\n     import pickle  # Python 3\n except ImportError:\ndiff --git a/plone/memoize/request.py b/plone/memoize/request.py\nindex acdc553..29b320b 100644\n--- a/plone/memoize/request.py\n+++ b/plone/memoize/request.py\n@@ -6,8 +6,10 @@\n from functools import wraps\n from plone.memoize import volatile\n from zope.annotation.interfaces import IAnnotations\n+\n import inspect\n \n+\n _marker = object()\n \n \ndiff --git a/plone/memoize/tests.py b/plone/memoize/tests.py\nindex ffbe9b3..20d3ca4 100644\n--- a/plone/memoize/tests.py\n+++ b/plone/memoize/tests.py\n@@ -2,9 +2,11 @@\n from zope.component.testing import setUp\n from zope.component.testing import tearDown\n from zope.configuration.xmlconfig import XMLConfig\n+\n import doctest\n import unittest\n \n+\n optionflags = doctest.REPORT_ONLY_FIRST_FAILURE | doctest.ELLIPSIS\n \n \ndiff --git a/plone/memoize/volatile.py b/plone/memoize/volatile.py\nindex 37502a2..d29a002 100644\n--- a/plone/memoize/volatile.py\n+++ b/plone/memoize/volatile.py\n@@ -6,6 +6,7 @@\n """\n \n from functools import wraps\n+\n import time\n \n \ndiff --git a/setup.cfg b/setup.cfg\nindex 8d0e054..af1e6e3 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -2,7 +2,6 @@\n ignore =\n     *.cfg\n     .coveragerc\n-    bootstrap-buildout.py\n     tox.ini\n \n [zest.releaser]\n@@ -11,3 +10,20 @@ extra-message = [ci skip]\n \n [bdist_wheel]\n universal = 1\n+\n+[isort]\n+# for details see\n+# https://docs.plone.org/develop/styleguide/python.html#grouping-and-sorting\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 88\n+multi_line_output=3\n+include_trailing_comma=True\n+not_skip = __init__.py\n+\n+[flake8]\n+exclude = docs,*.egg.,omelette\n+max-complexity = 15\n+max-line-length = 88\n+inline-quotes = "\ndiff --git a/setup.py b/setup.py\nindex b4a624c..ff095cd 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,6 +1,8 @@\n # -*- coding: utf-8 -*-\n+from setuptools import find_packages\n+from setuptools import setup\n+\n import os\n-from setuptools import setup, find_packages\n \n \n def read(*rnames):\n'

