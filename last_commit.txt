Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-01-25T12:43:24+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/608d5147de61df4325f4a522377d10d14443c2e0

Refactor navigation endpoint (#1048)

* Refactor navigation endpoint, add new nav_title attribute

* Update docs

* Fix ILanguageSchema for Plone 5.1

* Fix yet another import for Plone 4.3

* Refactor to not use ILanguageSchema

* Fix yet yet another import for Plone 4.3

* Make code compatible with Plone 4

* Better var handling

* Skip one test from Plone 4 since it seems it does not support review_state in tabs output

* Just one more test failing

* Improve skip message

Co-authored-by: Timo Stollenwerk &lt;stollenwerk@kitconcept.com&gt;

Files changed:
A news/1047.feature
M docs/source/upgrade-guide.rst
M src/plone/restapi/services/navigation/get.py
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/navigation.resp
M src/plone/restapi/tests/http-examples/navigation_tree.resp
M src/plone/restapi/tests/test_expansion.py
M src/plone/restapi/tests/test_services_navigation.py

b'diff --git a/docs/source/upgrade-guide.rst b/docs/source/upgrade-guide.rst\nindex d45afc359..dfc40643b 100644\n--- a/docs/source/upgrade-guide.rst\n+++ b/docs/source/upgrade-guide.rst\n@@ -3,6 +3,12 @@ Upgrade Guide\n \n This upgrade guide lists all breaking changes in plone.restapi and explains the necessary steps that are needed to upgrade to the lastest version.\n \n+Upgrading to plone.restapi 7.x\n+------------------------------\n+\n+Navigation endpoint has been refactored, and now its behavior is consistent regarding the ``items`` attribute.\n+Now the ``items`` attribute is present even if the element of the tree does not have children elements.\n+This might effect to some login in JavaScript specially, if the condition is checking for the existance of the attribute and expect to be ``undefined``, since this change it will be an empty array.\n \n Upgrading to plone.restapi 6.x\n ------------------------------\ndiff --git a/news/1047.feature b/news/1047.feature\nnew file mode 100644\nindex 000000000..bfecf22e0\n--- /dev/null\n+++ b/news/1047.feature\n@@ -0,0 +1,2 @@\n+- Refactor navigation endpoint, add new ``nav_title`` attribute\n+  [sneridagh]\ndiff --git a/src/plone/restapi/services/navigation/get.py b/src/plone/restapi/services/navigation/get.py\nindex 753353d7c..54729c47d 100644\n--- a/src/plone/restapi/services/navigation/get.py\n+++ b/src/plone/restapi/services/navigation/get.py\n@@ -1,66 +1,35 @@\n # -*- coding: utf-8 -*-\n-from plone.app.layout.navigation.navtree import buildFolderTree\n+from Acquisition import aq_inner\n+from collections import defaultdict\n from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.memoize.view import memoize\n+from plone.memoize.view import memoize_contextless\n+from plone.registry.interfaces import IRegistry\n from plone.restapi.interfaces import IExpandableElement\n from plone.restapi.services import Service\n-from Products.CMFPlone.browser.navtree import NavtreeQueryBuilder\n-from Products.CMFPlone.browser.navtree import SitemapNavtreeStrategy\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.utils import getFSVersionTuple\n+from Products.CMFPlone.utils import safe_unicode\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.component.hooks import getSite\n+from zope.i18n import translate\n from zope.interface import implementer\n from zope.interface import Interface\n \n+PLONE5 = getFSVersionTuple()[0] >= 5\n \n-class NavigationTreeQueryBuilder(NavtreeQueryBuilder):\n-    """Build a folder tree query"""\n+try:\n+    from Products.CMFPlone.interfaces.controlpanel import INavigationSchema\n+except ImportError:\n+    # BBB for Plone 4.x, remove with plone.restapi 8 / Plone 6\n+    from plone.app.controlpanel.navigation import INavigationSchema\n \n-    def __init__(self, context, depth):\n-        NavtreeQueryBuilder.__init__(self, context)\n-        self.query["path"] = {\n-            "query": "/".join(context.getPhysicalPath()),\n-            "navtree_start": 1,\n-            "depth": depth - 1,\n-        }\n-\n-\n-class CustomNavtreeStrategy(SitemapNavtreeStrategy):\n-    """The navtree strategy used for the default navigation portlet"""\n-\n-    def __init__(self, context):\n-        SitemapNavtreeStrategy.__init__(self, context, None)\n-        self.context = context\n-        self.bottomLevel = 0\n-        self.rootPath = self.getRootPath()\n-\n-    def subtreeFilter(self, node):\n-        sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n-        if sitemapDecision is False:\n-            return False\n-        depth = node.get("depth", 0)\n-        if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n-            return False\n-        else:\n-            return True\n-\n-    def getRootPath(self, topLevel=1):\n-        rootPath = getNavigationRoot(self.context)\n-\n-        contextPath = "/".join(self.context.getPhysicalPath())\n-        if not contextPath.startswith(rootPath):\n-            return None\n-        contextSubPathElements = contextPath[len(rootPath) + 1 :]\n-        if contextSubPathElements:\n-            contextSubPathElements = contextSubPathElements.split("/")\n-            if len(contextSubPathElements) < topLevel:\n-                return None\n-            rootPath = (\n-                rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n-            )  # noqa\n-        else:\n-            return None\n-\n-        return rootPath\n+try:\n+    from html import escape\n+except ImportError:\n+    from cgi import escape\n \n \n @implementer(IExpandableElement)\n@@ -83,75 +52,176 @@ def __call__(self, expand=False):\n         if not expand:\n             return result\n \n-        tabs = getMultiAdapter((self.context, self.request), name="portal_tabs_view")\n-        items = []\n-        for tab in tabs.topLevelTabs():\n-            if self.depth > 1:\n-                subitems = self.getTabSubTree(\n-                    tabUrl=tab["url"], tabPath=tab.get("path")\n-                )\n-                items.append(\n-                    {\n-                        "title": tab.get("title", tab.get("name")),\n-                        "@id": tab["url"] + "",\n-                        "description": tab.get("description", ""),\n-                        "items": subitems,\n-                    }\n-                )\n+        result["navigation"]["items"] = self.build_tree(self.navtree_path)\n+        return result\n+\n+    @property\n+    @memoize_contextless\n+    def settings(self):\n+        if PLONE5:\n+            # TODO: Simplify this when Plone 4.3 is deprecated\n+            registry = getUtility(IRegistry)\n+            settings = registry.forInterface(INavigationSchema, prefix="plone")\n+            return {\n+                "displayed_types": settings.displayed_types,\n+                "nonfolderish_tabs": settings.nonfolderish_tabs,\n+                "filter_on_workflow": settings.filter_on_workflow,\n+                "workflow_states_to_show": settings.workflow_states_to_show,\n+                "show_excluded_items": settings.show_excluded_items,\n+            }\n+        else:\n+            pprop = getToolByName(self.context, "portal_properties")\n+            ttool = getToolByName(self.context, "portal_types")\n+            siteProps = pprop.site_properties\n+            navProps = pprop.navtree_properties\n+            allTypes = ttool.listContentTypes()\n+            blacklist = navProps.metaTypesNotToList\n+\n+            return {\n+                "displayed_types": [t for t in allTypes if t not in blacklist],\n+                "nonfolderish_tabs": not siteProps.getProperty(\n+                    "disable_nonfolderish_sections"\n+                ),\n+                "filter_on_workflow": navProps.getProperty("enable_wf_state_filtering"),\n+                "workflow_states_to_show": navProps.getProperty("wf_states_to_show"),\n+                "show_excluded_items": navProps.getProperty("showAllParents"),\n+            }\n+\n+    @property\n+    def default_language(self):\n+        portal_state = getMultiAdapter(\n+            (self.context, self.request), name=u"plone_portal_state"\n+        )\n+        return portal_state.default_language()\n+\n+    @property\n+    def navtree_path(self):\n+        return getNavigationRoot(self.context)\n+\n+    @property\n+    def current_language(self):\n+        return (\n+            self.request.get("LANGUAGE", None)\n+            or (self.context and aq_inner(self.context).Language())\n+            or self.default_language\n+        )\n+\n+    @property\n+    @memoize\n+    def navtree(self):\n+        ret = defaultdict(list)\n+        navtree_path = self.navtree_path\n+        for tab in self.portal_tabs:\n+            entry = {}\n+            entry.update(\n+                {\n+                    "path": "/".join((navtree_path, tab["id"])),\n+                    "description": tab["description"],\n+                    "@id": tab["url"],\n+                }\n+            )\n+            if "review_state" in tab:\n+                entry["review_state"] = tab["review_state"]\n+            else:\n+                entry["review_state"] = None\n+\n+            if "title" not in entry:\n+                entry["title"] = tab.get("name") or tab.get("description") or tab["id"]\n             else:\n-                items.append(\n-                    {\n-                        "title": tab.get("title", tab.get("name")),\n-                        "@id": tab["url"] + "",\n-                        "description": tab.get("description", ""),\n-                    }\n+                # translate Home tab\n+                entry["title"] = translate(\n+                    entry["title"], domain="plone", context=self.request\n                 )\n-        result["navigation"]["items"] = items\n-        return result\n \n-    def getTabSubTree(self, tabUrl="", tabPath=None):\n-        if tabPath is None:\n-            # get path for current tab\'s object\n-            tabPath = tabUrl.split(self.portal.absolute_url())[-1]\n-\n-            if tabPath == "" or "/view" in tabPath:\n-                return ""\n-\n-            if tabPath.startswith("/"):\n-                tabPath = tabPath[1:]\n-            elif tabPath.endswith("/"):\n-                # we need a real path, without a slash that might appear\n-                # at the end of the path occasionally\n-                tabPath = str(tabPath.split("/")[0])\n-\n-            if "%20" in tabPath:\n-                # we have the space in object\'s ID that has to be\n-                # converted to the real spaces\n-                tabPath = tabPath.replace("%20", " ").strip()\n-\n-        tabObj = self.portal.restrictedTraverse(tabPath, None)\n-        if tabObj is None:\n-            return ""\n-\n-        strategy = CustomNavtreeStrategy(tabObj)\n-        queryBuilder = NavigationTreeQueryBuilder(tabObj, self.depth)\n-        query = queryBuilder()\n-        data = buildFolderTree(tabObj, obj=tabObj, query=query, strategy=strategy)\n-\n-        return self.recurse(children=data.get("children", []), level=1)\n-\n-    def recurse(self, children=None, level=0, bottomLevel=0):\n-        li = []\n-        for node in children:\n-            item = {"title": node["Title"], "description": node["Description"]}\n-            item["@id"] = node["getURL"]\n-            if bottomLevel <= 0 or level <= bottomLevel:\n-                nc = node["children"]\n-                nc = self.recurse(nc, level + 1, bottomLevel)\n-                if nc:\n-                    item["items"] = nc\n-            li.append(item)\n-        return li\n+            entry["title"] = safe_unicode(entry["title"])\n+            ret[navtree_path].append(entry)\n+\n+        query = {\n+            "path": {\n+                "query": self.navtree_path,\n+                "depth": self.depth,\n+            },\n+            "portal_type": {"query": self.settings["displayed_types"]},\n+            "Language": self.current_language,\n+            "is_default_page": False,\n+        }\n+\n+        if not self.settings["nonfolderish_tabs"]:\n+            query["is_folderish"] = True\n+\n+        if self.settings["filter_on_workflow"]:\n+            query["review_state"] = list(self.settings["workflow_states_to_show"] or ())\n+\n+        if not self.settings["show_excluded_items"]:\n+            query["exclude_from_nav"] = False\n+\n+        context_path = "/".join(self.context.getPhysicalPath())\n+        portal_catalog = getToolByName(self.context, "portal_catalog")\n+        brains = portal_catalog.searchResults(**query)\n+\n+        registry = getUtility(IRegistry)\n+        types_using_view = registry.get("plone.types_use_view_action_in_listings", [])\n+\n+        for brain in brains:\n+            brain_path = brain.getPath()\n+            brain_parent_path = brain_path.rpartition("/")[0]\n+            if brain_parent_path == navtree_path:\n+                # This should be already provided by the portal_tabs_view\n+                continue\n+            if brain.exclude_from_nav and not context_path.startswith(brain_path):\n+                # skip excluded items if they\'re not in our context path\n+                continue\n+            url = brain.getURL()\n+            entry = {\n+                "path": brain_path,\n+                "@id": url,\n+                "title": safe_unicode(brain.Title),\n+                "description": safe_unicode(brain.Description),\n+                "review_state": brain.review_state,\n+                "use_view_action_in_listings": brain.portal_type in types_using_view,\n+            }\n+\n+            if brain.get("nav_title", False):\n+                entry.update({"nav_title": brain["nav_title"]})\n+            else:\n+                entry.update({"nav_title": None})\n+\n+            self.customize_entry(entry, brain)\n+            ret[brain_parent_path].append(entry)\n+        return ret\n+\n+    def customize_entry(self, entry, brain):\n+        """a little helper to add custom entry keys/values."""\n+        pass\n+\n+    def render_item(self, item, path):\n+        sub = self.build_tree(item["path"], first_run=False)\n+\n+        item.update({"items": sub})\n+\n+        if "title" in item and item["title"]:\n+            item["title"] = escape(item["title"])\n+        if "path" in item:\n+            del item["path"]\n+        return item\n+\n+    def build_tree(self, path, first_run=True):\n+        """Non-template based recursive tree building.\n+        3-4 times faster than template based.\n+        """\n+        out = []\n+        for item in self.navtree.get(path, []):\n+            out.append(self.render_item(item, path))\n+\n+        return out\n+\n+    @property\n+    @memoize\n+    def portal_tabs(self):\n+        portal_tabs_view = getMultiAdapter(\n+            (self.context, self.request), name="portal_tabs_view"\n+        )\n+        return portal_tabs_view.topLevelTabs()\n \n \n class NavigationGet(Service):\ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex 9a61a99c7..d2ff5a28d 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -125,11 +125,15 @@ Content-Type: application/json\n         {\n           "@id": "http://localhost:55001/plone", \n           "description": "", \n+          "items": [], \n+          "review_state": null, \n           "title": "Home"\n         }, \n         {\n           "@id": "http://localhost:55001/plone/front-page", \n           "description": "Congratulations! You have successfully installed Plone.", \n+          "items": [], \n+          "review_state": "private", \n           "title": "Welcome to Plone"\n         }\n       ]\ndiff --git a/src/plone/restapi/tests/http-examples/navigation.resp b/src/plone/restapi/tests/http-examples/navigation.resp\nindex 81f1be2eb..8f3ca6afd 100644\n--- a/src/plone/restapi/tests/http-examples/navigation.resp\n+++ b/src/plone/restapi/tests/http-examples/navigation.resp\n@@ -7,11 +7,15 @@ Content-Type: application/json\n     {\n       "@id": "http://localhost:55001/plone", \n       "description": "", \n+      "items": [], \n+      "review_state": null, \n       "title": "Home"\n     }, \n     {\n       "@id": "http://localhost:55001/plone/front-page", \n       "description": "Congratulations! You have successfully installed Plone.", \n+      "items": [], \n+      "review_state": "private", \n       "title": "Welcome to Plone"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/http-examples/navigation_tree.resp b/src/plone/restapi/tests/http-examples/navigation_tree.resp\nindex 67370a3ce..ac39c453a 100644\n--- a/src/plone/restapi/tests/http-examples/navigation_tree.resp\n+++ b/src/plone/restapi/tests/http-examples/navigation_tree.resp\n@@ -7,13 +7,15 @@ Content-Type: application/json\n     {\n       "@id": "http://localhost:55001/plone", \n       "description": "", \n-      "items": "", \n+      "items": [], \n+      "review_state": null, \n       "title": "Home"\n     }, \n     {\n       "@id": "http://localhost:55001/plone/front-page", \n       "description": "Congratulations! You have successfully installed Plone.", \n       "items": [], \n+      "review_state": "private", \n       "title": "Welcome to Plone"\n     }, \n     {\n@@ -31,31 +33,51 @@ Content-Type: application/json\n                 {\n                   "@id": "http://localhost:55001/plone/folder/subfolder1/thirdlevelfolder/fourthlevelfolder", \n                   "description": "", \n-                  "title": "Fourth Level Folder"\n+                  "items": [], \n+                  "nav_title": null, \n+                  "review_state": "private", \n+                  "title": "Fourth Level Folder", \n+                  "use_view_action_in_listings": false\n                 }\n               ], \n-              "title": "Third Level Folder"\n+              "nav_title": null, \n+              "review_state": "private", \n+              "title": "Third Level Folder", \n+              "use_view_action_in_listings": false\n             }\n           ], \n-          "title": "SubFolder 1"\n+          "nav_title": null, \n+          "review_state": "private", \n+          "title": "SubFolder 1", \n+          "use_view_action_in_listings": false\n         }, \n         {\n           "@id": "http://localhost:55001/plone/folder/subfolder2", \n           "description": "", \n-          "title": "SubFolder 2"\n+          "items": [], \n+          "nav_title": null, \n+          "review_state": "private", \n+          "title": "SubFolder 2", \n+          "use_view_action_in_listings": false\n         }, \n         {\n           "@id": "http://localhost:55001/plone/folder/doc1", \n           "description": "", \n-          "title": "A document"\n+          "items": [], \n+          "nav_title": null, \n+          "review_state": "private", \n+          "title": "A document", \n+          "use_view_action_in_listings": false\n         }\n       ], \n+      "review_state": "private", \n       "title": "Some Folder"\n     }, \n     {\n       "@id": "http://localhost:55001/plone/folder2", \n       "description": "", \n       "items": [], \n+      "review_state": "private", \n       "title": "Some Folder 2"\n     }\n   ]\ndiff --git a/src/plone/restapi/tests/test_expansion.py b/src/plone/restapi/tests/test_expansion.py\nindex cc3bdc156..6464860d2 100644\n--- a/src/plone/restapi/tests/test_expansion.py\n+++ b/src/plone/restapi/tests/test_expansion.py\n@@ -21,6 +21,12 @@\n import transaction\n import unittest\n \n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+except ImportError:\n+    PLONE5 = False\n+else:\n+    PLONE5 = True\n \n if PAM_INSTALLED:\n     from plone.app.multilingual.interfaces import IPloneAppMultilingualInstalled  # noqa\n@@ -147,16 +153,28 @@ def test_navigation_is_expandable(self):\n         self.assertEqual(response.status_code, 200)\n         self.assertIn("navigation", list(response.json().get("@components")))\n \n+    @unittest.skipIf(\n+        not PLONE5, "Just Plone 5 currently, tabs in plone 4 does not have review_state"\n+    )\n     def test_navigation_expanded(self):\n         response = self.api_session.get("/folder", params={"expand": "navigation"})\n+\n         self.assertEqual(response.status_code, 200)\n         self.assertEqual(\n             [\n-                {u"title": u"Home", u"@id": self.portal_url + u"", u"description": u""},\n+                {\n+                    u"title": u"Home",\n+                    u"@id": self.portal_url + u"",\n+                    u"description": u"",\n+                    u"review_state": None,\n+                    u"items": [],\n+                },\n                 {\n                     u"title": u"Some Folder",\n                     u"@id": self.portal_url + u"/folder",\n                     u"description": u"",\n+                    u"review_state": "private",\n+                    u"items": [],\n                 },\n             ],\n             response.json()["@components"]["navigation"]["items"],\ndiff --git a/src/plone/restapi/tests/test_services_navigation.py b/src/plone/restapi/tests/test_services_navigation.py\nindex dbbecb3f5..3b8e2c3b9 100644\n--- a/src/plone/restapi/tests/test_services_navigation.py\n+++ b/src/plone/restapi/tests/test_services_navigation.py\n@@ -10,6 +10,13 @@\n import transaction\n import unittest\n \n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+except ImportError:\n+    PLONE5 = False\n+else:\n+    PLONE5 = True\n+\n \n class TestServicesNavigation(unittest.TestCase):\n \n@@ -57,6 +64,9 @@ def setUp(self):\n     def tearDown(self):\n         self.api_session.close()\n \n+    @unittest.skipIf(\n+        not PLONE5, "Just Plone 5 currently, tabs in plone 4 does not have review_state"\n+    )\n     def test_navigation_with_no_params_gets_only_top_level(self):\n         response = self.api_session.get("/folder/@navigation")\n \n@@ -66,15 +76,25 @@ def test_navigation_with_no_params_gets_only_top_level(self):\n             {\n                 "@id": self.portal_url + u"/folder/@navigation",\n                 "items": [\n-                    {u"title": u"Home", u"@id": self.portal_url, u"description": u""},\n                     {\n-                        u"title": u"Some Folder",\n+                        u"@id": self.portal_url,\n+                        u"description": u"",\n+                        u"items": [],\n+                        u"review_state": None,\n+                        u"title": u"Home",\n+                    },\n+                    {\n                         u"@id": self.portal_url + u"/folder",\n                         u"description": u"",\n+                        u"items": [],\n+                        u"review_state": "private",\n+                        u"title": u"Some Folder",\n                     },\n                     {\n                         u"@id": self.portal_url + u"/folder2",\n                         u"description": u"",\n+                        u"items": [],\n+                        u"review_state": "private",\n                         u"title": u"Some Folder 2",\n                     },\n                 ],\n@@ -101,7 +121,9 @@ def test_navigation_service(self):\n             response.json()["items"][1]["items"][0]["items"][0]["title"],\n             u"Third Level Folder",\n         )\n-        self.assertNotIn("items", response.json()["items"][1]["items"][0]["items"][0])\n+        self.assertEqual(\n+            len(response.json()["items"][1]["items"][0]["items"][0]["items"]), 0\n+        )\n \n         response = self.api_session.get(\n             "/folder/@navigation", params={"expand.navigation.depth": 4}\n'

