Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-07-30T21:56:47+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/33170cecea172a650611855d38c5c6cb0789a7b3

Make the DX factory work in a GS baseline import work.

ps resolveDottedName either returns or raises

Files changed:
M CHANGES.rst
M plone/dexterity/factory.py
M plone/dexterity/fti.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d20d9c8..fa17f0d 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -15,7 +15,9 @@ New features:\n \n Bug fixes:\n \n-- *add item here*\n+- Fix ft._updateProperty so it doesn\'t break when receiving an empty value.\n+  This happens when an DX FTI is part of a Generic Setup baseline import.\n+  [jaroel]\n \n \n 2.6.0 (2018-04-03)\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex 9ee459c..9949213 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -30,7 +30,7 @@ def description(self):\n     def __call__(self, *args, **kw):\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n \n-        klass = resolveDottedName(fti.klass)\n+        klass = resolveDottedName(fti.klass) if fti.klass else None\n         if klass is None or not callable(klass):\n             raise ValueError(\n                 "Content class %s set for type %s is not valid" %\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 265a84d..b544f21 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -186,7 +186,7 @@ def __init__(self, *args, **kwargs):\n \n         # Set the content_meta_type from the klass\n \n-        klass = utils.resolveDottedName(self.klass)\n+        klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n             self.content_meta_type = getattr(klass, \'meta_type\', None)\n \n@@ -218,7 +218,7 @@ def Metatype(self):\n         if self.content_meta_type:\n             return self.content_meta_type\n         # BBB - this didn\'t use to be set\n-        klass = utils.resolveDottedName(self.klass)\n+        klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n             self.content_meta_type = getattr(klass, \'meta_type\', None)\n         return self.content_meta_type\n@@ -291,7 +291,9 @@ def _updateProperty(self, id, value):\n \n             # Update meta_type from klass\n             if id == \'klass\':\n-                klass = utils.resolveDottedName(new_value)\n+                klass = None\n+                if new_value:\n+                    klass = utils.resolveDottedName(new_value)\n                 if klass is not None:\n                     self.content_meta_type = getattr(klass, \'meta_type\', None)\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-07-30T21:56:47+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/9e036ea59eaf205beb16564b0efcd1725fd6e846

Pass on attribute access to item access + log a bunch

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex efcf014..e19b172 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -48,6 +48,7 @@\n from zope.security.interfaces import IPermission\n \n import six\n+import warnings\n \n \n _marker = object()\n@@ -704,6 +705,10 @@ def __init__(self, id=None, **kwargs):\n         DexterityContent.__init__(self, id, **kwargs)\n \n     def __getattr__(self, name):\n+        if name in self:\n+            msg = "Trying to access item \'{}\' in {} by attribute".format(name, self)\n+            warnings.warn(msg)\n+\n         try:\n             return DexterityContent.__getattr__(self, name)\n         except AttributeError:\n@@ -712,6 +717,36 @@ def __getattr__(self, name):\n         # Be specific about the implementation we use\n         return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n \n+    def __setattr__(self, name, value):\n+        try:\n+            has_item_by_name = name in self\n+        except:\n+            has_item_by_name = False\n+        if has_item_by_name:\n+            msg = (\n+                "An item with the same name already exists. Use item access, for example: obj[\'{}\'] = value. "\n+                "We are setting the item instead of the attribute!"\n+            ).format(name)\n+            warnings.warn(msg)\n+            # We remove the old one and then add the new one so the old one is\n+            # unindexed and the new is indexed.\n+            del self[name]\n+            self[name] = value\n+        else:\n+            super(Container, self).__setattr__(name, value)\n+\n+    def _delObject(self, name, *args, **kwargs):\n+        super(Container, self)._delObject(name, *args, **kwargs)\n+\n+        # This will trigger when an item was deleted from this container and\n+        # attribute by the same name exists. ie obj[\'my_id\'] and obj.my_id.\n+        if getattr(aq_base(self), name, _marker) is not _marker:\n+            msg = (\n+                "Item \'{}\' contained in {} was shadowed by an attribute."\n+                "You might want to delete the attribute as well."\n+            ).format(name, self)\n+            warnings.warn(msg)\n+\n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\n         """Delete the contained objects with the specified ids.\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2018-11-01T22:03:16+09:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/e8b4924f72ec0c41cd6fea8c367f6ec61dcab4b0

Merge branch 'master' into dxcontainer-siteroot

Files changed:
A news/.gitkeep
A news/2582.trivial
A news/89.feature
A news/90.bugfix
A news/93.bugfix
A plone/dexterity/bbb.py
A pyproject.toml
M CHANGES.rst
M MANIFEST.in
M plone/dexterity/browser/traversal.py
M plone/dexterity/configure.zcml
M plone/dexterity/content.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/schema.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M setup.py
D .gitattributes

b'diff --git a/.gitattributes b/.gitattributes\ndeleted file mode 100644\nindex 6f9ff67..0000000\n--- a/.gitattributes\n+++ /dev/null\n@@ -1 +0,0 @@\n-CHANGES.rst merge=union\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex fa17f0d..f25f84a 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -2,22 +2,29 @@ Changelog\n =========\n \n \n-2.6.1 (unreleased)\n-------------------\n+.. You should *NOT* be adding new change log entries to this file.\n+   You should create a file in the news directory instead.\n+   For helpful instructions, please see:\n+   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n+\n+.. towncrier release notes start\n \n-Breaking changes:\n \n-- *add item here*\n+2.6.1 (2018-09-23)\n+------------------\n \n New features:\n \n-- *add item here*\n+- ZServer is now optional\n+  [pbauer]\n \n Bug fixes:\n \n - Fix ft._updateProperty so it doesn\'t break when receiving an empty value.\n   This happens when an DX FTI is part of a Generic Setup baseline import.\n   [jaroel]\n+- Other Python 3 compatibility fixes\n+  [ale-rt, pbauer, jensens]\n \n \n 2.6.0 (2018-04-03)\ndiff --git a/MANIFEST.in b/MANIFEST.in\nindex ab6bbf8..fd7011e 100644\n--- a/MANIFEST.in\n+++ b/MANIFEST.in\n@@ -7,3 +7,6 @@ recursive-include plone *\n global-include *.mo\n global-exclude *.pyc\n \n+include pyproject.toml\n+recursive-exclude news *\n+exclude news\ndiff --git a/news/.gitkeep b/news/.gitkeep\nnew file mode 100644\nindex 0000000..8b13789\n--- /dev/null\n+++ b/news/.gitkeep\n@@ -0,0 +1 @@\n+\ndiff --git a/news/2582.trivial b/news/2582.trivial\nnew file mode 100644\nindex 0000000..1fbbc3b\n--- /dev/null\n+++ b/news/2582.trivial\n@@ -0,0 +1,3 @@\n+Fixed test for minor check_id change.\n+\n+We need the \'Access contents information\' permission.\ndiff --git a/news/89.feature b/news/89.feature\nnew file mode 100644\nindex 0000000..615c833\n--- /dev/null\n+++ b/news/89.feature\n@@ -0,0 +1,2 @@\n+Implement getSize method to sum the size of all field values that have a getSize method.\n+[davisagli]\ndiff --git a/news/90.bugfix b/news/90.bugfix\nnew file mode 100644\nindex 0000000..43a51e8\n--- /dev/null\n+++ b/news/90.bugfix\n@@ -0,0 +1,3 @@\n+Other Python 3 compatibility fixes\n+\n+[ale-rt]\ndiff --git a/news/93.bugfix b/news/93.bugfix\nnew file mode 100644\nindex 0000000..ec38320\n--- /dev/null\n+++ b/news/93.bugfix\n@@ -0,0 +1,3 @@\n+Add PathReprProvider as a baseclass of Container to restore the original __repr__ behavior instead of the new __repr__ from persistent.Persistent.\n+PathReprProvider needs to be before CMFOrderedBTreeFolderBase (which inherits OrderedBTreeFolderBase > BTreeFolder2Base > Persistent).\n+[pbauer]\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nnew file mode 100644\nindex 0000000..3d025fa\n--- /dev/null\n+++ b/plone/dexterity/bbb.py\n@@ -0,0 +1,22 @@\n+# -*- coding: utf-8 -*-\n+import pkg_resources\n+\n+HAS_ZSERVER = True\n+try:\n+    dist = pkg_resources.get_distribution(\'ZServer\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_ZSERVER = False\n+\n+NullResource = None\n+\n+\n+class Resource(object):\n+    def dav__init(self, request, response):\n+        pass\n+\n+    def dav__validate(self, object, methodname, REQUEST):\n+        pass\n+\n+    def dav__simpleifhandler(self, request, response, method=\'PUT\',\n+                             col=0, url=None, refresh=0):\n+        pass\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex c7b93a0..b8b52e5 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -2,10 +2,10 @@\n from Acquisition import aq_inner\n from Acquisition import aq_parent\n from Acquisition.interfaces import IAcquirer\n+from plone.dexterity import bbb\n from plone.dexterity.filerepresentation import FolderDataResource\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContent\n-from webdav.NullResource import NullResource\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n@@ -14,6 +14,11 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n+if bbb.HAS_ZSERVER:\n+    from webdav.NullResource import NullResource\n+else:\n+    NullResource = bbb.NullResource\n+\n \n @adapter(IDexterityContent, IBrowserRequest)\n class DexterityPublishTraverse(DefaultPublishTraverse):\ndiff --git a/plone/dexterity/configure.zcml b/plone/dexterity/configure.zcml\nindex d09faa0..1add73a 100644\n--- a/plone/dexterity/configure.zcml\n+++ b/plone/dexterity/configure.zcml\n@@ -128,4 +128,12 @@\n \n     <!-- PrimaryFieldInfo -->\n     <adapter factory=".primary.PrimaryFieldInfo"/>\n+\n+    <!-- ISized -->\n+    <adapter\n+        for="*"\n+        factory="zope.size.DefaultSized"\n+        provides="zope.size.interfaces.ISized"\n+        />\n+\n </configure>\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex e19b172..bebeb3b 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -7,6 +7,7 @@\n from Acquisition import aq_parent\n from DateTime import DateTime\n from OFS.PropertyManager import PropertyManager\n+from OFS.SimpleItem import PathReprProvider\n from OFS.SimpleItem import SimpleItem\n from Products.CMFCore import permissions\n from Products.CMFCore.CMFCatalogAware import CMFCatalogAware\n@@ -364,11 +365,13 @@ def __getattr__(self, name):\n     # that can\'t be encoded to ASCII will throw a UnicodeEncodeError\n \n     def _get__name__(self):\n-        return six.text_type(self.id)\n+        if six.PY2:\n+            return safe_unicode(self.id)\n+        return self.id\n \n     def _set__name__(self, value):\n-        if isinstance(value, six.text_type):\n-            value = str(value)  # may throw, but that\'s OK - id must be ASCII\n+        if six.PY2 and isinstance(value, six.text_type):\n+            value = str(value)  # may throw, but id must be ASCII in py2\n         self.id = value\n \n     __name__ = property(_get__name__, _set__name__)\n@@ -414,7 +417,7 @@ def setModificationDate(self, modification_date=None):\n     @security.protected(permissions.View)\n     def Title(self):\n         # this is a CMF accessor, so should return utf8-encoded\n-        if isinstance(self.title, six.text_type):\n+        if six.PY2 and isinstance(self.title, six.text_type):\n             return self.title.encode(\'utf-8\')\n         return self.title or \'\'\n \n@@ -429,7 +432,7 @@ def Description(self):\n         value = value.replace(\'\\r\\n\', \' \').replace(\'\\r\', \' \').replace(\'\\n\', \' \')  # noqa\n \n         # this is a CMF accessor, so should return utf8-encoded\n-        if isinstance(value, six.text_type):\n+        if six.PY2 and isinstance(value, six.text_type):\n             value = value.encode(\'utf-8\')\n \n         return value\n@@ -446,7 +449,9 @@ def listCreators(self):\n         # List Dublin Core Creator elements - resource authors.\n         if self.creators is None:\n             return ()\n-        return tuple(safe_utf8(c) for c in self.creators)\n+        if six.PY2:\n+            return tuple(safe_utf8(c) for c in self.creators)\n+        return self.creators\n \n     @security.protected(permissions.View)\n     def Creator(self):\n@@ -459,7 +464,9 @@ def Subject(self):\n         # Dublin Core Subject element - resource keywords.\n         if self.subject is None:\n             return ()\n-        return tuple(safe_utf8(s) for s in self.subject)\n+        if six.PY2:\n+            return tuple(safe_utf8(s) for s in self.subject)\n+        return tuple(self.subject)\n \n     @security.protected(permissions.View)\n     def Publisher(self):\n@@ -469,7 +476,9 @@ def Publisher(self):\n     @security.protected(permissions.View)\n     def listContributors(self):\n         # Dublin Core Contributor elements - resource collaborators.\n-        return tuple(safe_utf8(c) for c in self.contributors)\n+        if six.PY2:\n+            return tuple(safe_utf8(c) for c in self.contributors)\n+        return tuple(self.contributors)\n \n     @security.protected(permissions.View)\n     def Contributors(self):\n@@ -540,7 +549,9 @@ def Language(self):\n     @security.protected(permissions.View)\n     def Rights(self):\n         # Dublin Core Rights element - resource copyright.\n-        return safe_utf8(self.rights)\n+        if six.PY2:\n+            return safe_utf8(self.rights)\n+        return self.rights\n \n     # ICatalogableDublinCore\n \n@@ -669,6 +680,7 @@ class Item(PasteBehaviourMixin, BrowserDefaultMixin, DexterityContent):\n \n @implementer(IDexterityContainer)\n class Container(\n+        PathReprProvider,\n         PasteBehaviourMixin, DAVCollectionMixin, BrowserDefaultMixin,\n         CMFCatalogAware, CMFOrderedBTreeFolderBase, DexterityContent):\n     """Base class for folderish items\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 85daf0c..9ebf6e5 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -1,9 +1,11 @@\n # -*- coding: utf-8 -*-\n+from AccessControl import ClassSecurityInfo\n+from AccessControl.class_init import InitializeClass\n from Acquisition import aq_base\n from Acquisition import Implicit\n-from email.generator import Generator\n from email.message import Message\n from email.parser import FeedParser\n+from plone.dexterity import bbb\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n from plone.dexterity.interfaces import IDexterityContent\n@@ -12,8 +14,8 @@\n from plone.rfc822 import constructMessageFromSchemata\n from plone.rfc822 import initializeObjectFromSchemata\n from plone.rfc822.interfaces import IPrimaryField\n+from Products.CMFCore import permissions\n from Products.CMFCore.utils import getToolByName\n-from webdav.Resource import Resource\n from zExceptions import MethodNotAllowed\n from zExceptions import Unauthorized\n from zope.component import adapter\n@@ -25,15 +27,19 @@\n from zope.filerepresentation.interfaces import IRawWriteFile\n from zope.interface import implementer\n from zope.interface.interfaces import IInterface\n-from zope.lifecycleevent import modified, ObjectCreatedEvent\n+from zope.lifecycleevent import modified\n+from zope.lifecycleevent import ObjectCreatedEvent\n from zope.schema import getFieldsInOrder\n from zope.size.interfaces import ISized\n from ZPublisher.Iterators import IStreamIterator\n+\n+import six\n import tempfile\n \n-from AccessControl.class_init import InitializeClass\n-from AccessControl import ClassSecurityInfo\n-from Products.CMFCore import permissions\n+if bbb.HAS_ZSERVER:\n+    from webdav.Resource import Resource\n+else:\n+    Resource = bbb.Resource\n \n \n class DAVResourceMixin(object):\n@@ -58,10 +64,26 @@ def get_size(self):\n         if sized is None:\n             return 0\n         unit, size = sized.sizeForSorting()\n-        if unit == \'bytes\':\n+        if unit in (\'byte\', \'bytes\'):\n             return size\n         return 0\n \n+    @security.protected(permissions.View)\n+    def getSize(self):\n+        # Get the size of the content item in bytes.\n+        # Unlike get_size, this method returns the size\n+        # by looking at the actual values. The getObjSize catalog\n+        # indexer uses get_size(), which looks up an ISized adapter,\n+        # and the default adapter uses getSize().\n+        size = 0\n+        for schema in iterSchemata(self):\n+            adapter = schema(self)\n+            for name, field in getFieldsInOrder(schema):\n+                value = getattr(adapter, name, None)\n+                if hasattr(value, \'getSize\'):\n+                    size += value.getSize()\n+        return size\n+\n     @security.protected(permissions.View)\n     def content_type(self):\n         # Return the content type (MIME type) of the item.\n@@ -665,9 +687,14 @@ def _getStream(self):\n         # this approach allows us to hand off the stream iterator to the\n         # publisher, which will serve it efficiently even after the\n         # transaction is closed\n-        out = tempfile.TemporaryFile(mode=\'w+b\')\n-        generator = Generator(out, mangle_from_=False)\n-        generator.flatten(self._getMessage())\n+        message = self._getMessage()\n+        if six.PY2:\n+            # message.as_string will return str in both Python 2 and 3\n+            kw = {\'mode\': \'w+b\'}\n+        else:\n+            kw = {\'mode\': \'w+\', \'encoding\': \'utf-8\'}\n+        out = tempfile.TemporaryFile(**kw)\n+        out.write(message.as_string())\n         self._size = out.tell()\n         out.seek(0)\n         return out\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex b544f21..5e0c39f 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -15,16 +15,18 @@\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n+from zope.component.hooks import getSiteManager\n from zope.component.interfaces import IFactory\n from zope.event import notify\n from zope.i18nmessageid import Message\n from zope.interface import implementer\n from zope.lifecycleevent import modified\n from zope.security.interfaces import IPermission\n-from zope.site.hooks import getSiteManager\n+\n import logging\n import os.path\n import plone.dexterity.schema\n+import six\n \n \n @implementer(IDexterityFTIModificationDescription)\n@@ -42,6 +44,10 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n \n     meta_type = "Dexterity FTI"\n \n+    behaviors_type = \'ulines\'\n+    if six.PY2:\n+        behaviors_type = \'lines\'\n+\n     _properties = base.DynamicViewTypeInformation._properties + (\n         {\n             \'id\': \'add_permission\',\n@@ -62,7 +68,7 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n         },\n         {\n             \'id\': \'behaviors\',\n-            \'type\': \'lines\',\n+            \'type\': behaviors_type,\n             \'mode\': \'w\',\n             \'label\': \'Behaviors\',\n             \'description\': \'Names of enabled behaviors type\'\n@@ -192,26 +198,35 @@ def __init__(self, *args, **kwargs):\n \n     def Title(self):\n         if self.title and self.i18n_domain:\n-            try:\n-                return Message(self.title.decode(\'utf8\'), self.i18n_domain)\n-            except UnicodeDecodeError:\n-                return Message(self.title.decode(\'latin-1\'), self.i18n_domain)\n+            if six.PY2:\n+                try:\n+                    return Message(self.title.decode(\'utf8\'), self.i18n_domain)\n+                except UnicodeDecodeError:\n+                    return Message(\n+                        self.title.decode(\'latin-1\'), self.i18n_domain)\n+            else:\n+                return Message(self.title, self.i18n_domain)\n         else:\n+            if six.PY2:\n+                if self.title:\n+                    return self.title.decode(\'utf8\')\n+                return self.getId()\n             return self.title or self.getId()\n \n     def Description(self):\n         if self.description and self.i18n_domain:\n-            try:\n-                return Message(\n-                    self.description.decode(\'utf8\'),\n-                    self.i18n_domain\n-                )\n-            except UnicodeDecodeError:\n-                return Message(\n-                    self.description.decode(\'latin-1\'),\n-                    self.i18n_domain\n-                )\n+            if six.PY2:\n+                try:\n+                    return Message(\n+                        self.description.decode(\'utf8\'), self.i18n_domain)\n+                except UnicodeDecodeError:\n+                    return Message(\n+                        self.description.decode(\'latin-1\'), self.i18n_domain)\n+            else:\n+                return Message(self.description, self.i18n_domain)\n         else:\n+            if six.PY2 and self.description:\n+                return self.description.decode(\'utf8\')\n             return self.description\n \n     def Metatype(self):\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 1099780..90cf48a 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -1,5 +1,4 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.interfaces import ISiteRoot\n from plone.alterego import dynamic\n from plone.alterego.interfaces import IDynamicObjectFactory\n from plone.behavior.interfaces import IBehavior\n@@ -11,6 +10,7 @@\n from plone.supermodel.parser import ISchemaPolicy\n from plone.supermodel.utils import syncSchema\n from plone.synchronize import synchronized\n+from Products.CMFCore.interfaces import ISiteRoot\n from threading import RLock\n from zope.component import adapter\n from zope.component import getAllUtilitiesRegisteredFor\n@@ -23,8 +23,10 @@\n \n import functools\n import logging\n+import six\n import types\n \n+\n log = logging.getLogger(__name__)\n \n # Dynamic modules\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 2fd0b5a..c82dd02 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,12 +1,20 @@\n # -*- coding: utf-8 -*-\n from mock import Mock\n import gc\n+import pkg_resources\n import six\n import unittest\n import zope.component\n import zope.component.testing\n \n \n+HAS_ZSERVER = True\n+try:\n+    dist = pkg_resources.get_distribution(\'ZServer\')\n+except pkg_resources.DistributionNotFound:\n+    HAS_ZSERVER = False\n+\n+\n class MockTestCase(unittest.TestCase):\n     """Base class for tests using mocks.\n     """\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex a53459a..6f2dd32 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -3,6 +3,7 @@\n from Products.CMFPlone.interfaces import IConstrainTypes\n from datetime import date, datetime\n from mock import Mock\n+from plone.autoform.interfaces import IFormFieldProvider\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.behavior.registration import BehaviorRegistration\n@@ -575,13 +576,16 @@ def test_name_and_id_in_sync(self):\n     def test_name_unicode_id_str(self):\n \n         i = Item()\n-\n-        try:\n-            i.__name__ = \'\\xc3\\xb8\'.decode(\'utf-8\')\n-        except UnicodeEncodeError:\n-            pass\n+        if six.PY2:\n+            try:\n+                i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n+            except UnicodeEncodeError:\n+                pass\n+            else:\n+                self.fail()\n         else:\n-            self.fail()\n+            i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n+\n \n         i.__name__ = u"o"\n \n@@ -989,16 +993,24 @@ def test_container_manage_delObjects(self):\n         # OFS does not check the delete permission for each object being\n         # deleted. We want to.\n         item = Item(id=\'test\')\n-        container = Container(id=\'container\')\n+        container = Container(id=\'testcontainer\')\n         container[\'test\'] = item\n+        # self.layer[\'portal\'][\'testcontainer\'] = container\n         from zExceptions import Unauthorized\n         self.assertRaises(Unauthorized, container.manage_delObjects, [\'test\'])\n \n         # Now permit it and try again.\n         from Products.CMFCore.permissions import DeleteObjects\n+        # in order to use manage_permissions the permission has to be defined\n+        # somewhere in the mro\n+        # since webdav is no longer part here, where it was defined in ZServer.\n+        # lets add it explicit here.\n+        perms_before = item.__class__.__ac_permissions__\n+        item.__class__.__ac_permissions__ = ((DeleteObjects, ()),)\n         item.manage_permission(DeleteObjects, (\'Anonymous\',))\n         container.manage_delObjects([\'test\'])\n         self.assertFalse(\'test\' in container)\n+        item.__class__.__ac_permissions__ = perms_before\n \n     def test_iconstraintypes_adapter(self):\n \n@@ -1094,3 +1106,42 @@ def test_verifyObjectPaste_fti_does_allow_content(self):\n         self.mock_utility(mock_pt, ITypesTool)\n \n         container._verifyObjectPaste(content, True)\n+\n+    def test_getSize(self):\n+        class SizedValue(str):\n+            def getSize(self):\n+                return len(self)\n+\n+        class ITest(Interface):\n+            field1 = zope.schema.TextLine()\n+\n+        class ITestBehavior(Interface):\n+            field2 = zope.schema.TextLine()\n+        alsoProvides(ITestBehavior, IFormFieldProvider)\n+\n+        self.mock_adapter(\n+            DexterityBehaviorAssignable,\n+            IBehaviorAssignable,\n+            (IDexterityContent,)\n+        )\n+\n+        fti_mock = DexterityFTI(u\'testtype\')\n+        fti_mock.lookupSchema = Mock(return_value=ITest)\n+        fti_mock.behaviors = [\'test_behavior\']\n+        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+\n+        behavior_reg = BehaviorRegistration(\n+            u"Test Behavior",\n+            "",\n+            ITestBehavior,\n+            ITestBehavior,\n+            None\n+        )\n+        self.mock_utility(behavior_reg, IBehavior, name="test_behavior")\n+\n+        item = Item(\'item\')\n+        item.portal_type = \'testtype\'\n+        item.field1 = SizedValue(\'1\')\n+        item.field2 = SizedValue(\'22\')\n+\n+        self.assertEqual(3, item.getSize())\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 3694229..1994c39 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -350,10 +350,10 @@ def test_meta_type_change_class(self):\n         self.assertEqual(TestClass2.meta_type, fti.Metatype())\n \n     def test_title_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', title=\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u\'testtype\', title=b\'t\\xc3\\xa9st\')\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(\'t\\xc3\\xa9st\', fti.Title())\n+        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Title())\n \n         # with an i18n domain, we get a Message\n         fti.i18n_domain = \'test\'\n@@ -362,10 +362,10 @@ def test_title_i18n(self):\n         self.assertEqual(\'test\', msgid.domain)\n \n     def test_description_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', description=\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u\'testtype\', description=b\'t\\xc3\\xa9st\')\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(\'t\\xc3\\xa9st\', fti.Description())\n+        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Description())\n \n         # with an i18n domain, we get a Message\n         fti.i18n_domain = \'test\'\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex e876380..24f1a86 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -52,6 +52,10 @@ def testAddContentToContainer_preserves_existing_id(self):\n         from plone.dexterity.content import Container\n         container = Container()\n         container._ordering = u\'unordered\'\n+        # Allow anyone to access the contents information on the container.\n+        # This allows to check for existing content with the same id.\n+        container.manage_permission(\n+            \'Access contents information\', [\'Anonymous\'], acquire=1)\n \n         from zope.component import provideAdapter, provideUtility\n         from zope.container.interfaces import INameChooser\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 1a9af7b..38cec1a 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,540 +1,544 @@\n # -*- coding: utf-8 -*-\n-from .case import Dummy\n+from .case import HAS_ZSERVER\n from .case import MockTestCase\n-from email.Message import Message\n-from mock import Mock\n-from OFS.Folder import Folder\n-from OFS.SimpleItem import SimpleItem\n-from plone.autoform.interfaces import IFormFieldProvider\n-from plone.behavior.interfaces import IBehaviorAssignable\n-from plone.dexterity.browser.traversal import DexterityPublishTraverse\n-from plone.dexterity.content import Container\n-from plone.dexterity.content import Item\n-from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n-from plone.dexterity.filerepresentation import DefaultFileFactory\n-from plone.dexterity.filerepresentation import DefaultReadFile\n-from plone.dexterity.filerepresentation import DefaultWriteFile\n-from plone.dexterity.filerepresentation import FolderDataResource\n-from plone.dexterity.fti import DexterityFTI\n-from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n-from plone.dexterity.interfaces import IDexterityFTI\n-from plone.dexterity.schema import SCHEMA_CACHE\n-from plone.rfc822.interfaces import IPrimaryField\n-from six import StringIO\n-from webdav.NullResource import NullResource\n-from zExceptions import Forbidden\n-from zExceptions import MethodNotAllowed\n-from zExceptions import Unauthorized\n-from zope import schema\n-from zope.component.interfaces import IFactory\n-from zope.filerepresentation.interfaces import IDirectoryFactory\n-from zope.filerepresentation.interfaces import IFileFactory\n-from zope.filerepresentation.interfaces import IRawReadFile\n-from zope.filerepresentation.interfaces import IRawWriteFile\n-from zope.interface import alsoProvides\n-from zope.interface import implementer\n-from zope.interface import Interface\n-from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n-from zope.publisher.browser import TestRequest\n-from zope.size.interfaces import ISized\n-from ZPublisher.HTTPResponse import HTTPResponse\n-from ZPublisher.Iterators import IStreamIterator\n-\n-import re\n-\n-\n-class ITestBehavior(Interface):\n-    foo = schema.Int()\n-    bar = schema.Bytes()\n-alsoProvides(ITestBehavior, IFormFieldProvider)\n \n+if HAS_ZSERVER:\n \n-class DAVTestRequest(TestRequest):\n-\n-    get_header = TestRequest.getHeader\n-\n-    def _createResponse(self):\n-        return HTTPResponse()\n-\n-\n-class ItemDummy(Dummy):\n-    """ Dummy objects with title getter and setter """\n-\n-    title = \'\'\n-\n-    def Title(self):\n-        return self.title\n-\n-    def setTitle(self, title):\n-        self.title = title\n-\n-    def getId(self):\n-        return self.__dict__.get(\'id\', \'\')\n-\n-\n-class TestWebZope2DAVAPI(MockTestCase):\n-\n-    def test_get_size_no_adapter(self):\n-        item = Item(\'test\')\n-\n-        self.assertEqual(0, item.get_size())\n-\n-    def test_get_size_wrong_adapter(self):\n-        class SizedAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-\n-            def sizeForSorting(self):\n-                return \'lines\', 10\n-\n-            def sizeForDisplay(self):\n-                \'10 lines\'\n-        self.mock_adapter(SizedAdapter, ISized, (Item,))\n-        item = Item(\'test\')\n-\n-        self.assertEqual(0, item.get_size())\n-\n-    def test_get_size_right_adapter(self):\n-        class SizedAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n+    from .case import Dummy\n+    from email.message import Message\n+    from mock import Mock\n+    from OFS.Folder import Folder\n+    from OFS.SimpleItem import SimpleItem\n+    from plone.autoform.interfaces import IFormFieldProvider\n+    from plone.behavior.interfaces import IBehaviorAssignable\n+    from plone.dexterity.browser.traversal import DexterityPublishTraverse\n+    from plone.dexterity.content import Container\n+    from plone.dexterity.content import Item\n+    from plone.dexterity.filerepresentation import DefaultDirectoryFactory\n+    from plone.dexterity.filerepresentation import DefaultFileFactory\n+    from plone.dexterity.filerepresentation import DefaultReadFile\n+    from plone.dexterity.filerepresentation import DefaultWriteFile\n+    from plone.dexterity.filerepresentation import FolderDataResource\n+    from plone.dexterity.fti import DexterityFTI\n+    from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n+    from plone.dexterity.interfaces import IDexterityFTI\n+    from plone.dexterity.schema import SCHEMA_CACHE\n+    from plone.rfc822.interfaces import IPrimaryField\n+    from six import StringIO\n+    from webdav.NullResource import NullResource\n+    from zExceptions import Forbidden\n+    from zExceptions import MethodNotAllowed\n+    from zExceptions import Unauthorized\n+    from zope import schema\n+    from zope.component.interfaces import IFactory\n+    from zope.filerepresentation.interfaces import IDirectoryFactory\n+    from zope.filerepresentation.interfaces import IFileFactory\n+    from zope.filerepresentation.interfaces import IRawReadFile\n+    from zope.filerepresentation.interfaces import IRawWriteFile\n+    from zope.interface import alsoProvides\n+    from zope.interface import implementer\n+    from zope.interface import Interface\n+    from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n+    from zope.publisher.browser import TestRequest\n+    from zope.size.interfaces import ISized\n+    from ZPublisher.HTTPResponse import HTTPResponse\n+    from ZPublisher.Iterators import IStreamIterator\n \n-            def sizeForSorting(self):\n-                return \'bytes\', 10\n+    import re\n \n-            def sizeForDisplay(self):\n-                \'10 bytes\'\n-        self.mock_adapter(SizedAdapter, ISized, (Item,))\n-        item = Item(\'test\')\n \n-        self.assertEqual(10, item.get_size())\n+    class ITestBehavior(Interface):\n+        foo = schema.Int()\n+        bar = schema.Bytes()\n+    alsoProvides(ITestBehavior, IFormFieldProvider)\n \n-    def test_content_type_no_adapter(self):\n-        item = Item(\'test\')\n \n-        self.assertEqual(None, item.content_type())\n-        self.assertEqual(None, item.Format())\n+    class DAVTestRequest(TestRequest):\n \n-    def test_content_type_simple_adapter(self):\n-        class ReadFileAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = \'text/foo\'\n-            # others omitted\n-        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n-        item = Item(\'test\')\n+        get_header = TestRequest.getHeader\n \n-        self.assertEqual(\'text/foo\', item.content_type())\n-        self.assertEqual(\'text/foo\', item.Format())\n+        def _createResponse(self):\n+            return HTTPResponse()\n \n-    def test_get_no_adapter(self):\n-        item = Item(\'test\')\n \n-        self.assertEqual(\'\', item.manage_DAVget())\n+    class ItemDummy(Dummy):\n+        """ Dummy objects with title getter and setter """\n+\n+        title = \'\'\n+\n+        def Title(self):\n+            return self.title\n+\n+        def setTitle(self, title):\n+            self.title = title\n+\n+        def getId(self):\n+            return self.__dict__.get(\'id\', \'\')\n \n-    def test_get_simple_adapter(self):\n-        class ReadFileAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = \'text/foo\'\n-            encoding = \'latin1\'\n \n-            def size(self):\n-                return 10\n+    class TestWebZope2DAVAPI(MockTestCase):\n \n-            def read(self, size=None):\n-                return \'1234567890\'\n-        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+        def test_get_size_no_adapter(self):\n+            item = Item(\'test\')\n \n-        request = DAVTestRequest()\n+            self.assertEqual(0, item.get_size())\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+        def test_get_size_wrong_adapter(self):\n+            class SizedAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-        self.assertEqual(\'1234567890\', item.manage_DAVget())\n-        self.assertEqual(\n-            \'text/foo; charset="latin1"\',\n-            request.response.getHeader(\'Content-Type\')\n-        )\n-        self.assertEqual(\'10\', request.response.getHeader(\'Content-Length\'))\n+                def sizeForSorting(self):\n+                    return \'lines\', 10\n \n-    def test_get_minimal_adapter(self):\n-        class ReadFileAdapter(object):\n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = None\n-            encoding = None\n+                def sizeForDisplay(self):\n+                    \'10 lines\'\n+            self.mock_adapter(SizedAdapter, ISized, (Item,))\n+            item = Item(\'test\')\n \n-            def size(self):\n-                return None\n+            self.assertEqual(0, item.get_size())\n \n-            def read(self, size=None):\n-                return \'1234567890\'\n-        self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+        def test_get_size_right_adapter(self):\n+            class SizedAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-        request = DAVTestRequest()\n+                def sizeForSorting(self):\n+                    return \'bytes\', 10\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def sizeForDisplay(self):\n+                    \'10 bytes\'\n+            self.mock_adapter(SizedAdapter, ISized, (Item,))\n+            item = Item(\'test\')\n \n-        self.assertEqual(\'1234567890\', item.manage_DAVget())\n-        self.assertEqual(None, request.response.getHeader(\'Content-Type\'))\n-        self.assertEqual(None, request.response.getHeader(\'Content-Length\'))\n+            self.assertEqual(10, item.get_size())\n \n-    def test_get_streaming(self):\n-        @implementer(IStreamIterator)\n-        class ReadFileAdapter(object):\n+        def test_content_type_no_adapter(self):\n+            item = Item(\'test\')\n \n-            def __init__(self, context):\n-                self.context = context\n-            mimeType = None\n-            encoding = None\n+            self.assertEqual(None, item.content_type())\n+            self.assertEqual(None, item.Format())\n \n-            def size(self):\n-                return 10\n+        def test_content_type_simple_adapter(self):\n+            class ReadFileAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = \'text/foo\'\n+                # others omitted\n+            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n+            item = Item(\'test\')\n \n-            def read(self, size=None):\n-                return \'1234567890\'\n+            self.assertEqual(\'text/foo\', item.content_type())\n+            self.assertEqual(\'text/foo\', item.Format())\n \n-        adapterInstance = ReadFileAdapter(None)\n+        def test_get_no_adapter(self):\n+            item = Item(\'test\')\n \n-        def factory(context):\n-            return adapterInstance\n-        self.mock_adapter(factory, IRawReadFile, (Item,))\n+            self.assertEqual(\'\', item.manage_DAVget())\n \n-        request = DAVTestRequest()\n+        def test_get_simple_adapter(self):\n+            class ReadFileAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = \'text/foo\'\n+                encoding = \'latin1\'\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def size(self):\n+                    return 10\n \n-        self.assertEqual(adapterInstance, item.manage_DAVget())\n+                def read(self, size=None):\n+                    return \'1234567890\'\n+            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-    def test_put_no_adapter(self):\n-        request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'\')})\n+            request = DAVTestRequest()\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        self.assertRaises(MethodNotAllowed, item.PUT)\n+            self.assertEqual(\'1234567890\', item.manage_DAVget())\n+            self.assertEqual(\n+                \'text/foo; charset="latin1"\',\n+                request.response.getHeader(\'Content-Type\')\n+            )\n+            self.assertEqual(\'10\', request.response.getHeader(\'Content-Length\'))\n \n-    def test_put_no_body(self):\n-        request = DAVTestRequest()\n+        def test_get_minimal_adapter(self):\n+            class ReadFileAdapter(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = None\n+                encoding = None\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def size(self):\n+                    return None\n \n-        self.assertRaises(MethodNotAllowed, item.PUT)\n+                def read(self, size=None):\n+                    return \'1234567890\'\n+            self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n-    def test_put_no_content_type_header(self):\n-        class WriteFile(object):\n-            def __init__(self, context):\n-                self.context = context\n-                self._written = \'\'\n-                self._closed = False\n-            mimeType = None\n-            encoding = None\n+            request = DAVTestRequest()\n \n-            def write(self, data):\n-                self._written += data\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-            def close(self):\n-                self._closed = True\n+            self.assertEqual(\'1234567890\', item.manage_DAVget())\n+            self.assertEqual(None, request.response.getHeader(\'Content-Type\'))\n+            self.assertEqual(None, request.response.getHeader(\'Content-Length\'))\n \n-        adapterInstance = WriteFile(None)\n+        def test_get_streaming(self):\n+            @implementer(IStreamIterator)\n+            class ReadFileAdapter(object):\n \n-        def factory(context):\n-            return adapterInstance\n+                def __init__(self, context):\n+                    self.context = context\n+                mimeType = None\n+                encoding = None\n \n-        self.mock_adapter(factory, IRawWriteFile, (Item,))\n+                def size(self):\n+                    return 10\n \n-        request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'data\')})\n+                def read(self, size=None):\n+                    return \'1234567890\'\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+            adapterInstance = ReadFileAdapter(None)\n \n-        item.PUT()\n-        self.assertEqual(None, adapterInstance.mimeType)\n-        self.assertEqual(None, adapterInstance.encoding)\n-        self.assertEqual(\'data\', adapterInstance._written)\n-        self.assertEqual(True, adapterInstance._closed)\n+            def factory(context):\n+                return adapterInstance\n+            self.mock_adapter(factory, IRawReadFile, (Item,))\n \n-    def test_put_with_content_type_header_no_charset(self):\n-        class WriteFile(object):\n-            def __init__(self, context):\n-                self.context = context\n-                self._written = \'\'\n-                self._closed = False\n-            mimeType = None\n-            encoding = None\n+            request = DAVTestRequest()\n \n-            def write(self, data):\n-                self._written += data\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-            def close(self):\n-                self._closed = True\n+            self.assertEqual(adapterInstance, item.manage_DAVget())\n \n-        adapterInstance = WriteFile(None)\n+        def test_put_no_adapter(self):\n+            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'\')})\n \n-        def factory(context):\n-            return adapterInstance\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        events = []\n+            self.assertRaises(MethodNotAllowed, item.PUT)\n \n-        def handler(event):\n-            events.append(event)\n+        def test_put_no_body(self):\n+            request = DAVTestRequest()\n \n-        self.mock_adapter(factory, IRawWriteFile, (Item,))\n-        self.mock_handler(handler, (IObjectModifiedEvent,))\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        request = DAVTestRequest(\n-            environ={\n-                \'BODYFILE\': StringIO(\'data\'),\n-                \'HTTP_CONTENT_TYPE\': \'text/foo\'\n-            }\n-        )\n+            self.assertRaises(MethodNotAllowed, item.PUT)\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+        def test_put_no_content_type_header(self):\n+            class WriteFile(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                    self._written = \'\'\n+                    self._closed = False\n+                mimeType = None\n+                encoding = None\n \n-        item.PUT()\n-        self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n-        self.assertEqual(None, adapterInstance.encoding)\n-        self.assertEqual(\'data\', adapterInstance._written)\n-        self.assertEqual(True, adapterInstance._closed)\n-        self.assertEqual(1, len(events))\n+                def write(self, data):\n+                    self._written += data\n \n-    def test_put_with_content_type_header_and_charset(self):\n-        class WriteFile(object):\n-            def __init__(self, context):\n-                self.context = context\n-                self._written = \'\'\n-                self._closed = False\n-            mimeType = None\n-            encoding = None\n+                def close(self):\n+                    self._closed = True\n \n-            def write(self, data):\n-                self._written += data\n+            adapterInstance = WriteFile(None)\n \n-            def close(self):\n-                self._closed = True\n+            def factory(context):\n+                return adapterInstance\n \n-        adapterInstance = WriteFile(None)\n+            self.mock_adapter(factory, IRawWriteFile, (Item,))\n \n-        def factory(context):\n-            return adapterInstance\n+            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'data\')})\n \n-        events = []\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        def handler(event):\n-            events.append(event)\n+            item.PUT()\n+            self.assertEqual(None, adapterInstance.mimeType)\n+            self.assertEqual(None, adapterInstance.encoding)\n+            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual(True, adapterInstance._closed)\n \n-        self.mock_adapter(factory, IRawWriteFile, (Item,))\n-        self.mock_handler(handler, (IObjectModifiedEvent,))\n+        def test_put_with_content_type_header_no_charset(self):\n+            class WriteFile(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                    self._written = \'\'\n+                    self._closed = False\n+                mimeType = None\n+                encoding = None\n \n-        request = DAVTestRequest(\n-            environ={\n-                \'BODYFILE\': StringIO(\'data\'),\n-                \'HTTP_CONTENT_TYPE\': \'text/foo; charset="latin1"\'\n-            }\n-        )\n+                def write(self, data):\n+                    self._written += data\n \n-        item = Item(\'item\')\n-        item.REQUEST = request\n+                def close(self):\n+                    self._closed = True\n \n-        item.PUT()\n-        self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n-        self.assertEqual(\'latin1\', adapterInstance.encoding)\n-        self.assertEqual(\'data\', adapterInstance._written)\n-        self.assertEqual(True, adapterInstance._closed)\n-        self.assertEqual(1, len(events))\n+            adapterInstance = WriteFile(None)\n \n-    def test_mkcol_no_adapter(self):\n-        container = Container(\'container\')\n-        self.assertRaises(MethodNotAllowed, container.MKCOL_handler, \'test\')\n+            def factory(context):\n+                return adapterInstance\n \n-    def test_mkcol_simple_adapter(self):\n-        created = []\n+            events = []\n \n-        class DirectoryFactory(object):\n-            def __init__(self, context):\n-                self.context = context\n+            def handler(event):\n+                events.append(event)\n \n-            def __call__(self, id):\n-                created.append(id)\n-        self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n+            self.mock_adapter(factory, IRawWriteFile, (Item,))\n+            self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-        container = Container(\'container\')\n-        container.MKCOL_handler(\'test\')\n-        self.assertEqual([\'test\'], created)\n+            request = DAVTestRequest(\n+                environ={\n+                    \'BODYFILE\': StringIO(\'data\'),\n+                    \'HTTP_CONTENT_TYPE\': \'text/foo\'\n+                }\n+            )\n \n-    def test_put_factory_no_adapter(self):\n-        container = Container(\'container\')\n-        self.assertEqual(\n-            None,\n-            container.PUT_factory(\'test\', \'text/foo\', \'body\')\n-        )\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-    def test_put_factory_simple_adapter(self):\n-        instance = object()\n+            item.PUT()\n+            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n+            self.assertEqual(None, adapterInstance.encoding)\n+            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual(True, adapterInstance._closed)\n+            self.assertEqual(1, len(events))\n \n-        class FileFactory(object):\n-            def __init__(self, context):\n-                self.context = context\n+        def test_put_with_content_type_header_and_charset(self):\n+            class WriteFile(object):\n+                def __init__(self, context):\n+                    self.context = context\n+                    self._written = \'\'\n+                    self._closed = False\n+                mimeType = None\n+                encoding = None\n \n-            def __call__(self, name, contentType, body):\n-                return instance\n-        self.mock_adapter(FileFactory, IFileFactory, (Container,))\n-        container = Container(\'container\')\n-        self.assertEqual(\n-            instance,\n-            container.PUT_factory(\'test\', \'text/foo\', \'body\')\n-        )\n+                def write(self, data):\n+                    self._written += data\n \n-    def test_list_without_items(self):\n+                def close(self):\n+                    self._closed = True\n \n-        class DummyContainer(Container):\n+            adapterInstance = WriteFile(None)\n \n-            def listFolderContents(self, filter=None):\n-                return []\n+            def factory(context):\n+                return adapterInstance\n \n-        container = DummyContainer(\'container\')\n+            events = []\n \n-        objects = container.listDAVObjects()\n-        self.assertEqual(1, len(objects))\n-        self.assertTrue(isinstance(objects[0], FolderDataResource))\n-        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-        self.assertEqual(container, objects[0].__parent__)\n+            def handler(event):\n+                events.append(event)\n \n-    def test_list_with_items(self):\n+            self.mock_adapter(factory, IRawWriteFile, (Item,))\n+            self.mock_handler(handler, (IObjectModifiedEvent,))\n \n-        class DummyContainer(Container):\n+            request = DAVTestRequest(\n+                environ={\n+                    \'BODYFILE\': StringIO(\'data\'),\n+                    \'HTTP_CONTENT_TYPE\': \'text/foo; charset="latin1"\'\n+                }\n+            )\n \n-            def listFolderContents(self, filter=None):\n-                return [Item(\'foo\')]\n+            item = Item(\'item\')\n+            item.REQUEST = request\n \n-        container = DummyContainer(\'container\')\n+            item.PUT()\n+            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n+            self.assertEqual(\'latin1\', adapterInstance.encoding)\n+            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual(True, adapterInstance._closed)\n+            self.assertEqual(1, len(events))\n \n-        objects = container.listDAVObjects()\n-        self.assertEqual(2, len(objects))\n-        self.assertTrue(isinstance(objects[0], FolderDataResource))\n-        self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n-        self.assertEqual(container, objects[0].__parent__)\n-        self.assertEqual(\'foo\', objects[1].getId())\n+        def test_mkcol_no_adapter(self):\n+            container = Container(\'container\')\n+            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, \'test\')\n \n+        def test_mkcol_simple_adapter(self):\n+            created = []\n \n-class TestFolderDataResource(MockTestCase):\n+            class DirectoryFactory(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-    def test_getId(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container)\n+                def __call__(self, id):\n+                    created.append(id)\n+            self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n \n-        self.assertEqual(\'fdata\', r.getId())\n-        self.assertEqual(container, r.__parent__)\n+            container = Container(\'container\')\n+            container.MKCOL_handler(\'test\')\n+            self.assertEqual([\'test\'], created)\n \n-    def test_HEAD(self):\n+        def test_put_factory_no_adapter(self):\n+            container = Container(\'container\')\n+            self.assertEqual(\n+                None,\n+                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n+            )\n \n-        class TestContainer(Container):\n+        def test_put_factory_simple_adapter(self):\n+            instance = object()\n \n-            def get_size(self):\n-                return 10\n+            class FileFactory(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-            def content_type(self):\n-                return \'text/foo\'\n+                def __call__(self, name, contentType, body):\n+                    return instance\n+            self.mock_adapter(FileFactory, IFileFactory, (Container,))\n+            container = Container(\'container\')\n+            self.assertEqual(\n+                instance,\n+                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n+            )\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_list_without_items(self):\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            class DummyContainer(Container):\n \n-        self.assertEqual(response, r.HEAD(request, request.response))\n-        self.assertEqual(200, response.getStatus())\n-        self.assertEqual(\n-            \'close\',\n-            response.getHeader(\'Connection\', literal=True)\n-        )\n-        self.assertTrue(\n-            response.getHeader(\'Content-Type\').startswith(\'text/foo\'))\n-        self.assertEqual(\'10\', response.getHeader(\'Content-Length\'))\n+                def listFolderContents(self, filter=None):\n+                    return []\n \n-    def test_OPTIONS(self):\n-        class TestContainer(Container):\n+            container = DummyContainer(\'container\')\n \n-            def get_size(self):\n-                return 10\n+            objects = container.listDAVObjects()\n+            self.assertEqual(1, len(objects))\n+            self.assertTrue(isinstance(objects[0], FolderDataResource))\n+            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+            self.assertEqual(container, objects[0].__parent__)\n \n-            def content_type(self):\n-                return \'text/foo\'\n+        def test_list_with_items(self):\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            class DummyContainer(Container):\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+                def listFolderContents(self, filter=None):\n+                    return [Item(\'foo\')]\n \n-        self.assertEqual(response, r.OPTIONS(request, request.response))\n-        self.assertEqual(\n-            \'close\',\n-            response.getHeader(\'Connection\', literal=True)\n-        )\n-        self.assertEqual(\n-            \'GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, \'\n-            \'PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK\',\n-            response.getHeader(\'Allow\')\n-        )\n+            container = DummyContainer(\'container\')\n \n-    def test_TRACE(self):\n-        class TestContainer(Container):\n+            objects = container.listDAVObjects()\n+            self.assertEqual(2, len(objects))\n+            self.assertTrue(isinstance(objects[0], FolderDataResource))\n+            self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n+            self.assertEqual(container, objects[0].__parent__)\n+            self.assertEqual(\'foo\', objects[1].getId())\n \n-            def get_size(self):\n-                return 10\n \n-            def content_type(self):\n-                return \'text/foo\'\n+    class TestFolderDataResource(MockTestCase):\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_getId(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n+            self.assertEqual(\'fdata\', r.getId())\n+            self.assertEqual(container, r.__parent__)\n \n-        self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n+        def test_HEAD(self):\n \n-    def test_PROPFIND(self):\n-        class TestContainer(Container):\n+            class TestContainer(Container):\n \n-            def get_size(self):\n-                return 10\n+                def get_size(self):\n+                    return 10\n \n-            def content_type(self):\n-                return \'text/foo\'\n+                def content_type(self):\n+                    return \'text/foo\'\n \n-        container = TestContainer(\'container\')\n-        container.manage_changeProperties(title="Container")\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        self.assertEqual(response, r.PROPFIND(request, response))\n+            self.assertEqual(response, r.HEAD(request, request.response))\n+            self.assertEqual(200, response.getStatus())\n+            self.assertEqual(\n+                \'close\',\n+                response.getHeader(\'Connection\', literal=True)\n+            )\n+            self.assertTrue(\n+                response.getHeader(\'Content-Type\').startswith(\'text/foo\'))\n+            self.assertEqual(\'10\', response.getHeader(\'Content-Length\'))\n \n-        self.assertEqual(\n-            \'close\',\n-            response.getHeader(\'connection\', literal=True)\n-        )\n-        self.assertEqual(\n-            \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n-        )\n-        self.assertEqual(207, response.getStatus())\n+        def test_OPTIONS(self):\n+            class TestContainer(Container):\n \n-        body = """\\\n+                def get_size(self):\n+                    return 10\n+\n+                def content_type(self):\n+                    return \'text/foo\'\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n+\n+            self.assertEqual(response, r.OPTIONS(request, request.response))\n+            self.assertEqual(\n+                \'close\',\n+                response.getHeader(\'Connection\', literal=True)\n+            )\n+            self.assertEqual(\n+                \'GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, \'\n+                \'PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK\',\n+                response.getHeader(\'Allow\')\n+            )\n+\n+        def test_TRACE(self):\n+            class TestContainer(Container):\n+\n+                def get_size(self):\n+                    return 10\n+\n+                def content_type(self):\n+                    return \'text/foo\'\n+\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+\n+            self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n+\n+        def test_PROPFIND(self):\n+            class TestContainer(Container):\n+\n+                def get_size(self):\n+                    return 10\n+\n+                def content_type(self):\n+                    return \'text/foo\'\n+\n+            container = TestContainer(\'container\')\n+            container.manage_changeProperties(title="Container")\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n+\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n+\n+            self.assertEqual(response, r.PROPFIND(request, response))\n+\n+            self.assertEqual(\n+                \'close\',\n+                response.getHeader(\'connection\', literal=True)\n+            )\n+            self.assertEqual(\n+                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+            )\n+            self.assertEqual(207, response.getStatus())\n+\n+            body = """\\\n <?xml version="1.0" encoding="utf-8"?>\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n@@ -570,29 +574,29 @@ def content_type(self):\n </d:multistatus>\n """\n \n-        result = response.getBody()\n-        result = re.sub(\n-            r\'<n:getlastmodified>.+</n:getlastmodified>\',\n-            \'<n:getlastmodified>...</n:getlastmodified>\',\n-            result\n-        )\n+            result = response.getBody()\n+            result = re.sub(\n+                r\'<n:getlastmodified>.+</n:getlastmodified>\',\n+                \'<n:getlastmodified>...</n:getlastmodified>\',\n+                result\n+            )\n \n-        self.assertEqual(result.strip(), body.strip())\n+            self.assertEqual(result.strip(), body.strip())\n \n-    def test_PROPPATCH(self):\n-        class TestContainer(Container):\n+        def test_PROPPATCH(self):\n+            class TestContainer(Container):\n \n-            def get_size(self):\n-                return 10\n+                def get_size(self):\n+                    return 10\n \n-            def content_type(self):\n-                return \'text/foo\'\n+                def content_type(self):\n+                    return \'text/foo\'\n \n-        container = TestContainer(\'container\')\n-        container.manage_changeProperties(title="Container")\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer(\'container\')\n+            container.manage_changeProperties(title="Container")\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        requestBody = """\\\n+            requestBody = """\\\n <?xml version="1.0" encoding="utf-8" ?>\n <D:propertyupdate xmlns:D="DAV:"\n                   xmlns:n="http://www.zope.org/propsets/default">\n@@ -604,27 +608,27 @@ def content_type(self):\n </D:propertyupdate>\n """\n \n-        request = DAVTestRequest(\n-            environ={\n-                \'URL\': \'http://example.org/site/container\',\n-                \'BODY\': requestBody\n-            }\n-        )\n-        response = request.response\n+            request = DAVTestRequest(\n+                environ={\n+                    \'URL\': \'http://example.org/site/container\',\n+                    \'BODY\': requestBody\n+                }\n+            )\n+            response = request.response\n \n-        self.assertEqual(response, r.PROPPATCH(request, response))\n+            self.assertEqual(response, r.PROPPATCH(request, response))\n \n-        self.assertEqual(\'New title\', container.getProperty(\'title\'))\n+            self.assertEqual(\'New title\', container.getProperty(\'title\'))\n \n-        self.assertEqual(\n-            \'close\', response.getHeader(\'connection\', literal=True)\n-        )\n-        self.assertEqual(\n-            \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n-        )\n-        self.assertEqual(207, response.getStatus())\n+            self.assertEqual(\n+                \'close\', response.getHeader(\'connection\', literal=True)\n+            )\n+            self.assertEqual(\n+                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+            )\n+            self.assertEqual(207, response.getStatus())\n \n-        body = """\\\n+            body = """\\\n <?xml version="1.0" encoding="utf-8"?>\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n@@ -642,474 +646,474 @@ def content_type(self):\n </d:multistatus>\n """\n \n-        result = response.getBody()\n-        self.assertEqual(body.strip(), result.strip())\n-\n-    def test_LOCK(self):\n-        # Too much WebDAV magic - just test that it delegates correctly\n-        class TestContainer(Container):\n-\n-            def LOCK(self, request, response):\n-                self._locked = (request, response,)\n-                return response\n-\n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            result = response.getBody()\n+            self.assertEqual(body.strip(), result.strip())\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+        def test_LOCK(self):\n+            # Too much WebDAV magic - just test that it delegates correctly\n+            class TestContainer(Container):\n \n-        self.assertEqual(response, r.LOCK(request, response))\n-        self.assertEqual((request, response), container._locked)\n+                def LOCK(self, request, response):\n+                    self._locked = (request, response,)\n+                    return response\n \n-    def test_UNLOCK(self):\n-        # Too much WebDAV magic - just test that it delegates correctly\n-        class TestContainer(Container):\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-            def UNLOCK(self, request, response):\n-                self._unlocked = (request, response,)\n-                return response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            self.assertEqual(response, r.LOCK(request, response))\n+            self.assertEqual((request, response), container._locked)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+        def test_UNLOCK(self):\n+            # Too much WebDAV magic - just test that it delegates correctly\n+            class TestContainer(Container):\n \n-        self.assertEqual(response, r.UNLOCK(request, response))\n-        self.assertEqual((request, response), container._unlocked)\n+                def UNLOCK(self, request, response):\n+                    self._unlocked = (request, response,)\n+                    return response\n \n-    def test_PUT(self):\n-        class TestContainer(Container):\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-            def PUT(self, request, response):\n-                self._put = (request, response,)\n-                return response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            self.assertEqual(response, r.UNLOCK(request, response))\n+            self.assertEqual((request, response), container._unlocked)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+        def test_PUT(self):\n+            class TestContainer(Container):\n \n-        self.assertEqual(response, r.PUT(request, response))\n-        self.assertEqual((request, response), container._put)\n+                def PUT(self, request, response):\n+                    self._put = (request, response,)\n+                    return response\n \n-    def test_MKCOL(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n+            self.assertEqual(response, r.PUT(request, response))\n+            self.assertEqual((request, response), container._put)\n \n-    def test_DELETE(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_MKCOL(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n+            self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n \n-    def test_COPY(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_DELETE(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n+            self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n \n-    def test_MOVE(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+        def test_COPY(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://example.org/site/container\'}\n-        )\n-        response = request.response\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n+            self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n \n-    def test_manage_DAVget(self):\n-        class TestContainer(Container):\n+        def test_MOVE(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-            def manage_DAVget(self):\n-                return \'data\'\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://example.org/site/container\'}\n+            )\n+            response = request.response\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            self.assertRaises(MethodNotAllowed, r.MOVE, request, response)\n \n-        self.assertEqual(\'data\', r.manage_DAVget())\n+        def test_manage_DAVget(self):\n+            class TestContainer(Container):\n \n-    def test_manage_FTPget(self):\n-        class TestContainer(Container):\n+                def manage_DAVget(self):\n+                    return \'data\'\n \n-            def manage_FTPget(self):\n-                return \'data\'\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-        container = TestContainer(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+            self.assertEqual(\'data\', r.manage_DAVget())\n \n-        self.assertEqual(\'data\', r.manage_FTPget())\n+        def test_manage_FTPget(self):\n+            class TestContainer(Container):\n \n-    def test_listDAVObjects(self):\n-        container = Container(\'container\')\n-        r = FolderDataResource(\'fdata\', container).__of__(container)\n+                def manage_FTPget(self):\n+                    return \'data\'\n \n-        self.assertEqual([], r.listDAVObjects())\n+            container = TestContainer(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n+            self.assertEqual(\'data\', r.manage_FTPget())\n \n-class TestFileRepresentation(MockTestCase):\n+        def test_listDAVObjects(self):\n+            container = Container(\'container\')\n+            r = FolderDataResource(\'fdata\', container).__of__(container)\n \n-    def create_dummy(self, **kw):\n-        return ItemDummy(**kw)\n+            self.assertEqual([], r.listDAVObjects())\n \n-    def test_directory_factory(self):\n-        class TestContainer(Container):\n \n-            def manage_addFolder(self, name):\n-                self._added = name\n+    class TestFileRepresentation(MockTestCase):\n \n-        container = TestContainer(\'container\')\n-        factory = DefaultDirectoryFactory(container)\n+        def create_dummy(self, **kw):\n+            return ItemDummy(**kw)\n \n-        factory(\'foo\')\n-        self.assertEqual(\'foo\', container._added)\n+        def test_directory_factory(self):\n+            class TestContainer(Container):\n \n-    def test_file_factory_finder_cruft(self):\n-        container = Container(\'container\')\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'.DS_Store\',\n-            \'application/octet-stream\',\n-            \'xxx\'\n-        )\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'._test\',\n-            \'application/octet-stream\',\n-            \'xxx\'\n-        )\n-\n-    def test_file_factory_no_ctr(self):\n-        container = Container(\'container\')\n-\n-        from Products.CMFCore.utils import getToolByName\n-        self.patch_global(getToolByName, return_value=None)\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n-\n-    def test_file_factory_no_fti(self):\n-        container = Container(\'container\')\n-\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=None)\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n-\n-    def test_file_factory_not_allowed(self):\n-        container = Container(\'container\')\n-        container.portal_type = \'containertype\'\n-\n-        child_fti_mock = Mock()\n-        child_fti_mock.product = None\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=False)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'test.html\',\n-            \'text/html\',\n-            \'<html />\'\n-        )\n-\n-    def test_file_factory_construction_not_allowed(self):\n-        container = Container(\'container\')\n-        container.portal_type = \'containertype\'\n-\n-        child_fti_mock = Mock()\n-        child_fti_mock.product = None\n-        child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=True)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        factory = DefaultFileFactory(container)\n-\n-        self.assertRaises(\n-            Unauthorized,\n-            factory,\n-            \'test.html\',\n-            \'text/html\',\n-            \'<html />\'\n-        )\n-\n-    def test_file_factory_factory_method(self):\n-        result_dummy = self.create_dummy()\n-        container_mock = Mock()\n-        container_mock.invokeFactory = Mock(return_value=\'test-1.html\')\n-        container_mock._getOb = Mock(return_value=result_dummy)\n-        container_mock._delObject = Mock()\n-        child_fti_mock = Mock()\n-        child_fti_mock.product = \'FooProduct\'\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        factory = DefaultFileFactory(container_mock)\n-\n-        self.assertEqual(\n-            result_dummy,\n-            factory(\'test.html\', \'text/html\', \'<html />\')\n-        )\n-\n-    def test_file_factory_factory_utility(self):\n-        result_dummy = self.create_dummy(id=\'test.html\')\n-        container_mock = Mock()\n-        child_fti_mock = Mock()\n-        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        child_fti_mock.product = None\n-        child_fti_mock.factory = \'childtype-factory\'\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=True)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        def factory(*args, **kwargs):\n-            return result_dummy\n-        self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n-\n-        factory = DefaultFileFactory(container_mock)\n-\n-        self.assertEqual(\n-            result_dummy,\n-            factory(\'test.html\', \'text/html\', \'<html />\')\n-        )\n-        self.assertEqual(result_dummy.Title(), \'test.html\')\n-\n-    def test_file_factory_content_type_factory_utility(self):\n-        container_mock = Mock()\n-        child_fti_mock = Mock()\n-        child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-        child_fti_mock.getId = Mock(return_value=\'childtype\')\n-        child_fti_mock.product = None\n-        child_fti_mock.factory = \'childtype-factory\'\n-        container_fti_mock = Mock()\n-        container_fti_mock.allowType = Mock(return_value=True)\n-        ctr_mock = Mock()\n-        ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n-        pt_mock = Mock()\n-        pt_mock.getTypeInfo = Mock(\n-            side_effect=[child_fti_mock, container_fti_mock])\n-        self.mock_tool(ctr_mock, \'content_type_registry\')\n-        self.mock_tool(pt_mock, \'portal_types\')\n-\n-        def factory(*args, **kwargs):\n-            return Item(*args, **kwargs)\n-        self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n-\n-        factory = DefaultFileFactory(container_mock)\n-\n-        item = factory(\'test.html\', \'text/html\', \'<html />\')\n-\n-        self.assertEqual(\'test.html\', item.id)\n-\n-    def test_readfile_mimetype_no_message_no_fields(self):\n-\n-        class ITest(Interface):\n-            pass\n-\n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = []\n-\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-\n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+                def manage_addFolder(self, name):\n+                    self._added = name\n \n-        readfile = DefaultReadFile(item)\n+            container = TestContainer(\'container\')\n+            factory = DefaultDirectoryFactory(container)\n \n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+            factory(\'foo\')\n+            self.assertEqual(\'foo\', container._added)\n \n-    def test_readfile_mimetype_no_message_no_primary_field(self):\n+        def test_file_factory_finder_cruft(self):\n+            container = Container(\'container\')\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'.DS_Store\',\n+                \'application/octet-stream\',\n+                \'xxx\'\n+            )\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'._test\',\n+                \'application/octet-stream\',\n+                \'xxx\'\n+            )\n+\n+        def test_file_factory_no_ctr(self):\n+            container = Container(\'container\')\n+\n+            from Products.CMFCore.utils import getToolByName\n+            self.patch_global(getToolByName, return_value=None)\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+\n+        def test_file_factory_no_fti(self):\n+            container = Container(\'container\')\n+\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=None)\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+\n+        def test_file_factory_not_allowed(self):\n+            container = Container(\'container\')\n+            container.portal_type = \'containertype\'\n+\n+            child_fti_mock = Mock()\n+            child_fti_mock.product = None\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=False)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'test.html\',\n+                \'text/html\',\n+                \'<html />\'\n+            )\n+\n+        def test_file_factory_construction_not_allowed(self):\n+            container = Container(\'container\')\n+            container.portal_type = \'containertype\'\n+\n+            child_fti_mock = Mock()\n+            child_fti_mock.product = None\n+            child_fti_mock.isConstructionAllowed = Mock(return_value=False)\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=True)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            factory = DefaultFileFactory(container)\n+\n+            self.assertRaises(\n+                Unauthorized,\n+                factory,\n+                \'test.html\',\n+                \'text/html\',\n+                \'<html />\'\n+            )\n+\n+        def test_file_factory_factory_method(self):\n+            result_dummy = self.create_dummy()\n+            container_mock = Mock()\n+            container_mock.invokeFactory = Mock(return_value=\'test-1.html\')\n+            container_mock._getOb = Mock(return_value=result_dummy)\n+            container_mock._delObject = Mock()\n+            child_fti_mock = Mock()\n+            child_fti_mock.product = \'FooProduct\'\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            factory = DefaultFileFactory(container_mock)\n+\n+            self.assertEqual(\n+                result_dummy,\n+                factory(\'test.html\', \'text/html\', \'<html />\')\n+            )\n+\n+        def test_file_factory_factory_utility(self):\n+            result_dummy = self.create_dummy(id=\'test.html\')\n+            container_mock = Mock()\n+            child_fti_mock = Mock()\n+            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+            child_fti_mock.product = None\n+            child_fti_mock.factory = \'childtype-factory\'\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=True)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            def factory(*args, **kwargs):\n+                return result_dummy\n+            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            factory = DefaultFileFactory(container_mock)\n+\n+            self.assertEqual(\n+                result_dummy,\n+                factory(\'test.html\', \'text/html\', \'<html />\')\n+            )\n+            self.assertEqual(result_dummy.Title(), \'test.html\')\n+\n+        def test_file_factory_content_type_factory_utility(self):\n+            container_mock = Mock()\n+            child_fti_mock = Mock()\n+            child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n+            child_fti_mock.getId = Mock(return_value=\'childtype\')\n+            child_fti_mock.product = None\n+            child_fti_mock.factory = \'childtype-factory\'\n+            container_fti_mock = Mock()\n+            container_fti_mock.allowType = Mock(return_value=True)\n+            ctr_mock = Mock()\n+            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            pt_mock = Mock()\n+            pt_mock.getTypeInfo = Mock(\n+                side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(pt_mock, \'portal_types\')\n+\n+            def factory(*args, **kwargs):\n+                return Item(*args, **kwargs)\n+            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            factory = DefaultFileFactory(container_mock)\n+\n+            item = factory(\'test.html\', \'text/html\', \'<html />\')\n+\n+            self.assertEqual(\'test.html\', item.id)\n+\n+        def test_readfile_mimetype_no_message_no_fields(self):\n+\n+            class ITest(Interface):\n+                pass\n+\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = []\n+\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n+\n+            readfile = DefaultReadFile(item)\n+\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n+\n+        def test_readfile_mimetype_no_message_no_primary_field(self):\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n+            class ITest(Interface):\n+                title = schema.TextLine()\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = []\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = []\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        readfile = DefaultReadFile(item)\n+            readfile = DefaultReadFile(item)\n \n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n \n-    def test_readfile_mimetype_no_message_single_primary_field(self):\n+        def test_readfile_mimetype_no_message_single_primary_field(self):\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = []\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = []\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        readfile = DefaultReadFile(item)\n+            readfile = DefaultReadFile(item)\n \n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n \n-    def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n+        def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-            stuff = schema.Bytes()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n-        alsoProvides(ITest[\'stuff\'], IPrimaryField)\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+                stuff = schema.Bytes()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n+            alsoProvides(ITest[\'stuff\'], IPrimaryField)\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        readfile = DefaultReadFile(item)\n+            readfile = DefaultReadFile(item)\n \n-        self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n \n-    def test_readfile_mimetype_additional_schemata(self):\n-        # This is mostly a test that utils.iterSchemata takes\n-        # IBehaviorAssignable into account.\n+        def test_readfile_mimetype_additional_schemata(self):\n+            # This is mostly a test that utils.iterSchemata takes\n+            # IBehaviorAssignable into account.\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n+            class ITest(Interface):\n+                title = schema.TextLine()\n \n-        class ITestAdditional(Interface):\n-            # Additional behavior on an item\n-            body = schema.Text()\n-            stuff = schema.Bytes()\n-        alsoProvides(ITestAdditional[\'body\'], IPrimaryField)\n-        alsoProvides(ITestAdditional[\'stuff\'], IPrimaryField)\n-        alsoProvides(ITestAdditional, IFormFieldProvider)\n+            class ITestAdditional(Interface):\n+                # Additional behavior on an item\n+                body = schema.Text()\n+                stuff = schema.Bytes()\n+            alsoProvides(ITestAdditional[\'body\'], IPrimaryField)\n+            alsoProvides(ITestAdditional[\'stuff\'], IPrimaryField)\n+            alsoProvides(ITestAdditional, IFormFieldProvider)\n \n-        class MockBehavior(object):\n-            def __init__(self, iface):\n-                self.interface = iface\n+            class MockBehavior(object):\n+                def __init__(self, iface):\n+                    self.interface = iface\n \n-        class MockBehaviorAssignable(object):\n-            def __init__(self, context):\n-                self.context = context\n+            class MockBehaviorAssignable(object):\n+                def __init__(self, context):\n+                    self.context = context\n \n-            def enumerateBehaviors(self):\n-                yield MockBehavior(ITestAdditional)\n+                def enumerateBehaviors(self):\n+                    yield MockBehavior(ITestAdditional)\n \n-        SCHEMA_CACHE.clear()\n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n+            SCHEMA_CACHE.clear()\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-        self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable,\n-                          (Item, ))\n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable,\n+                              (Item, ))\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        readfile = DefaultReadFile(item)\n+            readfile = DefaultReadFile(item)\n \n-        self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n \n-    def test_readfile_operations(self):\n+        def test_readfile_operations(self):\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = [ITestBehavior.__identifier__]\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n \n-        readfile = DefaultReadFile(item)\n+            readfile = DefaultReadFile(item)\n \n-        message = Message()\n-        message[\'title\'] = \'Test title\'\n-        message[\'foo\'] = \'10\'\n-        message[\'bar\'] = \'xyz\'\n-        message.set_payload(\'<p>body</p>\')\n+            message = Message()\n+            message[\'title\'] = \'Test title\'\n+            message[\'foo\'] = \'10\'\n+            message[\'bar\'] = \'xyz\'\n+            message.set_payload(\'<p>body</p>\')\n \n-        from plone.rfc822 import constructMessageFromSchemata\n-        self.patch_global(constructMessageFromSchemata, return_value=message)\n+            from plone.rfc822 import constructMessageFromSchemata\n+            self.patch_global(constructMessageFromSchemata, return_value=message)\n \n-        body = """\\\n+            body = """\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1117,64 +1121,64 @@ class ITest(Interface):\n \n <p>body</p>"""\n \n-        # iter\n-        # next\n+            # iter\n+            # next\n \n-        self.assertEqual(body, readfile.read())\n-        self.assertEqual(69, readfile.size())\n-        self.assertEqual(\'utf-8\', readfile.encoding)\n-        self.assertEqual(None, readfile.name)\n-        self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual(body, readfile.read())\n+            self.assertEqual(69, readfile.size())\n+            self.assertEqual(\'utf-8\', readfile.encoding)\n+            self.assertEqual(None, readfile.name)\n+            self.assertEqual(\'text/plain\', readfile.mimeType)\n \n-        readfile.seek(2)\n-        self.assertEqual(2, readfile.tell())\n-        self.assertEqual(\'tl\', readfile.read(2))\n-        self.assertEqual(4, readfile.tell())\n+            readfile.seek(2)\n+            self.assertEqual(2, readfile.tell())\n+            self.assertEqual(\'tl\', readfile.read(2))\n+            self.assertEqual(4, readfile.tell())\n \n-        readfile.seek(0, 2)\n-        self.assertEqual(69, readfile.tell())\n+            readfile.seek(0, 2)\n+            self.assertEqual(69, readfile.tell())\n \n-        readfile.seek(0)\n-        self.assertEqual(\'foo: 10\\n\', readfile.readlines()[1])\n+            readfile.seek(0)\n+            self.assertEqual(\'foo: 10\\n\', readfile.readlines()[1])\n \n-        readfile.seek(0)\n-        self.assertEqual(\'foo: 10\\n\', readfile.readlines(100)[1])\n+            readfile.seek(0)\n+            self.assertEqual(\'foo: 10\\n\', readfile.readlines(100)[1])\n \n-        readfile.seek(0)\n-        self.assertEqual(\'title: Test title\\n\', readfile.readline())\n+            readfile.seek(0)\n+            self.assertEqual(\'title: Test title\\n\', readfile.readline())\n \n-        readfile.seek(0)\n-        self.assertEqual(\'title: Test title\\n\', readfile.readline(100))\n+            readfile.seek(0)\n+            self.assertEqual(\'title: Test title\\n\', readfile.readline(100))\n \n-        readfile.seek(0)\n-        self.assertEqual(\'foo: 10\\n\', list(iter(readfile))[1])\n+            readfile.seek(0)\n+            self.assertEqual(\'foo: 10\\n\', list(iter(readfile))[1])\n \n-        self.assertEqual(False, readfile.closed)\n-        readfile.close()\n+            self.assertEqual(False, readfile.closed)\n+            readfile.close()\n \n-    def test_writefile_file_operations(self):\n+        def test_writefile_file_operations(self):\n \n-        class ITest(Interface):\n-            title = schema.TextLine()\n-            body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+            class ITest(Interface):\n+                title = schema.TextLine()\n+                body = schema.Text()\n+            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-        fti_mock = DexterityFTI(u\'testtype\')\n-        fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = [ITestBehavior.__identifier__]\n+            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock.lookupSchema = Mock(return_value=ITest)\n+            fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n-        self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n+            self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n-        item.title = u"Test title"\n-        item.foo = 10\n-        item.bar = \'xyz\'\n-        item.body = u"<p>body</p>"\n+            item = Item(\'item\')\n+            item.portal_type = \'testtype\'\n+            item.title = u"Test title"\n+            item.foo = 10\n+            item.bar = \'xyz\'\n+            item.body = u"<p>body</p>"\n \n-        writefile = DefaultWriteFile(item)\n+            writefile = DefaultWriteFile(item)\n \n-        body = """\\\n+            body = """\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1182,163 +1186,169 @@ class ITest(Interface):\n \n <p>body</p>"""\n \n-        from plone.rfc822 import initializeObjectFromSchemata\n-        self.patch_global(initializeObjectFromSchemata)\n+            from plone.rfc822 import initializeObjectFromSchemata\n+            self.patch_global(initializeObjectFromSchemata)\n \n-        writefile.mimeType = \'text/plain\'\n-        self.assertEqual(\'text/plain\', writefile.mimeType)\n+            writefile.mimeType = \'text/plain\'\n+            self.assertEqual(\'text/plain\', writefile.mimeType)\n \n-        writefile.encoding = \'latin1\'\n-        self.assertEqual(\'latin1\', writefile.encoding)\n+            writefile.encoding = \'latin1\'\n+            self.assertEqual(\'latin1\', writefile.encoding)\n \n-        writefile.filename = \'test.html\'\n-        self.assertEqual(\'test.html\', writefile.filename)\n+            writefile.filename = \'test.html\'\n+            self.assertEqual(\'test.html\', writefile.filename)\n \n-        self.assertEqual(False, writefile.closed)\n-        self.assertEqual(0, writefile.tell())\n+            self.assertEqual(False, writefile.closed)\n+            self.assertEqual(0, writefile.tell())\n \n-        writefile.writelines([\'one\\n\', \'two\'])\n-        self.assertEqual(7, writefile.tell())\n+            writefile.writelines([\'one\\n\', \'two\'])\n+            self.assertEqual(7, writefile.tell())\n \n-        self.assertRaises(NotImplementedError, writefile.truncate)\n+            self.assertRaises(NotImplementedError, writefile.truncate)\n \n-        writefile.truncate(0)\n-        self.assertEqual(0, writefile.tell())\n+            writefile.truncate(0)\n+            self.assertEqual(0, writefile.tell())\n \n-        self.assertRaises(NotImplementedError, writefile.seek, 10)\n+            self.assertRaises(NotImplementedError, writefile.seek, 10)\n \n-        writefile.write(body[:10])\n-        writefile.write(body[10:])\n-        writefile.close()\n+            writefile.write(body[:10])\n+            writefile.write(body[10:])\n+            writefile.close()\n \n-        self.assertEqual(True, writefile.closed)\n-        self.assertEqual(69, writefile.tell())\n+            self.assertEqual(True, writefile.closed)\n+            self.assertEqual(69, writefile.tell())\n \n \n-class TestDAVTraversal(MockTestCase):\n+    class TestDAVTraversal(MockTestCase):\n \n-    def test_no_acquire_dav(self):\n-        container = Container(\'container\')\n+        def test_no_acquire_dav(self):\n+            container = Container(\'container\')\n \n-        outer = Folder(\'outer\')\n-        outer._setOb(\'item\', SimpleItem(\'item\'))\n-        outer._setOb(\'container\', container)\n+            outer = Folder(\'outer\')\n+            outer._setOb(\'item\', SimpleItem(\'item\'))\n+            outer._setOb(\'container\', container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PUT\'}\n-        )\n-        request.maybe_webdav_client = True\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PUT\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        traversal = DexterityPublishTraverse(\n-            container.__of__(outer),\n-            request\n-        )\n+            traversal = DexterityPublishTraverse(\n+                container.__of__(outer),\n+                request\n+            )\n \n-        r = traversal.publishTraverse(request, \'item\')\n+            r = traversal.publishTraverse(request, \'item\')\n \n-        self.assertTrue(isinstance(r, NullResource))\n-        self.assertEqual(container, r.aq_parent)\n+            self.assertTrue(isinstance(r, NullResource))\n+            self.assertEqual(container, r.aq_parent)\n \n-    def test_acquire_without_dav(self):\n-        container = Container(\'container\')\n+        def test_acquire_without_dav(self):\n+            container = Container(\'container\')\n \n-        outer = Folder(\'outer\')\n-        outer._setObject(\'item\', SimpleItem(\'item\'))\n-        outer._setOb(\'container\', container)\n+            outer = Folder(\'outer\')\n+            outer._setObject(\'item\', SimpleItem(\'item\'))\n+            outer._setOb(\'container\', container)\n \n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n-        )\n-        request.maybe_webdav_client = False\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+            )\n+            request.maybe_webdav_client = False\n \n-        traversal = DexterityPublishTraverse(container.__of__(outer), request)\n+            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-        r = traversal.publishTraverse(request, \'item\')\n+            r = traversal.publishTraverse(request, \'item\')\n \n-        self.assertEqual(r.aq_base, outer[\'item\'].aq_base)\n-        self.assertEqual(container, r.aq_parent)\n+            self.assertEqual(r.aq_base, outer[\'item\'].aq_base)\n+            self.assertEqual(container, r.aq_parent)\n \n-    def test_folder_data_traversal_dav(self):\n-        container = Container(\'test\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\'}\n-        )\n-        request.maybe_webdav_client = True\n+        def test_folder_data_traversal_dav(self):\n+            container = Container(\'test\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n+            r = traversal.publishTraverse(request, DAV_FOLDER_DATA_ID)\n \n-        self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n-        self.assertEqual(container, r.__parent__)\n-        self.assertEqual(container, r.aq_parent)\n+            self.assertEqual(DAV_FOLDER_DATA_ID, r.__name__)\n+            self.assertEqual(container, r.__parent__)\n+            self.assertEqual(container, r.aq_parent)\n \n-    def test_folder_data_traversal_without_dav(self):\n-        container = Container(\'test\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\'}\n-        )\n-        request.maybe_webdav_client = False\n+        def test_folder_data_traversal_without_dav(self):\n+            container = Container(\'test\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\'}\n+            )\n+            request.maybe_webdav_client = False\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        self.assertRaises(\n-            Forbidden,\n-            traversal.publishTraverse,\n-            request,\n-            DAV_FOLDER_DATA_ID\n-        )\n+            self.assertRaises(\n+                Forbidden,\n+                traversal.publishTraverse,\n+                request,\n+                DAV_FOLDER_DATA_ID\n+            )\n \n-    def test_browser_default_dav(self):\n-        class TestContainer(Container):\n+        def test_browser_default_dav(self):\n+            class TestContainer(Container):\n \n-            def __browser_default__(self, request):\n-                return self, (\'foo\',)\n+                def __browser_default__(self, request):\n+                    return self, (\'foo\',)\n \n-        container = TestContainer(\'container\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n-        )\n-        request.maybe_webdav_client = True\n+            container = TestContainer(\'container\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        self.assertEqual((container, (),), traversal.browserDefault(request))\n+            self.assertEqual((container, (),), traversal.browserDefault(request))\n \n-    def test_browser_default_dav_get(self):\n-        class TestContainer(Container):\n+        def test_browser_default_dav_get(self):\n+            class TestContainer(Container):\n \n-            def __browser_default__(self, request):\n-                return self, (\'foo\',)\n+                def __browser_default__(self, request):\n+                    return self, (\'foo\',)\n \n-        container = TestContainer(\'container\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n-        )\n-        request.maybe_webdav_client = True\n+            container = TestContainer(\'container\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+            )\n+            request.maybe_webdav_client = True\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        self.assertEqual(\n-            (container, (\'foo\',),),\n-            traversal.browserDefault(request)\n-        )\n+            self.assertEqual(\n+                (container, (\'foo\',),),\n+                traversal.browserDefault(request)\n+            )\n \n-    def test_browser_default_without_dav(self):\n-        class TestContainer(Container):\n+        def test_browser_default_without_dav(self):\n+            class TestContainer(Container):\n \n-            def __browser_default__(self, request):\n-                return self, (\'foo\',)\n+                def __browser_default__(self, request):\n+                    return self, (\'foo\',)\n \n-        container = TestContainer(\'container\')\n-        request = DAVTestRequest(\n-            environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n-        )\n-        request.maybe_webdav_client = False\n+            container = TestContainer(\'container\')\n+            request = DAVTestRequest(\n+                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+            )\n+            request.maybe_webdav_client = False\n \n-        traversal = DexterityPublishTraverse(container, request)\n+            traversal = DexterityPublishTraverse(container, request)\n \n-        self.assertEqual(\n-            (container, (\'foo\',),),\n-            traversal.browserDefault(request)\n-        )\n+            self.assertEqual(\n+                (container, (\'foo\',),),\n+                traversal.browserDefault(request)\n+            )\n+\n+else:\n+    class TestDummy(MockTestCase):\n+\n+        def test_dummy(self):\n+            pass\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 3505c4a..466ad6f 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -127,16 +127,19 @@ def createContent(portal_type, **kw):\n     # to re-define a type through the web that uses the factory from an\n     # existing type, but wants a unique portal_type!\n     content.portal_type = fti.getId()\n-    schemas = iterSchemataForType(portal_type)\n-    fields = dict(kw)  # create a copy\n+    fields = dict(kw)\n+    done = []\n \n-    for schema in schemas:\n+    for schema in iterSchemataForType(portal_type):\n         # schema.names() doesn\'t return attributes from superclasses in derived\n         # schemas. therefore we have to iterate over all items from the passed\n         # keywords arguments and set it, if the behavior has the questioned\n         # attribute.\n         behavior = schema(content)\n         for name, value in fields.items():\n+            if name in done:\n+                # already set\n+                continue\n             try:\n                 # hasattr swallows exceptions.\n                 getattr(behavior, name)\n@@ -144,9 +147,11 @@ def createContent(portal_type, **kw):\n                 # fieldname not available\n                 continue\n             setattr(behavior, name, value)\n-            del fields[name]\n+            done.append(name)\n \n     for (key, value) in fields.items():\n+        if key in done:\n+            continue\n         setattr(content, key, value)\n \n     notify(ObjectCreatedEvent(content))\n@@ -206,7 +211,7 @@ def safe_utf8(st):\n \n \n def safe_unicode(st):\n-    if isinstance(st, str):\n+    if isinstance(st, six.binary_type):\n         st = st.decode(\'utf8\')\n     return st\n \ndiff --git a/pyproject.toml b/pyproject.toml\nnew file mode 100644\nindex 0000000..05b615d\n--- /dev/null\n+++ b/pyproject.toml\n@@ -0,0 +1,20 @@\n+[tool.towncrier]\n+filename = "CHANGES.rst"\n+directory = "news/"\n+title_format = "{version} ({project_date})"\n+underlines = ["-", ""]\n+\n+[[tool.towncrier.type]]\n+directory = "breaking"\n+name = "Breaking changes:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "feature"\n+name = "New features:"\n+showcontent = true\n+\n+[[tool.towncrier.type]]\n+directory = "bugfix"\n+name = "Bug fixes:"\n+showcontent = true\ndiff --git a/setup.py b/setup.py\nindex 34b0789..ad54f3c 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import find_packages\n \n \n-version = \'2.6.1.dev0\'\n+version = \'2.7.1.dev0\'\n \n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n@@ -17,7 +17,7 @@\n     description=short_description,\n     long_description=long_description,\n     # Get more strings from\n-    # https://pypi.python.org/pypi?%3Aaction=list_classifiers\n+    # https://pypi.org/classifiers/\n     classifiers=[\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.1",\n@@ -25,14 +25,16 @@\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n+        "Programming Language :: Python :: 3.6",\n+        "Programming Language :: Python :: 3.7",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords=\'plone dexterity contenttypes\',\n     author=\'Martin Aspeli\',\n     author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.python.org/pypi/plone.dexterity\',\n+    url=\'https://pypi.org/project/plone.dexterity\',\n     license=\'GPL version 2\',\n-    packages=find_packages(exclude=[\'ez_setup\']),\n+    packages=find_packages(),\n     namespace_packages=[\'plone\'],\n     include_package_data=True,\n     zip_safe=False,\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-02-11T22:00:04+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/1e5f346425f3eb15ef13709e0bf4e246adc02223

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
M CHANGES.rst
M README.rst
M plone/dexterity/bbb.py
M plone/dexterity/browser/add.py
M plone/dexterity/browser/base.py
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/content.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/i18n.py
M plone/dexterity/interfaces.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M setup.cfg
M setup.py
D news/2582.trivial
D news/89.feature
D news/90.bugfix
D news/93.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex f25f84a..d2f6483 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,29 @@ Changelog\n \n .. towncrier release notes start\n \n+2.8.0 (2019-02-08)\n+------------------\n+\n+New features:\n+\n+\n+- Implement getSize method to sum the size of all field values that have a\n+  getSize method. [davisagli] (#89)\n+\n+\n+Bug fixes:\n+\n+\n+- Other Python 3 compatibility fixes [ale-rt] (#90)\n+- Add PathReprProvider as a baseclass of Container to restore the original\n+  __repr__ behavior instead of the new __repr__ from persistent.Persistent.\n+  PathReprProvider needs to be before CMFOrderedBTreeFolderBase (which inherits\n+  OrderedBTreeFolderBase > BTreeFolder2Base > Persistent). [pbauer] (#93)\n+- Fixed test for minor check_id change. We need the \'Access contents\n+  information\' permission. (#2582)\n+- Remove deprecation warning, see\n+  https://github.com/plone/Products.CMFPlone/issues/2667 (#2667)\n+\n \n 2.6.1 (2018-09-23)\n ------------------\ndiff --git a/README.rst b/README.rst\nindex 7c00d13..f6fc562 100644\n--- a/README.rst\n+++ b/README.rst\n@@ -226,6 +226,6 @@ The `Dexterity Developer Manual <http://docs.plone.org/external/plone.app.dexter\n Source Code\n ===========\n \n-Contributors please read the document `Process for Plone core\'s development <http://docs.plone.org/develop/plone-coredev/index.html>`_\n+Contributors please read the document `Process for Plone core\'s development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n \n Sources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.dexterity>`_.\ndiff --git a/news/2582.trivial b/news/2582.trivial\ndeleted file mode 100644\nindex 1fbbc3b..0000000\n--- a/news/2582.trivial\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Fixed test for minor check_id change.\n-\n-We need the \'Access contents information\' permission.\ndiff --git a/news/89.feature b/news/89.feature\ndeleted file mode 100644\nindex 615c833..0000000\n--- a/news/89.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Implement getSize method to sum the size of all field values that have a getSize method.\n-[davisagli]\ndiff --git a/news/90.bugfix b/news/90.bugfix\ndeleted file mode 100644\nindex 43a51e8..0000000\n--- a/news/90.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Other Python 3 compatibility fixes\n-\n-[ale-rt]\ndiff --git a/news/93.bugfix b/news/93.bugfix\ndeleted file mode 100644\nindex ec38320..0000000\n--- a/news/93.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Add PathReprProvider as a baseclass of Container to restore the original __repr__ behavior instead of the new __repr__ from persistent.Persistent.\n-PathReprProvider needs to be before CMFOrderedBTreeFolderBase (which inherits OrderedBTreeFolderBase > BTreeFolder2Base > Persistent).\n-[pbauer]\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nindex 3d025fa..218faa4 100644\n--- a/plone/dexterity/bbb.py\n+++ b/plone/dexterity/bbb.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n import pkg_resources\n \n+\n HAS_ZSERVER = True\n try:\n     dist = pkg_resources.get_distribution(\'ZServer\')\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 5f6e9bf..6fe0750 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -2,7 +2,6 @@\n from Acquisition import aq_base\n from Acquisition import aq_inner\n from Acquisition.interfaces import IAcquirer\n-from Products.statusmessages.interfaces import IStatusMessage\n from plone.dexterity.browser.base import DexterityExtensibleForm\n from plone.dexterity.events import AddBegunEvent\n from plone.dexterity.events import AddCancelledEvent\n@@ -12,14 +11,15 @@\n from plone.dexterity.utils import getAdditionalSchemata\n from plone.z3cform import layout\n from plone.z3cform.interfaces import IDeferSecurityCheck\n+from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from z3c.form import form\n from z3c.form.interfaces import IDataManager\n from z3c.form.interfaces import NOT_CHANGED\n from z3c.form.util import changedField\n from zope.component import createObject\n-from zope.component import getUtility\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n from zope.event import notify\n from zope.publisher.browser import BrowserPage\n \ndiff --git a/plone/dexterity/browser/base.py b/plone/dexterity/browser/base.py\nindex 29cfb1b..c88ae48 100644\n--- a/plone/dexterity/browser/base.py\n+++ b/plone/dexterity/browser/base.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.autoform.form import AutoExtensibleForm\n+from plone.dexterity.i18n import MessageFactory as _\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import getAdditionalSchemata\n from zope.component import getUtility\n-from plone.dexterity.i18n import MessageFactory as _\n \n \n class DexterityExtensibleForm(AutoExtensibleForm):\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex 29106b4..eb55971 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -1,6 +1,4 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.utils import getToolByName\n-from Products.statusmessages.interfaces import IStatusMessage\n from plone.dexterity.browser.base import DexterityExtensibleForm\n from plone.dexterity.events import EditBegunEvent\n from plone.dexterity.events import EditCancelledEvent\n@@ -10,6 +8,8 @@\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.registry.interfaces import IRegistry\n from plone.z3cform import layout\n+from Products.CMFCore.utils import getToolByName\n+from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form import button\n from z3c.form import form\n from zope.component import getUtility\ndiff --git a/plone/dexterity/browser/fti.py b/plone/dexterity/browser/fti.py\nindex d2c0fbc..a3844a1 100644\n--- a/plone/dexterity/browser/fti.py\n+++ b/plone/dexterity/browser/fti.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n-from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView\n from plone.dexterity.fti import DexterityFTI\n+from Products.CMFCore.browser.typeinfo import FactoryTypeInformationAddView\n \n \n class FTIAddView(FactoryTypeInformationAddView):\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex b8b52e5..970b305 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -9,6 +9,7 @@\n from zope.component import adapter\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n+\n try:\n     from repoze.zope2.publishtraverse import DefaultPublishTraverse\n except ImportError:\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex bebeb3b..d457327 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -1,25 +1,15 @@\n # -*- coding: utf-8 -*-\n from AccessControl import ClassSecurityInfo\n-from AccessControl import Permissions as acpermissions\n from AccessControl import getSecurityManager\n-from Acquisition import Explicit\n+from AccessControl import Permissions as acpermissions\n from Acquisition import aq_base\n from Acquisition import aq_parent\n+from Acquisition import Explicit\n+from copy import deepcopy\n from DateTime import DateTime\n from OFS.PropertyManager import PropertyManager\n from OFS.SimpleItem import PathReprProvider\n from OFS.SimpleItem import SimpleItem\n-from Products.CMFCore import permissions\n-from Products.CMFCore.CMFCatalogAware import CMFCatalogAware\n-from Products.CMFCore.PortalContent import PortalContent\n-from Products.CMFCore.PortalFolder import PortalFolderBase\n-from Products.CMFCore.interfaces import ICatalogableDublinCore\n-from Products.CMFCore.interfaces import IDublinCore\n-from Products.CMFCore.interfaces import IMutableDublinCore\n-from Products.CMFCore.interfaces import ITypeInformation\n-from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n-from Products.CMFPlone.interfaces import IConstrainTypes\n-from copy import deepcopy\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.filerepresentation import DAVCollectionMixin\n@@ -36,15 +26,25 @@\n from plone.folder.ordered import CMFOrderedBTreeFolderBase\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore import permissions\n+from Products.CMFCore.CMFCatalogAware import CMFCatalogAware\n+from Products.CMFCore.interfaces import ICatalogableDublinCore\n+from Products.CMFCore.interfaces import IDublinCore\n+from Products.CMFCore.interfaces import IMutableDublinCore\n+from Products.CMFCore.interfaces import ITypeInformation\n+from Products.CMFCore.PortalContent import PortalContent\n+from Products.CMFCore.PortalFolder import PortalFolderBase\n+from Products.CMFDynamicViewFTI.browserdefault import BrowserDefaultMixin\n+from Products.CMFPlone.interfaces import IConstrainTypes\n from zExceptions import Unauthorized\n from zope.annotation import IAttributeAnnotatable\n from zope.component import queryUtility\n from zope.container.contained import Contained\n from zope.interface import implementer\n-from zope.interface.declarations import Implements\n-from zope.interface.declarations import ObjectSpecificationDescriptor\n from zope.interface.declarations import getObjectSpecification\n from zope.interface.declarations import implementedBy\n+from zope.interface.declarations import Implements\n+from zope.interface.declarations import ObjectSpecificationDescriptor\n from zope.schema.interfaces import IContextAwareDefaultFactory\n from zope.security.interfaces import IPermission\n \ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex d1577ec..949c0b1 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -1,14 +1,14 @@\n # -*- coding: utf-8 -*-\n+from csv import reader\n+from csv import writer\n+from Products.GenericSetup.content import _globtest\n from Products.GenericSetup.content import FauxDAVRequest\n from Products.GenericSetup.content import FauxDAVResponse\n from Products.GenericSetup.content import FolderishExporterImporter\n-from Products.GenericSetup.content import _globtest\n from Products.GenericSetup.interfaces import IContentFactoryName\n from Products.GenericSetup.interfaces import IFilesystemExporter\n from Products.GenericSetup.interfaces import IFilesystemImporter\n from Products.GenericSetup.utils import _getDottedName\n-from csv import reader\n-from csv import writer\n from six import StringIO\n from zope.component import queryAdapter\n from zope.interface import implementer\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex 9949213..9df8f72 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n from persistent import Persistent\n-from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.interfaces import IDexterityFactory\n+from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.utils import resolveDottedName\n from zope.component import getUtility\n from zope.component.factory import Factory\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 9ebf6e5..75c318a 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -36,6 +36,7 @@\n import six\n import tempfile\n \n+\n if bbb.HAS_ZSERVER:\n     from webdav.Resource import Resource\n else:\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 5e0c39f..7794936 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -1,17 +1,18 @@\n # -*- coding: utf-8 -*-\n from AccessControl import getSecurityManager\n from Acquisition import aq_base\n-from Products.CMFCore.interfaces import ISiteRoot\n-from Products.CMFDynamicViewFTI import fti as base\n from plone.dexterity import utils\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.interfaces import IDexterityFTIModificationDescription\n-from plone.dexterity.schema import SchemaInvalidatedEvent\n from plone.dexterity.schema import portalTypeToSchemaName\n-from plone.supermodel import loadString, loadFile\n+from plone.dexterity.schema import SchemaInvalidatedEvent\n+from plone.supermodel import loadFile\n+from plone.supermodel import loadString\n from plone.supermodel.model import Model\n from plone.supermodel.utils import syncSchema\n+from Products.CMFCore.interfaces import ISiteRoot\n+from Products.CMFDynamicViewFTI import fti as base\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\ndiff --git a/plone/dexterity/i18n.py b/plone/dexterity/i18n.py\nindex e8d0a86..fe387f4 100644\n--- a/plone/dexterity/i18n.py\n+++ b/plone/dexterity/i18n.py\n@@ -1,3 +1,5 @@\n # -*- coding: utf-8 -*-\n import zope.i18nmessageid\n+\n+\n MessageFactory = zope.i18nmessageid.MessageFactory("plone")\ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex 6f5fdb9..e36cbe8 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -1,11 +1,14 @@\n # -*- coding: utf-8 -*-\n from Products.CMFCore.interfaces import ITypeInformation\n from zope.component.interfaces import IFactory\n-from zope.component.interfaces import IObjectEvent\n-from zope.interface import Interface, Attribute\n+from zope.interface import Attribute\n+from zope.interface import Interface\n+from zope.interface.interfaces import IObjectEvent\n from zope.lifecycleevent.interfaces import IModificationDescription\n+\n import zope.schema\n \n+\n try:\n     from zope.app.content import IContentType\n except ImportError:\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex c82dd02..b62b68d 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from mock import Mock\n+\n import gc\n import pkg_resources\n import six\ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex 7706ade..fecad85 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from plone.behavior.interfaces import IBehavior\n from plone.dexterity.behavior import DexterityBehaviorAssignable\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from zope.interface import Interface\n-from .case import MockTestCase\n \n \n class IOne(Interface):\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 6f2dd32..3bdf69f 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -1,7 +1,8 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n+from datetime import date\n+from datetime import datetime\n from DateTime import DateTime\n-from Products.CMFPlone.interfaces import IConstrainTypes\n-from datetime import date, datetime\n from mock import Mock\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.behavior.interfaces import IBehavior\n@@ -17,13 +18,13 @@\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.folder.default import DefaultOrdering\n from Products.CMFCore.interfaces import ITypesTool\n+from Products.CMFPlone.interfaces import IConstrainTypes\n from pytz import timezone\n from zope.annotation.attribute import AttributeAnnotations\n from zope.component import getUtility\n from zope.component import provideAdapter\n-from zope.interface import Interface\n from zope.interface import alsoProvides\n-from .case import MockTestCase\n+from zope.interface import Interface\n \n import six\n import zope.schema\ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex e796107..d2cb8f3 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -1,7 +1,9 @@\n # -*- coding: utf-8 -*-\n from plone.testing.zca import UNIT_TESTING\n+\n import unittest\n \n+\n # TODO: End to end tests that ensure components are properly wired up\n #  - for now, we have some tests in example.dexterity, but we should have\n #    more specific tests here.\ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex dc78c8e..6656a1f 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from mock import Mock\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from zope.interface import Interface\n-from .case import MockTestCase\n+\n import unittest\n \n \ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 1994c39..0d9e0b4 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from mock import Mock\n-from Products.CMFCore.interfaces import ISiteRoot\n from plone.dexterity import utils\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n@@ -13,9 +13,11 @@\n from plone.dexterity.schema import DexteritySchemaPolicy\n from plone.dexterity.tests.schemata import ITestSchema\n from plone.supermodel.model import Model\n+from Products.CMFCore.interfaces import ISiteRoot\n from zope.component import getGlobalSiteManager\n from zope.component import queryUtility\n-from zope.component.hooks import setSite, setHooks\n+from zope.component.hooks import setHooks\n+from zope.component.hooks import setSite\n from zope.component.interfaces import IFactory\n from zope.component.persistentregistry import PersistentComponents\n from zope.container.contained import ObjectAddedEvent\n@@ -25,7 +27,6 @@\n from zope.lifecycleevent import ObjectModifiedEvent\n from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n from zope.security.interfaces import IPermission\n-from .case import MockTestCase\n \n import os.path\n import plone.dexterity.schema.generated\ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex a9d6831..03a3c83 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from mock import Mock\n from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\n@@ -6,9 +7,8 @@\n from plone.dexterity.primary import PrimaryFieldInfo\n from plone.rfc822.interfaces import IPrimaryField\n from zope import schema\n-from zope.interface import Interface\n from zope.interface import alsoProvides\n-from .case import MockTestCase\n+from zope.interface import Interface\n \n \n class PrimaryFieldInfoTestCase(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex c3ff822..e032a7a 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from mock import Mock\n from plone.dexterity import schema\n from plone.dexterity.fti import DexterityFTI\n@@ -11,7 +12,6 @@\n from Products.CMFCore.interfaces import ISiteRoot\n from zope.interface import Interface\n from zope.interface.interface import InterfaceClass\n-from .case import MockTestCase\n \n import zope.schema\n \ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex d326781..5429b31 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from mock import Mock\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from zope.interface import Interface\n-from .case import MockTestCase\n \n import unittest\n \ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex 852bfb8..ef40774 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -1,8 +1,9 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from mock import Mock\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n-from plone.dexterity.content import Item\n from plone.dexterity.content import Container\n+from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n@@ -10,7 +11,6 @@\n from zope.interface import provider\n from zope.security.interfaces import IPermission\n from zope.security.permission import Permission\n-from .case import MockTestCase\n \n import zope.schema\n \ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex 24f1a86..aa9443c 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -1,8 +1,8 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from mock import Mock\n from plone.dexterity import utils\n from plone.dexterity.fti import DexterityFTI\n-from .case import MockTestCase\n \n \n class TestUtils(MockTestCase):\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex 83f3e3c..852c437 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n+from .case import MockTestCase\n from AccessControl import Unauthorized\n from mock import Mock\n-from Products.statusmessages.interfaces import IStatusMessage\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.browser.add import DefaultAddForm\n@@ -20,22 +20,22 @@\n from plone.dexterity.interfaces import IEditFinishedEvent\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.z3cform.interfaces import IDeferSecurityCheck\n+from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form.action import Actions\n from z3c.form.datamanager import AttributeField\n from z3c.form.field import Fields\n from z3c.form.field import FieldWidgets\n from z3c.form.interfaces import IActions\n from z3c.form.interfaces import IWidgets\n+from zope import schema\n from zope.component import adapter\n from zope.component import provideAdapter\n from zope.container.interfaces import INameChooser\n-from zope.interface import Interface\n from zope.interface import alsoProvides\n from zope.interface import implementer\n+from zope.interface import Interface\n from zope.interface import provider\n from zope.publisher.browser import TestRequest as TestRequestBase\n-from .case import MockTestCase\n-from zope import schema\n \n import six\n \ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 38cec1a..8ec082c 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -2,6 +2,7 @@\n from .case import HAS_ZSERVER\n from .case import MockTestCase\n \n+\n if HAS_ZSERVER:\n \n     from .case import Dummy\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 466ad6f..87b33f9 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -7,9 +7,9 @@\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.interfaces import IDexterityFTI\n+from plone.dexterity.schema import portalTypeToSchemaName  # noqa bbb\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.dexterity.schema import SchemaNameEncoder  # noqa bbb\n-from plone.dexterity.schema import portalTypeToSchemaName  # noqa bbb\n from plone.dexterity.schema import schemaNameToPortalType  # noqa bbb\n from plone.dexterity.schema import splitSchemaName  # noqa bbb\n from plone.supermodel.utils import mergedTaggedValueDict\ndiff --git a/setup.cfg b/setup.cfg\nindex 02c1587..1fc545d 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -28,9 +28,16 @@ previous = true\n ignore =\n     buildout.cfg\n \n-# When Python 2-3 compatible:\n-# [bdist_wheel]\n-# universal = 1\n \n-[zest.releaser]\n-create-wheel = yes\n+\n+[isort]\n+force_alphabetical_sort = True\n+force_single_line = True\n+lines_after_imports = 2\n+line_length = 79\n+not_skip = __init__.py\n+use_parentheses = True\n+multi_line_output = 3\n+\n+[bdist_wheel]\n+universal = 1\ndiff --git a/setup.py b/setup.py\nindex ad54f3c..04b2e50 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,9 +1,9 @@\n # -*- coding: utf-8 -*-\n-from setuptools import setup\n from setuptools import find_packages\n+from setuptools import setup\n \n \n-version = \'2.7.1.dev0\'\n+version = \'2.8.1.dev0\'\n \n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-02-16T16:32:01+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/71796f65a27c1d9b130441df71cadc6b8ec95151

Check __dict__ as getattr will use descriptors - ie FieldProperties

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex d457327..93389f0 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -752,7 +752,7 @@ def _delObject(self, name, *args, **kwargs):\n \n         # This will trigger when an item was deleted from this container and\n         # attribute by the same name exists. ie obj[\'my_id\'] and obj.my_id.\n-        if getattr(aq_base(self), name, _marker) is not _marker:\n+        if name in aq_base(self).__dict__:\n             msg = (\n                 "Item \'{}\' contained in {} was shadowed by an attribute."\n                 "You might want to delete the attribute as well."\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-03-03T12:21:13+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/20fdb8aa54d8a12e650c22a4944d33c5c08f0bc9

Donn't warning about accessing items by attribute.

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 93389f0..6645d48 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -717,10 +717,6 @@ def __init__(self, id=None, **kwargs):\n         DexterityContent.__init__(self, id, **kwargs)\n \n     def __getattr__(self, name):\n-        if name in self:\n-            msg = "Trying to access item \'{}\' in {} by attribute".format(name, self)\n-            warnings.warn(msg)\n-\n         try:\n             return DexterityContent.__getattr__(self, name)\n         except AttributeError:\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-03-03T13:50:56+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/44523c93f5e9cd327115869a79089e8cd3d39d04

Pass in knnown prefix

Files changed:
M plone/dexterity/fti.py

b'diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 7794936..7b14449 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -264,8 +264,11 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-\n-        schemaName = portalTypeToSchemaName(self.getId())\n+        try:\n+            prefix = self.__parent__.__name__\n+        except AttributeError:\n+            prefix = None\n+        schemaName = portalTypeToSchemaName(self.getId(), prefix=prefix)\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-03-03T22:40:02+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/d341c7138bc4fde066c33b5ab931e0367fb9b14f

fix up, look sharp

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 6645d48..9f35214 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -725,21 +725,23 @@ def __getattr__(self, name):\n         # Be specific about the implementation we use\n         return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n \n-    def __setattr__(self, name, value):\n+    def __delattr__(self, name):\n         try:\n-            has_item_by_name = name in self\n-        except:\n-            has_item_by_name = False\n-        if has_item_by_name:\n-            msg = (\n-                "An item with the same name already exists. Use item access, for example: obj[\'{}\'] = value. "\n-                "We are setting the item instead of the attribute!"\n-            ).format(name)\n-            warnings.warn(msg)\n-            # We remove the old one and then add the new one so the old one is\n-            # unindexed and the new is indexed.\n+            super(Container, self).__delattr__(name)\n+        except AttributeError:  # delete the item instead\n             del self[name]\n+\n+    def __setattr__(self, name, value):\n+        # If we have an existing attribute, just set it.\n+        # We\'ll check this first, so we don\'t check the tree unneeded.\n+        if name in self.__dict__:\n+            super(Container, self).__setattr__(name, value)\n+\n+        # if we have a n item, set that\n+        elif \'_tree\' in self.__dict__ and name in self:\n             self[name] = value\n+\n+        # else we\'ll set an attribute.\n         else:\n             super(Container, self).__setattr__(name, value)\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-03-03T23:09:10+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/4877506ccb65d8a3875381f6f8d0a833432bf5c2

fu. We do need to delete the item first, or we'll get doublicate ids.

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 9f35214..94ad579 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -739,6 +739,7 @@ def __setattr__(self, name, value):\n \n         # if we have a n item, set that\n         elif '_tree' in self.__dict__ and name in self:\n+            del self[name]\n             self[name] = value\n \n         # else we'll set an attribute.\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-06T20:03:53+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/9a84510ebf49deefa13994a80e283c661c4bbc78

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
A news/95.bugfix
A news/96.bugfix
A news/98.feature
M plone/dexterity/content.py
M plone/dexterity/events.py
M plone/dexterity/schema.py
M setup.py

b'diff --git a/news/95.bugfix b/news/95.bugfix\nnew file mode 100644\nindex 0000000..234d3e6\n--- /dev/null\n+++ b/news/95.bugfix\n@@ -0,0 +1,3 @@\n+Turn a warning meant as deprecation warning into a a real DeprecationWarning,\n+follows Deprecation Guide best practice.\n+[jensens]\ndiff --git a/news/96.bugfix b/news/96.bugfix\nnew file mode 100644\nindex 0000000..9be8f51\n--- /dev/null\n+++ b/news/96.bugfix\n@@ -0,0 +1 @@\n+Fixed DeprecationWarning for ObjectEvent.  [maurits]\ndiff --git a/news/98.feature b/news/98.feature\nnew file mode 100644\nindex 0000000..847883f\n--- /dev/null\n+++ b/news/98.feature\n@@ -0,0 +1,2 @@\n+Avoid expensive lookups for other common attributes.\n+[gforcada]\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 94ad579..fa04302 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -57,6 +57,14 @@\n FLOOR_DATE = DateTime(1970, 0)  # always effective\n CEILING_DATE = DateTime(2500, 0)  # never expires\n \n+# see comment in DexterityContent.__getattr__ method\n+ATTRIBUTE_NAMES_TO_IGNORE = (\n+    \'_v__providedBy__\',\n+    \'im_self\',  # python 2 only, on python 3 it was renamed to __self__\n+    \'aq_inner\',\n+    \'_Access_contents_information_Permission\'\n+)\n+\n \n def _default_from_schema(context, schema, fieldname):\n     """helper to lookup default value of a field\n@@ -332,7 +340,9 @@ def __getattr__(self, name):\n         # wouldn\'t be in here if the class had such an attribute\n         # defined).\n         # also handle special dynamic providedBy cache here.\n-        if name.startswith(\'__\') or name == \'_v__providedBy__\':\n+        # Ignore also some other well known names like\n+        # Acquisition and AccessControl related ones.\n+        if name.startswith(\'__\') or name in ATTRIBUTE_NAMES_TO_IGNORE:\n             raise AttributeError(name)\n \n         # attribute was not found; try to look it up in the schema and return\ndiff --git a/plone/dexterity/events.py b/plone/dexterity/events.py\nindex 3d79fc9..4bee910 100644\n--- a/plone/dexterity/events.py\n+++ b/plone/dexterity/events.py\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.dexterity import interfaces\n-from zope.component.interfaces import ObjectEvent\n+from zope.interface.interfaces import ObjectEvent\n from zope.interface import implementer\n \n \ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 90cf48a..93565ea 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -23,8 +23,8 @@\n \n import functools\n import logging\n-import six\n import types\n+import warnings\n \n \n log = logging.getLogger(__name__)\n@@ -135,11 +135,13 @@ def behavior_registrations(self, fti):\n             registration = queryUtility(IBehavior, name=behavior_name)\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n-                log.warning(\n+                warnings.warn(\n                     \'No behavior registration found for behavior named: "{0}"\'\n-                    \' - trying fallback lookup..."\'.format(\n+                    \' - trying deprecated fallback lookup (will be removed \'\n+                    \'in 3.0)..."\'.format(\n                         behavior_name\n-                    )\n+                    ),\n+                    DeprecationWarning,\n                 )\n                 try:\n                     schema_interface = resolve(behavior_name)\ndiff --git a/setup.py b/setup.py\nindex 04b2e50..573f20d 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -20,7 +20,6 @@\n     # https://pypi.org/classifiers/\n     classifiers=[\n         "Framework :: Plone",\n-        "Framework :: Plone :: 5.1",\n         "Framework :: Plone :: 5.2",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-21T23:18:33+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/bde13fcb802f9dff19186bd1f18b5f934952b4f6

prevent some loop where getUtility(ISiteRoot) tiggers gettings the schema, which triggers portalTypeToSchemaName, etc.

Files changed:
M plone/dexterity/fti.py
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 7b14449..bcdca29 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -265,10 +265,10 @@ def lookupSchema(self):\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n         try:\n-            prefix = self.__parent__.__name__\n+            siteroot = self.__parent__.__parent__\n         except AttributeError:\n-            prefix = None\n-        schemaName = portalTypeToSchemaName(self.getId(), prefix=prefix)\n+            siteroot = None\n+        schemaName = portalTypeToSchemaName(self.getId(), siteroot=siteroot)\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n@@ -558,7 +558,8 @@ def ftiModified(object, event):\n         if (fti.model_source or fti.model_file) \\\n            and (\'model_source\' in mod or \'model_file\' in mod or \'schema_policy\' in mod):\n \n-            schemaName = portalTypeToSchemaName(portal_type)\n+            siteroot = fti.__parent__.__parent__\n+            schemaName = portalTypeToSchemaName(portal_type, siteroot=siteroot)\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 93565ea..38e8d41 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -281,11 +281,13 @@ def split(self, s):\n         return [self.decode(a) for a in s.split(\'_0_\')]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None):\n+def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, siteroot=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n     if prefix is None:\n-        prefix = \'/\'.join(getUtility(ISiteRoot).getPhysicalPath())[1:]\n+        if siteroot is None:\n+            siteroot = getUtility(ISiteRoot)\n+        prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n \n     encoder = SchemaNameEncoder()\n     return encoder.join(prefix, portal_type, schema)\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-21T23:34:18+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/1cc678faf3179b5581c86ae307658ead567e4d03

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
A news/101.feature
M plone/dexterity/browser/add.py
M plone/dexterity/browser/item.pt

b'diff --git a/news/101.feature b/news/101.feature\nnew file mode 100644\nindex 0000000..cee7125\n--- /dev/null\n+++ b/news/101.feature\n@@ -0,0 +1 @@\n+Add container property to ``AddForm`` to simplify target container selection in subclasses. [jensens]\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 6fe0750..0c05d86 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -50,12 +50,20 @@ def __init__(self, context, request, ti=None):\n     def additionalSchemata(self):\n         return getAdditionalSchemata(portal_type=self.portal_type)\n \n-    # API\n+    @property\n+    def container(self):\n+        """find container\n+\n+        return container object.\n \n+        In subclasses this could be used to point to a different container.\n+        """\n+        return aq_inner(self.context)\n+\n+    # API\n     def create(self, data):\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n \n-        container = aq_inner(self.context)\n         content = createObject(fti.factory)\n \n         # Note: The factory may have done this already, but we want to be sure\n@@ -69,7 +77,7 @@ def create(self, data):\n         # Acquisition wrap temporarily to satisfy things like vocabularies\n         # depending on tools\n         if IAcquirer.providedBy(content):\n-            content = content.__of__(container)\n+            content = content.__of__(self.container)\n \n         _applyChanges(self, content, data, force=True)\n         for group in self.groups:\n@@ -80,16 +88,15 @@ def create(self, data):\n     def add(self, object):\n \n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n-        container = aq_inner(self.context)\n-        new_object = addContentToContainer(container, object)\n+        new_object = addContentToContainer(self.container, object)\n \n         if fti.immediate_view:\n             self.immediate_view = "/".join(\n-                [container.absolute_url(), new_object.id, fti.immediate_view]\n+                [self.container.absolute_url(), new_object.id, fti.immediate_view]\n             )\n         else:\n             self.immediate_view = "/".join(\n-                [container.absolute_url(), new_object.id]\n+                [self.container.absolute_url(), new_object.id]\n             )\n \n     def nextURL(self):\ndiff --git a/plone/dexterity/browser/item.pt b/plone/dexterity/browser/item.pt\nindex 8dd14c3..55324f2 100644\n--- a/plone/dexterity/browser/item.pt\n+++ b/plone/dexterity/browser/item.pt\n@@ -3,7 +3,7 @@\n       xmlns:metal="http://xml.zope.org/namespaces/metal"\n       xmlns:i18n="http://xml.zope.org/namespaces/i18n"\n       lang="en"\n-      metal:use-macro="context/main_template/macros/master"\n+      metal:use-macro="context/@@main_template/macros/master"\n       i18n:domain="plone">\n <body>\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-21T23:48:39+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/48b0bc5aa2c40c0c4fbae2402ccccdd33e833fa8

blergh

Files changed:
M plone/dexterity/fti.py

b"diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex bcdca29..e47ebf6 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -264,10 +264,11 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-        try:\n-            siteroot = self.__parent__.__parent__\n-        except AttributeError:\n-            siteroot = None\n+        siteroot = self\n+        while True:\n+            if siteroot is None or ISiteRoot.providedBy(siteroot):\n+                break\n+            siteroot = getattr(siteroot, '__parent__', None)\n         schemaName = portalTypeToSchemaName(self.getId(), siteroot=siteroot)\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n@@ -558,7 +559,11 @@ def ftiModified(object, event):\n         if (fti.model_source or fti.model_file) \\\n            and ('model_source' in mod or 'model_file' in mod or 'schema_policy' in mod):\n \n-            siteroot = fti.__parent__.__parent__\n+            siteroot = fti\n+            while True:\n+                if siteroot is None or ISiteRoot.providedBy(siteroot):\n+                    break\n+                siteroot = getattr(siteroot, '__parent__', None)\n             schemaName = portalTypeToSchemaName(portal_type, siteroot=siteroot)\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-04-28T23:54:11+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/32b8912ce1a33cb0ec19e16efdcac131550c31f3

kekekekekek

Files changed:
M plone/dexterity/fti.py
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex e47ebf6..888f34e 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -264,12 +264,7 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-        siteroot = self\n-        while True:\n-            if siteroot is None or ISiteRoot.providedBy(siteroot):\n-                break\n-            siteroot = getattr(siteroot, \'__parent__\', None)\n-        schemaName = portalTypeToSchemaName(self.getId(), siteroot=siteroot)\n+        schemaName = portalTypeToSchemaName(self.getId())\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n@@ -559,12 +554,7 @@ def ftiModified(object, event):\n         if (fti.model_source or fti.model_file) \\\n            and (\'model_source\' in mod or \'model_file\' in mod or \'schema_policy\' in mod):\n \n-            siteroot = fti\n-            while True:\n-                if siteroot is None or ISiteRoot.providedBy(siteroot):\n-                    break\n-                siteroot = getattr(siteroot, \'__parent__\', None)\n-            schemaName = portalTypeToSchemaName(portal_type, siteroot=siteroot)\n+            schemaName = portalTypeToSchemaName(portal_type)\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 38e8d41..e0e271f 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -16,6 +16,7 @@\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n+from zope.component.hooks import getSite\n from zope.dottedname.resolve import resolve\n from zope.interface import alsoProvides\n from zope.interface import implementer\n@@ -281,12 +282,11 @@ def split(self, s):\n         return [self.decode(a) for a in s.split(\'_0_\')]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, siteroot=None):\n+def portalTypeToSchemaName(portal_type, schema=u"", prefix=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n     if prefix is None:\n-        if siteroot is None:\n-            siteroot = getUtility(ISiteRoot)\n+        siteroot = getSite()\n         prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n \n     encoder = SchemaNameEncoder()\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-06-21T21:05:15+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/8fb47692d62dc3c9aeb18ae1e2b2686e8496d301

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
M CHANGES.rst
M plone/dexterity/filerepresentation.py
M setup.py
D news/101.feature
D news/95.bugfix
D news/96.bugfix
D news/98.feature

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex d2f6483..b8a2fec 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,37 @@ Changelog\n \n .. towncrier release notes start\n \n+2.9.1 (2019-05-21)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fix WebDAV compatibility issues with ZServer on Python 3 [datakurre] (#102)\n+- Avoid passing in unicode data into the WebDAV message parser.\n+  [Rotonen] (#103)\n+\n+\n+2.9.0 (2019-05-01)\n+------------------\n+\n+New features:\n+\n+\n+- Avoid expensive lookups for other common attributes.\n+  [gforcada] (#98)\n+- Add container property to ``AddForm`` to simplify target container selection in subclasses. [jensens] (#101)\n+\n+\n+Bug fixes:\n+\n+\n+- Turn a warning meant as deprecation warning into a a real DeprecationWarning,\n+  follows Deprecation Guide best practice.\n+  [jensens] (#95)\n+- Fixed DeprecationWarning for ObjectEvent.  [maurits] (#96)\n+\n+\n 2.8.0 (2019-02-08)\n ------------------\n \ndiff --git a/news/101.feature b/news/101.feature\ndeleted file mode 100644\nindex cee7125..0000000\n--- a/news/101.feature\n+++ /dev/null\n@@ -1 +0,0 @@\n-Add container property to ``AddForm`` to simplify target container selection in subclasses. [jensens]\ndiff --git a/news/95.bugfix b/news/95.bugfix\ndeleted file mode 100644\nindex 234d3e6..0000000\n--- a/news/95.bugfix\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-Turn a warning meant as deprecation warning into a a real DeprecationWarning,\n-follows Deprecation Guide best practice.\n-[jensens]\ndiff --git a/news/96.bugfix b/news/96.bugfix\ndeleted file mode 100644\nindex 9be8f51..0000000\n--- a/news/96.bugfix\n+++ /dev/null\n@@ -1 +0,0 @@\n-Fixed DeprecationWarning for ObjectEvent.  [maurits]\ndiff --git a/news/98.feature b/news/98.feature\ndeleted file mode 100644\nindex 847883f..0000000\n--- a/news/98.feature\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Avoid expensive lookups for other common attributes.\n-[gforcada]\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex 75c318a..b3ee215 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -689,13 +689,11 @@ def _getStream(self):\n         # publisher, which will serve it efficiently even after the\n         # transaction is closed\n         message = self._getMessage()\n+        out = tempfile.TemporaryFile(mode=\'w+b\')\n         if six.PY2:\n-            # message.as_string will return str in both Python 2 and 3\n-            kw = {\'mode\': \'w+b\'}\n+            out.write(message.as_string())\n         else:\n-            kw = {\'mode\': \'w+\', \'encoding\': \'utf-8\'}\n-        out = tempfile.TemporaryFile(**kw)\n-        out.write(message.as_string())\n+            out.write(message.as_string().encode(\'utf-8\'))\n         self._size = out.tell()\n         out.seek(0)\n         return out\ndiff --git a/setup.py b/setup.py\nindex 573f20d..7df6a86 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.8.1.dev0\'\n+version = \'2.9.2.dev0\'\n \n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-06-22T10:15:20+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/123cb87a771dd2e24d58b00e9a21a5e87295abc6

just use getUtility

Files changed:
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex e0e271f..6a4afd6 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -286,7 +286,7 @@ def portalTypeToSchemaName(portal_type, schema=u"", prefix=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n     if prefix is None:\n-        siteroot = getSite()\n+        siteroot = getUtility(ISiteRoot)\n         prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n \n     encoder = SchemaNameEncoder()\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-06-22T15:25:42+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/b9233a9024ee08c0a57df8be0756b1a353141342

special case Plone Site to we don't loop

Files changed:
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 6a4afd6..39a8e89 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -286,7 +286,11 @@ def portalTypeToSchemaName(portal_type, schema=u"", prefix=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n     if prefix is None:\n-        siteroot = getUtility(ISiteRoot)\n+        if portal_type == \'Plone Site\':\n+            fti = getUtility(IDexterityFTI, name=portal_type)\n+            siteroot = fti.__parent__\n+        else:\n+            siteroot = getUtility(ISiteRoot)\n         prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n \n     encoder = SchemaNameEncoder()\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-10-26T15:05:05+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/488f9caeb6b40867ce49ec7c3be0bece01e9978c

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
M .travis.yml
M CHANGES.rst
M plone/dexterity/content.py
M plone/dexterity/schema.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_schema_cache.py
M setup.py

b'diff --git a/.travis.yml b/.travis.yml\nindex 3bc84e3..0502b44 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -1,21 +1,25 @@\n language: python\n+dist: xenial\n python: 2.7\n sudo: false\n cache:\n+  pip: true\n   directories:\n     - eggs\n-env:\n-  - PLONE_VERSION=5.0\n-  - PLONE_VERSION=5.1\n matrix:\n-  allow_failures:\n+  include:\n+    - env: PLONE_VERSION=5.0\n+      python: "2.7"\n     - env: PLONE_VERSION=5.1\n+      python: "2.7"\n+    - env: PLONE_VERSION=5.2\n+      python: "2.7"\n+    - env: PLONE_VERSION=5.2\n+      python: "3.7"\n   fast_finish: true\n install:\n   - sed -ie "s#test-5.0#test-$PLONE_VERSION#" buildout.cfg\n-  - pip install setuptools==33.1.1\n-  - pip install zc.buildout==2.8.0\n-  - buildout bootstrap .\n-  - bin/buildout annotate\n-  - bin/buildout -Nv install test\n+  - pip install -r https://dist.plone.org/release/$PLONE_VERSION-latest/requirements.txt\n+  - buildout annotate\n+  - buildout -Nv install test\n script: bin/test\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex b8a2fec..1848d47 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,27 @@ Changelog\n \n .. towncrier release notes start\n \n+2.9.2 (2019-10-12)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- The debug messages issued when a non existent behavior is recorded in an FTI have been improved [ale-rt] (#109)\n+- Avoid looking up behaviors with an empty name [ale-rt] (#110)\n+- Performance enhancement in schema cache by factor ~1.5.\n+  [jensens] (#113)\n+- Performance enhancement in schema cache and assignable.\n+  [jensens] (#115)\n+- Performance enhancement:\n+  Refine pre-filtering of attributes on content ``__getattr__``.\n+  Filter out all permissions (ending with ``_Permission``) and some portal-tools.\n+  Also often called aquired functions are skipped.\n+  [jensens] (#116)\n+- Performance enhancement: avoid a providedBy in ``_default_from_schema``.\n+  [jensens] (#117)\n+\n+\n 2.9.1 (2019-05-21)\n ------------------\n \ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex fa04302..f9286d8 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -40,6 +40,7 @@\n from zope.annotation import IAttributeAnnotatable\n from zope.component import queryUtility\n from zope.container.contained import Contained\n+from zope.globalrequest import getRequest\n from zope.interface import implementer\n from zope.interface.declarations import getObjectSpecification\n from zope.interface.declarations import implementedBy\n@@ -59,12 +60,20 @@\n \n # see comment in DexterityContent.__getattr__ method\n ATTRIBUTE_NAMES_TO_IGNORE = (\n-    \'_v__providedBy__\',\n-    \'im_self\',  # python 2 only, on python 3 it was renamed to __self__\n+    \'_dav_writelocks\',\n     \'aq_inner\',\n-    \'_Access_contents_information_Permission\'\n+    \'getCurrentSkinName\',\n+    \'getURL\',\n+    \'im_self\',  # python 2 only, on python 3 it was renamed to __self__\n+    \'plone_utils\',\n+    \'portal_membership\',\n+    \'portal_placeful_workflow\',\n+    \'portal_properties\',\n+    \'translation_service\',\n )\n \n+ASSIGNABLE_CACHE_KEY = \'__plone_dexterity_assignable_cache__\'\n+\n \n def _default_from_schema(context, schema, fieldname):\n     """helper to lookup default value of a field\n@@ -74,14 +83,40 @@ def _default_from_schema(context, schema, fieldname):\n     field = schema.get(fieldname, None)\n     if field is None:\n         return _marker\n-    if IContextAwareDefaultFactory.providedBy(\n-            getattr(field, \'defaultFactory\', None)\n+    default_factory = getattr(field, \'defaultFactory\', None)\n+    if (\n+        # check for None to avoid one expensive providedBy (called often)\n+        default_factory is not None and\n+        IContextAwareDefaultFactory.providedBy(default_factory)\n     ):\n-        bound = field.bind(context)\n-        return deepcopy(bound.default)\n-    else:\n-        return deepcopy(field.default)\n-    return _marker\n+        return deepcopy(field.bind(context).default)\n+    return deepcopy(field.default)\n+\n+\n+def get_assignable(context):\n+    """get the BehaviorAssignable for the context.\n+\n+    Read from cache on request if needed (twice as fast as lookup)\n+\n+    returns IBehaviorAssignable providing instance or None\n+    """\n+    request = getRequest()\n+    if not request:\n+        return IBehaviorAssignable(context, None)\n+    cache_key = getattr(context, \'_p_oid\', None)\n+    if not cache_key:\n+        return IBehaviorAssignable(context, None)\n+    assignable_cache = getattr(request, ASSIGNABLE_CACHE_KEY, _marker)\n+    if assignable_cache is _marker:\n+        assignable_cache = dict()\n+        setattr(request, ASSIGNABLE_CACHE_KEY, assignable_cache)\n+    assignable = assignable_cache.get(cache_key, _marker)\n+    if assignable is _marker:\n+        assignable_cache[cache_key] = assignable = IBehaviorAssignable(\n+            context,\n+            None,\n+        )\n+    return assignable\n \n \n class FTIAwareSpecification(ObjectSpecificationDescriptor):\n@@ -143,7 +178,7 @@ def __get__(self, inst, cls=None):\n         # block recursion\n         self.__recursion__ = True\n         try:\n-            assignable = IBehaviorAssignable(inst, None)\n+            assignable = get_assignable(inst)\n             if assignable is not None:\n                 for behavior_registration in assignable.enumerateBehaviors():\n                     if behavior_registration.marker:\n@@ -341,8 +376,13 @@ def __getattr__(self, name):\n         # defined).\n         # also handle special dynamic providedBy cache here.\n         # Ignore also some other well known names like\n-        # Acquisition and AccessControl related ones.\n-        if name.startswith(\'__\') or name in ATTRIBUTE_NAMES_TO_IGNORE:\n+        # Permission, Acquisition and AccessControl related ones.\n+        if (\n+            name.startswith(\'__\')\n+            or name.startswith(\'_v\')\n+            or name.endswith(\'_Permission\')\n+            or name in ATTRIBUTE_NAMES_TO_IGNORE\n+        ):\n             raise AttributeError(name)\n \n         # attribute was not found; try to look it up in the schema and return\n@@ -355,8 +395,8 @@ def __getattr__(self, name):\n         if value is not _marker:\n             return value\n \n-        # do the same for each subtype\n-        assignable = IBehaviorAssignable(self, None)\n+        # do the same for each behavior\n+        assignable = get_assignable(self)\n         if assignable is not None:\n             for behavior_registration in assignable.enumerateBehaviors():\n                 if behavior_registration.interface:\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 39a8e89..b64f9ac 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -18,12 +18,14 @@\n from zope.component import queryUtility\n from zope.component.hooks import getSite\n from zope.dottedname.resolve import resolve\n+from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n from zope.interface import implementer\n from zope.interface.interface import InterfaceClass\n \n import functools\n import logging\n+import six\n import types\n import warnings\n \n@@ -36,6 +38,8 @@\n \n _MARKER = dict()\n \n+FTI_CACHE_KEY = \'__plone_dexterity_fti_cache__\'\n+\n \n def invalidate_cache(fti):\n     fti._p_activate()\n@@ -51,15 +55,45 @@ def volatile(func):\n     @functools.wraps(func)\n     def decorator(self, portal_type):\n         """lookup fti from portal_type and cache\n+\n+        input can be either a portal_type as string or as the utility instance.\n+        return value is always a FTI-ultiliy or None\n         """\n-        if portal_type is not None:\n-            if IDexterityFTI.providedBy(portal_type):\n-                fti = portal_type\n+        # this function is called very often\n+\n+        # shortcut None input\n+        if portal_type is None:\n+            return func(self, None)\n+        # if its a string lookup fti\n+        if isinstance(portal_type, six.string_types):\n+            # looking up a utility is expensive, using the global request as\n+            # cache is twice as fast\n+            request = getRequest()\n+            if request:\n+                fti_cache = getattr(request, FTI_CACHE_KEY, None)\n+                if fti_cache is None:\n+                    fti_cache = dict()\n+                    setattr(request, FTI_CACHE_KEY, dict())\n+                if portal_type in fti_cache:\n+                    fti = fti_cache[portal_type]\n+                else:\n+                    fti_cache[portal_type] = fti = queryUtility(\n+                        IDexterityFTI,\n+                        name=portal_type\n+                    )\n             else:\n                 fti = queryUtility(IDexterityFTI, name=portal_type)\n+            if fti is None:\n+                return func(self, None)\n+        elif IDexterityFTI.providedBy(portal_type):\n+            # its already an IDexterityFTI instance\n+            fti = portal_type\n         else:\n-            fti = None\n-        if fti is not None and self.cache_enabled:\n+            raise ValueError(\n+                \'portal_type has to either string or IDexterityFTI instance but is \'\n+                \'{0!r}\'.format(portal_type)\n+            )\n+        if self.cache_enabled:\n             key = \'_v_schema_%s\' % func.__name__\n             cache = getattr(fti, key, _MARKER)\n             if cache is not _MARKER:\n@@ -69,7 +103,7 @@ def decorator(self, portal_type):\n \n         value = func(self, fti)\n \n-        if fti is not None and self.cache_enabled:\n+        if self.cache_enabled:\n             setattr(fti, key, (fti._p_mtime, value))\n \n         return value\n@@ -132,15 +166,16 @@ def behavior_registrations(self, fti):\n         if fti is None:\n             return tuple()\n         registrations = []\n-        for behavior_name in fti.behaviors:\n+        for behavior_name in filter(None, fti.behaviors):\n             registration = queryUtility(IBehavior, name=behavior_name)\n             if registration is None:\n                 # BBB - this case should be deprecated in v 3.0\n                 warnings.warn(\n-                    \'No behavior registration found for behavior named: "{0}"\'\n+                    \'No behavior registration found for behavior named "{0}"\'\n+                    \' for factory "{1}"\'\n                     \' - trying deprecated fallback lookup (will be removed \'\n                     \'in 3.0)..."\'.format(\n-                        behavior_name\n+                        behavior_name, fti.getId()\n                     ),\n                     DeprecationWarning,\n                 )\n@@ -148,8 +183,8 @@ def behavior_registrations(self, fti):\n                     schema_interface = resolve(behavior_name)\n                 except (ValueError, ImportError):\n                     log.error(\n-                        "Error resolving behavior {0}".format(\n-                            behavior_name\n+                        "Error resolving behavior {0} for factory {1}".format(\n+                            behavior_name, fti.getId()\n                         )\n                     )\n                     continue\n@@ -218,6 +253,10 @@ def schema_interfaces(self, fti):\n     def clear(self):\n         for fti in getAllUtilitiesRegisteredFor(IDexterityFTI):\n             self.invalidate(fti)\n+        request = getRequest()\n+        fti_cache = getattr(request, FTI_CACHE_KEY, None)\n+        if fti_cache is not None:\n+            delattr(request, FTI_CACHE_KEY)\n \n     @synchronized(lock)\n     def invalidate(self, fti):\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 0d9e0b4..bc0c751 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -454,7 +454,7 @@ def test_components_registered_on_add(self):\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEquals(\n+        self.assertNotEqual(\n             None,\n             queryUtility(IDexterityFTI, name=portal_type)\n         )\n@@ -618,7 +618,7 @@ def test_components_reregistered_on_rename(self):\n         )\n \n         # Then look for re-registration of global components\n-        self.assertEquals(site_manager_mock.registerUtility.call_count, 2)\n+        self.assertEqual(site_manager_mock.registerUtility.call_count, 2)\n \n         site_dummy = self.create_dummy(\n             getSiteManager=lambda: site_manager_mock\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 5429b31..9d901e3 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,12 +1,14 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n from mock import Mock\n+from mock import patch\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from zope.interface import Interface\n \n import unittest\n+import warnings\n \n \n class TestSchemaCache(MockTestCase):\n@@ -57,6 +59,25 @@ class ITestBehavior(Interface):\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n+    def test_unexistent_behaviors_lookup(self):\n+        fti = DexterityFTI(u"testtype")\n+        self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n+        # Set an unregistered behavior\n+        fti.behaviors = ["foo.bar"]\n+\n+        with patch("warnings.warn") as mock_warnings:\n+            warning_list = [call[1][0] for call in mock_warnings.mock_calls]\n+            SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n+            # Verify the warning has been issued\n+            self.assertEqual(\n+                mock_warnings.mock_calls[-1].args[0],\n+                (\n+                    \'No behavior registration found for behavior named \'\n+                    \'"foo.bar" for factory "testtype" - trying deprecated \'\n+                    \'fallback lookup (will be removed in 3.0)..."\'\n+                )\n+            )\n+\n     def test_repeated_subtypes_lookup(self):\n \n         fti = DexterityFTI(u"testtype")\ndiff --git a/setup.py b/setup.py\nindex 7df6a86..0147964 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.9.2.dev0\'\n+version = \'2.9.3.dev0\'\n \n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n@@ -19,6 +19,7 @@\n     # Get more strings from\n     # https://pypi.org/classifiers/\n     classifiers=[\n+        "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n@@ -62,6 +63,7 @@\n         \'zope.component\',\n         \'zope.container\',\n         \'zope.dottedname\',\n+        \'zope.globalrequest\',\n         \'zope.filerepresentation>=3.6.0\',\n         \'zope.interface\',\n         \'zope.lifecycleevent\',\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-12-10T17:31:46+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/e6bd7fe602efb6b3ef1f3c49ce7e22ac2f08f2b6

maybe you're gonna be that one that

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex f9286d8..a5dc04c 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -766,35 +766,37 @@ def __init__(self, id=None, **kwargs):\n         CMFOrderedBTreeFolderBase.__init__(self, id)\n         DexterityContent.__init__(self, id, **kwargs)\n \n-    def __getattr__(self, name):\n-        try:\n-            return DexterityContent.__getattr__(self, name)\n-        except AttributeError:\n-            pass\n-\n-        # Be specific about the implementation we use\n-        return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n-\n-    def __delattr__(self, name):\n-        try:\n-            super(Container, self).__delattr__(name)\n-        except AttributeError:  # delete the item instead\n-            del self[name]\n-\n-    def __setattr__(self, name, value):\n-        # If we have an existing attribute, just set it.\n-        # We'll check this first, so we don't check the tree unneeded.\n-        if name in self.__dict__:\n-            super(Container, self).__setattr__(name, value)\n-\n-        # if we have a n item, set that\n-        elif '_tree' in self.__dict__ and name in self:\n-            del self[name]\n-            self[name] = value\n-\n-        # else we'll set an attribute.\n-        else:\n-            super(Container, self).__setattr__(name, value)\n+    # def __getattr__(self, name):\n+    #     # if name[0] != '_':\n+    #     #     print('Container.__getattr__', self, name)\n+    #     try:\n+    #         return DexterityContent.__getattr__(self, name)\n+    #     except AttributeError:\n+    #         pass\n+\n+    #     # Be specific about the implementation we use\n+    #     return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+\n+    # def __delattr__(self, name):\n+    #     try:\n+    #         super(Container, self).__delattr__(name)\n+    #     except AttributeError:  # delete the item instead\n+    #         del self[name]\n+\n+    # def __setattr__(self, name, value):\n+    #     # If we have an existing attribute, just set it.\n+    #     # We'll check this first, so we don't check the tree unneeded.\n+    #     if name in self.__dict__:\n+    #         super(Container, self).__setattr__(name, value)\n+\n+    #     # if we have a n item, set that\n+    #     elif '_tree' in self.__dict__ and name in self:\n+    #         del self[name]\n+    #         self[name] = value\n+\n+    #     # else we'll set an attribute.\n+    #     else:\n+    #         super(Container, self).__setattr__(name, value)\n \n     def _delObject(self, name, *args, **kwargs):\n         super(Container, self)._delObject(name, *args, **kwargs)\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-12-11T12:47:02+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/9d40507e3c6d3568ed4a33cb73eec64e64a29c8f

i won't know

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex a5dc04c..bd17529 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -766,22 +766,20 @@ def __init__(self, id=None, **kwargs):\n         CMFOrderedBTreeFolderBase.__init__(self, id)\n         DexterityContent.__init__(self, id, **kwargs)\n \n-    # def __getattr__(self, name):\n-    #     # if name[0] != '_':\n-    #     #     print('Container.__getattr__', self, name)\n-    #     try:\n-    #         return DexterityContent.__getattr__(self, name)\n-    #     except AttributeError:\n-    #         pass\n-\n-    #     # Be specific about the implementation we use\n-    #     return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n-\n-    # def __delattr__(self, name):\n-    #     try:\n-    #         super(Container, self).__delattr__(name)\n-    #     except AttributeError:  # delete the item instead\n-    #         del self[name]\n+    def __getattr__(self, name):\n+        try:\n+            return DexterityContent.__getattr__(self, name)\n+        except AttributeError:\n+            pass\n+\n+        # Be specific about the implementation we use\n+        return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+\n+    def __delattr__(self, name):\n+        try:\n+            super(Container, self).__delattr__(name)\n+        except AttributeError:  # delete the item instead\n+            del self[name]\n \n     # def __setattr__(self, name, value):\n     #     # If we have an existing attribute, just set it.\n@@ -798,6 +796,16 @@ def __init__(self, id=None, **kwargs):\n     #     else:\n     #         super(Container, self).__setattr__(name, value)\n \n+    # def __setattr__(self, name, value):\n+    #     # if we have an item, set that\n+    #     if '_tree' in self.__dict__ and name in self:\n+    #                 # If an object by the given id already exists, remove it.\n+    #         self._delObject(name)\n+    #         self._setObject(name, value)\n+    #     # else we'll set an attribute.\n+    #     else:\n+    #         super(Container, self).__setattr__(name, value)\n+\n     def _delObject(self, name, *args, **kwargs):\n         super(Container, self)._delObject(name, *args, **kwargs)\n \n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-12-30T19:51:46+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/bc1f10768cdf18d5cb662096408f8f5658c6ae0b

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
M CHANGES.rst
M plone/dexterity/content.py
M plone/dexterity/schema.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 1848d47..c29f186 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,33 @@ Changelog\n \n .. towncrier release notes start\n \n+2.9.5 (2019-12-30)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Speedup (~1.6x) parallel thread execution by removing superfluos synchronization [jensens] (#123)\n+\n+\n+2.9.4 (2019-12-26)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Invalidate cached FTIs on request to allow complex/long running auto-installations. [jensens]\n+\n+\n+2.9.3 (2019-12-23)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fix thread safe recursion detection. This fixes an issue in plone.restapi: https://github.com/plone/plone.dexterity/issues/120. [jensens] (#120)\n+\n+\n 2.9.2 (2019-10-12)\n ------------------\n \ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex bd17529..84b77b3 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -51,10 +51,12 @@\n \n import six\n import warnings\n+import threading\n \n \n _marker = object()\n _zone = DateTime().timezone()\n+_recursion_detection = threading.local()\n FLOOR_DATE = DateTime(1970, 0)  # always effective\n CEILING_DATE = DateTime(2500, 0)  # never expires\n \n@@ -129,13 +131,12 @@ def __get__(self, inst, cls=None):\n         if inst is None:\n             return getObjectSpecification(cls)\n \n-        direct_spec = getattr(inst, \'__provides__\', None)\n+        # get direct specification\n+        spec = getattr(inst, \'__provides__\', None)\n \n         # avoid recursion - fall back on default\n-        if getattr(self, \'__recursion__\', False):\n-            return direct_spec\n-\n-        spec = direct_spec\n+        if getattr(_recursion_detection, \'blocked\', False):\n+            return spec\n \n         # If the instance doesn\'t have a __provides__ attribute, get the\n         # interfaces implied by the class as a starting point.\n@@ -162,7 +163,7 @@ def __get__(self, inst, cls=None):\n             inst._p_mtime,\n             SCHEMA_CACHE.modified(portal_type),\n             SCHEMA_CACHE.invalidations,\n-            hash(direct_spec)\n+            hash(spec)\n         )\n         if cache is not None and cache[:-1] == updated:\n             if cache[-1] is not None:\n@@ -176,7 +177,7 @@ def __get__(self, inst, cls=None):\n             dynamically_provided = []\n \n         # block recursion\n-        self.__recursion__ = True\n+        setattr(_recursion_detection, \'blocked\', True)\n         try:\n             assignable = get_assignable(inst)\n             if assignable is not None:\n@@ -186,7 +187,7 @@ def __get__(self, inst, cls=None):\n                             behavior_registration.marker\n                         )\n         finally:\n-            del self.__recursion__\n+            setattr(_recursion_detection, \'blocked\', False)\n \n         if not dynamically_provided:\n             # rare case if no schema nor behaviors with markers are set\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex b64f9ac..41a246b 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -49,31 +49,23 @@ def invalidate_cache(fti):\n     fti.__dict__.pop(\'_v_schema_schema_interfaces\', None)\n     fti.__dict__.pop(\'_v_schema_modified\', None)\n     fti.__dict__.pop(\'_v_schema_behavior_schema_interfaces\', None)\n+    request = getRequest()\n+    if request:\n+        setattr(request, FTI_CACHE_KEY, None)\n \n \n-def volatile(func):\n-    @functools.wraps(func)\n-    def decorator(self, portal_type):\n-        """lookup fti from portal_type and cache\n-\n-        input can be either a portal_type as string or as the utility instance.\n-        return value is always a FTI-ultiliy or None\n-        """\n-        # this function is called very often\n-\n-        # shortcut None input\n-        if portal_type is None:\n-            return func(self, None)\n-        # if its a string lookup fti\n-        if isinstance(portal_type, six.string_types):\n-            # looking up a utility is expensive, using the global request as\n-            # cache is twice as fast\n+def lookup_fti(portal_type, cache=True):\n+    # if its a string lookup fti\n+    if isinstance(portal_type, six.string_types):\n+        # looking up a utility is expensive, using the global request as\n+        # cache is twice as fast\n+        if cache:\n             request = getRequest()\n             if request:\n                 fti_cache = getattr(request, FTI_CACHE_KEY, None)\n                 if fti_cache is None:\n                     fti_cache = dict()\n-                    setattr(request, FTI_CACHE_KEY, dict())\n+                    setattr(request, FTI_CACHE_KEY, fti_cache)\n                 if portal_type in fti_cache:\n                     fti = fti_cache[portal_type]\n                 else:\n@@ -81,18 +73,33 @@ def decorator(self, portal_type):\n                         IDexterityFTI,\n                         name=portal_type\n                     )\n-            else:\n-                fti = queryUtility(IDexterityFTI, name=portal_type)\n-            if fti is None:\n-                return func(self, None)\n-        elif IDexterityFTI.providedBy(portal_type):\n-            # its already an IDexterityFTI instance\n-            fti = portal_type\n-        else:\n-            raise ValueError(\n-                \'portal_type has to either string or IDexterityFTI instance but is \'\n-                \'{0!r}\'.format(portal_type)\n-            )\n+                return fti\n+        return queryUtility(IDexterityFTI, name=portal_type)\n+    if IDexterityFTI.providedBy(portal_type):\n+        # its already an IDexterityFTI instance\n+        return portal_type\n+    raise ValueError(\n+        \'portal_type has to either string or IDexterityFTI instance but is \'\n+        \'{0!r}\'.format(portal_type)\n+    )\n+\n+\n+\n+def volatile(func):\n+    @functools.wraps(func)\n+    def decorator(self, portal_type):\n+        """lookup fti from portal_type and cache\n+\n+        input can be either a portal_type as string or as the utility instance.\n+        return value is always a FTI-ultiliy or None\n+        """\n+        # this function is called very often!\n+        # shortcut None input\n+        if portal_type is None:\n+            return func(self, None)\n+        fti = lookup_fti(portal_type, cache=self.cache_enabled)\n+        if fti is None:\n+            return func(self, None)\n         if self.cache_enabled:\n             key = \'_v_schema_%s\' % func.__name__\n             cache = getattr(fti, key, _MARKER)\n@@ -139,7 +146,6 @@ def __init__(self, cache_enabled=True):\n         self.cache_enabled = cache_enabled\n         self.invalidations = 0\n \n-    @synchronized(lock)\n     @volatile\n     def get(self, fti):\n         """main schema\n@@ -153,7 +159,6 @@ def get(self, fti):\n             except (AttributeError, ValueError):\n                 pass\n \n-    @synchronized(lock)\n     @volatile\n     def behavior_registrations(self, fti):\n         """all behavior behavior registrations of a given fti passed in as\n@@ -198,7 +203,6 @@ def behavior_registrations(self, fti):\n             registrations.append(registration)\n         return tuple(registrations)\n \n-    @synchronized(lock)\n     @volatile\n     def subtypes(self, fti):\n         """all registered marker interfaces of ftis behaviors\n@@ -214,7 +218,6 @@ def subtypes(self, fti):\n                 subtypes.append(behavior_registration.marker)\n         return tuple(subtypes)\n \n-    @synchronized(lock)\n     @volatile\n     def behavior_schema_interfaces(self, fti):\n         """behavior schema interfaces registered for the fti\n@@ -230,7 +233,6 @@ def behavior_schema_interfaces(self, fti):\n                 schemas.append(behavior_registration.interface)\n         return tuple(schemas)\n \n-    @synchronized(lock)\n     @volatile\n     def schema_interfaces(self, fti):\n         """all schema interfaces registered for the fti\n@@ -267,7 +269,6 @@ def invalidate(self, fti):\n             invalidate_cache(fti)\n             self.invalidations += 1\n \n-    @synchronized(lock)\n     @volatile\n     def modified(self, fti):\n         if fti:\ndiff --git a/setup.py b/setup.py\nindex 0147964..c1039ec 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.9.3.dev0\'\n+version = \'2.9.6.dev0\'\n \n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-12-30T22:53:05+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/c23174c2788883dcd71f1ad685074cc61541b11e

don't think we need this

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 84b77b3..1c27112 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -776,48 +776,6 @@ def __getattr__(self, name):\n         # Be specific about the implementation we use\n         return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n \n-    def __delattr__(self, name):\n-        try:\n-            super(Container, self).__delattr__(name)\n-        except AttributeError:  # delete the item instead\n-            del self[name]\n-\n-    # def __setattr__(self, name, value):\n-    #     # If we have an existing attribute, just set it.\n-    #     # We\'ll check this first, so we don\'t check the tree unneeded.\n-    #     if name in self.__dict__:\n-    #         super(Container, self).__setattr__(name, value)\n-\n-    #     # if we have a n item, set that\n-    #     elif \'_tree\' in self.__dict__ and name in self:\n-    #         del self[name]\n-    #         self[name] = value\n-\n-    #     # else we\'ll set an attribute.\n-    #     else:\n-    #         super(Container, self).__setattr__(name, value)\n-\n-    # def __setattr__(self, name, value):\n-    #     # if we have an item, set that\n-    #     if \'_tree\' in self.__dict__ and name in self:\n-    #                 # If an object by the given id already exists, remove it.\n-    #         self._delObject(name)\n-    #         self._setObject(name, value)\n-    #     # else we\'ll set an attribute.\n-    #     else:\n-    #         super(Container, self).__setattr__(name, value)\n-\n-    def _delObject(self, name, *args, **kwargs):\n-        super(Container, self)._delObject(name, *args, **kwargs)\n-\n-        # This will trigger when an item was deleted from this container and\n-        # attribute by the same name exists. ie obj[\'my_id\'] and obj.my_id.\n-        if name in aq_base(self).__dict__:\n-            msg = (\n-                "Item \'{}\' contained in {} was shadowed by an attribute."\n-                "You might want to delete the attribute as well."\n-            ).format(name, self)\n-            warnings.warn(msg)\n \n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2019-12-30T22:56:43+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/ef2e534aee67f46b41f2a93f27fbfd82913aa5d2

Special case for Plone Site in lookup_fti

Files changed:
M plone/dexterity/schema.py

b"diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 41a246b..4fad1d5 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -66,9 +66,19 @@ def lookup_fti(portal_type, cache=True):\n                 if fti_cache is None:\n                     fti_cache = dict()\n                     setattr(request, FTI_CACHE_KEY, fti_cache)\n-                if portal_type in fti_cache:\n-                    fti = fti_cache[portal_type]\n-                else:\n+                fti = fti_cache.get(portal_type)\n+                if fti is not None:\n+                    # The first time we get the Plone Site FTI it doesn't know\n+                    # everything by the looks of it. Maybe because of behavior registration\n+                    # or something like that. *hrugs*\n+                    if portal_type == 'Plone Site':\n+                        if not getattr(request, '_dx_FTI_CACHE_seen_plonesite_fti', False):\n+                            del fti_cache[portal_type]\n+                            fti = None\n+                        else:\n+                            request._dx_FTI_CACHE_seen_plonesite_fti = True\n+\n+                if fti is None:\n                     fti_cache[portal_type] = fti = queryUtility(\n                         IDexterityFTI,\n                         name=portal_type\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-02-24T20:55:19+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/f694a51da82ac697418e50f33b8837934521ce9e

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
M .travis.yml
M buildout.cfg
M plone/dexterity/tests/test_fti.py
M setup.py
D plone/dexterity/CONVENTIONS.txt

b'diff --git a/.travis.yml b/.travis.yml\nindex 0502b44..e7c5028 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -8,17 +8,15 @@ cache:\n     - eggs\n matrix:\n   include:\n-    - env: PLONE_VERSION=5.0\n-      python: "2.7"\n-    - env: PLONE_VERSION=5.1\n-      python: "2.7"\n     - env: PLONE_VERSION=5.2\n       python: "2.7"\n+    - env: PLONE_VERSION=5.2\n+      python: "3.6"\n     - env: PLONE_VERSION=5.2\n       python: "3.7"\n   fast_finish: true\n install:\n-  - sed -ie "s#test-5.0#test-$PLONE_VERSION#" buildout.cfg\n+  - sed -ie "s#test-5.2#test-$PLONE_VERSION#" buildout.cfg\n   - pip install -r https://dist.plone.org/release/$PLONE_VERSION-latest/requirements.txt\n   - buildout annotate\n   - buildout -Nv install test\ndiff --git a/buildout.cfg b/buildout.cfg\nindex 69cb9d1..a903152 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -1,5 +1,11 @@\n [buildout]\n-extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.0.x.cfg\n+extends = https://raw.githubusercontent.com/collective/buildout.plonetest/master/test-5.2.x.cfg\n package-name = plone.dexterity\n package-extras = [test]\n test-eggs =\n+\n+develop = .\n+\n+[versions]\n+plone.dexterity =\n+zope.interface = 4.7.1\n\\ No newline at end of file\ndiff --git a/plone/dexterity/CONVENTIONS.txt b/plone/dexterity/CONVENTIONS.txt\ndeleted file mode 100644\nindex 71b9f3c..0000000\n--- a/plone/dexterity/CONVENTIONS.txt\n+++ /dev/null\n@@ -1,7 +0,0 @@\n-Dexterity coding conventions\n-============================\n-\n-Follow the `plone.api code conventions\n-<http://docs.plone.org/external/plone.api/docs/contribute/conventions.html>_\n-\n-Dont use grok.\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex bc0c751..aa302c8 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -2,6 +2,7 @@\n from .case import MockTestCase\n from mock import Mock\n from plone.dexterity import utils\n+from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.fti import DexterityFTIModificationDescription\n@@ -73,7 +74,7 @@ def test_lookupSchema_with_dynamic_schema(self):\n         portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n         self.mock_utility(portal, ISiteRoot)\n \n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n \n         self.assertEqual(ITestSchema, fti.lookupSchema())\n@@ -89,7 +90,7 @@ def test_lookupSchema_with_nonexistant_schema(self):\n         fti.schema = \'model.wont.be.imported\'\n         portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n         self.mock_utility(portal, ISiteRoot)\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n         self.assertEqual(ITestSchema, fti.lookupSchema())\n         delattr(plone.dexterity.schema.generated, schemaName)\n@@ -458,7 +459,7 @@ def test_components_registered_on_add(self):\n             None,\n             queryUtility(IDexterityFTI, name=portal_type)\n         )\n-        self.assertNotEquals(None, queryUtility(IFactory, name=portal_type))\n+        self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_not_registered_on_add_if_exist(self):\n         portal_type = u"testtype"\n@@ -653,7 +654,7 @@ class IBlank(Interface):\n             pass\n \n         # Set source interface\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n \n         # Sync this with schema\n@@ -689,7 +690,7 @@ class IBlank(Interface):\n             pass\n \n         # Set source interface\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n \n         # Sync this with schema\n@@ -732,7 +733,7 @@ def bases(self, schemaName, tree):\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # Set source interface\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n         original = getattr(plone.dexterity.schema.generated, schemaName)\n         self.assertNotIn(INew, original.__bases__)\n@@ -776,7 +777,7 @@ class INew(Interface):\n         assert not fti.hasDynamicSchema\n \n         # Set source for dynamic FTI - should not be used\n-        schemaName = utils.portalTypeToSchemaName(fti.getId())\n+        schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n \n         # Sync should not happen now\ndiff --git a/setup.py b/setup.py\nindex c1039ec..34a251b 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -39,8 +39,6 @@\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        # \'Acquisition\',\n-        # \'AccessControl\',\n         \'DateTime>=4.0.1\',\n         \'plone.alterego\',\n         \'plone.autoform>=1.0b2\',\n@@ -57,7 +55,6 @@\n         \'Products.statusmessages\',\n         \'setuptools\',\n         \'six\',\n-        \'ZODB3\',\n         \'zope.annotation\',\n         \'zope.browser\',\n         \'zope.component\',\n@@ -72,7 +69,7 @@\n         \'zope.schema\',\n         \'zope.security\',\n         \'zope.size\',\n-        \'Zope2\',\n+        \'Zope\',\n     ],\n     extras_require={\n         \'test\': [\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-03-29T21:59:35+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/6804318564ea4b0574eec4b1e387e123b7113224

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
M CHANGES.rst
M plone/dexterity/tests/test_webdav.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c29f186..386a336 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,17 @@ Changelog\n \n .. towncrier release notes start\n \n+2.9.6 (2020-03-13)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fixed package install error with Python 3.6 without system locale.\n+  See `coredev issue 642 <https://github.com/plone/buildout.coredev/issues/642#issuecomment-597008272>`_.\n+  [maurits] (#642)\n+\n+\n 2.9.5 (2019-12-30)\n ------------------\n \ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 8ec082c..96d4c12 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -36,6 +36,7 @@\n     from zope.filerepresentation.interfaces import IFileFactory\n     from zope.filerepresentation.interfaces import IRawReadFile\n     from zope.filerepresentation.interfaces import IRawWriteFile\n+    from zope.interface import provider\n     from zope.interface import alsoProvides\n     from zope.interface import implementer\n     from zope.interface import Interface\n@@ -48,10 +49,10 @@\n     import re\n \n \n+    @provider(IFormFieldProvider)\n     class ITestBehavior(Interface):\n         foo = schema.Int()\n         bar = schema.Bytes()\n-    alsoProvides(ITestBehavior, IFormFieldProvider)\n \n \n     class DAVTestRequest(TestRequest):\n@@ -456,10 +457,6 @@ def content_type(self):\n \n             self.assertEqual(response, r.HEAD(request, request.response))\n             self.assertEqual(200, response.getStatus())\n-            self.assertEqual(\n-                \'close\',\n-                response.getHeader(\'Connection\', literal=True)\n-            )\n             self.assertTrue(\n                 response.getHeader(\'Content-Type\').startswith(\'text/foo\'))\n             self.assertEqual(\'10\', response.getHeader(\'Content-Length\'))\n@@ -482,10 +479,6 @@ def content_type(self):\n             response = request.response\n \n             self.assertEqual(response, r.OPTIONS(request, request.response))\n-            self.assertEqual(\n-                \'close\',\n-                response.getHeader(\'Connection\', literal=True)\n-            )\n             self.assertEqual(\n                 \'GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, \'\n                 \'PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK\',\n@@ -529,11 +522,6 @@ def content_type(self):\n             response = request.response\n \n             self.assertEqual(response, r.PROPFIND(request, response))\n-\n-            self.assertEqual(\n-                \'close\',\n-                response.getHeader(\'connection\', literal=True)\n-            )\n             self.assertEqual(\n                 \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n             )\n@@ -621,9 +609,6 @@ def content_type(self):\n \n             self.assertEqual(\'New title\', container.getProperty(\'title\'))\n \n-            self.assertEqual(\n-                \'close\', response.getHeader(\'connection\', literal=True)\n-            )\n             self.assertEqual(\n                 \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n             )\n@@ -763,7 +748,6 @@ def manage_DAVget(self):\n \n         def test_manage_FTPget(self):\n             class TestContainer(Container):\n-\n                 def manage_FTPget(self):\n                     return \'data\'\n \ndiff --git a/setup.py b/setup.py\nindex 34a251b..c21438e 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,13 +3,28 @@\n from setuptools import setup\n \n \n-version = \'2.9.6.dev0\'\n+version = \'2.9.7.dev0\'\n+\n+\n+def read(filename):\n+    with open(filename) as myfile:\n+        try:\n+            return myfile.read()\n+        except UnicodeDecodeError:\n+            # Happens on one Jenkins node on Python 3.6,\n+            # so maybe it happens for users too.\n+            pass\n+    # Opening and reading as text failed, so retry opening as bytes.\n+    with open(filename, "rb") as myfile:\n+        contents = myfile.read()\n+        return contents.decode("utf-8")\n \n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n """\n-long_description = open("README.rst").read() + "\\n"\n-long_description += open("CHANGES.rst").read()\n+long_description = read("README.rst")\n+long_description += "\\n"\n+long_description += read("CHANGES.rst")\n \n setup(\n     name=\'plone.dexterity\',\n@@ -22,11 +37,13 @@\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n         "Programming Language :: Python :: 2.7",\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n+        "Programming Language :: Python :: 3.8",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n     keywords=\'plone dexterity contenttypes\',\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-05-27T20:14:31+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/a1b975c7b0ee5f59d3587d7dc256df934466dd26

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
M .travis.yml
M CHANGES.rst
M setup.py

b'diff --git a/.travis.yml b/.travis.yml\nindex e7c5028..8fbf226 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -14,6 +14,8 @@ matrix:\n       python: "3.6"\n     - env: PLONE_VERSION=5.2\n       python: "3.7"\n+    - env: PLONE_VERSION=5.2\n+      python: "3.8"\n   fast_finish: true\n install:\n   - sed -ie "s#test-5.2#test-$PLONE_VERSION#" buildout.cfg\ndiff --git a/CHANGES.rst b/CHANGES.rst\nindex 386a336..866c6db 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,15 @@ Changelog\n \n .. towncrier release notes start\n \n+2.9.7 (2020-04-20)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Update tests for Zope 4.2.1.  [jensens] (#421)\n+\n+\n 2.9.6 (2020-03-13)\n ------------------\n \ndiff --git a/setup.py b/setup.py\nindex c21438e..0973de8 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.9.7.dev0\'\n+version = \'2.9.8.dev0\'\n \n \n def read(filename):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-05-30T18:28:41+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/bded94333a38db3aac69b082fa33fda1bebdcd1a

We no longer seem to be needing this

Files changed:
M plone/dexterity/schema.py

b"diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 4fad1d5..657dd20 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -65,20 +65,11 @@ def lookup_fti(portal_type, cache=True):\n                 fti_cache = getattr(request, FTI_CACHE_KEY, None)\n                 if fti_cache is None:\n                     fti_cache = dict()\n+                    fti_cache['Plone Site'] = None\n                     setattr(request, FTI_CACHE_KEY, fti_cache)\n-                fti = fti_cache.get(portal_type)\n-                if fti is not None:\n-                    # The first time we get the Plone Site FTI it doesn't know\n-                    # everything by the looks of it. Maybe because of behavior registration\n-                    # or something like that. *hrugs*\n-                    if portal_type == 'Plone Site':\n-                        if not getattr(request, '_dx_FTI_CACHE_seen_plonesite_fti', False):\n-                            del fti_cache[portal_type]\n-                            fti = None\n-                        else:\n-                            request._dx_FTI_CACHE_seen_plonesite_fti = True\n-\n-                if fti is None:\n+                if portal_type in fti_cache:\n+                    fti = fti_cache[portal_type]\n+                else:\n                     fti_cache[portal_type] = fti = queryUtility(\n                         IDexterityFTI,\n                         name=portal_type\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-06-14T13:27:58+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/4c505b3652101f9c979c91d962716482ce45a55b

i'm an idiot.

'mmm why would Plone Site have no fields?'

Files changed:
M plone/dexterity/schema.py

b"diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 657dd20..53593bc 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -65,11 +65,12 @@ def lookup_fti(portal_type, cache=True):\n                 fti_cache = getattr(request, FTI_CACHE_KEY, None)\n                 if fti_cache is None:\n                     fti_cache = dict()\n-                    fti_cache['Plone Site'] = None\n                     setattr(request, FTI_CACHE_KEY, fti_cache)\n+                fti = None\n                 if portal_type in fti_cache:\n                     fti = fti_cache[portal_type]\n-                else:\n+                \n+                if fti is None:\n                     fti_cache[portal_type] = fti = queryUtility(\n                         IDexterityFTI,\n                         name=portal_type\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-07-19T12:56:32+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/8ca5a1db73aa191390fd55d1f792e3cace2e3f44

Ignore 'utilities' in DX getattr

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 1c27112..63eb07f 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -72,6 +72,7 @@\n     'portal_placeful_workflow',\n     'portal_properties',\n     'translation_service',\n+    'utilities',\n )\n \n ASSIGNABLE_CACHE_KEY = '__plone_dexterity_assignable_cache__'\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-07-19T14:11:31+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/49d33b22ccbd5fae3f9aa76e9144bd0453a4910d

Revert "Ignore 'utilities' in DX getattr"
An utilities attibute could be anything for non-site root objects

This reverts commit 8ca5a1db73aa191390fd55d1f792e3cace2e3f44.

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 63eb07f..1c27112 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -72,7 +72,6 @@\n     'portal_placeful_workflow',\n     'portal_properties',\n     'translation_service',\n-    'utilities',\n )\n \n ASSIGNABLE_CACHE_KEY = '__plone_dexterity_assignable_cache__'\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-08-22T21:52:36+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/617111d28237322c363f46a58ad13b375133f36f

Don't allow shadowing items in the btree by attributes

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 1c27112..4fb45c1 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -776,6 +776,10 @@ def __getattr__(self, name):\n         # Be specific about the implementation we use\n         return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n \n+    def __setattr__(self, name, obj):\n+        if self._tree is not None and name in self:\n+            raise ValueError("Trying to set an item via attribute.")\n+        super().__setattr__(name, obj)\n \n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-08-22T22:11:12+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/66753b30bcb37e4e1b0ee58f0c2fef57df02dc5f

herf

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 4fb45c1..d8dc6c9 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -774,11 +774,15 @@ def __getattr__(self, name):\n             pass\n \n         # Be specific about the implementation we use\n-        return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+        if self._tree is not None:\n+            return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+\n+        raise AttributeError(name)\n \n     def __setattr__(self, name, obj):\n         if self._tree is not None and name in self:\n-            raise ValueError("Trying to set an item via attribute.")\n+            del self[name]\n+            self[name] = obj\n         super().__setattr__(name, obj)\n \n     @security.protected(permissions.DeleteObjects)\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-09-26T17:55:08+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/ce62eaaac4f059826ce25e60680986218c8d70d3

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
A news/3177.bugfix
A news/680.bugfix
M buildout.cfg
M plone/dexterity/browser/configure.zcml
M plone/dexterity/browser/containercontentcore.pt
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_views.py

b'diff --git a/buildout.cfg b/buildout.cfg\nindex a903152..7046f06 100644\n--- a/buildout.cfg\n+++ b/buildout.cfg\n@@ -8,4 +8,3 @@ develop = .\n \n [versions]\n plone.dexterity =\n-zope.interface = 4.7.1\n\\ No newline at end of file\ndiff --git a/news/3177.bugfix b/news/3177.bugfix\nnew file mode 100644\nindex 0000000..23c090e\n--- /dev/null\n+++ b/news/3177.bugfix\n@@ -0,0 +1,4 @@\n+Removed call of listing macro in ``content-core`` view for containers.\n+It was broken.  We now show the same as for items: only the fields.\n+Fixes `issue 3177 <https://github.com/plone/Products.CMFPlone/issues/3177>`_.\n+[maurits]\ndiff --git a/news/680.bugfix b/news/680.bugfix\nnew file mode 100644\nindex 0000000..cd7bb0d\n--- /dev/null\n+++ b/news/680.bugfix\n@@ -0,0 +1,2 @@\n+Fixed missing ISiteRoot utility when running tests with Zope 5.\n+[maurits]\ndiff --git a/plone/dexterity/browser/configure.zcml b/plone/dexterity/browser/configure.zcml\nindex 393dcbd..b33c275 100644\n--- a/plone/dexterity/browser/configure.zcml\n+++ b/plone/dexterity/browser/configure.zcml\n@@ -13,7 +13,10 @@\n         />\n \n     <!-- Content core views -->\n-\n+    <!-- Note: the templaces are the same since the changes for\n+         https://github.com/plone/Products.CMFPlone/issues/3177\n+         That may be okay: makes it easier to customize\n+         only the template for items or for containers. -->\n     <browser:page\n         for="..interfaces.IDexterityItem"\n         name="content-core"\ndiff --git a/plone/dexterity/browser/containercontentcore.pt b/plone/dexterity/browser/containercontentcore.pt\nindex f95d8e8..2e07bdf 100644\n--- a/plone/dexterity/browser/containercontentcore.pt\n+++ b/plone/dexterity/browser/containercontentcore.pt\n@@ -18,11 +18,4 @@\n       </div>\n   </fieldset>\n \n-  <fieldset id="folder-listing">\n-      <legend>Contents</legend>\n-      <tal:block define="listing_macro context/folder_listing/macros/listing">\n-          <metal:use_macro use-macro="listing_macro" />\n-      </tal:block>\n-  </fieldset>\n-\n </metal:content-core>\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex aa302c8..b70fd68 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -577,11 +577,11 @@ def test_global_components_not_unregistered_on_delete(self):\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEquals(\n+        self.assertNotEqual(\n             None,\n             queryUtility(IDexterityFTI, name=portal_type)\n         )\n-        self.assertNotEquals(None, queryUtility(IFactory, name=portal_type))\n+        self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_reregistered_on_rename(self):\n         portal_type = u"testtype"\n@@ -627,11 +627,11 @@ def test_components_reregistered_on_rename(self):\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEquals(\n+        self.assertNotEqual(\n             None,\n             queryUtility(IDexterityFTI, name=portal_type)\n         )\n-        self.assertNotEquals(None, queryUtility(IFactory, name=portal_type))\n+        self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_dynamic_schema_refreshed_on_modify_model_file(self):\n         portal_type = u"testtype"\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex 852c437..bb7e550 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -20,6 +20,7 @@\n from plone.dexterity.interfaces import IEditFinishedEvent\n from plone.dexterity.schema import SCHEMA_CACHE\n from plone.z3cform.interfaces import IDeferSecurityCheck\n+from Products.CMFCore.interfaces import ISiteRoot\n from Products.statusmessages.interfaces import IStatusMessage\n from z3c.form.action import Actions\n from z3c.form.datamanager import AttributeField\n@@ -126,6 +127,9 @@ class ISchema(Interface):\n \n         provideAdapter(AttributeField)\n \n+        portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n+        self.mock_utility(portal, ISiteRoot)\n+\n         self.assertEqual(obj_dummy, form.create(data_dummy))\n         self.assertEqual("testtype", obj_dummy.portal_type)\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-09-26T18:28:39+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/ed3db7ee4bdb21f1b07d1cfa16be9e91117ec66a

make py2 tests happy

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex d8dc6c9..4fe6567 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -781,9 +781,10 @@ def __getattr__(self, name):\n \n     def __setattr__(self, name, obj):\n         if self._tree is not None and name in self:\n+            # We're trying to set an item via dotted name...\n             del self[name]\n             self[name] = obj\n-        super().__setattr__(name, obj)\n+        super(Container, self).__setattr__(name, obj)\n \n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-10-04T15:00:13+02:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/e23b2d222067a7f8ca05672357c3960f0c6922be

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
A news/135.bugfix
M CHANGES.rst
M plone/dexterity/tests/test_fti.py
M setup.py
D news/3177.bugfix
D news/680.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 866c6db..c616f36 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,20 @@ Changelog\n \n .. towncrier release notes start\n \n+2.9.8 (2020-09-28)\n+------------------\n+\n+Bug fixes:\n+\n+\n+- Fixed missing ISiteRoot utility when running tests with Zope 5.\n+  [maurits] (#680)\n+- Removed call of listing macro in ``content-core`` view for containers.\n+  It was broken.  We now show the same as for items: only the fields.\n+  Fixes `issue 3177 <https://github.com/plone/Products.CMFPlone/issues/3177>`_.\n+  [maurits] (#3177)\n+\n+\n 2.9.7 (2020-04-20)\n ------------------\n \ndiff --git a/news/135.bugfix b/news/135.bugfix\nnew file mode 100644\nindex 0000000..adee593\n--- /dev/null\n+++ b/news/135.bugfix\n@@ -0,0 +1,5 @@\n+Fixes test to work clean with zope.interface.\n+Interfaces are hashed based on just their name and module. \n+So every one of these local `IBlank` interfaces will hash the same way, and be treated the same for purposes of zope.interface\'s `_dependents`.\n+Thus in tests mock interfaces must not be used under the same name in the same module.\n+[jensens]\ndiff --git a/news/3177.bugfix b/news/3177.bugfix\ndeleted file mode 100644\nindex 23c090e..0000000\n--- a/news/3177.bugfix\n+++ /dev/null\n@@ -1,4 +0,0 @@\n-Removed call of listing macro in ``content-core`` view for containers.\n-It was broken.  We now show the same as for items: only the fields.\n-Fixes `issue 3177 <https://github.com/plone/Products.CMFPlone/issues/3177>`_.\n-[maurits]\ndiff --git a/news/680.bugfix b/news/680.bugfix\ndeleted file mode 100644\nindex cd7bb0d..0000000\n--- a/news/680.bugfix\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-Fixed missing ISiteRoot utility when running tests with Zope 5.\n-[maurits]\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex b70fd68..506af26 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -650,12 +650,12 @@ class INew(Interface):\n         )\n         self.mock_utility(site_dummy, ISiteRoot)\n \n-        class IBlank(Interface):\n+        class IBlank1(Interface):\n             pass\n \n         # Set source interface\n         schemaName = portalTypeToSchemaName(fti.getId())\n-        setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n+        setattr(plone.dexterity.schema.generated, schemaName, IBlank1)\n \n         # Sync this with schema\n         ftiModified(\n@@ -666,8 +666,8 @@ class IBlank(Interface):\n             )\n         )\n \n-        self.assertTrue(\'title\' in IBlank)\n-        self.assertTrue(IBlank[\'title\'].title == u"title")\n+        self.assertTrue(\'title\' in IBlank1)\n+        self.assertTrue(IBlank1[\'title\'].title == u"title")\n \n     def test_dynamic_schema_refreshed_on_modify_model_source(self):\n         portal_type = u"testtype"\n@@ -686,12 +686,15 @@ class INew(Interface):\n         )\n         self.mock_utility(site_dummy, ISiteRoot)\n \n-        class IBlank(Interface):\n+        # b/c of zope.interface does not support hashing of the same class multiple times\n+        # we need to postfix with a unique number\n+        # see https://github.com/zopefoundation/zope.interface/issues/216#issuecomment-701332380\n+        class IBlank2(Interface):\n             pass\n \n         # Set source interface\n         schemaName = portalTypeToSchemaName(fti.getId())\n-        setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n+        setattr(plone.dexterity.schema.generated, schemaName, IBlank2)\n \n         # Sync this with schema\n         ftiModified(\n@@ -702,8 +705,8 @@ class IBlank(Interface):\n             )\n         )\n \n-        self.assertTrue(\'title\' in IBlank)\n-        self.assertTrue(IBlank[\'title\'].title == u"title")\n+        self.assertTrue(\'title\' in IBlank2)\n+        self.assertTrue(IBlank2[\'title\'].title == u"title")\n \n     def test_dynamic_schema_refreshed_on_modify_schema_policy(self):\n         portal_type = u"testtype"\n@@ -712,7 +715,7 @@ def test_dynamic_schema_refreshed_on_modify_schema_policy(self):\n         class INew(Interface):\n             title = zope.schema.TextLine(title=u"title")\n \n-        class IBlank(Interface):\n+        class IBlank3(Interface):\n             pass\n \n         class TestSchemaPolicy(DexteritySchemaPolicy):\n@@ -734,7 +737,7 @@ def bases(self, schemaName, tree):\n \n         # Set source interface\n         schemaName = portalTypeToSchemaName(fti.getId())\n-        setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n+        setattr(plone.dexterity.schema.generated, schemaName, IBlank3)\n         original = getattr(plone.dexterity.schema.generated, schemaName)\n         self.assertNotIn(INew, original.__bases__)\n         self.assertNotIn(\'title\', original)\n@@ -758,7 +761,7 @@ def test_concrete_schema_not_refreshed_on_modify_schema(self):\n         portal_type = u"testtype"\n         fti = DexterityFTI(portal_type)\n \n-        class IBlank(Interface):\n+        class IBlank4(Interface):\n             pass\n \n         class INew(Interface):\n@@ -773,12 +776,12 @@ class INew(Interface):\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # Set schema to something so that hasDynamicSchema is false\n-        fti.schema = IBlank.__identifier__\n+        fti.schema = IBlank4.__identifier__\n         assert not fti.hasDynamicSchema\n \n         # Set source for dynamic FTI - should not be used\n         schemaName = portalTypeToSchemaName(fti.getId())\n-        setattr(plone.dexterity.schema.generated, schemaName, IBlank)\n+        setattr(plone.dexterity.schema.generated, schemaName, IBlank4)\n \n         # Sync should not happen now\n \n@@ -790,7 +793,7 @@ class INew(Interface):\n             )\n         )\n \n-        self.assertFalse(\'title\' in IBlank)\n+        self.assertFalse(\'title\' in IBlank4)\n \n     def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         portal_type = u"testtype"\ndiff --git a/setup.py b/setup.py\nindex 0973de8..f17fff7 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.9.8.dev0\'\n+version = \'2.9.9.dev0\'\n \n \n def read(filename):\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-12-09T20:09:02+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/8fd1f3746379bfb9902ae693b9046c42f6375311

Merge remote-tracking branch 'origin/master' into dxcontainer-siteroot

Files changed:
A plone/dexterity/tests/test_filerepresentation.py
M CHANGES.rst
M plone/dexterity/bbb.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/schema.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M setup.py
D news/135.bugfix

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex c616f36..9e3ea6e 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,29 @@ Changelog\n \n .. towncrier release notes start\n \n+2.10.0 (2020-10-12)\n+-------------------\n+\n+New features:\n+\n+\n+- Make sure that Dynamic schema is updated on all ZEO clients on change\n+  [@avoinea] (#136)\n+\n+\n+Bug fixes:\n+\n+\n+- Fixes test to work clean with zope.interface.\n+  Interfaces are hashed based on just their name and module. \n+  So every one of these local `IBlank` interfaces will hash the same way, and be treated the same for purposes of zope.interface\'s `_dependents`.\n+  Thus in tests mock interfaces must not be used under the same name in the same module.\n+  [jensens] (#135)\n+- Use mock from unittest on Python 3 [ale-rt]\n+  DefaultReadFile properly implements the IStreamIterator interface [ale-rt] (#138)\n+- Restore webdav support when the webdav library is importable [ale-rt] (#141)\n+\n+\n 2.9.8 (2020-09-28)\n ------------------\n \ndiff --git a/news/135.bugfix b/news/135.bugfix\ndeleted file mode 100644\nindex adee593..0000000\n--- a/news/135.bugfix\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-Fixes test to work clean with zope.interface.\n-Interfaces are hashed based on just their name and module. \n-So every one of these local `IBlank` interfaces will hash the same way, and be treated the same for purposes of zope.interface\'s `_dependents`.\n-Thus in tests mock interfaces must not be used under the same name in the same module.\n-[jensens]\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nindex 218faa4..d92c75f 100644\n--- a/plone/dexterity/bbb.py\n+++ b/plone/dexterity/bbb.py\n@@ -1,12 +1,21 @@\n # -*- coding: utf-8 -*-\n-import pkg_resources\n+import zope.deferredimport\n \n \n-HAS_ZSERVER = True\n+zope.deferredimport.initialize()\n+\n+\n+HAS_WEBDAV = True\n try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n+    import webdav as _  # noqa: F401\n+except ImportError:\n+    HAS_WEBDAV = False\n+\n+\n+zope.deferredimport.deprecated(\n+    "Import HAS_WEBDAV instead.", HAS_ZSERVER="plone.dexterity:bbb.HAS_WEBDAV"\n+)\n+\n \n NullResource = None\n \ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 970b305..719945a 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -15,7 +15,7 @@\n except ImportError:\n     from ZPublisher.BaseRequest import DefaultPublishTraverse\n \n-if bbb.HAS_ZSERVER:\n+if bbb.HAS_WEBDAV:\n     from webdav.NullResource import NullResource\n else:\n     NullResource = bbb.NullResource\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex b3ee215..c0ed037 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -4,7 +4,6 @@\n from Acquisition import aq_base\n from Acquisition import Implicit\n from email.message import Message\n-from email.parser import FeedParser\n from plone.dexterity import bbb\n from plone.dexterity.interfaces import DAV_FOLDER_DATA_ID\n from plone.dexterity.interfaces import IDexterityContainer\n@@ -37,12 +36,19 @@\n import tempfile\n \n \n-if bbb.HAS_ZSERVER:\n+if bbb.HAS_WEBDAV:\n     from webdav.Resource import Resource\n else:\n     Resource = bbb.Resource\n \n \n+try:\n+    from email.parser import BytesFeedParser\n+except:\n+    # Python 2.7 compatibility\n+    from email.parser import FeedParser as BytesFeedParser\n+\n+\n class DAVResourceMixin(object):\n     """Mixin class for WebDAV resource support.\n \n@@ -666,6 +672,8 @@ def size(self):\n         self._getStream()\n         return self._size\n \n+    __len__ = size\n+\n     # internal helper methods\n \n     @memoize\n@@ -698,6 +706,11 @@ def _getStream(self):\n         out.seek(0)\n         return out\n \n+    def __next__(self):\n+        """ Iterate over the stream\n+        """\n+        return self._getStream().__next__()\n+\n \n @implementer(IRawWriteFile)\n class WriteFileBase(object):\n@@ -776,7 +789,7 @@ def __init__(self, context):\n         self._closed = False\n         self._name = None\n         self._written = 0\n-        self._parser = FeedParser()\n+        self._parser = BytesFeedParser()\n         self._message = None\n \n     @property\n@@ -835,6 +848,8 @@ def close(self):\n     def write(self, data):\n         if self._closed:\n             raise ValueError("File is closed")\n+        if isinstance(data, six.text_type):\n+            data = data.encode()\n         self._written += len(data)\n         self._parser.feed(data)\n \n@@ -850,7 +865,7 @@ def truncate(self, size=None):\n             )\n         if self._closed:\n             raise ValueError("File is closed")\n-        self._parser = FeedParser()\n+        self._parser = BytesFeedParser()\n         self._written = 0\n \n     def flush(self):\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 888f34e..4fa9f08 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -264,7 +264,8 @@ def lookupSchema(self):\n         # Otherwise, look up a dynamic schema. This will query the model for\n         # an unnamed schema if it is the first time it is looked up.\n         # See schema.py\n-        schemaName = portalTypeToSchemaName(self.getId())\n+        mtime = getattr(self, "_p_mtime", None) or ""\n+        schemaName = portalTypeToSchemaName(self.getId(), suffix=str(mtime))\n         return getattr(plone.dexterity.schema.generated, schemaName)\n \n     def lookupModel(self):\n@@ -554,7 +555,8 @@ def ftiModified(object, event):\n         if (fti.model_source or fti.model_file) \\\n            and (\'model_source\' in mod or \'model_file\' in mod or \'schema_policy\' in mod):\n \n-            schemaName = portalTypeToSchemaName(portal_type)\n+            mtime = getattr(fti, "_p_mtime", None) or ""\n+            schemaName = portalTypeToSchemaName(portal_type, suffix=str(mtime))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 53593bc..8260982 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -69,7 +69,7 @@ def lookup_fti(portal_type, cache=True):\n                 fti = None\n                 if portal_type in fti_cache:\n                     fti = fti_cache[portal_type]\n-                \n+\n                 if fti is None:\n                     fti_cache[portal_type] = fti = queryUtility(\n                         IDexterityFTI,\n@@ -305,6 +305,7 @@ class SchemaNameEncoder(object):\n         (\'.\', \'_2_\'),\n         (\'-\', \'_3_\'),\n         (\'/\', \'_4_\'),\n+        (\'|\', \'_5_\'),\n     )\n \n     def encode(self, s):\n@@ -324,16 +325,17 @@ def split(self, s):\n         return [self.decode(a) for a in s.split(\'_0_\')]\n \n \n-def portalTypeToSchemaName(portal_type, schema=u"", prefix=None):\n+def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n-    if prefix is None:\n-        if portal_type == \'Plone Site\':\n-            fti = getUtility(IDexterityFTI, name=portal_type)\n-            siteroot = fti.__parent__\n-        else:\n-            siteroot = getUtility(ISiteRoot)\n-        prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n+    if portal_type == \'Plone Site\':\n+        fti = getUtility(IDexterityFTI, name=portal_type)\n+        siteroot = fti.__parent__\n+    else:\n+        siteroot = getUtility(ISiteRoot)\n+    prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n+    if suffix:\n+        prefix = \'|\'.join([prefix, suffix])\n \n     encoder = SchemaNameEncoder()\n     return encoder.join(prefix, portal_type, schema)\n@@ -385,7 +387,6 @@ def __call__(self, name, module):\n         module using setattr(). This means that the factory will not be\n         invoked again.\n         """\n-\n         try:\n             prefix, portal_type, schemaName = splitSchemaName(name)\n         except ValueError:\n@@ -420,6 +421,7 @@ def __call__(self, name, module):\n             if name in self._transient_SCHEMA_CACHE:\n                 del self._transient_SCHEMA_CACHE[name]\n \n+            log.debug("Dynamic schema generated: %s", name)\n             setattr(module, name, schema)\n \n         return schema\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex b62b68d..04fb32e 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -1,19 +1,17 @@\n # -*- coding: utf-8 -*-\n-from mock import Mock\n+from plone.dexterity.bbb import HAS_WEBDAV\n \n import gc\n-import pkg_resources\n import six\n import unittest\n import zope.component\n import zope.component.testing\n \n \n-HAS_ZSERVER = True\n try:\n-    dist = pkg_resources.get_distribution(\'ZServer\')\n-except pkg_resources.DistributionNotFound:\n-    HAS_ZSERVER = False\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n \n \n class MockTestCase(unittest.TestCase):\n@@ -99,6 +97,22 @@ def __init__(self, **kw):\n         self.__dict__.update(kw)\n \n \n+class ItemDummy(Dummy):\n+    """ Dummy objects with title getter and setter """\n+\n+    title = \'\'\n+    portal_type = \'foo\'\n+\n+    def Title(self):\n+        return self.title\n+\n+    def setTitle(self, title):\n+        self.title = title\n+\n+    def getId(self):\n+        return self.__dict__.get(\'id\', \'\')\n+\n+\n # from mocker\n def _global_replace(remove, install):\n     """Replace object \'remove\' with object \'install\' on all dictionaries."""\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex 3bdf69f..bd86c50 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -3,7 +3,6 @@\n from datetime import date\n from datetime import datetime\n from DateTime import DateTime\n-from mock import Mock\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.behavior.interfaces import IBehavior\n from plone.behavior.interfaces import IBehaviorAssignable\n@@ -30,6 +29,17 @@\n import zope.schema\n \n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n+\n+try:\n+    from unittest.mock import patch\n+except ImportError:\n+    from mock import patch\n+\n+\n class TestContent(MockTestCase):\n \n     def setUp(self):\n@@ -600,12 +610,10 @@ def test_name_unicode_id_str(self):\n \n     def test_item_dublincore(self):\n         from DateTime import DateTime\n-        # Mock Zope DateTime\n-        import mock\n+\n         import plone.dexterity\n-        datetime_patcher = mock.patch.object(\n-            plone.dexterity.content, \'DateTime\'\n-        )\n+\n+        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n@@ -661,12 +669,9 @@ def test_item_dublincore(self):\n \n     def test_item_dublincore_date(self):\n         from DateTime import DateTime\n-        # Mock Zope DateTime\n-        import mock\n+\n         import plone.dexterity\n-        datetime_patcher = mock.patch.object(\n-            plone.dexterity.content, \'DateTime\'\n-        )\n+        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n@@ -707,12 +712,9 @@ def test_item_dublincore_date(self):\n \n     def test_item_dublincore_datetime(self):\n         from DateTime import DateTime\n-        # Mock Zope DateTime\n-        import mock\n+\n         import plone.dexterity\n-        datetime_patcher = mock.patch.object(\n-            plone.dexterity.content, \'DateTime\'\n-        )\n+        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex 6656a1f..f8621b2 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -1,13 +1,15 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from mock import Mock\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from zope.interface import Interface\n \n-import unittest\n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n \n class IDummy(Interface):\n     pass\ndiff --git a/plone/dexterity/tests/test_filerepresentation.py b/plone/dexterity/tests/test_filerepresentation.py\nnew file mode 100644\nindex 0000000..70f2b56\n--- /dev/null\n+++ b/plone/dexterity/tests/test_filerepresentation.py\n@@ -0,0 +1,18 @@\n+from .case import ItemDummy\n+from .case import MockTestCase\n+from plone.dexterity.filerepresentation import DefaultReadFile\n+from zope.interface.verify import verifyObject\n+from ZPublisher.Iterators import IStreamIterator\n+\n+\n+class TestFileRepresentation(MockTestCase):\n+    def create_dummy(self, **kw):\n+        return ItemDummy(**kw)\n+\n+    def test_defaultreadfile_verify_iface(self):\n+\n+        dummy = DefaultReadFile(ItemDummy())\n+        self.assertTrue(IStreamIterator.providedBy(dummy))\n+        self.assertTrue(verifyObject(IStreamIterator, dummy))\n+        self.assertEqual(b"".join(dummy), b"Portal-Type: foo\\n\\n")\n+        self.assertEqual(len(dummy), 18)\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 506af26..018587f 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from mock import Mock\n from plone.dexterity import utils\n from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.factory import DexterityFactory\n@@ -34,6 +33,12 @@\n import zope.schema\n \n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n+\n+\n class TestClass(object):\n     meta_type = "Test Class"\n \ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex 03a3c83..e24741b 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from mock import Mock\n from plone.dexterity.content import Item\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n@@ -11,6 +10,11 @@\n from zope.interface import Interface\n \n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n+\n class PrimaryFieldInfoTestCase(MockTestCase):\n     def test_primary_field_info(self):\n \ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex e032a7a..87b3ec6 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from mock import Mock\n from plone.dexterity import schema\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IContentType\n@@ -16,6 +15,11 @@\n import zope.schema\n \n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n+\n class TestSchemaModuleFactory(MockTestCase):\n \n     def test_transient_schema(self):\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex 9d901e3..df4aa1a 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -1,14 +1,20 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from mock import Mock\n-from mock import patch\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import SCHEMA_CACHE\n from zope.interface import Interface\n \n-import unittest\n-import warnings\n+\n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n+\n+try:\n+    from unittest.mock import patch\n+except ImportError:\n+    from mock import patch\n \n \n class TestSchemaCache(MockTestCase):\n@@ -66,16 +72,15 @@ def test_unexistent_behaviors_lookup(self):\n         fti.behaviors = ["foo.bar"]\n \n         with patch("warnings.warn") as mock_warnings:\n-            warning_list = [call[1][0] for call in mock_warnings.mock_calls]\n             SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n             # Verify the warning has been issued\n-            self.assertEqual(\n-                mock_warnings.mock_calls[-1].args[0],\n+            mock_warnings.assert_called_once_with(\n                 (\n                     \'No behavior registration found for behavior named \'\n                     \'"foo.bar" for factory "testtype" - trying deprecated \'\n                     \'fallback lookup (will be removed in 3.0)..."\'\n-                )\n+                ),\n+                DeprecationWarning,\n             )\n \n     def test_repeated_subtypes_lookup(self):\ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex ef40774..aeebc0b 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from mock import Mock\n from plone.autoform.interfaces import READ_PERMISSIONS_KEY\n from plone.dexterity.content import Container\n from plone.dexterity.content import Item\n@@ -15,6 +14,10 @@\n import zope.schema\n \n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n class TestAttributeProtection(MockTestCase):\n \n     def setUp(self):\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex aa9443c..c4c7401 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -1,10 +1,15 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n-from mock import Mock\n from plone.dexterity import utils\n from plone.dexterity.fti import DexterityFTI\n \n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n+\n+\n class TestUtils(MockTestCase):\n \n     def test_getAdditionalSchemata(self):\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex bb7e550..a5a6cb0 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n from AccessControl import Unauthorized\n-from mock import Mock\n from plone.autoform.interfaces import IFormFieldProvider\n from plone.behavior.interfaces import IBehaviorAssignable\n from plone.dexterity.browser.add import DefaultAddForm\n@@ -41,6 +40,12 @@\n import six\n \n \n+try:\n+    from unittest.mock import Mock\n+except ImportError:\n+    from mock import Mock\n+\n+\n class TestRequest(TestRequestBase):\n     """Zope 3\'s TestRequest doesn\'t support item assignment, but Zope 2\'s\n     request does.\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex 96d4c12..a204e1f 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -1,13 +1,12 @@\n # -*- coding: utf-8 -*-\n-from .case import HAS_ZSERVER\n+from .case import HAS_WEBDAV\n from .case import MockTestCase\n \n \n-if HAS_ZSERVER:\n+if HAS_WEBDAV:\n \n-    from .case import Dummy\n+    from .case import ItemDummy\n     from email.message import Message\n-    from mock import Mock\n     from OFS.Folder import Folder\n     from OFS.SimpleItem import SimpleItem\n     from plone.autoform.interfaces import IFormFieldProvider\n@@ -47,6 +46,19 @@\n     from ZPublisher.Iterators import IStreamIterator\n \n     import re\n+    import six\n+\n+    try:\n+        from unittest.mock import Mock\n+    except ImportError:\n+        from mock import Mock\n+\n+\n+    if six.PY2:\n+        # cope with upstream library changes in rendering the XML prolog\n+        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n+    else:\n+        XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n \n     @provider(IFormFieldProvider)\n@@ -63,21 +75,6 @@ def _createResponse(self):\n             return HTTPResponse()\n \n \n-    class ItemDummy(Dummy):\n-        """ Dummy objects with title getter and setter """\n-\n-        title = \'\'\n-\n-        def Title(self):\n-            return self.title\n-\n-        def setTitle(self, title):\n-            self.title = title\n-\n-        def getId(self):\n-            return self.__dict__.get(\'id\', \'\')\n-\n-\n     class TestWebZope2DAVAPI(MockTestCase):\n \n         def test_get_size_no_adapter(self):\n@@ -527,8 +524,7 @@ def content_type(self):\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n+            body = XML_PROLOG + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -565,11 +561,10 @@ def content_type(self):\n \n             result = response.getBody()\n             result = re.sub(\n-                r\'<n:getlastmodified>.+</n:getlastmodified>\',\n-                \'<n:getlastmodified>...</n:getlastmodified>\',\n+                br\'<n:getlastmodified>.+</n:getlastmodified>\',\n+                br\'<n:getlastmodified>...</n:getlastmodified>\',\n                 result\n             )\n-\n             self.assertEqual(result.strip(), body.strip())\n \n         def test_PROPPATCH(self):\n@@ -614,8 +609,7 @@ def content_type(self):\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = """\\\n-<?xml version="1.0" encoding="utf-8"?>\n+            body = XML_PROLOG + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -633,6 +627,7 @@ def content_type(self):\n """\n \n             result = response.getBody()\n+\n             self.assertEqual(body.strip(), result.strip())\n \n         def test_LOCK(self):\n@@ -1098,7 +1093,7 @@ class ITest(Interface):\n             from plone.rfc822 import constructMessageFromSchemata\n             self.patch_global(constructMessageFromSchemata, return_value=message)\n \n-            body = """\\\n+            body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\n@@ -1117,26 +1112,26 @@ class ITest(Interface):\n \n             readfile.seek(2)\n             self.assertEqual(2, readfile.tell())\n-            self.assertEqual(\'tl\', readfile.read(2))\n+            self.assertEqual(b\'tl\', readfile.read(2))\n             self.assertEqual(4, readfile.tell())\n \n             readfile.seek(0, 2)\n             self.assertEqual(69, readfile.tell())\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', readfile.readlines()[1])\n+            self.assertEqual(b\'foo: 10\\n\', readfile.readlines()[1])\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', readfile.readlines(100)[1])\n+            self.assertEqual(b\'foo: 10\\n\', readfile.readlines(100)[1])\n \n             readfile.seek(0)\n-            self.assertEqual(\'title: Test title\\n\', readfile.readline())\n+            self.assertEqual(b\'title: Test title\\n\', readfile.readline())\n \n             readfile.seek(0)\n-            self.assertEqual(\'title: Test title\\n\', readfile.readline(100))\n+            self.assertEqual(b\'title: Test title\\n\', readfile.readline(100))\n \n             readfile.seek(0)\n-            self.assertEqual(\'foo: 10\\n\', list(iter(readfile))[1])\n+            self.assertEqual(b\'foo: 10\\n\', list(iter(readfile))[1])\n \n             self.assertEqual(False, readfile.closed)\n             readfile.close()\n@@ -1163,7 +1158,7 @@ class ITest(Interface):\n \n             writefile = DefaultWriteFile(item)\n \n-            body = """\\\n+            body = b"""\\\n title: Test title\n foo: 10\n bar: xyz\ndiff --git a/setup.py b/setup.py\nindex f17fff7..5dbb207 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.9.9.dev0\'\n+version = \'2.10.1.dev0\'\n \n \n def read(filename):\n@@ -92,7 +92,7 @@ def read(filename):\n         \'test\': [\n             \'plone.testing\',\n             \'Products.CMFPlone\',\n-            \'mock\',\n+            "mock;python_version<\'3\'"\n         ]\n     },\n     entry_points="""\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-12-09T21:45:48+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/4ca53ebc29552051430017a9f5cecb611e8be29a

Try to come up with a prefix only when there is none

Files changed:
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 8260982..ededc34 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -328,12 +328,13 @@ def split(self, s):\n def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface.\n     """\n-    if portal_type == \'Plone Site\':\n-        fti = getUtility(IDexterityFTI, name=portal_type)\n-        siteroot = fti.__parent__\n-    else:\n-        siteroot = getUtility(ISiteRoot)\n-    prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n+    if prefix is None:\n+        if portal_type == \'Plone Site\':\n+            fti = getUtility(IDexterityFTI, name=portal_type)\n+            siteroot = fti.__parent__\n+        else:\n+            siteroot = getUtility(ISiteRoot)\n+        prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n     if suffix:\n         prefix = \'|\'.join([prefix, suffix])\n \n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-12-12T15:38:45+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/472d60c30bb9a5c527d3b9fae8a1c3a9f6d3b5c5

Don't try to be smart?

Files changed:
M plone/dexterity/content.py

b"diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 4fe6567..dcb619f 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -779,12 +779,14 @@ def __getattr__(self, name):\n \n         raise AttributeError(name)\n \n-    def __setattr__(self, name, obj):\n-        if self._tree is not None and name in self:\n-            # We're trying to set an item via dotted name...\n-            del self[name]\n-            self[name] = obj\n-        super(Container, self).__setattr__(name, obj)\n+    # XXX do we really want to handle this kind of cases, or is this a ID-10-T\n+    # thingy?\n+    # def __setattr__(self, name, obj):\n+    #     if self._tree is not None and name in self:\n+    #         # We're trying to set an item via dotted name...\n+    #         del self[name]\n+    #         self[name] = obj\n+    #     super(Container, self).__setattr__(name, obj)\n \n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2020-12-17T14:52:18+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.dexterity/commit/a375f3c7eb36e46dc278de182fbd411e149181ef

Move changelog entry to news/85.bugfix

Files changed:
A news/85.bugfix
M CHANGES.rst

b"diff --git a/CHANGES.rst b/CHANGES.rst\nindex 9e3ea6e..774f8c5 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -23,7 +23,7 @@ Bug fixes:\n \n \n - Fixes test to work clean with zope.interface.\n-  Interfaces are hashed based on just their name and module. \n+  Interfaces are hashed based on just their name and module.\n   So every one of these local `IBlank` interfaces will hash the same way, and be treated the same for purposes of zope.interface's `_dependents`.\n   Thus in tests mock interfaces must not be used under the same name in the same module.\n   [jensens] (#135)\n@@ -179,9 +179,6 @@ New features:\n \n Bug fixes:\n \n-- Fix ft._updateProperty so it doesn't break when receiving an empty value.\n-  This happens when an DX FTI is part of a Generic Setup baseline import.\n-  [jaroel]\n - Other Python 3 compatibility fixes\n   [ale-rt, pbauer, jensens]\n \ndiff --git a/news/85.bugfix b/news/85.bugfix\nnew file mode 100644\nindex 0000000..e1e0943\n--- /dev/null\n+++ b/news/85.bugfix\n@@ -0,0 +1,3 @@\n+Fix ft._updateProperty so it doesn't break when receiving an empty value.\n+This happens when an DX FTI is part of a Generic Setup baseline import.\n+[jaroel]\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-02-10T15:22:19+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.dexterity/commit/805c92a9d4df055b8a83d01e294ac00a05de4308

Remove commented code

Files changed:
M plone/dexterity/content.py

b'diff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex dcb619f..433c1ed 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -779,15 +779,6 @@ def __getattr__(self, name):\n \n         raise AttributeError(name)\n \n-    # XXX do we really want to handle this kind of cases, or is this a ID-10-T\n-    # thingy?\n-    # def __setattr__(self, name, obj):\n-    #     if self._tree is not None and name in self:\n-    #         # We\'re trying to set an item via dotted name...\n-    #         del self[name]\n-    #         self[name] = obj\n-    #     super(Container, self).__setattr__(name, obj)\n-\n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\n         """Delete the contained objects with the specified ids.\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-08-18T14:46:14+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/35a12ab726b76ee5527ee467974917bc1fbdca0c

Merge branch 'master' into dxcontainer-siteroot

Files changed:
A news/154.bugfix
M CHANGES.rst
M plone/__init__.py
M plone/dexterity/bbb.py
M plone/dexterity/behavior.py
M plone/dexterity/browser/add.py
M plone/dexterity/browser/base.py
M plone/dexterity/browser/edit.py
M plone/dexterity/browser/fti.py
M plone/dexterity/browser/traversal.py
M plone/dexterity/content.py
M plone/dexterity/events.py
M plone/dexterity/exportimport.py
M plone/dexterity/factory.py
M plone/dexterity/filerepresentation.py
M plone/dexterity/fti.py
M plone/dexterity/interfaces.py
M plone/dexterity/primary.py
M plone/dexterity/schema.py
M plone/dexterity/tests/case.py
M plone/dexterity/tests/schemata.py
M plone/dexterity/tests/test_behavior.py
M plone/dexterity/tests/test_content.py
M plone/dexterity/tests/test_content_integration.py
M plone/dexterity/tests/test_exportimport.py
M plone/dexterity/tests/test_factory.py
M plone/dexterity/tests/test_fti.py
M plone/dexterity/tests/test_primary.py
M plone/dexterity/tests/test_schema.py
M plone/dexterity/tests/test_schema_cache.py
M plone/dexterity/tests/test_security.py
M plone/dexterity/tests/test_utils.py
M plone/dexterity/tests/test_views.py
M plone/dexterity/tests/test_webdav.py
M plone/dexterity/utils.py
M setup.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 774f8c5..38cab10 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -9,6 +9,29 @@ Changelog\n \n .. towncrier release notes start\n \n+2.10.2 (2021-07-29)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Fix export/import of content in Python 3.\n+  Fixes `issue 124 <https://github.com/plone/plone.dexterity/issues/124>`_.\n+  Also fixes the tests in combination with newest ``Products.GenericSetup`` 2.1.2.\n+  [maurits] (#124)\n+\n+\n+2.10.1 (2021-06-30)\n+-------------------\n+\n+Bug fixes:\n+\n+\n+- Officially support Plone 6.0 and Python 3.9.\n+  No code changes.\n+  [maurits] (#1)\n+\n+\n 2.10.0 (2020-10-12)\n -------------------\n \ndiff --git a/news/154.bugfix b/news/154.bugfix\nnew file mode 100644\nindex 0000000..3e27c41\n--- /dev/null\n+++ b/news/154.bugfix\n@@ -0,0 +1 @@\n+Codestyle black and isort [jensens]\ndiff --git a/plone/__init__.py b/plone/__init__.py\nindex 68c04af..03d08ff 100644\n--- a/plone/__init__.py\n+++ b/plone/__init__.py\n@@ -1,2 +1,2 @@\n # -*- coding: utf-8 -*-\n-__import__(\'pkg_resources\').declare_namespace(__name__)\n+__import__("pkg_resources").declare_namespace(__name__)\ndiff --git a/plone/dexterity/bbb.py b/plone/dexterity/bbb.py\nindex d92c75f..9b3770e 100644\n--- a/plone/dexterity/bbb.py\n+++ b/plone/dexterity/bbb.py\n@@ -27,6 +27,7 @@ def dav__init(self, request, response):\n     def dav__validate(self, object, methodname, REQUEST):\n         pass\n \n-    def dav__simpleifhandler(self, request, response, method=\'PUT\',\n-                             col=0, url=None, refresh=0):\n+    def dav__simpleifhandler(\n+        self, request, response, method="PUT", col=0, url=None, refresh=0\n+    ):\n         pass\ndiff --git a/plone/dexterity/behavior.py b/plone/dexterity/behavior.py\nindex 35405a6..bf015f3 100644\n--- a/plone/dexterity/behavior.py\n+++ b/plone/dexterity/behavior.py\n@@ -9,8 +9,7 @@\n @implementer(IBehaviorAssignable)\n @adapter(IDexterityContent)\n class DexterityBehaviorAssignable(object):\n-    """Support plone.behavior behaviors stored in the FTI\n-    """\n+    """Support plone.behavior behaviors stored in the FTI"""\n \n     def __init__(self, context):\n         self.context = context\n@@ -22,7 +21,5 @@ def supports(self, behavior_interface):\n         return False\n \n     def enumerateBehaviors(self):\n-        for behavior in SCHEMA_CACHE.behavior_registrations(\n-            self.context.portal_type\n-        ):\n+        for behavior in SCHEMA_CACHE.behavior_registrations(self.context.portal_type):\n             yield behavior\ndiff --git a/plone/dexterity/browser/add.py b/plone/dexterity/browser/add.py\nindex 0c05d86..7308769 100644\n--- a/plone/dexterity/browser/add.py\n+++ b/plone/dexterity/browser/add.py\n@@ -44,7 +44,7 @@ def __init__(self, context, request, ti=None):\n         if ti is not None:\n             self.ti = ti\n             self.portal_type = ti.getId()\n-        self.request.form[\'disable_border\'] = True\n+        self.request.form["disable_border"] = True\n \n     @property\n     def additionalSchemata(self):\n@@ -71,7 +71,7 @@ def create(self, data):\n         # to re-define a type through the web that uses the factory from an\n         # existing type, but wants a unique portal_type!\n \n-        if hasattr(content, \'_setPortalTypeName\'):\n+        if hasattr(content, "_setPortalTypeName"):\n             content._setPortalTypeName(fti.getId())\n \n         # Acquisition wrap temporarily to satisfy things like vocabularies\n@@ -107,7 +107,7 @@ def nextURL(self):\n \n     # Buttons\n \n-    @button.buttonAndHandler(_(\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_("Save"), name="save")\n     def handleAdd(self, action):\n         data, errors = self.extractData()\n         if errors:\n@@ -117,11 +117,9 @@ def handleAdd(self, action):\n         if obj is not None:\n             # mark only as finished if we get the new object\n             self._finishedAdd = True\n-            IStatusMessage(self.request).addStatusMessage(\n-                self.success_message, "info"\n-            )\n+            IStatusMessage(self.request).addStatusMessage(self.success_message, "info")\n \n-    @button.buttonAndHandler(_(u\'Cancel\'), name=\'cancel\')\n+    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n     def handleCancel(self, action):\n         IStatusMessage(self.request).addStatusMessage(\n             _(u"Add New Item operation cancelled"), "info"\n@@ -131,11 +129,10 @@ def handleCancel(self, action):\n \n     def update(self):\n         if not IDeferSecurityCheck.providedBy(self.request):\n-            allowed_ids = [fti.getId() for fti in\n-                           self.context.allowedContentTypes()]\n+            allowed_ids = [fti.getId() for fti in self.context.allowedContentTypes()]\n             if self.portal_type not in allowed_ids:\n                 raise ValueError(\n-                    \'Subobject type disallowed by IConstrainTypes adapter: %s\'\n+                    "Subobject type disallowed by IConstrainTypes adapter: %s"\n                     % self.portal_type\n                 )\n         super(DefaultAddForm, self).update()\n@@ -145,10 +142,10 @@ def update(self):\n \n     def updateActions(self):\n         super(DefaultAddForm, self).updateActions()\n-        if \'save\' in self.actions:\n+        if "save" in self.actions:\n             self.actions["save"].addClass("context")\n \n-        if \'cancel\' in self.actions:\n+        if "cancel" in self.actions:\n             self.actions["cancel"].addClass("standalone")\n \n     @property\n@@ -156,7 +153,7 @@ def label(self):\n         portal_type = self.portal_type\n         fti = getUtility(IDexterityFTI, name=portal_type)\n         type_name = fti.Title()\n-        return _(u"Add ${name}", mapping={\'name\': type_name})\n+        return _(u"Add ${name}", mapping={"name": type_name})\n \n \n class DefaultAddView(layout.FormWrapper, BrowserPage):\n@@ -175,8 +172,9 @@ def __init__(self, context, request, ti):\n         self.ti = ti\n \n         # Set portal_type name on newly created form instance\n-        if self.form_instance is not None \\\n-           and not getattr(self.form_instance, \'portal_type\', None):\n+        if self.form_instance is not None and not getattr(\n+            self.form_instance, "portal_type", None\n+        ):\n             self.form_instance.portal_type = ti.getId()\n \n \ndiff --git a/plone/dexterity/browser/base.py b/plone/dexterity/browser/base.py\nindex c88ae48..581c96d 100644\n--- a/plone/dexterity/browser/base.py\n+++ b/plone/dexterity/browser/base.py\n@@ -7,10 +7,9 @@\n \n \n class DexterityExtensibleForm(AutoExtensibleForm):\n-    """Mixin class for Dexterity forms that support updatable fields\n-    """\n+    """Mixin class for Dexterity forms that support updatable fields"""\n \n-    default_fieldset_label = _(\'label_schema_default\', default=u\'Default\')\n+    default_fieldset_label = _("label_schema_default", default=u"Default")\n \n     @property\n     def description(self):\n@@ -26,5 +25,4 @@ def schema(self):\n \n     @property\n     def additionalSchemata(self):\n-        return getAdditionalSchemata(context=self.context,\n-                                     portal_type=self.portal_type)\n+        return getAdditionalSchemata(context=self.context, portal_type=self.portal_type)\ndiff --git a/plone/dexterity/browser/edit.py b/plone/dexterity/browser/edit.py\nindex eb55971..e3edcf8 100644\n--- a/plone/dexterity/browser/edit.py\n+++ b/plone/dexterity/browser/edit.py\n@@ -21,36 +21,33 @@ class DefaultEditForm(DexterityExtensibleForm, form.EditForm):\n \n     success_message = _(u"Changes saved")\n \n-    @button.buttonAndHandler(_(u\'Save\'), name=\'save\')\n+    @button.buttonAndHandler(_(u"Save"), name="save")\n     def handleApply(self, action):\n         data, errors = self.extractData()\n         if errors:\n             self.status = self.formErrorsMessage\n             return\n         self.applyChanges(data)\n-        IStatusMessage(self.request).addStatusMessage(\n-            self.success_message, "info"\n-        )\n+        IStatusMessage(self.request).addStatusMessage(self.success_message, "info")\n         self.request.response.redirect(self.nextURL())\n         notify(EditFinishedEvent(self.context))\n \n-    @button.buttonAndHandler(_(u\'Cancel\'), name=\'cancel\')\n+    @button.buttonAndHandler(_(u"Cancel"), name="cancel")\n     def handleCancel(self, action):\n-        IStatusMessage(self.request).addStatusMessage(\n-            _(u"Edit cancelled"), "info"\n-        )\n+        IStatusMessage(self.request).addStatusMessage(_(u"Edit cancelled"), "info")\n         self.request.response.redirect(self.nextURL())\n         notify(EditCancelledEvent(self.context))\n \n     def nextURL(self):\n         view_url = self.context.absolute_url()\n-        portal_type = getattr(self, \'portal_type\', None)\n+        portal_type = getattr(self, "portal_type", None)\n         if portal_type is not None:\n             registry = getUtility(IRegistry)\n             use_view_action = registry.get(\n-                \'plone.types_use_view_action_in_listings\', [])\n+                "plone.types_use_view_action_in_listings", []\n+            )\n             if portal_type in use_view_action:\n-                view_url = view_url + \'/view\'\n+                view_url = view_url + "/view"\n         return view_url\n \n     def update(self):\n@@ -64,10 +61,10 @@ def update(self):\n     def updateActions(self):\n         super(DefaultEditForm, self).updateActions()\n \n-        if \'save\' in self.actions:\n+        if "save" in self.actions:\n             self.actions["save"].addClass("context")\n \n-        if \'cancel\' in self.actions:\n+        if "cancel" in self.actions:\n             self.actions["cancel"].addClass("standalone")\n \n     @property\n@@ -77,7 +74,8 @@ def fti(self):\n     @property\n     def label(self):\n         type_name = self.fti.Title()\n-        return _(u"Edit ${name}", mapping={\'name\': type_name})\n+        return _(u"Edit ${name}", mapping={"name": type_name})\n+\n \n DefaultEditView = layout.wrap_form(DefaultEditForm)\n classImplements(DefaultEditView, IDexterityEditForm)\ndiff --git a/plone/dexterity/browser/fti.py b/plone/dexterity/browser/fti.py\nindex a3844a1..72df006 100644\n--- a/plone/dexterity/browser/fti.py\n+++ b/plone/dexterity/browser/fti.py\n@@ -4,8 +4,7 @@\n \n \n class FTIAddView(FactoryTypeInformationAddView):\n-    """Add view for the Dexterity FTI type\n-    """\n+    """Add view for the Dexterity FTI type"""\n \n     klass = DexterityFTI\n-    description = u\'Factory Type Information for Dexterity Content Types\'\n+    description = u"Factory Type Information for Dexterity Content Types"\ndiff --git a/plone/dexterity/browser/traversal.py b/plone/dexterity/browser/traversal.py\nindex 719945a..0487ea5 100644\n--- a/plone/dexterity/browser/traversal.py\n+++ b/plone/dexterity/browser/traversal.py\n@@ -42,29 +42,32 @@ def publishTraverse(self, request, name):\n         # If we are trying to traverse to the folder "body" pseudo-object\n         # returned by listDAVObjects(), return that immediately\n \n-        if getattr(request, \'maybe_webdav_client\', False) \\\n-           and name == DAV_FOLDER_DATA_ID:\n-            return FolderDataResource(\n-                DAV_FOLDER_DATA_ID, context\n-            ).__of__(context)\n+        if (\n+            getattr(request, "maybe_webdav_client", False)\n+            and name == DAV_FOLDER_DATA_ID\n+        ):\n+            return FolderDataResource(DAV_FOLDER_DATA_ID, context).__of__(context)\n \n-        defaultTraversal = super(\n-            DexterityPublishTraverse,\n-            self).publishTraverse(request, name)\n+        defaultTraversal = super(DexterityPublishTraverse, self).publishTraverse(\n+            request, name\n+        )\n \n         # If this is a WebDAV PUT/PROPFIND/PROPPATCH request, don\'t acquire\n         # things. If we did, we couldn\'t create a new object with PUT, for\n         # example, because the acquired object would shadow the NullResource\n \n-        if getattr(request, \'maybe_webdav_client\', False) \\\n-           and request.get(\'REQUEST_METHOD\', \'GET\') not in (\'GET\', \'POST\',) \\\n-           and IAcquirer.providedBy(defaultTraversal):\n+        if (\n+            getattr(request, "maybe_webdav_client", False)\n+            and request.get("REQUEST_METHOD", "GET")\n+            not in (\n+                "GET",\n+                "POST",\n+            )\n+            and IAcquirer.providedBy(defaultTraversal)\n+        ):\n             parent = aq_parent(aq_inner(defaultTraversal))\n             if parent is not None and parent is not context:\n-                return NullResource(\n-                    self.context,\n-                    name,\n-                    request).__of__(self.context)\n+                return NullResource(self.context, name, request).__of__(self.context)\n \n         return defaultTraversal\n \n@@ -74,8 +77,12 @@ def browserDefault(self, request):\n         # default view. The ZPublisher\'s WebDAV implementation doesn\'t\n         # deal well with default views.\n \n-        if getattr(request, \'maybe_webdav_client\', False) and \\\n-           request.get(\'REQUEST_METHOD\', \'GET\') not in (\'GET\', \'POST\',):\n+        if getattr(request, "maybe_webdav_client", False) and request.get(\n+            "REQUEST_METHOD", "GET"\n+        ) not in (\n+            "GET",\n+            "POST",\n+        ):\n             return self.context, ()\n \n         return super(DexterityPublishTraverse, self).browserDefault(request)\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex 433c1ed..e397505 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -62,34 +62,33 @@\n \n # see comment in DexterityContent.__getattr__ method\n ATTRIBUTE_NAMES_TO_IGNORE = (\n-    \'_dav_writelocks\',\n-    \'aq_inner\',\n-    \'getCurrentSkinName\',\n-    \'getURL\',\n-    \'im_self\',  # python 2 only, on python 3 it was renamed to __self__\n-    \'plone_utils\',\n-    \'portal_membership\',\n-    \'portal_placeful_workflow\',\n-    \'portal_properties\',\n-    \'translation_service\',\n+    "_dav_writelocks",\n+    "aq_inner",\n+    "getCurrentSkinName",\n+    "getURL",\n+    "im_self",  # python 2 only, on python 3 it was renamed to __self__\n+    "plone_utils",\n+    "portal_membership",\n+    "portal_placeful_workflow",\n+    "portal_properties",\n+    "translation_service",\n )\n \n-ASSIGNABLE_CACHE_KEY = \'__plone_dexterity_assignable_cache__\'\n+ASSIGNABLE_CACHE_KEY = "__plone_dexterity_assignable_cache__"\n \n \n def _default_from_schema(context, schema, fieldname):\n-    """helper to lookup default value of a field\n-    """\n+    """helper to lookup default value of a field"""\n     if schema is None:\n         return _marker\n     field = schema.get(fieldname, None)\n     if field is None:\n         return _marker\n-    default_factory = getattr(field, \'defaultFactory\', None)\n+    default_factory = getattr(field, "defaultFactory", None)\n     if (\n         # check for None to avoid one expensive providedBy (called often)\n-        default_factory is not None and\n-        IContextAwareDefaultFactory.providedBy(default_factory)\n+        default_factory is not None\n+        and IContextAwareDefaultFactory.providedBy(default_factory)\n     ):\n         return deepcopy(field.bind(context).default)\n     return deepcopy(field.default)\n@@ -105,7 +104,7 @@ def get_assignable(context):\n     request = getRequest()\n     if not request:\n         return IBehaviorAssignable(context, None)\n-    cache_key = getattr(context, \'_p_oid\', None)\n+    cache_key = getattr(context, "_p_oid", None)\n     if not cache_key:\n         return IBehaviorAssignable(context, None)\n     assignable_cache = getattr(request, ASSIGNABLE_CACHE_KEY, _marker)\n@@ -132,10 +131,10 @@ def __get__(self, inst, cls=None):\n             return getObjectSpecification(cls)\n \n         # get direct specification\n-        spec = getattr(inst, \'__provides__\', None)\n+        spec = getattr(inst, "__provides__", None)\n \n         # avoid recursion - fall back on default\n-        if getattr(_recursion_detection, \'blocked\', False):\n+        if getattr(_recursion_detection, "blocked", False):\n             return spec\n \n         # If the instance doesn\'t have a __provides__ attribute, get the\n@@ -144,7 +143,7 @@ def __get__(self, inst, cls=None):\n             spec = implementedBy(cls)\n \n         # Find the data we need to know if our cache needs to be invalidated\n-        portal_type = getattr(inst, \'portal_type\', None)\n+        portal_type = getattr(inst, "portal_type", None)\n \n         # If the instance has no portal type, then we\'re done.\n         if portal_type is None:\n@@ -152,7 +151,7 @@ def __get__(self, inst, cls=None):\n \n         # Find the cached value. This calculation is expensive and called\n         # hundreds of times during each request, so we require a fast cache\n-        cache = getattr(inst, \'_v__providedBy__\', None)\n+        cache = getattr(inst, "_v__providedBy__", None)\n \n         # See if we have a current cache. Reasons to do this include:\n         #\n@@ -163,7 +162,7 @@ def __get__(self, inst, cls=None):\n             inst._p_mtime,\n             SCHEMA_CACHE.modified(portal_type),\n             SCHEMA_CACHE.invalidations,\n-            hash(spec)\n+            hash(spec),\n         )\n         if cache is not None and cache[:-1] == updated:\n             if cache[-1] is not None:\n@@ -177,26 +176,24 @@ def __get__(self, inst, cls=None):\n             dynamically_provided = []\n \n         # block recursion\n-        setattr(_recursion_detection, \'blocked\', True)\n+        setattr(_recursion_detection, "blocked", True)\n         try:\n             assignable = get_assignable(inst)\n             if assignable is not None:\n                 for behavior_registration in assignable.enumerateBehaviors():\n                     if behavior_registration.marker:\n-                        dynamically_provided.append(\n-                            behavior_registration.marker\n-                        )\n+                        dynamically_provided.append(behavior_registration.marker)\n         finally:\n-            setattr(_recursion_detection, \'blocked\', False)\n+            setattr(_recursion_detection, "blocked", False)\n \n         if not dynamically_provided:\n             # rare case if no schema nor behaviors with markers are set\n-            inst._v__providedBy__ = updated + (None, )\n+            inst._v__providedBy__ = updated + (None,)\n             return spec\n \n         dynamically_provided.append(spec)\n         all_spec = Implements(*dynamically_provided)\n-        inst._v__providedBy__ = updated + (all_spec, )\n+        inst._v__providedBy__ = updated + (all_spec,)\n \n         return all_spec\n \n@@ -209,7 +206,7 @@ class AttributeValidator(Explicit):\n \n     def __call__(self, name, value):\n         # Short circuit for things like views or viewlets\n-        if name == \'\':\n+        if name == "":\n             return 1\n \n         context = aq_parent(self)\n@@ -219,8 +216,7 @@ def __call__(self, name, value):\n         # decides to have behaviors bound on something different than context\n         # or fti, i.e. schemas for subtrees.\n         protection_dict = all_merged_tagged_values_dict(\n-            iterSchemata(context),\n-            READ_PERMISSIONS_KEY\n+            iterSchemata(context), READ_PERMISSIONS_KEY\n         )\n \n         if name not in protection_dict:\n@@ -228,15 +224,12 @@ def __call__(self, name, value):\n \n         permission = queryUtility(IPermission, name=protection_dict[name])\n         if permission is not None:\n-            return getSecurityManager().checkPermission(\n-                permission.title, context\n-            )\n+            return getSecurityManager().checkPermission(permission.title, context)\n \n         return 0\n \n \n class PasteBehaviourMixin(object):\n-\n     def _notifyOfCopyTo(self, container, op=0):\n         """Keep Archetypes\' reference info internally when op == 1 (move)\n         because in those cases we need to keep Archetypes\' refeferences.\n@@ -275,13 +268,11 @@ def _verifyObjectPaste(self, obj, validate_src=True):\n         # allowed.\n         super(PasteBehaviourMixin, self)._verifyObjectPaste(obj, validate_src)\n         if validate_src:\n-            portal_type = getattr(aq_base(obj), \'portal_type\', None)\n+            portal_type = getattr(aq_base(obj), "portal_type", None)\n             if portal_type:\n                 fti = queryUtility(ITypeInformation, name=portal_type)\n                 if fti is not None and not fti.isConstructionAllowed(self):\n-                    raise ValueError(\n-                        \'You can not add the copied content here.\'\n-                    )\n+                    raise ValueError("You can not add the copied content here.")\n \n     def _getCopy(self, container):\n         # Copy the _v_is_cp and _v_cp_refs flags from the original\n@@ -290,13 +281,13 @@ def _getCopy(self, container):\n         # When the flags are missing, an Archetypes child object will not have\n         # the UID updated in some situations.\n         # Copied from Products.Archetypes.Referenceable.Referenceable._getCopy\n-        is_cp_flag = getattr(self, \'_v_is_cp\', None)\n-        cp_refs_flag = getattr(self, \'_v_cp_refs\', None)\n+        is_cp_flag = getattr(self, "_v_is_cp", None)\n+        cp_refs_flag = getattr(self, "_v_cp_refs", None)\n         ob = super(PasteBehaviourMixin, self)._getCopy(container)\n         if is_cp_flag:\n-            setattr(ob, \'_v_is_cp\', is_cp_flag)\n+            setattr(ob, "_v_is_cp", is_cp_flag)\n         if cp_refs_flag:\n-            setattr(ob, \'_v_cp_refs\', cp_refs_flag)\n+            setattr(ob, "_v_cp_refs", cp_refs_flag)\n         return ob\n \n \n@@ -306,12 +297,10 @@ def _getCopy(self, container):\n     IAttributeUUID,\n     IDublinCore,\n     ICatalogableDublinCore,\n-    IMutableDublinCore\n+    IMutableDublinCore,\n )\n-class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager,\n-                       Contained):\n-    """Base class for Dexterity content\n-    """\n+class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager, Contained):\n+    """Base class for Dexterity content"""\n \n     __providedBy__ = FTIAwareSpecification()\n     __allow_access_to_unprotected_subobjects__ = AttributeValidator()\n@@ -321,23 +310,31 @@ class DexterityContent(DAVResourceMixin, PortalContent, PropertyManager,\n     # portal_type is set by the add view and/or factory\n     portal_type = None\n \n-    title = u\'\'\n-    description = u\'\'\n+    title = u""\n+    description = u""\n     subject = ()\n     creators = ()\n     contributors = ()\n     effective_date = None\n     expiration_date = None\n-    format = \'text/html\'\n-    language = \'\'\n-    rights = \'\'\n+    format = "text/html"\n+    language = ""\n+    rights = ""\n \n     def __init__(\n-            self,\n-            id=None, title=_marker, subject=_marker, description=_marker,\n-            contributors=_marker, effective_date=_marker,\n-            expiration_date=_marker, format=_marker, language=_marker,\n-            rights=_marker, **kwargs):\n+        self,\n+        id=None,\n+        title=_marker,\n+        subject=_marker,\n+        description=_marker,\n+        contributors=_marker,\n+        effective_date=_marker,\n+        expiration_date=_marker,\n+        format=_marker,\n+        language=_marker,\n+        rights=_marker,\n+        **kwargs\n+    ):\n \n         if id is not None:\n             self.id = id\n@@ -379,20 +376,16 @@ def __getattr__(self, name):\n         # Ignore also some other well known names like\n         # Permission, Acquisition and AccessControl related ones.\n         if (\n-            name.startswith(\'__\')\n-            or name.startswith(\'_v\')\n-            or name.endswith(\'_Permission\')\n+            name.startswith("__")\n+            or name.startswith("_v")\n+            or name.endswith("_Permission")\n             or name in ATTRIBUTE_NAMES_TO_IGNORE\n         ):\n             raise AttributeError(name)\n \n         # attribute was not found; try to look it up in the schema and return\n         # a default\n-        value = _default_from_schema(\n-            self,\n-            SCHEMA_CACHE.get(self.portal_type),\n-            name\n-        )\n+        value = _default_from_schema(self, SCHEMA_CACHE.get(self.portal_type), name)\n         if value is not _marker:\n             return value\n \n@@ -402,9 +395,7 @@ def __getattr__(self, name):\n             for behavior_registration in assignable.enumerateBehaviors():\n                 if behavior_registration.interface:\n                     value = _default_from_schema(\n-                        self,\n-                        behavior_registration.interface,\n-                        name\n+                        self, behavior_registration.interface, name\n                     )\n                     if value is not _marker:\n                         return value\n@@ -452,7 +443,7 @@ def addCreator(self, creator=None):\n \n         # call self.listCreators() to make sure self.creators exists\n         if creator and creator not in self.listCreators():\n-            self.creators = self.creators + (creator, )\n+            self.creators = self.creators + (creator,)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setModificationDate(self, modification_date=None):\n@@ -469,29 +460,29 @@ def setModificationDate(self, modification_date=None):\n     def Title(self):\n         # this is a CMF accessor, so should return utf8-encoded\n         if six.PY2 and isinstance(self.title, six.text_type):\n-            return self.title.encode(\'utf-8\')\n-        return self.title or \'\'\n+            return self.title.encode("utf-8")\n+        return self.title or ""\n \n     @security.protected(permissions.View)\n     def Description(self):\n-        value = self.description or \'\'\n+        value = self.description or ""\n \n         # If description is containing linefeeds the HTML\n         # validation can break.\n         # See http://bo.geekworld.dk/diazo-bug-on-html5-validation-errors/\n         # Remember: \\r\\n - Windows, \\r - OS X, \\n - Linux/Unix\n-        value = value.replace(\'\\r\\n\', \' \').replace(\'\\r\', \' \').replace(\'\\n\', \' \')  # noqa\n+        value = value.replace("\\r\\n", " ").replace("\\r", " ").replace("\\n", " ")  # noqa\n \n         # this is a CMF accessor, so should return utf8-encoded\n         if six.PY2 and isinstance(value, six.text_type):\n-            value = value.encode(\'utf-8\')\n+            value = value.encode("utf-8")\n \n         return value\n \n     @security.protected(permissions.View)\n     def Type(self):\n         ti = self.getTypeInfo()\n-        return ti is not None and ti.Title() or \'Unknown\'\n+        return ti is not None and ti.Title() or "Unknown"\n \n     # IDublinCore\n \n@@ -508,7 +499,7 @@ def listCreators(self):\n     def Creator(self):\n         # Dublin Core Creator element - resource author.\n         creators = self.listCreators()\n-        return creators and creators[0] or \'\'\n+        return creators and creators[0] or ""\n \n     @security.protected(permissions.View)\n     def Subject(self):\n@@ -522,7 +513,7 @@ def Subject(self):\n     @security.protected(permissions.View)\n     def Publisher(self):\n         # Dublin Core Publisher element - resource publisher.\n-        return \'No publisher\'\n+        return "No publisher"\n \n     @security.protected(permissions.View)\n     def listContributors(self):\n@@ -542,7 +533,7 @@ def Date(self, zone=None):\n         if zone is None:\n             zone = _zone\n         # Return effective_date if set, modification date otherwise\n-        date = getattr(self, \'effective_date\', None)\n+        date = getattr(self, "effective_date", None)\n         if date is None:\n             date = self.modified()\n \n@@ -559,25 +550,25 @@ def CreationDate(self, zone=None):\n             date = datify(self.creation_date)\n             return date.toZone(zone).ISO()\n         else:\n-            return \'Unknown\'\n+            return "Unknown"\n \n     @security.protected(permissions.View)\n     def EffectiveDate(self, zone=None):\n         # Dublin Core Date element - date resource becomes effective.\n         if zone is None:\n             zone = _zone\n-        ed = getattr(self, \'effective_date\', None)\n+        ed = getattr(self, "effective_date", None)\n         ed = datify(ed)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n+        return ed and ed.toZone(zone).ISO() or "None"\n \n     @security.protected(permissions.View)\n     def ExpirationDate(self, zone=None):\n         # Dublin Core Date element - date resource expires.\n         if zone is None:\n             zone = _zone\n-        ed = getattr(self, \'expiration_date\', None)\n+        ed = getattr(self, "expiration_date", None)\n         ed = datify(ed)\n-        return ed and ed.toZone(zone).ISO() or \'None\'\n+        return ed and ed.toZone(zone).ISO() or "None"\n \n     @security.protected(permissions.View)\n     def ModificationDate(self, zone=None):\n@@ -610,23 +601,23 @@ def Rights(self):\n     def created(self):\n         # Dublin Core Date element - date resource created.\n         # allow for non-existent creation_date, existed always\n-        date = getattr(self, \'creation_date\', None)\n+        date = getattr(self, "creation_date", None)\n         date = datify(date)\n         return date is None and FLOOR_DATE or date\n \n     @security.protected(permissions.View)\n     def effective(self):\n         # Dublin Core Date element - date resource becomes effective.\n-        date = getattr(self, \'effective_date\', _marker)\n+        date = getattr(self, "effective_date", _marker)\n         if date is _marker:\n-            date = getattr(self, \'creation_date\', None)\n+            date = getattr(self, "creation_date", None)\n         date = datify(date)\n         return date is None and FLOOR_DATE or date\n \n     @security.protected(permissions.View)\n     def expires(self):\n         # Dublin Core Date element - date resource expires.\n-        date = getattr(self, \'expiration_date\', None)\n+        date = getattr(self, "expiration_date", None)\n         date = datify(date)\n         return date is None and CEILING_DATE or date\n \n@@ -644,10 +635,8 @@ def modified(self):\n     @security.protected(permissions.View)\n     def isEffective(self, date):\n         # Is the date within the resource\'s effective range?\n-        pastEffective = (\n-            self.effective_date is None or self.effective_date <= date)\n-        beforeExpiration = (\n-            self.expiration_date is None or self.expiration_date >= date)\n+        pastEffective = self.effective_date is None or self.effective_date <= date\n+        beforeExpiration = self.expiration_date is None or self.expiration_date >= date\n         return pastEffective and beforeExpiration\n \n     # IMutableDublinCore\n@@ -680,9 +669,8 @@ def setSubject(self, subject):\n     def setContributors(self, contributors):\n         # Set Dublin Core Contributor elements - resource collaborators.\n         if isinstance(contributors, six.string_types):\n-            contributors = contributors.split(\';\')\n-        self.contributors = tuple(\n-            safe_unicode(c.strip()) for c in contributors)\n+            contributors = contributors.split(";")\n+        self.contributors = tuple(safe_unicode(c.strip()) for c in contributors)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def setEffectiveDate(self, effective_date):\n@@ -712,18 +700,24 @@ def setRights(self, rights):\n \n @implementer(IDexterityItem)\n class Item(PasteBehaviourMixin, BrowserDefaultMixin, DexterityContent):\n-    """A non-containerish, CMFish item\n-    """\n+    """A non-containerish, CMFish item"""\n \n     __providedBy__ = FTIAwareSpecification()\n     __allow_access_to_unprotected_subobjects__ = AttributeValidator()\n \n     isPrincipiaFolderish = 0\n \n-    manage_options = PropertyManager.manage_options + ({\n-        \'label\': \'View\',\n-        \'action\': \'view\',\n-    },) + CMFCatalogAware.manage_options + SimpleItem.manage_options\n+    manage_options = (\n+        PropertyManager.manage_options\n+        + (\n+            {\n+                "label": "View",\n+                "action": "view",\n+            },\n+        )\n+        + CMFCatalogAware.manage_options\n+        + SimpleItem.manage_options\n+    )\n \n     # Be explicit about which __getattr__ to use\n     __getattr__ = DexterityContent.__getattr__\n@@ -731,26 +725,25 @@ class Item(PasteBehaviourMixin, BrowserDefaultMixin, DexterityContent):\n \n @implementer(IDexterityContainer)\n class Container(\n-        PathReprProvider,\n-        PasteBehaviourMixin, DAVCollectionMixin, BrowserDefaultMixin,\n-        CMFCatalogAware, CMFOrderedBTreeFolderBase, DexterityContent):\n-    """Base class for folderish items\n-    """\n+    PathReprProvider,\n+    PasteBehaviourMixin,\n+    DAVCollectionMixin,\n+    BrowserDefaultMixin,\n+    CMFCatalogAware,\n+    CMFOrderedBTreeFolderBase,\n+    DexterityContent,\n+):\n+    """Base class for folderish items"""\n \n     __providedBy__ = FTIAwareSpecification()\n     __allow_access_to_unprotected_subobjects__ = AttributeValidator()\n \n     security = ClassSecurityInfo()\n-    security.declareProtected(\n-        acpermissions.copy_or_move, \'manage_copyObjects\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_cutObjects\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_pasteObjects\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_renameObject\')\n-    security.declareProtected(\n-        permissions.ModifyPortalContent, \'manage_renameObjects\')\n+    security.declareProtected(acpermissions.copy_or_move, "manage_copyObjects")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_cutObjects")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_pasteObjects")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_renameObject")\n+    security.declareProtected(permissions.ModifyPortalContent, "manage_renameObjects")\n \n     isPrincipiaFolderish = 1\n \n@@ -793,12 +786,9 @@ def manage_delObjects(self, ids=None, REQUEST=None):\n         for id in ids:\n             item = self._getOb(id)\n             if not getSecurityManager().checkPermission(\n-                permissions.DeleteObjects,\n-                item\n+                permissions.DeleteObjects, item\n             ):\n-                raise Unauthorized(\n-                    "Do not have permissions to remove this object"\n-                )\n+                raise Unauthorized("Do not have permissions to remove this object")\n         return super(Container, self).manage_delObjects(ids, REQUEST=REQUEST)\n \n     # override PortalFolder\'s allowedContentTypes to respect IConstrainTypes\n@@ -824,12 +814,12 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n             # an Unauthorized over a ValueError.\n             fti = queryUtility(ITypeInformation, name=type_name)\n             if fti is not None and not fti.isConstructionAllowed(self):\n-                raise Unauthorized(\'Cannot create %s\' % fti.getId())\n+                raise Unauthorized("Cannot create %s" % fti.getId())\n \n             allowed_ids = [i.getId() for i in constrains.allowedContentTypes()]\n             if type_name not in allowed_ids:\n                 raise ValueError(\n-                    \'Subobject type disallowed by IConstrainTypes adapter: %s\'\n+                    "Subobject type disallowed by IConstrainTypes adapter: %s"\n                     % type_name\n                 )\n \n@@ -839,8 +829,7 @@ def invokeFactory(self, type_name, id, RESPONSE=None, *args, **kw):\n \n \n def reindexOnModify(content, event):\n-    """When an object is modified, re-index it in the catalog\n-    """\n+    """When an object is modified, re-index it in the catalog"""\n \n     if event.object is not content:\n         return\ndiff --git a/plone/dexterity/events.py b/plone/dexterity/events.py\nindex 4bee910..81e08bd 100644\n--- a/plone/dexterity/events.py\n+++ b/plone/dexterity/events.py\n@@ -1,13 +1,12 @@\n # -*- coding: utf-8 -*-\n from plone.dexterity import interfaces\n-from zope.interface.interfaces import ObjectEvent\n from zope.interface import implementer\n+from zope.interface.interfaces import ObjectEvent\n \n \n @implementer(interfaces.IEditBegunEvent)\n class EditBegunEvent(ObjectEvent):\n-    """An edit operation was begun\n-    """\n+    """An edit operation was begun"""\n \n \n @implementer(interfaces.IAddBegunEvent)\n@@ -19,8 +18,7 @@ class AddBegunEvent(ObjectEvent):\n \n @implementer(interfaces.IEditCancelledEvent)\n class EditCancelledEvent(ObjectEvent):\n-    """An edit operation was cancelled\n-    """\n+    """An edit operation was cancelled"""\n \n \n @implementer(interfaces.IAddCancelledEvent)\ndiff --git a/plone/dexterity/exportimport.py b/plone/dexterity/exportimport.py\nindex 949c0b1..ee39472 100644\n--- a/plone/dexterity/exportimport.py\n+++ b/plone/dexterity/exportimport.py\n@@ -9,14 +9,17 @@\n from Products.GenericSetup.interfaces import IFilesystemExporter\n from Products.GenericSetup.interfaces import IFilesystemImporter\n from Products.GenericSetup.utils import _getDottedName\n+from six import BytesIO\n from six import StringIO\n from zope.component import queryAdapter\n from zope.interface import implementer\n \n+import six\n+\n \n @implementer(IFilesystemExporter, IFilesystemImporter)\n class DexterityContentExporterImporter(FolderishExporterImporter):\n-    """ Tree-walking exporter / importer for Dexterity types.\n+    """Tree-walking exporter / importer for Dexterity types.\n \n     This is based on the generic one in GenericSetup,\n     but it uses Dexterity\'s rfc822 serialization support\n@@ -40,12 +43,11 @@ def __init__(self, context):\n         self.context = context\n \n     def export(self, export_context, subdir, root=False):\n-        """ See IFilesystemExporter.\n-        """\n+        """See IFilesystemExporter."""\n         context = self.context\n \n         if not root:\n-            subdir = \'%s/%s\' % (subdir, context.getId())\n+            subdir = "%s/%s" % (subdir, context.getId())\n \n         exportable = self.listExportableItems()\n \n@@ -63,19 +65,19 @@ def export(self, export_context, subdir, root=False):\n             csv_writer.writerow((object_id, factory_name))\n \n         export_context.writeDataFile(\n-            \'.objects\',\n+            ".objects",\n             text=stream.getvalue(),\n-            content_type=\'text/comma-separated-values\',\n+            content_type="text/comma-separated-values",\n             subdir=subdir,\n         )\n \n         props = context.manage_FTPget()\n-        if hasattr(props, \'read\'):\n+        if hasattr(props, "read"):\n             props = props.read()\n         export_context.writeDataFile(\n-            \'.data\',\n+            ".data",\n             text=props,\n-            content_type=\'text/plain\',\n+            content_type="text/plain",\n             subdir=subdir,\n         )\n \n@@ -84,19 +86,18 @@ def export(self, export_context, subdir, root=False):\n                 adapter.export(export_context, subdir)\n \n     def import_(self, import_context, subdir, root=False):\n-        """ See IFilesystemImporter.\n-        """\n+        """See IFilesystemImporter."""\n         context = self.context\n         if not root:\n-            subdir = \'%s/%s\' % (subdir, context.getId())\n+            subdir = "%s/%s" % (subdir, context.getId())\n \n-        data = import_context.readDataFile(\'.data\', subdir)\n+        data = import_context.readDataFile(".data", subdir)\n         if data is not None:\n-            request = FauxDAVRequest(BODY=data, BODYFILE=StringIO(data))\n+            request = FauxDAVRequest(BODY=data, BODYFILE=BytesIO(data))\n             response = FauxDAVResponse()\n             context.PUT(request, response)\n \n-        preserve = import_context.readDataFile(\'.preserve\', subdir)\n+        preserve = import_context.readDataFile(".preserve", subdir)\n         must_preserve = self._mustPreserve()\n \n         prior = context.objectIds()\n@@ -104,6 +105,9 @@ def import_(self, import_context, subdir, root=False):\n         if not preserve:\n             preserve = []\n         else:\n+            # Make sure ``preserve`` is a native string\n+            if six.PY3 and not isinstance(preserve, str):\n+                preserve = preserve.decode("utf-8")\n             preserve = _globtest(preserve, prior)\n \n         preserve.extend([x[0] for x in must_preserve])\n@@ -112,11 +116,13 @@ def import_(self, import_context, subdir, root=False):\n             if id not in preserve:\n                 context._delObject(id)\n \n-        objects = import_context.readDataFile(\'.objects\', subdir)\n+        objects = import_context.readDataFile(".objects", subdir)\n         if objects is None:\n             return\n \n-        dialect = \'excel\'\n+        dialect = "excel"\n+        if six.PY3 and not isinstance(objects, str):\n+            objects = objects.decode("utf-8")\n         stream = StringIO(objects)\n \n         rowiter = reader(stream, dialect)\n@@ -127,12 +133,14 @@ def import_(self, import_context, subdir, root=False):\n         for object_id, type_name in rows:\n \n             if object_id not in existing:\n-                object = self._makeInstance(object_id, type_name,\n-                                            subdir, import_context)\n+                object = self._makeInstance(\n+                    object_id, type_name, subdir, import_context\n+                )\n                 if object is None:\n-                    logger = import_context.getLogger(\'SFWA\')\n-                    logger.warning("Couldn\'t make instance: %s/%s" %\n-                                   (subdir, object_id))\n+                    logger = import_context.getLogger("SFWA")\n+                    logger.warning(\n+                        "Couldn\'t make instance: %s/%s" % (subdir, object_id)\n+                    )\n                     continue\n \n             wrapped = context._getOb(object_id)\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex 9df8f72..e0d0d29 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -11,8 +11,7 @@\n \n @implementer(IDexterityFactory)\n class DexterityFactory(Persistent, Factory):\n-    """A factory for Dexterity content.\n-    """\n+    """A factory for Dexterity content."""\n \n     def __init__(self, portal_type):\n         self.portal_type = portal_type\n@@ -33,8 +32,8 @@ def __call__(self, *args, **kw):\n         klass = resolveDottedName(fti.klass) if fti.klass else None\n         if klass is None or not callable(klass):\n             raise ValueError(\n-                "Content class %s set for type %s is not valid" %\n-                (fti.klass, self.portal_type)\n+                "Content class %s set for type %s is not valid"\n+                % (fti.klass, self.portal_type)\n             )\n \n         try:\n@@ -47,7 +46,7 @@ def __call__(self, *args, **kw):\n \n         # Set portal_type if not set, but avoid creating an instance variable\n         # if possible\n-        if getattr(obj, \'portal_type\', \'\') != self.portal_type:\n+        if getattr(obj, "portal_type", "") != self.portal_type:\n             obj.portal_type = self.portal_type\n \n         return obj\n@@ -59,4 +58,4 @@ def getInterfaces(self):\n         return spec\n \n     def __repr__(self):\n-        return \'<%s for %s>\' % (self.__class__.__name__, self.portal_type)\n+        return "<%s for %s>" % (self.__class__.__name__, self.portal_type)\ndiff --git a/plone/dexterity/filerepresentation.py b/plone/dexterity/filerepresentation.py\nindex c0ed037..58a0d84 100644\n--- a/plone/dexterity/filerepresentation.py\n+++ b/plone/dexterity/filerepresentation.py\n@@ -71,7 +71,7 @@ def get_size(self):\n         if sized is None:\n             return 0\n         unit, size = sized.sizeForSorting()\n-        if unit in (\'byte\', \'bytes\'):\n+        if unit in ("byte", "bytes"):\n             return size\n         return 0\n \n@@ -87,7 +87,7 @@ def getSize(self):\n             adapter = schema(self)\n             for name, field in getFieldsInOrder(schema):\n                 value = getattr(adapter, name, None)\n-                if hasattr(value, \'getSize\'):\n+                if hasattr(value, "getSize"):\n                     size += value.getSize()\n         return size\n \n@@ -106,8 +106,7 @@ def Format(self):\n \n     @security.protected(permissions.View)\n     def manage_DAVget(self):\n-        """Get the body of the content item in a WebDAV response.\n-        """\n+        """Get the body of the content item in a WebDAV response."""\n         return self.manage_FTPget()\n \n     @security.protected(permissions.View)\n@@ -119,7 +118,7 @@ def manage_FTPget(self, REQUEST=None, RESPONSE=None):\n         """\n         reader = IRawReadFile(self, None)\n         if reader is None:\n-            return \'\'\n+            return ""\n \n         request = REQUEST is not None and REQUEST or self.REQUEST\n         response = RESPONSE is not None and RESPONSE or request.response\n@@ -130,14 +129,19 @@ def manage_FTPget(self, REQUEST=None, RESPONSE=None):\n         if mimeType is not None:\n             if encoding is not None:\n                 response.setHeader(\n-                    \'Content-Type\', \'%s; charset="%s"\' % (mimeType, encoding,)\n+                    "Content-Type",\n+                    \'%s; charset="%s"\'\n+                    % (\n+                        mimeType,\n+                        encoding,\n+                    ),\n                 )\n             else:\n-                response.setHeader(\'Content-Type\', mimeType)\n+                response.setHeader("Content-Type", mimeType)\n \n         size = reader.size()\n         if size is not None:\n-            response.setHeader(\'Content-Length\', str(size))\n+            response.setHeader("Content-Length", str(size))\n \n         # if the reader is an iterator that the publisher can handle, return\n         # it as-is. Otherwise, read the full contents\n@@ -163,7 +167,7 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n         self.dav__init(request, response)\n         self.dav__simpleifhandler(request, response, refresh=1)\n \n-        infile = request.get(\'BODYFILE\', None)\n+        infile = request.get("BODYFILE", None)\n         if infile is None:\n             raise MethodNotAllowed(\n                 "Cannot complete PUT request: No BODYFILE in request"\n@@ -175,17 +179,17 @@ def PUT(self, REQUEST=None, RESPONSE=None):\n                 "Cannot complete PUT request: No IRawWriteFile adapter found"\n             )\n \n-        contentTypeHeader = request.get_header(\'content-type\', None)\n+        contentTypeHeader = request.get_header("content-type", None)\n \n         if contentTypeHeader is not None:\n             msg = Message()\n-            msg[\'Content-Type\'] = contentTypeHeader\n+            msg["Content-Type"] = contentTypeHeader\n \n             mimeType = msg.get_content_type()\n             if mimeType is not None:\n                 writer.mimeType = mimeType\n \n-            charset = msg.get_param(\'charset\')\n+            charset = msg.get_param("charset")\n             if charset is not None:\n                 writer.encoding = charset\n \n@@ -266,7 +270,7 @@ class FolderDataResource(Implicit, Resource):\n     security = ClassSecurityInfo()\n \n     def __init__(self, name, parent):\n-        self.__dict__.update({\'__parent__\': parent, \'__name__\': name})\n+        self.__dict__.update({"__parent__": parent, "__name__": name})\n \n     # We need to proxy certain things to the parent for getting and setting\n     # of property sheet values to work.\n@@ -316,14 +320,12 @@ def HEAD(self, REQUEST, RESPONSE):\n \n     @security.protected(permissions.ListFolderContents)\n     def OPTIONS(self, REQUEST, RESPONSE):\n-        """OPTIONS request: delegate to parent\n-        """\n+        """OPTIONS request: delegate to parent"""\n         return self.__parent__.OPTIONS(REQUEST, RESPONSE)\n \n     @security.protected(permissions.View)\n     def TRACE(self, REQUEST, RESPONSE):\n-        """TRACE request: delegate to parent\n-        """\n+        """TRACE request: delegate to parent"""\n         return self.__parent__.TRACE(REQUEST, RESPONSE)\n \n     @security.protected(permissions.View)\n@@ -346,78 +348,61 @@ def PROPPATCH(self, REQUEST, RESPONSE):\n \n     @security.protected(permissions.ModifyPortalContent)\n     def LOCK(self, REQUEST, RESPONSE):\n-        """LOCK request: delegate to parent\n-        """\n+        """LOCK request: delegate to parent"""\n         return self.__parent__.LOCK(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def UNLOCK(self, REQUEST, RESPONSE):\n-        """UNLOCK request: delegate to parent\n-        """\n+        """UNLOCK request: delegate to parent"""\n         return self.__parent__.UNLOCK(REQUEST, RESPONSE)\n \n     @security.protected(permissions.ModifyPortalContent)\n     def PUT(self, REQUEST, RESPONSE):\n-        """PUT request: delegate to parent\n-        """\n+        """PUT request: delegate to parent"""\n         return self.__parent__.PUT(REQUEST, RESPONSE)\n \n     @security.protected(permissions.AddPortalContent)\n     def MKCOL(self, REQUEST, RESPONSE):\n-        """MKCOL request: not allowed\n-        """\n+        """MKCOL request: not allowed"""\n         raise MethodNotAllowed(\n-            \'Cannot create a collection inside a folder data: try at the \'\n-            \'folder level instead\'\n+            "Cannot create a collection inside a folder data: try at the "\n+            "folder level instead"\n         )\n \n     @security.protected(permissions.DeleteObjects)\n     def DELETE(self, REQUEST, RESPONSE):\n-        """DELETE request: not allowed\n-        """\n-        raise MethodNotAllowed(\n-            \'Cannot delete folder data: delete folder instead\'\n-        )\n+        """DELETE request: not allowed"""\n+        raise MethodNotAllowed("Cannot delete folder data: delete folder instead")\n \n     @security.protected(permissions.AddPortalContent)\n     def COPY(self, REQUEST, RESPONSE):\n-        """COPY request: not allowed\n-        """\n-        raise MethodNotAllowed(\n-            \'Cannot copy folder data: copy the folder instead\'\n-        )\n+        """COPY request: not allowed"""\n+        raise MethodNotAllowed("Cannot copy folder data: copy the folder instead")\n \n     @security.protected(permissions.AddPortalContent)\n     def MOVE(self, REQUEST, RESPONSE):\n-        """MOVE request: not allowed\n-        """\n-        raise MethodNotAllowed(\n-            \'Cannot move folder data: move the folder instead\'\n-        )\n+        """MOVE request: not allowed"""\n+        raise MethodNotAllowed("Cannot move folder data: move the folder instead")\n \n     @security.protected(permissions.View)\n     def manage_DAVget(self):\n-        """DAV content access: delete to manage_FTPget()\n-        """\n+        """DAV content access: delete to manage_FTPget()"""\n         return self.__parent__.manage_DAVget()\n \n     @security.protected(permissions.View)\n     def manage_FTPget(self):\n-        """FTP access: delegate to parent\n-        """\n+        """FTP access: delegate to parent"""\n         return self.__parent__.manage_FTPget()\n \n     @security.protected(permissions.ListFolderContents)\n     def listDAVObjects(self):\n-        """DAV object listing: return nothing\n-        """\n+        """DAV object listing: return nothing"""\n         return []\n \n \n @implementer(IStreamIterator)\n class StringStreamIterator(object):\n-    """Simple stream iterator to allow efficient data streaming.\n-    """\n+    """Simple stream iterator to allow efficient data streaming."""\n \n     def __init__(self, data, size=None, chunk=1 << 16):\n         """Consume data (a str) into a temporary file and prepare streaming.\n@@ -427,11 +412,11 @@ def __init__(self, data, size=None, chunk=1 << 16):\n \n         chunk is the chunk size for the iterator\n         """\n-        f = tempfile.TemporaryFile(mode=\'w+b\')\n+        f = tempfile.TemporaryFile(mode="w+b")\n         f.write(data)\n \n         if size is not None:\n-            assert size == f.tell(), \'Size argument does not match data length\'\n+            assert size == f.tell(), "Size argument does not match data length"\n         else:\n             size = f.tell()\n \n@@ -488,12 +473,12 @@ def __init__(self, context):\n     def __call__(self, name, contentType, data):\n \n         # Deal with Finder cruft\n-        if name == \'.DS_Store\':\n+        if name == ".DS_Store":\n             raise Unauthorized("Refusing to store Mac OS X resource forks")\n-        elif name.startswith(\'._\'):\n+        elif name.startswith("._"):\n             raise Unauthorized("Refusing to store Mac OS X resource forks")\n \n-        registry = getToolByName(self.context, \'content_type_registry\', None)\n+        registry = getToolByName(self.context, "content_type_registry", None)\n         if registry is None:\n             return None  # fall back on default\n \n@@ -501,7 +486,7 @@ def __call__(self, name, contentType, data):\n         if typeObjectName is None:\n             return  # fall back on default\n \n-        typesTool = getToolByName(self.context, \'portal_types\')\n+        typesTool = getToolByName(self.context, "portal_types")\n \n         targetType = typesTool.getTypeInfo(typeObjectName)\n         if targetType is None:\n@@ -529,19 +514,17 @@ def __call__(self, name, contentType, data):\n             if contextType is not None:\n                 if not contextType.allowType(typeObjectName):\n                     raise Unauthorized(\n-                        "Creating a %s object here is not allowed" %\n-                        typeObjectName\n+                        "Creating a %s object here is not allowed" % typeObjectName\n                     )\n \n             if not targetType.isConstructionAllowed(self.context):\n                 raise Unauthorized(\n-                    "Creating a %s object here is not allowed" %\n-                    typeObjectName\n+                    "Creating a %s object here is not allowed" % typeObjectName\n                 )\n \n             obj = createObject(targetType.factory, name)\n \n-            if hasattr(obj, \'_setPortalTypeName\'):\n+            if hasattr(obj, "_setPortalTypeName"):\n                 obj._setPortalTypeName(targetType.getId())\n \n             # we fire this event here, because NullResource.PUT will now go\n@@ -569,7 +552,7 @@ def __init__(self, context):\n         self._size = 0\n \n     mimeType = None\n-    encoding = \'utf-8\'\n+    encoding = "utf-8"\n     name = None\n \n     @property\n@@ -649,19 +632,19 @@ def mimeType(self):\n                     if IPrimaryField.providedBy(field):\n                         if foundOne:\n                             # more than one primary field\n-                            return \'message/rfc822\'\n+                            return "message/rfc822"\n                         else:\n                             foundOne = True\n             # zero or one primary fields\n-            return \'text/plain\'\n+            return "text/plain"\n         if not self._getMessage().is_multipart():\n-            return \'text/plain\'\n+            return "text/plain"\n         else:\n-            return \'message/rfc822\'\n+            return "message/rfc822"\n \n     @property\n     def encoding(self):\n-        return self._getMessage().get_charset() or \'utf-8\'\n+        return self._getMessage().get_charset() or "utf-8"\n \n     @property\n     def name(self):\n@@ -679,13 +662,10 @@ def size(self):\n     @memoize\n     def _getMessage(self):\n         # Construct message on demand.\n-        message = constructMessageFromSchemata(\n-            self.context,\n-            iterSchemata(self.context)\n-        )\n+        message = constructMessageFromSchemata(self.context, iterSchemata(self.context))\n \n         # Store the portal type in a header, to allow it to be identifed later\n-        message[\'Portal-Type\'] = self.context.portal_type\n+        message["Portal-Type"] = self.context.portal_type\n \n         return message\n \n@@ -697,18 +677,17 @@ def _getStream(self):\n         # publisher, which will serve it efficiently even after the\n         # transaction is closed\n         message = self._getMessage()\n-        out = tempfile.TemporaryFile(mode=\'w+b\')\n+        out = tempfile.TemporaryFile(mode="w+b")\n         if six.PY2:\n             out.write(message.as_string())\n         else:\n-            out.write(message.as_string().encode(\'utf-8\'))\n+            out.write(message.as_string().encode("utf-8"))\n         self._size = out.tell()\n         out.seek(0)\n         return out\n \n     def __next__(self):\n-        """ Iterate over the stream\n-        """\n+        """Iterate over the stream"""\n         return self._getStream().__next__()\n \n \n@@ -727,7 +706,7 @@ def __init__(self, context):\n         self._written = 0\n \n     mimeType = None\n-    encoding = \'utf-8\'\n+    encoding = "utf-8"\n     name = None\n \n     @property\n@@ -785,7 +764,7 @@ def __init__(self, context):\n         self.context = context\n \n         self._mimeType = None\n-        self._encoding = \'utf-8\'\n+        self._encoding = "utf-8"\n         self._closed = False\n         self._name = None\n         self._written = 0\n@@ -797,9 +776,9 @@ def mimeType(self):\n         if self._message is None:\n             return self._mimeType\n         elif not self._message.is_multipart():\n-            return \'text/plain\'\n+            return "text/plain"\n         else:\n-            return \'message/rfc822\'\n+            return "message/rfc822"\n \n     @mimeType.setter\n     def mimeType(self, value):\n@@ -839,10 +818,7 @@ def close(self):\n         self._message = self._parser.close()\n         self._closed = True\n         initializeObjectFromSchemata(\n-            self.context,\n-            iterSchemata(self.context),\n-            self._message,\n-            self._encoding\n+            self.context, iterSchemata(self.context), self._message, self._encoding\n         )\n \n     def write(self, data):\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 4fa9f08..a6b3830 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -32,7 +32,6 @@\n \n @implementer(IDexterityFTIModificationDescription)\n class DexterityFTIModificationDescription(object):\n-\n     def __init__(self, attribute, oldValue):\n         self.attribute = attribute\n         self.oldValue = oldValue\n@@ -40,105 +39,102 @@ def __init__(self, attribute, oldValue):\n \n @implementer(IDexterityFTI)\n class DexterityFTI(base.DynamicViewTypeInformation):\n-    """A Dexterity FTI\n-    """\n+    """A Dexterity FTI"""\n \n     meta_type = "Dexterity FTI"\n \n-    behaviors_type = \'ulines\'\n+    behaviors_type = "ulines"\n     if six.PY2:\n-        behaviors_type = \'lines\'\n+        behaviors_type = "lines"\n \n     _properties = base.DynamicViewTypeInformation._properties + (\n         {\n-            \'id\': \'add_permission\',\n-            \'type\': \'selection\',\n-            \'select_variable\': \'possiblePermissionIds\',\n-            \'mode\': \'w\',\n-            \'label\': \'Add permission\',\n-            \'description\': \'Permission needed to be able to add content of \'\n-                           \'this type\',\n+            "id": "add_permission",\n+            "type": "selection",\n+            "select_variable": "possiblePermissionIds",\n+            "mode": "w",\n+            "label": "Add permission",\n+            "description": "Permission needed to be able to add content of "\n+            "this type",\n         },\n         {\n-            \'id\': \'klass\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Content type class\',\n-            \'description\': \'Dotted name to the class that contains the \'\n-                           \'content type\'\n+            "id": "klass",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Content type class",\n+            "description": "Dotted name to the class that contains the " "content type",\n         },\n         {\n-            \'id\': \'behaviors\',\n-            \'type\': behaviors_type,\n-            \'mode\': \'w\',\n-            \'label\': \'Behaviors\',\n-            \'description\': \'Names of enabled behaviors type\'\n+            "id": "behaviors",\n+            "type": behaviors_type,\n+            "mode": "w",\n+            "label": "Behaviors",\n+            "description": "Names of enabled behaviors type",\n         },\n         {\n-            \'id\': \'schema\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Schema\',\n-            \'description\': "Dotted name to the interface describing content "\n-                           "type\'s schema.  This does not need to be given "\n-                           "if model_source or model_file are given, and "\n-                           "either contains an unnamed (default) schema."\n+            "id": "schema",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Schema",\n+            "description": "Dotted name to the interface describing content "\n+            "type\'s schema.  This does not need to be given "\n+            "if model_source or model_file are given, and "\n+            "either contains an unnamed (default) schema.",\n         },\n         {\n-            \'id\': \'model_source\',\n-            \'type\': \'text\',\n-            \'mode\': \'w\',\n-            \'label\': \'Model source\',\n-            \'description\': "XML source for the type\'s model. Note that this "\n-                           "takes precedence over any model file."\n+            "id": "model_source",\n+            "type": "text",\n+            "mode": "w",\n+            "label": "Model source",\n+            "description": "XML source for the type\'s model. Note that this "\n+            "takes precedence over any model file.",\n         },\n         {\n-            \'id\': \'model_file\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Model file\',\n-            \'description\': "Path to file containing the schema model. "\n-                           "This can be relative to a package, e.g. "\n-                           "\'my.package:myschema.xml\'."\n+            "id": "model_file",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Model file",\n+            "description": "Path to file containing the schema model. "\n+            "This can be relative to a package, e.g. "\n+            "\'my.package:myschema.xml\'.",\n         },\n         {\n-            \'id\': \'schema_policy\',\n-            \'type\': \'string\',\n-            \'mode\': \'w\',\n-            \'label\': \'Content type schema policy\',\n-            \'description\': \'Name of the schema policy.\'\n+            "id": "schema_policy",\n+            "type": "string",\n+            "mode": "w",\n+            "label": "Content type schema policy",\n+            "description": "Name of the schema policy.",\n         },\n-\n     )\n \n     default_aliases = {\n-        \'(Default)\': \'(dynamic view)\',\n-        \'view\': \'(selected layout)\',\n-        \'edit\': \'@@edit\',\n-        \'sharing\': \'@@sharing\',\n+        "(Default)": "(dynamic view)",\n+        "view": "(selected layout)",\n+        "edit": "@@edit",\n+        "sharing": "@@sharing",\n     }\n \n     default_actions = [\n         {\n-            \'id\': \'view\',\n-            \'title\': \'View\',\n-            \'action\': \'string:${object_url}\',\n-            \'permissions\': (\'View\',)\n+            "id": "view",\n+            "title": "View",\n+            "action": "string:${object_url}",\n+            "permissions": ("View",),\n         },\n         {\n-            \'id\': \'edit\',\n-            \'title\': \'Edit\',\n-            \'action\': \'string:${object_url}/edit\',\n-            \'permissions\': (\'Modify portal content\',)\n+            "id": "edit",\n+            "title": "Edit",\n+            "action": "string:${object_url}/edit",\n+            "permissions": ("Modify portal content",),\n         },\n     ]\n \n-    immediate_view = \'view\'\n-    default_view = \'view\'\n-    view_methods = (\'view\',)\n-    add_permission = \'cmf.AddPortalContent\'\n+    immediate_view = "view"\n+    default_view = "view"\n+    view_methods = ("view",)\n+    add_permission = "cmf.AddPortalContent"\n     behaviors = []\n-    klass = \'plone.dexterity.content.Item\'\n+    klass = "plone.dexterity.content.Item"\n     model_source = """\\\n <model xmlns="http://namespaces.plone.org/supermodel/schema">\n     <schema />\n@@ -151,18 +147,20 @@ class DexterityFTI(base.DynamicViewTypeInformation):\n     def __init__(self, *args, **kwargs):\n         super(DexterityFTI, self).__init__(*args, **kwargs)\n \n-        if \'aliases\' not in kwargs:\n+        if "aliases" not in kwargs:\n             self.setMethodAliases(self.default_aliases)\n \n-        if \'actions\' not in kwargs:\n+        if "actions" not in kwargs:\n             for action in self.default_actions:\n-                self.addAction(id=action[\'id\'],\n-                               name=action[\'title\'],\n-                               action=action[\'action\'],\n-                               condition=action.get(\'condition\'),\n-                               permission=action.get(\'permissions\', ()),\n-                               category=action.get(\'category\', \'object\'),\n-                               visible=action.get(\'visible\', True))\n+                self.addAction(\n+                    id=action["id"],\n+                    name=action["title"],\n+                    action=action["action"],\n+                    condition=action.get("condition"),\n+                    permission=action.get("permissions", ()),\n+                    category=action.get("category", "object"),\n+                    visible=action.get("visible", True),\n+                )\n \n         # Default factory name to be the FTI name\n         if not self.factory:\n@@ -186,31 +184,29 @@ def __init__(self, *args, **kwargs):\n \n         if not self.add_view_expr:\n             add_view_expr = kwargs.get(\n-                \'add_view_expr\',\n-                "string:${folder_url}/++add++%s" % self.getId()\n+                "add_view_expr", "string:${folder_url}/++add++%s" % self.getId()\n             )\n-            self._setPropValue(\'add_view_expr\', add_view_expr)\n+            self._setPropValue("add_view_expr", add_view_expr)\n \n         # Set the content_meta_type from the klass\n \n         klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n-            self.content_meta_type = getattr(klass, \'meta_type\', None)\n+            self.content_meta_type = getattr(klass, "meta_type", None)\n \n     def Title(self):\n         if self.title and self.i18n_domain:\n             if six.PY2:\n                 try:\n-                    return Message(self.title.decode(\'utf8\'), self.i18n_domain)\n+                    return Message(self.title.decode("utf8"), self.i18n_domain)\n                 except UnicodeDecodeError:\n-                    return Message(\n-                        self.title.decode(\'latin-1\'), self.i18n_domain)\n+                    return Message(self.title.decode("latin-1"), self.i18n_domain)\n             else:\n                 return Message(self.title, self.i18n_domain)\n         else:\n             if six.PY2:\n                 if self.title:\n-                    return self.title.decode(\'utf8\')\n+                    return self.title.decode("utf8")\n                 return self.getId()\n             return self.title or self.getId()\n \n@@ -218,16 +214,14 @@ def Description(self):\n         if self.description and self.i18n_domain:\n             if six.PY2:\n                 try:\n-                    return Message(\n-                        self.description.decode(\'utf8\'), self.i18n_domain)\n+                    return Message(self.description.decode("utf8"), self.i18n_domain)\n                 except UnicodeDecodeError:\n-                    return Message(\n-                        self.description.decode(\'latin-1\'), self.i18n_domain)\n+                    return Message(self.description.decode("latin-1"), self.i18n_domain)\n             else:\n                 return Message(self.description, self.i18n_domain)\n         else:\n             if six.PY2 and self.description:\n-                return self.description.decode(\'utf8\')\n+                return self.description.decode("utf8")\n             return self.description\n \n     def Metatype(self):\n@@ -236,12 +230,12 @@ def Metatype(self):\n         # BBB - this didn\'t use to be set\n         klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n-            self.content_meta_type = getattr(klass, \'meta_type\', None)\n+            self.content_meta_type = getattr(klass, "meta_type", None)\n         return self.content_meta_type\n \n     @property\n     def hasDynamicSchema(self):\n-        return not(self.schema)\n+        return not (self.schema)\n \n     def lookupSchema(self):\n         schema = None\n@@ -252,8 +246,8 @@ def lookupSchema(self):\n                 schema = utils.resolveDottedName(self.schema)\n             except ImportError:\n                 logging.warning(\n-                    u"Dexterity type FTI %s: schema dotted name [%s] cannot be resolved." %\n-                    (self.getId(), self.schema)\n+                    u"Dexterity type FTI %s: schema dotted name [%s] cannot be resolved."\n+                    % (self.getId(), self.schema)\n                 )\n                 # fall through to return a fake class with no\n                 # fields so that end user code doesn\'t break\n@@ -306,12 +300,12 @@ def _updateProperty(self, id, value):\n             modified(self, DexterityFTIModificationDescription(id, oldValue))\n \n             # Update meta_type from klass\n-            if id == \'klass\':\n+            if id == "klass":\n                 klass = None\n                 if new_value:\n                     klass = utils.resolveDottedName(new_value)\n                 if klass is not None:\n-                    self.content_meta_type = getattr(klass, \'meta_type\', None)\n+                    self.content_meta_type = getattr(klass, "meta_type", None)\n \n     # Allow us to specify a particular add permission rather than rely on ones\n     # stored in meta types that we don\'t have anyway\n@@ -324,54 +318,54 @@ def isConstructionAllowed(self, container):\n         if permission is None:\n             return False\n \n-        return bool(\n-            getSecurityManager().checkPermission(\n-                permission.title,\n-                container\n-            )\n-        )\n+        return bool(getSecurityManager().checkPermission(permission.title, container))\n \n     #\n     # Helper methods\n     #\n \n     def possiblePermissionIds(self):\n-        """Get a vocabulary of Zope 3 permission ids\n-        """\n+        """Get a vocabulary of Zope 3 permission ids"""\n         permission_names = set()\n         for permission in getAllUtilitiesRegisteredFor(IPermission):\n             permission_names.add(permission.id)\n         return sorted(permission_names)\n \n     def _absModelFile(self):\n-        colons = self.model_file.count(\':\')\n+        colons = self.model_file.count(":")\n         model_file = self.model_file\n \n         # We have a package and not an absolute Windows path\n-        if colons == 1 and self.model_file[1:3] != \':\\\\\':\n-            package, filename = self.model_file.split(\':\')\n+        if colons == 1 and self.model_file[1:3] != ":\\\\":\n+            package, filename = self.model_file.split(":")\n             mod = utils.resolveDottedName(package)\n             # let / work as path separator on all platforms\n-            filename = filename.replace(\'/\', os.path.sep)\n+            filename = filename.replace("/", os.path.sep)\n             model_file = os.path.join(os.path.split(mod.__file__)[0], filename)\n         else:\n             if not os.path.isabs(model_file):\n                 raise ValueError(\n                     u"Model file name %s is not an absolute path and does "\n                     u"not contain a package name in %s"\n-                    % (model_file, self.getId(),)\n+                    % (\n+                        model_file,\n+                        self.getId(),\n+                    )\n                 )\n \n         if not os.path.isfile(model_file):\n             raise ValueError(\n                 u"Model file %s in %s cannot be found"\n-                % (model_file, self.getId(),)\n+                % (\n+                    model_file,\n+                    self.getId(),\n+                )\n             )\n \n         return model_file\n \n \n-def _fixProperties(class_, ignored=[\'product\', \'content_meta_type\']):\n+def _fixProperties(class_, ignored=["product", "content_meta_type"]):\n     """Remove properties with the given ids, and ensure that later properties\n     override earlier ones with the same id\n     """\n@@ -381,17 +375,19 @@ def _fixProperties(class_, ignored=[\'product\', \'content_meta_type\']):\n     for item in reversed(class_._properties):\n         item = item.copy()\n \n-        if item[\'id\'] in processed:\n+        if item["id"] in processed:\n             continue\n \n         # Ignore some fields\n-        if item[\'id\'] in ignored:\n+        if item["id"] in ignored:\n             continue\n \n         properties.append(item)\n-        processed.add(\'id\')\n+        processed.add("id")\n \n     class_._properties = tuple(reversed(properties))\n+\n+\n _fixProperties(DexterityFTI)\n \n \n@@ -399,9 +395,9 @@ def _fixProperties(class_, ignored=[\'product\', \'content_meta_type\']):\n def register(fti):\n     """Helper method to:\n \n-         - register an FTI as a local utility\n-         - register a local factory utility\n-         - register an add view\n+    - register an FTI as a local utility\n+    - register a local factory utility\n+    - register an add view\n     """\n \n     fti = aq_base(fti)  # remove acquisition wrapper\n@@ -413,10 +409,7 @@ def register(fti):\n     fti_utility = queryUtility(IDexterityFTI, name=portal_type)\n     if fti_utility is None:\n         site_manager.registerUtility(\n-            fti,\n-            IDexterityFTI,\n-            portal_type,\n-            info=\'plone.dexterity.dynamic\'\n+            fti, IDexterityFTI, portal_type, info="plone.dexterity.dynamic"\n         )\n \n     factory_utility = queryUtility(IFactory, name=fti.factory)\n@@ -425,16 +418,16 @@ def register(fti):\n             DexterityFactory(portal_type),\n             IFactory,\n             fti.factory,\n-            info=\'plone.dexterity.dynamic\'\n+            info="plone.dexterity.dynamic",\n         )\n \n \n def unregister(fti, old_name=None):\n     """Helper method to:\n \n-        - unregister the FTI local utility\n-        - unregister any local factory utility associated with the FTI\n-        - unregister any local add view associated with the FTI\n+    - unregister the FTI local utility\n+    - unregister any local factory utility associated with the FTI\n+    - unregister any local add view associated with the FTI\n     """\n     site = queryUtility(ISiteRoot)\n     if site is None:\n@@ -457,21 +450,24 @@ def unregister_factory(factory_name, site_manager):\n     utilities = list(site_manager.registeredUtilities())\n     # Do nothing if an FTI is still using it\n     if factory_name in [\n-        f.component.factory for f in utilities\n-        if (f.provided, f.info) == (IDexterityFTI, \'plone.dexterity.dynamic\')\n+        f.component.factory\n+        for f in utilities\n+        if (f.provided, f.info) == (IDexterityFTI, "plone.dexterity.dynamic")\n     ]:\n         return\n \n     # If a factory with a matching name exists, remove it\n-    if [f for f in utilities\n+    if [\n+        f\n+        for f in utilities\n         if (f.provided, f.name, f.info)\n-            == (IFactory, factory_name, \'plone.dexterity.dynamic\')]:\n+        == (IFactory, factory_name, "plone.dexterity.dynamic")\n+    ]:\n         site_manager.unregisterUtility(provided=IFactory, name=factory_name)\n \n \n def ftiAdded(object, event):\n-    """When the FTI is created, install local components\n-    """\n+    """When the FTI is created, install local components"""\n \n     if not IDexterityFTI.providedBy(event.object):\n         return\n@@ -480,8 +476,7 @@ def ftiAdded(object, event):\n \n \n def ftiRemoved(object, event):\n-    """When the FTI is removed, uninstall local coponents\n-    """\n+    """When the FTI is removed, uninstall local coponents"""\n \n     if not IDexterityFTI.providedBy(event.object):\n         return\n@@ -490,15 +485,16 @@ def ftiRemoved(object, event):\n \n \n def ftiRenamed(object, event):\n-    """When the FTI is modified, ensure local components are still valid\n-    """\n+    """When the FTI is modified, ensure local components are still valid"""\n \n     if not IDexterityFTI.providedBy(event.object):\n         return\n \n-    if event.oldParent is None \\\n-       or event.newParent is None \\\n-       or event.oldName == event.newName:\n+    if (\n+        event.oldParent is None\n+        or event.newParent is None\n+        or event.oldName == event.newName\n+    ):\n         return\n \n     unregister(event.object, event.oldName)\n@@ -525,8 +521,8 @@ def ftiModified(object, event):\n     # was registered as a local utility to begin with. If so, remove the\n     # orphan.\n \n-    if \'factory\' in mod:\n-        old_factory = mod[\'factory\']\n+    if "factory" in mod:\n+        old_factory = mod["factory"]\n \n         site = getUtility(ISiteRoot)\n         site_manager = getSiteManager(site)\n@@ -541,26 +537,29 @@ def ftiModified(object, event):\n                 DexterityFactory(portal_type),\n                 IFactory,\n                 fti.factory,\n-                info=\'plone.dexterity.dynamic\'\n+                info="plone.dexterity.dynamic",\n             )\n \n     # Determine if we need to invalidate the schema at all\n-    if \'behaviors\' in mod \\\n-       or \'schema\' in mod \\\n-       or \'model_source\' in mod \\\n-       or \'model_file\' in mod \\\n-       or \'schema_policy\' in mod:\n+    if (\n+        "behaviors" in mod\n+        or "schema" in mod\n+        or "model_source" in mod\n+        or "model_file" in mod\n+        or "schema_policy" in mod\n+    ):\n \n         # Determine if we need to re-sync a dynamic schema\n-        if (fti.model_source or fti.model_file) \\\n-           and (\'model_source\' in mod or \'model_file\' in mod or \'schema_policy\' in mod):\n+        if (fti.model_source or fti.model_file) and (\n+            "model_source" in mod or "model_file" in mod or "schema_policy" in mod\n+        ):\n \n             mtime = getattr(fti, "_p_mtime", None) or ""\n             schemaName = portalTypeToSchemaName(portal_type, suffix=str(mtime))\n             schema = getattr(plone.dexterity.schema.generated, schemaName)\n \n             model = fti.lookupModel()\n-            sync_bases = \'schema_policy\' in mod\n+            sync_bases = "schema_policy" in mod\n             syncSchema(model.schema, schema, overwrite=True, sync_bases=sync_bases)\n \n         notify(SchemaInvalidatedEvent(portal_type))\ndiff --git a/plone/dexterity/interfaces.py b/plone/dexterity/interfaces.py\nindex e36cbe8..cf5dc42 100644\n--- a/plone/dexterity/interfaces.py\n+++ b/plone/dexterity/interfaces.py\n@@ -12,16 +12,17 @@\n try:\n     from zope.app.content import IContentType\n except ImportError:\n+\n     class IContentType(Interface):\n         pass\n \n+\n # id for pseudo-resource used to expose data for folderish items over WebDAV\n-DAV_FOLDER_DATA_ID = \'_data\'\n+DAV_FOLDER_DATA_ID = "_data"\n \n \n class IDexterityFTI(ITypeInformation):\n-    """The Factory Type Information for Dexterity content objects\n-    """\n+    """The Factory Type Information for Dexterity content objects"""\n \n     def lookupSchema():\n         """Return an InterfaceClass that represents the schema of this type.\n@@ -48,49 +49,45 @@ def lookupModel():\n     add_permission = zope.schema.DottedName(\n         title=u"Add permission",\n         description=u"Zope 3 permission name for the permission required to "\n-                    u"construct this content",\n+        u"construct this content",\n     )\n \n     behaviors = zope.schema.List(\n         title=u"Behaviors",\n         description=u"A list of behaviors that are enabled for this type. "\n-                    u"See plone.behavior for more details.",\n-        value_type=zope.schema.DottedName(title=u"Behavior name")\n+        u"See plone.behavior for more details.",\n+        value_type=zope.schema.DottedName(title=u"Behavior name"),\n     )\n \n     schema = zope.schema.DottedName(\n         title=u"Schema interface",\n         description=u"Dotted name to an interface describing the type. "\n-                    u"This is not required if there is a model file or a "\n-                    u"model source string containing an unnamed schema."\n+        u"This is not required if there is a model file or a "\n+        u"model source string containing an unnamed schema.",\n     )\n \n     model_source = zope.schema.Text(\n         title=u"Model text",\n-        description=u"XML representation of the model for this type. " +\n-                    u"If this is given, it will override any model_file."\n+        description=u"XML representation of the model for this type. "\n+        + u"If this is given, it will override any model_file.",\n     )\n \n     model_file = zope.schema.Text(\n         title=u"Model file",\n         description=u"A file that contains an XML model. "\n-                    u"This may be an absolute path, or one relative to a "\n-                    u"package, e.g. my.package:model.xml"\n+        u"This may be an absolute path, or one relative to a "\n+        u"package, e.g. my.package:model.xml",\n     )\n \n     hasDynamicSchema = zope.schema.Bool(\n-        title=u"Whether or not the FTI uses a dynamic schema.",\n-        readonly=True\n+        title=u"Whether or not the FTI uses a dynamic schema.", readonly=True\n     )\n \n \n class IDexterityFTIModificationDescription(IModificationDescription):\n-    """Descriptor passed with an IObjectModifiedEvent for a Dexterity FTI.\n-    """\n+    """Descriptor passed with an IObjectModifiedEvent for a Dexterity FTI."""\n \n-    attribute = zope.schema.ASCII(\n-        title=u"Name of the attribute that was modified"\n-    )\n+    attribute = zope.schema.ASCII(title=u"Name of the attribute that was modified")\n     oldValue = Attribute("Old value")\n \n \n@@ -104,15 +101,13 @@ class IDexterityFactory(IFactory):\n     """\n \n     portal_type = zope.schema.TextLine(\n-        title=u"Portal type name",\n-        description=u"The portal type this is an FTI for"\n+        title=u"Portal type name", description=u"The portal type this is an FTI for"\n     )\n \n \n # Schema\n class IDexteritySchema(Interface):\n-    """Base class for Dexterity schemata\n-    """\n+    """Base class for Dexterity schemata"""\n \n \n # Schema cache\n@@ -128,29 +123,24 @@ class ISchemaInvalidatedEvent(Interface):\n \n # Content\n class IDexterityContent(Interface):\n-    """Marker interface for dexterity-managed content objects\n-    """\n+    """Marker interface for dexterity-managed content objects"""\n \n \n class IDexterityItem(IDexterityContent):\n-    """Marker interface applied to dexterity-managed non-folderish objects\n-    """\n+    """Marker interface applied to dexterity-managed non-folderish objects"""\n \n \n class IDexterityContainer(IDexterityContent):\n-    """Marker interface applied to dexterity-managed folderish objects\n-    """\n+    """Marker interface applied to dexterity-managed folderish objects"""\n \n \n # Events\n class IBegunEvent(IObjectEvent):\n-    """Base begun event\n-    """\n+    """Base begun event"""\n \n \n class IEditBegunEvent(IBegunEvent):\n-    """An edit operation was begun\n-    """\n+    """An edit operation was begun"""\n \n \n class IAddBegunEvent(IBegunEvent):\n@@ -160,13 +150,11 @@ class IAddBegunEvent(IBegunEvent):\n \n \n class ICancelledEvent(IObjectEvent):\n-    """Base cancel event\n-    """\n+    """Base cancel event"""\n \n \n class IEditCancelledEvent(ICancelledEvent):\n-    """An edit operation was cancelled\n-    """\n+    """An edit operation was cancelled"""\n \n \n class IAddCancelledEvent(ICancelledEvent):\ndiff --git a/plone/dexterity/primary.py b/plone/dexterity/primary.py\nindex fb58ccc..759d530 100644\n--- a/plone/dexterity/primary.py\n+++ b/plone/dexterity/primary.py\n@@ -11,7 +11,6 @@\n @implementer(IPrimaryFieldInfo)\n @adapter(IDexterityContent)\n class PrimaryFieldInfo(object):\n-\n     def __init__(self, context):\n         self.context = context\n         primary = None\n@@ -22,7 +21,7 @@ def __init__(self, context):\n                     primary = (name, field)\n                     break\n         if not primary:\n-            raise TypeError(\'Could not adapt\', context, IPrimaryFieldInfo)\n+            raise TypeError("Could not adapt", context, IPrimaryFieldInfo)\n         self.fieldname, self.field = primary\n \n     @property\ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex ededc34..22e6b18 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -33,22 +33,22 @@\n log = logging.getLogger(__name__)\n \n # Dynamic modules\n-generated = dynamic.create(\'plone.dexterity.schema.generated\')\n-transient = types.ModuleType(\'transient\')\n+generated = dynamic.create("plone.dexterity.schema.generated")\n+transient = types.ModuleType("transient")\n \n _MARKER = dict()\n \n-FTI_CACHE_KEY = \'__plone_dexterity_fti_cache__\'\n+FTI_CACHE_KEY = "__plone_dexterity_fti_cache__"\n \n \n def invalidate_cache(fti):\n     fti._p_activate()\n-    fti.__dict__.pop(\'_v_schema_get\', None)\n-    fti.__dict__.pop(\'_v_schema_behavior_registrations\', None)\n-    fti.__dict__.pop(\'_v_schema_subtypes\', None)\n-    fti.__dict__.pop(\'_v_schema_schema_interfaces\', None)\n-    fti.__dict__.pop(\'_v_schema_modified\', None)\n-    fti.__dict__.pop(\'_v_schema_behavior_schema_interfaces\', None)\n+    fti.__dict__.pop("_v_schema_get", None)\n+    fti.__dict__.pop("_v_schema_behavior_registrations", None)\n+    fti.__dict__.pop("_v_schema_subtypes", None)\n+    fti.__dict__.pop("_v_schema_schema_interfaces", None)\n+    fti.__dict__.pop("_v_schema_modified", None)\n+    fti.__dict__.pop("_v_schema_behavior_schema_interfaces", None)\n     request = getRequest()\n     if request:\n         setattr(request, FTI_CACHE_KEY, None)\n@@ -72,8 +72,7 @@ def lookup_fti(portal_type, cache=True):\n \n                 if fti is None:\n                     fti_cache[portal_type] = fti = queryUtility(\n-                        IDexterityFTI,\n-                        name=portal_type\n+                        IDexterityFTI, name=portal_type\n                     )\n                 return fti\n         return queryUtility(IDexterityFTI, name=portal_type)\n@@ -81,12 +80,11 @@ def lookup_fti(portal_type, cache=True):\n         # its already an IDexterityFTI instance\n         return portal_type\n     raise ValueError(\n-        \'portal_type has to either string or IDexterityFTI instance but is \'\n-        \'{0!r}\'.format(portal_type)\n+        "portal_type has to either string or IDexterityFTI instance but is "\n+        "{0!r}".format(portal_type)\n     )\n \n \n-\n def volatile(func):\n     @functools.wraps(func)\n     def decorator(self, portal_type):\n@@ -103,7 +101,7 @@ def decorator(self, portal_type):\n         if fti is None:\n             return func(self, None)\n         if self.cache_enabled:\n-            key = \'_v_schema_%s\' % func.__name__\n+            key = "_v_schema_%s" % func.__name__\n             cache = getattr(fti, key, _MARKER)\n             if cache is not _MARKER:\n                 mtime, value = cache\n@@ -116,6 +114,7 @@ def decorator(self, portal_type):\n             setattr(fti, key, (fti._p_mtime, value))\n \n         return value\n+\n     return decorator\n \n \n@@ -180,10 +179,8 @@ def behavior_registrations(self, fti):\n                 warnings.warn(\n                     \'No behavior registration found for behavior named "{0}"\'\n                     \' for factory "{1}"\'\n-                    \' - trying deprecated fallback lookup (will be removed \'\n-                    \'in 3.0)..."\'.format(\n-                        behavior_name, fti.getId()\n-                    ),\n+                    " - trying deprecated fallback lookup (will be removed "\n+                    \'in 3.0)..."\'.format(behavior_name, fti.getId()),\n                     DeprecationWarning,\n                 )\n                 try:\n@@ -200,7 +197,7 @@ def behavior_registrations(self, fti):\n                     description="bbb fallback lookup",\n                     interface=schema_interface,\n                     marker=None,\n-                    factory=None\n+                    factory=None,\n                 )\n             registrations.append(registration)\n         return tuple(registrations)\n@@ -215,8 +212,10 @@ def subtypes(self, fti):\n             return ()\n         subtypes = []\n         for behavior_registration in self.behavior_registrations(fti):\n-            if behavior_registration is not None \\\n-               and behavior_registration.marker is not None:\n+            if (\n+                behavior_registration is not None\n+                and behavior_registration.marker is not None\n+            ):\n                 subtypes.append(behavior_registration.marker)\n         return tuple(subtypes)\n \n@@ -230,8 +229,7 @@ def behavior_schema_interfaces(self, fti):\n             return ()\n         schemas = []\n         for behavior_registration in self.behavior_registrations(fti):\n-            if behavior_registration is not None \\\n-               and behavior_registration.interface:\n+            if behavior_registration is not None and behavior_registration.interface:\n                 schemas.append(behavior_registration.interface)\n         return tuple(schemas)\n \n@@ -282,7 +280,6 @@ def modified(self, fti):\n \n @implementer(ISchemaInvalidatedEvent)\n class SchemaInvalidatedEvent(object):\n-\n     def __init__(self, portal_type):\n         self.portal_type = portal_type\n \n@@ -297,15 +294,14 @@ def invalidate_schema(event):\n \n # here starts the code dealing wih dynamic schemas.\n class SchemaNameEncoder(object):\n-    """Schema name encoding\n-    """\n+    """Schema name encoding"""\n \n     key = (\n-        (\' \', \'_1_\'),\n-        (\'.\', \'_2_\'),\n-        (\'-\', \'_3_\'),\n-        (\'/\', \'_4_\'),\n-        (\'|\', \'_5_\'),\n+        (" ", "_1_"),\n+        (".", "_2_"),\n+        ("-", "_3_"),\n+        ("/", "_4_"),\n+        ("|", "_5_"),\n     )\n \n     def encode(self, s):\n@@ -319,39 +315,36 @@ def decode(self, s):\n         return s\n \n     def join(self, *args):\n-        return \'_0_\'.join([self.encode(a) for a in args if a])\n+        return "_0_".join([self.encode(a) for a in args if a])\n \n     def split(self, s):\n-        return [self.decode(a) for a in s.split(\'_0_\')]\n+        return [self.decode(a) for a in s.split("_0_")]\n \n \n def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n-    """Return a canonical interface name for a generated schema interface.\n-    """\n+    """Return a canonical interface name for a generated schema interface."""\n     if prefix is None:\n-        if portal_type == \'Plone Site\':\n+        if portal_type == "Plone Site":\n             fti = getUtility(IDexterityFTI, name=portal_type)\n             siteroot = fti.__parent__\n         else:\n             siteroot = getUtility(ISiteRoot)\n-        prefix = \'/\'.join(siteroot.getPhysicalPath())[1:]\n+        prefix = "/".join(siteroot.getPhysicalPath())[1:]\n     if suffix:\n-        prefix = \'|\'.join([prefix, suffix])\n+        prefix = "|".join([prefix, suffix])\n \n     encoder = SchemaNameEncoder()\n     return encoder.join(prefix, portal_type, schema)\n \n \n def schemaNameToPortalType(schemaName):\n-    """Return a the portal_type part of a schema name\n-    """\n+    """Return a the portal_type part of a schema name"""\n     encoder = SchemaNameEncoder()\n     return encoder.split(schemaName)[1]\n \n \n def splitSchemaName(schemaName):\n-    """Return a tuple prefix, portal_type, schemaName\n-    """\n+    """Return a tuple prefix, portal_type, schemaName"""\n     encoder = SchemaNameEncoder()\n     items = encoder.split(schemaName)\n     if len(items) == 2:\n@@ -365,8 +358,7 @@ def splitSchemaName(schemaName):\n # Dynamic module factory\n @implementer(IDynamicObjectFactory)\n class SchemaModuleFactory(object):\n-    """Create dynamic schema interfaces on the fly\n-    """\n+    """Create dynamic schema interfaces on the fly"""\n \n     lock = RLock()\n     _transient_SCHEMA_CACHE = {}\n@@ -437,7 +429,7 @@ class DexteritySchemaPolicy(object):\n     """\n \n     def module(self, schemaName, tree):\n-        return \'plone.dexterity.schema.transient\'\n+        return "plone.dexterity.schema.transient"\n \n     def bases(self, schemaName, tree):\n         return ()\n@@ -446,4 +438,4 @@ def name(self, schemaName, tree):\n         # We use a temporary name whilst the interface is being generated;\n         # when it\'s first used, we know the portal_type and site, and can\n         # thus update it\n-        return \'__tmp__\' + schemaName\n+        return "__tmp__" + schemaName\ndiff --git a/plone/dexterity/tests/case.py b/plone/dexterity/tests/case.py\nindex 04fb32e..9b6b879 100644\n--- a/plone/dexterity/tests/case.py\n+++ b/plone/dexterity/tests/case.py\n@@ -15,8 +15,7 @@\n \n \n class MockTestCase(unittest.TestCase):\n-    """Base class for tests using mocks.\n-    """\n+    """Base class for tests using mocks."""\n \n     _getToolByName_return_values = None\n     _replaced_globals = None\n@@ -38,27 +37,25 @@ def create_dummy(self, **kw):\n     # wipe the registry each time.\n \n     def mock_utility(self, mock, provides, name=u""):\n-        """Register the mock as a utility providing the given interface\n-        """\n-        zope.component.provideUtility(\n-            provides=provides, component=mock, name=name)\n+        """Register the mock as a utility providing the given interface"""\n+        zope.component.provideUtility(provides=provides, component=mock, name=name)\n \n     def mock_adapter(self, mock, provides, adapts, name=u""):\n         """Register the mock as an adapter providing the given interface\n         and adapting the given interface(s)\n         """\n         zope.component.provideAdapter(\n-            factory=mock, adapts=adapts, provides=provides, name=name)\n+            factory=mock, adapts=adapts, provides=provides, name=name\n+        )\n \n     def mock_subscription_adapter(self, mock, provides, adapts):\n-        """Register the mock as a utility providing the given interface\n-        """\n+        """Register the mock as a utility providing the given interface"""\n         zope.component.provideSubscriptionAdapter(\n-            factory=mock, provides=provides, adapts=adapts)\n+            factory=mock, provides=provides, adapts=adapts\n+        )\n \n     def mock_handler(self, mock, adapts):\n-        """Register the mock as a utility providing the given interface\n-        """\n+        """Register the mock as a utility providing the given interface"""\n         zope.component.provideHandler(factory=mock, adapts=adapts)\n \n     def mock_tool(self, mock, name):\n@@ -72,8 +69,8 @@ def get_return_value(context, name, default=None):\n                 return return_values.get(name, default)\n \n             from Products.CMFCore.utils import getToolByName\n-            self.patch_global(\n-                getToolByName, side_effect=get_return_value)\n+\n+            self.patch_global(getToolByName, side_effect=get_return_value)\n         self._getToolByName_return_values[name] = mock\n \n     def patch_global(self, orig, mock=None, **kw):\n@@ -81,7 +78,8 @@ def patch_global(self, orig, mock=None, **kw):\n             mock = Mock(**kw)\n         elif kw:\n             raise Exception(\n-                \'Keyword arguments are ignored if a mock instance is passed.\')\n+                "Keyword arguments are ignored if a mock instance is passed."\n+            )\n         _global_replace(orig, mock)\n         if self._replaced_globals is None:\n             self._replaced_globals = {}\n@@ -90,18 +88,17 @@ def patch_global(self, orig, mock=None, **kw):\n \n \n class Dummy(object):\n-    """Dummy object with arbitrary attributes\n-    """\n+    """Dummy object with arbitrary attributes"""\n \n     def __init__(self, **kw):\n         self.__dict__.update(kw)\n \n \n class ItemDummy(Dummy):\n-    """ Dummy objects with title getter and setter """\n+    """Dummy objects with title getter and setter"""\n \n-    title = \'\'\n-    portal_type = \'foo\'\n+    title = ""\n+    portal_type = "foo"\n \n     def Title(self):\n         return self.title\n@@ -110,14 +107,14 @@ def setTitle(self, title):\n         self.title = title\n \n     def getId(self):\n-        return self.__dict__.get(\'id\', \'\')\n+        return self.__dict__.get("id", "")\n \n \n # from mocker\n def _global_replace(remove, install):\n     """Replace object \'remove\' with object \'install\' on all dictionaries."""\n     for referrer in gc.get_referrers(remove):\n-        if (type(referrer) is dict):\n+        if type(referrer) is dict:\n             for key, value in list(six.iteritems(referrer)):\n                 if value is remove:\n                     referrer[key] = install\ndiff --git a/plone/dexterity/tests/schemata.py b/plone/dexterity/tests/schemata.py\nindex e99ef8a..d9ff6be 100644\n--- a/plone/dexterity/tests/schemata.py\n+++ b/plone/dexterity/tests/schemata.py\n@@ -5,23 +5,19 @@\n \n \n class ITestSchema(Interface):\n-    """Schema used for testing\n-    """\n+    """Schema used for testing"""\n \n-    title = schema.TextLine(title=u"Title",\n-                            description=u"Administrative title")\n+    title = schema.TextLine(title=u"Title", description=u"Administrative title")\n \n-    description = schema.Text(title=u"Description",\n-                              required=False)\n+    description = schema.Text(title=u"Description", required=False)\n \n \n class ITaggedValueSchema(Interface):\n-    """Schema used for testing tagged value filenames\n-    """\n+    """Schema used for testing tagged value filenames"""\n \n-ITaggedValueSchema.setTaggedValue(FILENAME_KEY, \'/path/to/dummy.xml\')\n+\n+ITaggedValueSchema.setTaggedValue(FILENAME_KEY, "/path/to/dummy.xml")\n \n \n class IDerivedFromTaggedValueSchema(ITaggedValueSchema):\n-    """Schema used for testing tagged value filenames\n-    """\n+    """Schema used for testing tagged value filenames"""\ndiff --git a/plone/dexterity/tests/test_behavior.py b/plone/dexterity/tests/test_behavior.py\nindex fecad85..dcf3264 100644\n--- a/plone/dexterity/tests/test_behavior.py\n+++ b/plone/dexterity/tests/test_behavior.py\n@@ -24,7 +24,6 @@ class IFour(IThree):\n \n \n class TestBehavior(MockTestCase):\n-\n     def test_supports(self):\n \n         # Context mock\n@@ -32,17 +31,9 @@ def test_supports(self):\n \n         # Behavior mock\n         behavior_dummy_1 = self.create_dummy(interface=IOne)\n-        self.mock_utility(\n-            behavior_dummy_1,\n-            IBehavior,\n-            name=IOne.__identifier__\n-        )\n+        self.mock_utility(behavior_dummy_1, IBehavior, name=IOne.__identifier__)\n         behavior_dummy_4 = self.create_dummy(interface=IFour)\n-        self.mock_utility(\n-            behavior_dummy_4,\n-            IBehavior,\n-            name=IFour.__identifier__\n-        )\n+        self.mock_utility(behavior_dummy_4, IBehavior, name=IFour.__identifier__)\n \n         # FTI mock\n         fti = DexterityFTI(u"testtype")\n@@ -72,7 +63,4 @@ def test_enumerate(self):\n \n         assignable = DexterityBehaviorAssignable(context_dummy)\n \n-        self.assertEqual(\n-            [behavior_dummy],\n-            list(assignable.enumerateBehaviors())\n-        )\n+        self.assertEqual([behavior_dummy], list(assignable.enumerateBehaviors()))\ndiff --git a/plone/dexterity/tests/test_content.py b/plone/dexterity/tests/test_content.py\nindex bd86c50..2844138 100644\n--- a/plone/dexterity/tests/test_content.py\n+++ b/plone/dexterity/tests/test_content.py\n@@ -41,14 +41,12 @@\n \n \n class TestContent(MockTestCase):\n-\n     def setUp(self):\n         SCHEMA_CACHE.clear()\n         provideAdapter(DefaultOrdering)\n         provideAdapter(AttributeAnnotations)\n \n     def test_provided_by_item(self):\n-\n         class FauxDataManager(object):\n             def setstate(self, obj):\n                 pass\n@@ -60,8 +58,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = Item(id=u\'id\')\n-        item.portal_type = u\'testtype\'\n+        item = Item(id=u"id")\n+        item.portal_type = u"testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n@@ -73,7 +71,7 @@ class IMarker(Interface):\n             pass\n \n         # FTI mock\n-        fti_mock = Mock(wraps=DexterityFTI(\'testtype\'))\n+        fti_mock = Mock(wraps=DexterityFTI("testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n@@ -115,8 +113,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n         item._p_jar = FauxDataManager()\n \n         # Dummy schema\n@@ -158,8 +156,8 @@ class MyItem(Item):\n             pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n         # this case, the cache is a bit slower.\n@@ -218,8 +216,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n         # this case, the cache is a bit slower.\n@@ -236,21 +234,13 @@ class ISchema(Interface):\n \n         # Behaviors - one with a subtype and one without\n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(\n-            u"Behavior1",\n-            "",\n-            IBehavior1,\n-            None,\n-            None\n-        )\n+        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n@@ -259,19 +249,13 @@ class IBehavior2(Interface):\n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(\n-            u"Behavior2",\n-            "",\n-            IBehavior2,\n-            IMarker2,\n-            None\n-        )\n+        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n-        fti_mock.behaviors = [\'behavior1\', \'behavior2\']\n+        fti_mock.behaviors = ["behavior1", "behavior2"]\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n         alsoProvides(fti_mock, IDexterityFTI)\n \n@@ -325,8 +309,8 @@ def register(self, obj):\n                 pass\n \n         # Dummy instance\n-        item = MyItem(id=u\'id\')\n-        item.portal_type = \'testtype\'\n+        item = MyItem(id=u"id")\n+        item.portal_type = "testtype"\n \n         # Without a persistence jar, the _p_changed check doesn\'t work. In\n         # this case, the cache is a bit slower.\n@@ -345,13 +329,7 @@ class ISchema(Interface):\n         class IBehavior1(Interface):\n             pass\n \n-        behavior1 = BehaviorRegistration(\n-            u"Behavior1",\n-            "",\n-            IBehavior1,\n-            None,\n-            None\n-        )\n+        behavior1 = BehaviorRegistration(u"Behavior1", "", IBehavior1, None, None)\n         self.mock_utility(behavior1, IBehavior, name="behavior1")\n \n         class IBehavior2(Interface):\n@@ -360,13 +338,7 @@ class IBehavior2(Interface):\n         class IMarker2(Interface):\n             pass\n \n-        behavior2 = BehaviorRegistration(\n-            u"Behavior2",\n-            "",\n-            IBehavior2,\n-            IMarker2,\n-            None\n-        )\n+        behavior2 = BehaviorRegistration(u"Behavior2", "", IBehavior2, IMarker2, None)\n         self.mock_utility(behavior2, IBehavior, name="behavior2")\n \n         class IBehavior3(Interface):\n@@ -375,19 +347,11 @@ class IBehavior3(Interface):\n         class IMarker3(Interface):\n             pass\n \n-        behavior3 = BehaviorRegistration(\n-            u"Behavior3",\n-            "",\n-            IBehavior3,\n-            IMarker3,\n-            None\n-        )\n+        behavior3 = BehaviorRegistration(u"Behavior3", "", IBehavior3, IMarker3, None)\n         self.mock_utility(behavior3, IBehavior, name="behavior3")\n \n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         # FTI mock\n@@ -396,8 +360,8 @@ class IMarker3(Interface):\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         # start clean\n-        SCHEMA_CACHE.invalidate(\'testtype\')\n-        fti_mock.behaviors = [\'behavior1\', \'behavior2\']\n+        SCHEMA_CACHE.invalidate("testtype")\n+        fti_mock.behaviors = ["behavior1", "behavior2"]\n \n         # implementedBy does not look into the fti\n         self.assertFalse(ISchema.implementedBy(MyItem))\n@@ -413,8 +377,8 @@ class IMarker3(Interface):\n \n         # If we now invalidate the schema cache, we should get the\n         # SECOND set of behaviors (which includes behavior3)\n-        SCHEMA_CACHE.invalidate(\'testtype\')\n-        fti_mock.behaviors = [\'behavior1\', \'behavior2\', \'behavior3\']\n+        SCHEMA_CACHE.invalidate("testtype")\n+        fti_mock.behaviors = ["behavior1", "behavior2", "behavior3"]\n \n         # Main schema as looked up in FTI is now provided by item ...\n         self.assertTrue(ISchema.providedBy(item))\n@@ -448,12 +412,12 @@ class ISchema(Interface):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         self.assertEqual(u"foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n         self.assertEqual(u"id", content.id)\n-        self.assertRaises(AttributeError, getattr, content, \'baz\')\n+        self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_container(self):\n \n@@ -470,12 +434,12 @@ class ISchema(Interface):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         self.assertEqual(u"foo_default", content.foo)\n         self.assertEqual(None, content.bar)\n         self.assertEqual(u"id", content.id)\n-        self.assertRaises(AttributeError, getattr, content, \'baz\')\n+        self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_consults_schema_item_default_factory_with_context(self):\n \n@@ -491,8 +455,7 @@ def defaultFactory(context):\n             return u"{0:s}_{1:s}".format(context.id, context.portal_type)\n \n         class ISchema(Interface):\n-            foo = zope.schema.TextLine(title=u"foo",\n-                                       defaultFactory=defaultFactory)\n+            foo = zope.schema.TextLine(title=u"foo", defaultFactory=defaultFactory)\n             bar = zope.schema.TextLine(title=u"bar")\n \n         # FTI mock\n@@ -500,12 +463,12 @@ class ISchema(Interface):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         self.assertEqual(u"id_testtype", content.foo)\n         self.assertEqual(None, content.bar)\n         self.assertEqual(u"id", content.id)\n-        self.assertRaises(AttributeError, getattr, content, \'baz\')\n+        self.assertRaises(AttributeError, getattr, content, "baz")\n \n     def test_getattr_on_container_returns_children(self):\n \n@@ -513,8 +476,8 @@ def test_getattr_on_container_returns_children(self):\n         content.id = u"id"\n         content.portal_type = u"testtype"\n \n-        content[\'foo\'] = Item(\'foo\')\n-        content[\'quux\'] = Item(\'quux\')\n+        content["foo"] = Item("foo")\n+        content["quux"] = Item("quux")\n \n         class ISchema(Interface):\n             foo = zope.schema.TextLine(title=u"foo", default=u"foo_default")\n@@ -525,30 +488,30 @@ class ISchema(Interface):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n \n         # Schema field masks contained item\n         self.assertEqual(u"foo_default", content.foo)\n \n         # But we can still obtain an item\n-        self.assertTrue(isinstance(content[\'foo\'], Item))\n-        self.assertEqual(\'foo\', content[\'foo\'].id)\n+        self.assertTrue(isinstance(content["foo"], Item))\n+        self.assertEqual("foo", content["foo"].id)\n \n         # And if the item isn\'t masked by an attribute, we can still getattr it\n-        self.assertTrue(isinstance(content[\'quux\'], Item))\n-        self.assertEqual(\'quux\', content[\'quux\'].id)\n+        self.assertTrue(isinstance(content["quux"], Item))\n+        self.assertEqual("quux", content["quux"].id)\n \n-        self.assertTrue(isinstance(getattr(content, \'quux\'), Item))\n-        self.assertEqual(\'quux\', getattr(content, \'quux\').id)\n+        self.assertTrue(isinstance(getattr(content, "quux"), Item))\n+        self.assertEqual("quux", getattr(content, "quux").id)\n \n     def test_ZMI_manage_options_container(self):\n         # Make sure we get the expected tabs in the ZMI\n \n-        containerOptions = [o[\'label\'] for o in Container.manage_options]\n+        containerOptions = [o["label"] for o in Container.manage_options]\n         tabs = [\n-            \'Security\',\n-            \'Contents\',\n-            \'Properties\',\n+            "Security",\n+            "Contents",\n+            "Properties",\n         ]\n         for tab in tabs:\n             self.assertTrue(tab in containerOptions, "Tab %s not found" % tab)\n@@ -556,11 +519,11 @@ def test_ZMI_manage_options_container(self):\n     def test_ZMI_manage_options_item(self):\n         # Make sure we get the expected tabs in the ZMI\n \n-        containerOptions = [o[\'label\'] for o in Item.manage_options]\n+        containerOptions = [o["label"] for o in Item.manage_options]\n         tabs = [\n-            \'Security\',\n-            \'View\',\n-            \'Properties\',\n+            "Security",\n+            "View",\n+            "Properties",\n         ]\n         for tab in tabs:\n             self.assertTrue(tab in containerOptions, "Tab %s not found" % tab)\n@@ -568,35 +531,34 @@ def test_ZMI_manage_options_item(self):\n     def test_name_and_id_in_sync(self):\n \n         i = Item()\n-        self.assertEqual(\'\', i.id)\n-        self.assertEqual(\'\', i.getId())\n-        self.assertEqual(u\'\', i.__name__)\n+        self.assertEqual("", i.id)\n+        self.assertEqual("", i.getId())\n+        self.assertEqual(u"", i.__name__)\n \n         i = Item()\n         i.id = "foo"\n-        self.assertEqual(\'foo\', i.id)\n-        self.assertEqual(\'foo\', i.getId())\n-        self.assertEqual(u\'foo\', i.__name__)\n+        self.assertEqual("foo", i.id)\n+        self.assertEqual("foo", i.getId())\n+        self.assertEqual(u"foo", i.__name__)\n \n         i = Item()\n         i.__name__ = u"foo"\n-        self.assertEqual(\'foo\', i.id)\n-        self.assertEqual(\'foo\', i.getId())\n-        self.assertEqual(u\'foo\', i.__name__)\n+        self.assertEqual("foo", i.id)\n+        self.assertEqual("foo", i.getId())\n+        self.assertEqual(u"foo", i.__name__)\n \n     def test_name_unicode_id_str(self):\n \n         i = Item()\n         if six.PY2:\n             try:\n-                i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n+                i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n             except UnicodeEncodeError:\n                 pass\n             else:\n                 self.fail()\n         else:\n-            i.__name__ = b\'\\xc3\\xb8\'.decode(\'utf-8\')\n-\n+            i.__name__ = b"\\xc3\\xb8".decode("utf-8")\n \n         i.__name__ = u"o"\n \n@@ -613,56 +575,53 @@ def test_item_dublincore(self):\n \n         import plone.dexterity\n \n-        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n+        datetime_patcher = patch.object(plone.dexterity.content, "DateTime")\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n             title=u"Emperor Penguin",\n-            description=u\'One of the most magnificent birds.\',\n-            subject=u\'Penguins\',\n-            contributors=u\'admin\',\n+            description=u"One of the most magnificent birds.",\n+            subject=u"Penguins",\n+            contributors=u"admin",\n             effective_date="08/20/2010",\n             expiration_date="07/09/2013",\n-            format=\'text/plain\',\n-            language=\'de\',\n-            rights=\'CC\',\n+            format="text/plain",\n+            language="de",\n+            rights="CC",\n         )\n \n         summer_timezone = i.effective_date.timezone()\n         self.assertEqual(i.title, u"Emperor Penguin")\n-        self.assertEqual(i.Title(), \'Emperor Penguin\')\n-        self.assertEqual(i.description, u\'One of the most magnificent birds.\')\n-        self.assertEqual(i.Description(), \'One of the most magnificent birds.\')\n-        self.assertEqual(i.subject, (u\'Penguins\',))\n-        self.assertEqual(i.Subject(), (\'Penguins\',))\n-        self.assertEqual(i.contributors, (u\'admin\',))\n-        self.assertEqual(i.listContributors(), (\'admin\',))\n-        self.assertEqual(i.Contributors(), (\'admin\',))\n-        self.assertEqual(i.format, \'text/plain\')\n-        self.assertEqual(i.effective_date, DateTime(\'08/20/2010\'))\n-        self.assertEqual(\n-            i.EffectiveDate(zone=summer_timezone)[:10], \'2010-08-20\')\n-        self.assertEqual(i.effective(), DateTime(\'08/20/2010\'))\n-        self.assertEqual(i.expiration_date, DateTime(\'07/09/2013\'))\n-        self.assertEqual(\n-            i.ExpirationDate(zone=summer_timezone)[:10], \'2013-07-09\')\n-        self.assertEqual(i.expires(), DateTime(\'07/09/2013\'))\n-        self.assertEqual(i.language, \'de\')\n-        self.assertEqual(i.Language(), \'de\')\n-        self.assertEqual(i.rights, \'CC\')\n-        self.assertEqual(i.Rights(), \'CC\')\n+        self.assertEqual(i.Title(), "Emperor Penguin")\n+        self.assertEqual(i.description, u"One of the most magnificent birds.")\n+        self.assertEqual(i.Description(), "One of the most magnificent birds.")\n+        self.assertEqual(i.subject, (u"Penguins",))\n+        self.assertEqual(i.Subject(), ("Penguins",))\n+        self.assertEqual(i.contributors, (u"admin",))\n+        self.assertEqual(i.listContributors(), ("admin",))\n+        self.assertEqual(i.Contributors(), ("admin",))\n+        self.assertEqual(i.format, "text/plain")\n+        self.assertEqual(i.effective_date, DateTime("08/20/2010"))\n+        self.assertEqual(i.EffectiveDate(zone=summer_timezone)[:10], "2010-08-20")\n+        self.assertEqual(i.effective(), DateTime("08/20/2010"))\n+        self.assertEqual(i.expiration_date, DateTime("07/09/2013"))\n+        self.assertEqual(i.ExpirationDate(zone=summer_timezone)[:10], "2013-07-09")\n+        self.assertEqual(i.expires(), DateTime("07/09/2013"))\n+        self.assertEqual(i.language, "de")\n+        self.assertEqual(i.Language(), "de")\n+        self.assertEqual(i.rights, "CC")\n+        self.assertEqual(i.Rights(), "CC")\n         self.assertEqual(i.creation_date, i.created())\n         self.assertEqual(\n-            i.CreationDate(zone=summer_timezone)[:19],\n-            i.creation_date.ISO()[:19]\n+            i.CreationDate(zone=summer_timezone)[:19], i.creation_date.ISO()[:19]\n         )\n         self.assertEqual(i.modification_date, i.creation_date)\n         self.assertEqual(i.modification_date, i.modified())\n         self.assertEqual(\n             i.ModificationDate(zone=summer_timezone)[:19],\n-            i.modification_date.ISO()[:19]\n+            i.modification_date.ISO()[:19],\n         )\n         self.assertEqual(i.Date(), i.EffectiveDate())\n         self.assertEqual(i.Identifier(), i.absolute_url())\n@@ -671,42 +630,40 @@ def test_item_dublincore_date(self):\n         from DateTime import DateTime\n \n         import plone.dexterity\n-        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n+\n+        datetime_patcher = patch.object(plone.dexterity.content, "DateTime")\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n \n         i = Item(\n             title=u"Emperor Penguin",\n-            description=u\'One of the most magnificent birds.\',\n-            subject=u\'Penguins\',\n-            contributors=u\'admin\',\n+            description=u"One of the most magnificent birds.",\n+            subject=u"Penguins",\n+            contributors=u"admin",\n             effective_date=date(2010, 8, 20),\n             expiration_date=date(2013, 7, 9),\n-            format=\'text/plain\',\n-            language=\'de\',\n-            rights=\'CC\',\n+            format="text/plain",\n+            language="de",\n+            rights="CC",\n         )\n \n-        summer_timezone = DateTime(\'2010/08/20\').timezone()\n-        self.assertEqual(i.effective_date, DateTime(\'08/20/2010\'))\n-        self.assertEqual(\n-            i.EffectiveDate(zone=summer_timezone)[:10], \'2010-08-20\')\n-        self.assertEqual(i.effective(), DateTime(\'08/20/2010\'))\n-        self.assertEqual(i.expiration_date, DateTime(\'07/09/2013\'))\n-        self.assertEqual(\n-            i.ExpirationDate(zone=summer_timezone)[:10], \'2013-07-09\')\n-        self.assertEqual(i.expires(), DateTime(\'07/09/2013\'))\n+        summer_timezone = DateTime("2010/08/20").timezone()\n+        self.assertEqual(i.effective_date, DateTime("08/20/2010"))\n+        self.assertEqual(i.EffectiveDate(zone=summer_timezone)[:10], "2010-08-20")\n+        self.assertEqual(i.effective(), DateTime("08/20/2010"))\n+        self.assertEqual(i.expiration_date, DateTime("07/09/2013"))\n+        self.assertEqual(i.ExpirationDate(zone=summer_timezone)[:10], "2013-07-09")\n+        self.assertEqual(i.expires(), DateTime("07/09/2013"))\n         self.assertEqual(i.creation_date, i.created())\n         self.assertEqual(\n-            i.CreationDate(zone=summer_timezone)[:19],\n-            i.creation_date.ISO()[:19]\n+            i.CreationDate(zone=summer_timezone)[:19], i.creation_date.ISO()[:19]\n         )\n         self.assertEqual(i.modification_date, i.creation_date)\n         self.assertEqual(i.modification_date, i.modified())\n         self.assertEqual(\n             i.ModificationDate(zone=summer_timezone)[:19],\n-            i.modification_date.ISO()[:19]\n+            i.modification_date.ISO()[:19],\n         )\n         self.assertEqual(i.Date(), i.EffectiveDate())\n \n@@ -714,67 +671,42 @@ def test_item_dublincore_datetime(self):\n         from DateTime import DateTime\n \n         import plone.dexterity\n-        datetime_patcher = patch.object(plone.dexterity.content, \'DateTime\')\n+\n+        datetime_patcher = patch.object(plone.dexterity.content, "DateTime")\n         mocked_datetime = datetime_patcher.start()\n         mocked_datetime.return_value = DateTime(2014, 6, 1)\n         self.addCleanup(datetime_patcher.stop)\n         i = Item(\n             title=u"Emperor Penguin",\n-            description=u\'One of the most magnificent birds.\',\n-            subject=u\'Penguins\',\n-            contributors=u\'admin\',\n-            effective_date=datetime(\n-                2010, 8, 20, 12, 59, 59, 0, timezone(\'US/Eastern\')),\n-            expiration_date=datetime(\n-                2013, 7, 9, 12, 59, 59, 0, timezone(\'US/Eastern\')),\n-            format=\'text/plain\',\n-            language=\'de\',\n-            rights=\'CC\',\n+            description=u"One of the most magnificent birds.",\n+            subject=u"Penguins",\n+            contributors=u"admin",\n+            effective_date=datetime(2010, 8, 20, 12, 59, 59, 0, timezone("US/Eastern")),\n+            expiration_date=datetime(2013, 7, 9, 12, 59, 59, 0, timezone("US/Eastern")),\n+            format="text/plain",\n+            language="de",\n+            rights="CC",\n         )\n \n-        summer_timezone = DateTime(\'2010/08/20\').timezone()\n-        self.assertEqual(\n-            i.effective_date,\n-            DateTime(\'2010/08/20 12:59:59 US/Eastern\')\n-        )\n+        summer_timezone = DateTime("2010/08/20").timezone()\n+        self.assertEqual(i.effective_date, DateTime("2010/08/20 12:59:59 US/Eastern"))\n         self.assertEqual(\n             i.EffectiveDate(zone=summer_timezone),\n-            DateTime(\n-                \'2010/08/20 12:59:59 US/Eastern\'\n-            ).toZone(\n-                summer_timezone\n-            ).ISO()\n-        )\n-        self.assertEqual(\n-            i.effective(),\n-            DateTime(\'2010/08/20 12:59:59 US/Eastern\')\n-        )\n-        self.assertEqual(\n-            i.expiration_date,\n-            DateTime(\'07/09/2013 12:59:59 US/Eastern\')\n+            DateTime("2010/08/20 12:59:59 US/Eastern").toZone(summer_timezone).ISO(),\n         )\n+        self.assertEqual(i.effective(), DateTime("2010/08/20 12:59:59 US/Eastern"))\n+        self.assertEqual(i.expiration_date, DateTime("07/09/2013 12:59:59 US/Eastern"))\n         self.assertEqual(\n             i.ExpirationDate(zone=summer_timezone),\n-            DateTime(\n-                \'2013-07-09 12:59:59 US/Eastern\'\n-            ).toZone(\n-                summer_timezone\n-            ).ISO()\n-        )\n-        self.assertEqual(\n-            i.expires(),\n-            DateTime(\'2013/07/09 12:59:59 US/Eastern\')\n+            DateTime("2013-07-09 12:59:59 US/Eastern").toZone(summer_timezone).ISO(),\n         )\n+        self.assertEqual(i.expires(), DateTime("2013/07/09 12:59:59 US/Eastern"))\n         self.assertEqual(i.creation_date, i.created())\n-        self.assertEqual(\n-            i.CreationDate(zone=summer_timezone),\n-            i.creation_date.ISO()\n-        )\n+        self.assertEqual(i.CreationDate(zone=summer_timezone), i.creation_date.ISO())\n         self.assertEqual(i.modification_date, i.creation_date)\n         self.assertEqual(i.modification_date, i.modified())\n         self.assertEqual(\n-            i.ModificationDate(zone=summer_timezone),\n-            i.modification_date.ISO()\n+            i.ModificationDate(zone=summer_timezone), i.modification_date.ISO()\n         )\n         self.assertEqual(i.Date(), i.EffectiveDate())\n \n@@ -783,6 +715,7 @@ def test_item_notifyModified(self):\n \n         def mock_addCreator():\n             mock_addCreator.called = True\n+\n         i.addCreator = mock_addCreator\n \n         i.setModificationDate(DateTime(0))\n@@ -794,10 +727,10 @@ def mock_addCreator():\n \n     def test_item_addCreator(self):\n         i = Item()\n-        i.addCreator(u\'harvey\')\n-        self.assertEqual(i.creators, (u\'harvey\',))\n-        self.assertEqual(i.listCreators(), (u\'harvey\',))\n-        self.assertEqual(i.Creator(), \'harvey\')\n+        i.addCreator(u"harvey")\n+        self.assertEqual(i.creators, (u"harvey",))\n+        self.assertEqual(i.listCreators(), (u"harvey",))\n+        self.assertEqual(i.Creator(), "harvey")\n \n     def test_item_Type(self):\n         i = Item()\n@@ -805,11 +738,13 @@ def test_item_Type(self):\n         def mock_getTypeInfo():\n             class TypeInfo(object):\n                 def Title(self):\n-                    return \'Foo\'\n+                    return "Foo"\n+\n             return TypeInfo()\n+\n         i.getTypeInfo = mock_getTypeInfo\n \n-        self.assertEqual(i.Type(), \'Foo\')\n+        self.assertEqual(i.Type(), "Foo")\n \n     def test_item_init_nondc_kwargs(self):\n         i = Item(foo="bar")\n@@ -817,11 +752,8 @@ def test_item_init_nondc_kwargs(self):\n \n     def test_container_init_dublincore(self):\n         from DateTime.DateTime import DateTime\n-        c = Container(\n-            title=u"Test title",\n-            language="en",\n-            effective_date="2010-08-20"\n-        )\n+\n+        c = Container(title=u"Test title", language="en", effective_date="2010-08-20")\n         self.assertEqual(c.title, u"Test title")\n         self.assertEqual(c.language, "en")\n         self.assertTrue(isinstance(c.effective_date, DateTime))\n@@ -857,9 +789,9 @@ def test_Title_converts_to_utf8(self):\n \n     def test_Title_handles_None(self):\n         i = Item(title=None)\n-        self.assertEqual(\'\', i.Title())\n+        self.assertEqual("", i.Title())\n         c = Container(title=None)\n-        self.assertEqual(\'\', c.Title())\n+        self.assertEqual("", c.Title())\n \n     def test_Creator_converts_to_utf8(self):\n         i = Item()\n@@ -874,9 +806,9 @@ def test_Creator_converts_to_utf8(self):\n \n     def test_Creator_handles_None(self):\n         i = Item(creators=None)\n-        self.assertEqual(\'\', i.Creator())\n+        self.assertEqual("", i.Creator())\n         c = Container(creators=None)\n-        self.assertEqual(\'\', c.Creator())\n+        self.assertEqual("", c.Creator())\n \n     def test_Description_converts_to_utf8(self):\n         i = Item()\n@@ -904,14 +836,14 @@ def test_setDescription_converts_to_unicode(self):\n \n     def test_Description_handles_None(self):\n         i = Item(description=None)\n-        self.assertEqual(\'\', i.Description())\n+        self.assertEqual("", i.Description())\n         c = Container(description=None)\n-        self.assertEqual(\'\', c.Description())\n+        self.assertEqual("", c.Description())\n \n     def test_Description_removes_newlines(self):\n         i = Item()\n-        i.description = u\'foo\\r\\nbar\\nbaz\\r\'\n-        self.assertEqual(\'foo bar baz \', i.Description())\n+        i.description = u"foo\\r\\nbar\\nbaz\\r"\n+        self.assertEqual("foo bar baz ", i.Description())\n \n     def test_Subject_converts_to_utf8(self):\n         i = Item()\n@@ -960,16 +892,16 @@ def register(self, obj):\n                 pass\n \n         # Dummy instances\n-        foo = Item(id=u\'foo\')\n-        foo.portal_type = \'testtype\'\n+        foo = Item(id=u"foo")\n+        foo.portal_type = "testtype"\n         foo._p_jar = FauxDataManager()\n \n-        bar = Item(id=u\'bar\')\n-        bar.portal_type = \'testtype\'\n+        bar = Item(id=u"bar")\n+        bar.portal_type = "testtype"\n         bar._p_jar = FauxDataManager()\n \n-        baz = Container(id=u\'baz\')\n-        baz.portal_type = \'testtype\'\n+        baz = Container(id=u"baz")\n+        baz.portal_type = "testtype"\n         baz._p_jar = FauxDataManager()\n \n         # Dummy schema\n@@ -995,30 +927,30 @@ class ISchema(Interface):\n     def test_container_manage_delObjects(self):\n         # OFS does not check the delete permission for each object being\n         # deleted. We want to.\n-        item = Item(id=\'test\')\n-        container = Container(id=\'testcontainer\')\n-        container[\'test\'] = item\n+        item = Item(id="test")\n+        container = Container(id="testcontainer")\n+        container["test"] = item\n         # self.layer[\'portal\'][\'testcontainer\'] = container\n         from zExceptions import Unauthorized\n-        self.assertRaises(Unauthorized, container.manage_delObjects, [\'test\'])\n+\n+        self.assertRaises(Unauthorized, container.manage_delObjects, ["test"])\n \n         # Now permit it and try again.\n         from Products.CMFCore.permissions import DeleteObjects\n+\n         # in order to use manage_permissions the permission has to be defined\n         # somewhere in the mro\n         # since webdav is no longer part here, where it was defined in ZServer.\n         # lets add it explicit here.\n         perms_before = item.__class__.__ac_permissions__\n         item.__class__.__ac_permissions__ = ((DeleteObjects, ()),)\n-        item.manage_permission(DeleteObjects, (\'Anonymous\',))\n-        container.manage_delObjects([\'test\'])\n-        self.assertFalse(\'test\' in container)\n+        item.manage_permission(DeleteObjects, ("Anonymous",))\n+        container.manage_delObjects(["test"])\n+        self.assertFalse("test" in container)\n         item.__class__.__ac_permissions__ = perms_before\n \n     def test_iconstraintypes_adapter(self):\n-\n         class DummyConstrainTypes(object):\n-\n             def __init__(self, context):\n                 self.context = context\n \n@@ -1026,8 +958,7 @@ def allowedContentTypes(self):\n                 fti = getUtility(IDexterityFTI, name=u"testtype")\n                 return [fti]\n \n-        self.mock_adapter(\n-            DummyConstrainTypes, IConstrainTypes, (IDexterityContainer, ))\n+        self.mock_adapter(DummyConstrainTypes, IConstrainTypes, (IDexterityContainer,))\n \n         # FTI mock\n         fti_mock = Mock(wraps=DexterityFTI(u"testtype"))\n@@ -1037,75 +968,69 @@ def allowedContentTypes(self):\n \n         self.assertEqual(folder.allowedContentTypes(), [fti_mock])\n         self.assertRaises(\n-            ValueError,\n-            folder.invokeFactory,\n-            u"disallowed_type",\n-            id="test"\n+            ValueError, folder.invokeFactory, u"disallowed_type", id="test"\n         )\n \n     def test_verifyObjectPaste_paste_without_portal_type(self):\n-        original_container = Container(id=\'parent\')\n-        original_container.manage_permission(\'View\', (\'Anonymous\',))\n-        content = Item(id=\'test\')\n-        content.__factory_meta_type__ = \'document\'\n-        container = Container(id=\'container\')\n-        container.all_meta_types = [{\'name\': \'document\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'}]\n-        container.manage_permission(\'View\', (\'Anonymous\',))\n-        container[\'test\'] = content\n-        content = container[\'test\']\n+        original_container = Container(id="parent")\n+        original_container.manage_permission("View", ("Anonymous",))\n+        content = Item(id="test")\n+        content.__factory_meta_type__ = "document"\n+        container = Container(id="container")\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"}\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test"] = content\n+        content = container["test"]\n         container._verifyObjectPaste(content, True)\n \n     def test_verifyObjectPaste_fti_does_not_allow_content(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n-        original_container = Container(id=\'parent\')\n-        original_container.manage_permission(\'View\', (\'Anonymous\',))\n-        content = Item(id=\'test\')\n-        content.__factory_meta_type__ = \'document\'\n-        content.portal_type = \'document\'\n-        container = Container(id=\'container\')\n-        container.all_meta_types = [{\'name\': \'document\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'}]\n-        container.manage_permission(\'View\', (\'Anonymous\',))\n-        container[\'test\'] = content\n-        content = container[\'test\']\n+\n+        original_container = Container(id="parent")\n+        original_container.manage_permission("View", ("Anonymous",))\n+        content = Item(id="test")\n+        content.__factory_meta_type__ = "document"\n+        content.portal_type = "document"\n+        container = Container(id="container")\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"}\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test"] = content\n+        content = container["test"]\n         fti_mock = Mock()\n         fti_mock.isConstructionAllowed = Mock(return_value=False)\n-        self.mock_utility(fti_mock, ITypeInformation, name=\'document\')\n+        self.mock_utility(fti_mock, ITypeInformation, name="document")\n         mock_pt = Mock()\n         mock_pt.getTypeInfo = Mock(return_value=None)\n-        self.mock_tool(mock_pt, \'portal_types\')\n+        self.mock_tool(mock_pt, "portal_types")\n         self.mock_utility(mock_pt, ITypesTool)\n \n-        self.assertRaises(\n-            ValueError,\n-            container._verifyObjectPaste,\n-            content,\n-            True\n-        )\n+        self.assertRaises(ValueError, container._verifyObjectPaste, content, True)\n \n     def test_verifyObjectPaste_fti_does_allow_content(self):\n         from Products.CMFCore.interfaces import ITypeInformation\n-        original_container = Container(id=\'parent\')\n-        original_container.manage_permission(\'View\', (\'Anonymous\',))\n-        content = Item(id=\'test\')\n-        content.__factory_meta_type__ = \'document\'\n-        content.portal_type = \'document\'\n-        container = Container(id=\'container\')\n-        container.all_meta_types = [{\'name\': \'document\',\n-                                     \'action\': None,\n-                                     \'permission\': \'View\'}]\n-        container.manage_permission(\'View\', (\'Anonymous\',))\n-        container[\'test\'] = content\n-        content = container[\'test\']\n+\n+        original_container = Container(id="parent")\n+        original_container.manage_permission("View", ("Anonymous",))\n+        content = Item(id="test")\n+        content.__factory_meta_type__ = "document"\n+        content.portal_type = "document"\n+        container = Container(id="container")\n+        container.all_meta_types = [\n+            {"name": "document", "action": None, "permission": "View"}\n+        ]\n+        container.manage_permission("View", ("Anonymous",))\n+        container["test"] = content\n+        content = container["test"]\n         mock_fti = Mock()\n         mock_fti.isConstructionAllowed = Mock(return_value=True)\n-        self.mock_utility(mock_fti, ITypeInformation, name=\'document\')\n+        self.mock_utility(mock_fti, ITypeInformation, name="document")\n         mock_pt = Mock()\n         mock_pt.getTypeInfo = Mock(return_value=None)\n-        self.mock_tool(mock_pt, \'portal_types\')\n+        self.mock_tool(mock_pt, "portal_types")\n         self.mock_utility(mock_pt, ITypesTool)\n \n         container._verifyObjectPaste(content, True)\n@@ -1120,31 +1045,26 @@ class ITest(Interface):\n \n         class ITestBehavior(Interface):\n             field2 = zope.schema.TextLine()\n+\n         alsoProvides(ITestBehavior, IFormFieldProvider)\n \n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n-        fti_mock = DexterityFTI(u\'testtype\')\n+        fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITest)\n-        fti_mock.behaviors = [\'test_behavior\']\n+        fti_mock.behaviors = ["test_behavior"]\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         behavior_reg = BehaviorRegistration(\n-            u"Test Behavior",\n-            "",\n-            ITestBehavior,\n-            ITestBehavior,\n-            None\n+            u"Test Behavior", "", ITestBehavior, ITestBehavior, None\n         )\n         self.mock_utility(behavior_reg, IBehavior, name="test_behavior")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n-        item.field1 = SizedValue(\'1\')\n-        item.field2 = SizedValue(\'22\')\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+        item.field1 = SizedValue("1")\n+        item.field2 = SizedValue("22")\n \n         self.assertEqual(3, item.getSize())\ndiff --git a/plone/dexterity/tests/test_content_integration.py b/plone/dexterity/tests/test_content_integration.py\nindex d2cb8f3..9291798 100644\n--- a/plone/dexterity/tests/test_content_integration.py\n+++ b/plone/dexterity/tests/test_content_integration.py\n@@ -14,13 +14,13 @@ class TestUUIDIntegration(unittest.TestCase):\n     layer = UNIT_TESTING\n \n     def setUp(self):\n-        import zope.component.testing\n-        import plone.uuid\n-\n         from zope.configuration import xmlconfig\n \n+        import plone.uuid\n+        import zope.component.testing\n+\n         zope.component.testing.setUp()\n-        xmlconfig.file(\'configure.zcml\', plone.uuid)\n+        xmlconfig.file("configure.zcml", plone.uuid)\n \n     def test_uuid_assigned_on_creation(self):\n         from plone.dexterity.content import Item\ndiff --git a/plone/dexterity/tests/test_exportimport.py b/plone/dexterity/tests/test_exportimport.py\nindex 2715da1..97cd983 100644\n--- a/plone/dexterity/tests/test_exportimport.py\n+++ b/plone/dexterity/tests/test_exportimport.py\n@@ -3,43 +3,41 @@\n \n \n class ExportImportTests(unittest.TestCase):\n-\n     def test_export(self):\n         # Make sure our exporter delegates to manage_FTPget()\n         from plone.dexterity.content import Item\n-        from plone.dexterity.exportimport import \\\n-            DexterityContentExporterImporter\n+        from plone.dexterity.exportimport import DexterityContentExporterImporter\n         from Products.GenericSetup.tests.common import DummyExportContext\n \n         class DummyItem(Item):\n             def manage_FTPget(self):\n-                return \'title: Foo\'\n-        item = DummyItem(\'test\')\n+                return "title: Foo"\n+\n+        item = DummyItem("test")\n \n         export_context = DummyExportContext(None)\n         exporter = DexterityContentExporterImporter(item)\n         exporter.export(export_context, subdir=None, root=True)\n \n         self.assertEqual(\n-            export_context._wrote[-1],\n-            (\'.data\', \'title: Foo\', \'text/plain\')\n+            export_context._wrote[-1], (".data", "title: Foo", "text/plain")\n         )\n \n     def test_import(self):\n         # Make sure our importer delegates to PUT()\n         from plone.dexterity.content import Item\n-        from plone.dexterity.exportimport import \\\n-            DexterityContentExporterImporter\n+        from plone.dexterity.exportimport import DexterityContentExporterImporter\n         from Products.GenericSetup.tests.common import DummyImportContext\n \n         class DummyItem(Item):\n             def PUT(self, request, response):\n-                self.title = \'Foo\'\n-        item = DummyItem(\'test\')\n+                self.title = "Foo"\n+\n+        item = DummyItem("test")\n \n         import_context = DummyImportContext(None)\n-        import_context._files[\'.data\'] = \'title: Foo\'\n+        import_context._files[".data"] = b"title: Foo"\n         importer = DexterityContentExporterImporter(item)\n         importer.import_(import_context, None, root=True)\n \n-        self.assertEqual(\'Foo\', item.Title())\n+        self.assertEqual("Foo", item.Title())\ndiff --git a/plone/dexterity/tests/test_factory.py b/plone/dexterity/tests/test_factory.py\nindex f8621b2..df35690 100644\n--- a/plone/dexterity/tests/test_factory.py\n+++ b/plone/dexterity/tests/test_factory.py\n@@ -11,21 +11,21 @@\n except ImportError:\n     from mock import Mock\n \n+\n class IDummy(Interface):\n     pass\n \n \n class TestFactory(MockTestCase):\n-\n     def test_title(self):\n-        fti_mock = Mock(spec=DexterityFTI, title=\'Mock type\')\n+        fti_mock = Mock(spec=DexterityFTI, title="Mock type")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual("Mock type", factory.title)\n \n     def test_description(self):\n-        fti_mock = Mock(spec=DexterityFTI, description=\'Mock type description\')\n+        fti_mock = Mock(spec=DexterityFTI, description="Mock type description")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         factory = DexterityFactory(portal_type=u"testtype")\n@@ -52,17 +52,18 @@ def test_get_interfaces(self):\n     def test_create_with_schema_already_provided_and_portal_type_set(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u\'testtype\')\n+        obj_mock = Mock(portal_type=u"testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n-        fti_mock = Mock(spec=DexterityFTI, klass=\'my.mocked.ContentTypeClass\')\n+        fti_mock = Mock(spec=DexterityFTI, klass="my.mocked.ContentTypeClass")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         factory = DexterityFactory(portal_type=u"testtype")\n@@ -78,6 +79,7 @@ def test_create_sets_portal_type_if_not_set(self):\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -87,18 +89,19 @@ def test_create_sets_portal_type_if_not_set(self):\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u\'testtype\')\n+        self.assertEqual(obj_mock.portal_type, u"testtype")\n \n     def test_create_sets_portal_type_if_wrong(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=\'othertype\')\n+        obj_mock = Mock(portal_type="othertype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -108,18 +111,19 @@ def test_create_sets_portal_type_if_wrong(self):\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual(obj_mock, factory())\n-        self.assertEqual(obj_mock.portal_type, u\'testtype\')\n+        self.assertEqual(obj_mock.portal_type, u"testtype")\n \n     def test_create_initialises_schema_if_not_provided(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u\'testtype\')\n+        obj_mock = Mock(portal_type=u"testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -133,13 +137,14 @@ def test_create_initialises_schema_if_not_provided(self):\n     def test_factory_passes_args_and_kwargs(self):\n \n         # Object returned by class\n-        obj_mock = Mock(portal_type=u\'testtype\')\n+        obj_mock = Mock(portal_type=u"testtype")\n \n         # Class set by factory\n         klass_mock = Mock(return_value=obj_mock)\n \n         # Resolver\n         from plone.dexterity.utils import resolveDottedName\n+\n         self.patch_global(resolveDottedName, return_value=klass_mock)\n \n         # FTI\n@@ -149,4 +154,4 @@ def test_factory_passes_args_and_kwargs(self):\n \n         factory = DexterityFactory(portal_type=u"testtype")\n         self.assertEqual(obj_mock, factory(u"id", title=u"title"))\n-        klass_mock.assert_called_once_with(u\'id\', title=u\'title\')\n+        klass_mock.assert_called_once_with(u"id", title=u"title")\ndiff --git a/plone/dexterity/tests/test_fti.py b/plone/dexterity/tests/test_fti.py\nindex 018587f..da1e61f 100644\n--- a/plone/dexterity/tests/test_fti.py\n+++ b/plone/dexterity/tests/test_fti.py\n@@ -1,7 +1,6 @@\n # -*- coding: utf-8 -*-\n from .case import MockTestCase\n from plone.dexterity import utils\n-from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.factory import DexterityFactory\n from plone.dexterity.fti import DexterityFTI\n from plone.dexterity.fti import DexterityFTIModificationDescription\n@@ -11,6 +10,7 @@\n from plone.dexterity.fti import ftiRenamed\n from plone.dexterity.interfaces import IDexterityFTI\n from plone.dexterity.schema import DexteritySchemaPolicy\n+from plone.dexterity.schema import portalTypeToSchemaName\n from plone.dexterity.tests.schemata import ITestSchema\n from plone.supermodel.model import Model\n from Products.CMFCore.interfaces import ISiteRoot\n@@ -52,7 +52,6 @@ class ITestInterface(Interface):\n \n \n class TestFTI(MockTestCase):\n-\n     def test_factory_name_is_fti_id(self):\n         fti = DexterityFTI(u"testtype")\n         self.assertEqual(u"testtype", fti.getId())\n@@ -76,7 +75,7 @@ def test_lookupSchema_with_dynamic_schema(self):\n         fti = DexterityFTI(u"testtype")\n         fti.schema = None  # use dynamic schema\n \n-        portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n \n         schemaName = portalTypeToSchemaName(fti.getId())\n@@ -88,12 +87,12 @@ def test_lookupSchema_with_dynamic_schema(self):\n         delattr(plone.dexterity.schema.generated, schemaName)\n \n     def test_lookupSchema_with_nonexistant_schema(self):\n-        """ Tests the case where a dexterity type is not removed cleanly\n+        """Tests the case where a dexterity type is not removed cleanly\n         from the fti, but the code has been removed.\n         """\n         fti = DexterityFTI(u"testtype")\n-        fti.schema = \'model.wont.be.imported\'\n-        portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n+        fti.schema = "model.wont.be.imported"\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n         schemaName = portalTypeToSchemaName(fti.getId())\n         setattr(plone.dexterity.schema.generated, schemaName, ITestSchema)\n@@ -109,6 +108,7 @@ def test_lookupModel_from_string(self):\n         model_dummy = Model()\n \n         from plone.supermodel import loadString\n+\n         self.patch_global(loadString, return_value=model_dummy)\n \n         model = fti.lookupModel()\n@@ -124,25 +124,27 @@ def test_lookupModel_from_file_with_package(self):\n         model_dummy = Model()\n \n         import plone.dexterity.tests\n+\n         abs_file = os.path.join(\n-            os.path.split(plone.dexterity.tests.__file__)[0],\n-            "test.xml"\n+            os.path.split(plone.dexterity.tests.__file__)[0], "test.xml"\n         )\n \n         from plone.supermodel import loadFile\n+\n         loadFile_mock = self.patch_global(loadFile, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity")\n+            abs_file, reload=True, policy=u"dexterity"\n+        )\n \n     def test_lookupModel_from_file_with_absolute_path(self):\n \n         import plone.dexterity.tests\n+\n         abs_file = os.path.join(\n-            os.path.split(plone.dexterity.tests.__file__)[0],\n-            "test.xml"\n+            os.path.split(plone.dexterity.tests.__file__)[0], "test.xml"\n         )\n \n         fti = DexterityFTI(u"testtype")\n@@ -153,12 +155,14 @@ def test_lookupModel_from_file_with_absolute_path(self):\n         model_dummy = Model()\n \n         from plone.supermodel import loadFile\n+\n         loadFile_mock = self.patch_global(loadFile, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            abs_file, reload=True, policy=u"dexterity")\n+            abs_file, reload=True, policy=u"dexterity"\n+        )\n \n     def test_lookupModel_from_file_with_win32_absolute_path(self):\n \n@@ -169,17 +173,21 @@ def test_lookupModel_from_file_with_win32_absolute_path(self):\n \n         model_dummy = Model()\n \n-        from os.path import isabs, isfile\n+        from os.path import isabs\n+        from os.path import isfile\n+\n         self.patch_global(isabs, return_value=True)\n         self.patch_global(isfile, return_value=True)\n \n         from plone.supermodel import loadFile\n+\n         loadFile_mock = self.patch_global(loadFile, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         loadFile_mock.assert_called_once_with(\n-            fti.model_file, reload=True, policy=u"dexterity")\n+            fti.model_file, reload=True, policy=u"dexterity"\n+        )\n \n     def test_lookupModel_with_schema_only(self):\n         fti = DexterityFTI(u"testtype")\n@@ -201,14 +209,13 @@ def test_lookupModel_from_string_with_schema(self):\n         model_dummy = Model()\n \n         from plone.supermodel import loadString\n-        loadString_mock = self.patch_global(\n-            loadString, return_value=model_dummy)\n+\n+        loadString_mock = self.patch_global(loadString, return_value=model_dummy)\n \n         model = fti.lookupModel()\n         self.assertIs(model_dummy, model)\n         self.assertIs(ITestSchema, fti.lookupSchema())\n-        loadString_mock.assert_called_once_with(\n-            fti.model_source, policy=u\'dexterity\')\n+        loadString_mock.assert_called_once_with(fti.model_source, policy=u"dexterity")\n \n     def test_lookupModel_failure(self):\n         fti = DexterityFTI(u"testtype")\n@@ -225,16 +232,17 @@ def test_fires_modified_event_on_update_property_if_changed(self):\n         fti.global_allow = False\n \n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n-        fti._updateProperty(\'title\', "New title")  # fires event caught above\n-        fti._updateProperty(\'allow_discussion\', False)  # does not fire\n+        fti._updateProperty("title", "New title")  # fires event caught above\n+        fti._updateProperty("allow_discussion", False)  # does not fire\n \n         event = notify_mock.call_args[0][0]\n         self.assertTrue(IObjectModifiedEvent.providedBy(event))\n         self.assertEqual(len(event.descriptions), 1)\n-        self.assertEqual(event.descriptions[0].attribute, \'title\')\n-        self.assertEqual(event.descriptions[0].oldValue, \'Old title\')\n+        self.assertEqual(event.descriptions[0].attribute, "title")\n+        self.assertEqual(event.descriptions[0].oldValue, "Old title")\n \n     def test_fires_modified_event_on_change_props_per_changed_property(self):\n         fti = DexterityFTI(u"testtype")\n@@ -243,12 +251,11 @@ def test_fires_modified_event_on_change_props_per_changed_property(self):\n         fti.global_allow = True\n \n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         fti.manage_changeProperties(\n-            title="New title",\n-            allow_discussion=False,\n-            global_allow=False\n+            title="New title", allow_discussion=False, global_allow=False\n         )\n \n         self.assertEqual(len(notify_mock.call_args_list), 2)\n@@ -259,24 +266,21 @@ def test_checks_permission_in_is_construction_allowed_true(self):\n         container_dummy = self.create_dummy()\n \n         permission_dummy = self.create_dummy()\n-        permission_dummy.id = \'demo.Permission\'\n-        permission_dummy.title = \'Some add permission\'\n+        permission_dummy.id = "demo.Permission"\n+        permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(\n-            permission_dummy,\n-            IPermission,\n-            name=u"demo.Permission"\n-        )\n+        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         self.assertEqual(True, fti.isConstructionAllowed(container_dummy))\n         security_manager_mock.checkPermission.assert_called_once_with(\n-            \'Some add permission\', container_dummy)\n+            "Some add permission", container_dummy\n+        )\n \n     def test_checks_permission_in_is_construction_allowed_false(self):\n         fti = DexterityFTI(u"testtype")\n@@ -284,28 +288,25 @@ def test_checks_permission_in_is_construction_allowed_false(self):\n         container_dummy = self.create_dummy()\n \n         permission_dummy = self.create_dummy()\n-        permission_dummy.id = \'demo.Permission\'\n-        permission_dummy.title = \'Some add permission\'\n+        permission_dummy.id = "demo.Permission"\n+        permission_dummy.title = "Some add permission"\n \n-        self.mock_utility(\n-            permission_dummy,\n-            IPermission,\n-            name=u"demo.Permission"\n-        )\n+        self.mock_utility(permission_dummy, IPermission, name=u"demo.Permission")\n \n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n         security_manager_mock.checkPermission.assert_called_once_with(\n-            \'Some add permission\', container_dummy)\n+            "Some add permission", container_dummy\n+        )\n \n     def test_no_permission_utility_means_no_construction(self):\n         fti = DexterityFTI(u"testtype")\n-        fti.add_permission = \'demo.Permission\'  # not an IPermission utility\n+        fti.add_permission = "demo.Permission"  # not an IPermission utility\n         container_dummy = self.create_dummy()\n         self.assertEqual(False, fti.isConstructionAllowed(container_dummy))\n \n@@ -317,85 +318,76 @@ def test_no_permission_means_no_construction(self):\n \n     def test_add_view_url_set_on_creation(self):\n         fti = DexterityFTI(u"testtype")\n-        self.assertEqual(\n-            \'string:${folder_url}/++add++testtype\',\n-            fti.add_view_expr\n-        )\n+        self.assertEqual("string:${folder_url}/++add++testtype", fti.add_view_expr)\n \n     def test_factory_set_on_creation(self):\n         fti = DexterityFTI(u"testtype")\n-        self.assertEqual(\'testtype\', fti.factory)\n+        self.assertEqual("testtype", fti.factory)\n \n     def test_addview_and_factory_not_overridden_on_creation(self):\n         fti = DexterityFTI(\n             u"testtype",\n             add_view_expr="string:${folder_url}/@@my-addview",\n-            factory="my.factory"\n+            factory="my.factory",\n         )\n-        self.assertEqual(\n-            \'string:${folder_url}/@@my-addview\',\n-            fti.add_view_expr\n-        )\n-        self.assertEqual(\'my.factory\', fti.factory)\n+        self.assertEqual("string:${folder_url}/@@my-addview", fti.add_view_expr)\n+        self.assertEqual("my.factory", fti.factory)\n \n     def test_meta_type(self):\n         fti = DexterityFTI(\n-            u"testtype",\n-            klass="plone.dexterity.tests.test_fti.TestClass"\n+            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n         )\n         self.assertEqual(TestClass.meta_type, fti.Metatype())\n \n     def test_meta_type_change_class(self):\n         fti = DexterityFTI(\n-            u"testtype",\n-            klass="plone.dexterity.tests.test_fti.TestClass"\n-        )\n-        fti._updateProperty(\n-            \'klass\',\n-            "plone.dexterity.tests.test_fti.TestClass2"\n+            u"testtype", klass="plone.dexterity.tests.test_fti.TestClass"\n         )\n+        fti._updateProperty("klass", "plone.dexterity.tests.test_fti.TestClass2")\n         self.assertEqual(TestClass2.meta_type, fti.Metatype())\n \n     def test_title_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', title=b\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u"testtype", title=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Title())\n+        self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Title())\n \n         # with an i18n domain, we get a Message\n-        fti.i18n_domain = \'test\'\n+        fti.i18n_domain = "test"\n         msgid = fti.Title()\n-        self.assertEqual(u\'t\\xe9st\', msgid)\n-        self.assertEqual(\'test\', msgid.domain)\n+        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("test", msgid.domain)\n \n     def test_description_i18n(self):\n-        fti = DexterityFTI(u\'testtype\', description=b\'t\\xc3\\xa9st\')\n+        fti = DexterityFTI(u"testtype", description=b"t\\xc3\\xa9st")\n \n         # with no i18n domain, we get the UTF8-encoded title\n-        self.assertEqual(b\'t\\xc3\\xa9st\'.decode(\'utf8\'), fti.Description())\n+        self.assertEqual(b"t\\xc3\\xa9st".decode("utf8"), fti.Description())\n \n         # with an i18n domain, we get a Message\n-        fti.i18n_domain = \'test\'\n+        fti.i18n_domain = "test"\n         msgid = fti.Description()\n-        self.assertEqual(u\'t\\xe9st\', msgid)\n-        self.assertEqual(\'test\', msgid.domain)\n+        self.assertEqual(u"t\\xe9st", msgid)\n+        self.assertEqual("test", msgid.domain)\n \n     def test_lookupModel_without_schema_policy(self):\n         gsm = getGlobalSiteManager()\n         gsm.registerUtility(\n             DexteritySchemaPolicy(),\n             plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"dexterity"\n+            name=u"dexterity",\n         )\n \n         fti = DexterityFTI(u"testtype")\n         fti.schema = None\n-        fti.model_source = \'<model xmlns="http://namespaces.plone.org/\'\\\n-                           \'supermodel/schema"><schema/></model>\'\n+        fti.model_source = (\n+            \'<model xmlns="http://namespaces.plone.org/\'\n+            \'supermodel/schema"><schema/></model>\'\n+        )\n         fti.model_file = None\n \n         model = fti.lookupModel()\n-        self.assertEqual(False, ITestInterface in model.schemata[\'\'].__bases__)\n+        self.assertEqual(False, ITestInterface in model.schemata[""].__bases__)\n \n     def test_lookupModel_with_schema_policy(self):\n         class TestSchemaPolicy(DexteritySchemaPolicy):\n@@ -405,20 +397,20 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy,\n-            plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n         )\n \n         fti = DexterityFTI(u"testtype")\n         fti.schema = None\n-        fti.model_source = \'<model xmlns="http://namespaces.plone.org/\'\\\n-                           \'supermodel/schema"><schema/></model>\'\n+        fti.model_source = (\n+            \'<model xmlns="http://namespaces.plone.org/\'\n+            \'supermodel/schema"><schema/></model>\'\n+        )\n         fti.model_file = None\n         fti.schema_policy = u"test"\n \n         model = fti.lookupModel()\n-        self.assertEqual(True, ITestInterface in model.schemata[\'\'].__bases__)\n+        self.assertEqual(True, ITestInterface in model.schemata[""].__bases__)\n \n \n class TestFTIEvents(MockTestCase):\n@@ -438,32 +430,29 @@ def test_components_registered_on_add(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         ftiAdded(fti, ObjectAddedEvent(fti, container_dummy, fti.getId()))\n \n         args1, kwargs1 = site_manager_mock.registerUtility.call_args_list[0]\n         self.assertEqual(args1, (fti, IDexterityFTI, portal_type))\n-        self.assertEqual(kwargs1, {\'info\': \'plone.dexterity.dynamic\'})\n+        self.assertEqual(kwargs1, {"info": "plone.dexterity.dynamic"})\n \n         args2, kwargs2 = site_manager_mock.registerUtility.call_args_list[1]\n         self.assertIsInstance(args2[0], DexterityFactory)\n         self.assertEqual(args2[0].portal_type, portal_type)\n         self.assertEqual(args2[1:], (IFactory, portal_type))\n-        self.assertEqual(kwargs2, {\'info\': \'plone.dexterity.dynamic\'})\n+        self.assertEqual(kwargs2, {"info": "plone.dexterity.dynamic"})\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEqual(\n-            None,\n-            queryUtility(IDexterityFTI, name=portal_type)\n-        )\n+        self.assertNotEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_not_registered_on_add_if_exist(self):\n@@ -476,18 +465,16 @@ def test_components_not_registered_on_add_if_exist(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Register FTI utility and factory utility\n \n         self.mock_utility(fti, IDexterityFTI, name=portal_type)\n-        self.mock_utility(\n-            DexterityFactory(portal_type),\n-            IFactory,\n-            name=portal_type\n-        )\n+        self.mock_utility(DexterityFactory(portal_type), IFactory, name=portal_type)\n \n         # We expect that all components are registered, so do not expect any\n         # registrations\n@@ -506,8 +493,10 @@ def test_components_unregistered_on_delete(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # First add the components\n@@ -516,16 +505,16 @@ def test_components_unregistered_on_delete(self):\n         # Then remove them again\n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n         self.assertEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertEqual(None, queryUtility(IFactory, name=portal_type))\n \n-    def test_components_unregistered_on_delete_does_not_error_with_no_components(self):  # noqa\n+    def test_components_unregistered_on_delete_does_not_error_with_no_components(\n+        self,\n+    ):  # noqa\n         portal_type = u"testtype"\n         fti = DexterityFTI(portal_type)\n         container_dummy = self.create_dummy()\n@@ -535,8 +524,10 @@ def test_components_unregistered_on_delete_does_not_error_with_no_components(sel\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # We expect to always be able to unregister without error, even if the\n@@ -545,7 +536,8 @@ def test_components_unregistered_on_delete_does_not_error_with_no_components(sel\n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IDexterityFTI, name=portal_type)\n+            provided=IDexterityFTI, name=portal_type\n+        )\n \n     def test_global_components_not_unregistered_on_delete(self):\n         portal_type = u"testtype"\n@@ -557,18 +549,16 @@ def test_global_components_not_unregistered_on_delete(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Register FTI utility and factory utility\n \n         self.mock_utility(fti, IDexterityFTI, name=portal_type)\n-        self.mock_utility(\n-            DexterityFactory(portal_type),\n-            IFactory,\n-            name=portal_type\n-        )\n+        self.mock_utility(DexterityFactory(portal_type), IFactory, name=portal_type)\n \n         # We expect to always be able to unregister without error, even if the\n         # component exists. The factory is only unregistered if it was\n@@ -576,16 +566,11 @@ def test_global_components_not_unregistered_on_delete(self):\n \n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEqual(\n-            None,\n-            queryUtility(IDexterityFTI, name=portal_type)\n-        )\n+        self.assertNotEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_components_reregistered_on_rename(self):\n@@ -598,24 +583,19 @@ def test_components_reregistered_on_rename(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n-        self.assertEqual(\n-            \'string:${folder_url}/++add++testtype\',\n-            fti.add_view_expr\n-        )\n+        self.assertEqual("string:${folder_url}/++add++testtype", fti.add_view_expr)\n \n         ftiRenamed(\n             fti,\n             ObjectMovedEvent(\n-                fti,\n-                container_dummy,\n-                fti.getId(),\n-                container_dummy,\n-                u"newtype"\n-            )\n+                fti, container_dummy, fti.getId(), container_dummy, u"newtype"\n+            ),\n         )\n \n         # First look for unregistration of all local components\n@@ -626,16 +606,11 @@ def test_components_reregistered_on_rename(self):\n         # Then look for re-registration of global components\n         self.assertEqual(site_manager_mock.registerUtility.call_count, 2)\n \n-        site_dummy = self.create_dummy(\n-            getSiteManager=lambda: site_manager_mock\n-        )\n+        site_dummy = self.create_dummy(getSiteManager=lambda: site_manager_mock)\n         setSite(site_dummy)\n         setHooks()\n \n-        self.assertNotEqual(\n-            None,\n-            queryUtility(IDexterityFTI, name=portal_type)\n-        )\n+        self.assertNotEqual(None, queryUtility(IDexterityFTI, name=portal_type))\n         self.assertNotEqual(None, queryUtility(IFactory, name=portal_type))\n \n     def test_dynamic_schema_refreshed_on_modify_model_file(self):\n@@ -650,9 +625,7 @@ class INew(Interface):\n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         class IBlank1(Interface):\n@@ -666,13 +639,12 @@ class IBlank1(Interface):\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'model_file\', \'\')\n-            )\n+                fti, DexterityFTIModificationDescription("model_file", "")\n+            ),\n         )\n \n-        self.assertTrue(\'title\' in IBlank1)\n-        self.assertTrue(IBlank1[\'title\'].title == u"title")\n+        self.assertTrue("title" in IBlank1)\n+        self.assertTrue(IBlank1["title"].title == u"title")\n \n     def test_dynamic_schema_refreshed_on_modify_model_source(self):\n         portal_type = u"testtype"\n@@ -686,9 +658,7 @@ class INew(Interface):\n         fti.lookupModel = Mock(return_value=model_dummy)\n         self.create_dummy()\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # b/c of zope.interface does not support hashing of the same class multiple times\n@@ -705,13 +675,12 @@ class IBlank2(Interface):\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'model_source\', \'\')\n-            )\n+                fti, DexterityFTIModificationDescription("model_source", "")\n+            ),\n         )\n \n-        self.assertTrue(\'title\' in IBlank2)\n-        self.assertTrue(IBlank2[\'title\'].title == u"title")\n+        self.assertTrue("title" in IBlank2)\n+        self.assertTrue(IBlank2["title"].title == u"title")\n \n     def test_dynamic_schema_refreshed_on_modify_schema_policy(self):\n         portal_type = u"testtype"\n@@ -730,14 +699,10 @@ def bases(self, schemaName, tree):\n         gsm = getGlobalSiteManager()\n         policy = TestSchemaPolicy()\n         gsm.registerUtility(\n-            policy,\n-            plone.supermodel.interfaces.ISchemaPolicy,\n-            name=u"test"\n+            policy, plone.supermodel.interfaces.ISchemaPolicy, name=u"test"\n         )\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # Set source interface\n@@ -745,7 +710,7 @@ def bases(self, schemaName, tree):\n         setattr(plone.dexterity.schema.generated, schemaName, IBlank3)\n         original = getattr(plone.dexterity.schema.generated, schemaName)\n         self.assertNotIn(INew, original.__bases__)\n-        self.assertNotIn(\'title\', original)\n+        self.assertNotIn("title", original)\n \n         # Set new schema_policy\n         fti.schema_policy = "test"\n@@ -754,12 +719,11 @@ def bases(self, schemaName, tree):\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'schema_policy\', \'\')\n-            )\n+                fti, DexterityFTIModificationDescription("schema_policy", "")\n+            ),\n         )\n         updated = getattr(plone.dexterity.schema.generated, schemaName)\n-        self.assertIn(\'title\', updated)\n+        self.assertIn("title", updated)\n         self.assertIn(INew, updated.__bases__)\n \n     def test_concrete_schema_not_refreshed_on_modify_schema(self):\n@@ -775,9 +739,7 @@ class INew(Interface):\n         model_dummy = Model({u"": INew})\n         fti.lookupModel = Mock(return_value=model_dummy)\n \n-        site_dummy = self.create_dummy(\n-            getPhysicalPath=lambda: (\'\', \'siteid\')\n-        )\n+        site_dummy = self.create_dummy(getPhysicalPath=lambda: ("", "siteid"))\n         self.mock_utility(site_dummy, ISiteRoot)\n \n         # Set schema to something so that hasDynamicSchema is false\n@@ -792,13 +754,10 @@ class INew(Interface):\n \n         ftiModified(\n             fti,\n-            ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'schema\', \'\')\n-            )\n+            ObjectModifiedEvent(fti, DexterityFTIModificationDescription("schema", "")),\n         )\n \n-        self.assertFalse(\'title\' in IBlank4)\n+        self.assertFalse("title" in IBlank4)\n \n     def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         portal_type = u"testtype"\n@@ -809,34 +768,37 @@ def test_old_factory_unregistered_after_name_changed_if_dynamic(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend like we have a utility registered\n \n         reg1 = self.create_dummy()\n         reg1.provided = IFactory\n-        reg1.name = \'old-factory\'\n-        reg1.info = \'plone.dexterity.dynamic\'\n+        reg1.name = "old-factory"\n+        reg1.info = "plone.dexterity.dynamic"\n \n         site_manager_mock.registeredUtilities = Mock(return_value=[reg1])\n \n-        fti.factory = \'new-factory\'\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'factory\', \'old-factory\')\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "old-factory")\n+            ),\n         )\n \n         # Expect this to get removed\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IFactory, name=\'old-factory\')\n+            provided=IFactory, name="old-factory"\n+        )\n         # And a new one to be created with the new factory name\n         self.assertEqual(\n-            site_manager_mock.registerUtility.call_args[0][2], \'new-factory\')\n+            site_manager_mock.registerUtility.call_args[0][2], "new-factory"\n+        )\n \n     def test_new_factory_not_registered_after_name_changed_if_exists(self):\n         portal_type = u"testtype"\n@@ -847,24 +809,21 @@ def test_new_factory_not_registered_after_name_changed_if_exists(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Create a global default for the new name\n-        self.mock_utility(\n-            DexterityFactory(portal_type),\n-            IFactory,\n-            name=\'new-factory\'\n-        )\n+        self.mock_utility(DexterityFactory(portal_type), IFactory, name="new-factory")\n \n-        fti.factory = \'new-factory\'\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'factory\', \'old-factory\')\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "old-factory")\n+            ),\n         )\n \n         # Factory should not be registered again\n@@ -879,80 +838,82 @@ def test_old_factory_not_unregistered_if_not_created_by_dexterity(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend like we have a utility registered\n \n         reg1 = self.create_dummy()\n         reg1.provided = IFactory\n-        reg1.name = \'old-factory\'\n+        reg1.name = "old-factory"\n         reg1.info = None\n \n         site_manager_mock.registeredUtilities = Mock(return_value=[reg1])\n \n-        fti.factory = \'new-factory\'\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\'factory\', \'old-factory\')\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "old-factory")\n+            ),\n         )\n \n         # This should not be removed, since we didn\'t create it\n         self.assertFalse(site_manager_mock.unregisterUtility.called)\n         # A new one may still be created, however\n         self.assertEqual(\n-            site_manager_mock.registerUtility.call_args[0][2], \'new-factory\')\n+            site_manager_mock.registerUtility.call_args[0][2], "new-factory"\n+        )\n \n     def test_renamed_factory_not_unregistered_if_not_unique(self):\n         portal_type = u"testtype"\n-        fti = DexterityFTI(portal_type, factory=\'common-factory\')\n+        fti = DexterityFTI(portal_type, factory="common-factory")\n         portal_type2 = u"testtype2"\n-        fti2 = DexterityFTI(portal_type2, factory=\'common-factory\')\n+        fti2 = DexterityFTI(portal_type2, factory="common-factory")\n \n         # Mock the lookup of the site and the site manager at the site root\n         dummy_site = self.create_dummy()\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend two FTIs are registered, both using common-factory\n-        site_manager_mock.registeredUtilities = Mock(return_value=[\n-            self.create_dummy(\n-                provided=IFactory,\n-                name=\'common-factory\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-            self.create_dummy(\n-                component=fti,\n-                provided=IDexterityFTI,\n-                name=\'testtype\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-            self.create_dummy(\n-                component=fti2,\n-                provided=IDexterityFTI,\n-                name=\'testtype2\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-        ])\n-\n-        fti.factory = \'new-factory\'\n+        site_manager_mock.registeredUtilities = Mock(\n+            return_value=[\n+                self.create_dummy(\n+                    provided=IFactory,\n+                    name="common-factory",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+                self.create_dummy(\n+                    component=fti,\n+                    provided=IDexterityFTI,\n+                    name="testtype",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+                self.create_dummy(\n+                    component=fti2,\n+                    provided=IDexterityFTI,\n+                    name="testtype2",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+            ]\n+        )\n+\n+        fti.factory = "new-factory"\n         ftiModified(\n             fti,\n             ObjectModifiedEvent(\n-                fti,\n-                DexterityFTIModificationDescription(\n-                    \'factory\',\n-                    \'common-factory\'\n-                )\n-            )\n+                fti, DexterityFTIModificationDescription("factory", "common-factory")\n+            ),\n         )\n \n         # We shouldn\'t remove this since fti2 still uses it\n@@ -960,13 +921,14 @@ def test_renamed_factory_not_unregistered_if_not_unique(self):\n \n         # A new one may still be created, however\n         self.assertEqual(\n-            site_manager_mock.registerUtility.call_args[0][2], \'new-factory\')\n+            site_manager_mock.registerUtility.call_args[0][2], "new-factory"\n+        )\n \n     def test_deleted_factory_not_unregistered_if_not_unique(self):\n         portal_type = u"testtype"\n-        fti = DexterityFTI(portal_type, factory=\'common-factory\')\n+        fti = DexterityFTI(portal_type, factory="common-factory")\n         portal_type2 = u"testtype2"\n-        fti2 = DexterityFTI(portal_type2, factory=\'common-factory\')\n+        fti2 = DexterityFTI(portal_type2, factory="common-factory")\n         container_dummy = self.create_dummy()\n \n         # Mock the lookup of the site and the site manager at the site root\n@@ -974,31 +936,35 @@ def test_deleted_factory_not_unregistered_if_not_unique(self):\n         self.mock_utility(dummy_site, ISiteRoot)\n \n         site_manager_mock = Mock(\n-            wraps=PersistentComponents(bases=(getGlobalSiteManager(),)))\n+            wraps=PersistentComponents(bases=(getGlobalSiteManager(),))\n+        )\n         from zope.component.hooks import getSiteManager\n+\n         self.patch_global(getSiteManager, return_value=site_manager_mock)\n \n         # Pretend two FTIs are registered, both using common-factory\n         # NB: Assuming that "testtype" was already removed when this gets\n         #     called\n-        site_manager_mock.registeredUtilities = Mock(return_value=[\n-            self.create_dummy(\n-                provided=IFactory,\n-                name=\'common-factory\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-            self.create_dummy(\n-                component=fti2,\n-                provided=IDexterityFTI,\n-                name=\'testtype2\',\n-                info=\'plone.dexterity.dynamic\'\n-            ),\n-        ])\n+        site_manager_mock.registeredUtilities = Mock(\n+            return_value=[\n+                self.create_dummy(\n+                    provided=IFactory,\n+                    name="common-factory",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+                self.create_dummy(\n+                    component=fti2,\n+                    provided=IDexterityFTI,\n+                    name="testtype2",\n+                    info="plone.dexterity.dynamic",\n+                ),\n+            ]\n+        )\n \n         ftiRemoved(fti, ObjectRemovedEvent(fti, container_dummy, fti.getId()))\n \n         # We shouldn\'t remove this since fti2 still uses it\n         # The type itself should be removed though\n         site_manager_mock.unregisterUtility.assert_called_once_with(\n-            provided=IDexterityFTI, name=u\'testtype\'\n+            provided=IDexterityFTI, name=u"testtype"\n         )\ndiff --git a/plone/dexterity/tests/test_primary.py b/plone/dexterity/tests/test_primary.py\nindex e24741b..403e038 100644\n--- a/plone/dexterity/tests/test_primary.py\n+++ b/plone/dexterity/tests/test_primary.py\n@@ -15,24 +15,25 @@\n except ImportError:\n     from mock import Mock\n \n+\n class PrimaryFieldInfoTestCase(MockTestCase):\n     def test_primary_field_info(self):\n-\n         class ITest(Interface):\n             title = schema.TextLine()\n             body = schema.Text()\n-        alsoProvides(ITest[\'body\'], IPrimaryField)\n+\n+        alsoProvides(ITest["body"], IPrimaryField)\n \n         fti = DexterityFTI(u"testtype")\n         fti.lookupSchema = Mock(return_value=ITest)\n         fti.behaviors = []\n         self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n \n-        item = Item(\'item\')\n-        item.portal_type = \'testtype\'\n-        item.body = u\'body text\'\n+        item = Item("item")\n+        item.portal_type = "testtype"\n+        item.body = u"body text"\n \n         info = PrimaryFieldInfo(item)\n-        assert info.fieldname == \'body\'\n-        assert info.field == ITest[\'body\']\n-        assert info.value == \'body text\'\n+        assert info.fieldname == "body"\n+        assert info.field == ITest["body"]\n+        assert info.value == "body text"\ndiff --git a/plone/dexterity/tests/test_schema.py b/plone/dexterity/tests/test_schema.py\nindex 87b3ec6..35e90e9 100644\n--- a/plone/dexterity/tests/test_schema.py\n+++ b/plone/dexterity/tests/test_schema.py\n@@ -20,20 +20,20 @@\n except ImportError:\n     from mock import Mock\n \n-class TestSchemaModuleFactory(MockTestCase):\n \n+class TestSchemaModuleFactory(MockTestCase):\n     def test_transient_schema(self):\n \n         # No IDexterityFTI registered\n         factory = schema.SchemaModuleFactory()\n-        schemaName = schema.portalTypeToSchemaName(\'testtype\', prefix=\'site\')\n+        schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n         klass = factory(schemaName, schema.generated)\n \n         self.assertTrue(isinstance(klass, InterfaceClass))\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n     def test_concrete_default_schema(self):\n@@ -41,24 +41,25 @@ def test_concrete_default_schema(self):\n         # Mock schema model\n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title=u"Dummy")\n+\n         mock_model = Model({u"": IDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n-        schemaName = schema.portalTypeToSchemaName(\'testtype\', prefix=\'site\')\n+        schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n         klass = factory(schemaName, schema.generated)\n \n         self.assertTrue(isinstance(klass, InterfaceClass))\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n-        self.assertEqual((\'dummy\',), tuple(zope.schema.getFieldNames(klass)))\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n+        self.assertEqual(("dummy",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_named_schema(self):\n \n@@ -68,20 +69,18 @@ class IDummy(Interface):\n \n         class INamedDummy(Interface):\n             named = zope.schema.TextLine(title=u"Named")\n-        mock_model = Model({u"": IDummy,\n-                            u"named": INamedDummy})\n+\n+        mock_model = Model({u"": IDummy, u"named": INamedDummy})\n \n         # Mock FTI\n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         factory = schema.SchemaModuleFactory()\n \n         schemaName = schema.portalTypeToSchemaName(\n-            \'testtype\',\n-            schema=u"named",\n-            prefix=\'site\'\n+            "testtype", schema=u"named", prefix="site"\n         )\n         klass = factory(schemaName, schema.generated)\n \n@@ -92,13 +91,13 @@ class INamedDummy(Interface):\n \n         self.assertFalse(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n-        self.assertEqual((\'named\',), tuple(zope.schema.getFieldNames(klass)))\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n+        self.assertEqual(("named",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_transient_schema_made_concrete(self):\n \n         factory = schema.SchemaModuleFactory()\n-        schemaName = schema.portalTypeToSchemaName(\'testtype\', prefix=\'site\')\n+        schemaName = schema.portalTypeToSchemaName("testtype", prefix="site")\n \n         # No IDexterityFTI registered\n \n@@ -107,7 +106,7 @@ def test_transient_schema_made_concrete(self):\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n         # Calling it again gives the same result\n@@ -117,18 +116,19 @@ def test_transient_schema_made_concrete(self):\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n         self.assertEqual((), tuple(zope.schema.getFields(klass)))\n \n         # Now register a mock FTI and try again\n \n         class IDummy(Interface):\n             dummy = zope.schema.TextLine(title=u"Dummy")\n+\n         mock_model = Model({u"": IDummy})\n \n         fti_mock = Mock(spec=DexterityFTI)\n         fti_mock.lookupModel = Mock(return_value=mock_model)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         klass = factory(schemaName, schema.generated)\n \n@@ -136,61 +136,64 @@ class IDummy(Interface):\n         self.assertTrue(klass.isOrExtends(IDexteritySchema))\n         self.assertTrue(IContentType.providedBy(klass))\n         self.assertEqual(schemaName, klass.__name__)\n-        self.assertEqual(\'plone.dexterity.schema.generated\', klass.__module__)\n+        self.assertEqual("plone.dexterity.schema.generated", klass.__module__)\n \n         # Now we get the fields from the FTI\'s model\n-        self.assertEqual((\'dummy\',), tuple(zope.schema.getFieldNames(klass)))\n+        self.assertEqual(("dummy",), tuple(zope.schema.getFieldNames(klass)))\n \n     def test_portalTypeToSchemaName_with_schema_and_prefix(self):\n         self.assertEqual(\n-            \'prefix_0_type_0_schema\',\n-            schema.portalTypeToSchemaName(\'type\', \'schema\', \'prefix\')\n+            "prefix_0_type_0_schema",\n+            schema.portalTypeToSchemaName("type", "schema", "prefix"),\n         )\n         self.assertEqual(\n-            \'prefix_0_type\',\n-            schema.portalTypeToSchemaName(\'type\', \'\', \'prefix\')\n+            "prefix_0_type", schema.portalTypeToSchemaName("type", "", "prefix")\n         )\n         self.assertEqual(\n-            \'prefix_0_type_1_one_2_two\',\n-            schema.portalTypeToSchemaName(\'type one.two\', \'\', \'prefix\')\n+            "prefix_0_type_1_one_2_two",\n+            schema.portalTypeToSchemaName("type one.two", "", "prefix"),\n         )\n \n     def test_portalTypeToSchemaName_looks_up_portal_for_prefix(self):\n         portal_mock = Mock()\n-        portal_mock.getPhysicalPath = Mock(return_value=[\'\', \'foo\', \'portalid\'])\n+        portal_mock.getPhysicalPath = Mock(return_value=["", "foo", "portalid"])\n         self.mock_utility(portal_mock, ISiteRoot)\n \n-        self.assertEqual(\n-            \'foo_4_portalid_0_type\',\n-            schema.portalTypeToSchemaName(\'type\')\n-        )\n+        self.assertEqual("foo_4_portalid_0_type", schema.portalTypeToSchemaName("type"))\n \n     def test_schemaNameToPortalType(self):\n         self.assertEqual(\n-            \'type\',\n-            schema.schemaNameToPortalType(\'prefix_0_type_0_schema\')\n-        )\n-        self.assertEqual(\n-            \'type\',\n-            schema.schemaNameToPortalType(\'prefix_0_type\')\n+            "type", schema.schemaNameToPortalType("prefix_0_type_0_schema")\n         )\n+        self.assertEqual("type", schema.schemaNameToPortalType("prefix_0_type"))\n         self.assertEqual(\n-            \'type one.two\',\n-            schema.schemaNameToPortalType(\'prefix_0_type_1_one_2_two\')\n+            "type one.two", schema.schemaNameToPortalType("prefix_0_type_1_one_2_two")\n         )\n \n     def test_splitSchemaName(self):\n         self.assertEqual(\n-            (\'prefix\', \'type\', \'schema\',),\n-            schema.splitSchemaName(\'prefix_0_type_0_schema\')\n+            (\n+                "prefix",\n+                "type",\n+                "schema",\n+            ),\n+            schema.splitSchemaName("prefix_0_type_0_schema"),\n         )\n         self.assertEqual(\n-            (\'prefix\', \'type\', \'\',),\n-            schema.splitSchemaName(\'prefix_0_type\')\n+            (\n+                "prefix",\n+                "type",\n+                "",\n+            ),\n+            schema.splitSchemaName("prefix_0_type"),\n         )\n         self.assertEqual(\n-            (\'prefix\', \'type one.two\', \'\',),\n-            schema.splitSchemaName(\'prefix_0_type_1_one_2_two\')\n+            (\n+                "prefix",\n+                "type one.two",\n+                "",\n+            ),\n+            schema.splitSchemaName("prefix_0_type_1_one_2_two"),\n         )\n \n     def test_invalidate_cache(self):\n@@ -198,9 +201,7 @@ def test_invalidate_cache(self):\n         fti = DexterityFTI(portal_type)\n         SCHEMA_CACHE.get(portal_type)\n         SCHEMA_CACHE.behavior_schema_interfaces(fti)\n-        self.assertIn(\'_v_schema_behavior_schema_interfaces\',\n-                      fti.__dict__.keys())\n+        self.assertIn("_v_schema_behavior_schema_interfaces", fti.__dict__.keys())\n \n         invalidate_cache(fti)\n-        self.assertNotIn(\'_v_schema_behavior_schema_interfaces\',\n-                         fti.__dict__.keys())\n+        self.assertNotIn("_v_schema_behavior_schema_interfaces", fti.__dict__.keys())\ndiff --git a/plone/dexterity/tests/test_schema_cache.py b/plone/dexterity/tests/test_schema_cache.py\nindex df4aa1a..8940b7f 100644\n--- a/plone/dexterity/tests/test_schema_cache.py\n+++ b/plone/dexterity/tests/test_schema_cache.py\n@@ -18,12 +18,10 @@\n \n \n class TestSchemaCache(MockTestCase):\n-\n     def setUp(self):\n         SCHEMA_CACHE.clear()\n \n     def test_repeated_get_lookup(self):\n-\n         class ISchema(Interface):\n             pass\n \n@@ -44,24 +42,23 @@ def test_repeated_behavior_registration_lookup(self):\n         # Mock a test behavior\n         class ITestBehavior(Interface):\n             pass\n+\n         fti.behaviors = [ITestBehavior.__identifier__]\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=Interface,\n             marker=ITestBehavior,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestBehavior.__identifier__\n-        )\n \n-        r1 = SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n-        r2 = SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n+        self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n+\n+        r1 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n+        r2 = SCHEMA_CACHE.behavior_registrations(u"testtype")\n \n         self.assertTrue(r1[0] is r2[0] is registration)\n \n@@ -72,11 +69,11 @@ def test_unexistent_behaviors_lookup(self):\n         fti.behaviors = ["foo.bar"]\n \n         with patch("warnings.warn") as mock_warnings:\n-            SCHEMA_CACHE.behavior_registrations(u\'testtype\')\n+            SCHEMA_CACHE.behavior_registrations(u"testtype")\n             # Verify the warning has been issued\n             mock_warnings.assert_called_once_with(\n                 (\n-                    \'No behavior registration found for behavior named \'\n+                    "No behavior registration found for behavior named "\n                     \'"foo.bar" for factory "testtype" - trying deprecated \'\n                     \'fallback lookup (will be removed in 3.0)..."\'\n                 ),\n@@ -94,21 +91,20 @@ class ITestSchema(Interface):\n \n         class ITestMarker(Interface):\n             pass\n+\n         fti.behaviors = [ITestSchema.__identifier__]\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=ITestSchema,\n             marker=ITestMarker,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestSchema.__identifier__\n-        )\n+\n+        self.mock_utility(registration, IBehavior, ITestSchema.__identifier__)\n \n         s1 = SCHEMA_CACHE.subtypes(u"testtype")\n         s2 = SCHEMA_CACHE.subtypes(u"testtype")\n@@ -116,7 +112,6 @@ class ITestMarker(Interface):\n         self.assertTrue(s1[0] is s2[0] is ITestMarker)\n \n     def test_repeated_lookup_with_changed_schema(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -133,7 +128,6 @@ class ISchema2(Interface):\n         self.assertTrue(schema1 is schema2 and schema2 is ISchema1)\n \n     def test_repeated_lookup_with_changed_schema_and_invalidation(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -152,7 +146,6 @@ class ISchema2(Interface):\n         self.assertTrue(schema2 is ISchema2)\n \n     def test_none_not_cached(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -160,34 +153,32 @@ class ISchema1(Interface):\n         fti.lookupSchema = Mock(side_effect=[None, ISchema1, ISchema1])\n         self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema1 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema2 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema3 = SCHEMA_CACHE.get(u"testtype")\n \n         self.assertTrue(schema1 is None)\n         self.assertTrue(schema2 is schema3 is ISchema1)\n \n     def test_attribute_and_value_error_not_cached(self):\n-\n         class ISchema1(Interface):\n             pass\n \n         fti = DexterityFTI(u"testtype")\n-        fti.lookupSchema = Mock(\n-            side_effect=[AttributeError, ValueError, ISchema1])\n+        fti.lookupSchema = Mock(side_effect=[AttributeError, ValueError, ISchema1])\n         self.mock_utility(fti, IDexterityFTI, name=u"testtype")\n \n         schema1 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema2 = SCHEMA_CACHE.get(u"testtype")\n \n-        SCHEMA_CACHE.invalidate(\'testtype\')\n+        SCHEMA_CACHE.invalidate("testtype")\n         schema3 = SCHEMA_CACHE.get(u"testtype")\n \n         self.assertTrue(schema1 is None)\n@@ -195,7 +186,6 @@ class ISchema1(Interface):\n         self.assertTrue(schema3 is ISchema1)\n \n     def test_unknown_type_not_cached(self):\n-\n         class ISchema1(Interface):\n             pass\n \n@@ -211,7 +201,6 @@ class ISchema1(Interface):\n         self.assertTrue(schema2 is schema3 is ISchema1)\n \n     def test_clear_all_caches(self):\n-\n         class ISchema1(Interface):\n             pass\n \ndiff --git a/plone/dexterity/tests/test_security.py b/plone/dexterity/tests/test_security.py\nindex aeebc0b..af4ccd6 100644\n--- a/plone/dexterity/tests/test_security.py\n+++ b/plone/dexterity/tests/test_security.py\n@@ -18,8 +18,9 @@\n     from unittest.mock import Mock\n except ImportError:\n     from mock import Mock\n-class TestAttributeProtection(MockTestCase):\n \n+\n+class TestAttributeProtection(MockTestCase):\n     def setUp(self):\n         SCHEMA_CACHE.clear()\n \n@@ -30,8 +31,7 @@ class ITestSchema(Interface):\n             test = zope.schema.TextLine(title=u"Test")\n \n         ITestSchema.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test=\'zope2.View\', foo=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n         )\n \n         from plone.autoform.interfaces import IFormFieldProvider\n@@ -41,54 +41,46 @@ class ITestBehavior(Interface):\n             test2 = zope.schema.TextLine(title=u"Test")\n \n         ITestBehavior.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test2=\'zope2.View\', foo2=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n         )\n \n         # Mock a test behavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestBehavior.__identifier__\n-        )\n+\n+        self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n+        from plone.behavior.interfaces import IBehaviorAssignable\n         from plone.dexterity.behavior import DexterityBehaviorAssignable\n         from plone.dexterity.interfaces import IDexterityContent\n-        from plone.behavior.interfaces import IBehaviorAssignable\n+\n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.behaviors = ()\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Mock permissions\n         self.mock_utility(\n-            Permission(u\'zope2.View\', u"View"),\n-            IPermission,\n-            u\'zope2.View\'\n+            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n         )\n         self.mock_utility(\n-            Permission(u\'foo.View\', u"View foo"),\n-            IPermission,\n-            u\'foo.View\'\n+            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n         )\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n@@ -96,30 +88,27 @@ class ITestBehavior(Interface):\n         # mock security manager\n         security_manager_mock = Mock()\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         # run 1: schema and no behavior access to schema protected attribute\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n         self.assertFalse(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n+            item.__allow_access_to_unprotected_subobjects__("test", u"foo")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\'View\', item)\n+        security_manager_mock.checkPermission.assert_called_with("View", item)\n \n         # run 2: schema and no behavior access to known non schema attribute\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View foo\', item)\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n+        security_manager_mock.checkPermission.assert_called_with("View foo", item)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -127,18 +116,18 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test2\', u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\'View\', item)\n+        security_manager_mock.checkPermission.assert_called_with("View", item)\n \n         # run 5: no schema but behavior\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         fti_mock.lookupSchema = Mock(return_value=None)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test2\', u"foo2")\n+            item.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\'View\', item)\n+        security_manager_mock.checkPermission.assert_called_with("View", item)\n \n     def test_container(self):\n \n@@ -147,8 +136,7 @@ class ITestSchema(Interface):\n             test = zope.schema.TextLine(title=u"Test")\n \n         ITestSchema.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test=\'zope2.View\', foo=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test="zope2.View", foo="foo.View")\n         )\n \n         from plone.autoform.interfaces import IFormFieldProvider\n@@ -158,54 +146,46 @@ class ITestBehavior(Interface):\n             test2 = zope.schema.TextLine(title=u"Test")\n \n         ITestBehavior.setTaggedValue(\n-            READ_PERMISSIONS_KEY,\n-            dict(test2=\'zope2.View\', foo2=\'foo.View\')\n+            READ_PERMISSIONS_KEY, dict(test2="zope2.View", foo2="foo.View")\n         )\n \n         # Mock a test behavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior",\n             description=u"Provides test behavior",\n             interface=ITestBehavior,\n             marker=Interface,\n-            factory=None\n+            factory=None,\n         )\n         from plone.behavior.interfaces import IBehavior\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            ITestBehavior.__identifier__\n-        )\n+\n+        self.mock_utility(registration, IBehavior, ITestBehavior.__identifier__)\n+        from plone.behavior.interfaces import IBehaviorAssignable\n         from plone.dexterity.behavior import DexterityBehaviorAssignable\n         from plone.dexterity.interfaces import IDexterityContent\n-        from plone.behavior.interfaces import IBehaviorAssignable\n+\n         self.mock_adapter(\n-            DexterityBehaviorAssignable,\n-            IBehaviorAssignable,\n-            (IDexterityContent,)\n+            DexterityBehaviorAssignable, IBehaviorAssignable, (IDexterityContent,)\n         )\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Mock permissions\n         self.mock_utility(\n-            Permission(u\'zope2.View\', u"View"),\n-            IPermission,\n-            u\'zope2.View\'\n+            Permission(u"zope2.View", u"View"), IPermission, u"zope2.View"\n         )\n         self.mock_utility(\n-            Permission(u\'foo.View\', u"View foo"),\n-            IPermission,\n-            u\'foo.View\'\n+            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n         )\n \n         # Content item\n-        container = Container(\'test\')\n+        container = Container("test")\n         container.portal_type = u"testtype"\n         container.test = u"foo"\n         container.foo = u"bar"\n@@ -213,40 +193,29 @@ class ITestBehavior(Interface):\n         # mock security manager\n         security_manager_mock = Mock()\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         # run 1: schema and no behavior access to schema protected attribute\n         security_manager_mock.checkPermission = Mock(return_value=False)\n         SCHEMA_CACHE.clear()\n         self.assertFalse(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'test\',\n-                u"foo"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("test", u"foo")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View", container)\n \n         # run 2: schema and no behavior access to known non schema attribute\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'foo\',\n-                u"bar"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("foo", u"bar")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View foo\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View foo", container)\n \n         # run 3: schema and no behavior, unknown attributes are allowed\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'random\',\n-                u"stuff"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n         # run 4: schema and behavior\n@@ -254,26 +223,18 @@ class ITestBehavior(Interface):\n         fti_mock.behaviors = [ITestBehavior.__identifier__]\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'test2\',\n-                u"foo2"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View", container)\n \n         # run 5: no schema but behavior\n         fti_mock.lookupSchema = Mock(return_value=None)\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         SCHEMA_CACHE.clear()\n         self.assertTrue(\n-            container.__allow_access_to_unprotected_subobjects__(\n-                \'test2\',\n-                u"foo2"\n-            )\n+            container.__allow_access_to_unprotected_subobjects__("test2", u"foo2")\n         )\n-        security_manager_mock.checkPermission.assert_called_with(\n-            \'View\', container)\n+        security_manager_mock.checkPermission.assert_called_with("View", container)\n \n     def test_no_tagged_value(self):\n \n@@ -285,10 +246,10 @@ class ITestSchema(Interface):\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n@@ -296,16 +257,12 @@ class ITestSchema(Interface):\n         SCHEMA_CACHE.clear()\n \n         # Everything allowed\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_no_read_permission(self):\n@@ -313,22 +270,23 @@ def test_no_read_permission(self):\n         # Mock schema model\n         class ITestSchema(Interface):\n             test = zope.schema.TextLine(title=u"Test")\n-        ITestSchema.setTaggedValue(READ_PERMISSIONS_KEY, dict(foo=\'foo.View\'))\n+\n+        ITestSchema.setTaggedValue(READ_PERMISSIONS_KEY, dict(foo="foo.View"))\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=ITestSchema)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Mock permissions\n         self.mock_utility(\n-            Permission(u\'foo.View\', u"View foo"), IPermission, u\'foo.View\'\n+            Permission(u"foo.View", u"View foo"), IPermission, u"foo.View"\n         )\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n@@ -337,21 +295,17 @@ class ITestSchema(Interface):\n         security_manager_mock = Mock()\n         security_manager_mock.checkPermission = Mock(return_value=True)\n         from AccessControl import getSecurityManager\n-        self.patch_global(\n-            getSecurityManager, return_value=security_manager_mock)\n+\n+        self.patch_global(getSecurityManager, return_value=security_manager_mock)\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n \n         # Unknown attributes are allowed\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_no_schema(self):\n@@ -360,24 +314,20 @@ def test_no_schema(self):\n         fti_mock = DexterityFTI(u"testtype")\n         fti_mock.lookupSchema = Mock(return_value=None)\n         fti_mock.behaviors = ()\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n \n         SCHEMA_CACHE.clear()\n \n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_schema_exception(self):\n@@ -387,38 +337,32 @@ def test_schema_exception(self):\n         fti_mock.lookupSchema = Mock(side_effect=AttributeError)\n         fti_mock.behaviors = ()\n \n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n         item.test = u"foo"\n         item.foo = u"bar"\n \n         SCHEMA_CACHE.clear()\n \n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("test", u"foo"))\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("foo", u"bar"))\n         self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'test\', u"foo")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'foo\', u"bar")\n-        )\n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'random\', u"stuff")\n+            item.__allow_access_to_unprotected_subobjects__("random", u"stuff")\n         )\n \n     def test_empty_name(self):\n \n         # Mock FTI\n         fti_mock = DexterityFTI(u"testtype")\n-        self.mock_utility(fti_mock, IDexterityFTI, u\'testtype\')\n+        self.mock_utility(fti_mock, IDexterityFTI, u"testtype")\n \n         # Content item\n-        item = Item(\'test\')\n+        item = Item("test")\n         item.portal_type = u"testtype"\n \n         SCHEMA_CACHE.clear()\n \n-        self.assertTrue(\n-            item.__allow_access_to_unprotected_subobjects__(\'\', u"foo")\n-        )\n+        self.assertTrue(item.__allow_access_to_unprotected_subobjects__("", u"foo"))\ndiff --git a/plone/dexterity/tests/test_utils.py b/plone/dexterity/tests/test_utils.py\nindex c4c7401..37a8296 100644\n--- a/plone/dexterity/tests/test_utils.py\n+++ b/plone/dexterity/tests/test_utils.py\n@@ -11,11 +11,10 @@\n \n \n class TestUtils(MockTestCase):\n-\n     def test_getAdditionalSchemata(self):\n-        from plone.dexterity.interfaces import IDexterityFTI\n-        from plone.behavior.interfaces import IBehavior\n         from plone.autoform.interfaces import IFormFieldProvider\n+        from plone.behavior.interfaces import IBehavior\n+        from plone.dexterity.interfaces import IDexterityFTI\n         from zope.interface import Interface\n         from zope.interface import providedBy\n \n@@ -26,10 +25,10 @@ class IBehaviorSchema(Interface):\n             pass\n \n         behavior_mock = Mock()\n-        fti_mock = DexterityFTI(u\'testtype\')\n+        fti_mock = DexterityFTI(u"testtype")\n \n-        portal_type = \'prefix_0_type_0_schema\'\n-        behavior_name = \'behavior_0\'\n+        portal_type = "prefix_0_type_0_schema"\n+        behavior_name = "behavior_0"\n \n         fti_mock.behaviors = (behavior_name,)\n         behavior_mock.interface = IBehaviorInterface\n@@ -40,9 +39,7 @@ class IBehaviorSchema(Interface):\n         self.mock_utility(fti_mock, IDexterityFTI, portal_type)\n \n         self.mock_adapter(\n-            provider_mock,\n-            IFormFieldProvider,\n-            (providedBy(IBehaviorInterface), )\n+            provider_mock, IFormFieldProvider, (providedBy(IBehaviorInterface),)\n         )\n \n         generator = utils.getAdditionalSchemata(None, portal_type)\n@@ -53,39 +50,44 @@ class IBehaviorSchema(Interface):\n         self.assertTrue(schemata is IBehaviorSchema)\n \n     def testAddContentToContainer_preserves_existing_id(self):\n-        from plone.dexterity.content import Item\n         from plone.dexterity.content import Container\n+        from plone.dexterity.content import Item\n+\n         container = Container()\n-        container._ordering = u\'unordered\'\n+        container._ordering = u"unordered"\n         # Allow anyone to access the contents information on the container.\n         # This allows to check for existing content with the same id.\n         container.manage_permission(\n-            \'Access contents information\', [\'Anonymous\'], acquire=1)\n+            "Access contents information", ["Anonymous"], acquire=1\n+        )\n \n-        from zope.component import provideAdapter, provideUtility\n-        from zope.container.interfaces import INameChooser\n-        from zope.interface import Interface\n         from plone.app.content.namechooser import NormalizingNameChooser\n         from plone.folder.interfaces import IOrdering\n         from plone.folder.unordered import UnorderedOrdering\n-        from plone.i18n.normalizer.interfaces import IURLNormalizer\n         from plone.i18n.normalizer import URLNormalizer\n+        from plone.i18n.normalizer.interfaces import IURLNormalizer\n+        from zope.component import provideAdapter\n+        from zope.component import provideUtility\n+        from zope.container.interfaces import INameChooser\n+        from zope.interface import Interface\n+\n         provideAdapter(NormalizingNameChooser, [Interface], INameChooser)\n         provideUtility(URLNormalizer(), IURLNormalizer)\n         provideAdapter(UnorderedOrdering, [Interface], IOrdering)\n \n         # if the item has an id already, use it\n         from plone.dexterity.utils import addContentToContainer\n+\n         item = Item()\n-        item.id = \'foo\'\n+        item.id = "foo"\n         item = addContentToContainer(container, item, checkConstraints=False)\n-        self.assertEqual(item.id, \'foo\')\n+        self.assertEqual(item.id, "foo")\n \n         # unless it\'s a duplicate\n         item = Item()\n-        item.id = \'foo\'\n+        item.id = "foo"\n         item = addContentToContainer(container, item, checkConstraints=False)\n-        self.assertEqual(item.id, \'foo-1\')\n+        self.assertEqual(item.id, "foo-1")\n \n     def test_all_merged_tagged_values_dict(self):\n         from zope.interface import Interface\n@@ -97,23 +99,20 @@ class IIFace2(Interface):\n             pass\n \n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"), {}\n         )\n \n-        IIFace1.setTaggedValue(\'foo\', {\'a\': 10})\n-        IIFace1.setTaggedValue(\'bar\', {\'a\': 11})\n+        IIFace1.setTaggedValue("foo", {"a": 10})\n+        IIFace1.setTaggedValue("bar", {"a": 11})\n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {\'a\': 10}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"), {"a": 10}\n         )\n-        IIFace2.setTaggedValue(\'foo\', {\'a\': 12})\n+        IIFace2.setTaggedValue("foo", {"a": 12})\n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {\'a\': 12}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"), {"a": 12}\n         )\n-        IIFace2.setTaggedValue(\'foo\', {\'a\': 13, \'b\': 14})\n+        IIFace2.setTaggedValue("foo", {"a": 13, "b": 14})\n         self.assertEqual(\n-            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), \'foo\'),\n-            {\'a\': 13, \'b\': 14}\n+            utils.all_merged_tagged_values_dict((IIFace1, IIFace2), "foo"),\n+            {"a": 13, "b": 14},\n         )\ndiff --git a/plone/dexterity/tests/test_views.py b/plone/dexterity/tests/test_views.py\nindex a5a6cb0..e27e728 100644\n--- a/plone/dexterity/tests/test_views.py\n+++ b/plone/dexterity/tests/test_views.py\n@@ -50,6 +50,7 @@ class TestRequest(TestRequestBase):\n     """Zope 3\'s TestRequest doesn\'t support item assignment, but Zope 2\'s\n     request does.\n     """\n+\n     def __setitem__(self, key, value):\n         pass\n \n@@ -90,7 +91,6 @@ def enumerateBehaviors(self):\n \n \n class TestAddView(MockTestCase):\n-\n     def test_addview_sets_form_portal_type(self):\n \n         context = Container(u"container")\n@@ -110,7 +110,7 @@ def test_form_create(self):\n         # FTI - returns dummy factory name\n \n         fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.factory = u\'testfactory\'\n+        fti_mock.factory = u"testfactory"\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         # The form we\'re testing\n@@ -119,6 +119,7 @@ def test_form_create(self):\n \n         class ISchema(Interface):\n             foo = schema.TextLine()\n+\n         form.fields = Fields(ISchema)\n \n         # createObject and applyChanges\n@@ -128,11 +129,12 @@ class ISchema(Interface):\n         data_dummy = {u"foo": u"bar"}\n \n         from zope.component import createObject\n+\n         self.patch_global(createObject, return_value=obj_dummy)\n \n         provideAdapter(AttributeField)\n \n-        portal = self.create_dummy(getPhysicalPath=lambda: (\'\', \'site\'))\n+        portal = self.create_dummy(getPhysicalPath=lambda: ("", "site"))\n         self.mock_utility(portal, ISiteRoot)\n \n         self.assertEqual(obj_dummy, form.create(data_dummy))\n@@ -145,13 +147,12 @@ def test_add(self):\n         obj = Mock()\n         request = TestRequest()\n \n-        container._setObject = Mock(return_value=u\'newid\')\n+        container._setObject = Mock(return_value=u"newid")\n         container._getOb = Mock(return_value=obj)\n-        container.absolute_url = Mock(\n-            return_value="http://nohost/plone/container")\n+        container.absolute_url = Mock(return_value="http://nohost/plone/container")\n \n         obj.id = u"newid"\n-        obj.portal_type = \'testtype\'\n+        obj.portal_type = "testtype"\n \n         # New object\'s FTI\n         fti_mock = DexterityFTI(u"testtype")\n@@ -161,18 +162,13 @@ def test_add(self):\n         # Container FTI\n         container_fti_mock = DexterityFTI(u"containertype")\n         container_fti_mock.allowType = Mock(return_value=True)\n-        self.mock_utility(\n-            container_fti_mock,\n-            IDexterityFTI,\n-            name=u"containertype"\n-        )\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n         # Name chooser\n         @implementer(INameChooser)\n         class NameChooser(object):\n-\n             def __init__(self, context):\n                 pass\n \n@@ -198,12 +194,10 @@ def test_add_raises_unauthorized_if_construction_not_allowed(self):\n \n         # Container FTI\n         container_fti_mock = DexterityFTI(u"containertype")\n-        self.mock_utility(\n-            container_fti_mock, IDexterityFTI, name=u"containertype"\n-        )\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n-        obj.portal_type = \'testtype\'\n+        obj.portal_type = "testtype"\n \n         form = DefaultAddForm(container, request)\n         form.portal_type = u"testtype"\n@@ -216,7 +210,7 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         obj = Mock()\n         request = TestRequest()\n \n-        obj.portal_type = \'testtype\'\n+        obj.portal_type = "testtype"\n \n         # New object\'s FTI\n         fti_mock = DexterityFTI(u"testtype")\n@@ -226,11 +220,7 @@ def test_add_raises_value_error_if_type_not_addable(self):\n         # Container FTI\n         container_fti_mock = DexterityFTI(u"containertype")\n         container_fti_mock.allowType = Mock(return_value=False)\n-        self.mock_utility(\n-            container_fti_mock,\n-            IDexterityFTI,\n-            name=u"containertype"\n-        )\n+        self.mock_utility(container_fti_mock, IDexterityFTI, name=u"containertype")\n \n         container.getTypeInfo = Mock(return_value=container_fti_mock)\n \n@@ -248,12 +238,12 @@ def test_label(self):\n         context_mock = Mock()\n         request_mock = TestRequest()\n \n-        request_mock.form[\'disable_border\'] = True\n+        request_mock.form["disable_border"] = True\n \n         # FTI\n \n         fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u\'Test title\')\n+        fti_mock.Title = Mock(return_value=u"Test title")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         # Form\n@@ -263,12 +253,12 @@ def test_label(self):\n \n         label = addform.label\n         self.assertEqual(u"Add ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping[\'name\'])\n+        self.assertEqual(u"Test title", label.mapping["name"])\n \n     def test_schema_lookup_add(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         request_mock = TestRequest()\n \n         # FTI\n@@ -277,48 +267,37 @@ def test_schema_lookup_add(self):\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n-            IBehaviorThree.__identifier__\n+            IBehaviorThree.__identifier__,\n         )\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 1",\n             description=u"Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorOne.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 2",\n             description=u"Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorTwo.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 3",\n             description=u"Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorThree.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorThree.__identifier__)\n \n         # Form\n         view = DefaultAddForm(context_mock, request_mock)\n@@ -327,31 +306,22 @@ def test_schema_lookup_add(self):\n         self.assertEqual(ISchema, view.schema)\n \n         # we expect here only formfieldprovider!\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n         # When we register our own IBehaviorAssignable we can\n         # influence what goes into the additionalSchemata. But in an Addform\n         # this never grips, since its an adapter on context, and contextless\n         # there is always the FTI the only valid source\n-        self.mock_adapter(\n-            NoBehaviorAssignable,\n-            IBehaviorAssignable,\n-            [Interface]\n-        )\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.mock_adapter(NoBehaviorAssignable, IBehaviorAssignable, [Interface])\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n     def test_fires_add_begun_event(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u\'testtype\',\n-            allowedContentTypes=lambda: [self.create_dummy(getId=lambda: \'testtype\')])\n+            portal_type=u"testtype",\n+            allowedContentTypes=lambda: [self.create_dummy(getId=lambda: "testtype")],\n+        )\n         request_mock = TestRequest()\n \n         # FTI\n@@ -359,16 +329,13 @@ def test_fires_add_begun_event(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -383,8 +350,8 @@ def test_update_checks_allowed_types(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u\'testtype\',\n-            allowedContentTypes=lambda: [])\n+            portal_type=u"testtype", allowedContentTypes=lambda: []\n+        )\n         request_mock = TestRequest()\n \n         # FTI\n@@ -392,11 +359,7 @@ def test_update_checks_allowed_types(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n@@ -409,8 +372,8 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n \n         # Context and request\n         context_mock = self.create_dummy(\n-            portal_type=u\'testtype\',\n-            allowedContentTypes=lambda: [])\n+            portal_type=u"testtype", allowedContentTypes=lambda: []\n+        )\n         request_mock = TestRequest()\n         alsoProvides(request_mock, IDeferSecurityCheck)\n \n@@ -419,11 +382,7 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n \n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n@@ -433,30 +392,29 @@ def test_update_ignores_type_check_if_security_check_deferred(self):\n         try:\n             view.update()\n         except ValueError:\n-            self.fail("Update raised Unauthorized with security checks "\n-                      "deferred")\n+            self.fail("Update raised Unauthorized with security checks " "deferred")\n \n     def test_fires_add_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n-        context_mock.absolute_url = \\\n-            lambda *a, **kw: \'http://127.0.0.1/plone/item\'\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n+        context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n         class StatusMessage(object):\n-\n             def __init__(self, request):\n                 pass\n \n-            def addStatusMessage(self, msg, type=\'\'):\n+            def addStatusMessage(self, msg, type=""):\n                 pass\n+\n         self.mock_adapter(StatusMessage, IStatusMessage, (Interface,))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -464,12 +422,10 @@ def addStatusMessage(self, msg, type=\'\'):\n         view.handleCancel(view, {})\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IAddCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IAddCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n \n \n class TestEditView(MockTestCase):\n-\n     def setUp(self):\n         SCHEMA_CACHE.clear()\n \n@@ -479,13 +435,13 @@ def test_label(self):\n \n         # Context and request\n \n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         request_mock = TestRequest()\n \n         # FTI\n \n         fti_mock = DexterityFTI(u"testtype")\n-        fti_mock.Title = Mock(return_value=u\'Test title\')\n+        fti_mock.Title = Mock(return_value=u"Test title")\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         # Form\n@@ -496,7 +452,7 @@ def test_label(self):\n \n         label = editview.label\n         self.assertEqual(u"Edit ${name}", six.text_type(label))\n-        self.assertEqual(u"Test title", label.mapping[\'name\'])\n+        self.assertEqual(u"Test title", label.mapping["name"])\n \n     def test_schema_lookup_edit(self):\n \n@@ -504,7 +460,7 @@ def test_schema_lookup_edit(self):\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n@@ -514,48 +470,37 @@ class IMarker(IDexterityContent):\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n-            IBehaviorThree.__identifier__\n+            IBehaviorThree.__identifier__,\n         )\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 1",\n             description=u"Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorOne.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 2",\n             description=u"Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorTwo.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 3",\n             description=u"Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorThree.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorThree.__identifier__)\n \n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n@@ -564,25 +509,18 @@ class IMarker(IDexterityContent):\n         self.assertEqual(ISchema, view.schema)\n \n         # we expect here only formfieldprovider!\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n         # When we register our own IBehaviorAssignable we can\n         # influence what goes into the additionalSchemata.\n-        self.mock_adapter(\n-            NoBehaviorAssignable,\n-            IBehaviorAssignable,\n-            [IMarker]\n-        )\n+        self.mock_adapter(NoBehaviorAssignable, IBehaviorAssignable, [IMarker])\n         additionalSchemata = tuple(view.additionalSchemata)\n         self.assertEqual(tuple(), tuple(additionalSchemata))\n \n     def test_fires_edit_begun_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         request_mock = TestRequest()\n \n         # FTI\n@@ -590,15 +528,12 @@ def test_fires_edit_begun_event(self):\n         fti_mock.lookupSchema = Mock(return_value=ISchema)\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-        self.mock_adapter(\n-            FieldWidgets,\n-            IWidgets,\n-            (Interface, Interface, Interface)\n-        )\n+        self.mock_adapter(FieldWidgets, IWidgets, (Interface, Interface, Interface))\n         self.mock_adapter(Actions, IActions, (Interface, Interface, Interface))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -606,30 +541,29 @@ def test_fires_edit_begun_event(self):\n         view.update()\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IEditBegunEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IEditBegunEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_cancelled_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\', title=u\'foo\')\n-        context_mock.absolute_url = \\\n-            lambda *a, **kw: \'http://127.0.0.1/plone/item\'\n+        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n         class StatusMessage(object):\n-\n             def __init__(self, request):\n                 pass\n \n-            def addStatusMessage(self, msg, type=\'\'):\n+            def addStatusMessage(self, msg, type=""):\n                 pass\n+\n         self.mock_adapter(StatusMessage, IStatusMessage, (Interface,))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n@@ -637,53 +571,50 @@ def addStatusMessage(self, msg, type=\'\'):\n         view.handleCancel(view, {})\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IEditCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IEditCancelledEvent.providedBy(notify_mock.call_args[0][0]))\n \n     def test_fires_edit_finished_event(self):\n \n         # Context and request\n-        context_mock = self.create_dummy(portal_type=u\'testtype\', title=u\'foo\')\n-        context_mock.absolute_url = \\\n-            lambda *a, **kw: \'http://127.0.0.1/plone/item\'\n+        context_mock = self.create_dummy(portal_type=u"testtype", title=u"foo")\n+        context_mock.absolute_url = lambda *a, **kw: "http://127.0.0.1/plone/item"\n         request_mock = TestRequest()\n \n         # mock status message\n         @implementer(IStatusMessage)\n         class StatusMessage(object):\n-\n             def __init__(self, request):\n                 pass\n \n-            def addStatusMessage(self, msg, type=\'\'):\n+            def addStatusMessage(self, msg, type=""):\n                 pass\n+\n         self.mock_adapter(StatusMessage, IStatusMessage, (Interface,))\n \n         # mock notify\n         from zope.event import notify\n+\n         notify_mock = self.patch_global(notify)\n \n         # Form\n         view = DefaultEditForm(context_mock, request_mock)\n         view.widgets = Mock()\n-        view.widgets.extract = Mock(return_value=({\'title\': u\'foo\'}, []))\n+        view.widgets.extract = Mock(return_value=({"title": u"foo"}, []))\n         view.applyChanges = Mock()\n         view.handleApply(view, {})\n \n         self.assertTrue(notify_mock.called)\n-        self.assertTrue(\n-            IEditFinishedEvent.providedBy(notify_mock.call_args[0][0]))\n+        self.assertTrue(IEditFinishedEvent.providedBy(notify_mock.call_args[0][0]))\n \n \n class TestDefaultView(MockTestCase):\n-\n     def test_schema_lookup_default_view(self):\n \n         # Context and request\n         class IMarker(IDexterityContent):\n             pass\n \n-        context_mock = self.create_dummy(portal_type=u\'testtype\')\n+        context_mock = self.create_dummy(portal_type=u"testtype")\n         alsoProvides(context_mock, IMarker)\n         request_mock = TestRequest()\n \n@@ -693,48 +624,37 @@ class IMarker(IDexterityContent):\n         fti_mock.behaviors = (\n             IBehaviorOne.__identifier__,\n             IBehaviorTwo.__identifier__,\n-            IBehaviorThree.__identifier__\n+            IBehaviorThree.__identifier__,\n         )\n         self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n         from plone.behavior.interfaces import IBehavior\n         from plone.behavior.registration import BehaviorRegistration\n+\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 1",\n             description=u"Provides test behavior",\n             interface=IBehaviorOne,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorOne.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorOne.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 2",\n             description=u"Provides test behavior",\n             interface=IBehaviorTwo,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorTwo.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorTwo.__identifier__)\n         registration = BehaviorRegistration(\n             title=u"Test Behavior 3",\n             description=u"Provides test behavior",\n             interface=IBehaviorThree,\n             marker=None,\n-            factory=None\n-        )\n-        self.mock_utility(\n-            registration,\n-            IBehavior,\n-            IBehaviorThree.__identifier__\n+            factory=None,\n         )\n+        self.mock_utility(registration, IBehavior, IBehaviorThree.__identifier__)\n \n         # Form\n         view = DefaultView(context_mock, request_mock)\n@@ -743,17 +663,10 @@ class IMarker(IDexterityContent):\n         self.assertEqual(ISchema, view.schema)\n \n         # we expect here only formfieldprovider!\n-        self.assertEqual(\n-            (IBehaviorOne, IBehaviorTwo),\n-            tuple(view.additionalSchemata)\n-        )\n+        self.assertEqual((IBehaviorOne, IBehaviorTwo), tuple(view.additionalSchemata))\n \n         # When we register our own IBehaviorAssignable we can\n         # influence what goes into the additionalSchemata.\n-        self.mock_adapter(\n-            NoBehaviorAssignable,\n-            IBehaviorAssignable,\n-            [IMarker]\n-        )\n+        self.mock_adapter(NoBehaviorAssignable, IBehaviorAssignable, [IMarker])\n         additionalSchemata = tuple(view.additionalSchemata)\n         self.assertEqual(tuple(), tuple(additionalSchemata))\ndiff --git a/plone/dexterity/tests/test_webdav.py b/plone/dexterity/tests/test_webdav.py\nindex a204e1f..b753f88 100644\n--- a/plone/dexterity/tests/test_webdav.py\n+++ b/plone/dexterity/tests/test_webdav.py\n@@ -35,10 +35,10 @@\n     from zope.filerepresentation.interfaces import IFileFactory\n     from zope.filerepresentation.interfaces import IRawReadFile\n     from zope.filerepresentation.interfaces import IRawWriteFile\n-    from zope.interface import provider\n     from zope.interface import alsoProvides\n     from zope.interface import implementer\n     from zope.interface import Interface\n+    from zope.interface import provider\n     from zope.lifecycleevent.interfaces import IObjectModifiedEvent\n     from zope.publisher.browser import TestRequest\n     from zope.size.interfaces import ISized\n@@ -53,20 +53,17 @@\n     except ImportError:\n         from mock import Mock\n \n-\n     if six.PY2:\n         # cope with upstream library changes in rendering the XML prolog\n         XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8"?>\'\n     else:\n         XML_PROLOG = b\'<?xml version="1.0" encoding="utf-8" ?>\'\n \n-\n     @provider(IFormFieldProvider)\n     class ITestBehavior(Interface):\n         foo = schema.Int()\n         bar = schema.Bytes()\n \n-\n     class DAVTestRequest(TestRequest):\n \n         get_header = TestRequest.getHeader\n@@ -74,11 +71,9 @@ class DAVTestRequest(TestRequest):\n         def _createResponse(self):\n             return HTTPResponse()\n \n-\n     class TestWebZope2DAVAPI(MockTestCase):\n-\n         def test_get_size_no_adapter(self):\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(0, item.get_size())\n \n@@ -88,12 +83,13 @@ def __init__(self, context):\n                     self.context = context\n \n                 def sizeForSorting(self):\n-                    return \'lines\', 10\n+                    return "lines", 10\n \n                 def sizeForDisplay(self):\n-                    \'10 lines\'\n+                    "10 lines"\n+\n             self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(0, item.get_size())\n \n@@ -103,17 +99,18 @@ def __init__(self, context):\n                     self.context = context\n \n                 def sizeForSorting(self):\n-                    return \'bytes\', 10\n+                    return "bytes", 10\n \n                 def sizeForDisplay(self):\n-                    \'10 bytes\'\n+                    "10 bytes"\n+\n             self.mock_adapter(SizedAdapter, ISized, (Item,))\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(10, item.get_size())\n \n         def test_content_type_no_adapter(self):\n-            item = Item(\'test\')\n+            item = Item("test")\n \n             self.assertEqual(None, item.content_type())\n             self.assertEqual(None, item.Format())\n@@ -122,49 +119,53 @@ def test_content_type_simple_adapter(self):\n             class ReadFileAdapter(object):\n                 def __init__(self, context):\n                     self.context = context\n-                mimeType = \'text/foo\'\n+\n+                mimeType = "text/foo"\n                 # others omitted\n+\n             self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n-            item = Item(\'test\')\n+            item = Item("test")\n \n-            self.assertEqual(\'text/foo\', item.content_type())\n-            self.assertEqual(\'text/foo\', item.Format())\n+            self.assertEqual("text/foo", item.content_type())\n+            self.assertEqual("text/foo", item.Format())\n \n         def test_get_no_adapter(self):\n-            item = Item(\'test\')\n+            item = Item("test")\n \n-            self.assertEqual(\'\', item.manage_DAVget())\n+            self.assertEqual("", item.manage_DAVget())\n \n         def test_get_simple_adapter(self):\n             class ReadFileAdapter(object):\n                 def __init__(self, context):\n                     self.context = context\n-                mimeType = \'text/foo\'\n-                encoding = \'latin1\'\n+\n+                mimeType = "text/foo"\n+                encoding = "latin1"\n \n                 def size(self):\n                     return 10\n \n                 def read(self, size=None):\n-                    return \'1234567890\'\n+                    return "1234567890"\n+\n             self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n-            self.assertEqual(\'1234567890\', item.manage_DAVget())\n+            self.assertEqual("1234567890", item.manage_DAVget())\n             self.assertEqual(\n-                \'text/foo; charset="latin1"\',\n-                request.response.getHeader(\'Content-Type\')\n+                \'text/foo; charset="latin1"\', request.response.getHeader("Content-Type")\n             )\n-            self.assertEqual(\'10\', request.response.getHeader(\'Content-Length\'))\n+            self.assertEqual("10", request.response.getHeader("Content-Length"))\n \n         def test_get_minimal_adapter(self):\n             class ReadFileAdapter(object):\n                 def __init__(self, context):\n                     self.context = context\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -172,24 +173,25 @@ def size(self):\n                     return None\n \n                 def read(self, size=None):\n-                    return \'1234567890\'\n+                    return "1234567890"\n+\n             self.mock_adapter(ReadFileAdapter, IRawReadFile, (Item,))\n \n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n-            self.assertEqual(\'1234567890\', item.manage_DAVget())\n-            self.assertEqual(None, request.response.getHeader(\'Content-Type\'))\n-            self.assertEqual(None, request.response.getHeader(\'Content-Length\'))\n+            self.assertEqual("1234567890", item.manage_DAVget())\n+            self.assertEqual(None, request.response.getHeader("Content-Type"))\n+            self.assertEqual(None, request.response.getHeader("Content-Length"))\n \n         def test_get_streaming(self):\n             @implementer(IStreamIterator)\n             class ReadFileAdapter(object):\n-\n                 def __init__(self, context):\n                     self.context = context\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -197,25 +199,26 @@ def size(self):\n                     return 10\n \n                 def read(self, size=None):\n-                    return \'1234567890\'\n+                    return "1234567890"\n \n             adapterInstance = ReadFileAdapter(None)\n \n             def factory(context):\n                 return adapterInstance\n+\n             self.mock_adapter(factory, IRawReadFile, (Item,))\n \n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             self.assertEqual(adapterInstance, item.manage_DAVget())\n \n         def test_put_no_adapter(self):\n-            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'\')})\n+            request = DAVTestRequest(environ={"BODYFILE": StringIO("")})\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             self.assertRaises(MethodNotAllowed, item.PUT)\n@@ -223,7 +226,7 @@ def test_put_no_adapter(self):\n         def test_put_no_body(self):\n             request = DAVTestRequest()\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             self.assertRaises(MethodNotAllowed, item.PUT)\n@@ -232,8 +235,9 @@ def test_put_no_content_type_header(self):\n             class WriteFile(object):\n                 def __init__(self, context):\n                     self.context = context\n-                    self._written = \'\'\n+                    self._written = ""\n                     self._closed = False\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -250,23 +254,24 @@ def factory(context):\n \n             self.mock_adapter(factory, IRawWriteFile, (Item,))\n \n-            request = DAVTestRequest(environ={\'BODYFILE\': StringIO(\'data\')})\n+            request = DAVTestRequest(environ={"BODYFILE": StringIO("data")})\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             item.PUT()\n             self.assertEqual(None, adapterInstance.mimeType)\n             self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual("data", adapterInstance._written)\n             self.assertEqual(True, adapterInstance._closed)\n \n         def test_put_with_content_type_header_no_charset(self):\n             class WriteFile(object):\n                 def __init__(self, context):\n                     self.context = context\n-                    self._written = \'\'\n+                    self._written = ""\n                     self._closed = False\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -290,19 +295,16 @@ def handler(event):\n             self.mock_handler(handler, (IObjectModifiedEvent,))\n \n             request = DAVTestRequest(\n-                environ={\n-                    \'BODYFILE\': StringIO(\'data\'),\n-                    \'HTTP_CONTENT_TYPE\': \'text/foo\'\n-                }\n+                environ={"BODYFILE": StringIO("data"), "HTTP_CONTENT_TYPE": "text/foo"}\n             )\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             item.PUT()\n-            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n+            self.assertEqual("text/foo", adapterInstance.mimeType)\n             self.assertEqual(None, adapterInstance.encoding)\n-            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual("data", adapterInstance._written)\n             self.assertEqual(True, adapterInstance._closed)\n             self.assertEqual(1, len(events))\n \n@@ -310,8 +312,9 @@ def test_put_with_content_type_header_and_charset(self):\n             class WriteFile(object):\n                 def __init__(self, context):\n                     self.context = context\n-                    self._written = \'\'\n+                    self._written = ""\n                     self._closed = False\n+\n                 mimeType = None\n                 encoding = None\n \n@@ -336,24 +339,24 @@ def handler(event):\n \n             request = DAVTestRequest(\n                 environ={\n-                    \'BODYFILE\': StringIO(\'data\'),\n-                    \'HTTP_CONTENT_TYPE\': \'text/foo; charset="latin1"\'\n+                    "BODYFILE": StringIO("data"),\n+                    "HTTP_CONTENT_TYPE": \'text/foo; charset="latin1"\',\n                 }\n             )\n \n-            item = Item(\'item\')\n+            item = Item("item")\n             item.REQUEST = request\n \n             item.PUT()\n-            self.assertEqual(\'text/foo\', adapterInstance.mimeType)\n-            self.assertEqual(\'latin1\', adapterInstance.encoding)\n-            self.assertEqual(\'data\', adapterInstance._written)\n+            self.assertEqual("text/foo", adapterInstance.mimeType)\n+            self.assertEqual("latin1", adapterInstance.encoding)\n+            self.assertEqual("data", adapterInstance._written)\n             self.assertEqual(True, adapterInstance._closed)\n             self.assertEqual(1, len(events))\n \n         def test_mkcol_no_adapter(self):\n-            container = Container(\'container\')\n-            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, \'test\')\n+            container = Container("container")\n+            self.assertRaises(MethodNotAllowed, container.MKCOL_handler, "test")\n \n         def test_mkcol_simple_adapter(self):\n             created = []\n@@ -364,18 +367,16 @@ def __init__(self, context):\n \n                 def __call__(self, id):\n                     created.append(id)\n+\n             self.mock_adapter(DirectoryFactory, IDirectoryFactory, (Container,))\n \n-            container = Container(\'container\')\n-            container.MKCOL_handler(\'test\')\n-            self.assertEqual([\'test\'], created)\n+            container = Container("container")\n+            container.MKCOL_handler("test")\n+            self.assertEqual(["test"], created)\n \n         def test_put_factory_no_adapter(self):\n-            container = Container(\'container\')\n-            self.assertEqual(\n-                None,\n-                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n-            )\n+            container = Container("container")\n+            self.assertEqual(None, container.PUT_factory("test", "text/foo", "body"))\n \n         def test_put_factory_simple_adapter(self):\n             instance = object()\n@@ -386,21 +387,19 @@ def __init__(self, context):\n \n                 def __call__(self, name, contentType, body):\n                     return instance\n+\n             self.mock_adapter(FileFactory, IFileFactory, (Container,))\n-            container = Container(\'container\')\n+            container = Container("container")\n             self.assertEqual(\n-                instance,\n-                container.PUT_factory(\'test\', \'text/foo\', \'body\')\n+                instance, container.PUT_factory("test", "text/foo", "body")\n             )\n \n         def test_list_without_items(self):\n-\n             class DummyContainer(Container):\n-\n                 def listFolderContents(self, filter=None):\n                     return []\n \n-            container = DummyContainer(\'container\')\n+            container = DummyContainer("container")\n \n             objects = container.listDAVObjects()\n             self.assertEqual(1, len(objects))\n@@ -409,122 +408,114 @@ def listFolderContents(self, filter=None):\n             self.assertEqual(container, objects[0].__parent__)\n \n         def test_list_with_items(self):\n-\n             class DummyContainer(Container):\n-\n                 def listFolderContents(self, filter=None):\n-                    return [Item(\'foo\')]\n+                    return [Item("foo")]\n \n-            container = DummyContainer(\'container\')\n+            container = DummyContainer("container")\n \n             objects = container.listDAVObjects()\n             self.assertEqual(2, len(objects))\n             self.assertTrue(isinstance(objects[0], FolderDataResource))\n             self.assertEqual(DAV_FOLDER_DATA_ID, objects[0].getId())\n             self.assertEqual(container, objects[0].__parent__)\n-            self.assertEqual(\'foo\', objects[1].getId())\n-\n+            self.assertEqual("foo", objects[1].getId())\n \n     class TestFolderDataResource(MockTestCase):\n-\n         def test_getId(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container)\n \n-            self.assertEqual(\'fdata\', r.getId())\n+            self.assertEqual("fdata", r.getId())\n             self.assertEqual(container, r.__parent__)\n \n         def test_HEAD(self):\n-\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertEqual(response, r.HEAD(request, request.response))\n             self.assertEqual(200, response.getStatus())\n-            self.assertTrue(\n-                response.getHeader(\'Content-Type\').startswith(\'text/foo\'))\n-            self.assertEqual(\'10\', response.getHeader(\'Content-Length\'))\n+            self.assertTrue(response.getHeader("Content-Type").startswith("text/foo"))\n+            self.assertEqual("10", response.getHeader("Content-Length"))\n \n         def test_OPTIONS(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertEqual(response, r.OPTIONS(request, request.response))\n             self.assertEqual(\n-                \'GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, \'\n-                \'PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK\',\n-                response.getHeader(\'Allow\')\n+                "GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PROPFIND, "\n+                "PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK",\n+                response.getHeader("Allow"),\n             )\n \n         def test_TRACE(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n \n             self.assertRaises(MethodNotAllowed, r.TRACE, request, request.response)\n \n         def test_PROPFIND(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             container.manage_changeProperties(title="Container")\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertEqual(response, r.PROPFIND(request, response))\n             self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = XML_PROLOG + b"""\n+            body = (\n+                XML_PROLOG\n+                + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>/site/container</d:href>\n@@ -558,27 +549,27 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n+            )\n \n             result = response.getBody()\n             result = re.sub(\n-                br\'<n:getlastmodified>.+</n:getlastmodified>\',\n-                br\'<n:getlastmodified>...</n:getlastmodified>\',\n-                result\n+                br"<n:getlastmodified>.+</n:getlastmodified>",\n+                br"<n:getlastmodified>...</n:getlastmodified>",\n+                result,\n             )\n             self.assertEqual(result.strip(), body.strip())\n \n         def test_PROPPATCH(self):\n             class TestContainer(Container):\n-\n                 def get_size(self):\n                     return 10\n \n                 def content_type(self):\n-                    return \'text/foo\'\n+                    return "text/foo"\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             container.manage_changeProperties(title="Container")\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             requestBody = """\\\n <?xml version="1.0" encoding="utf-8" ?>\n@@ -594,22 +585,24 @@ def content_type(self):\n \n             request = DAVTestRequest(\n                 environ={\n-                    \'URL\': \'http://example.org/site/container\',\n-                    \'BODY\': requestBody\n+                    "URL": "http://example.org/site/container",\n+                    "BODY": requestBody,\n                 }\n             )\n             response = request.response\n \n             self.assertEqual(response, r.PROPPATCH(request, response))\n \n-            self.assertEqual(\'New title\', container.getProperty(\'title\'))\n+            self.assertEqual("New title", container.getProperty("title"))\n \n             self.assertEqual(\n-                \'text/xml; charset="utf-8"\', response.getHeader(\'Content-Type\')\n+                \'text/xml; charset="utf-8"\', response.getHeader("Content-Type")\n             )\n             self.assertEqual(207, response.getStatus())\n \n-            body = XML_PROLOG + b"""\n+            body = (\n+                XML_PROLOG\n+                + b"""\n <d:multistatus xmlns:d="DAV:">\n <d:response>\n <d:href>http%3A//example.org/site/container</d:href>\n@@ -625,6 +618,7 @@ def content_type(self):\n </d:response>\n </d:multistatus>\n """\n+            )\n \n             result = response.getBody()\n \n@@ -633,16 +627,18 @@ def content_type(self):\n         def test_LOCK(self):\n             # Too much WebDAV magic - just test that it delegates correctly\n             class TestContainer(Container):\n-\n                 def LOCK(self, request, response):\n-                    self._locked = (request, response,)\n+                    self._locked = (\n+                        request,\n+                        response,\n+                    )\n                     return response\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -652,16 +648,18 @@ def LOCK(self, request, response):\n         def test_UNLOCK(self):\n             # Too much WebDAV magic - just test that it delegates correctly\n             class TestContainer(Container):\n-\n                 def UNLOCK(self, request, response):\n-                    self._unlocked = (request, response,)\n+                    self._unlocked = (\n+                        request,\n+                        response,\n+                    )\n                     return response\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -670,16 +668,18 @@ def UNLOCK(self, request, response):\n \n         def test_PUT(self):\n             class TestContainer(Container):\n-\n                 def PUT(self, request, response):\n-                    self._put = (request, response,)\n+                    self._put = (\n+                        request,\n+                        response,\n+                    )\n                     return response\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -687,44 +687,44 @@ def PUT(self, request, response):\n             self.assertEqual((request, response), container._put)\n \n         def test_MKCOL(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertRaises(MethodNotAllowed, r.MKCOL, request, response)\n \n         def test_DELETE(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertRaises(MethodNotAllowed, r.DELETE, request, response)\n \n         def test_COPY(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n             self.assertRaises(MethodNotAllowed, r.COPY, request, response)\n \n         def test_MOVE(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://example.org/site/container\'}\n+                environ={"URL": "http://example.org/site/container"}\n             )\n             response = request.response\n \n@@ -732,118 +732,102 @@ def test_MOVE(self):\n \n         def test_manage_DAVget(self):\n             class TestContainer(Container):\n-\n                 def manage_DAVget(self):\n-                    return \'data\'\n+                    return "data"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n-            self.assertEqual(\'data\', r.manage_DAVget())\n+            self.assertEqual("data", r.manage_DAVget())\n \n         def test_manage_FTPget(self):\n             class TestContainer(Container):\n                 def manage_FTPget(self):\n-                    return \'data\'\n+                    return "data"\n \n-            container = TestContainer(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = TestContainer("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n-            self.assertEqual(\'data\', r.manage_FTPget())\n+            self.assertEqual("data", r.manage_FTPget())\n \n         def test_listDAVObjects(self):\n-            container = Container(\'container\')\n-            r = FolderDataResource(\'fdata\', container).__of__(container)\n+            container = Container("container")\n+            r = FolderDataResource("fdata", container).__of__(container)\n \n             self.assertEqual([], r.listDAVObjects())\n \n-\n     class TestFileRepresentation(MockTestCase):\n-\n         def create_dummy(self, **kw):\n             return ItemDummy(**kw)\n \n         def test_directory_factory(self):\n             class TestContainer(Container):\n-\n                 def manage_addFolder(self, name):\n                     self._added = name\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             factory = DefaultDirectoryFactory(container)\n \n-            factory(\'foo\')\n-            self.assertEqual(\'foo\', container._added)\n+            factory("foo")\n+            self.assertEqual("foo", container._added)\n \n         def test_file_factory_finder_cruft(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n             factory = DefaultFileFactory(container)\n \n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'.DS_Store\',\n-                \'application/octet-stream\',\n-                \'xxx\'\n+                Unauthorized, factory, ".DS_Store", "application/octet-stream", "xxx"\n             )\n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'._test\',\n-                \'application/octet-stream\',\n-                \'xxx\'\n+                Unauthorized, factory, "._test", "application/octet-stream", "xxx"\n             )\n \n         def test_file_factory_no_ctr(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n             from Products.CMFCore.utils import getToolByName\n+\n             self.patch_global(getToolByName, return_value=None)\n \n             factory = DefaultFileFactory(container)\n \n-            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n         def test_file_factory_no_fti(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n             ctr_mock = Mock()\n             ctr_mock.findTypeName = Mock(return_value=None)\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n+            self.mock_tool(ctr_mock, "content_type_registry")\n \n             factory = DefaultFileFactory(container)\n \n-            self.assertEqual(None, factory(\'test.html\', \'text/html\', \'<html />\'))\n+            self.assertEqual(None, factory("test.html", "text/html", "<html />"))\n \n         def test_file_factory_not_allowed(self):\n-            container = Container(\'container\')\n-            container.portal_type = \'containertype\'\n+            container = Container("container")\n+            container.portal_type = "containertype"\n \n             child_fti_mock = Mock()\n             child_fti_mock.product = None\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=False)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             factory = DefaultFileFactory(container)\n \n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'test.html\',\n-                \'text/html\',\n-                \'<html />\'\n+                Unauthorized, factory, "test.html", "text/html", "<html />"\n             )\n \n         def test_file_factory_construction_not_allowed(self):\n-            container = Container(\'container\')\n-            container.portal_type = \'containertype\'\n+            container = Container("container")\n+            container.portal_type = "containertype"\n \n             child_fti_mock = Mock()\n             child_fti_mock.product = None\n@@ -851,180 +835,171 @@ def test_file_factory_construction_not_allowed(self):\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=True)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             factory = DefaultFileFactory(container)\n \n             self.assertRaises(\n-                Unauthorized,\n-                factory,\n-                \'test.html\',\n-                \'text/html\',\n-                \'<html />\'\n+                Unauthorized, factory, "test.html", "text/html", "<html />"\n             )\n \n         def test_file_factory_factory_method(self):\n             result_dummy = self.create_dummy()\n             container_mock = Mock()\n-            container_mock.invokeFactory = Mock(return_value=\'test-1.html\')\n+            container_mock.invokeFactory = Mock(return_value="test-1.html")\n             container_mock._getOb = Mock(return_value=result_dummy)\n             container_mock._delObject = Mock()\n             child_fti_mock = Mock()\n-            child_fti_mock.product = \'FooProduct\'\n+            child_fti_mock.product = "FooProduct"\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n             pt_mock.getTypeInfo = Mock(return_value=child_fti_mock)\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             factory = DefaultFileFactory(container_mock)\n \n             self.assertEqual(\n-                result_dummy,\n-                factory(\'test.html\', \'text/html\', \'<html />\')\n+                result_dummy, factory("test.html", "text/html", "<html />")\n             )\n \n         def test_file_factory_factory_utility(self):\n-            result_dummy = self.create_dummy(id=\'test.html\')\n+            result_dummy = self.create_dummy(id="test.html")\n             container_mock = Mock()\n             child_fti_mock = Mock()\n             child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n             child_fti_mock.product = None\n-            child_fti_mock.factory = \'childtype-factory\'\n+            child_fti_mock.factory = "childtype-factory"\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=True)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             def factory(*args, **kwargs):\n                 return result_dummy\n-            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n \n             factory = DefaultFileFactory(container_mock)\n \n             self.assertEqual(\n-                result_dummy,\n-                factory(\'test.html\', \'text/html\', \'<html />\')\n+                result_dummy, factory("test.html", "text/html", "<html />")\n             )\n-            self.assertEqual(result_dummy.Title(), \'test.html\')\n+            self.assertEqual(result_dummy.Title(), "test.html")\n \n         def test_file_factory_content_type_factory_utility(self):\n             container_mock = Mock()\n             child_fti_mock = Mock()\n             child_fti_mock.isConstructionAllowed = Mock(return_value=True)\n-            child_fti_mock.getId = Mock(return_value=\'childtype\')\n+            child_fti_mock.getId = Mock(return_value="childtype")\n             child_fti_mock.product = None\n-            child_fti_mock.factory = \'childtype-factory\'\n+            child_fti_mock.factory = "childtype-factory"\n             container_fti_mock = Mock()\n             container_fti_mock.allowType = Mock(return_value=True)\n             ctr_mock = Mock()\n-            ctr_mock.findTypeName = Mock(return_value=\'childtype\')\n+            ctr_mock.findTypeName = Mock(return_value="childtype")\n             pt_mock = Mock()\n-            pt_mock.getTypeInfo = Mock(\n-                side_effect=[child_fti_mock, container_fti_mock])\n-            self.mock_tool(ctr_mock, \'content_type_registry\')\n-            self.mock_tool(pt_mock, \'portal_types\')\n+            pt_mock.getTypeInfo = Mock(side_effect=[child_fti_mock, container_fti_mock])\n+            self.mock_tool(ctr_mock, "content_type_registry")\n+            self.mock_tool(pt_mock, "portal_types")\n \n             def factory(*args, **kwargs):\n                 return Item(*args, **kwargs)\n-            self.mock_utility(factory, IFactory, name=u\'childtype-factory\')\n+\n+            self.mock_utility(factory, IFactory, name=u"childtype-factory")\n \n             factory = DefaultFileFactory(container_mock)\n \n-            item = factory(\'test.html\', \'text/html\', \'<html />\')\n+            item = factory("test.html", "text/html", "<html />")\n \n-            self.assertEqual(\'test.html\', item.id)\n+            self.assertEqual("test.html", item.id)\n \n         def test_readfile_mimetype_no_message_no_fields(self):\n-\n             class ITest(Interface):\n                 pass\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n         def test_readfile_mimetype_no_message_no_primary_field(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n         def test_readfile_mimetype_no_message_single_primary_field(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n+\n+            alsoProvides(ITest["body"], IPrimaryField)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = []\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n         def test_readfile_mimetype_no_message_multiple_primary_fields(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n                 stuff = schema.Bytes()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n-            alsoProvides(ITest[\'stuff\'], IPrimaryField)\n+\n+            alsoProvides(ITest["body"], IPrimaryField)\n+            alsoProvides(ITest["stuff"], IPrimaryField)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+            self.assertEqual("message/rfc822", readfile.mimeType)\n \n         def test_readfile_mimetype_additional_schemata(self):\n             # This is mostly a test that utils.iterSchemata takes\n@@ -1037,8 +1012,9 @@ class ITestAdditional(Interface):\n                 # Additional behavior on an item\n                 body = schema.Text()\n                 stuff = schema.Bytes()\n-            alsoProvides(ITestAdditional[\'body\'], IPrimaryField)\n-            alsoProvides(ITestAdditional[\'stuff\'], IPrimaryField)\n+\n+            alsoProvides(ITestAdditional["body"], IPrimaryField)\n+            alsoProvides(ITestAdditional["stuff"], IPrimaryField)\n             alsoProvides(ITestAdditional, IFormFieldProvider)\n \n             class MockBehavior(object):\n@@ -1053,44 +1029,44 @@ def enumerateBehaviors(self):\n                     yield MockBehavior(ITestAdditional)\n \n             SCHEMA_CACHE.clear()\n-            fti_mock = DexterityFTI(u\'testtype\')\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n \n-            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable,\n-                              (Item, ))\n+            self.mock_adapter(MockBehaviorAssignable, IBehaviorAssignable, (Item,))\n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n-            self.assertEqual(\'message/rfc822\', readfile.mimeType)\n+            self.assertEqual("message/rfc822", readfile.mimeType)\n \n         def test_readfile_operations(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-            fti_mock = DexterityFTI(u\'testtype\')\n+            alsoProvides(ITest["body"], IPrimaryField)\n+\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n \n             readfile = DefaultReadFile(item)\n \n             message = Message()\n-            message[\'title\'] = \'Test title\'\n-            message[\'foo\'] = \'10\'\n-            message[\'bar\'] = \'xyz\'\n-            message.set_payload(\'<p>body</p>\')\n+            message["title"] = "Test title"\n+            message["foo"] = "10"\n+            message["bar"] = "xyz"\n+            message.set_payload("<p>body</p>")\n \n             from plone.rfc822 import constructMessageFromSchemata\n+\n             self.patch_global(constructMessageFromSchemata, return_value=message)\n \n             body = b"""\\\n@@ -1106,54 +1082,54 @@ class ITest(Interface):\n \n             self.assertEqual(body, readfile.read())\n             self.assertEqual(69, readfile.size())\n-            self.assertEqual(\'utf-8\', readfile.encoding)\n+            self.assertEqual("utf-8", readfile.encoding)\n             self.assertEqual(None, readfile.name)\n-            self.assertEqual(\'text/plain\', readfile.mimeType)\n+            self.assertEqual("text/plain", readfile.mimeType)\n \n             readfile.seek(2)\n             self.assertEqual(2, readfile.tell())\n-            self.assertEqual(b\'tl\', readfile.read(2))\n+            self.assertEqual(b"tl", readfile.read(2))\n             self.assertEqual(4, readfile.tell())\n \n             readfile.seek(0, 2)\n             self.assertEqual(69, readfile.tell())\n \n             readfile.seek(0)\n-            self.assertEqual(b\'foo: 10\\n\', readfile.readlines()[1])\n+            self.assertEqual(b"foo: 10\\n", readfile.readlines()[1])\n \n             readfile.seek(0)\n-            self.assertEqual(b\'foo: 10\\n\', readfile.readlines(100)[1])\n+            self.assertEqual(b"foo: 10\\n", readfile.readlines(100)[1])\n \n             readfile.seek(0)\n-            self.assertEqual(b\'title: Test title\\n\', readfile.readline())\n+            self.assertEqual(b"title: Test title\\n", readfile.readline())\n \n             readfile.seek(0)\n-            self.assertEqual(b\'title: Test title\\n\', readfile.readline(100))\n+            self.assertEqual(b"title: Test title\\n", readfile.readline(100))\n \n             readfile.seek(0)\n-            self.assertEqual(b\'foo: 10\\n\', list(iter(readfile))[1])\n+            self.assertEqual(b"foo: 10\\n", list(iter(readfile))[1])\n \n             self.assertEqual(False, readfile.closed)\n             readfile.close()\n \n         def test_writefile_file_operations(self):\n-\n             class ITest(Interface):\n                 title = schema.TextLine()\n                 body = schema.Text()\n-            alsoProvides(ITest[\'body\'], IPrimaryField)\n \n-            fti_mock = DexterityFTI(u\'testtype\')\n+            alsoProvides(ITest["body"], IPrimaryField)\n+\n+            fti_mock = DexterityFTI(u"testtype")\n             fti_mock.lookupSchema = Mock(return_value=ITest)\n             fti_mock.behaviors = [ITestBehavior.__identifier__]\n \n             self.mock_utility(fti_mock, IDexterityFTI, name=u"testtype")\n \n-            item = Item(\'item\')\n-            item.portal_type = \'testtype\'\n+            item = Item("item")\n+            item.portal_type = "testtype"\n             item.title = u"Test title"\n             item.foo = 10\n-            item.bar = \'xyz\'\n+            item.bar = "xyz"\n             item.body = u"<p>body</p>"\n \n             writefile = DefaultWriteFile(item)\n@@ -1167,21 +1143,22 @@ class ITest(Interface):\n <p>body</p>"""\n \n             from plone.rfc822 import initializeObjectFromSchemata\n+\n             self.patch_global(initializeObjectFromSchemata)\n \n-            writefile.mimeType = \'text/plain\'\n-            self.assertEqual(\'text/plain\', writefile.mimeType)\n+            writefile.mimeType = "text/plain"\n+            self.assertEqual("text/plain", writefile.mimeType)\n \n-            writefile.encoding = \'latin1\'\n-            self.assertEqual(\'latin1\', writefile.encoding)\n+            writefile.encoding = "latin1"\n+            self.assertEqual("latin1", writefile.encoding)\n \n-            writefile.filename = \'test.html\'\n-            self.assertEqual(\'test.html\', writefile.filename)\n+            writefile.filename = "test.html"\n+            self.assertEqual("test.html", writefile.filename)\n \n             self.assertEqual(False, writefile.closed)\n             self.assertEqual(0, writefile.tell())\n \n-            writefile.writelines([\'one\\n\', \'two\'])\n+            writefile.writelines(["one\\n", "two"])\n             self.assertEqual(7, writefile.tell())\n \n             self.assertRaises(NotImplementedError, writefile.truncate)\n@@ -1198,55 +1175,48 @@ class ITest(Interface):\n             self.assertEqual(True, writefile.closed)\n             self.assertEqual(69, writefile.tell())\n \n-\n     class TestDAVTraversal(MockTestCase):\n-\n         def test_no_acquire_dav(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n-            outer = Folder(\'outer\')\n-            outer._setOb(\'item\', SimpleItem(\'item\'))\n-            outer._setOb(\'container\', container)\n+            outer = Folder("outer")\n+            outer._setOb("item", SimpleItem("item"))\n+            outer._setOb("container", container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PUT\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "PUT"}\n             )\n             request.maybe_webdav_client = True\n \n-            traversal = DexterityPublishTraverse(\n-                container.__of__(outer),\n-                request\n-            )\n+            traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            r = traversal.publishTraverse(request, \'item\')\n+            r = traversal.publishTraverse(request, "item")\n \n             self.assertTrue(isinstance(r, NullResource))\n             self.assertEqual(container, r.aq_parent)\n \n         def test_acquire_without_dav(self):\n-            container = Container(\'container\')\n+            container = Container("container")\n \n-            outer = Folder(\'outer\')\n-            outer._setObject(\'item\', SimpleItem(\'item\'))\n-            outer._setOb(\'container\', container)\n+            outer = Folder("outer")\n+            outer._setObject("item", SimpleItem("item"))\n+            outer._setOb("container", container)\n \n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n             )\n             request.maybe_webdav_client = False\n \n             traversal = DexterityPublishTraverse(container.__of__(outer), request)\n \n-            r = traversal.publishTraverse(request, \'item\')\n+            r = traversal.publishTraverse(request, "item")\n \n-            self.assertEqual(r.aq_base, outer[\'item\'].aq_base)\n+            self.assertEqual(r.aq_base, outer["item"].aq_base)\n             self.assertEqual(container, r.aq_parent)\n \n         def test_folder_data_traversal_dav(self):\n-            container = Container(\'test\')\n-            request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\'}\n-            )\n+            container = Container("test")\n+            request = DAVTestRequest(environ={"URL": "http://site/test"})\n             request.maybe_webdav_client = True\n \n             traversal = DexterityPublishTraverse(container, request)\n@@ -1258,77 +1228,82 @@ def test_folder_data_traversal_dav(self):\n             self.assertEqual(container, r.aq_parent)\n \n         def test_folder_data_traversal_without_dav(self):\n-            container = Container(\'test\')\n-            request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\'}\n-            )\n+            container = Container("test")\n+            request = DAVTestRequest(environ={"URL": "http://site/test"})\n             request.maybe_webdav_client = False\n \n             traversal = DexterityPublishTraverse(container, request)\n \n             self.assertRaises(\n-                Forbidden,\n-                traversal.publishTraverse,\n-                request,\n-                DAV_FOLDER_DATA_ID\n+                Forbidden, traversal.publishTraverse, request, DAV_FOLDER_DATA_ID\n             )\n \n         def test_browser_default_dav(self):\n             class TestContainer(Container):\n-\n                 def __browser_default__(self, request):\n-                    return self, (\'foo\',)\n+                    return self, ("foo",)\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n             )\n             request.maybe_webdav_client = True\n \n             traversal = DexterityPublishTraverse(container, request)\n \n-            self.assertEqual((container, (),), traversal.browserDefault(request))\n+            self.assertEqual(\n+                (\n+                    container,\n+                    (),\n+                ),\n+                traversal.browserDefault(request),\n+            )\n \n         def test_browser_default_dav_get(self):\n             class TestContainer(Container):\n-\n                 def __browser_default__(self, request):\n-                    return self, (\'foo\',)\n+                    return self, ("foo",)\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'GET\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "GET"}\n             )\n             request.maybe_webdav_client = True\n \n             traversal = DexterityPublishTraverse(container, request)\n \n             self.assertEqual(\n-                (container, (\'foo\',),),\n-                traversal.browserDefault(request)\n+                (\n+                    container,\n+                    ("foo",),\n+                ),\n+                traversal.browserDefault(request),\n             )\n \n         def test_browser_default_without_dav(self):\n             class TestContainer(Container):\n-\n                 def __browser_default__(self, request):\n-                    return self, (\'foo\',)\n+                    return self, ("foo",)\n \n-            container = TestContainer(\'container\')\n+            container = TestContainer("container")\n             request = DAVTestRequest(\n-                environ={\'URL\': \'http://site/test\', \'REQUEST_METHOD\': \'PROPFIND\'}\n+                environ={"URL": "http://site/test", "REQUEST_METHOD": "PROPFIND"}\n             )\n             request.maybe_webdav_client = False\n \n             traversal = DexterityPublishTraverse(container, request)\n \n             self.assertEqual(\n-                (container, (\'foo\',),),\n-                traversal.browserDefault(request)\n+                (\n+                    container,\n+                    ("foo",),\n+                ),\n+                traversal.browserDefault(request),\n             )\n \n+\n else:\n-    class TestDummy(MockTestCase):\n \n+    class TestDummy(MockTestCase):\n         def test_dummy(self):\n             pass\ndiff --git a/plone/dexterity/utils.py b/plone/dexterity/utils.py\nindex 87b33f9..745a394 100644\n--- a/plone/dexterity/utils.py\n+++ b/plone/dexterity/utils.py\n@@ -27,18 +27,10 @@\n import six\n \n \n-deprecation.deprecated(\n-    \'SchemaNameEncoder\',\n-    \'moved to plone.dexterity.schema\')\n-deprecation.deprecated(\n-    \'portalTypeToSchemaName\',\n-    \'moved to plone.dexterity.schema\')\n-deprecation.deprecated(\n-    \'schemaNameToPortalType\',\n-    \'moved to plone.dexterity.schema\')\n-deprecation.deprecated(\n-    \'splitSchemaName\',\n-    \'moved to plone.dexterity.schema\')\n+deprecation.deprecated("SchemaNameEncoder", "moved to plone.dexterity.schema")\n+deprecation.deprecated("portalTypeToSchemaName", "moved to plone.dexterity.schema")\n+deprecation.deprecated("schemaNameToPortalType", "moved to plone.dexterity.schema")\n+deprecation.deprecated("splitSchemaName", "moved to plone.dexterity.schema")\n \n log = logging.getLogger(__name__)\n \n@@ -47,8 +39,7 @@\n \n \n def resolveDottedName(dottedName):\n-    """Resolve a dotted name to a real object\n-    """\n+    """Resolve a dotted name to a real object"""\n     global _dottedCache\n     if dottedName not in _dottedCache:\n         _dottedCache[dottedName] = resolve(dottedName)\n@@ -91,8 +82,9 @@ def getAdditionalSchemata(context=None, portal_type=None):\n     are set, the portal_type might get ignored, depending on which\n     code path is taken.\n     """\n-    log.debug("getAdditionalSchemata with context %r and portal_type %s",\n-              context, portal_type)\n+    log.debug(\n+        "getAdditionalSchemata with context %r and portal_type %s", context, portal_type\n+    )\n     if context is None and portal_type is None:\n         return\n     if context:\n@@ -104,9 +96,7 @@ def getAdditionalSchemata(context=None, portal_type=None):\n         # Usually an add-form.\n         if portal_type is None:\n             portal_type = context.portal_type\n-        for schema_interface in SCHEMA_CACHE.behavior_schema_interfaces(\n-            portal_type\n-        ):\n+        for schema_interface in SCHEMA_CACHE.behavior_schema_interfaces(portal_type):\n             form_schema = IFormFieldProvider(schema_interface, None)\n             if form_schema is not None:\n                 yield form_schema\n@@ -176,13 +166,12 @@ def addContentToContainer(container, object, checkConstraints=True):\n         if not fti.isConstructionAllowed(container):\n             raise Unauthorized("Cannot create %s" % object.portal_type)\n \n-        if container_fti is not None \\\n-           and not container_fti.allowType(object.portal_type):\n-            raise ValueError(\n-                "Disallowed subobject type: %s" % object.portal_type\n-            )\n+        if container_fti is not None and not container_fti.allowType(\n+            object.portal_type\n+        ):\n+            raise ValueError("Disallowed subobject type: %s" % object.portal_type)\n \n-    name = getattr(aq_base(object), \'id\', None)\n+    name = getattr(aq_base(object), "id", None)\n     name = INameChooser(container).chooseName(name, object)\n     object.id = name\n \n@@ -194,35 +183,30 @@ def addContentToContainer(container, object, checkConstraints=True):\n         return uuidToObject(uuid)\n \n \n-def createContentInContainer(container, portal_type, checkConstraints=True,\n-                             **kw):\n+def createContentInContainer(container, portal_type, checkConstraints=True, **kw):\n     content = createContent(portal_type, **kw)\n-    return addContentToContainer(\n-        container,\n-        content,\n-        checkConstraints=checkConstraints\n-    )\n+    return addContentToContainer(container, content, checkConstraints=checkConstraints)\n \n \n def safe_utf8(st):\n     if isinstance(st, six.text_type):\n-        st = st.encode(\'utf8\')\n+        st = st.encode("utf8")\n     return st\n \n \n def safe_unicode(st):\n     if isinstance(st, six.binary_type):\n-        st = st.decode(\'utf8\')\n+        st = st.decode("utf8")\n     return st\n \n \n def datify(in_date):\n     """Get a DateTime object from a string (or anything parsable by DateTime,\n-       a datetime.date, a datetime.datetime\n+    a datetime.date, a datetime.datetime\n     """\n     if isinstance(in_date, DateTime):\n         return in_date\n-    if in_date == \'None\':\n+    if in_date == "None":\n         in_date = None\n     elif isinstance(in_date, datetime.datetime):\n         in_date = DateTime(in_date)\ndiff --git a/setup.py b/setup.py\nindex 5dbb207..565dbbb 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = \'2.10.1.dev0\'\n+version = "2.10.3.dev0"\n \n \n def read(filename):\n@@ -19,6 +19,7 @@ def read(filename):\n         contents = myfile.read()\n         return contents.decode("utf-8")\n \n+\n short_description = """\\\n Framework for content types as filesystem code and TTW (Zope/CMF/Plone)\\\n """\n@@ -27,7 +28,7 @@ def read(filename):\n long_description += read("CHANGES.rst")\n \n setup(\n-    name=\'plone.dexterity\',\n+    name="plone.dexterity",\n     version=version,\n     description=short_description,\n     long_description=long_description,\n@@ -37,6 +38,7 @@ def read(filename):\n         "Development Status :: 5 - Production/Stable",\n         "Framework :: Plone",\n         "Framework :: Plone :: 5.2",\n+        "Framework :: Plone :: 6.0",\n         "Framework :: Plone :: Core",\n         "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",\n         "Programming Language :: Python",\n@@ -44,56 +46,53 @@ def read(filename):\n         "Programming Language :: Python :: 3.6",\n         "Programming Language :: Python :: 3.7",\n         "Programming Language :: Python :: 3.8",\n+        "Programming Language :: Python :: 3.9",\n         "Topic :: Software Development :: Libraries :: Python Modules",\n     ],\n-    keywords=\'plone dexterity contenttypes\',\n-    author=\'Martin Aspeli\',\n-    author_email=\'optilude@gmail.com\',\n-    url=\'https://pypi.org/project/plone.dexterity\',\n-    license=\'GPL version 2\',\n+    keywords="plone dexterity contenttypes",\n+    author="Martin Aspeli",\n+    author_email="optilude@gmail.com",\n+    url="https://pypi.org/project/plone.dexterity",\n+    license="GPL version 2",\n     packages=find_packages(),\n-    namespace_packages=[\'plone\'],\n+    namespace_packages=["plone"],\n     include_package_data=True,\n     zip_safe=False,\n     install_requires=[\n-        \'DateTime>=4.0.1\',\n-        \'plone.alterego\',\n-        \'plone.autoform>=1.0b2\',\n-        \'plone.behavior>=1.0b5\',\n-        \'plone.folder\',\n-        \'plone.memoize\',\n-        \'plone.rfc822\',\n-        \'plone.supermodel>=1.0b2\',\n-        \'plone.synchronize\',\n-        \'plone.uuid\',\n-        \'plone.z3cform>=0.6.0\',\n-        \'Products.CMFCore\',\n-        \'Products.CMFDynamicViewFTI\',\n-        \'Products.statusmessages\',\n-        \'setuptools\',\n-        \'six\',\n-        \'zope.annotation\',\n-        \'zope.browser\',\n-        \'zope.component\',\n-        \'zope.container\',\n-        \'zope.dottedname\',\n-        \'zope.globalrequest\',\n-        \'zope.filerepresentation>=3.6.0\',\n-        \'zope.interface\',\n-        \'zope.lifecycleevent\',\n-        \'zope.location\',\n-        \'zope.publisher\',\n-        \'zope.schema\',\n-        \'zope.security\',\n-        \'zope.size\',\n-        \'Zope\',\n+        "DateTime>=4.0.1",\n+        "plone.alterego",\n+        "plone.autoform>=1.0b2",\n+        "plone.behavior>=1.0b5",\n+        "plone.folder",\n+        "plone.memoize",\n+        "plone.rfc822",\n+        "plone.supermodel>=1.0b2",\n+        "plone.synchronize",\n+        "plone.uuid",\n+        "plone.z3cform>=0.6.0",\n+        "Products.CMFCore",\n+        "Products.CMFDynamicViewFTI",\n+        "Products.statusmessages",\n+        "setuptools",\n+        "six",\n+        "zope.annotation",\n+        "zope.browser",\n+        "zope.component",\n+        "zope.container",\n+        "zope.dottedname",\n+        "zope.globalrequest",\n+        "zope.filerepresentation>=3.6.0",\n+        "zope.interface",\n+        "zope.lifecycleevent",\n+        "zope.location",\n+        "zope.publisher",\n+        "zope.schema",\n+        "zope.security",\n+        "zope.size",\n+        "Zope",\n     ],\n     extras_require={\n-        \'test\': [\n-            \'plone.testing\',\n-            \'Products.CMFPlone\',\n-            "mock;python_version<\'3\'"\n-        ]\n+        "test": ["plone.testing", "Products.CMFPlone", "mock;python_version<\'3\'"]\n     },\n     entry_points="""\n     # -*- Entry points: -*-\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-08-18T14:52:47+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/d5a68965255a0bce3770ced6a725fcdf3b798a30

Use queryUtility to get Plone Site dexterity FTI in portalTypeToSchemaName.

That makes this code usable when Plone Site is not (yet) a dexterity item.
I doubt that this code path is ever reached when the Plone Site FTI is not dexterity, but let's be careful.

Files changed:
M plone/dexterity/schema.py

b'diff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex 22e6b18..7a0ef35 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -324,10 +324,12 @@ def split(self, s):\n def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface."""\n     if prefix is None:\n+        siteroot = None\n         if portal_type == "Plone Site":\n-            fti = getUtility(IDexterityFTI, name=portal_type)\n-            siteroot = fti.__parent__\n-        else:\n+            fti = queryUtility(IDexterityFTI, name=portal_type)\n+            if fti is not None:\n+                siteroot = fti.__parent__\n+        if siteroot is None:\n             siteroot = getUtility(ISiteRoot)\n         prefix = "/".join(siteroot.getPhysicalPath())[1:]\n     if suffix:\n'

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-08-18T14:54:27+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.dexterity/commit/1fbd4947c309aa8200b33547ea8667e7a62f115e

More info in news snippet.

Files changed:
M news/85.bugfix

b"diff --git a/news/85.bugfix b/news/85.bugfix\nindex e1e0943..e690b81 100644\n--- a/news/85.bugfix\n+++ b/news/85.bugfix\n@@ -1,3 +1,4 @@\n Fix ft._updateProperty so it doesn't break when receiving an empty value.\n This happens when an DX FTI is part of a Generic Setup baseline import.\n+Update more code to work when the Plone Site is a dexterity item.\n [jaroel]\n"

Repository: plone.dexterity


Branch: refs/heads/master
Date: 2021-08-20T11:20:18+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.dexterity/commit/f0ca30329d7fb8eac76f6ad0b9fa91d60244c1c5

Merge pull request #85 from plone/dxcontainer-siteroot

Dx container site root

Files changed:
A news/85.bugfix
M CHANGES.rst
M plone/dexterity/content.py
M plone/dexterity/factory.py
M plone/dexterity/fti.py
M plone/dexterity/schema.py

b'diff --git a/CHANGES.rst b/CHANGES.rst\nindex 8f0e7f0..38cab10 100644\n--- a/CHANGES.rst\n+++ b/CHANGES.rst\n@@ -46,7 +46,7 @@ Bug fixes:\n \n \n - Fixes test to work clean with zope.interface.\n-  Interfaces are hashed based on just their name and module. \n+  Interfaces are hashed based on just their name and module.\n   So every one of these local `IBlank` interfaces will hash the same way, and be treated the same for purposes of zope.interface\'s `_dependents`.\n   Thus in tests mock interfaces must not be used under the same name in the same module.\n   [jensens] (#135)\ndiff --git a/news/85.bugfix b/news/85.bugfix\nnew file mode 100644\nindex 0000000..e690b81\n--- /dev/null\n+++ b/news/85.bugfix\n@@ -0,0 +1,4 @@\n+Fix ft._updateProperty so it doesn\'t break when receiving an empty value.\n+This happens when an DX FTI is part of a Generic Setup baseline import.\n+Update more code to work when the Plone Site is a dexterity item.\n+[jaroel]\ndiff --git a/plone/dexterity/content.py b/plone/dexterity/content.py\nindex fa4b656..e397505 100644\n--- a/plone/dexterity/content.py\n+++ b/plone/dexterity/content.py\n@@ -50,6 +50,7 @@\n from zope.security.interfaces import IPermission\n \n import six\n+import warnings\n import threading\n \n \n@@ -766,7 +767,10 @@ def __getattr__(self, name):\n             pass\n \n         # Be specific about the implementation we use\n-        return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+        if self._tree is not None:\n+            return CMFOrderedBTreeFolderBase.__getattr__(self, name)\n+\n+        raise AttributeError(name)\n \n     @security.protected(permissions.DeleteObjects)\n     def manage_delObjects(self, ids=None, REQUEST=None):\ndiff --git a/plone/dexterity/factory.py b/plone/dexterity/factory.py\nindex 8f0eef5..e0d0d29 100644\n--- a/plone/dexterity/factory.py\n+++ b/plone/dexterity/factory.py\n@@ -29,7 +29,7 @@ def description(self):\n     def __call__(self, *args, **kw):\n         fti = getUtility(IDexterityFTI, name=self.portal_type)\n \n-        klass = resolveDottedName(fti.klass)\n+        klass = resolveDottedName(fti.klass) if fti.klass else None\n         if klass is None or not callable(klass):\n             raise ValueError(\n                 "Content class %s set for type %s is not valid"\ndiff --git a/plone/dexterity/fti.py b/plone/dexterity/fti.py\nindex 8ae810c..a6b3830 100644\n--- a/plone/dexterity/fti.py\n+++ b/plone/dexterity/fti.py\n@@ -190,7 +190,7 @@ def __init__(self, *args, **kwargs):\n \n         # Set the content_meta_type from the klass\n \n-        klass = utils.resolveDottedName(self.klass)\n+        klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n             self.content_meta_type = getattr(klass, "meta_type", None)\n \n@@ -228,7 +228,7 @@ def Metatype(self):\n         if self.content_meta_type:\n             return self.content_meta_type\n         # BBB - this didn\'t use to be set\n-        klass = utils.resolveDottedName(self.klass)\n+        klass = utils.resolveDottedName(self.klass) if self.klass else None\n         if klass is not None:\n             self.content_meta_type = getattr(klass, "meta_type", None)\n         return self.content_meta_type\n@@ -301,7 +301,9 @@ def _updateProperty(self, id, value):\n \n             # Update meta_type from klass\n             if id == "klass":\n-                klass = utils.resolveDottedName(new_value)\n+                klass = None\n+                if new_value:\n+                    klass = utils.resolveDottedName(new_value)\n                 if klass is not None:\n                     self.content_meta_type = getattr(klass, "meta_type", None)\n \ndiff --git a/plone/dexterity/schema.py b/plone/dexterity/schema.py\nindex c913609..7a0ef35 100644\n--- a/plone/dexterity/schema.py\n+++ b/plone/dexterity/schema.py\n@@ -16,6 +16,7 @@\n from zope.component import getAllUtilitiesRegisteredFor\n from zope.component import getUtility\n from zope.component import queryUtility\n+from zope.component.hooks import getSite\n from zope.dottedname.resolve import resolve\n from zope.globalrequest import getRequest\n from zope.interface import alsoProvides\n@@ -65,9 +66,11 @@ def lookup_fti(portal_type, cache=True):\n                 if fti_cache is None:\n                     fti_cache = dict()\n                     setattr(request, FTI_CACHE_KEY, fti_cache)\n+                fti = None\n                 if portal_type in fti_cache:\n                     fti = fti_cache[portal_type]\n-                else:\n+\n+                if fti is None:\n                     fti_cache[portal_type] = fti = queryUtility(\n                         IDexterityFTI, name=portal_type\n                     )\n@@ -321,7 +324,14 @@ def split(self, s):\n def portalTypeToSchemaName(portal_type, schema=u"", prefix=None, suffix=None):\n     """Return a canonical interface name for a generated schema interface."""\n     if prefix is None:\n-        prefix = "/".join(getUtility(ISiteRoot).getPhysicalPath())[1:]\n+        siteroot = None\n+        if portal_type == "Plone Site":\n+            fti = queryUtility(IDexterityFTI, name=portal_type)\n+            if fti is not None:\n+                siteroot = fti.__parent__\n+        if siteroot is None:\n+            siteroot = getUtility(ISiteRoot)\n+        prefix = "/".join(siteroot.getPhysicalPath())[1:]\n     if suffix:\n         prefix = "|".join([prefix, suffix])\n \n'

