Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2021-05-20T12:11:40+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/8a19702d641259909fbfc6631944e00ad7d01deb

Escape html in diffs.

Note that we only need to fix the inline_diff.
The html_diff is generated by difflib, which seems to do this just fine.

This is from PloneHotfix20210518.

Files changed:
A news/39.bugfix
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py

b'diff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex 288b1f3..7f03384 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -3,6 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n+from Products.CMFDiffTool.utils import html_encode\n \n \n class BinaryDiff(FieldDiff):\n@@ -50,8 +51,8 @@ def inline_diff(self):\n         if self.oldFilename != self.newFilename:\n             html.append(\n                 self.inlinediff_fmt % (css_class,\n-                                       self.filenameTitle(self.oldFilename),\n-                                       self.filenameTitle(self.newFilename)),\n+                                       self.filenameTitle(html_encode(self.oldFilename)),\n+                                       self.filenameTitle(html_encode(self.newFilename))),\n             )\n \n         if html:\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 40edf65..d70b9c1 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -2,6 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n+from Products.CMFDiffTool.utils import html_encode\n \n \n # Give it a dumb name so it doesn\'t conflict with all the other html diffs\n@@ -18,7 +19,7 @@ def inline_diff(self):\n                                        filename=self.oldFilename))\n         b = \'\\n\'.join(self._parseField(self.newValue,\n                                        filename=self.newFilename))\n-        return htmldiff.htmldiff(a, b)\n+        return htmldiff.htmldiff(html_encode(a), html_encode(b))\n \n     def _parseField(self, value, filename=None):\n         """Use the field\'s raw value if available."""\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 2c56271..1665d21 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -2,6 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n+from Products.CMFDiffTool.utils import html_encode\n from six.moves import range\n \n import difflib\n@@ -80,18 +81,18 @@ def inline_diff(self):\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, a[i], \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', b[i]))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, a[i], \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', b[i]))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n-                    r.append(same_fmt % (css_class, a[i]))\n+                    r.append(same_fmt % (css_class, html_encode(a[i])))\n             else:\n                 raise ValueError(\'unknown tag "%s"\' % tag)\n         return \'\\n\'.join(r)\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex de8ce7b..a740667 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -4,6 +4,7 @@\n from Products.CMFDiffTool.choicediff import get_field_object\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n+from Products.CMFDiffTool.utils import html_encode\n from six.moves import range\n \n \n@@ -88,34 +89,34 @@ def inline_diff(self):\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(same_fmt % (css_class, obj_url, obj_title))\n             else:\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 56241fb..94ed037 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -3,6 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n+from Products.CMFDiffTool.utils import html_encode\n from Products.CMFDiffTool.utils import safe_unicode\n from Products.CMFDiffTool.utils import safe_utf8\n from zope.component.hooks import getSite\n@@ -87,11 +88,11 @@ def inline_diff(self):\n         if old_fname != new_fname:\n             html.append(\n                 self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       old_fname, new_fname),\n+                                       html_encode(old_fname), html_encode(new_fname)),\n             )\n         if a != b:\n             html.append(\n-                self.inlinediff_fmt % (css_class, a, b),\n+                self.inlinediff_fmt % (css_class, html_encode(a), html_encode(b)),\n             )\n         if html:\n             return linesep.join(html)\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex 5ddd595..e663275 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -4,6 +4,7 @@\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.ListDiff import ListDiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n+from Products.CMFDiffTool.utils import html_encode\n \n \n FILE_FIELD_TYPES = []\n@@ -70,7 +71,7 @@ def inline_diff(self):\n         old = self._parseField(self.oldValue, self.oldFilename)[0]\n         new = self._parseField(self.newValue, self.newFilename)[0]\n \n-        return \'\' if self.same else self.inlinediff_fmt % (css_class, old, new)\n+        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_encode(old), html_encode(new))\n \n \n InitializeClass(NamedFileBinaryDiff)\n@@ -136,9 +137,9 @@ def is_same_dict(d1, d2):\n             )\n \n         return \'\\n\'.join([\n-            ((self.same_fmt % (css_class, d_old[\'repr\']))\n+            ((self.same_fmt % (css_class, html_encode(d_old[\'repr\'])))\n              if is_same_dict(d_old, d_new) else self.inlinediff_fmt\n-             % (css_class, d_old[\'repr\'], d_new[\'repr\'])\n+             % (css_class, html_encode(d_old[\'repr\']), html_encode(d_new[\'repr\']))\n              ) for (d_old, d_new) in zip(old_data, new_data)])\n \n \ndiff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py\nindex e3976bb..7c39af4 100644\n--- a/Products/CMFDiffTool/tests/testFieldDiff.py\n+++ b/Products/CMFDiffTool/tests/testFieldDiff.py\n@@ -33,6 +33,13 @@ def method(self):\n         return u\'different method val\\xfce\'\n \n \n+class H:\n+    attribute = \'<script>alert("Hacker value")</script>\'\n+\n+    def method(self):\n+        return \'<script>alert("Hacker method value")</script>\'\n+\n+\n class TestFieldDiff(TestCase):\n     """Test the FieldDiff class"""\n \n@@ -163,3 +170,40 @@ def test_dump_boolean(self):\n         self.assertEqual(diff, [\'- True\'])\n         dump(\'+\', [False], 0, 1, diff)\n         self.assertEqual(diff, [\'- True\', \'+ False\'])\n+\n+    def test_inline_diff_same(self):\n+        """Test inline diff for attribute with same value"""\n+        a = A()\n+        uu = U()\n+        h = H()\n+        # We mostly just want to check that the inline diff renders without error.\n+        fd = FieldDiff(a, a, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        fd = FieldDiff(uu, uu, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        self.assertNotIn("&gt;", fd.inline_diff())\n+        fd = FieldDiff(h, h, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        self.assertIn("&gt;", fd.inline_diff())\n+\n+    def test_inline_diff_different(self):\n+        """Test inline diff for attribute with different value"""\n+        a = A()\n+        uu = U()\n+        h = H()\n+        fd = FieldDiff(a, uu, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        fd = FieldDiff(uu, a, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        self.assertNotIn("&gt;", fd.inline_diff())\n+        fd = FieldDiff(uu, h, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        fd = FieldDiff(h, uu, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        self.assertIn("&gt;", fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex 7844ab3..0bd5732 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -22,6 +22,10 @@ class B:\n     attribute = [1, 2, 3, 4]\n \n \n+class HList:\n+    attribute = [\'<script>alert("Hacker value")</script>\']\n+\n+\n class C:\n     attribute = {\'a\': 1, \'b\': 2}\n \n@@ -30,6 +34,10 @@ class D:\n     attribute = {\'a\': 1, \'b\': 2, \'c\': 3}\n \n \n+class HDict:\n+    attribute = {\'a\': \'<script>alert("Hacker value")</script>\'}\n+\n+\n class TestListDiff(BaseDXTestCase):\n     """Test the ListDiff class"""\n \n@@ -127,6 +135,22 @@ def test_inline_diff(self):\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual(diff.inline_diff(), expected)\n \n+    def test_inline_diff_hacker_list(self):\n+        a = A()\n+        h = HList()\n+        diff = ListDiff(a, h, \'attribute\')\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\n+\n+    def test_inline_diff_hacker_dict(self):\n+        d = D()\n+        h = HDict()\n+        diff = ListDiff(d, h, \'attribute\')\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\n+\n     def test_inline_diff_vocabulary(self):\n         # unchanged, with vocabulary title\n         expected = u\'<div class="InlineDiff">First Title</div>\'\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex feb7138..1a59c4b 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -23,6 +23,13 @@ def method(self):\n         return \'method \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\'\n \n \n+class H:\n+    attribute = \'<script>alert("Hacker value")</script>\'\n+\n+    def method(self):\n+        return \'<script>alert("Hacker method value")</script>\'\n+\n+\n class TestTextDiff(TestCase):\n     """Test the TextDiff class"""\n     layer = PLONE_INTEGRATION_TESTING\n@@ -107,6 +114,7 @@ def testHTMLDiff(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n+        h = H()\n         expected = """\n     <table class="diff" id="difflib_chg_to0__top"\n            cellspacing="0" cellpadding="0" rules="groups" >\n@@ -119,3 +127,22 @@ def testHTMLDiff(self):\n     </table>"""  # NOQA\n         fd = TextDiff(a, b, \'attribute\')\n         self.assertEqual(fd.html_diff(), expected)\n+\n+        fd = TextDiff(a, h, \'attribute\')\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.html_diff())\n+        self.assertIn("&gt;", fd.html_diff())\n+\n+    def testInlineDiff(self):\n+        """Test text inline diff output with different value"""\n+        a = A()\n+        b = B()\n+        h = H()\n+        fd = TextDiff(a, b, \'attribute\')\n+        self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n+\n+        fd = TextDiff(a, h, \'attribute\')\n+        self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        self.assertIn("&gt;", fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex b224e96..9225476 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -2,6 +2,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.namedfile.file import NamedFile\n+from Products.CMFDiffTool import BinaryDiff\n from Products.CMFDiffTool import namedfile\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -70,3 +71,40 @@ def test_should_detect_same_data_and_filename(self):\n         diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertTrue(diff.same)\n+\n+    def test_should_escape_html(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj1\',\n+            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n+        )\n+        obj1 = self.portal[\'obj1\']\n+\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj2\',\n+            file=NamedFile(data=\'<script>alert("Hacker data")</script>\', filename=u\'<script>alert("Hacker filename")</script>.txt\'),\n+        )\n+        obj2 = self.portal[\'obj2\']\n+\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        self.assertTrue(IDifference.providedBy(diff))\n+        self.assertFalse(diff.same)\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\n+\n+        # Test the more basic BinaryDiff.\n+        # It only compares the file names.\n+        # It uses the \'getFilename\' method of the file,\n+        # which namedfiles do not have.  So we hack it.\n+        obj1.file.getFilename = lambda: obj1.file.filename\n+        obj2.file.getFilename = lambda: obj2.file.filename\n+        diff = BinaryDiff.BinaryDiff(obj1, obj2, \'file\')\n+        self.assertTrue(IDifference.providedBy(diff))\n+        self.assertFalse(diff.same)\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py\nindex 0bd0a6d..24a3c3d 100644\n--- a/Products/CMFDiffTool/tests/test_filelistdiff.py\n+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py\n@@ -56,6 +56,17 @@ def test_should_diff_file_lists_correctly(self):\n             [],\n             False,\n         )\n+        self._test_diff_files(\n+            [\n+                (\'<script>alert("Hacker data 1")</script>\', u\'filename1\'),\n+                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+            ],\n+            [\n+                (\'data1\', u\'<script>alert("Hacker data")</script>.txt\'),\n+                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+            ],\n+            False,\n+        )\n         self._test_diff_files(None, None, True)\n         self._test_diff_files([], [], True)\n         self._test_diff_files([], None, True)\n@@ -65,4 +76,8 @@ def _test_diff_files(self, files1, files2, same):\n             DummyType(files1), DummyType(files2), \'files\')\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n-        self.assertNotEqual(bool(diff.inline_diff()), same)\n+        inline = diff.inline_diff()\n+        self.assertNotEqual(bool(inline), same)\n+        if inline:\n+            # No hacker can catch us unawares.\n+            self.assertNotIn("<script", inline)\ndiff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py\nindex be047bb..9e989e2 100644\n--- a/Products/CMFDiffTool/tests/test_richtextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py\n@@ -33,6 +33,14 @@ def test_inline_diff_same(self):\n         self.assertEqual(diff.same, True)\n         self.assertEqual(inline_diff, u\'foo \')\n \n+    def test_inline_diff_same_hacker(self):\n+        value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        inline_diff = diff.inline_diff()\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", inline_diff)\n+        self.assertIn("&gt;", inline_diff)\n+\n     def test_inline_diff_different(self):\n         old_value = RichTextValue(u\'foo\')\n         new_value = RichTextValue(u\'foo bar\')\n@@ -44,3 +52,20 @@ def test_inline_diff_different(self):\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, False)\n         self.assertEqual(inline_diff, u\'foo <span class="insert">bar </span> \')\n+\n+    def test_inline_diff_different_hacker(self):\n+        old_value = RichTextValue(u\'clean\')\n+        new_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        inline_diff = diff.inline_diff()\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", inline_diff)\n+        self.assertIn("&gt;", inline_diff)\n+\n+        old_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        new_value = RichTextValue(u\'clean\')\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        inline_diff = diff.inline_diff()\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", inline_diff)\n+        self.assertIn("&gt;", inline_diff)\ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 02c7ce4..6c23084 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -3,6 +3,12 @@\n import six\n \n \n+try:\n+    from html import escape\n+except ImportError:\n+    from cgi import escape\n+\n+\n def safe_unicode(value):\n     if isinstance(value, six.text_type):\n         return value\n@@ -15,3 +21,20 @@ def safe_unicode(value):\n \n def safe_utf8(value):\n     return safe_unicode(value).encode(\'utf-8\')\n+\n+\n+# In both Python 2 and 3, the escape function cannot handle a non string-like value,\n+# for example an integer.  Seems good to always return a string-like value though.\n+# But should that be bytes or string or unicode?\n+if six.PY2:\n+    # We use this in places where the result gets inserted in a string/bytes,\n+    # so we should use a string (utf-8) here.\n+    def html_encode(value):\n+        value = safe_utf8(value)\n+        return escape(value, 1)\n+else:\n+    # In Python 3 this gets inserted in a string/text,\n+    # and escape cannot handle a bytes value.\n+    def html_encode(value):\n+        value = safe_unicode(value)\n+        return escape(value, 1)\ndiff --git a/news/39.bugfix b/news/39.bugfix\nnew file mode 100644\nindex 0000000..35b07ac\n--- /dev/null\n+++ b/news/39.bugfix\n@@ -0,0 +1,3 @@\n+Added XSS fix from PloneHotfix20210518.\n+See `vulnerability <https://plone.org/security/hotfix/20210518/xss-vulnerability-in-cmfdifftool>`_.\n+[maurits]\n'

Repository: Products.CMFDiffTool


Branch: refs/heads/master
Date: 2021-05-26T16:02:03+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFDiffTool/commit/6141c4b09a16c8a7f41b6af8d93c35001cbbd15e

Merge pull request #40 from plone/maurits-security

Escape html in diffs.

Files changed:
A news/39.bugfix
M Products/CMFDiffTool/BinaryDiff.py
M Products/CMFDiffTool/CMFDTHtmlDiff.py
M Products/CMFDiffTool/FieldDiff.py
M Products/CMFDiffTool/ListDiff.py
M Products/CMFDiffTool/TextDiff.py
M Products/CMFDiffTool/namedfile.py
M Products/CMFDiffTool/tests/testFieldDiff.py
M Products/CMFDiffTool/tests/testListDiff.py
M Products/CMFDiffTool/tests/testTextDiff.py
M Products/CMFDiffTool/tests/test_binarydiff.py
M Products/CMFDiffTool/tests/test_filelistdiff.py
M Products/CMFDiffTool/tests/test_richtextdiff.py
M Products/CMFDiffTool/utils.py

b'diff --git a/Products/CMFDiffTool/BinaryDiff.py b/Products/CMFDiffTool/BinaryDiff.py\nindex 288b1f3..7f03384 100644\n--- a/Products/CMFDiffTool/BinaryDiff.py\n+++ b/Products/CMFDiffTool/BinaryDiff.py\n@@ -3,6 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n+from Products.CMFDiffTool.utils import html_encode\n \n \n class BinaryDiff(FieldDiff):\n@@ -50,8 +51,8 @@ def inline_diff(self):\n         if self.oldFilename != self.newFilename:\n             html.append(\n                 self.inlinediff_fmt % (css_class,\n-                                       self.filenameTitle(self.oldFilename),\n-                                       self.filenameTitle(self.newFilename)),\n+                                       self.filenameTitle(html_encode(self.oldFilename)),\n+                                       self.filenameTitle(html_encode(self.newFilename))),\n             )\n \n         if html:\ndiff --git a/Products/CMFDiffTool/CMFDTHtmlDiff.py b/Products/CMFDiffTool/CMFDTHtmlDiff.py\nindex 40edf65..d70b9c1 100644\n--- a/Products/CMFDiffTool/CMFDTHtmlDiff.py\n+++ b/Products/CMFDiffTool/CMFDTHtmlDiff.py\n@@ -2,6 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.libs import htmldiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n+from Products.CMFDiffTool.utils import html_encode\n \n \n # Give it a dumb name so it doesn\'t conflict with all the other html diffs\n@@ -18,7 +19,7 @@ def inline_diff(self):\n                                        filename=self.oldFilename))\n         b = \'\\n\'.join(self._parseField(self.newValue,\n                                        filename=self.newFilename))\n-        return htmldiff.htmldiff(a, b)\n+        return htmldiff.htmldiff(html_encode(a), html_encode(b))\n \n     def _parseField(self, value, filename=None):\n         """Use the field\'s raw value if available."""\ndiff --git a/Products/CMFDiffTool/FieldDiff.py b/Products/CMFDiffTool/FieldDiff.py\nindex 2c56271..1665d21 100644\n--- a/Products/CMFDiffTool/FieldDiff.py\n+++ b/Products/CMFDiffTool/FieldDiff.py\n@@ -2,6 +2,7 @@\n from AccessControl.class_init import InitializeClass\n from Products.CMFDiffTool.BaseDiff import _getValue\n from Products.CMFDiffTool.BaseDiff import BaseDiff\n+from Products.CMFDiffTool.utils import html_encode\n from six.moves import range\n \n import difflib\n@@ -80,18 +81,18 @@ def inline_diff(self):\n         for tag, alo, ahi, blo, bhi in self.getLineDiffs():\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, a[i], \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', b[i]))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n-                    r.append(inlinediff_fmt % (css_class, a[i], \'\'))\n+                    r.append(inlinediff_fmt % (css_class, html_encode(a[i]), \'\'))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n-                    r.append(inlinediff_fmt % (css_class, \'\', b[i]))\n+                    r.append(inlinediff_fmt % (css_class, \'\', html_encode(b[i])))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n-                    r.append(same_fmt % (css_class, a[i]))\n+                    r.append(same_fmt % (css_class, html_encode(a[i])))\n             else:\n                 raise ValueError(\'unknown tag "%s"\' % tag)\n         return \'\\n\'.join(r)\ndiff --git a/Products/CMFDiffTool/ListDiff.py b/Products/CMFDiffTool/ListDiff.py\nindex de8ce7b..a740667 100644\n--- a/Products/CMFDiffTool/ListDiff.py\n+++ b/Products/CMFDiffTool/ListDiff.py\n@@ -4,6 +4,7 @@\n from Products.CMFDiffTool.choicediff import get_field_object\n from Products.CMFDiffTool.choicediff import title_or_value\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n+from Products.CMFDiffTool.utils import html_encode\n from six.moves import range\n \n \n@@ -88,34 +89,34 @@ def inline_diff(self):\n             if tag == \'replace\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'delete\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_sub\', obj_url, obj_title))\n             elif tag == \'insert\':\n                 for i in range(blo, bhi):\n                     obj = self.newValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(inlinediff_fmt %\n                              (css_class, \'diff_add\', obj_url, obj_title))\n             elif tag == \'equal\':\n                 for i in range(alo, ahi):\n                     obj = self.oldValue[i]\n-                    obj_title = obj.Title()\n+                    obj_title = html_encode(obj.Title())\n                     obj_url = obj.absolute_url()\n                     r.append(same_fmt % (css_class, obj_url, obj_title))\n             else:\ndiff --git a/Products/CMFDiffTool/TextDiff.py b/Products/CMFDiffTool/TextDiff.py\nindex 56241fb..94ed037 100644\n--- a/Products/CMFDiffTool/TextDiff.py\n+++ b/Products/CMFDiffTool/TextDiff.py\n@@ -3,6 +3,7 @@\n from os import linesep\n from Products.CMFDiffTool import CMFDiffToolMessageFactory as _\n from Products.CMFDiffTool.FieldDiff import FieldDiff\n+from Products.CMFDiffTool.utils import html_encode\n from Products.CMFDiffTool.utils import safe_unicode\n from Products.CMFDiffTool.utils import safe_utf8\n from zope.component.hooks import getSite\n@@ -87,11 +88,11 @@ def inline_diff(self):\n         if old_fname != new_fname:\n             html.append(\n                 self.inlinediff_fmt % (\'%s FilenameDiff\' % css_class,\n-                                       old_fname, new_fname),\n+                                       html_encode(old_fname), html_encode(new_fname)),\n             )\n         if a != b:\n             html.append(\n-                self.inlinediff_fmt % (css_class, a, b),\n+                self.inlinediff_fmt % (css_class, html_encode(a), html_encode(b)),\n             )\n         if html:\n             return linesep.join(html)\ndiff --git a/Products/CMFDiffTool/namedfile.py b/Products/CMFDiffTool/namedfile.py\nindex 5ddd595..e663275 100644\n--- a/Products/CMFDiffTool/namedfile.py\n+++ b/Products/CMFDiffTool/namedfile.py\n@@ -4,6 +4,7 @@\n from Products.CMFDiffTool.BinaryDiff import BinaryDiff\n from Products.CMFDiffTool.ListDiff import ListDiff\n from Products.CMFDiffTool.TextDiff import TextDiff\n+from Products.CMFDiffTool.utils import html_encode\n \n \n FILE_FIELD_TYPES = []\n@@ -70,7 +71,7 @@ def inline_diff(self):\n         old = self._parseField(self.oldValue, self.oldFilename)[0]\n         new = self._parseField(self.newValue, self.newFilename)[0]\n \n-        return \'\' if self.same else self.inlinediff_fmt % (css_class, old, new)\n+        return \'\' if self.same else self.inlinediff_fmt % (css_class, html_encode(old), html_encode(new))\n \n \n InitializeClass(NamedFileBinaryDiff)\n@@ -136,9 +137,9 @@ def is_same_dict(d1, d2):\n             )\n \n         return \'\\n\'.join([\n-            ((self.same_fmt % (css_class, d_old[\'repr\']))\n+            ((self.same_fmt % (css_class, html_encode(d_old[\'repr\'])))\n              if is_same_dict(d_old, d_new) else self.inlinediff_fmt\n-             % (css_class, d_old[\'repr\'], d_new[\'repr\'])\n+             % (css_class, html_encode(d_old[\'repr\']), html_encode(d_new[\'repr\']))\n              ) for (d_old, d_new) in zip(old_data, new_data)])\n \n \ndiff --git a/Products/CMFDiffTool/tests/testFieldDiff.py b/Products/CMFDiffTool/tests/testFieldDiff.py\nindex e3976bb..7c39af4 100644\n--- a/Products/CMFDiffTool/tests/testFieldDiff.py\n+++ b/Products/CMFDiffTool/tests/testFieldDiff.py\n@@ -33,6 +33,13 @@ def method(self):\n         return u\'different method val\\xfce\'\n \n \n+class H:\n+    attribute = \'<script>alert("Hacker value")</script>\'\n+\n+    def method(self):\n+        return \'<script>alert("Hacker method value")</script>\'\n+\n+\n class TestFieldDiff(TestCase):\n     """Test the FieldDiff class"""\n \n@@ -163,3 +170,40 @@ def test_dump_boolean(self):\n         self.assertEqual(diff, [\'- True\'])\n         dump(\'+\', [False], 0, 1, diff)\n         self.assertEqual(diff, [\'- True\', \'+ False\'])\n+\n+    def test_inline_diff_same(self):\n+        """Test inline diff for attribute with same value"""\n+        a = A()\n+        uu = U()\n+        h = H()\n+        # We mostly just want to check that the inline diff renders without error.\n+        fd = FieldDiff(a, a, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        fd = FieldDiff(uu, uu, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        self.assertNotIn("&gt;", fd.inline_diff())\n+        fd = FieldDiff(h, h, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        self.assertIn("&gt;", fd.inline_diff())\n+\n+    def test_inline_diff_different(self):\n+        """Test inline diff for attribute with different value"""\n+        a = A()\n+        uu = U()\n+        h = H()\n+        fd = FieldDiff(a, uu, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        fd = FieldDiff(uu, a, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        self.assertNotIn("&gt;", fd.inline_diff())\n+        fd = FieldDiff(uu, h, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        fd = FieldDiff(h, uu, \'attribute\')\n+        self.assertIn(\'class="InlineDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        self.assertIn("&gt;", fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/testListDiff.py b/Products/CMFDiffTool/tests/testListDiff.py\nindex 7844ab3..0bd5732 100644\n--- a/Products/CMFDiffTool/tests/testListDiff.py\n+++ b/Products/CMFDiffTool/tests/testListDiff.py\n@@ -22,6 +22,10 @@ class B:\n     attribute = [1, 2, 3, 4]\n \n \n+class HList:\n+    attribute = [\'<script>alert("Hacker value")</script>\']\n+\n+\n class C:\n     attribute = {\'a\': 1, \'b\': 2}\n \n@@ -30,6 +34,10 @@ class D:\n     attribute = {\'a\': 1, \'b\': 2, \'c\': 3}\n \n \n+class HDict:\n+    attribute = {\'a\': \'<script>alert("Hacker value")</script>\'}\n+\n+\n class TestListDiff(BaseDXTestCase):\n     """Test the ListDiff class"""\n \n@@ -127,6 +135,22 @@ def test_inline_diff(self):\n         diff = ListDiff(a, b, \'attribute\')\n         self.assertEqual(diff.inline_diff(), expected)\n \n+    def test_inline_diff_hacker_list(self):\n+        a = A()\n+        h = HList()\n+        diff = ListDiff(a, h, \'attribute\')\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\n+\n+    def test_inline_diff_hacker_dict(self):\n+        d = D()\n+        h = HDict()\n+        diff = ListDiff(d, h, \'attribute\')\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\n+\n     def test_inline_diff_vocabulary(self):\n         # unchanged, with vocabulary title\n         expected = u\'<div class="InlineDiff">First Title</div>\'\ndiff --git a/Products/CMFDiffTool/tests/testTextDiff.py b/Products/CMFDiffTool/tests/testTextDiff.py\nindex feb7138..1a59c4b 100644\n--- a/Products/CMFDiffTool/tests/testTextDiff.py\n+++ b/Products/CMFDiffTool/tests/testTextDiff.py\n@@ -23,6 +23,13 @@ def method(self):\n         return \'method \xe9\x81\x8e\xe5\x8a\xb4\xe6\xad\xbb\'\n \n \n+class H:\n+    attribute = \'<script>alert("Hacker value")</script>\'\n+\n+    def method(self):\n+        return \'<script>alert("Hacker method value")</script>\'\n+\n+\n class TestTextDiff(TestCase):\n     """Test the TextDiff class"""\n     layer = PLONE_INTEGRATION_TESTING\n@@ -107,6 +114,7 @@ def testHTMLDiff(self):\n         """Test text diff output with different value"""\n         a = A()\n         b = B()\n+        h = H()\n         expected = """\n     <table class="diff" id="difflib_chg_to0__top"\n            cellspacing="0" cellpadding="0" rules="groups" >\n@@ -119,3 +127,22 @@ def testHTMLDiff(self):\n     </table>"""  # NOQA\n         fd = TextDiff(a, b, \'attribute\')\n         self.assertEqual(fd.html_diff(), expected)\n+\n+        fd = TextDiff(a, h, \'attribute\')\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.html_diff())\n+        self.assertIn("&gt;", fd.html_diff())\n+\n+    def testInlineDiff(self):\n+        """Test text inline diff output with different value"""\n+        a = A()\n+        b = B()\n+        h = H()\n+        fd = TextDiff(a, b, \'attribute\')\n+        self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n+\n+        fd = TextDiff(a, h, \'attribute\')\n+        self.assertIn(\'class="InlineDiff FilenameDiff"\', fd.inline_diff())\n+        # h.attribute contains a script, and this should be escaped.\n+        self.assertNotIn(h.attribute, fd.inline_diff())\n+        self.assertIn("&gt;", fd.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/test_binarydiff.py b/Products/CMFDiffTool/tests/test_binarydiff.py\nindex b224e96..9225476 100644\n--- a/Products/CMFDiffTool/tests/test_binarydiff.py\n+++ b/Products/CMFDiffTool/tests/test_binarydiff.py\n@@ -2,6 +2,7 @@\n from plone.app.testing import setRoles\n from plone.app.testing import TEST_USER_ID\n from plone.namedfile.file import NamedFile\n+from Products.CMFDiffTool import BinaryDiff\n from Products.CMFDiffTool import namedfile\n from Products.CMFDiffTool import testing\n from Products.CMFDiffTool.interfaces import IDifference\n@@ -70,3 +71,40 @@ def test_should_detect_same_data_and_filename(self):\n         diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertTrue(diff.same)\n+\n+    def test_should_escape_html(self):\n+        self.portal = self.layer[\'portal\']\n+        setRoles(self.portal, TEST_USER_ID, [\'Manager\'])\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj1\',\n+            file=NamedFile(data=\'contents\', filename=u\'blah.txt\'),\n+        )\n+        obj1 = self.portal[\'obj1\']\n+\n+        self.portal.invokeFactory(\n+            testing.TEST_CONTENT_TYPE_ID,\n+            \'obj2\',\n+            file=NamedFile(data=\'<script>alert("Hacker data")</script>\', filename=u\'<script>alert("Hacker filename")</script>.txt\'),\n+        )\n+        obj2 = self.portal[\'obj2\']\n+\n+        diff = namedfile.NamedFileBinaryDiff(obj1, obj2, \'file\')\n+        self.assertTrue(IDifference.providedBy(diff))\n+        self.assertFalse(diff.same)\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\n+\n+        # Test the more basic BinaryDiff.\n+        # It only compares the file names.\n+        # It uses the \'getFilename\' method of the file,\n+        # which namedfiles do not have.  So we hack it.\n+        obj1.file.getFilename = lambda: obj1.file.filename\n+        obj2.file.getFilename = lambda: obj2.file.filename\n+        diff = BinaryDiff.BinaryDiff(obj1, obj2, \'file\')\n+        self.assertTrue(IDifference.providedBy(diff))\n+        self.assertFalse(diff.same)\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", diff.inline_diff())\n+        self.assertIn("&gt;", diff.inline_diff())\ndiff --git a/Products/CMFDiffTool/tests/test_filelistdiff.py b/Products/CMFDiffTool/tests/test_filelistdiff.py\nindex 0bd0a6d..24a3c3d 100644\n--- a/Products/CMFDiffTool/tests/test_filelistdiff.py\n+++ b/Products/CMFDiffTool/tests/test_filelistdiff.py\n@@ -56,6 +56,17 @@ def test_should_diff_file_lists_correctly(self):\n             [],\n             False,\n         )\n+        self._test_diff_files(\n+            [\n+                (\'<script>alert("Hacker data 1")</script>\', u\'filename1\'),\n+                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+            ],\n+            [\n+                (\'data1\', u\'<script>alert("Hacker data")</script>.txt\'),\n+                (\'<script>alert("Hacker data 2")</script>\', u\'filename2\'),\n+            ],\n+            False,\n+        )\n         self._test_diff_files(None, None, True)\n         self._test_diff_files([], [], True)\n         self._test_diff_files([], None, True)\n@@ -65,4 +76,8 @@ def _test_diff_files(self, files1, files2, same):\n             DummyType(files1), DummyType(files2), \'files\')\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, same)\n-        self.assertNotEqual(bool(diff.inline_diff()), same)\n+        inline = diff.inline_diff()\n+        self.assertNotEqual(bool(inline), same)\n+        if inline:\n+            # No hacker can catch us unawares.\n+            self.assertNotIn("<script", inline)\ndiff --git a/Products/CMFDiffTool/tests/test_richtextdiff.py b/Products/CMFDiffTool/tests/test_richtextdiff.py\nindex be047bb..9e989e2 100644\n--- a/Products/CMFDiffTool/tests/test_richtextdiff.py\n+++ b/Products/CMFDiffTool/tests/test_richtextdiff.py\n@@ -33,6 +33,14 @@ def test_inline_diff_same(self):\n         self.assertEqual(diff.same, True)\n         self.assertEqual(inline_diff, u\'foo \')\n \n+    def test_inline_diff_same_hacker(self):\n+        value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        diff = CMFDTHtmlDiff(DummyType(value), DummyType(value), \'body\')\n+        inline_diff = diff.inline_diff()\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", inline_diff)\n+        self.assertIn("&gt;", inline_diff)\n+\n     def test_inline_diff_different(self):\n         old_value = RichTextValue(u\'foo\')\n         new_value = RichTextValue(u\'foo bar\')\n@@ -44,3 +52,20 @@ def test_inline_diff_different(self):\n         self.assertTrue(IDifference.providedBy(diff))\n         self.assertEqual(diff.same, False)\n         self.assertEqual(inline_diff, u\'foo <span class="insert">bar </span> \')\n+\n+    def test_inline_diff_different_hacker(self):\n+        old_value = RichTextValue(u\'clean\')\n+        new_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        inline_diff = diff.inline_diff()\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", inline_diff)\n+        self.assertIn("&gt;", inline_diff)\n+\n+        old_value = RichTextValue(u\'<script>alert("Hacker value")</script>\')\n+        new_value = RichTextValue(u\'clean\')\n+        diff = CMFDTHtmlDiff(DummyType(old_value), DummyType(new_value), \'body\')\n+        inline_diff = diff.inline_diff()\n+        # The script tag should be escaped.\n+        self.assertNotIn("<script", inline_diff)\n+        self.assertIn("&gt;", inline_diff)\ndiff --git a/Products/CMFDiffTool/utils.py b/Products/CMFDiffTool/utils.py\nindex 02c7ce4..6c23084 100644\n--- a/Products/CMFDiffTool/utils.py\n+++ b/Products/CMFDiffTool/utils.py\n@@ -3,6 +3,12 @@\n import six\n \n \n+try:\n+    from html import escape\n+except ImportError:\n+    from cgi import escape\n+\n+\n def safe_unicode(value):\n     if isinstance(value, six.text_type):\n         return value\n@@ -15,3 +21,20 @@ def safe_unicode(value):\n \n def safe_utf8(value):\n     return safe_unicode(value).encode(\'utf-8\')\n+\n+\n+# In both Python 2 and 3, the escape function cannot handle a non string-like value,\n+# for example an integer.  Seems good to always return a string-like value though.\n+# But should that be bytes or string or unicode?\n+if six.PY2:\n+    # We use this in places where the result gets inserted in a string/bytes,\n+    # so we should use a string (utf-8) here.\n+    def html_encode(value):\n+        value = safe_utf8(value)\n+        return escape(value, 1)\n+else:\n+    # In Python 3 this gets inserted in a string/text,\n+    # and escape cannot handle a bytes value.\n+    def html_encode(value):\n+        value = safe_unicode(value)\n+        return escape(value, 1)\ndiff --git a/news/39.bugfix b/news/39.bugfix\nnew file mode 100644\nindex 0000000..35b07ac\n--- /dev/null\n+++ b/news/39.bugfix\n@@ -0,0 +1,3 @@\n+Added XSS fix from PloneHotfix20210518.\n+See `vulnerability <https://plone.org/security/hotfix/20210518/xss-vulnerability-in-cmfdifftool>`_.\n+[maurits]\n'

