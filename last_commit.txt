Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-02-03T21:22:11+01:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/bea3a518845224b76204dfbd4a65bf48ff35c6b8

Fix transform object_browser href smartfield not working as expected (#1059)

Files changed:
A news/1058.bugfix
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_blocks_serializer.py

b'diff --git a/news/1058.bugfix b/news/1058.bugfix\nnew file mode 100644\nindex 000000000..88763f922\n--- /dev/null\n+++ b/news/1058.bugfix\n@@ -0,0 +1,2 @@\n+- Fix transform object_browser href smartfield not working as expected\n+  [sneridagh]\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex d9780ca1e..b5724766e 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -1,6 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from Acquisition import aq_parent\n+from copy import deepcopy\n from plone import api\n from plone.restapi.behaviors import IBlocks\n from plone.restapi.deserializer.dxfields import DefaultFieldDeserializer\n@@ -102,9 +103,21 @@ def __call__(self, block):\n             if link and isinstance(link, string_types):\n                 block[field] = path2uid(context=self.context, link=link)\n             elif link and isinstance(link, list):\n-                block[field] = [\n-                    path2uid(context=self.context, link=item) for item in link\n-                ]\n+                # Detect if it has an object inside with an "@id" key (object_widget)\n+                if len(link) > 0 and isinstance(link[0], dict) and "@id" in link[0]:\n+                    result = []\n+                    for item in link:\n+                        item_clone = deepcopy(item)\n+                        item_clone["@id"] = path2uid(\n+                            context=self.context, link=item_clone["@id"]\n+                        )\n+                        result.append(item_clone)\n+\n+                    block[field] = result\n+                elif len(link) > 0 and isinstance(link[0], string_types):\n+                    block[field] = [\n+                        path2uid(context=self.context, link=item) for item in link\n+                    ]\n         return block\n \n \ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex 7ecb7a784..128ac046f 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+from copy import deepcopy\n from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.browser.resolveuid import uuidToURL\n from plone.restapi.behaviors import IBlocks\n@@ -90,7 +91,16 @@ def __call__(self, value):\n                 if isinstance(link, string_types):\n                     value[field] = uid_to_url(link)\n                 elif isinstance(link, list):\n-                    value[field] = [uid_to_url(item) for item in link]\n+                    if len(link) > 0 and isinstance(link[0], dict) and "@id" in link[0]:\n+                        result = []\n+                        for item in link:\n+                            item_clone = deepcopy(item)\n+                            item_clone["@id"] = uid_to_url(item_clone["@id"])\n+                            result.append(item_clone)\n+\n+                        value[field] = result\n+                    elif len(link) > 0 and isinstance(link[0], string_types):\n+                        value[field] = [uid_to_url(item) for item in link]\n         return value\n \n \ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex 420d7cf21..c18b8923e 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -218,6 +218,22 @@ def test_blocks_custom_block_doesnt_resolve_non_standard_fields(self):\n         )\n \n     def test_deserialize_blocks_smart_href_array_volto_object_browser(self):\n+        self.deserialize(\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "href": [{"@id": self.portal.doc1.absolute_url()}],\n+                }\n+            }\n+        )\n+        doc_uid = IUUID(self.portal.doc1)\n+\n+        self.assertEqual(\n+            self.portal.doc1.blocks["123"]["href"][0]["@id"],\n+            "../resolveuid/{}".format(doc_uid),\n+        )\n+\n+    def test_deserialize_blocks_smart_href_array(self):\n         self.deserialize(\n             blocks={"123": {"@type": "foo", "href": [self.portal.doc1.absolute_url()]}}\n         )\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex bdf29ae6d..9eb4ffa81 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -124,6 +124,22 @@ def __call__(self, value):\n         self.assertEqual(value["123"]["value"], u"text")\n \n     def test_serialize_blocks_smart_href_array_volto_object_browser(self):\n+        doc_uid = IUUID(self.portal.doc1)\n+        value = self.serialize(\n+            context=self.portal.doc1,\n+            blocks={\n+                "123": {\n+                    "@type": "foo",\n+                    "href": [{"@id": "../resolveuid/{}".format(doc_uid)}],\n+                }\n+            },\n+        )\n+\n+        self.assertEqual(\n+            value["123"]["href"][0]["@id"], self.portal.doc1.absolute_url()\n+        )\n+\n+    def test_serialize_blocks_smart_href_array(self):\n         doc_uid = IUUID(self.portal.doc1)\n         value = self.serialize(\n             context=self.portal.doc1,\n'

