Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2024-02-15T13:27:32+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/875b899de4671c1870bd4c1fe37bf057952396f1

Fix resource expression calculation by removing volatile cache

Files changed:
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex 8ddcf4767b..735a3460d0 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -1,19 +1,15 @@\n from ..webresource import PloneScriptResource\n from ..webresource import PloneStyleResource\n-from App.config import getConfiguration\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.theming.interfaces import IThemeSettings\n from plone.app.theming.utils import theming_policy\n from plone.base.interfaces import IBundleRegistry\n from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.utils import getToolByName\n from time import time\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n-from zope.component.hooks import getSite\n \n-import hashlib\n import logging\n import webresource\n \n@@ -48,45 +44,11 @@ def _request_bundles(self):\n             request_disabled_bundles.update(getattr(request, "disabled_bundles", []))\n         return request_enabled_bundles, request_disabled_bundles\n \n-    def _user_local_roles(self, site):\n-        portal_membership = getToolByName(site, "portal_membership")\n-        user = portal_membership.getAuthenticatedMember()\n-        return "|".join(user.getRolesInContext(self.context))\n-\n-    def _cache_attr_name(self, site):\n-        hashtool = hashlib.sha256()\n-        hashtool.update(self.__class__.__name__.encode("utf8"))\n-        hashtool.update(site.absolute_url().encode("utf8"))\n-        e_bundles, d_bundles = self._request_bundles()\n-        for bundle in e_bundles | d_bundles:\n-            hashtool.update(bundle.encode("utf8"))\n-        hashtool.update(self._user_local_roles(site).encode("utf8"))\n-        if not getattr(self, "registry", None):\n-            self.registry = getUtility(IRegistry)\n-            mtime = getattr(self.registry, _RESOURCE_REGISTRY_MTIME, None)\n-            if mtime is not None:\n-                hashtool.update(str(mtime).encode("utf8"))\n-        return f"_v_rendered_cache_{hashtool.hexdigest()}"\n-\n-    @property\n-    def _rendered_cache(self):\n-        if getConfiguration().debug_mode:\n-            return\n-        self.registry = getUtility(IRegistry)\n-        if not self.registry["plone.resources.development"]:\n-            site = getSite()\n-            return getattr(site, self._cache_attr_name(site), None)\n-\n-    @_rendered_cache.setter\n-    def _rendered_cache(self, value):\n-        site = getSite()\n-        setattr(site, self._cache_attr_name(site), value)\n-\n     def update(self):\n         # cache on request\n         cached = getattr(self.request, REQUEST_CACHE_KEY, None)\n         if cached is not None:\n-            self.renderer = cached\n+            self.rendered = cached\n             return\n \n         # prepare\n@@ -285,42 +247,34 @@ def check_dependencies(bundle_name, depends, bundles):\n                 **{"data-bundle": "plonecustomcss"},\n             )\n \n-        self.renderer = {}\n-        setattr(self.request, REQUEST_CACHE_KEY, self.renderer)\n+        self.rendered = {}\n+        setattr(self.request, REQUEST_CACHE_KEY, self.rendered)\n         resolver_js = webresource.ResourceResolver(root_group_js)\n-        self.renderer["js"] = webresource.ResourceRenderer(\n+        self.rendered["js"] = webresource.ResourceRenderer(\n             resolver_js, base_url=self.portal_state.portal_url()\n-        )\n+        ).render()\n         resolver_css = webresource.ResourceResolver(root_group_css)\n-        self.renderer["css"] = webresource.ResourceRenderer(\n+        self.rendered["css"] = webresource.ResourceRenderer(\n             resolver_css, base_url=self.portal_state.portal_url()\n-        )\n+        ).render()\n \n \n class ResourceView(ResourceBase, ViewletBase):\n-    """Viewlet Information for script rendering."""\n+    """Viewlet Information for resource rendering."""\n \n \n class ScriptsView(ResourceView):\n     """Script Viewlet."""\n \n     def index(self):\n-        rendered = self._rendered_cache\n-        if not rendered:\n-            rendered = self.renderer["js"].render()\n-            self._rendered_cache = rendered\n-        return rendered\n+        return self.rendered["js"]\n \n \n class StylesView(ResourceView):\n     """Styles Viewlet."""\n \n     def index(self):\n-        rendered = self._rendered_cache\n-        if not rendered:\n-            rendered = self.renderer["css"].render()\n-            self._rendered_cache = rendered\n-        return rendered\n+        return self.rendered["css"]\n \n \n def update_resource_registry_mtime():\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 44f09afada..25193390b1 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -8,6 +8,7 @@\n from plone.testing.zope import Browser\n from Products.CMFPlone.resources import add_bundle_on_request\n from Products.CMFPlone.resources import remove_bundle_on_request\n+from Products.CMFPlone.resources.browser.resource import REQUEST_CACHE_KEY\n from Products.CMFPlone.resources.browser.resource import ScriptsView\n from Products.CMFPlone.resources.browser.resource import StylesView\n from Products.CMFPlone.tests import PloneTestCase\n@@ -287,6 +288,10 @@ def test_remove_bundle_on_request_with_subrequest(self):\n \n \n class TestExpressions(PloneTestCase.PloneTestCase):\n+    def logout(self):\n+        setattr(self.layer["request"], REQUEST_CACHE_KEY, None)\n+        logout()\n+\n     def setUp(self):\n         # Add three bundles with three different expressions.\n         registry = getUtility(IRegistry)\n@@ -333,7 +338,7 @@ def setUp(self):\n             registry.records[f"plone.bundles/testbundle3.{key}"] = record\n \n     def test_styles_authenticated(self):\n-        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        styles = StylesView(self.portal, self.layer["request"], None)\n         styles.update()\n         results = styles.render()\n         # Check that standard resources are still there, signalling that\n@@ -346,8 +351,8 @@ def test_styles_authenticated(self):\n         self.assertIn("http://test3.foo/test.css", results)\n \n     def test_styles_anonymous(self):\n-        logout()\n-        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        self.logout()\n+        styles = StylesView(self.portal, self.layer["request"], None)\n         styles.update()\n         results = styles.render()\n         # Check that standard resources are still there, signalling that\n@@ -359,8 +364,25 @@ def test_styles_anonymous(self):\n         self.assertNotIn("http://test2.foo/member.css", results)\n         self.assertIn("http://test3.foo/test.css", results)\n \n+    def test_styles_on_portal_type(self):\n+        styles = StylesView(self.portal, self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that special portal_type expression styles is missing on portal\n+        self.assertNotIn("http://test4.foo/test.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n+        # switch context\n+        setattr(self.layer["request"], REQUEST_CACHE_KEY, None)\n+        styles = StylesView(self.portal["test-file"], self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that special portal_type expression styles is available on context\n+        self.assertIn("http://test4.foo/test.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n     def test_scripts_authenticated(self):\n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         # Check that standard resources are still there, signalling that\n@@ -372,8 +394,8 @@ def test_scripts_authenticated(self):\n         self.assertIn("http://test3.foo/test.min.js", results)\n \n     def test_scripts_anonymous(self):\n-        logout()\n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        self.logout()\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         # Check that standard resources are still there, signalling that\n@@ -384,15 +406,32 @@ def test_scripts_anonymous(self):\n         self.assertNotIn("http://test2.foo/member.min.js", results)\n         self.assertIn("http://test3.foo/test.min.js", results)\n \n+    def test_scripts_on_portal_type(self):\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that special portal_type expression scripts is missing on portal\n+        self.assertNotIn("http://test4.foo/test.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\n+\n+        # switch context\n+        setattr(self.layer["request"], REQUEST_CACHE_KEY, None)\n+        scripts = ScriptsView(self.portal["test-file"], self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that special portal_type expression scripts is available on context\n+        self.assertIn("http://test4.foo/test.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\n+\n     def test_scripts_switching_roles(self):\n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         self.assertIn("http://test2.foo/member.min.js", results)\n \n-        logout()\n+        self.logout()\n \n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         self.assertNotIn("http://test2.foo/member.min.js", results)\n'

Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2024-02-15T13:30:53+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/192df3c875fb89280bd96e73c3382292e1d461da

changenote

Files changed:
A news/3789.bugfix

b'diff --git a/news/3789.bugfix b/news/3789.bugfix\nnew file mode 100644\nindex 0000000000..931465f162\n--- /dev/null\n+++ b/news/3789.bugfix\n@@ -0,0 +1,2 @@\n+Remove volatile cached resource viewlet content to fix context aware expressions.\n+[petschki]\n'

Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2024-02-15T14:58:21+01:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/7e95c867050f7e069d771ea612db832df7462597

fix tests

Files changed:
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 25193390b1..29ae11ae00 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -1,6 +1,8 @@\n from plone.app.testing import logout\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.base.interfaces import IBundleRegistry\n from plone.registry import field as regfield\n from plone.registry import Record\n@@ -293,6 +295,9 @@ def logout(self):\n         logout()\n \n     def setUp(self):\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n         # Add three bundles with three different expressions.\n         registry = getUtility(IRegistry)\n         data = {\n@@ -337,6 +342,22 @@ def setUp(self):\n             record.value = regdef[0]\n             registry.records[f"plone.bundles/testbundle3.{key}"] = record\n \n+        # test expression on different context\n+        self.portal.invokeFactory("File", id="test-file", file=None)\n+        data = {\n+            "jscompilation": ("http://test4.foo/test.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test4.foo/test.css", regfield.TextLine()),\n+            "expression": ("python: object.portal_type == \'File\'", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle4.{key}"] = record\n+\n     def test_styles_authenticated(self):\n         styles = StylesView(self.portal, self.layer["request"], None)\n         styles.update()\n'

Repository: Products.CMFPlone


Branch: refs/heads/6.0.x
Date: 2024-02-19T10:24:34+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/Products.CMFPlone/commit/c624c175c087addfc96092984c0b9486222d9f9c

Merge pull request #3900 from plone/petschki-issue-3789-new

Fix resource expression calculation by removing volatile cache

Files changed:
A news/3789.bugfix
M Products/CMFPlone/resources/browser/resource.py
M Products/CMFPlone/tests/testResourceRegistries.py

b'diff --git a/Products/CMFPlone/resources/browser/resource.py b/Products/CMFPlone/resources/browser/resource.py\nindex 8ddcf4767b..735a3460d0 100644\n--- a/Products/CMFPlone/resources/browser/resource.py\n+++ b/Products/CMFPlone/resources/browser/resource.py\n@@ -1,19 +1,15 @@\n from ..webresource import PloneScriptResource\n from ..webresource import PloneStyleResource\n-from App.config import getConfiguration\n from plone.app.layout.viewlets.common import ViewletBase\n from plone.app.theming.interfaces import IThemeSettings\n from plone.app.theming.utils import theming_policy\n from plone.base.interfaces import IBundleRegistry\n from plone.registry.interfaces import IRegistry\n-from Products.CMFCore.utils import getToolByName\n from time import time\n from zope.component import getMultiAdapter\n from zope.component import getUtility\n from zope.component import queryUtility\n-from zope.component.hooks import getSite\n \n-import hashlib\n import logging\n import webresource\n \n@@ -48,45 +44,11 @@ def _request_bundles(self):\n             request_disabled_bundles.update(getattr(request, "disabled_bundles", []))\n         return request_enabled_bundles, request_disabled_bundles\n \n-    def _user_local_roles(self, site):\n-        portal_membership = getToolByName(site, "portal_membership")\n-        user = portal_membership.getAuthenticatedMember()\n-        return "|".join(user.getRolesInContext(self.context))\n-\n-    def _cache_attr_name(self, site):\n-        hashtool = hashlib.sha256()\n-        hashtool.update(self.__class__.__name__.encode("utf8"))\n-        hashtool.update(site.absolute_url().encode("utf8"))\n-        e_bundles, d_bundles = self._request_bundles()\n-        for bundle in e_bundles | d_bundles:\n-            hashtool.update(bundle.encode("utf8"))\n-        hashtool.update(self._user_local_roles(site).encode("utf8"))\n-        if not getattr(self, "registry", None):\n-            self.registry = getUtility(IRegistry)\n-            mtime = getattr(self.registry, _RESOURCE_REGISTRY_MTIME, None)\n-            if mtime is not None:\n-                hashtool.update(str(mtime).encode("utf8"))\n-        return f"_v_rendered_cache_{hashtool.hexdigest()}"\n-\n-    @property\n-    def _rendered_cache(self):\n-        if getConfiguration().debug_mode:\n-            return\n-        self.registry = getUtility(IRegistry)\n-        if not self.registry["plone.resources.development"]:\n-            site = getSite()\n-            return getattr(site, self._cache_attr_name(site), None)\n-\n-    @_rendered_cache.setter\n-    def _rendered_cache(self, value):\n-        site = getSite()\n-        setattr(site, self._cache_attr_name(site), value)\n-\n     def update(self):\n         # cache on request\n         cached = getattr(self.request, REQUEST_CACHE_KEY, None)\n         if cached is not None:\n-            self.renderer = cached\n+            self.rendered = cached\n             return\n \n         # prepare\n@@ -285,42 +247,34 @@ def check_dependencies(bundle_name, depends, bundles):\n                 **{"data-bundle": "plonecustomcss"},\n             )\n \n-        self.renderer = {}\n-        setattr(self.request, REQUEST_CACHE_KEY, self.renderer)\n+        self.rendered = {}\n+        setattr(self.request, REQUEST_CACHE_KEY, self.rendered)\n         resolver_js = webresource.ResourceResolver(root_group_js)\n-        self.renderer["js"] = webresource.ResourceRenderer(\n+        self.rendered["js"] = webresource.ResourceRenderer(\n             resolver_js, base_url=self.portal_state.portal_url()\n-        )\n+        ).render()\n         resolver_css = webresource.ResourceResolver(root_group_css)\n-        self.renderer["css"] = webresource.ResourceRenderer(\n+        self.rendered["css"] = webresource.ResourceRenderer(\n             resolver_css, base_url=self.portal_state.portal_url()\n-        )\n+        ).render()\n \n \n class ResourceView(ResourceBase, ViewletBase):\n-    """Viewlet Information for script rendering."""\n+    """Viewlet Information for resource rendering."""\n \n \n class ScriptsView(ResourceView):\n     """Script Viewlet."""\n \n     def index(self):\n-        rendered = self._rendered_cache\n-        if not rendered:\n-            rendered = self.renderer["js"].render()\n-            self._rendered_cache = rendered\n-        return rendered\n+        return self.rendered["js"]\n \n \n class StylesView(ResourceView):\n     """Styles Viewlet."""\n \n     def index(self):\n-        rendered = self._rendered_cache\n-        if not rendered:\n-            rendered = self.renderer["css"].render()\n-            self._rendered_cache = rendered\n-        return rendered\n+        return self.rendered["css"]\n \n \n def update_resource_registry_mtime():\ndiff --git a/Products/CMFPlone/tests/testResourceRegistries.py b/Products/CMFPlone/tests/testResourceRegistries.py\nindex 44f09afada..29ae11ae00 100644\n--- a/Products/CMFPlone/tests/testResourceRegistries.py\n+++ b/Products/CMFPlone/tests/testResourceRegistries.py\n@@ -1,6 +1,8 @@\n from plone.app.testing import logout\n+from plone.app.testing import setRoles\n from plone.app.testing import SITE_OWNER_NAME\n from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.base.interfaces import IBundleRegistry\n from plone.registry import field as regfield\n from plone.registry import Record\n@@ -8,6 +10,7 @@\n from plone.testing.zope import Browser\n from Products.CMFPlone.resources import add_bundle_on_request\n from Products.CMFPlone.resources import remove_bundle_on_request\n+from Products.CMFPlone.resources.browser.resource import REQUEST_CACHE_KEY\n from Products.CMFPlone.resources.browser.resource import ScriptsView\n from Products.CMFPlone.resources.browser.resource import StylesView\n from Products.CMFPlone.tests import PloneTestCase\n@@ -287,7 +290,14 @@ def test_remove_bundle_on_request_with_subrequest(self):\n \n \n class TestExpressions(PloneTestCase.PloneTestCase):\n+    def logout(self):\n+        setattr(self.layer["request"], REQUEST_CACHE_KEY, None)\n+        logout()\n+\n     def setUp(self):\n+        self.portal = self.layer["portal"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n         # Add three bundles with three different expressions.\n         registry = getUtility(IRegistry)\n         data = {\n@@ -332,8 +342,24 @@ def setUp(self):\n             record.value = regdef[0]\n             registry.records[f"plone.bundles/testbundle3.{key}"] = record\n \n+        # test expression on different context\n+        self.portal.invokeFactory("File", id="test-file", file=None)\n+        data = {\n+            "jscompilation": ("http://test4.foo/test.min.js", regfield.TextLine()),\n+            "csscompilation": ("http://test4.foo/test.css", regfield.TextLine()),\n+            "expression": ("python: object.portal_type == \'File\'", regfield.TextLine()),\n+            "enabled": (True, regfield.Bool()),\n+            "depends": ("", regfield.TextLine()),\n+            "load_async": (True, regfield.Bool()),\n+            "load_defer": (True, regfield.Bool()),\n+        }\n+        for key, regdef in data.items():\n+            record = Record(regdef[1])\n+            record.value = regdef[0]\n+            registry.records[f"plone.bundles/testbundle4.{key}"] = record\n+\n     def test_styles_authenticated(self):\n-        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        styles = StylesView(self.portal, self.layer["request"], None)\n         styles.update()\n         results = styles.render()\n         # Check that standard resources are still there, signalling that\n@@ -346,8 +372,8 @@ def test_styles_authenticated(self):\n         self.assertIn("http://test3.foo/test.css", results)\n \n     def test_styles_anonymous(self):\n-        logout()\n-        styles = StylesView(self.layer["portal"], self.layer["request"], None)\n+        self.logout()\n+        styles = StylesView(self.portal, self.layer["request"], None)\n         styles.update()\n         results = styles.render()\n         # Check that standard resources are still there, signalling that\n@@ -359,8 +385,25 @@ def test_styles_anonymous(self):\n         self.assertNotIn("http://test2.foo/member.css", results)\n         self.assertIn("http://test3.foo/test.css", results)\n \n+    def test_styles_on_portal_type(self):\n+        styles = StylesView(self.portal, self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that special portal_type expression styles is missing on portal\n+        self.assertNotIn("http://test4.foo/test.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n+        # switch context\n+        setattr(self.layer["request"], REQUEST_CACHE_KEY, None)\n+        styles = StylesView(self.portal["test-file"], self.layer["request"], None)\n+        styles.update()\n+        results = styles.render()\n+        # Check that special portal_type expression styles is available on context\n+        self.assertIn("http://test4.foo/test.css", results)\n+        self.assertIn("http://test3.foo/test.css", results)\n+\n     def test_scripts_authenticated(self):\n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         # Check that standard resources are still there, signalling that\n@@ -372,8 +415,8 @@ def test_scripts_authenticated(self):\n         self.assertIn("http://test3.foo/test.min.js", results)\n \n     def test_scripts_anonymous(self):\n-        logout()\n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        self.logout()\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         # Check that standard resources are still there, signalling that\n@@ -384,15 +427,32 @@ def test_scripts_anonymous(self):\n         self.assertNotIn("http://test2.foo/member.min.js", results)\n         self.assertIn("http://test3.foo/test.min.js", results)\n \n+    def test_scripts_on_portal_type(self):\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that special portal_type expression scripts is missing on portal\n+        self.assertNotIn("http://test4.foo/test.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\n+\n+        # switch context\n+        setattr(self.layer["request"], REQUEST_CACHE_KEY, None)\n+        scripts = ScriptsView(self.portal["test-file"], self.layer["request"], None)\n+        scripts.update()\n+        results = scripts.render()\n+        # Check that special portal_type expression scripts is available on context\n+        self.assertIn("http://test4.foo/test.min.js", results)\n+        self.assertIn("http://test3.foo/test.min.js", results)\n+\n     def test_scripts_switching_roles(self):\n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         self.assertIn("http://test2.foo/member.min.js", results)\n \n-        logout()\n+        self.logout()\n \n-        scripts = ScriptsView(self.layer["portal"], self.layer["request"], None)\n+        scripts = ScriptsView(self.portal, self.layer["request"], None)\n         scripts.update()\n         results = scripts.render()\n         self.assertNotIn("http://test2.foo/member.min.js", results)\ndiff --git a/news/3789.bugfix b/news/3789.bugfix\nnew file mode 100644\nindex 0000000000..931465f162\n--- /dev/null\n+++ b/news/3789.bugfix\n@@ -0,0 +1,2 @@\n+Remove volatile cached resource viewlet content to fix context aware expressions.\n+[petschki]\n'

