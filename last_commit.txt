Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-01-25T12:41:36+01:00
Author: Tiberiu Ichim (tiberiuichim) <tiberiuichim@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/172d294691d2200bee15d42125d1ac1afdc0748a

Navportlet as a separate service and expand (#1042)

* Add flake8 file, add vim bak files to gitignore, add portlet WIP

* WIP

* WIP

* WIP

* Make one test pass

* Add another test

* WIP

* Make headingLinkRooted test pass

* More tests

* One more test

* One more test

* Add direct navportlet renderer test

* Use expand.navportlet. as prefix for parameters, always

* Add another test

* Add getNavTree compatibility method; more tests

* Fix get_root function

* More tests

* Fix a bug with depth handling

* More tests

* More tests

* More tests

* Include available information in service

* Add changelog news entry, add endpoint and service test

* Fix test

* Add new endpoint in tests

* Remove feedparser version override

* Use six for UserDict import

* use six for urlencode

* Pass unicode strings in test

* Fix py2 test

* Plone 4 compatible import

* Add P4 compatibility

* Don't include thumb scale override code for Plone 4

* More P4 compatibility

* Skip a test in Plone 4

* Skip more tests in Plone 4

* Fix test

* Make test more resilient

* Renamed navportlet =&gt; contextnavigation

* Make flake8 happy

* Make flake8 happy

* Make flake8 happy

* Run tests, response files are updated to new endpoint

* Add rst docs for contextnavigation

* Generate the resp in 3.7

Co-authored-by: Victor Fernandez de Alba &lt;sneridagh@gmail.com&gt;

Files changed:
A .flake8
A docs/source/contextnavigation.rst
A news/1042.feature
A src/plone/restapi/services/contextnavigation/__init__.py
A src/plone/restapi/services/contextnavigation/configure.zcml
A src/plone/restapi/services/contextnavigation/get.py
A src/plone/restapi/tests/http-examples/contextnavigation.req
A src/plone/restapi/tests/http-examples/contextnavigation.resp
A src/plone/restapi/tests/test_services_contextnavigation.py
M .gitignore
M docs/source/index.rst
M plone-5.2.x.cfg
M src/plone/restapi/services/configure.zcml
M src/plone/restapi/tests/http-examples/collection.resp
M src/plone/restapi/tests/http-examples/collection_fullobjects.resp
M src/plone/restapi/tests/http-examples/content_get.resp
M src/plone/restapi/tests/http-examples/content_get_folder.resp
M src/plone/restapi/tests/http-examples/content_patch_representation.resp
M src/plone/restapi/tests/http-examples/content_post.resp
M src/plone/restapi/tests/http-examples/document.resp
M src/plone/restapi/tests/http-examples/event.resp
M src/plone/restapi/tests/http-examples/expansion.resp
M src/plone/restapi/tests/http-examples/expansion_expanded.resp
M src/plone/restapi/tests/http-examples/expansion_expanded_full.resp
M src/plone/restapi/tests/http-examples/file.resp
M src/plone/restapi/tests/http-examples/folder.resp
M src/plone/restapi/tests/http-examples/image.resp
M src/plone/restapi/tests/http-examples/jwt_logged_in.resp
M src/plone/restapi/tests/http-examples/link.resp
M src/plone/restapi/tests/http-examples/newsitem.resp
M src/plone/restapi/tests/http-examples/search_fullobjects.resp
M src/plone/restapi/tests/http-examples/siteroot.resp
M src/plone/restapi/tests/http-examples/translations_link_on_post.resp
M src/plone/restapi/tests/test_documentation.py

b'diff --git a/.flake8 b/.flake8\nnew file mode 100644\nindex 000000000..f338d003f\n--- /dev/null\n+++ b/.flake8\n@@ -0,0 +1,7 @@\n+[flake8]\n+# Recommend matching the black line length (default 88),\n+# rather than using the flake8 default of 79:\n+max-line-length = 88\n+extend-ignore =\n+    # See https://github.com/PyCQA/pycodestyle/issues/373\n+    E203,\ndiff --git a/.gitignore b/.gitignore\nindex 97adb5d99..baf59cccb 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -39,3 +39,4 @@ pip-selfcheck.json\n /.mypy_cache/\n .*project\n .settings/\n+*~\ndiff --git a/docs/source/contextnavigation.rst b/docs/source/contextnavigation.rst\nnew file mode 100644\nindex 000000000..324e884e0\n--- /dev/null\n+++ b/docs/source/contextnavigation.rst\n@@ -0,0 +1,17 @@\n+.. _contextnavigation:\n+\n+Context Navigation\n+==================\n+\n+Top-Level Navigation\n+--------------------\n+\n+Getting the top navigation items:\n+\n+..  http:example:: curl httpie python-requests\n+    :request: ../../src/plone/restapi/tests/http-examples/contextnavigation.req\n+\n+Example response:\n+\n+.. literalinclude:: ../../src/plone/restapi/tests/http-examples/contextnavigation.resp\n+   :language: http\ndiff --git a/docs/source/index.rst b/docs/source/index.rst\nindex 41f6b29a9..34385e620 100644\n--- a/docs/source/index.rst\n+++ b/docs/source/index.rst\n@@ -42,6 +42,7 @@ plone.restapi: A RESTful hypermedia API for Plone.\n    components\n    breadcrumbs\n    navigation\n+   contextnavigation\n    serialization\n    searching\n    tusupload\ndiff --git a/news/1042.feature b/news/1042.feature\nnew file mode 100644\nindex 000000000..da8996849\n--- /dev/null\n+++ b/news/1042.feature\n@@ -0,0 +1,22 @@\n+A new service endpoint and expand is available, a Navigation Portlet exposed as\n+``@navportlet``. It uses the same semantics as the classic Plone navigation\n+portlet, largely through reusing the same code. Instead of storing the\n+"portlet" configuration in a portlet assignment storage, you can pass these as\n+parameters to the service or expand component.\n+\n+You can provide these as parameters:\n+\n+- ``name`` - The title of the navigation tree.\n+- ``root_path`` - Root node path, can be "frontend path", derived from router\n+- ``includeTop`` - Bool, Include top nodeschema\n+- ``currentFolderOnly`` - Bool, Only show the contents of the current folder.\n+- ``topLevel`` - Int, Start level\n+- ``bottomLevel`` - Int, Navigation tree depth\n+- ``no_icons`` - Bool, Suppress Icons\n+- ``thumb_scale`` - String, Override thumb scale\n+- ``no_thumbs`` = Bool, Suppress thumbs\n+\n+You should prefix these parameters with ``expand.navportlet.``, so a request\n+would look like:\n+\n+``http://localhost:55001/plone/?expand.navportlet.topLevel=1&expand.navportlet.name=Custom+name``\ndiff --git a/plone-5.2.x.cfg b/plone-5.2.x.cfg\nindex f39c263b3..7ee9ff4e4 100644\n--- a/plone-5.2.x.cfg\n+++ b/plone-5.2.x.cfg\n@@ -21,4 +21,4 @@ importlib-metadata = 2.0.0\n plone.dexterity = 2.9.8\n \n # plone.restapi specific pins\n-plone.restapi =\n\\ No newline at end of file\n+plone.restapi =\ndiff --git a/src/plone/restapi/services/configure.zcml b/src/plone/restapi/services/configure.zcml\nindex 090c3059d..046bef933 100644\n--- a/src/plone/restapi/services/configure.zcml\n+++ b/src/plone/restapi/services/configure.zcml\n@@ -16,6 +16,7 @@\n   <include package=".discussion"/>\n   <include package=".groups"/>\n   <include package=".navigation"/>\n+  <include package=".contextnavigation"/>\n   <include package=".history"/>\n   <include package=".locking" />\n   <include package=".principals"/>\ndiff --git a/src/plone/restapi/services/contextnavigation/__init__.py b/src/plone/restapi/services/contextnavigation/__init__.py\nnew file mode 100644\nindex 000000000..57d631c3f\n--- /dev/null\n+++ b/src/plone/restapi/services/contextnavigation/__init__.py\n@@ -0,0 +1 @@\n+# coding: utf-8\ndiff --git a/src/plone/restapi/services/contextnavigation/configure.zcml b/src/plone/restapi/services/contextnavigation/configure.zcml\nnew file mode 100644\nindex 000000000..a96724229\n--- /dev/null\n+++ b/src/plone/restapi/services/contextnavigation/configure.zcml\n@@ -0,0 +1,16 @@\n+<configure\n+    xmlns="http://namespaces.zope.org/zope"\n+    xmlns:plone="http://namespaces.plone.org/plone">\n+\n+<adapter factory=".get.ContextNavigation" name="contextnavigation"/>\n+\n+  <plone:service\n+    method="GET"\n+    for="zope.interface.Interface"\n+    factory=".get.ContextNavigationGet"\n+    name="@contextnavigation"\n+    permission="zope2.View"\n+    />\n+\n+</configure>\n+\ndiff --git a/src/plone/restapi/services/contextnavigation/get.py b/src/plone/restapi/services/contextnavigation/get.py\nnew file mode 100644\nindex 000000000..f53753b12\n--- /dev/null\n+++ b/src/plone/restapi/services/contextnavigation/get.py\n@@ -0,0 +1,737 @@\n+# -*- coding: utf-8 -*-\n+\n+""" A flexible navigation service that uses class navigation portlet semantics\n+"""\n+\n+from Acquisition import aq_base\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from plone import api\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.layout.navigation.navtree import buildFolderTree\n+from plone.app.layout.navigation.root import getNavigationRoot\n+from plone.i18n.normalizer.interfaces import IIDNormalizer\n+from plone.memoize.instance import memoize\n+from plone.registry.interfaces import IRegistry\n+from plone.restapi.interfaces import IExpandableElement\n+from plone.restapi.services import Service\n+from Products.CMFCore.interfaces import ISiteRoot\n+from Products.CMFCore.utils import getToolByName\n+from Products.CMFDynamicViewFTI.interfaces import IBrowserDefault\n+from Products.CMFPlone import utils\n+from Products.CMFPlone.browser.navtree import SitemapNavtreeStrategy\n+from Products.CMFPlone.interfaces import INonStructuralFolder\n+from Products.MimetypesRegistry.MimeTypeItem import guess_icon_path\n+from six.moves import UserDict\n+from zExceptions import NotFound\n+from zope import schema\n+from zope.component import adapter\n+from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+from zope.component import queryUtility\n+from zope.i18nmessageid import MessageFactory\n+from zope.interface import implementer\n+from zope.interface import Interface\n+from zope.schema.interfaces import IFromUnicode\n+\n+import os\n+import six\n+\n+\n+IS_PLONE4 = False\n+\n+try:\n+    from Products.CMFPlone.defaultpage import is_default_page\n+    from Products.CMFPlone.interfaces import INavigationSchema\n+    from Products.CMFPlone.interfaces import ISiteSchema\n+except ImportError:\n+    IS_PLONE4 = True\n+\n+_ = MessageFactory("plone.restapi")\n+\n+\n+class INavigationPortlet(Interface):\n+    """A portlet which can render the navigation tree"""\n+\n+    name = schema.TextLine(\n+        title=_(u"label_navigation_title", default=u"Title"),\n+        description=_(\n+            u"help_navigation_title", default=u"The title of the navigation tree."\n+        ),\n+        default=u"",\n+        required=False,\n+    )\n+\n+    root_path = schema.TextLine(\n+        title=_(u"label_navigation_root_path", default=u"Root node"),\n+        description=_(\n+            u"help_navigation_root",\n+            default=u"You may search for and choose a folder "\n+            "to act as the root of the navigation tree. "\n+            "Leave blank to use the Plone site root.",\n+        ),\n+        required=False,\n+    )\n+\n+    includeTop = schema.Bool(\n+        title=_(u"label_include_top_node", default=u"Include top node"),\n+        description=_(\n+            u"help_include_top_node",\n+            default=u"Whether or not to show the top, or \'root\', "\n+            "node in the navigation tree. This is affected "\n+            "by the \'Start level\' setting.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n+\n+    currentFolderOnly = schema.Bool(\n+        title=_(\n+            u"label_current_folder_only",\n+            default=u"Only show the contents of the current folder.",\n+        ),\n+        description=_(\n+            u"help_current_folder_only",\n+            default=u"If selected, the navigation tree will "\n+            "only show the current folder and its "\n+            "children at all times.",\n+        ),\n+        default=False,\n+        required=False,\n+    )\n+\n+    topLevel = schema.Int(\n+        title=_(u"label_navigation_startlevel", default=u"Start level"),\n+        description=_(\n+            u"help_navigation_start_level",\n+            default=u"An integer value that specifies the number of folder "\n+            "levels below the site root that must be exceeded "\n+            "before the navigation tree will display. 0 means "\n+            "that the navigation tree should be displayed "\n+            "everywhere including pages in the root of the site. "\n+            "1 means the tree only shows up inside folders "\n+            "located in the root and downwards, never showing "\n+            "at the top level.",\n+        ),\n+        default=1,\n+        required=False,\n+    )\n+\n+    bottomLevel = schema.Int(\n+        title=_(u"label_navigation_tree_depth", default=u"Navigation tree depth"),\n+        description=_(\n+            u"help_navigation_tree_depth",\n+            default=u"How many folders should be included "\n+            "before the navigation tree stops. 0 "\n+            "means no limit. 1 only includes the "\n+            "root folder.",\n+        ),\n+        default=0,\n+        required=False,\n+    )\n+\n+    no_icons = schema.Bool(\n+        title=_(u"Suppress Icons"),\n+        description=_(u"If enabled, the portlet will not show document type icons."),\n+        required=True,\n+        default=False,\n+    )\n+\n+    thumb_scale = schema.TextLine(\n+        title=_(u"Override thumb scale"),\n+        description=_(\n+            u"Enter a valid scale name"\n+            u" (see \'Image Handling\' control panel) to override"\n+            u" (e.g. icon, tile, thumb, mini, preview, ... )."\n+            u" Leave empty to use default (see \'Site\' control panel)."\n+        ),\n+        required=False,\n+        default=u"",\n+    )\n+\n+    no_thumbs = schema.Bool(\n+        title=_(u"Suppress thumbs"),\n+        description=_(u"If enabled, the portlet will not show thumbs."),\n+        required=True,\n+        default=False,\n+    )\n+\n+\n+class ContextNavigationGet(Service):\n+    def reply(self):\n+        navigation = ContextNavigation(self.context, self.request)\n+        return navigation(expand=True, prefix="expand.contextnavigation.")[\n+            "contextnavigation"\n+        ]\n+\n+\n+@implementer(IExpandableElement)\n+@adapter(Interface, Interface)\n+class ContextNavigation(object):\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+    def __call__(self, expand=False, prefix="expand.contextnavigation."):\n+        result = {\n+            "contextnavigation": {\n+                "@id": "{}/@contextnavigation".format(self.context.absolute_url())\n+            }\n+        }\n+        if not expand:\n+            return result\n+\n+        data = extract_data(INavigationPortlet, self.request.form, prefix)\n+        renderer = NavigationPortletRenderer(self.context, self.request, data)\n+        res = renderer.render()\n+        result["contextnavigation"].update(res)\n+        return result\n+\n+    def getNavTree(self):\n+        # compatibility method with NavigationPortletRenderer, only for tests\n+        return self.__call__(expand=True)["contextnavigation"]\n+\n+\n+class NavigationPortletRenderer(object):\n+    def __init__(self, context, request, data):\n+\n+        self.context = context\n+        self.request = request\n+        self.data = data\n+        self.urltool = getToolByName(context, "portal_url")\n+\n+    def title(self):\n+        return self.data.name or self.data.title or _("Navigation")\n+\n+    def hasName(self):\n+        return self.data.name\n+\n+    @property\n+    def available(self):\n+        rootpath = self.getNavRootPath()\n+        if rootpath is None:\n+            return False\n+\n+        if self.data.bottomLevel < 0:\n+            return True\n+\n+        tree = self.getNavTree()\n+        return len(tree["children"]) > 0\n+\n+    def include_top(self):\n+        return getattr(self.data, "includeTop", True)\n+\n+    def navigation_root(self):\n+        return self.getNavRoot()\n+\n+    def heading_link_target(self):\n+        """\n+        Get the href target where clicking the portlet header will take you.\n+\n+        If this is a customized portlet with a custom root item set,\n+        we probably want to take the user to the custom root item instead\n+        of the sitemap of the navigation root.\n+\n+        Plone does not have subsection sitemaps so there is no point of\n+        displaying /sitemap links for anything besides nav root.\n+        """\n+\n+        if not self.data.root_path and not self.data.currentFolderOnly:\n+            # No particular root item assigned -> should get link to the\n+            # navigation root sitemap of the current context acquisition chain\n+            portal_state = getMultiAdapter(\n+                (self.context, self.request), name="plone_portal_state"\n+            )\n+            return portal_state.navigation_root_url() + "/sitemap"\n+\n+        nav_root = self.getNavRoot()\n+\n+        # Root content item gone away or similar issue\n+        if not nav_root:\n+            return None\n+\n+        if INavigationRoot.providedBy(nav_root) or ISiteRoot.providedBy(nav_root):\n+            # For top level folders go to the sitemap\n+            return nav_root.absolute_url() + "/sitemap"\n+        else:\n+            # Go to the item /view we have chosen as root item\n+            return nav_root.absolute_url()\n+\n+    def root_type_name(self):\n+        root = self.getNavRoot()\n+        return queryUtility(IIDNormalizer).normalize(root.portal_type)\n+\n+    def root_item_class(self):\n+        context = aq_inner(self.context)\n+        root = self.getNavRoot()\n+        container = aq_parent(context)\n+        is_default = False\n+        if IS_PLONE4:\n+            is_default = _is_default_page(container, context)\n+        else:\n+            is_default = is_default_page(container, context)\n+        if aq_base(root) is aq_base(context) or (\n+            aq_base(root) is aq_base(container) and is_default\n+        ):\n+            return "navTreeCurrentItem"\n+        return ""\n+\n+    def root_is_portal(self):\n+        root = self.getNavRoot()\n+        return aq_base(root) is aq_base(self.urltool.getPortalObject())\n+\n+    def createNavTree(self):\n+        data = self.getNavTree()\n+\n+        bottomLevel = self.data.bottomLevel or 0\n+\n+        if bottomLevel < 0:\n+            # Special case where navigation tree depth is negative\n+            # meaning that the admin does not want the listing to be displayed\n+            return self.recurse([], level=1, bottomLevel=bottomLevel)\n+        else:\n+            return self.recurse(\n+                children=data.get("children", []), level=1, bottomLevel=bottomLevel\n+            )\n+\n+    # Cached lookups\n+\n+    @memoize\n+    def getNavRootPath(self):\n+        return getRootPath(\n+            self.context,\n+            self.data.currentFolderOnly,\n+            self.data.topLevel,\n+            self.data.root_path,\n+        )\n+\n+    @memoize\n+    def getNavRoot(self, _marker=None):\n+        if _marker is None:\n+            _marker = []\n+        portal = self.urltool.getPortalObject()\n+        rootPath = self.getNavRootPath()\n+        if rootPath is None:\n+            return None\n+\n+        if rootPath == self.urltool.getPortalPath():\n+            return portal\n+        else:\n+            try:\n+                return portal.unrestrictedTraverse(rootPath)\n+            except (AttributeError, KeyError, TypeError, NotFound):\n+                # TypeError: object is unsubscribtable might be\n+                # risen in some cases\n+                return portal\n+\n+    @memoize\n+    def getNavTree(self, _marker=None):\n+        if _marker is None:\n+            _marker = []\n+        context = aq_inner(self.context)\n+        # queryBuilder = getMultiAdapter((context, self.data), INavigationQueryBuilder)\n+        # strategy = getMultiAdapter((context, self.data), INavtreeStrategy)\n+        # TODO: bring back the adapters\n+        queryBuilder = QueryBuilder(context, self.data)\n+        strategy = NavtreeStrategy(context, self.data)\n+\n+        return buildFolderTree(\n+            context, obj=context, query=queryBuilder(), strategy=strategy\n+        )\n+\n+    @memoize\n+    def thumb_scale(self):\n+        """Use override value or read thumb_scale from registry.\n+        Image sizes must fit to value in allowed image sizes.\n+        None will suppress thumb.\n+        """\n+        if getattr(self.data, "no_thumbs", False):\n+            # Individual setting overrides\n+            return None\n+        thsize = getattr(self.data, "thumb_scale", None)\n+        if thsize:\n+            return thsize\n+\n+        if IS_PLONE4:\n+            return None  # no support in Plone 4 to override the thumb scale\n+        else:\n+            registry = getUtility(IRegistry)\n+            settings = registry.forInterface(ISiteSchema, prefix="plone", check=False)\n+            if settings.no_thumbs_portlet:\n+                return "none"\n+            thumb_scale_portlet = settings.thumb_scale_portlet\n+            return thumb_scale_portlet\n+\n+    def getMimeTypeIcon(self, node):\n+        try:\n+            if not node["normalized_portal_type"] == "file":\n+                return None\n+            fileo = node["item"].getObject().file\n+            portal_url = getNavigationRoot(self.context)\n+            mtt = getToolByName(self.context, "mimetypes_registry")\n+            if fileo.contentType:\n+                ctype = mtt.lookup(fileo.contentType)\n+                return os.path.join(portal_url, guess_icon_path(ctype[0]))\n+        except AttributeError:\n+            return None\n+        return None\n+\n+    def render(self):\n+        res = {\n+            "title": self.title(),\n+            "url": self.heading_link_target(),\n+            "has_custom_name": bool(self.hasName()),\n+            "items": [],\n+            "available": self.available,\n+        }\n+        if not res["available"]:\n+            return res\n+\n+        if self.include_top():\n+            root = self.navigation_root()\n+            root_is_portal = self.root_is_portal()\n+\n+            if root is None:\n+                root = self.urltool.getPortalObject()\n+                root_is_portal = True\n+\n+            if utils.safe_hasattr(self.context, "getRemoteUrl"):\n+                root_url = root.getRemoteUrl()\n+            else:\n+                # cid, root_url = get_view_url(root)\n+                # cid = get_id(root)\n+                root_url = get_url(root)\n+\n+            root_title = "Home" if root_is_portal else root.pretty_title_or_id()\n+            root_type = (\n+                "plone-site"\n+                if root_is_portal\n+                else utils.normalizeString(root.portal_type, context=root)\n+            )\n+            normalized_id = utils.normalizeString(root.Title(), context=root)\n+\n+            if root_is_portal:\n+                state = ""\n+            else:\n+                state = api.content.get_state(root)\n+\n+            res["items"].append(\n+                {\n+                    "@id": root.absolute_url(),\n+                    "description": root.Description() or "",\n+                    "href": root_url,\n+                    "icon": "",\n+                    "is_current": bool(self.root_item_class()),\n+                    "is_folderish": True,\n+                    "is_in_path": True,\n+                    "items": [],\n+                    "normalized_id": normalized_id,\n+                    "thumb": "",\n+                    "title": root_title,\n+                    "type": root_type,\n+                    "review_state": state,\n+                }\n+            )\n+\n+        res["items"].extend(self.createNavTree())\n+\n+        return res\n+\n+    def recurse(self, children, level, bottomLevel):\n+        # TODO: we should avoid recursion. This is just a rewrite of the TAL\n+        # template, but ideally we should use a dequeue structure to avoid\n+        # recursion problems.\n+\n+        res = []\n+\n+        show_thumbs = not self.data.no_thumbs\n+        show_icons = not self.data.no_icons\n+\n+        thumb_scale = self.thumb_scale()\n+\n+        for node in children:\n+            brain = node["item"]\n+\n+            icon = ""\n+\n+            if show_icons:\n+                if node["portal_type"] == "File":\n+                    icon = self.getMimeTypeIcon(node)\n+\n+            has_thumb = brain.getIcon\n+            thumb = ""\n+\n+            if show_thumbs and has_thumb and thumb_scale:\n+                thumb = "{}/@@images/image/{}".format(\n+                    node["item"].getURL(), thumb_scale\n+                )\n+\n+            show_children = node["show_children"]\n+            item_remote_url = node["getRemoteUrl"]\n+            use_remote_url = node["useRemoteUrl"]\n+            item_url = node["getURL"]\n+            item = {\n+                "@id": item_url,\n+                "description": node["Description"],\n+                "href": item_remote_url if use_remote_url else item_url,\n+                "icon": icon,\n+                "is_current": node["currentItem"],\n+                "is_folderish": node["show_children"],\n+                "is_in_path": node["currentParent"],\n+                "items": [],\n+                "normalized_id": node["normalized_id"],\n+                "review_state": node["review_state"] or "",\n+                "thumb": thumb,\n+                "title": node["Title"],\n+                "type": node["normalized_portal_type"],\n+            }\n+\n+            nodechildren = node["children"]\n+\n+            if (\n+                nodechildren\n+                and show_children\n+                and ((level < bottomLevel) or (bottomLevel == 0))\n+            ):\n+                item["items"] = self.recurse(\n+                    nodechildren, level=level + 1, bottomLevel=bottomLevel\n+                )\n+\n+            res.append(item)\n+\n+        return res\n+\n+\n+def get_url(item):\n+    if not item:\n+        return None\n+\n+    if hasattr(aq_base(item), "getURL"):\n+        # Looks like a brain\n+\n+        return item.getURL()\n+\n+    return item.absolute_url()\n+\n+\n+def get_id(item):\n+    if not item:\n+        return None\n+    getId = getattr(item, "getId")\n+\n+    if not utils.safe_callable(getId):\n+        # Looks like a brain\n+\n+        return getId\n+\n+    return getId()\n+\n+\n+def get_view_url(context):\n+    registry = getUtility(IRegistry)\n+    view_action_types = registry.get("plone.types_use_view_action_in_listings", [])\n+    item_url = get_url(context)\n+    name = get_id(context)\n+\n+    if getattr(context, "portal_type", {}) in view_action_types:\n+        item_url += "/view"  # TODO: don\'t need this\n+        name += "/view"\n+\n+    return name, item_url\n+\n+\n+def _is_default_page(container, context):\n+    is_default_page = False\n+    browser_default = IBrowserDefault(container, None)\n+    if browser_default is not None:\n+        is_default_page = browser_default.getDefaultPage() == context.getId()\n+\n+    return is_default_page\n+\n+\n+def getRootPath(context, currentFolderOnly, topLevel, root_path):\n+    """Helper function to calculate the real root path"""\n+    context = aq_inner(context)\n+    if currentFolderOnly:\n+        folderish = getattr(\n+            aq_base(context), "isPrincipiaFolderish", False\n+        ) and not INonStructuralFolder.providedBy(context)\n+        parent = aq_parent(context)\n+\n+        is_default_page = False\n+        browser_default = IBrowserDefault(parent, None)\n+        if browser_default is not None:\n+            is_default_page = browser_default.getDefaultPage() == context.getId()\n+\n+        if not folderish or is_default_page:\n+            return "/".join(parent.getPhysicalPath())\n+        else:\n+            return "/".join(context.getPhysicalPath())\n+\n+    # root = uuidToObject(root)\n+    root = get_root(context, root_path)\n+\n+    if root is not None:\n+        rootPath = "/".join(root.getPhysicalPath())\n+    else:\n+        rootPath = getNavigationRoot(context)\n+\n+    # Adjust for topLevel\n+    if topLevel > 0:\n+        contextPath = "/".join(context.getPhysicalPath())\n+        if not contextPath.startswith(rootPath):\n+            return None\n+        contextSubPathElements = contextPath[len(rootPath) + 1 :]\n+        if contextSubPathElements:\n+            contextSubPathElements = contextSubPathElements.split("/")\n+            if len(contextSubPathElements) < topLevel:\n+                return None\n+            rootPath = rootPath + "/" + "/".join(contextSubPathElements[:topLevel])\n+        else:\n+            return None\n+\n+    return rootPath\n+\n+\n+class Data(UserDict):\n+    def __getattr__(self, name):\n+        return self.data.get(name, None)\n+\n+\n+def extract_data(schema, raw_data, prefix):\n+    data = Data({})\n+\n+    for name in schema.names():\n+        field = schema[name]\n+        raw_value = raw_data.get(prefix + name, field.default)\n+\n+        if isinstance(raw_value, six.string_types):\n+            raw_value = six.ensure_text(raw_value)\n+\n+        value = IFromUnicode(field).fromUnicode(raw_value)\n+        data[name] = value  # convert(raw_value, field)\n+\n+    return data\n+\n+\n+def get_root(context, root_path):\n+    if root_path is None:\n+        return None\n+\n+    urltool = getToolByName(context, "portal_url")\n+    portal = urltool.getPortalObject()\n+    if root_path.startswith("/"):\n+        root_path = root_path[1:]\n+    try:\n+        root = context.restrictedTraverse(\n+            portal.getPhysicalPath() + tuple(root_path.split("/"))\n+        )\n+    except (IndexError, KeyError):\n+        return portal\n+    return root\n+\n+\n+class QueryBuilder(object):\n+    """Build a navtree query based on the settings in INavigationSchema\n+    and those set on the portlet.\n+    """\n+\n+    def __init__(self, context, data):\n+        self.context = context\n+        self.data = data\n+\n+        portal_properties = getToolByName(context, "portal_properties")\n+        navtree_properties = getattr(portal_properties, "navtree_properties")\n+\n+        # Acquire a custom nav query if available\n+        customQuery = getattr(context, "getCustomNavQuery", None)\n+        if customQuery is not None and utils.safe_callable(customQuery):\n+            query = customQuery()\n+        else:\n+            query = {}\n+\n+        # Construct the path query\n+        root = get_root(context, data.root_path)\n+        if root is not None:\n+            rootPath = "/".join(root.getPhysicalPath())\n+        else:\n+            rootPath = getNavigationRoot(context)\n+\n+        currentPath = "/".join(context.getPhysicalPath())\n+\n+        # If we are above the navigation root, a navtree query would return\n+        # nothing (since we explicitly start from the root always). Hence,\n+        # use a regular depth-1 query in this case.\n+\n+        if currentPath != rootPath and not currentPath.startswith(rootPath + "/"):\n+            query["path"] = {"query": rootPath, "depth": 1}\n+        else:\n+            query["path"] = {"query": currentPath, "navtree": 1}\n+\n+        topLevel = data.topLevel\n+        if topLevel and topLevel > 0:\n+            query["path"]["navtree_start"] = topLevel + 1\n+\n+        # XXX: It\'d make sense to use \'depth\' for bottomLevel, but it doesn\'t\n+        # seem to work with EPI.\n+\n+        # Only list the applicable types\n+        query["portal_type"] = utils.typesToList(context)\n+\n+        # Apply the desired sort\n+        sortAttribute = navtree_properties.getProperty("sortAttribute", None)\n+        if sortAttribute is not None:\n+            query["sort_on"] = sortAttribute\n+            sortOrder = navtree_properties.getProperty("sortOrder", None)\n+            if sortOrder is not None:\n+                query["sort_order"] = sortOrder\n+\n+        # Filter on workflow states, if enabled\n+        if IS_PLONE4:\n+            # code copied from plone.app.portlets 2.5.2\n+            if navtree_properties.getProperty("enable_wf_state_filtering", False):\n+                query["review_state"] = navtree_properties.getProperty(\n+                    "wf_states_to_show", ()\n+                )\n+        else:\n+            registry = getUtility(IRegistry)\n+            navigation_settings = registry.forInterface(\n+                INavigationSchema, prefix="plone"\n+            )\n+            if navigation_settings.filter_on_workflow:\n+                query["review_state"] = navigation_settings.workflow_states_to_show\n+\n+        self.query = query\n+\n+    def __call__(self):\n+        return self.query\n+\n+\n+class NavtreeStrategy(SitemapNavtreeStrategy):\n+    """The navtree strategy used for the default navigation portlet"""\n+\n+    viewActionTypes = []  # different from Plone\n+\n+    def __init__(self, context, portlet):\n+        SitemapNavtreeStrategy.__init__(self, context, portlet)\n+\n+        # XXX: We can\'t do this with a \'depth\' query to EPI...\n+        self.bottomLevel = portlet.bottomLevel or 0\n+\n+        self.rootPath = getRootPath(\n+            context, portlet.currentFolderOnly, portlet.topLevel, portlet.root_path\n+        )\n+\n+    def subtreeFilter(self, node):\n+        sitemapDecision = SitemapNavtreeStrategy.subtreeFilter(self, node)\n+        if sitemapDecision is False:\n+            return False\n+        depth = node.get("depth", 0)\n+        if depth > 0 and self.bottomLevel > 0 and depth >= self.bottomLevel:\n+            return False\n+        else:\n+            return True\n+\n+    # def nodeFilter(self, node):\n+    #     exclude = getattr(node["item"], "exclude_from_nav", False)\n+    #     return not exclude\ndiff --git a/src/plone/restapi/tests/http-examples/collection.resp b/src/plone/restapi/tests/http-examples/collection.resp\nindex 1fcb54e50..a4d16b89d 100644\n--- a/src/plone/restapi/tests/http-examples/collection.resp\n+++ b/src/plone/restapi/tests/http-examples/collection.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/collection/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/collection/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\nindex be4fa8a6e..a76630bc3 100644\n--- a/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/collection_fullobjects.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/collection/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/collection/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/collection/@navigation"\n     }, \n@@ -62,6 +65,9 @@ Content-Type: application/json\n         "breadcrumbs": {\n           "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n         }, \n+        "contextnavigation": {\n+          "@id": "http://localhost:55001/plone/front-page/@contextnavigation"\n+        }, \n         "navigation": {\n           "@id": "http://localhost:55001/plone/front-page/@navigation"\n         }, \n@@ -126,6 +132,9 @@ Content-Type: application/json\n         "breadcrumbs": {\n           "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n         }, \n+        "contextnavigation": {\n+          "@id": "http://localhost:55001/plone/doc1/@contextnavigation"\n+        }, \n         "navigation": {\n           "@id": "http://localhost:55001/plone/doc1/@navigation"\n         }, \n@@ -191,6 +200,9 @@ Content-Type: application/json\n         "breadcrumbs": {\n           "@id": "http://localhost:55001/plone/doc2/@breadcrumbs"\n         }, \n+        "contextnavigation": {\n+          "@id": "http://localhost:55001/plone/doc2/@contextnavigation"\n+        }, \n         "navigation": {\n           "@id": "http://localhost:55001/plone/doc2/@navigation"\n         }, \ndiff --git a/src/plone/restapi/tests/http-examples/content_get.resp b/src/plone/restapi/tests/http-examples/content_get.resp\nindex d3c5dc648..a7062bbd2 100644\n--- a/src/plone/restapi/tests/http-examples/content_get.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/folder/my-document/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/content_get_folder.resp b/src/plone/restapi/tests/http-examples/content_get_folder.resp\nindex e26449888..33a6ddd47 100644\n--- a/src/plone/restapi/tests/http-examples/content_get_folder.resp\n+++ b/src/plone/restapi/tests/http-examples/content_get_folder.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/folder/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/content_patch_representation.resp b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\nindex d6122edd3..11294a1d9 100644\n--- a/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n+++ b/src/plone/restapi/tests/http-examples/content_patch_representation.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/folder/my-document/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/content_post.resp b/src/plone/restapi/tests/http-examples/content_post.resp\nindex 97061c8a5..292e1b222 100644\n--- a/src/plone/restapi/tests/http-examples/content_post.resp\n+++ b/src/plone/restapi/tests/http-examples/content_post.resp\n@@ -10,6 +10,9 @@ Location: http://localhost:55001/plone/folder/my-document\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/folder/my-document/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/my-document/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/contextnavigation.req b/src/plone/restapi/tests/http-examples/contextnavigation.req\nnew file mode 100644\nindex 000000000..191c9463c\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/contextnavigation.req\n@@ -0,0 +1,3 @@\n+GET /plone/folder/@contextnavigation HTTP/1.1\n+Accept: application/json\n+Authorization: Basic YWRtaW46c2VjcmV0\ndiff --git a/src/plone/restapi/tests/http-examples/contextnavigation.resp b/src/plone/restapi/tests/http-examples/contextnavigation.resp\nnew file mode 100644\nindex 000000000..e4c2719e9\n--- /dev/null\n+++ b/src/plone/restapi/tests/http-examples/contextnavigation.resp\n@@ -0,0 +1,57 @@\n+HTTP/1.1 200 OK\n+Content-Type: application/json\n+\n+{\n+  "@id": "http://localhost:55001/plone/folder/@contextnavigation", \n+  "available": true, \n+  "has_custom_name": false, \n+  "items": [\n+    {\n+      "@id": "http://localhost:55001/plone/folder/subfolder1", \n+      "description": "", \n+      "href": "http://localhost:55001/plone/folder/subfolder1", \n+      "icon": "", \n+      "is_current": false, \n+      "is_folderish": true, \n+      "is_in_path": false, \n+      "items": [], \n+      "normalized_id": "subfolder1", \n+      "review_state": "private", \n+      "thumb": "", \n+      "title": "SubFolder 1", \n+      "type": "folder"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder/subfolder2", \n+      "description": "", \n+      "href": "http://localhost:55001/plone/folder/subfolder2", \n+      "icon": "", \n+      "is_current": false, \n+      "is_folderish": true, \n+      "is_in_path": false, \n+      "items": [], \n+      "normalized_id": "subfolder2", \n+      "review_state": "private", \n+      "thumb": "", \n+      "title": "SubFolder 2", \n+      "type": "folder"\n+    }, \n+    {\n+      "@id": "http://localhost:55001/plone/folder/doc1", \n+      "description": "", \n+      "href": "http://localhost:55001/plone/folder/doc1", \n+      "icon": "", \n+      "is_current": false, \n+      "is_folderish": false, \n+      "is_in_path": false, \n+      "items": [], \n+      "normalized_id": "doc1", \n+      "review_state": "private", \n+      "thumb": "", \n+      "title": "A document", \n+      "type": "document"\n+    }\n+  ], \n+  "title": "Navigation", \n+  "url": "http://localhost:55001/plone/sitemap"\n+}\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/tests/http-examples/document.resp b/src/plone/restapi/tests/http-examples/document.resp\nindex 1f771c519..af5556736 100644\n--- a/src/plone/restapi/tests/http-examples/document.resp\n+++ b/src/plone/restapi/tests/http-examples/document.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/event.resp b/src/plone/restapi/tests/http-examples/event.resp\nindex d162d0464..20d399b6e 100644\n--- a/src/plone/restapi/tests/http-examples/event.resp\n+++ b/src/plone/restapi/tests/http-examples/event.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/event/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/event/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/event/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/expansion.resp b/src/plone/restapi/tests/http-examples/expansion.resp\nindex 1f771c519..af5556736 100644\n--- a/src/plone/restapi/tests/http-examples/expansion.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/front-page/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded.resp b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\nindex f2e91ba8f..f9599d91b 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded.resp\n@@ -15,6 +15,9 @@ Content-Type: application/json\n         }\n       ]\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\nindex a4c51b367..c56156878 100644\n--- a/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n+++ b/src/plone/restapi/tests/http-examples/expansion_expanded_full.resp\n@@ -115,6 +115,9 @@ Content-Type: application/json\n         }\n       ]\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/front-page/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/front-page/@navigation", \n       "items": [\ndiff --git a/src/plone/restapi/tests/http-examples/file.resp b/src/plone/restapi/tests/http-examples/file.resp\nindex 7c4ed2420..6fdf2bb18 100644\n--- a/src/plone/restapi/tests/http-examples/file.resp\n+++ b/src/plone/restapi/tests/http-examples/file.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/file/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/file/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/file/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/folder.resp b/src/plone/restapi/tests/http-examples/folder.resp\nindex 66cfba52d..8129a44f9 100644\n--- a/src/plone/restapi/tests/http-examples/folder.resp\n+++ b/src/plone/restapi/tests/http-examples/folder.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/folder/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/folder/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/folder/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/image.resp b/src/plone/restapi/tests/http-examples/image.resp\nindex 10f4fd423..badb901cb 100644\n--- a/src/plone/restapi/tests/http-examples/image.resp\n+++ b/src/plone/restapi/tests/http-examples/image.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/image/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/image/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/image/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\nindex bd067536e..b178df6e3 100644\n--- a/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n+++ b/src/plone/restapi/tests/http-examples/jwt_logged_in.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/@navigation"\n     }\ndiff --git a/src/plone/restapi/tests/http-examples/link.resp b/src/plone/restapi/tests/http-examples/link.resp\nindex 71815d337..238f455b0 100644\n--- a/src/plone/restapi/tests/http-examples/link.resp\n+++ b/src/plone/restapi/tests/http-examples/link.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/link/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/link/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/link/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/newsitem.resp b/src/plone/restapi/tests/http-examples/newsitem.resp\nindex 391a125e1..c23d01b44 100644\n--- a/src/plone/restapi/tests/http-examples/newsitem.resp\n+++ b/src/plone/restapi/tests/http-examples/newsitem.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/newsitem/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/newsitem/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/newsitem/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/http-examples/search_fullobjects.resp b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\nindex 0a45147b3..36f39b499 100644\n--- a/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n+++ b/src/plone/restapi/tests/http-examples/search_fullobjects.resp\n@@ -12,6 +12,9 @@ Content-Type: application/json\n         "breadcrumbs": {\n           "@id": "http://localhost:55001/plone/doc1/@breadcrumbs"\n         }, \n+        "contextnavigation": {\n+          "@id": "http://localhost:55001/plone/doc1/@contextnavigation"\n+        }, \n         "navigation": {\n           "@id": "http://localhost:55001/plone/doc1/@navigation"\n         }, \ndiff --git a/src/plone/restapi/tests/http-examples/siteroot.resp b/src/plone/restapi/tests/http-examples/siteroot.resp\nindex e7ef979f6..3f00c70eb 100644\n--- a/src/plone/restapi/tests/http-examples/siteroot.resp\n+++ b/src/plone/restapi/tests/http-examples/siteroot.resp\n@@ -9,6 +9,9 @@ Content-Type: application/json\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/@navigation"\n     }\ndiff --git a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\nindex d29a99602..410f7574c 100644\n--- a/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n+++ b/src/plone/restapi/tests/http-examples/translations_link_on_post.resp\n@@ -10,6 +10,9 @@ Location: http://localhost:55001/plone/de/mydocument\n     "breadcrumbs": {\n       "@id": "http://localhost:55001/plone/de/mydocument/@breadcrumbs"\n     }, \n+    "contextnavigation": {\n+      "@id": "http://localhost:55001/plone/de/mydocument/@contextnavigation"\n+    }, \n     "navigation": {\n       "@id": "http://localhost:55001/plone/de/mydocument/@navigation"\n     }, \ndiff --git a/src/plone/restapi/tests/test_documentation.py b/src/plone/restapi/tests/test_documentation.py\nindex 1c2e9a4de..94844fe95 100644\n--- a/src/plone/restapi/tests/test_documentation.py\n+++ b/src/plone/restapi/tests/test_documentation.py\n@@ -32,8 +32,8 @@\n from six.moves import range\n from zope.component import createObject\n from zope.component import getUtility\n-from zope.interface import alsoProvides\n from zope.component.hooks import getSite\n+from zope.interface import alsoProvides\n \n import collections\n import json\n@@ -1185,6 +1185,35 @@ def test_documentation_navigation_tree(self):\n         )\n         save_request_and_response_for_docs("navigation_tree", response)\n \n+    def test_documentation_contextnavigation(self):\n+        folder = createContentInContainer(\n+            self.portal, u"Folder", id=u"folder", title=u"Some Folder"\n+        )\n+        createContentInContainer(\n+            self.portal, u"Folder", id=u"folder2", title=u"Some Folder 2"\n+        )\n+        subfolder1 = createContentInContainer(\n+            folder, u"Folder", id=u"subfolder1", title=u"SubFolder 1"\n+        )\n+        createContentInContainer(\n+            folder, u"Folder", id=u"subfolder2", title=u"SubFolder 2"\n+        )\n+        thirdlevelfolder = createContentInContainer(\n+            subfolder1, u"Folder", id=u"thirdlevelfolder", title=u"Third Level Folder"\n+        )\n+        createContentInContainer(\n+            thirdlevelfolder,\n+            u"Folder",\n+            id=u"fourthlevelfolder",\n+            title=u"Fourth Level Folder",\n+        )\n+        createContentInContainer(folder, u"Document", id=u"doc1", title=u"A document")\n+        transaction.commit()\n+        response = self.api_session.get(\n+            "{}/folder/@contextnavigation".format(self.portal.absolute_url())\n+        )\n+        save_request_and_response_for_docs("contextnavigation", response)\n+\n     def test_documentation_principals(self):\n         gtool = api.portal.get_tool("portal_groups")\n         properties = {\ndiff --git a/src/plone/restapi/tests/test_services_contextnavigation.py b/src/plone/restapi/tests/test_services_contextnavigation.py\nnew file mode 100644\nindex 000000000..c8fef58ae\n--- /dev/null\n+++ b/src/plone/restapi/tests/test_services_contextnavigation.py\n@@ -0,0 +1,983 @@\n+# -*- coding: utf-8 -*-\n+\n+from plone.app.layout.navigation.interfaces import INavigationRoot\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n+from plone.registry.interfaces import IRegistry\n+from plone.restapi.services.contextnavigation.get import ContextNavigation\n+from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+from plone.restapi.testing import RelativeSession\n+from Products.CMFPlone.tests import dummy\n+from six.moves.urllib.parse import urlencode\n+from zope.component import getUtility\n+from zope.interface import directlyProvides\n+from zope.interface import noLongerProvides\n+\n+import transaction\n+import unittest\n+\n+\n+def opts(**kw):\n+    res = {}\n+    for k, v in kw.items():\n+        res["expand.contextnavigation." + k] = v\n+\n+    return res\n+\n+\n+class TestServicesContextNavigation(unittest.TestCase):\n+\n+    layer = PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        self.api_session = RelativeSession(self.portal_url)\n+        self.api_session.headers.update({"Accept": "application/json"})\n+        self.api_session.auth = (SITE_OWNER_NAME, SITE_OWNER_PASSWORD)\n+\n+        self.populateSite()\n+        transaction.commit()\n+\n+    def tearDown(self):\n+        self.api_session.close()\n+\n+    def populateSite(self):\n+        """\n+        Portal\n+        +-doc1\n+        +-doc2\n+        +-doc3\n+        +-folder1\n+          +-doc11\n+          +-doc12\n+          +-doc13\n+        +-link1\n+        +-folder2\n+          +-doc21\n+          +-doc22\n+          +-doc23\n+          +-file21\n+          +-folder21\n+            +-doc211\n+            +-doc212\n+        """\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+        if "Members" in self.portal:\n+            self.portal._delObject("Members")\n+            self.folder = None\n+        if "news" in self.portal:\n+            self.portal._delObject("news")\n+        if "events" in self.portal:\n+            self.portal._delObject("events")\n+        if "front-page" in self.portal:\n+            self.portal._delObject("front-page")\n+        if "folder" in self.portal:\n+            self.portal._delObject("folder")\n+        if "users" in self.portal:\n+            self.portal._delObject("users")\n+\n+        self.portal.invokeFactory("Document", "doc1")\n+        self.portal.invokeFactory("Document", "doc2")\n+        self.portal.invokeFactory("Document", "doc3")\n+        self.portal.invokeFactory("Folder", "folder1")\n+        self.portal.invokeFactory("Link", "link1")\n+        self.portal.link1.remoteUrl = "http://plone.org"\n+        self.portal.link1.reindexObject()\n+        folder1 = getattr(self.portal, "folder1")\n+        folder1.invokeFactory("Document", "doc11")\n+        folder1.invokeFactory("Document", "doc12")\n+        folder1.invokeFactory("Document", "doc13")\n+        self.portal.invokeFactory("Folder", "folder2")\n+        folder2 = getattr(self.portal, "folder2")\n+        folder2.invokeFactory("Document", "doc21")\n+        folder2.invokeFactory("Document", "doc22")\n+        folder2.invokeFactory("Document", "doc23")\n+        folder2.invokeFactory("File", "file21")\n+        folder2.invokeFactory("Folder", "folder21")\n+        folder21 = getattr(folder2, "folder21")\n+        folder21.invokeFactory("Document", "doc211")\n+        folder21.invokeFactory("Document", "doc212")\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+\n+    def renderer(self, context=None, data=None):\n+        context = context or self.portal\n+        request = self.layer["request"]\n+        request.form.update(data or {})\n+        return ContextNavigation(context, request)\n+\n+    def test_contextnavigation_with_no_params_gets_only_top_level(self):\n+        response = self.api_session.get("/folder1/@contextnavigation")\n+\n+        self.assertEqual(response.status_code, 200)\n+        base = self.portal.absolute_url()\n+\n+        res = {\n+            "@id": "%s/folder1/@contextnavigation" % base,\n+            "has_custom_name": False,\n+            "available": True,\n+            "items": [\n+                {\n+                    "@id": "%s/folder1/doc11" % base,\n+                    "description": "",\n+                    "href": "%s/folder1/doc11" % base,\n+                    "icon": "",\n+                    "is_current": False,\n+                    "is_folderish": False,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "doc11",\n+                    "review_state": "private",\n+                    "thumb": "",\n+                    "title": "doc11",\n+                    "type": "document",\n+                },\n+                {\n+                    "@id": "%s/folder1/doc12" % base,\n+                    "description": "",\n+                    "href": "%s/folder1/doc12" % base,\n+                    "icon": "",\n+                    "is_current": False,\n+                    "is_folderish": False,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "doc12",\n+                    "review_state": "private",\n+                    "thumb": "",\n+                    "title": "doc12",\n+                    "type": "document",\n+                },\n+                {\n+                    "@id": "%s/folder1/doc13" % base,\n+                    "description": "",\n+                    "href": "%s/folder1/doc13" % base,\n+                    "icon": "",\n+                    "is_current": False,\n+                    "is_folderish": False,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "doc13",\n+                    "review_state": "private",\n+                    "thumb": "",\n+                    "title": "doc13",\n+                    "type": "document",\n+                },\n+            ],\n+            "title": "Navigation",\n+            "url": "%s/sitemap" % base,\n+        }\n+\n+        self.assertEqual(\n+            response.json(),\n+            res,\n+        )\n+\n+    def test_contextnavigation_with_no_params_gets_only_top_level_mixed_content(self):\n+        # With the context set to folder2 it should return a dict with\n+        # currentItem set to True\n+        response = self.api_session.get("/folder2/@contextnavigation")\n+        self.assertEqual(response.status_code, 200)\n+        base = self.portal.absolute_url()\n+\n+        res = {\n+            "@id": "%s/folder2/@contextnavigation" % base,\n+            "has_custom_name": False,\n+            "available": True,\n+            "items": [\n+                {\n+                    "@id": "%s/folder2/doc21" % base,\n+                    "description": "",\n+                    "href": "%s/folder2/doc21" % base,\n+                    "icon": "",\n+                    "is_current": False,\n+                    "is_folderish": False,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "doc21",\n+                    "review_state": "private",\n+                    "thumb": "",\n+                    "title": "doc21",\n+                    "type": "document",\n+                },\n+                {\n+                    "@id": "%s/folder2/doc22" % base,\n+                    "description": "",\n+                    "href": "%s/folder2/doc22" % base,\n+                    "icon": "",\n+                    "is_current": False,\n+                    "is_folderish": False,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "doc22",\n+                    "review_state": "private",\n+                    "thumb": "",\n+                    "title": "doc22",\n+                    "type": "document",\n+                },\n+                {\n+                    "@id": "%s/folder2/doc23" % base,\n+                    "description": "",\n+                    "href": "%s/folder2/doc23" % base,\n+                    "icon": "",\n+                    "is_current": False,\n+                    "is_folderish": False,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "doc23",\n+                    "review_state": "private",\n+                    "thumb": "",\n+                    "title": "doc23",\n+                    "type": "document",\n+                },\n+                {\n+                    "@id": "%s/folder2/file21/view" % base,\n+                    "description": "",\n+                    "href": "%s/folder2/file21/view" % base,\n+                    "icon": None,\n+                    "is_current": False,\n+                    "is_folderish": False,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "file21",\n+                    "review_state": "",\n+                    "thumb": "",\n+                    "title": "file21",\n+                    "type": "file",\n+                },\n+                {\n+                    "@id": "%s/folder2/folder21" % base,\n+                    "description": "",\n+                    "href": "%s/folder2/folder21" % base,\n+                    "icon": "",\n+                    "is_current": False,\n+                    "is_folderish": True,\n+                    "is_in_path": False,\n+                    "items": [],\n+                    "normalized_id": "folder21",\n+                    "review_state": "private",\n+                    "thumb": "",\n+                    "title": "folder21",\n+                    "type": "folder",\n+                },\n+            ],\n+            "title": "Navigation",\n+            "url": "%s/sitemap" % base,\n+        }\n+        self.assertEqual(\n+            response.json(),\n+            res,\n+        )\n+\n+        # self.assertTrue(tree)\n+        # self.assertEqual(tree["children"][-1]["currentItem"], True)\n+\n+    def testHeadingLinkRooted(self):\n+        """\n+        See that heading link points to a content item if root selected,\n+        otherwise sitemap.\n+        """\n+\n+        q = {\n+            "expand.contextnavigation.topLevel": 0,\n+            "expand.contextnavigation.root_path": "/".join(\n+                self.portal.folder2.getPhysicalPath()[2:]\n+            ),\n+        }\n+        qs = urlencode(q)\n+\n+        response = self.api_session.get("/folder2/@contextnavigation?{}".format(qs))\n+        self.assertEqual(response.status_code, 200)\n+        res = response.json()\n+        base = self.portal.absolute_url()\n+        self.assertEqual(res["url"], "%s/folder2" % base)\n+\n+    def testHeadingLinkRootedItemGone(self):\n+        """\n+        See that heading link points to a content item which do not exist\n+        """\n+        response = self.api_session.get(\n+            "/folder2/@contextnavigation",\n+            params={\n+                "expand.contextnavigation.topLevel": 0,\n+                "expand.contextnavigation.root_path": "/does/not/exist",\n+            },\n+        )\n+        res = response.json()\n+        # Points to the site root if the item is gone\n+        base = self.portal.absolute_url()\n+        self.assertEqual(res["url"], "%s/sitemap" % base)\n+\n+    def testHeadingLinkRootless(self):\n+        """\n+        See that heading link points to a global sitemap if no root item is set.\n+        """\n+        base = self.portal.absolute_url()\n+\n+        directlyProvides(self.portal.folder2, INavigationRoot)\n+        transaction.commit()\n+        response = self.api_session.get(\n+            "/folder2/@contextnavigation",\n+            params={"expand.contextnavigation.topLevel": 0},\n+        )\n+        link = response.json()["url"]\n+        # The root is not given -> should render the sitemap in the navigation root\n+        base = self.portal.absolute_url()\n+        self.assertEqual(link, "%s/folder2/sitemap" % base)\n+\n+        # # Even if the assignment contains no topLevel options and no self.root\n+        # # one should get link to the navigation root sitemap\n+        # view = self.renderer(\n+        #     self.portal.folder2.doc21, assignment=navigation.Assignment()\n+        # )\n+        response = self.api_session.get(\n+            "/folder2/doc21/@contextnavigation",\n+            params={},\n+        )\n+        link = response.json()["url"]\n+        # # The root is not given -> should render the sitemap in the navigation root\n+        self.assertEqual(link, "%s/folder2/sitemap" % base)\n+\n+        response = self.api_session.get(\n+            "/folder1/@contextnavigation",\n+            params={"expand.contextnavigation.topLevel": 0},\n+        )\n+        link = response.json()["url"]\n+        # The root is not given -> should render the sitemap in the navigation root\n+        self.assertEqual(link, "%s/sitemap" % base)\n+\n+        noLongerProvides(self.portal.folder2, INavigationRoot)\n+        transaction.commit()\n+\n+    def testNavTreeExcludesItemsWithExcludeProperty(self):\n+        # Make sure that items with the exclude_from_nav property set get\n+        # no_display set to True\n+        base = self.portal.absolute_url()\n+\n+        self.portal.folder2.exclude_from_nav = True\n+        self.portal.folder2.reindexObject()\n+\n+        transaction.commit()\n+\n+        response = self.api_session.get(\n+            "@contextnavigation",\n+            params={\n+                "expand.contextnavigation.includeTop": True,\n+                "expand.contextnavigation.topLevel": 0,\n+                "expand.contextnavigation.bottomLevel": 0,\n+            },\n+        )\n+        tree = response.json()\n+\n+        for c in tree["items"]:\n+            if c["href"] == "%s/folder2" % base:\n+                self.fail()\n+\n+        self.portal.folder2.exclude_from_nav = False\n+        self.portal.folder2.reindexObject()\n+        transaction.commit()\n+\n+    def testNavTreeExcludesDefaultPage(self):\n+        # Make sure that items which are the default page are excluded\n+        base = self.portal.absolute_url()\n+        response = self.api_session.get(\n+            "/folder2/@contextnavigation",\n+            params={},\n+        )\n+        tree = response.json()\n+        self.assertTrue(\n+            [\n+                item\n+                for item in tree["items"]\n+                if item["href"] == "%s/folder2/doc21" % base\n+            ]\n+        )\n+\n+        self.portal.folder2.setDefaultPage("doc21")\n+        transaction.commit()\n+\n+        response = self.api_session.get(\n+            "/folder2/@contextnavigation",\n+            params={},\n+        )\n+        tree = response.json()\n+        self.assertFalse(\n+            [\n+                item\n+                for item in tree["items"]\n+                if item["href"] == "%s/folder2/doc21" % base\n+            ]\n+        )\n+\n+        self.portal.folder2.setDefaultPage(None)\n+        transaction.commit()\n+\n+    def testPortletsTitle(self):\n+        """If portlet\'s name is not explicitely specified we show\n+        default fallback \'Navigation\', translate it and hide it\n+        with CSS."""\n+        response = self.api_session.get(\n+            "/@contextnavigation",\n+            params={},\n+        )\n+        tree = response.json()\n+        self.assertEqual(tree["title"], "Navigation")\n+\n+        response = self.api_session.get(\n+            "/@contextnavigation",\n+            params={"expand.contextnavigation.name": "New navigation title"},\n+        )\n+        tree = response.json()\n+        self.assertEqual(tree["title"], "New navigation title")\n+\n+    def testTopLevelTooDeep(self):\n+\n+        view = self.renderer(self.portal, opts(topLevel=5))\n+        tree = view(expand=True)\n+\n+        self.assertEqual(len(tree["contextnavigation"]["items"]), 0)\n+\n+    def testShowAllParentsOverridesNavTreeExcludesItemsWithExcludeProperty(self):\n+        # Make sure that items whose ids are in the idsNotToList navTree\n+        # property are not included\n+        self.portal.folder2.exclude_from_nav = True\n+        self.portal.folder2.reindexObject()\n+        view = self.renderer(\n+            self.portal.folder2.doc21, opts(includeTop=True, topLevel=0)\n+        )\n+        tree = view(expand=True)\n+\n+        found = False\n+        base = self.portal.absolute_url()\n+\n+        for c in tree["contextnavigation"]["items"]:\n+            if c["href"] == "%s/folder2" % base:\n+                found = True\n+                break\n+\n+        self.assertTrue(found)\n+\n+    # # this test is not needed, we don\'t expose show_children\n+    # def testNavTreeMarksParentMetaTypesNotToQuery(self):\n+    #     # Make sure that items whose ids are in the idsNotToList navTree\n+    #     # property get no_display set to True\n+    #     view = self.renderer(self.portal.folder2.file21)\n+    #     tree = view(expand=True)\n+    #\n+    #     self.assertEqual(tree["contextnavigation"]["items"][-1]["show_children"], True)\n+    #\n+    #     registry = self.portal.portal_registry\n+    #     registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+    #\n+    #     view = self.renderer(self.portal.folder2.file21)\n+    #     tree = view(expand=True)\n+    #\n+    #     self.assertEqual(tree["contextnavigation"]["items"][-1]["show_children"], False)\n+\n+    def testCreateNavTreeWithLink(self):\n+        view = self.renderer(self.portal)\n+        tree = view(expand=True)["contextnavigation"]\n+\n+        for child in tree["items"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n+                # as Creator, link1 should not use the remote Url\n+                self.assertFalse(child["useRemoteUrl"])\n+\n+        self.portal.link1.setCreators(["some_other_user"])\n+        self.portal.link1.reindexObject()\n+        view = self.renderer(self.portal)\n+        tree = view(expand=True)["contextnavigation"]\n+\n+        for child in tree["items"]:\n+            if child["portal_type"] != "Link":\n+                self.assertFalse(child["getRemoteUrl"])\n+            if child["Title"] == "link1":\n+                self.assertEqual(child["getRemoteUrl"], "http://plone.org")\n+                # as non-Creator user, link1 should use the remote Url\n+                self.assertTrue(child["useRemoteUrl"])\n+\n+    def testNonStructuralFolderHidesChildren(self):\n+        base = self.portal.absolute_url()\n+        # Make sure NonStructuralFolders act as if parent_types_not_to_query\n+        # is set.\n+        f = dummy.NonStructuralFolder("ns_folder")\n+        self.portal.folder1._setObject("ns_folder", f)\n+        self.portal.portal_catalog.reindexObject(self.portal.folder1.ns_folder)\n+        self.portal.portal_catalog.reindexObject(self.portal.folder1)\n+        view = self.renderer(\n+            self.portal.folder1.ns_folder, opts(includeTop=True, topLevel=0)\n+        )\n+        tree = view.getNavTree()\n+        self.assertEqual(\n+            tree["items"][3]["items"][3]["href"],\n+            "%s/folder1/ns_folder" % base,\n+        )\n+        self.assertEqual(len(tree["items"][3]["items"][3]["items"]), 0)\n+\n+    def testTopLevel(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(self.portal.folder2.file21, opts(topLevel=1))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+\n+        self.assertEqual(\n+            tree["items"][-1]["href"],\n+            "%s/folder2/folder21" % base,\n+        )\n+\n+    def testTopLevelWithContextAboveLevel(self):\n+        view = self.renderer(self.portal, opts(topLevel=1))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(len(tree["items"]), 0)\n+\n+    def testIncludeTopWithoutNavigationRoot(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            opts(topLevel=0, root_path=None, includeTop=True),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(len(tree["items"]), 6)\n+\n+        # self.assertTrue(view.root_is_portal())\n+        self.assertEqual(tree["url"], "%s/sitemap" % base)\n+\n+    def testTopLevelWithNavigationRoot(self):\n+        base = self.portal.absolute_url()\n+        # self.portal.folder2.invokeFactory("Folder", "folder21")\n+        # self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            opts(\n+                topLevel=1,\n+                root_path=u"/folder2"\n+                # self.portal.folder2.UID()\n+            ),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(len(tree["items"]), 2)\n+        self.assertEqual(\n+            tree["items"][0]["href"],\n+            "%s/folder2/folder21/doc211" % base,\n+        )\n+\n+    def testMultipleTopLevelWithNavigationRoot(self):\n+        # See bug 9405\n+        # http://dev.plone.org/plone/ticket/9405\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.portal.invokeFactory("Folder", "abc")\n+        self.portal.invokeFactory("Folder", "abcde")\n+        self.portal.abc.invokeFactory("Folder", "down_abc")\n+        self.portal.abcde.invokeFactory("Folder", "down_abcde")\n+\n+        view1 = self.renderer(\n+            self.portal.abc,\n+            opts(topLevel=0, root_path=u"/abc"),\n+        )\n+        view2 = self.renderer(\n+            self.portal.abc,\n+            opts(topLevel=0, root_path=u"/abcde"),\n+        )\n+\n+        tree1 = view1.getNavTree()\n+        tree2 = view2.getNavTree()\n+        self.assertEqual(len(tree1["items"]), 1)\n+        self.assertEqual(len(tree2["items"]), 1)\n+\n+        view1 = self.renderer(\n+            self.portal.abcde,\n+            opts(topLevel=0, root_path=u"/abc"),\n+        )\n+\n+        view2 = self.renderer(\n+            self.portal.abcde,\n+            opts(topLevel=0, root_path=u"/abcde"),\n+        )\n+\n+        tree1 = view1.getNavTree()\n+        tree2 = view2.getNavTree()\n+\n+        self.assertEqual(len(tree2["items"]), 1)\n+        self.assertEqual(len(tree1["items"]), 1)\n+\n+    def testShowAllParentsOverridesBottomLevel(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            opts(bottomLevel=1, topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        # Note: showAllParents makes sure we actually return items on the,\n+        # path to the context, but the portlet will not display anything\n+        # below bottomLevel.\n+        self.assertEqual(tree["items"][-1]["href"], "%s/folder2" % base)\n+        # self.assertEqual(len(tree["items"][-1]["items"]), 1)\n+        # self.assertEqual(\n+        #     tree["items"][-1]["items"][0]["href"],\n+        #     "http://localhost:55001/plone/folder2/file21",\n+        # )\n+\n+    def testBottomLevelStopsAtFolder(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder2,\n+            opts(bottomLevel=1, topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(tree["items"][-1]["href"], "%s/folder2" % base)\n+        self.assertEqual(len(tree["items"][-1]["items"]), 0)\n+\n+    def testBottomLevelZeroNoLimit(self):\n+        """Test that bottomLevel=0 means no limit for bottomLevel."""\n+        base = self.portal.absolute_url()\n+\n+        # first we set a high integer as bottomLevel to simulate "no limit"\n+        view = self.renderer(\n+            self.portal.folder2,\n+            opts(bottomLevel=99, topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+\n+        self.assertEqual(\n+            tree["items"][-1]["items"][0]["href"],\n+            "%s/folder2/doc21" % base,\n+        )\n+\n+        # now set bottomLevel to 0 -> outcome should be the same\n+        view = self.renderer(\n+            self.portal.folder2,\n+            opts(bottomLevel=0, topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(\n+            tree["items"][-1]["items"][0]["href"],\n+            "%s/folder2/doc21" % base,\n+        )\n+\n+    def testBottomLevelZeroNoLimitRendering(self):\n+        """Test that bottomLevel=0 means no limit for bottomLevel."""\n+\n+        # first we set a high integer as bottomLevel to simulate "no limit"\n+        view = self.renderer(\n+            self.portal.folder2,\n+            opts(bottomLevel=99, topLevel=0),\n+        )\n+        a = view(expand=True)\n+\n+        # now set bottomLevel to 0 -> outcome should be the same\n+        view = self.renderer(\n+            self.portal.folder2,\n+            opts(bottomLevel=0, topLevel=0),\n+        )\n+        b = view(expand=True)\n+\n+        self.assertEqual(a, b)\n+\n+    def testNavRootWithUnicodeNavigationRoot(self):\n+        # self.portal.folder2.invokeFactory("Folder", "folder21")\n+        # self.portal.folder2.folder21.invokeFactory("Document", "doc211")\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            opts(\n+                topLevel=1,\n+                root_path=u"/folder2",\n+            ),\n+        )\n+        tree = view.getNavTree()\n+        self.assertEqual(tree["url"], "%s/folder2/folder21" % base)\n+\n+    def testNoRootSet(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            opts(root_path=u"", topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(tree["items"][-1]["href"], "%s/folder2" % base)\n+\n+    def testRootIsNotPortal(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            opts(root_path=u"/folder2", topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(tree["items"][0]["href"], "%s/folder2/doc21" % base)\n+\n+    def testRootDoesNotExist(self):\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            opts(root_path=u"DOESNT_EXIST", topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(len(tree["items"]), 6)\n+\n+    def testAboveRoot(self):\n+        base = self.portal.absolute_url()\n+        try:\n+            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n+        except ImportError:\n+            return  # skip test in Plone 4\n+\n+        registry = getUtility(IRegistry)\n+        registry["plone.root"] = u"/folder2"\n+        view = self.renderer(self.portal, opts(topLevel=0))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(tree["items"][0]["href"], "%s/folder2/doc21" % base)\n+\n+    def testOutsideRoot(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder1,\n+            opts(root_path=u"/folder2", topLevel=0),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(tree["items"][0]["href"], "%s/folder2/doc21" % base)\n+\n+    def testRootIsCurrent(self):\n+        base = self.portal.absolute_url()\n+        view = self.renderer(\n+            self.portal.folder2,\n+            opts(currentFolderOnly=True),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(tree["items"][0]["href"], "%s/folder2/doc21" % base)\n+\n+    def testRootIsCurrentWithFolderishDefaultPage(self):\n+        # self.portal.folder2.invokeFactory("Folder", "folder21")\n+        base = self.portal.absolute_url()\n+        self.portal.folder2.setDefaultPage("folder21")\n+\n+        view = self.renderer(\n+            self.portal.folder2.folder21,\n+            opts(currentFolderOnly=True),\n+        )\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(tree["items"][0]["href"], "%s/folder2/doc21" % base)\n+\n+    def testCustomQuery(self):\n+        # Try a custom query script for the navtree that returns only published\n+        # objects\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        workflow = self.portal.portal_workflow\n+        factory = self.portal.manage_addProduct["PythonScripts"]\n+        factory.manage_addPythonScript("getCustomNavQuery")\n+        script = self.portal.getCustomNavQuery\n+        script.ZPythonScript_edit("", \'return {"review_state": "published"}\')\n+\n+        self.assertEqual(self.portal.getCustomNavQuery(), {"review_state": "published"})\n+\n+        view = self.renderer(self.portal.folder2, opts(topLevel=0))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertTrue("items" in tree)\n+\n+        # Should only contain current object\n+        self.assertEqual(len(tree["items"]), 1)  # different\n+\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n+        self.portal.folder1.reindexObject()\n+\n+        view = self.renderer(self.portal.folder2, opts(topLevel=0))\n+        tree = view.getNavTree()\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["items"]), 2)\n+\n+    def testStateFiltering(self):\n+        # Test Navtree workflow state filtering\n+\n+        try:\n+            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n+        except ImportError:\n+            return  # skip test in Plone 4\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        registry = getUtility(IRegistry)\n+        navigation_settings = registry.forInterface(INavigationSchema, prefix="plone")\n+        workflow = self.portal.portal_workflow\n+        navigation_settings.workflow_states_to_show = ("published",)\n+        navigation_settings.filter_on_workflow = True\n+\n+        view = self.renderer(self.portal.folder2, opts(topLevel=0))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertTrue("items" in tree)\n+\n+        # Should only contain current object\n+        self.assertEqual(len(tree["items"]), 1)\n+\n+        # change workflow for folder1\n+        workflow.doActionFor(self.portal.folder1, "publish")\n+        self.portal.folder1.reindexObject()\n+        view = self.renderer(self.portal.folder2, opts(topLevel=0))\n+        tree = view.getNavTree()\n+\n+        # Should only contain current object and published folder\n+        self.assertEqual(len(tree["items"]), 2)\n+\n+    def testPrunedRootNode(self):\n+        try:\n+            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n+        except ImportError:\n+            return  # skip test in Plone 4\n+\n+        # This test has been changed to conform to reality\n+        registry = self.portal.portal_registry\n+        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+\n+        view = self.renderer(self.portal.folder1, opts(topLevel=0))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(len(tree["items"][4]["items"]), 0)\n+\n+    def testPrunedRootNodeShowsAllParents(self):\n+        try:\n+            from Products.CMFPlone.interfaces import INavigationSchema  # noqa\n+        except ImportError:\n+            return  # skip test in Plone 4\n+\n+        registry = self.portal.portal_registry\n+        registry["plone.parent_types_not_to_query"] = [u"Folder"]\n+\n+        view = self.renderer(self.portal.folder1.doc11, opts(topLevel=1))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+        self.assertEqual(len(tree["items"]), 1)\n+        self.assertTrue(tree["items"][0]["href"].endswith("/plone/folder1/doc11"))\n+\n+    def testIsCurrentParentWithOverlapingNames(self):\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Manager",\n+            ],\n+        )\n+        self.portal.invokeFactory("Folder", "folder2x")\n+        self.portal.folder2x.invokeFactory("Document", "doc2x1")\n+        setRoles(\n+            self.portal,\n+            TEST_USER_ID,\n+            [\n+                "Member",\n+            ],\n+        )\n+        view = self.renderer(self.portal.folder2x.doc2x1, opts(topLevel=0))\n+        tree = view.getNavTree()\n+        self.assertTrue(tree)\n+\n+        folder2x_node = [\n+            n for n in tree["items"] if n["href"].endswith("/plone/folder2x")\n+        ][0]\n+        self.assertTrue(folder2x_node["is_in_path"])\n+\n+        folder2_node = [\n+            n for n in tree["items"] if n["href"].endswith("/plone/folder2")\n+        ][0]\n+        self.assertFalse(folder2_node["is_in_path"])\n+\n+    def testPortletNotDisplayedOnINavigationRoot(self):\n+        """test that navigation portlet does not show on INavigationRoot\n+        folder\n+        """\n+        self.assertFalse(INavigationRoot.providedBy(self.portal.folder1))\n+\n+        # make folder1 as navigation root\n+        directlyProvides(self.portal.folder1, INavigationRoot)\n+        self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n+\n+        # add nested subfolder in folder1\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n+\n+        # make a navigation portlet\n+        view = self.renderer(self.portal.folder1, opts(bottomLevel=0, topLevel=1))\n+        tree = view(expand=True)\n+        self.assertTrue(tree)\n+        # check there is no portlet\n+        self.assertFalse(tree["contextnavigation"]["items"])\n+\n+    def testINavigationRootWithRelativeRootSet(self):\n+        """test that navigation portlet uses relative root set by user\n+        even in INavigationRoot case.\n+        """\n+        self.assertFalse(INavigationRoot.providedBy(self.portal.folder1))\n+\n+        # make folder1 as navigation root\n+        directlyProvides(self.portal.folder1, INavigationRoot)\n+        self.assertTrue(INavigationRoot.providedBy(self.portal.folder1))\n+\n+        # add two nested subfolders in folder1\n+        self.portal.folder1.invokeFactory("Folder", "folder1_1")\n+        self.portal.folder1.folder1_1.invokeFactory("Folder", "folder1_1_1")\n+\n+        # make a navigation portlet with navigation root set\n+        view = self.renderer(\n+            self.portal.folder1.folder1_1,\n+            opts(bottomLevel=0, topLevel=0, root_path=u"/folder1/folder1_1"),\n+        )\n+        tree = view(expand=True)["contextnavigation"]\n+\n+        # check there is a portlet\n+        self.assertTrue(tree["items"])\n+\n+        # check that portlet root is actually the one specified\n+        self.assertTrue(tree["url"].endswith("/plone/folder1/folder1_1"))\n+\n+        # check that portlet tree actually includes children\n+        self.assertEqual(len(tree["items"]), 1)\n+        self.assertTrue(\n+            tree["items"][0]["href"].endswith(\n+                "/plone/folder1/folder1_1/folder1_1_1",\n+            )\n+        )\n+\n+    def testServiceId(self):\n+        view = self.renderer(\n+            self.portal.folder2.file21,\n+            opts(root_path=u"", topLevel=0),\n+        )\n+        portlet = view(expand=True)\n+\n+        self.assertTrue(\n+            portlet["contextnavigation"]["@id"].endswith(\n+                "/plone/folder2/file21/@contextnavigation",\n+            )\n+        )\n+        portlet = view(expand=False)\n+        self.assertEqual(len(portlet["contextnavigation"]), 1)\n+\n+    def testContextNavigation(self):\n+        response = self.api_session.get("/folder1?expand=contextnavigation")\n+        res = response.json()\n+        self.assertTrue(\n+            res["@components"]["contextnavigation"]["items"][0]["@id"].endswith(\n+                "/plone/folder1/doc11",\n+            )\n+        )\n'

