Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-14T19:43:02+02:00
Author: Carsten Senger (csenger) <senger@rehfisch.de>
Commit: https://github.com/plone/plone.restapi/commit/bf5a0fd12a76e24bb770925a1abe6551de21235a

Use download link for file links in blocks (#931)

* Use download link for file links in blocks

https://github.com/plone/plone.restapi/issues/930

* black

Co-authored-by: Timo Stollenwerk &lt;stollenwerk@kitconcept.com&gt;

Files changed:
A news/930.feature
M src/plone/restapi/interfaces.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/dxcontent.py
M src/plone/restapi/tests/test_resolveuid.py

b'diff --git a/news/930.feature b/news/930.feature\nnew file mode 100644\nindex 000000000..e5ffbe424\n--- /dev/null\n+++ b/news/930.feature\n@@ -0,0 +1 @@\n+Replace internal links to files in blocks with a download url if the user has no edit permissions [csenger] \n\\ No newline at end of file\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex 879b9447d..a6f26b754 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -67,6 +67,20 @@ def __call__():\n         """\n \n \n+class IObjectPrimaryFieldTarget(Interface):\n+    """Return a URL to direct the user to if the object has a primary field\n+    that provides an IPrimaryFieldTarget.\n+    """\n+\n+    def __init__(field, context, request):\n+        """Adapts field, context and request.\n+        """\n+\n+    def __call__():\n+        """Returns a URL.\n+        """\n+\n+\n class IDeserializeFromJson(Interface):\n     """An adapter to deserialize a JSON object into an object in Plone."""\n \ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex 31494b26d..4376c4ad7 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -1,12 +1,15 @@\n # -*- coding: utf-8 -*-\n+from plone.outputfilters.browser.resolveuid import uuidToObject\n from plone.outputfilters.browser.resolveuid import uuidToURL\n from plone.restapi.behaviors import IBlocks\n from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.interfaces import IObjectPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.schema import IJSONField\n from zope.component import adapter\n+from zope.component import queryMultiAdapter\n from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n@@ -60,20 +63,33 @@ def __call__(self, value):\n         # Resolve UID links\n         entity_map = value.get("text", {}).get("entityMap", {})\n         for entity in entity_map.values():\n-            if entity.get("type") == "LINK":\n-                href = entity.get("data", {}).get("url", "")\n-                before = href  # noqa\n-                if href:\n-                    match = RESOLVEUID_RE.match(href)\n-                    if match is not None:\n-                        uid, suffix = match.groups()\n-                        href = uuidToURL(uid)\n-                        if href is None:\n-                            continue\n-                        if suffix:\n-                            href += "/" + suffix\n-                        entity["data"]["href"] = href\n-                        entity["data"]["url"] = href\n-                        print("SERIALIZE " + before + " -> " + href)  # noqa\n-\n+            if entity.get("type") != "LINK":\n+                continue\n+            href = entity.get("data", {}).get("url", "")\n+            before = href  # noqa\n+            if href:\n+                match = RESOLVEUID_RE.match(href)\n+                if match is not None:\n+                    uid, suffix = match.groups()\n+                    href = uuidToURL(uid)\n+                    if href is None:\n+                        continue\n+                    if suffix:\n+                        href += "/" + suffix\n+                    else:\n+                        primary_field_url = self.get_primary_field_target_url(uid)\n+                        href = primary_field_url if primary_field_url else href\n+                    entity["data"]["href"] = href\n+                    entity["data"]["url"] = href\n+                    print("SERIALIZE " + before + " -> " + href)  # noqa\n         return value\n+\n+    def get_primary_field_target_url(self, uid):\n+        target_object = uuidToObject(uid)\n+        if not target_object:\n+            return\n+        adapter = queryMultiAdapter(\n+            (target_object, self.request), IObjectPrimaryFieldTarget\n+        )\n+        if adapter:\n+            return adapter()\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 703076189..e3b45b819 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -6,6 +6,8 @@\n     <adapter factory=".site.SerializeSiteRootToJson" />\n     <adapter factory=".dxcontent.SerializeToJson" />\n     <adapter factory=".dxcontent.SerializeFolderToJson" />\n+    <adapter \n+        factory=".dxcontent.DexterityObjectPrimaryFieldTarget" />\n \n     <configure zcml:condition="installed plone.app.contenttypes">\n         <adapter factory=".collection.SerializeCollectionToJson" />\ndiff --git a/src/plone/restapi/serializer/dxcontent.py b/src/plone/restapi/serializer/dxcontent.py\nindex 1a511b2ca..4be61e43c 100644\n--- a/src/plone/restapi/serializer/dxcontent.py\n+++ b/src/plone/restapi/serializer/dxcontent.py\n@@ -13,6 +13,7 @@\n from plone.restapi.interfaces import IPrimaryFieldTarget\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n+from plone.restapi.interfaces import IObjectPrimaryFieldTarget\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.expansion import expandable_elements\n from plone.restapi.serializer.nextprev import NextPrevious\n@@ -78,7 +79,6 @@ def __call__(self, version=None, include_items=True):\n         result.update(expandable_elements(self.context, self.request))\n \n         # Insert field values\n-        primary_field_name = self.get_primary_field_name()\n         for schema in iterSchemata(self.context):\n             read_permissions = mergedTaggedValueDict(schema, READ_PERMISSIONS_KEY)\n \n@@ -94,15 +94,11 @@ def __call__(self, version=None, include_items=True):\n                 value = serializer()\n                 result[json_compatible(name)] = value\n \n-                # check for a special primary filed target\n-                if name == primary_field_name:\n-                    target_adapter = queryMultiAdapter(\n-                        (field, obj, self.request), IPrimaryFieldTarget\n-                    )\n-                    if target_adapter:\n-                        target = target_adapter()\n-                        if target:\n-                            result["targetUrl"] = target\n+        target_url = getMultiAdapter(\n+            (self.context, self.request), IObjectPrimaryFieldTarget\n+        )()\n+        if target_url:\n+            result["targetUrl"] = target_url\n \n         result["allow_discussion"] = getMultiAdapter(\n             (self.context, self.request), name="conversation_view"\n@@ -115,21 +111,6 @@ def _get_workflow_state(self, obj):\n         review_state = wftool.getInfoFor(ob=obj, name="review_state", default=None)\n         return review_state\n \n-    def get_primary_field_name(self):\n-        fieldname = None\n-        info = None\n-        try:\n-            info = IPrimaryFieldInfo(self.context, None)\n-        except TypeError:\n-            # No primary field present\n-            pass\n-        if info is not None:\n-            fieldname = info.fieldname\n-        elif base_hasattr(self.context, "getPrimaryField"):\n-            field = self.context.getPrimaryField()\n-            fieldname = field.getName()\n-        return fieldname\n-\n     def check_permission(self, permission_name, obj):\n         if permission_name is None:\n             return True\n@@ -189,3 +170,64 @@ def __call__(self, version=None, include_items=True):\n                     for brain in batch\n                 ]\n         return result\n+\n+\n+@adapter(IDexterityContent, Interface)\n+@implementer(IObjectPrimaryFieldTarget)\n+class DexterityObjectPrimaryFieldTarget(object):\n+    def __init__(self, context, request):\n+        self.context = context\n+        self.request = request\n+\n+        self.permission_cache = {}\n+\n+    def __call__(self):\n+        primary_field_name = self.get_primary_field_name()\n+        for schema in iterSchemata(self.context):\n+            read_permissions = mergedTaggedValueDict(schema, READ_PERMISSIONS_KEY)\n+\n+            for name, field in getFields(schema).items():\n+\n+                if not self.check_permission(read_permissions.get(name), self.context):\n+                    continue\n+\n+                if name != primary_field_name:\n+                    continue\n+\n+                target_adapter = queryMultiAdapter(\n+                    (field, self.context, self.request), IPrimaryFieldTarget\n+                )\n+                if target_adapter:\n+                    target = target_adapter()\n+                    if target:\n+                        return target\n+\n+    def get_primary_field_name(self):\n+        fieldname = None\n+        info = None\n+        try:\n+            info = IPrimaryFieldInfo(self.context, None)\n+        except TypeError:\n+            # No primary field present\n+            pass\n+        if info is not None:\n+            fieldname = info.fieldname\n+        elif base_hasattr(self.context, "getPrimaryField"):\n+            field = self.context.getPrimaryField()\n+            fieldname = field.getName()\n+        return fieldname\n+\n+    def check_permission(self, permission_name, obj):\n+        if permission_name is None:\n+            return True\n+\n+        if permission_name not in self.permission_cache:\n+            permission = queryUtility(IPermission, name=permission_name)\n+            if permission is None:\n+                self.permission_cache[permission_name] = True\n+            else:\n+                sm = getSecurityManager()\n+                self.permission_cache[permission_name] = bool(\n+                    sm.checkPermission(permission.title, obj)\n+                )\n+        return self.permission_cache[permission_name]\ndiff --git a/src/plone/restapi/tests/test_resolveuid.py b/src/plone/restapi/tests/test_resolveuid.py\nindex a467bf752..13503b707 100644\n--- a/src/plone/restapi/tests/test_resolveuid.py\n+++ b/src/plone/restapi/tests/test_resolveuid.py\n@@ -1,5 +1,7 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import logout\n from plone.dexterity.utils import iterSchemata\n+from plone.namedfile.file import NamedFile\n from plone.restapi.interfaces import IFieldDeserializer\n from plone.restapi.interfaces import IFieldSerializer\n from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n@@ -26,6 +28,19 @@ def setUp(self):\n             self.portal.invokeFactory("Document", id="doc2", title="Target Document")\n         ]\n \n+        self.doc_primary_field_url = self.portal[\n+            self.portal.invokeFactory(\n+                "DXTestDocument",\n+                id="doc_primary_field_url",\n+                title="Target Document with primary file field",\n+                test_primary_namedfile_field=NamedFile(\n+                    data=u"Spam and eggs",\n+                    contentType=u"text/plain",\n+                    filename=u"test.txt",\n+                ),\n+            )\n+        ]\n+\n     def serialize(self, fieldname, value):\n         for schema in iterSchemata(self.doc1):\n             if fieldname in schema:\n@@ -322,3 +337,134 @@ def test_path_keeps_suffix(self):\n             ]["url"],\n             "../resolveuid/{}/view".format(uid),\n         )\n+\n+    def test_blocks_field_serialization_resolves_uids_with_primary_field_url(self):\n+        logout()\n+        uid = IUUID(self.doc_primary_field_url)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.doc_primary_field_url.absolute_url()\n+            + "/@@download/test_primary_namedfile_field",\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.doc_primary_field_url.absolute_url()\n+            + "/@@download/test_primary_namedfile_field",\n+        )\n+\n+    def test_blocks_field_serialization_resolves_uids_primary_url_with_edit_permission(\n+        self,\n+    ):\n+        uid = IUUID(self.doc_primary_field_url)\n+        blocks = {\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "blocks": [\n+                        {\n+                            "data": {},\n+                            "depth": 0,\n+                            "entityRanges": [{"key": 0, "length": 5, "offset": 0}],\n+                            "inlineStyleRanges": [],\n+                            "key": "68rve",\n+                            "text": "Volto also supports other APIs.",\n+                            "type": "unstyled",\n+                        }\n+                    ],\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    },\n+                },\n+            },\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.doc_primary_field_url.absolute_url(),\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.doc_primary_field_url.absolute_url(),\n+        )\n+\n+    def test_resolveuid_with_primary_field_url_keeps_suffix(self):\n+        uid = IUUID(self.doc2)\n+        blocks = {\n+            "effbdcdc-253c-41a7-841e-5edb3b56ce32": {\n+                "@type": "text",\n+                "text": {\n+                    "entityMap": {\n+                        "0": {\n+                            "data": {\n+                                "href": "../resolveuid/{}/view".format(uid),\n+                                "rel": "nofollow",\n+                                "url": "../resolveuid/{}/view".format(uid),\n+                            },\n+                            "mutability": "MUTABLE",\n+                            "type": "LINK",\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+        value = self.serialize("blocks", blocks)\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["href"],\n+            self.doc2.absolute_url() + "/view",\n+        )\n+        self.assertEqual(\n+            value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n+                "data"\n+            ]["url"],\n+            self.doc2.absolute_url() + "/view",\n+        )\n'

