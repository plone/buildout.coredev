Repository: plone.restapi


Branch: refs/heads/main
Date: 2024-03-30T17:12:54-07:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/1d76fd7c7ce7db42131e58a2b008163af4c4f8f9

Test showing the difference (#1716)

* Test showing the difference

* Remove commented code

* Skip test in Plone 5.2

* Add change note

* Use layer PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING

---------

Co-authored-by: wesleybl &lt;wesleybl@gmail.com&gt;

Files changed:
A news/1716.internal
M src/plone/restapi/tests/test_content_get.py

b'diff --git a/news/1716.internal b/news/1716.internal\nnew file mode 100644\nindex 000000000..e58189028\n--- /dev/null\n+++ b/news/1716.internal\n@@ -0,0 +1 @@\n+Test to ensure that the scale hash of an image is the same as the hash of the image block with this image. @sneridagh\ndiff --git a/src/plone/restapi/tests/test_content_get.py b/src/plone/restapi/tests/test_content_get.py\nindex c123fab9b..6e90b6052 100644\n--- a/src/plone/restapi/tests/test_content_get.py\n+++ b/src/plone/restapi/tests/test_content_get.py\n@@ -5,6 +5,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.textfield.value import RichTextValue\n from plone.namedfile.file import NamedBlobImage\n+from plone.restapi import HAS_PLONE_6\n+from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_DX_FUNCTIONAL_TESTING\n from Products.CMFCore.utils import getToolByName\n from z3c.relationfield import RelationValue\n@@ -176,3 +178,51 @@ def test_get_content_related_items_without_workflow(self):\n             ],\n             response.json()["relatedItems"],\n         )\n+\n+\n+class TestBlocksContentGet(unittest.TestCase):\n+    layer = PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+\n+    @unittest.skipUnless(HAS_PLONE_6, "This not working in Plone 5.2")\n+    def test_image_scales_get(self):\n+        self.portal.invokeFactory("Image", id="imagewf")\n+        self.portal.imagewf.title = "Image without workflow"\n+        self.portal.imagewf.description = "This is an image"\n+        image_file = os.path.join(os.path.dirname(__file__), "image.png")\n+        with open(image_file, "rb") as f:\n+            image_data = f.read()\n+        self.portal.imagewf.image = NamedBlobImage(\n+            data=image_data, contentType="image/png", filename="image.png"\n+        )\n+\n+        image_uid = self.portal.imagewf.UID()\n+        blocks = {"123": {"@type": "image", "url": f"../resolveuid/{image_uid}"}}\n+        self.portal.invokeFactory("Document", id="doc_with_blocks")\n+        self.portal.doc_with_blocks.blocks = blocks\n+\n+        transaction.commit()\n+\n+        response_image = requests.get(\n+            self.portal.imagewf.absolute_url(),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        self.assertEqual(response_image.status_code, 200)\n+        response_image = response_image.json()\n+\n+        response = requests.get(\n+            self.portal.doc_with_blocks.absolute_url(),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+        )\n+        self.assertEqual(response.status_code, 200)\n+\n+        self.assertEqual(\n+            response.json()["blocks"]["123"]["image_scales"]["image"][0][\n+                "download"\n+            ].split("@@images/")[-1],\n+            response_image["image"]["download"].split("@@images/")[-1],\n+        )\n'

