Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-05-28T09:21:58+02:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/e0884a29c908fa30675708063bd90b85c57b5f0e

Comment author avatar (#947)

* Add comment author avatar image

* Black, pep8

* Return defaultUser.png when there is no uploaded avatar image

* Fix membertool lookup

* Return None if no author_image is present

* Add changelog

* #948 is a new feature

Files changed:
A news/948.feature
M src/plone/restapi/serializer/discussion.py
M src/plone/restapi/tests/http-examples/comments_get.resp
M src/plone/restapi/tests/test_comments.py

b'diff --git a/news/948.feature b/news/948.feature\nnew file mode 100644\nindex 000000000..1d9befd4e\n--- /dev/null\n+++ b/news/948.feature\n@@ -0,0 +1 @@\n+- Expose author_image in comments endpoint [timo]\n\\ No newline at end of file\ndiff --git a/src/plone/restapi/serializer/discussion.py b/src/plone/restapi/serializer/discussion.py\nindex 49f9c431d..345431085 100644\n--- a/src/plone/restapi/serializer/discussion.py\n+++ b/src/plone/restapi/serializer/discussion.py\n@@ -9,6 +9,7 @@\n from plone.restapi.services.discussion.utils import can_edit\n from plone.restapi.services.discussion.utils import delete_own_comment_allowed\n from plone.restapi.services.discussion.utils import edit_comment_allowed\n+from Products.CMFCore.utils import getToolByName\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.interface import implementer\n@@ -80,6 +81,7 @@ def __call__(self, include_items=True):\n             "user_notification": self.context.user_notification,\n             "author_username": self.context.author_username,\n             "author_name": self.context.author_name,\n+            "author_image": self.get_author_image(self.context.author_username),\n             "creation_date": IJsonCompatible(self.context.creation_date),\n             "modification_date": IJsonCompatible(\n                 self.context.modification_date\n@@ -87,3 +89,12 @@ def __call__(self, include_items=True):\n             "is_editable": edit_comment_allowed() and can_edit(self.context),\n             "is_deletable": can_delete(self.context) or delete_own,\n         }\n+\n+    def get_author_image(self, username=None):\n+        if username is None:\n+            return None\n+        portal_membership = getToolByName(self.context, "portal_membership", None)\n+        image = portal_membership.getPersonalPortrait(username).absolute_url()\n+        if image.endswith("defaultUser.png"):\n+            return None\n+        return image\ndiff --git a/src/plone/restapi/tests/http-examples/comments_get.resp b/src/plone/restapi/tests/http-examples/comments_get.resp\nindex 2779fb5ab..e0bd1b1f2 100644\n--- a/src/plone/restapi/tests/http-examples/comments_get.resp\n+++ b/src/plone/restapi/tests/http-examples/comments_get.resp\n@@ -8,6 +8,7 @@ Content-Type: application/json\n       "@id": "http://localhost:55001/plone/front-page/@comments/1400000000000000", \n       "@parent": null, \n       "@type": "Discussion Item", \n+      "author_image": null, \n       "author_name": null, \n       "author_username": null, \n       "comment_id": "1400000000000000", \n@@ -26,6 +27,7 @@ Content-Type: application/json\n       "@id": "http://localhost:55001/plone/front-page/@comments/1400000000000001", \n       "@parent": "http://localhost:55001/plone/front-page/@comments/1400000000000000", \n       "@type": "Discussion Item", \n+      "author_image": null, \n       "author_name": null, \n       "author_username": null, \n       "comment_id": "1400000000000001", \ndiff --git a/src/plone/restapi/tests/test_comments.py b/src/plone/restapi/tests/test_comments.py\nindex d7c181ee3..44a930e67 100644\n--- a/src/plone/restapi/tests/test_comments.py\n+++ b/src/plone/restapi/tests/test_comments.py\n@@ -1,11 +1,16 @@\n # -*- coding: utf-8 -*-\n+from OFS.Image import Image\n from plone import api\n from plone.app.discussion.interfaces import IConversation\n from plone.app.discussion.interfaces import IDiscussionSettings\n from plone.app.discussion.interfaces import IReplies\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n from plone.registry.interfaces import IRegistry\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.testing import PLONE_RESTAPI_DX_INTEGRATION_TESTING\n+from Products.CMFCore.utils import getToolByName\n+from Products.PlonePAS.tests import dummy\n from unittest import TestCase\n from zope.component import createObject\n from zope.component import getMultiAdapter\n@@ -79,6 +84,7 @@ def test_comment(self):\n             "user_notification",\n             "author_username",\n             "author_name",\n+            "author_image",\n             "creation_date",\n             "modification_date",\n             "is_editable",\n@@ -88,8 +94,41 @@ def test_comment(self):\n \n         self.assertEqual(set(output["text"]), set(["data", "mime-type"]))\n \n-    def test_comment_with_mimetype_text_plain(self):\n+    def test_comment_with_author_image(self):\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        # set member portrait\n+        membertool = getToolByName(self.portal, "portal_memberdata")\n+        membertool._setPortrait(\n+            Image(id=TEST_USER_ID, file=dummy.File(), title=""), TEST_USER_ID\n+        )\n+        self.conversation = IConversation(self.doc)\n+        self.replies = IReplies(self.conversation)\n+        comment = createObject("plone.Comment")\n+        comment.text = "Hey ho, let\'s go!"\n+        comment.author_username = TEST_USER_ID\n+        self.comment = self.replies[self.replies.addComment(comment)]\n+\n+        serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n+        self.assertEqual(\n+            "{}/portal_memberdata/portraits/test_user_1_".format(self.portal_url),\n+            serializer().get("author_image"),\n+        )\n \n+    def test_comment_with_no_author_image(self):\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+        self.conversation = IConversation(self.doc)\n+        self.replies = IReplies(self.conversation)\n+        comment = createObject("plone.Comment")\n+        comment.text = "Hey ho, let\'s go!"\n+        comment.author_username = TEST_USER_ID\n+        self.comment = self.replies[self.replies.addComment(comment)]\n+\n+        serializer = getMultiAdapter((self.comment, self.request), ISerializeToJson)\n+        self.assertEqual(\n+            None, serializer().get("author_image"),\n+        )\n+\n+    def test_comment_with_mimetype_text_plain(self):\n         self.conversation = IConversation(self.doc)\n         self.replies = IReplies(self.conversation)\n         comment = createObject("plone.Comment")\n'

