Repository: plone.restapi


Branch: refs/heads/main
Date: 2024-02-01T17:05:21-08:00
Author: Víctor Fernández de Alba (sneridagh) <sneridagh@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/bfe05088ee924988c4099744c5eabbd416fe2d20

Improve the block transforms to include also anchors when resolving uid back and forth (#1746)

* Improve the block transforms to include also anchors when resolving uid back and forth

* Changelog

* Add use case where both suffixes can be present, add tests

* fix suffix handling

* Update news/1746.bugfix

---------

Co-authored-by: David Glick &lt;david@glicksoftware.com&gt;

Files changed:
A news/1746.bugfix
M src/plone/restapi/deserializer/utils.py
M src/plone/restapi/serializer/utils.py
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_blocks_serializer.py

b'diff --git a/news/1746.bugfix b/news/1746.bugfix\nnew file mode 100644\nindex 0000000000..d234eaaedb\n--- /dev/null\n+++ b/news/1746.bugfix\n@@ -0,0 +1 @@\n+Fixed the logic for converting public URLs to and from internal UID-based URLs. Now if the URL includes a fragment, it is preserved. @sneridagh\ndiff --git a/src/plone/restapi/deserializer/utils.py b/src/plone/restapi/deserializer/utils.py\nindex 04438be768..9a266d0e9b 100644\n--- a/src/plone/restapi/deserializer/utils.py\n+++ b/src/plone/restapi/deserializer/utils.py\n@@ -2,6 +2,9 @@\n from plone.uuid.interfaces import IUUID\n from plone.uuid.interfaces import IUUIDAware\n from zope.component import getMultiAdapter\n+import re\n+\n+PATH_RE = re.compile(r"^(.*?)((?=/@@|#).*)?$")\n \n \n def path2uid(context, link):\n@@ -24,12 +27,13 @@ def path2uid(context, link):\n             portal_path=portal_path, path=path.lstrip("/")\n         )\n \n-    # handle edge-case when we have non traversable path like /@@download/file\n-    if "/@@" in path:\n-        path, suffix = path.split("/@@", 1)\n-        suffix = "/@@" + suffix\n-    else:\n-        suffix = ""\n+    # handle edge cases with suffixes like /@@download/file or a fragment\n+    suffix = ""\n+    match = PATH_RE.match(path)\n+    if match is not None:\n+        path = match.group(1)\n+        suffix = match.group(2) or ""\n+\n     obj = portal.unrestrictedTraverse(path, None)\n     if obj is None or obj == portal:\n         return link\ndiff --git a/src/plone/restapi/serializer/utils.py b/src/plone/restapi/serializer/utils.py\nindex 4ac4e4ee7b..c94c5ee0a1 100644\n--- a/src/plone/restapi/serializer/utils.py\n+++ b/src/plone/restapi/serializer/utils.py\n@@ -8,7 +8,7 @@\n import re\n \n \n-RESOLVEUID_RE = re.compile("^(?:|.*/)resolve[Uu]id/([^/]*)/?(.*)$")\n+RESOLVEUID_RE = re.compile("^(?:|.*/)resolve[Uu]id/([^/#]*)/?(.*)?$")\n \n \n def resolve_uid(path):\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex 37a4e6ecd5..5fa3996ada 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -18,7 +18,6 @@\n \n \n class TestBlocksDeserializer(unittest.TestCase):\n-\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -444,6 +443,98 @@ def test_slate_simple_link_deserializer(self):\n         link = value[0]["children"][1]["data"]["url"]\n         self.assertTrue(link.startswith("../resolveuid/"))\n \n+    def test_slate_simple_link_deserializer_with_anchor(self):\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": "%s/image-1#anchor-id"\n+                                    % self.portal.absolute_url()\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+\n+        res = self.deserialize(blocks=blocks)\n+        value = res.blocks["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertEqual(link, f"../resolveuid/{self.image.UID()}#anchor-id")\n+\n+    def test_slate_simple_link_deserializer_with_suffix(self):\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": "%s/image-1/@@download/file"\n+                                    % self.portal.absolute_url()\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+\n+        res = self.deserialize(blocks=blocks)\n+        value = res.blocks["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertEqual(link, f"../resolveuid/{self.image.UID()}/@@download/file")\n+\n+    def test_slate_simple_link_deserializer_with_suffix_and_anchor(self):\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": "%s/image-1/@@download/file#anchor-id"\n+                                    % self.portal.absolute_url()\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+\n+        res = self.deserialize(blocks=blocks)\n+        value = res.blocks["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertEqual(\n+            link, f"../resolveuid/{self.image.UID()}/@@download/file#anchor-id"\n+        )\n+\n     def test_aquisition_messing_with_link_deserializer(self):\n         self.portal.invokeFactory(\n             "Folder",\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex a72abb09d4..dd9b1bd9e0 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -29,7 +29,6 @@\n \n \n class TestBlocksSerializer(unittest.TestCase):\n-\n     layer = PLONE_RESTAPI_DX_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -285,7 +284,111 @@ def test_simple_link_serializer(self):\n         )\n         value = res["abc"]["value"]\n         link = value[0]["children"][1]["data"]["url"]\n-        self.assertTrue(link, self.portal.absolute_url() + "/doc1")\n+        self.assertEqual(link, self.portal.absolute_url() + "/doc1")\n+\n+    def test_simple_link_serializer_with_anchor(self):\n+        doc_uid = IUUID(self.portal["doc1"])\n+        resolve_uid_link = f"../resolveuid/{doc_uid}#anchor-id"\n+\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": resolve_uid_link,\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+        res = self.serialize(\n+            context=self.portal["doc1"],\n+            blocks=blocks,\n+        )\n+        value = res["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertEqual(link, f"{self.portal[\'doc1\'].absolute_url()}/#anchor-id")\n+\n+    def test_simple_link_serializer_with_suffix(self):\n+        doc_uid = IUUID(self.portal["doc1"])\n+        resolve_uid_link = f"../resolveuid/{doc_uid}/@@download/file"\n+\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": resolve_uid_link,\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+        res = self.serialize(\n+            context=self.portal["doc1"],\n+            blocks=blocks,\n+        )\n+        value = res["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertEqual(link, f"{self.portal[\'doc1\'].absolute_url()}/@@download/file")\n+\n+    def test_simple_link_serializer_with_suffix_and_anchor(self):\n+        doc_uid = IUUID(self.portal["doc1"])\n+        resolve_uid_link = f"../resolveuid/{doc_uid}/@@download/file#anchor-id"\n+\n+        blocks = {\n+            "abc": {\n+                "@type": "slate",\n+                "plaintext": "Frontpage content here",\n+                "value": [\n+                    {\n+                        "children": [\n+                            {"text": "Frontpage "},\n+                            {\n+                                "children": [{"text": "content "}],\n+                                "data": {\n+                                    "url": resolve_uid_link,\n+                                },\n+                                "type": "link",\n+                            },\n+                            {"text": "here"},\n+                        ],\n+                        "type": "h2",\n+                    }\n+                ],\n+            }\n+        }\n+        res = self.serialize(\n+            context=self.portal["doc1"],\n+            blocks=blocks,\n+        )\n+        value = res["abc"]["value"]\n+        link = value[0]["children"][1]["data"]["url"]\n+        self.assertEqual(\n+            link, f"{self.portal[\'doc1\'].absolute_url()}/@@download/file#anchor-id"\n+        )\n \n     def test_slate_table_block_link_serializer(self):\n         doc_uid = IUUID(self.portal["doc1"])\n@@ -388,7 +491,7 @@ def test_slate_table_block_link_serializer(self):\n         rows = res["abc"]["table"]["rows"]\n         cell = rows[1]["cells"][0]\n         link = cell["value"][0]["children"][1]["data"]["url"]\n-        self.assertTrue(link, self.portal.absolute_url() + "/doc1")\n+        self.assertEqual(link, self.portal.absolute_url() + "/doc1")\n \n     @unittest.skipUnless(\n         HAS_PLONE_6,\n'

