Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2016-03-07T22:33:58+01:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.app.relationfield/commit/f0b866c660a85e140a127b1d0fcab28363a3f865

cleanup: pep8, utf8 header, sorted imports, zca decorators, ...

Files changed:
A .isort.cfg
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/relationfield/__init__.py
M plone/app/relationfield/behavior.py
M plone/app/relationfield/demo.py
M plone/app/relationfield/event.py
M plone/app/relationfield/interfaces.py
M plone/app/relationfield/marshaler.py
M plone/app/relationfield/monkey.py
M plone/app/relationfield/path.py
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/setuphandlers.py
M plone/app/relationfield/source.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/testing.py
M plone/app/relationfield/tests/test_marshall.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M plone/app/relationfield/tests/test_widget.py
M plone/app/relationfield/widget.py
M setup.py

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..fb79921
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,5 @@
+[settings]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
diff --git a/CHANGES.rst b/CHANGES.rst
index 5896fe4..bd57d25 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- cleanup: pep8, utf8 header, sorted imports, zca decorators, ...
+  [jensens]
 
 
 1.3.2 (2015-07-18)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/relationfield/__init__.py b/plone/app/relationfield/__init__.py
index 60d502b..567321c 100644
--- a/plone/app/relationfield/__init__.py
+++ b/plone/app/relationfield/__init__.py
@@ -1,8 +1,11 @@
+# -*- coding: utf-8 -*-
 from plone.app.relationfield.monkey import PATCHES
 
+import pkg_resources
+
+
 PATCHES
 
-import pkg_resources
 
 try:
     pkg_resources.get_distribution('plone.app.contenttypes')
diff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py
index c51cbd6..63b87f8 100644
--- a/plone/app/relationfield/behavior.py
+++ b/plone/app/relationfield/behavior.py
@@ -1,16 +1,16 @@
 # -*- coding: utf-8 -*-
+from plone.app.dexterity import MessageFactory as _
+from plone.app.z3cform.widget import RelatedItemsFieldWidget
+from plone.autoform import directives as form
 from plone.autoform.interfaces import IFormFieldProvider
-from plone.supermodel.interfaces import FIELDSETS_KEY
-from plone.supermodel.model import Fieldset
+from plone.supermodel import model
+from plone.supermodel.directives import fieldset
 from z3c.relationfield.schema import RelationChoice
 from z3c.relationfield.schema import RelationList
-from zope.interface import alsoProvides
-from plone.autoform import directives as form
-from plone.supermodel import model
-from plone.app.dexterity import MessageFactory as _
-from plone.app.z3cform.widget import RelatedItemsFieldWidget
+from zope.interface import provider
 
 
+@provider(IFormFieldProvider)
 class IRelatedItems(model.Schema):
     """Behavior interface to make a Dexterity type support related items.
     """
@@ -19,16 +19,19 @@ class IRelatedItems(model.Schema):
         title=_(u'label_related_items', default=u'Related Items'),
         default=[],
         value_type=RelationChoice(
-            title=u"Related",
-            vocabulary="plone.app.vocabularies.Catalog"
+            title=u'Related',
+            vocabulary='plone.app.vocabularies.Catalog'
         ),
         required=False
     )
-    form.widget('relatedItems', RelatedItemsFieldWidget,
-                vocabulary='plone.app.vocabularies.Catalog')
-
-fieldset = Fieldset('categorization',
-                    label=_(u'Categorization'), fields=['relatedItems'])
-IRelatedItems.setTaggedValue(FIELDSETS_KEY, [fieldset])
+    form.widget(
+        'relatedItems',
+        RelatedItemsFieldWidget,
+        vocabulary='plone.app.vocabularies.Catalog'
+    )
 
-alsoProvides(IRelatedItems, IFormFieldProvider)
+    fieldset(
+        'categorization',
+        label=_(u'Categorization'),
+        fields=['relatedItems']
+    )
diff --git a/plone/app/relationfield/demo.py b/plone/app/relationfield/demo.py
index 22e73fe..a8b44bc 100644
--- a/plone/app/relationfield/demo.py
+++ b/plone/app/relationfield/demo.py
@@ -1,19 +1,26 @@
-from zope.interface import Interface
-
+# -*- coding: utf-8 -*-
 from plone.z3cform import layout
-from z3c.form import form, field
+from z3c.form import field
+from z3c.form import form
 from z3c.form.interfaces import IFormLayer
-from z3c.relationfield.schema import RelationChoice, RelationList
+from z3c.relationfield.schema import RelationChoice
+from z3c.relationfield.schema import RelationList
 
 
 class ITestForm(IFormLayer):
-    multiple = RelationList(title=u"Multiple (Relations field)",
-                           required=False,
-                           value_type=RelationChoice(title=u"Multiple",
-                              vocabulary="plone.app.vocabularies.Catalog"))
-    single = RelationChoice(title=u"Single",
-                       required=False,
-                       vocabulary="plone.app.vocabularies.Catalog")
+    multiple = RelationList(
+        title=u'Multiple (Relations field)',
+        required=False,
+        value_type=RelationChoice(
+            title=u'Multiple',
+            vocabulary='plone.app.vocabularies.Catalog'
+        )
+    )
+    single = RelationChoice(
+        title=u'Single',
+        required=False,
+        vocabulary='plone.app.vocabularies.Catalog'
+    )
 
 
 class TestForm(form.EditForm):
diff --git a/plone/app/relationfield/event.py b/plone/app/relationfield/event.py
index d413ba5..e2d2a16 100644
--- a/plone/app/relationfield/event.py
+++ b/plone/app/relationfield/event.py
@@ -1,10 +1,9 @@
-from zope.schema import getFields
+# -*- coding: utf-8 -*-
 from plone.behavior.interfaces import IBehaviorAssignable
 from z3c.relationfield.event import _setRelation
-from z3c.relationfield.interfaces import (
-    IRelation,
-    IRelationList,
-)
+from z3c.relationfield.interfaces import IRelation
+from z3c.relationfield.interfaces import IRelationList
+from zope.schema import getFields
 
 
 def extract_relations(obj):
@@ -12,22 +11,23 @@ def extract_relations(obj):
     if assignable is None:
         return
     for behavior in assignable.enumerateBehaviors():
-        if behavior.marker != behavior.interface:
-            for name, field in getFields(behavior.interface).items():
-                if IRelation.providedBy(field):
-                    try:
-                        relation = getattr(behavior.interface(obj), name)
-                    except AttributeError:
-                        continue
-                    yield behavior.interface, name, relation
-                if IRelationList.providedBy(field):
-                    try:
-                        l = getattr(behavior.interface(obj), name)
-                    except AttributeError:
-                        continue
-                    if l is not None:
-                        for relation in l:
-                            yield behavior.interface, name, relation
+        if behavior.marker == behavior.interface:
+            continue
+        for name, field in getFields(behavior.interface).items():
+            if IRelation.providedBy(field):
+                try:
+                    relation = getattr(behavior.interface(obj), name)
+                except AttributeError:
+                    continue
+                yield behavior.interface, name, relation
+            if IRelationList.providedBy(field):
+                try:
+                    rel_list = getattr(behavior.interface(obj), name)
+                except AttributeError:
+                    continue
+                if rel_list is not None:
+                    for relation in rel_list:
+                        yield behavior.interface, name, relation
 
 
 def update_behavior_relations(obj, event):
diff --git a/plone/app/relationfield/interfaces.py b/plone/app/relationfield/interfaces.py
index ef06fa9..e9079ed 100644
--- a/plone/app/relationfield/interfaces.py
+++ b/plone/app/relationfield/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from z3c.relationfield.interfaces import IHasRelations
 
 
diff --git a/plone/app/relationfield/marshaler.py b/plone/app/relationfield/marshaler.py
index fa2f3e7..48cedbe 100644
--- a/plone/app/relationfield/marshaler.py
+++ b/plone/app/relationfield/marshaler.py
@@ -1,6 +1,8 @@
+# -*- coding: utf-8 -*-
 from plone.rfc822.defaultfields import BaseFieldMarshaler
 from z3c.relationfield import RelationValue
 
+
 class RelationFieldMarshaler(BaseFieldMarshaler):
     """Field marshaler for z3c.relationfield IRelation and IRelationChoice
     fields
@@ -13,7 +15,14 @@ def encode(self, value, charset='utf-8', primary=False):
             return None
         return str(value.to_id)
 
-    def decode(self, value, message=None, charset='utf-8', contentType=None, primary=False):
+    def decode(
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False,
+    ):
         try:
             toId = int(value.decode(charset))
         except TypeError, e:
diff --git a/plone/app/relationfield/monkey.py b/plone/app/relationfield/monkey.py
index 5feb7df..4186195 100644
--- a/plone/app/relationfield/monkey.py
+++ b/plone/app/relationfield/monkey.py
@@ -1,10 +1,9 @@
-#!/usr/bin/python
 # -*- coding: utf-8 -*-
-
-from zope.intid.interfaces import IIntIds
+from z3c.relationfield.relation import _object
+from z3c.relationfield.relation import RelationValue
 from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
 
-from z3c.relationfield.relation import RelationValue, _object
 
 PATCHES = None
 
diff --git a/plone/app/relationfield/path.py b/plone/app/relationfield/path.py
index de613f4..31fffe8 100644
--- a/plone/app/relationfield/path.py
+++ b/plone/app/relationfield/path.py
@@ -1,15 +1,15 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from z3c.objpath.interfaces import IObjectPath
-from zope.component.hooks import getSite
 from zExceptions import NotFound
+from zope.component.hooks import getSite
+from zope.interface import implementer
 
 
+@implementer(IObjectPath)
 class Zope2ObjectPath(object):
     """Path representation for Zope 2 objects.
     """
 
-    implements(IObjectPath)
-
     def path(self, obj):
         try:
             return '/'.join(obj.getPhysicalPath())
diff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py
index dabd06f..c9726b9 100644
--- a/plone/app/relationfield/schemaeditor.py
+++ b/plone/app/relationfield/schemaeditor.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from plone.app.vocabularies.catalog import CatalogSource
 from plone.schemaeditor.fields import FieldFactory
 from plone.schemaeditor.interfaces import IFieldEditFormSchema
 from plone.schemaeditor.interfaces import IFieldFactory
@@ -10,16 +11,14 @@
 from zope.component import queryUtility
 from zope.i18n import MessageFactory
 from zope.interface import implementer
-from zope.interface import implements
 from zope.intid.interfaces import IIntIds
 
-_ = MessageFactory('plone')
 
-from plone.app.vocabularies.catalog import CatalogSource
+_ = MessageFactory('plone')
 
 
+@implementer(IFieldFactory)
 class RelationFieldFactory(FieldFactory):
-    implements(IFieldFactory)
 
     def available(self):
         return queryUtility(IIntIds) is not None
@@ -32,7 +31,7 @@ class IRelationFieldSettings(schema.interfaces.IField):
         description=_(u'Allowed target types'),
         value_type=schema.Choice(
             title=_(u'Type'),
-            vocabulary='plone.app.vocabularies.ReallyUserFriendlyTypes'
+            vocabulary='plone.app.vocabularies.ReallyUserFriendlyTypes',
         ),
         required=False
     )
@@ -49,29 +48,25 @@ class RelationChoiceEditFormAdapter(object):
     def __init__(self, field):
         self.field = field
 
-    def _read_portal_type(self):
+    @property
+    def portal_type(self):
         field = self.field
         types = []
-
         types.extend(field.source.query.get('portal_type') or [])
-
         return types
 
-    def _write_portal_type(self, value):
+    @portal_type.setter
+    def portal_type(self, value):
         field = self.field
-
         if value:
             field.source.query['portal_type'] = list(value)
         elif 'portal_type' in field.source.query:
             del field.source.query['portal_type']
 
-    portal_type = property(_read_portal_type,
-                           _write_portal_type)
-
 
 RelationChoiceFactory = RelationFieldFactory(
     RelationChoice, _('Relation Choice'),
-    source=CatalogSource()
+    source=CatalogSource(),
 )
 
 
@@ -86,27 +81,26 @@ class RelationListEditFormAdapter(object):
     def __init__(self, field):
         self.field = field
 
-    def _read_portal_type(self):
+    @property
+    def portal_type(self):
         field = self.field.value_type
         types = []
-
         types.extend(field.source.query.get('portal_type') or [])
-
         return set(types)
 
-    def _write_portal_type(self, value):
+    @portal_type.setter
+    def portal_type(self, value):
         field = self.field.value_type
-
         if value:
             field.source.query['portal_type'] = list(value)
         elif 'portal_type' in field.source.query:
             del field.source.query['portal_type']
 
-    portal_type = property(_read_portal_type, _write_portal_type)
-
 
 RelationListFactory = RelationFieldFactory(
     RelationList, _('Relation List'),
-    value_type=RelationChoice(title=_(u'Relation Choice'),
-                              source=CatalogSource())
+    value_type=RelationChoice(
+        title=_(u'Relation Choice'),
+        source=CatalogSource(),
+    )
 )
diff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py
index 1467e3b..e02b119 100644
--- a/plone/app/relationfield/setuphandlers.py
+++ b/plone/app/relationfield/setuphandlers.py
@@ -1,8 +1,9 @@
-from zc.relation.interfaces import ICatalog
+# -*- coding: utf-8 -*-
+from five.intid.intid import IntIds
+from five.intid.site import addUtility
 from z3c.relationfield.index import RelationCatalog
+from zc.relation.interfaces import ICatalog
 from zope.intid.interfaces import IIntIds
-from five.intid.site import addUtility
-from five.intid.intid import IntIds
 
 
 def add_relations(context):
@@ -20,4 +21,4 @@ def installRelations(context):
         return
     portal = context.getSite()
     add_relations(portal)
-    return "Added relations utility."
+    return 'Added relations utility.'
diff --git a/plone/app/relationfield/source.py b/plone/app/relationfield/source.py
index 5c66e61..f2ec81d 100644
--- a/plone/app/relationfield/source.py
+++ b/plone/app/relationfield/source.py
@@ -1,14 +1,14 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from z3c.formwidget.query.interfaces import IQuerySource
 from zope.component import getUtility
+from zope.interface import implementer
 from zope.intid.interfaces import IIntIds
-
-from z3c.formwidget.query.interfaces import IQuerySource
 from zope.schema.vocabulary import SimpleVocabulary
 
-from Products.CMFCore.utils import getToolByName
 
+@implementer(IQuerySource)
 class CMFContentSearchSource(object):
-    implements(IQuerySource)
 
     def __init__(self, context):
         self.context = context
@@ -24,15 +24,21 @@ def __len__(self):
         return 0
 
     def getTerm(self, obj):
-        return SimpleVocabulary.createTerm(obj, self.intid_utility.getId(obj),
-                                           obj.Title())
+        return SimpleVocabulary.createTerm(
+            obj,
+            self.intid_utility.getId(obj),
+            obj.Title()
+        )
 
     def getTermByToken(self, value):
         return self.getTerm(self.intid_utility.getObject(int(value)))
 
     def search(self, query_string):
         catalog = getToolByName(self.context, 'portal_catalog')
-        result = catalog(SearchableText='%s*' % query_string, sort_limit=20)
+        result = catalog(
+            SearchableText='{0:s}*'.format(query_string),
+            sort_limit=20
+        )
         terms = []
         for brain in result:
             try:
@@ -41,4 +47,4 @@ def search(self, query_string):
                 # An object without an intid in the catalog results
                 continue
             terms.append(term)
-        return terms
\ No newline at end of file
+        return terms
diff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py
index 557b7b6..9ae3bb4 100644
--- a/plone/app/relationfield/supermodel.py
+++ b/plone/app/relationfield/supermodel.py
@@ -1,12 +1,11 @@
 # -*- coding: utf-8 -*-
+from plone.app.vocabularies.catalog import CatalogSource
 from plone.supermodel.exportimport import BaseHandler
 from plone.supermodel.utils import valueToElement
 from z3c.relationfield.schema import RelationChoice
 from z3c.relationfield.schema import RelationList
 from zope import schema
 
-from plone.app.vocabularies.catalog import CatalogSource
-
 
 class RelationChoiceBaseHandler(BaseHandler):
 
diff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py
index 7008cab..aae0be4 100644
--- a/plone/app/relationfield/testing.py
+++ b/plone/app/relationfield/testing.py
@@ -6,20 +6,23 @@
 from plone.app.testing import PloneSandboxLayer
 from z3c.relationfield import RelationList
 from z3c.relationfield.interfaces import IHasRelations
-import zope.interface
+from zope.interface import implementer
+from zope.interface import Interface
+
 import zope.schema
 
+
 if HAS_CONTENTTYPES:
     from plone.app.contenttypes.testing import \
         PLONE_APP_CONTENTTYPES_FIXTURE
 
 
-class IAddress(zope.interface.Interface):
+class IAddress(Interface):
     streetname = zope.schema.TextLine(title=u'Street name')
     city = zope.schema.TextLine(title=u'City')
 
 
-@zope.interface.implementer(IAddress, IHasRelations)
+@implementer(IAddress, IHasRelations)
 class Address(Persistent):
     __name__ = u''
     streetname = u''
@@ -40,7 +43,7 @@ class IPerson(zope.interface.Interface):
     addresses = RelationList(title=u'Addresses')
 
 
-@zope.interface.implementer(IPerson, IHasRelations)
+@implementer(IPerson, IHasRelations)
 class Person(Persistent):
     name = u''
 
@@ -64,7 +67,9 @@ def setUpPloneSite(self, portal):
 
 FIXTURE = PloneAppRelationfieldFixture()
 FUNCTIONAL_TESTING = FunctionalTesting(
-    bases=(FIXTURE,), name="plone.app.relationfield:Functional")
+    bases=(FIXTURE,),
+    name='plone.app.relationfield:Functional'
+)
 
 
 class PloneAppRelationfieldContentTreeFixture(PloneSandboxLayer):
@@ -94,7 +99,8 @@ def setUpPloneSite(self, portal):
 
 FUNCTIONAL_CONTENTTREE_TESTING = FunctionalTesting(
     bases=(CONTENTTREE_FIXTURE,),
-    name="plone.app.relationfield.contenttree:Functional")
+    name='plone.app.relationfield.contenttree:Functional'
+)
 
 
 class PloneAppRelationfieldWidgetsFixture(PloneSandboxLayer):
@@ -124,4 +130,5 @@ def setUpPloneSite(self, portal):
 
 FUNCTIONAL_WIDGETS_TESTING = FunctionalTesting(
     bases=(WIDGETS_FIXTURE,),
-    name="plone.app.relationfield.contenttree:Functional")
+    name='plone.app.relationfield.contenttree:Functional'
+)
diff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py
index dea7917..47f2f9a 100644
--- a/plone/app/relationfield/tests/test_marshall.py
+++ b/plone/app/relationfield/tests/test_marshall.py
@@ -1,12 +1,12 @@
 # -*- coding: utf-8 -*-
-import doctest
-from unittest import TestSuite
-
 from plone.testing import layered
 from plone.testing.zca import ZCMLSandbox
+from unittest import TestSuite
 
+import doctest
 import plone.app.relationfield.tests
 
+
 ZCML_SANDBOX = ZCMLSandbox(
     filename='test_marshall.zcml',
     package=plone.app.relationfield.tests
@@ -20,7 +20,7 @@ def test_suite():
         doctest.DocFileSuite(
             '../marshaler.rst',
             optionflags=OPTIONFLAGS,
-            package="plone.app.relationfield.tests",
+            package='plone.app.relationfield.tests',
         ),
         layer=ZCML_SANDBOX)
     )
diff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py
index 679e903..01e1d0f 100644
--- a/plone/app/relationfield/tests/test_schemaeditor.py
+++ b/plone/app/relationfield/tests/test_schemaeditor.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
 from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING
 from plone.testing import layered
+
 import doctest
 import os
 import unittest
 
+
 optionflags = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE)
 
diff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py
index ef38074..5fbaab1 100644
--- a/plone/app/relationfield/tests/test_supermodel.py
+++ b/plone/app/relationfield/tests/test_supermodel.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
 from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING
 from plone.testing import layered
+
 import doctest
 import os
 import unittest
 
+
 optionflags = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE)
 
diff --git a/plone/app/relationfield/tests/test_widget.py b/plone/app/relationfield/tests/test_widget.py
index b36efe8..82ba999 100644
--- a/plone/app/relationfield/tests/test_widget.py
+++ b/plone/app/relationfield/tests/test_widget.py
@@ -1,13 +1,16 @@
-import unittest2 as unittest
-from plone.app.relationfield.testing import FUNCTIONAL_TESTING
-from plone.app.relationfield.testing import IPerson, Person
+# -*- coding: utf-8 -*-
 from plone.app.relationfield.testing import Address
-
-from z3c.form.interfaces import IDataManager
+from plone.app.relationfield.testing import FUNCTIONAL_TESTING
+from plone.app.relationfield.testing import IPerson
+from plone.app.relationfield.testing import Person
 from plone.app.relationfield.widget import RelationListDictDataManager
-from zope.component import getUtility, getMultiAdapter
-from zope.intid.interfaces import IIntIds
+from z3c.form.interfaces import IDataManager
 from z3c.relationfield.interfaces import IRelationValue
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
+
+import unittest2 as unittest
 
 
 class RelationListDictDataManagerTest(unittest.TestCase):
diff --git a/plone/app/relationfield/widget.py b/plone/app/relationfield/widget.py
index 4a1dc08..08f7c82 100644
--- a/plone/app/relationfield/widget.py
+++ b/plone/app/relationfield/widget.py
@@ -1,21 +1,22 @@
-from zope.component import adapts, getUtility
+# -*- coding: utf-8 -*-
+from z3c.form.datamanager import AttributeField
+from z3c.form.datamanager import DictionaryField
+from z3c.form.interfaces import NO_VALUE
+from z3c.relationfield.interfaces import IRelation
+from z3c.relationfield.interfaces import IRelationList
+from z3c.relationfield.interfaces import IRelationValue
+from z3c.relationfield.relation import RelationValue
+from zope.component import adapter
+from zope.component import getUtility
 from zope.interface import Interface
 from zope.intid.interfaces import IIntIds
 from zope.security.interfaces import ForbiddenAttribute
-from z3c.relationfield.interfaces import (
-    IRelation,
-    IRelationValue,
-    IRelationList
-)
-from z3c.relationfield.relation import RelationValue
-from z3c.form.interfaces import NO_VALUE
-from z3c.form.datamanager import AttributeField, DictionaryField
 
 
+@adapter(Interface, IRelation)
 class RelationDataManager(AttributeField):
     """A data manager which uses the z3c.relationfield api to set
     relationships using a schema field."""
-    adapts(Interface, IRelation)
 
     def get(self):
         """Gets the target"""
@@ -52,10 +53,10 @@ def set(self, value):
             super(RelationDataManager, self).set(rel)
 
 
+@adapter(dict, IRelation)
 class RelationDictDataManager(DictionaryField):
     """A data manager which uses the z3c.relationfield api to set
     relationships using a schema field, for dict-like contexts."""
-    adapts(dict, IRelation)
 
     def get(self):
         """Gets the target"""
@@ -104,9 +105,9 @@ def set(self, value):
             super(RelationDictDataManager, self).set(rel)
 
 
+@adapter(Interface, IRelationList)
 class RelationListDataManager(AttributeField):
     """A data manager which sets a list of relations"""
-    adapts(Interface, IRelationList)
 
     def get(self):
         """Gets the target"""
@@ -142,9 +143,9 @@ def set(self, value):
         super(RelationListDataManager, self).set(new_relationships)
 
 
+@adapter(dict, IRelationList)
 class RelationListDictDataManager(DictionaryField):
     """A data manager which sets a list of relations on dictionary"""
-    adapts(dict, IRelationList)
 
     def get(self):
         """Gets the target"""
diff --git a/setup.py b/setup.py
index c2e0719..e7d2bf3 100644
--- a/setup.py
+++ b/setup.py
@@ -1,21 +1,24 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.3.3.dev0'
 
 setup(
     name='plone.app.relationfield',
     version=version,
-    description="Plone support for z3c.relationfield",
-    long_description=(open("README.rst").read() + "\n" +
-                      open("CHANGES.rst").read()),
+    description='Plone support for z3c.relationfield',
+    long_description=(open('README.rst').read() + '\n' +
+                      open('CHANGES.rst').read()),
     # Get more strings from
     # https://pypi.python.org/pypi?%3Aaction=list_classifiers
     classifiers=[
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-        "Topic :: Software Development :: Libraries :: Python Modules",
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
+        'Topic :: Software Development :: Libraries :: Python Modules',
     ],
     keywords='dexterity relations plone zc.relation',
     author='Alec Mitchell',


Repository: plone.app.relationfield


Branch: refs/heads/master
Date: 2016-03-08T00:24:20+01:00
Author: Johannes Raggam (thet) <thetetet@gmail.com>
Commit: https://github.com/plone/plone.app.relationfield/commit/cd51379a4100ecf5cb37f1886069e1a329d3c4b0

Merge pull request #17 from plone/cleanup

cleanup: pep8, utf8 header, sorted imports, zca decorators, ...

Files changed:
A .isort.cfg
M CHANGES.rst
M plone/__init__.py
M plone/app/__init__.py
M plone/app/relationfield/__init__.py
M plone/app/relationfield/behavior.py
M plone/app/relationfield/demo.py
M plone/app/relationfield/event.py
M plone/app/relationfield/interfaces.py
M plone/app/relationfield/marshaler.py
M plone/app/relationfield/monkey.py
M plone/app/relationfield/path.py
M plone/app/relationfield/schemaeditor.py
M plone/app/relationfield/setuphandlers.py
M plone/app/relationfield/source.py
M plone/app/relationfield/supermodel.py
M plone/app/relationfield/testing.py
M plone/app/relationfield/tests/test_marshall.py
M plone/app/relationfield/tests/test_schemaeditor.py
M plone/app/relationfield/tests/test_supermodel.py
M plone/app/relationfield/tests/test_widget.py
M plone/app/relationfield/widget.py
M setup.py

diff --git a/.isort.cfg b/.isort.cfg
new file mode 100644
index 0000000..fb79921
--- /dev/null
+++ b/.isort.cfg
@@ -0,0 +1,5 @@
+[settings]
+force_alphabetical_sort=True
+force_single_line=True
+lines_after_imports=2
+line_length=200
diff --git a/CHANGES.rst b/CHANGES.rst
index 5896fe4..bd57d25 100644
--- a/CHANGES.rst
+++ b/CHANGES.rst
@@ -10,7 +10,8 @@ New:
 
 Fixes:
 
-- *add item here*
+- cleanup: pep8, utf8 header, sorted imports, zca decorators, ...
+  [jensens]
 
 
 1.3.2 (2015-07-18)
diff --git a/plone/__init__.py b/plone/__init__.py
index f48ad10..68c04af 100644
--- a/plone/__init__.py
+++ b/plone/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/__init__.py b/plone/app/__init__.py
index f48ad10..68c04af 100644
--- a/plone/app/__init__.py
+++ b/plone/app/__init__.py
@@ -1,6 +1,2 @@
-# See http://peak.telecommunity.com/DevCenter/setuptools#namespace-packages
-try:
-    __import__('pkg_resources').declare_namespace(__name__)
-except ImportError:
-    from pkgutil import extend_path
-    __path__ = extend_path(__path__, __name__)
+# -*- coding: utf-8 -*-
+__import__('pkg_resources').declare_namespace(__name__)
diff --git a/plone/app/relationfield/__init__.py b/plone/app/relationfield/__init__.py
index 60d502b..567321c 100644
--- a/plone/app/relationfield/__init__.py
+++ b/plone/app/relationfield/__init__.py
@@ -1,8 +1,11 @@
+# -*- coding: utf-8 -*-
 from plone.app.relationfield.monkey import PATCHES
 
+import pkg_resources
+
+
 PATCHES
 
-import pkg_resources
 
 try:
     pkg_resources.get_distribution('plone.app.contenttypes')
diff --git a/plone/app/relationfield/behavior.py b/plone/app/relationfield/behavior.py
index c51cbd6..63b87f8 100644
--- a/plone/app/relationfield/behavior.py
+++ b/plone/app/relationfield/behavior.py
@@ -1,16 +1,16 @@
 # -*- coding: utf-8 -*-
+from plone.app.dexterity import MessageFactory as _
+from plone.app.z3cform.widget import RelatedItemsFieldWidget
+from plone.autoform import directives as form
 from plone.autoform.interfaces import IFormFieldProvider
-from plone.supermodel.interfaces import FIELDSETS_KEY
-from plone.supermodel.model import Fieldset
+from plone.supermodel import model
+from plone.supermodel.directives import fieldset
 from z3c.relationfield.schema import RelationChoice
 from z3c.relationfield.schema import RelationList
-from zope.interface import alsoProvides
-from plone.autoform import directives as form
-from plone.supermodel import model
-from plone.app.dexterity import MessageFactory as _
-from plone.app.z3cform.widget import RelatedItemsFieldWidget
+from zope.interface import provider
 
 
+@provider(IFormFieldProvider)
 class IRelatedItems(model.Schema):
     """Behavior interface to make a Dexterity type support related items.
     """
@@ -19,16 +19,19 @@ class IRelatedItems(model.Schema):
         title=_(u'label_related_items', default=u'Related Items'),
         default=[],
         value_type=RelationChoice(
-            title=u"Related",
-            vocabulary="plone.app.vocabularies.Catalog"
+            title=u'Related',
+            vocabulary='plone.app.vocabularies.Catalog'
         ),
         required=False
     )
-    form.widget('relatedItems', RelatedItemsFieldWidget,
-                vocabulary='plone.app.vocabularies.Catalog')
-
-fieldset = Fieldset('categorization',
-                    label=_(u'Categorization'), fields=['relatedItems'])
-IRelatedItems.setTaggedValue(FIELDSETS_KEY, [fieldset])
+    form.widget(
+        'relatedItems',
+        RelatedItemsFieldWidget,
+        vocabulary='plone.app.vocabularies.Catalog'
+    )
 
-alsoProvides(IRelatedItems, IFormFieldProvider)
+    fieldset(
+        'categorization',
+        label=_(u'Categorization'),
+        fields=['relatedItems']
+    )
diff --git a/plone/app/relationfield/demo.py b/plone/app/relationfield/demo.py
index 22e73fe..a8b44bc 100644
--- a/plone/app/relationfield/demo.py
+++ b/plone/app/relationfield/demo.py
@@ -1,19 +1,26 @@
-from zope.interface import Interface
-
+# -*- coding: utf-8 -*-
 from plone.z3cform import layout
-from z3c.form import form, field
+from z3c.form import field
+from z3c.form import form
 from z3c.form.interfaces import IFormLayer
-from z3c.relationfield.schema import RelationChoice, RelationList
+from z3c.relationfield.schema import RelationChoice
+from z3c.relationfield.schema import RelationList
 
 
 class ITestForm(IFormLayer):
-    multiple = RelationList(title=u"Multiple (Relations field)",
-                           required=False,
-                           value_type=RelationChoice(title=u"Multiple",
-                              vocabulary="plone.app.vocabularies.Catalog"))
-    single = RelationChoice(title=u"Single",
-                       required=False,
-                       vocabulary="plone.app.vocabularies.Catalog")
+    multiple = RelationList(
+        title=u'Multiple (Relations field)',
+        required=False,
+        value_type=RelationChoice(
+            title=u'Multiple',
+            vocabulary='plone.app.vocabularies.Catalog'
+        )
+    )
+    single = RelationChoice(
+        title=u'Single',
+        required=False,
+        vocabulary='plone.app.vocabularies.Catalog'
+    )
 
 
 class TestForm(form.EditForm):
diff --git a/plone/app/relationfield/event.py b/plone/app/relationfield/event.py
index d413ba5..e2d2a16 100644
--- a/plone/app/relationfield/event.py
+++ b/plone/app/relationfield/event.py
@@ -1,10 +1,9 @@
-from zope.schema import getFields
+# -*- coding: utf-8 -*-
 from plone.behavior.interfaces import IBehaviorAssignable
 from z3c.relationfield.event import _setRelation
-from z3c.relationfield.interfaces import (
-    IRelation,
-    IRelationList,
-)
+from z3c.relationfield.interfaces import IRelation
+from z3c.relationfield.interfaces import IRelationList
+from zope.schema import getFields
 
 
 def extract_relations(obj):
@@ -12,22 +11,23 @@ def extract_relations(obj):
     if assignable is None:
         return
     for behavior in assignable.enumerateBehaviors():
-        if behavior.marker != behavior.interface:
-            for name, field in getFields(behavior.interface).items():
-                if IRelation.providedBy(field):
-                    try:
-                        relation = getattr(behavior.interface(obj), name)
-                    except AttributeError:
-                        continue
-                    yield behavior.interface, name, relation
-                if IRelationList.providedBy(field):
-                    try:
-                        l = getattr(behavior.interface(obj), name)
-                    except AttributeError:
-                        continue
-                    if l is not None:
-                        for relation in l:
-                            yield behavior.interface, name, relation
+        if behavior.marker == behavior.interface:
+            continue
+        for name, field in getFields(behavior.interface).items():
+            if IRelation.providedBy(field):
+                try:
+                    relation = getattr(behavior.interface(obj), name)
+                except AttributeError:
+                    continue
+                yield behavior.interface, name, relation
+            if IRelationList.providedBy(field):
+                try:
+                    rel_list = getattr(behavior.interface(obj), name)
+                except AttributeError:
+                    continue
+                if rel_list is not None:
+                    for relation in rel_list:
+                        yield behavior.interface, name, relation
 
 
 def update_behavior_relations(obj, event):
diff --git a/plone/app/relationfield/interfaces.py b/plone/app/relationfield/interfaces.py
index ef06fa9..e9079ed 100644
--- a/plone/app/relationfield/interfaces.py
+++ b/plone/app/relationfield/interfaces.py
@@ -1,3 +1,4 @@
+# -*- coding: utf-8 -*-
 from z3c.relationfield.interfaces import IHasRelations
 
 
diff --git a/plone/app/relationfield/marshaler.py b/plone/app/relationfield/marshaler.py
index fa2f3e7..48cedbe 100644
--- a/plone/app/relationfield/marshaler.py
+++ b/plone/app/relationfield/marshaler.py
@@ -1,6 +1,8 @@
+# -*- coding: utf-8 -*-
 from plone.rfc822.defaultfields import BaseFieldMarshaler
 from z3c.relationfield import RelationValue
 
+
 class RelationFieldMarshaler(BaseFieldMarshaler):
     """Field marshaler for z3c.relationfield IRelation and IRelationChoice
     fields
@@ -13,7 +15,14 @@ def encode(self, value, charset='utf-8', primary=False):
             return None
         return str(value.to_id)
 
-    def decode(self, value, message=None, charset='utf-8', contentType=None, primary=False):
+    def decode(
+        self,
+        value,
+        message=None,
+        charset='utf-8',
+        contentType=None,
+        primary=False,
+    ):
         try:
             toId = int(value.decode(charset))
         except TypeError, e:
diff --git a/plone/app/relationfield/monkey.py b/plone/app/relationfield/monkey.py
index 5feb7df..4186195 100644
--- a/plone/app/relationfield/monkey.py
+++ b/plone/app/relationfield/monkey.py
@@ -1,10 +1,9 @@
-#!/usr/bin/python
 # -*- coding: utf-8 -*-
-
-from zope.intid.interfaces import IIntIds
+from z3c.relationfield.relation import _object
+from z3c.relationfield.relation import RelationValue
 from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
 
-from z3c.relationfield.relation import RelationValue, _object
 
 PATCHES = None
 
diff --git a/plone/app/relationfield/path.py b/plone/app/relationfield/path.py
index de613f4..31fffe8 100644
--- a/plone/app/relationfield/path.py
+++ b/plone/app/relationfield/path.py
@@ -1,15 +1,15 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
 from z3c.objpath.interfaces import IObjectPath
-from zope.component.hooks import getSite
 from zExceptions import NotFound
+from zope.component.hooks import getSite
+from zope.interface import implementer
 
 
+@implementer(IObjectPath)
 class Zope2ObjectPath(object):
     """Path representation for Zope 2 objects.
     """
 
-    implements(IObjectPath)
-
     def path(self, obj):
         try:
             return '/'.join(obj.getPhysicalPath())
diff --git a/plone/app/relationfield/schemaeditor.py b/plone/app/relationfield/schemaeditor.py
index dabd06f..c9726b9 100644
--- a/plone/app/relationfield/schemaeditor.py
+++ b/plone/app/relationfield/schemaeditor.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from plone.app.vocabularies.catalog import CatalogSource
 from plone.schemaeditor.fields import FieldFactory
 from plone.schemaeditor.interfaces import IFieldEditFormSchema
 from plone.schemaeditor.interfaces import IFieldFactory
@@ -10,16 +11,14 @@
 from zope.component import queryUtility
 from zope.i18n import MessageFactory
 from zope.interface import implementer
-from zope.interface import implements
 from zope.intid.interfaces import IIntIds
 
-_ = MessageFactory('plone')
 
-from plone.app.vocabularies.catalog import CatalogSource
+_ = MessageFactory('plone')
 
 
+@implementer(IFieldFactory)
 class RelationFieldFactory(FieldFactory):
-    implements(IFieldFactory)
 
     def available(self):
         return queryUtility(IIntIds) is not None
@@ -32,7 +31,7 @@ class IRelationFieldSettings(schema.interfaces.IField):
         description=_(u'Allowed target types'),
         value_type=schema.Choice(
             title=_(u'Type'),
-            vocabulary='plone.app.vocabularies.ReallyUserFriendlyTypes'
+            vocabulary='plone.app.vocabularies.ReallyUserFriendlyTypes',
         ),
         required=False
     )
@@ -49,29 +48,25 @@ class RelationChoiceEditFormAdapter(object):
     def __init__(self, field):
         self.field = field
 
-    def _read_portal_type(self):
+    @property
+    def portal_type(self):
         field = self.field
         types = []
-
         types.extend(field.source.query.get('portal_type') or [])
-
         return types
 
-    def _write_portal_type(self, value):
+    @portal_type.setter
+    def portal_type(self, value):
         field = self.field
-
         if value:
             field.source.query['portal_type'] = list(value)
         elif 'portal_type' in field.source.query:
             del field.source.query['portal_type']
 
-    portal_type = property(_read_portal_type,
-                           _write_portal_type)
-
 
 RelationChoiceFactory = RelationFieldFactory(
     RelationChoice, _('Relation Choice'),
-    source=CatalogSource()
+    source=CatalogSource(),
 )
 
 
@@ -86,27 +81,26 @@ class RelationListEditFormAdapter(object):
     def __init__(self, field):
         self.field = field
 
-    def _read_portal_type(self):
+    @property
+    def portal_type(self):
         field = self.field.value_type
         types = []
-
         types.extend(field.source.query.get('portal_type') or [])
-
         return set(types)
 
-    def _write_portal_type(self, value):
+    @portal_type.setter
+    def portal_type(self, value):
         field = self.field.value_type
-
         if value:
             field.source.query['portal_type'] = list(value)
         elif 'portal_type' in field.source.query:
             del field.source.query['portal_type']
 
-    portal_type = property(_read_portal_type, _write_portal_type)
-
 
 RelationListFactory = RelationFieldFactory(
     RelationList, _('Relation List'),
-    value_type=RelationChoice(title=_(u'Relation Choice'),
-                              source=CatalogSource())
+    value_type=RelationChoice(
+        title=_(u'Relation Choice'),
+        source=CatalogSource(),
+    )
 )
diff --git a/plone/app/relationfield/setuphandlers.py b/plone/app/relationfield/setuphandlers.py
index 1467e3b..e02b119 100644
--- a/plone/app/relationfield/setuphandlers.py
+++ b/plone/app/relationfield/setuphandlers.py
@@ -1,8 +1,9 @@
-from zc.relation.interfaces import ICatalog
+# -*- coding: utf-8 -*-
+from five.intid.intid import IntIds
+from five.intid.site import addUtility
 from z3c.relationfield.index import RelationCatalog
+from zc.relation.interfaces import ICatalog
 from zope.intid.interfaces import IIntIds
-from five.intid.site import addUtility
-from five.intid.intid import IntIds
 
 
 def add_relations(context):
@@ -20,4 +21,4 @@ def installRelations(context):
         return
     portal = context.getSite()
     add_relations(portal)
-    return "Added relations utility."
+    return 'Added relations utility.'
diff --git a/plone/app/relationfield/source.py b/plone/app/relationfield/source.py
index 5c66e61..f2ec81d 100644
--- a/plone/app/relationfield/source.py
+++ b/plone/app/relationfield/source.py
@@ -1,14 +1,14 @@
-from zope.interface import implements
+# -*- coding: utf-8 -*-
+from Products.CMFCore.utils import getToolByName
+from z3c.formwidget.query.interfaces import IQuerySource
 from zope.component import getUtility
+from zope.interface import implementer
 from zope.intid.interfaces import IIntIds
-
-from z3c.formwidget.query.interfaces import IQuerySource
 from zope.schema.vocabulary import SimpleVocabulary
 
-from Products.CMFCore.utils import getToolByName
 
+@implementer(IQuerySource)
 class CMFContentSearchSource(object):
-    implements(IQuerySource)
 
     def __init__(self, context):
         self.context = context
@@ -24,15 +24,21 @@ def __len__(self):
         return 0
 
     def getTerm(self, obj):
-        return SimpleVocabulary.createTerm(obj, self.intid_utility.getId(obj),
-                                           obj.Title())
+        return SimpleVocabulary.createTerm(
+            obj,
+            self.intid_utility.getId(obj),
+            obj.Title()
+        )
 
     def getTermByToken(self, value):
         return self.getTerm(self.intid_utility.getObject(int(value)))
 
     def search(self, query_string):
         catalog = getToolByName(self.context, 'portal_catalog')
-        result = catalog(SearchableText='%s*' % query_string, sort_limit=20)
+        result = catalog(
+            SearchableText='{0:s}*'.format(query_string),
+            sort_limit=20
+        )
         terms = []
         for brain in result:
             try:
@@ -41,4 +47,4 @@ def search(self, query_string):
                 # An object without an intid in the catalog results
                 continue
             terms.append(term)
-        return terms
\ No newline at end of file
+        return terms
diff --git a/plone/app/relationfield/supermodel.py b/plone/app/relationfield/supermodel.py
index 557b7b6..9ae3bb4 100644
--- a/plone/app/relationfield/supermodel.py
+++ b/plone/app/relationfield/supermodel.py
@@ -1,12 +1,11 @@
 # -*- coding: utf-8 -*-
+from plone.app.vocabularies.catalog import CatalogSource
 from plone.supermodel.exportimport import BaseHandler
 from plone.supermodel.utils import valueToElement
 from z3c.relationfield.schema import RelationChoice
 from z3c.relationfield.schema import RelationList
 from zope import schema
 
-from plone.app.vocabularies.catalog import CatalogSource
-
 
 class RelationChoiceBaseHandler(BaseHandler):
 
diff --git a/plone/app/relationfield/testing.py b/plone/app/relationfield/testing.py
index 7008cab..aae0be4 100644
--- a/plone/app/relationfield/testing.py
+++ b/plone/app/relationfield/testing.py
@@ -6,20 +6,23 @@
 from plone.app.testing import PloneSandboxLayer
 from z3c.relationfield import RelationList
 from z3c.relationfield.interfaces import IHasRelations
-import zope.interface
+from zope.interface import implementer
+from zope.interface import Interface
+
 import zope.schema
 
+
 if HAS_CONTENTTYPES:
     from plone.app.contenttypes.testing import \
         PLONE_APP_CONTENTTYPES_FIXTURE
 
 
-class IAddress(zope.interface.Interface):
+class IAddress(Interface):
     streetname = zope.schema.TextLine(title=u'Street name')
     city = zope.schema.TextLine(title=u'City')
 
 
-@zope.interface.implementer(IAddress, IHasRelations)
+@implementer(IAddress, IHasRelations)
 class Address(Persistent):
     __name__ = u''
     streetname = u''
@@ -40,7 +43,7 @@ class IPerson(zope.interface.Interface):
     addresses = RelationList(title=u'Addresses')
 
 
-@zope.interface.implementer(IPerson, IHasRelations)
+@implementer(IPerson, IHasRelations)
 class Person(Persistent):
     name = u''
 
@@ -64,7 +67,9 @@ def setUpPloneSite(self, portal):
 
 FIXTURE = PloneAppRelationfieldFixture()
 FUNCTIONAL_TESTING = FunctionalTesting(
-    bases=(FIXTURE,), name="plone.app.relationfield:Functional")
+    bases=(FIXTURE,),
+    name='plone.app.relationfield:Functional'
+)
 
 
 class PloneAppRelationfieldContentTreeFixture(PloneSandboxLayer):
@@ -94,7 +99,8 @@ def setUpPloneSite(self, portal):
 
 FUNCTIONAL_CONTENTTREE_TESTING = FunctionalTesting(
     bases=(CONTENTTREE_FIXTURE,),
-    name="plone.app.relationfield.contenttree:Functional")
+    name='plone.app.relationfield.contenttree:Functional'
+)
 
 
 class PloneAppRelationfieldWidgetsFixture(PloneSandboxLayer):
@@ -124,4 +130,5 @@ def setUpPloneSite(self, portal):
 
 FUNCTIONAL_WIDGETS_TESTING = FunctionalTesting(
     bases=(WIDGETS_FIXTURE,),
-    name="plone.app.relationfield.contenttree:Functional")
+    name='plone.app.relationfield.contenttree:Functional'
+)
diff --git a/plone/app/relationfield/tests/test_marshall.py b/plone/app/relationfield/tests/test_marshall.py
index dea7917..47f2f9a 100644
--- a/plone/app/relationfield/tests/test_marshall.py
+++ b/plone/app/relationfield/tests/test_marshall.py
@@ -1,12 +1,12 @@
 # -*- coding: utf-8 -*-
-import doctest
-from unittest import TestSuite
-
 from plone.testing import layered
 from plone.testing.zca import ZCMLSandbox
+from unittest import TestSuite
 
+import doctest
 import plone.app.relationfield.tests
 
+
 ZCML_SANDBOX = ZCMLSandbox(
     filename='test_marshall.zcml',
     package=plone.app.relationfield.tests
@@ -20,7 +20,7 @@ def test_suite():
         doctest.DocFileSuite(
             '../marshaler.rst',
             optionflags=OPTIONFLAGS,
-            package="plone.app.relationfield.tests",
+            package='plone.app.relationfield.tests',
         ),
         layer=ZCML_SANDBOX)
     )
diff --git a/plone/app/relationfield/tests/test_schemaeditor.py b/plone/app/relationfield/tests/test_schemaeditor.py
index 679e903..01e1d0f 100644
--- a/plone/app/relationfield/tests/test_schemaeditor.py
+++ b/plone/app/relationfield/tests/test_schemaeditor.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
 from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING
 from plone.testing import layered
+
 import doctest
 import os
 import unittest
 
+
 optionflags = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE)
 
diff --git a/plone/app/relationfield/tests/test_supermodel.py b/plone/app/relationfield/tests/test_supermodel.py
index ef38074..5fbaab1 100644
--- a/plone/app/relationfield/tests/test_supermodel.py
+++ b/plone/app/relationfield/tests/test_supermodel.py
@@ -1,10 +1,12 @@
 # -*- coding: utf-8 -*-
 from plone.app.relationfield.testing import FUNCTIONAL_WIDGETS_TESTING
 from plone.testing import layered
+
 import doctest
 import os
 import unittest
 
+
 optionflags = (doctest.ELLIPSIS |
                doctest.NORMALIZE_WHITESPACE)
 
diff --git a/plone/app/relationfield/tests/test_widget.py b/plone/app/relationfield/tests/test_widget.py
index b36efe8..82ba999 100644
--- a/plone/app/relationfield/tests/test_widget.py
+++ b/plone/app/relationfield/tests/test_widget.py
@@ -1,13 +1,16 @@
-import unittest2 as unittest
-from plone.app.relationfield.testing import FUNCTIONAL_TESTING
-from plone.app.relationfield.testing import IPerson, Person
+# -*- coding: utf-8 -*-
 from plone.app.relationfield.testing import Address
-
-from z3c.form.interfaces import IDataManager
+from plone.app.relationfield.testing import FUNCTIONAL_TESTING
+from plone.app.relationfield.testing import IPerson
+from plone.app.relationfield.testing import Person
 from plone.app.relationfield.widget import RelationListDictDataManager
-from zope.component import getUtility, getMultiAdapter
-from zope.intid.interfaces import IIntIds
+from z3c.form.interfaces import IDataManager
 from z3c.relationfield.interfaces import IRelationValue
+from zope.component import getMultiAdapter
+from zope.component import getUtility
+from zope.intid.interfaces import IIntIds
+
+import unittest2 as unittest
 
 
 class RelationListDictDataManagerTest(unittest.TestCase):
diff --git a/plone/app/relationfield/widget.py b/plone/app/relationfield/widget.py
index 4a1dc08..08f7c82 100644
--- a/plone/app/relationfield/widget.py
+++ b/plone/app/relationfield/widget.py
@@ -1,21 +1,22 @@
-from zope.component import adapts, getUtility
+# -*- coding: utf-8 -*-
+from z3c.form.datamanager import AttributeField
+from z3c.form.datamanager import DictionaryField
+from z3c.form.interfaces import NO_VALUE
+from z3c.relationfield.interfaces import IRelation
+from z3c.relationfield.interfaces import IRelationList
+from z3c.relationfield.interfaces import IRelationValue
+from z3c.relationfield.relation import RelationValue
+from zope.component import adapter
+from zope.component import getUtility
 from zope.interface import Interface
 from zope.intid.interfaces import IIntIds
 from zope.security.interfaces import ForbiddenAttribute
-from z3c.relationfield.interfaces import (
-    IRelation,
-    IRelationValue,
-    IRelationList
-)
-from z3c.relationfield.relation import RelationValue
-from z3c.form.interfaces import NO_VALUE
-from z3c.form.datamanager import AttributeField, DictionaryField
 
 
+@adapter(Interface, IRelation)
 class RelationDataManager(AttributeField):
     """A data manager which uses the z3c.relationfield api to set
     relationships using a schema field."""
-    adapts(Interface, IRelation)
 
     def get(self):
         """Gets the target"""
@@ -52,10 +53,10 @@ def set(self, value):
             super(RelationDataManager, self).set(rel)
 
 
+@adapter(dict, IRelation)
 class RelationDictDataManager(DictionaryField):
     """A data manager which uses the z3c.relationfield api to set
     relationships using a schema field, for dict-like contexts."""
-    adapts(dict, IRelation)
 
     def get(self):
         """Gets the target"""
@@ -104,9 +105,9 @@ def set(self, value):
             super(RelationDictDataManager, self).set(rel)
 
 
+@adapter(Interface, IRelationList)
 class RelationListDataManager(AttributeField):
     """A data manager which sets a list of relations"""
-    adapts(Interface, IRelationList)
 
     def get(self):
         """Gets the target"""
@@ -142,9 +143,9 @@ def set(self, value):
         super(RelationListDataManager, self).set(new_relationships)
 
 
+@adapter(dict, IRelationList)
 class RelationListDictDataManager(DictionaryField):
     """A data manager which sets a list of relations on dictionary"""
-    adapts(dict, IRelationList)
 
     def get(self):
         """Gets the target"""
diff --git a/setup.py b/setup.py
index c2e0719..e7d2bf3 100644
--- a/setup.py
+++ b/setup.py
@@ -1,21 +1,24 @@
-from setuptools import setup, find_packages
+# -*- coding: utf-8 -*-
+from setuptools import find_packages
+from setuptools import setup
+
 
 version = '1.3.3.dev0'
 
 setup(
     name='plone.app.relationfield',
     version=version,
-    description="Plone support for z3c.relationfield",
-    long_description=(open("README.rst").read() + "\n" +
-                      open("CHANGES.rst").read()),
+    description='Plone support for z3c.relationfield',
+    long_description=(open('README.rst').read() + '\n' +
+                      open('CHANGES.rst').read()),
     # Get more strings from
     # https://pypi.python.org/pypi?%3Aaction=list_classifiers
     classifiers=[
-        "Framework :: Plone",
-        "Framework :: Plone :: 5.0",
-        "Programming Language :: Python",
-        "Programming Language :: Python :: 2.7",
-        "Topic :: Software Development :: Libraries :: Python Modules",
+        'Framework :: Plone',
+        'Framework :: Plone :: 5.0',
+        'Programming Language :: Python',
+        'Programming Language :: Python :: 2.7',
+        'Topic :: Software Development :: Libraries :: Python Modules',
     ],
     keywords='dexterity relations plone zc.relation',
     author='Alec Mitchell',


