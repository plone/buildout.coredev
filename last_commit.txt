Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-03-16T11:20:06+01:00
Author: Tiberiu Ichim (tiberiuichim) <tiberiuichim@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/b91a8fd75b8b6b577119e959001cce317e6545dd

Optional search endpoint follows site settings (#1081)

* Move filtering code to search handler

* Minimize git diff

* Add tests for use_site_search_settings

* Add a paragraph of doc

* Fix navigation root test

* Add changelog entry

* Run black

Files changed:
A news/1081.feature
M docs/source/searching.rst
M src/plone/restapi/search/handler.py
M src/plone/restapi/services/search/get.py
M src/plone/restapi/tests/test_search.py

b'diff --git a/docs/source/searching.rst b/docs/source/searching.rst\nindex cd70f4a75..9e2ce3c28 100644\n--- a/docs/source/searching.rst\n+++ b/docs/source/searching.rst\n@@ -46,7 +46,6 @@ In order to return specific metadata columns, see the documentation of the ``met\n         This is done in order to match also the partial results of the beginning of a search term(s).\n         The plone.restapi @search endpoint will not do that for you. You\'ll have to add it if you want to keep this feature.\n \n-\n Query format\n ------------\n \n@@ -163,3 +162,8 @@ You do so by specifying the ``fullobjects`` parameter:\n .. warning::\n \n     Be aware that this might induce performance issues when retrieving a lot of resources. Normally the search just serializes catalog brains, but with ``fullobjects``, we wake up all the returned objects.\n+\n+\n+Restrict search results to Plone\'s search settings\n+--------------------------------------------------\n+By default the search endpoint is not excluding any types from its results. To allow the search to follow Plone\'s search settings schema, pass the ``use_site_search_settings=1`` to the ``@search`` endpoint request. By doing this, the search results will be filtered based on the defined types to be searched and will be sorted according to the default sorting order.\ndiff --git a/news/1081.feature b/news/1081.feature\nnew file mode 100644\nindex 000000000..56f2292f0\n--- /dev/null\n+++ b/news/1081.feature\n@@ -0,0 +1 @@\n+Allow passing ``use_site_search_settings=1`` in the ``@search`` endpoint request, to follow Plone\'s ``ISearchSchema`` settings.\ndiff --git a/src/plone/restapi/search/handler.py b/src/plone/restapi/search/handler.py\nindex 1b310aee8..f07b16c6d 100644\n--- a/src/plone/restapi/search/handler.py\n+++ b/src/plone/restapi/search/handler.py\n@@ -1,8 +1,20 @@\n # -*- coding: utf-8 -*-\n+from plone.registry.interfaces import IRegistry\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import IZCatalogCompatibleQuery\n from Products.CMFCore.utils import getToolByName\n+from Products.CMFPlone.browser.navtree import getNavigationRoot\n from zope.component import getMultiAdapter\n+from zope.component import getUtility\n+\n+\n+try:\n+    from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n+    from Products.CMFPlone.interfaces import ISearchSchema\n+except ImportError:\n+    PLONE5 = False\n+else:\n+    PLONE5 = True\n \n \n class SearchHandler(object):\n@@ -74,11 +86,64 @@ def search(self, query=None):\n         else:\n             fullobjects = False\n \n+        use_site_search_settings = False\n+\n+        if "use_site_search_settings" in query:\n+            use_site_search_settings = True\n+            del query["use_site_search_settings"]\n+\n+        if PLONE5 and use_site_search_settings:\n+            query = self.filter_query(query)\n+\n         self._constrain_query_by_path(query)\n         query = self._parse_query(query)\n+\n         lazy_resultset = self.catalog.searchResults(**query)\n         results = getMultiAdapter((lazy_resultset, self.request), ISerializeToJson)(\n             fullobjects=fullobjects\n         )\n \n         return results\n+\n+    def filter_types(self, types):\n+        plone_utils = getToolByName(self.context, "plone_utils")\n+        if not isinstance(types, list):\n+            types = [types]\n+        return plone_utils.getUserFriendlyTypes(types)\n+\n+    def filter_query(self, query):\n+        registry = getUtility(IRegistry)\n+        search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n+\n+        types = query.get("portal_type", [])\n+        if "query" in types:\n+            types = types["query"]\n+        query["portal_type"] = self.filter_types(types)\n+\n+        # respect effective/expiration date\n+        query["show_inactive"] = False\n+\n+        # respect navigation root\n+        if "path" not in query:\n+            query["path"] = {"query": getNavigationRoot(self.context)}\n+\n+        default_sort_on = search_settings.sort_on\n+\n+        if "sort_on" not in query:\n+            if default_sort_on != "relevance":\n+                query["sort_on"] = self.default_sort_on\n+        elif query["sort_on"] == "relevance":\n+            del query["sort_on"]\n+\n+        if not query.get("sort_order") and (\n+            query.get("sort_on", "") == "Date"\n+            or query.get("sort_on", "") == "effective"  # compatibility with Volto\n+        ):\n+            query["sort_order"] = "reverse"\n+        elif "sort_order" in query:\n+            del query["sort_order"]\n+\n+        if "sort_order" in query and not query["sort_order"]:\n+            del query["sort_order"]\n+\n+        return query\ndiff --git a/src/plone/restapi/services/search/get.py b/src/plone/restapi/services/search/get.py\nindex 1135a1e8e..46acd9b44 100644\n--- a/src/plone/restapi/services/search/get.py\n+++ b/src/plone/restapi/services/search/get.py\n@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+\n from plone.restapi.search.handler import SearchHandler\n from plone.restapi.search.utils import unflatten_dotted_dict\n from plone.restapi.services import Service\ndiff --git a/src/plone/restapi/tests/test_search.py b/src/plone/restapi/tests/test_search.py\nindex 64c158d6f..b83a88ca6 100644\n--- a/src/plone/restapi/tests/test_search.py\n+++ b/src/plone/restapi/tests/test_search.py\n@@ -16,12 +16,16 @@\n from plone.uuid.interfaces import IMutableUUID\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n+from zope.interface import alsoProvides\n+from zope.interface import noLongerProvides\n \n import six\n import transaction\n import unittest\n \n+\n try:\n+    from plone.app.layout.navigation.interfaces import INavigationRoot\n     from Products.CMFPlone.factory import _IMREALLYPLONE5  # noqa\n except ImportError:\n     PLONE5 = False\n@@ -664,6 +668,70 @@ def test_respect_access_inactive_permission(self):\n         ).json()\n         self.assertEqual(response["items_total"], 1)\n \n+    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n+    def test_search_use_site_search_settings_for_types(self):\n+        response = self.api_session.get(\n+            "/@search", params={"use_site_search_settings": 1}\n+        ).json()\n+        types = set([item["@type"] for item in response["items"]])\n+\n+        self.assertEqual(set(types), set(["Folder", "DXTestDocument"]))\n+\n+        registry = getUtility(IRegistry)\n+        from Products.CMFPlone.interfaces import ISearchSchema\n+\n+        search_settings = registry.forInterface(ISearchSchema, prefix="plone")\n+        old = search_settings.types_not_searched\n+        search_settings.types_not_searched += ("DXTestDocument",)\n+        transaction.commit()\n+\n+        response = self.api_session.get(\n+            "/@search", params={"use_site_search_settings": 1}\n+        ).json()\n+        types = set([item["@type"] for item in response["items"]])\n+\n+        self.assertEqual(set(types), set(["Folder"]))\n+        search_settings.types_not_searched = old\n+        transaction.commit()\n+\n+    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n+    def test_search_use_site_search_settings_for_default_sort_order(self):\n+        response = self.api_session.get(\n+            "/@search", params={"use_site_search_settings": 1}\n+        ).json()\n+        titles = [\n+            u"Some Folder",\n+            u"Lorem Ipsum",\n+            u"Other Document",\n+            u"Another Folder",\n+            u"Document in second folder",\n+            u"Doc outside folder",\n+        ]\n+        self.assertEqual([item["title"] for item in response["items"]], titles)\n+\n+        response = self.api_session.get(\n+            "/@search", params={"use_site_search_settings": 1, "sort_on": "effective"}\n+        ).json()\n+        self.assertEqual(\n+            [item["title"] for item in response["items"]][0],\n+            u"Other Document",\n+        )\n+\n+    @unittest.skipIf(not PLONE5, "No ISearchSchema in Plone 4")\n+    def test_search_use_site_search_settings_with_navigation_root(self):\n+\n+        alsoProvides(self.folder, INavigationRoot)\n+        transaction.commit()\n+\n+        response = self.api_session.get(\n+            "/folder/@search", params={"use_site_search_settings": 1}\n+        ).json()\n+        titles = [u"Some Folder", u"Lorem Ipsum", u"Other Document"]\n+        self.assertEqual([item["title"] for item in response["items"]], titles)\n+\n+        noLongerProvides(self.folder, INavigationRoot)\n+        transaction.commit()\n+\n \n class TestSearchATFunctional(unittest.TestCase):\n     layer = PLONE_RESTAPI_AT_FUNCTIONAL_TESTING\n'

