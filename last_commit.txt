Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-03-27T09:48:31+01:00
Author: me@jeffersonbledsoe.com (JeffersonBledsoe) <me@jeffersonbledsoe.com>
Commit: https://github.com/plone/plone.app.caching/commit/d1b1214fd6d43044a24017f146647df937f1ae79

Return lock-token in etag for invalidating cache when getting info on locked content

Files changed:
M plone/app/caching/operations/etags.py

b'diff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 8187172..5bb4f1c 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -4,6 +4,7 @@\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n from plone.base.utils import safe_hasattr\n+from plone.locking.interfaces import ILockable\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n from Products.CMFCore.utils import getToolByName\n@@ -157,12 +158,16 @@ def __init__(self, published, request):\n \n     def __call__(self):\n         context = getContext(self.published)\n-        context_state = queryMultiAdapter(\n-            (context, self.request), name="plone_context_state"\n-        )\n-        if context_state is None:\n-            return\n-        return "1" if context_state.is_locked() else "0"\n+        lock = ILockable(context)\n+\n+        if not lock or not lock.lock_info():\n+            return "0"\n+        lock_info = lock.lock_info()\n+\n+        if not lock_info:\n+            return "0"\n+\n+        return lock_info[0][\'token\']\n \n \n @implementer(IETagValue)\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-03-27T21:38:15Z
Author: pre-commit-ci[bot] (pre-commit-ci[bot]) <66853113+pre-commit-ci[bot]@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.caching/commit/a695f8f4e2446dbb99f9bca1e54f607962070813

[pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

Files changed:
M plone/app/caching/operations/etags.py

b'diff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 5bb4f1c..da79a63 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -167,7 +167,7 @@ def __call__(self):\n         if not lock_info:\n             return "0"\n \n-        return lock_info[0][\'token\']\n+        return lock_info[0]["token"]\n \n \n @implementer(IETagValue)\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-03-28T17:10:51+01:00
Author: me@jeffersonbledsoe.com (JeffersonBledsoe) <me@jeffersonbledsoe.com>
Commit: https://github.com/plone/plone.app.caching/commit/5f287b8b016fa6e38b0899632242bbc539bc635b

Update to use adapterQuery for lockable

Files changed:
M plone/app/caching/operations/etags.py

b'diff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex da79a63..46921ff 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -4,7 +4,6 @@\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n from plone.base.utils import safe_hasattr\n-from plone.locking.interfaces import ILockable\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n from Products.CMFCore.utils import getToolByName\n@@ -158,16 +157,16 @@ def __init__(self, published, request):\n \n     def __call__(self):\n         context = getContext(self.published)\n-        lock = ILockable(context)\n+        lock = queryMultiAdapter((context, self.request), name="plone_lock_info")\n \n         if not lock or not lock.lock_info():\n             return "0"\n-        lock_info = lock.lock_info()\n \n+        lock_info = lock.lock_info()\n         if not lock_info:\n             return "0"\n \n-        return lock_info[0]["token"]\n+        return lock_info["token"]\n \n \n @implementer(IETagValue)\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-10-19T08:46:45-07:00
Author: David Glick (davisagli) <david.glick@plone.org>
Commit: https://github.com/plone/plone.app.caching/commit/6331bce1d060de733358ff224d2bd55d28adeb52

Merge branch 'master' into locking-etag-token

Files changed:
A .flake8
A .github/workflows/meta.yml
A news/.changelog_template.jinja
M .editorconfig
M .gitignore
M .meta.toml
M .pre-commit-config.yaml
M CHANGES.md
M plone/app/caching/operations/default.py
M plone/app/caching/operations/etags.py
M plone/app/caching/tests/test_integration.py
M plone/app/caching/tests/test_operation_default.py
M plone/app/caching/tests/test_operation_parameters.py
M plone/app/caching/tests/test_profile_with_caching_proxy.py
M plone/app/caching/tests/test_profile_without_caching_proxy.py
M plone/app/caching/tests/test_purge.py
M plone/app/caching/tests/test_utils.py
M pyproject.toml
M setup.py
M tox.ini
D docs/changelog_template.jinja
D setup.cfg

b'diff --git a/.editorconfig b/.editorconfig\nindex b4158b8..bb09dd7 100644\n--- a/.editorconfig\n+++ b/.editorconfig\n@@ -1,5 +1,6 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n #\n # EditorConfig Configuration file, for more details see:\n # http://EditorConfig.org\n@@ -37,3 +38,12 @@ indent_size = 2\n indent_style = tab\n indent_size = unset\n tab_width = unset\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [editorconfig]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/setup.cfg b/.flake8\nsimilarity index 56%\nrename from setup.cfg\nrename to .flake8\nindex edba85f..c156803 100644\n--- a/setup.cfg\n+++ b/.flake8\n@@ -1,8 +1,6 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n-[bdist_wheel]\n-universal = 0\n-\n+# See the inline comments on how to expand/tweak this configuration file\n [flake8]\n doctests = 1\n ignore =\n@@ -14,17 +12,3 @@ ignore =\n     E203,\n     # black takes care of spaces after commas\n     E231,\n-\n-[check-manifest]\n-ignore =\n-    .editorconfig\n-    .meta.toml\n-    .pre-commit-config.yaml\n-    tox.ini\n-    lint-requirements.txt\n-    .tox\n-    constraints-mxdev.txt\n-    instance.yaml\n-    Makefile\n-    mx.ini\n-    requirements-mxdev.txt\ndiff --git a/.github/workflows/meta.yml b/.github/workflows/meta.yml\nnew file mode 100644\nindex 0000000..4748f0f\n--- /dev/null\n+++ b/.github/workflows/meta.yml\n@@ -0,0 +1,28 @@\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+name: Meta\n+on:\n+  push:\n+    branches:\n+      - master\n+      - main\n+  pull_request:\n+    branches:\n+      - master\n+      - main\n+  workflow_dispatch:\n+\n+jobs:\n+  qa:\n+    uses: plone/meta/.github/workflows/qa.yml@master\n+  test:\n+    uses: plone/meta/.github/workflows/test.yml@master\n+  coverage:\n+    uses: plone/meta/.github/workflows/coverage.yml@master\n+  dependencies:\n+    uses: plone/meta/.github/workflows/dependencies.yml@master\n+  release-ready:\n+    uses: plone/meta/.github/workflows/release_ready.yml@master\n+  circular:\n+    uses: plone/meta/.github/workflows/circular.yml@master\ndiff --git a/.gitignore b/.gitignore\nindex e1a30dc..f89f86b 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,19 +1,49 @@\n-*~\n+# Generated from:\n+# https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n+# python related\n *.egg-info\n-*.mo\n *.pyc\n-.installed.cfg\n+*.pyo\n+\n+# tools related\n+build/\n+.coverage\n+coverage.xml\n+dist/\n+docs/_build\n+__pycache__/\n+.tox\n+.vscode/\n+\n+# venv / buildout related\n bin/\n develop-eggs/\n-downloads/\n eggs/\n-include/\n-instance/\n+.eggs/\n+etc/\n+.installed.cfg\n lib/\n+lib64\n+.mr.developer.cfg\n parts/\n+pyvenv.cfg\n var/\n-# Tox\n-.tox\n+\n # mxdev\n-constraints-mxdev.txt\n-requirements-mxdev.txt\n+/instance/\n+/.make-sentinels/\n+/*-mxdev.txt\n+/reports/\n+/sources/\n+/venv/\n+.installed.txt\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/.meta.toml b/.meta.toml\nindex ad7470f..8a1eca0 100644\n--- a/.meta.toml\n+++ b/.meta.toml\n@@ -1,25 +1,17 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [meta]\n template = "default"\n-commit-id = "13d8d6c0"\n+commit-id = "e08b1234"\n \n-[dependencies]\n-mappings = [\n-    "Zope = [\'OFS\', \'Products.Five\', \'Products.PageTemplates\', \'ZPublisher\']",\n-    "python-dateutil = [\'dateutil\']",\n-    ]\n-ignores = "[\'zope.dublincore\']"\n-\n-[check-manifest]\n-additional-ignores = [\n+[pyproject]\n+check_manifest_ignores = """\n     ".tox",\n     "constraints-mxdev.txt",\n     "instance.yaml",\n     "Makefile",\n-    "mx.ini",\n     "requirements-mxdev.txt",\n-    ]\n-\n-[codespell]\n-additional-ignores = "discreet,ordner"\n+"""\n+codespell_ignores = "ordner"\n+dependencies_ignores = "[\'zope.dublincore\']"\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex 582f8ac..34d8160 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -1,12 +1,13 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n ci:\n     autofix_prs: false\n     autoupdate_schedule: monthly\n \n repos:\n -   repo: https://github.com/asottile/pyupgrade\n-    rev: v3.3.1\n+    rev: v3.8.0\n     hooks:\n     -   id: pyupgrade\n         args: [--py38-plus]\n@@ -15,11 +16,11 @@ repos:\n     hooks:\n     -   id: isort\n -   repo: https://github.com/psf/black\n-    rev: 23.1.0\n+    rev: 23.3.0\n     hooks:\n     -   id: black\n -   repo: https://github.com/collective/zpretty\n-    rev: 3.0.2\n+    rev: 3.1.0\n     hooks:\n     -   id: zpretty\n -   repo: https://github.com/PyCQA/flake8\n@@ -27,11 +28,19 @@ repos:\n     hooks:\n     -   id: flake8\n -   repo: https://github.com/codespell-project/codespell\n-    rev: v2.2.2\n+    rev: v2.2.5\n     hooks:\n     -   id: codespell\n         additional_dependencies:\n           - tomli\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  codespell_extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\n -   repo: https://github.com/mgedmin/check-manifest\n     rev: "0.49"\n     hooks:\n@@ -40,3 +49,20 @@ repos:\n     rev: "4.2"\n     hooks:\n     -   id: pyroma\n+-   repo: https://github.com/mgedmin/check-python-versions\n+    rev: "0.21.3"\n+    hooks:\n+    -   id: check-python-versions\n+        args: [\'--only\', \'setup.py,pyproject.toml\']\n+-   repo: https://github.com/collective/i18ndude\n+    rev: "6.0.0"\n+    hooks:\n+    -   id: i18ndude\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pre_commit]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/CHANGES.md b/CHANGES.md\nindex 881ddad..340b8b7 100644\n--- a/CHANGES.md\n+++ b/CHANGES.md\n@@ -9,6 +9,52 @@\n \n <!-- towncrier release notes start -->\n \n+## 3.1.2 (2023-06-16)\n+\n+\n+### Internal:\n+\n+- Update configuration files.\n+  [plone devs] e08b1234, fb4615d7\n+\n+\n+### Tests\n+\n+- Fixed tests that compared a stable time with a ten year old Expires handler.\n+  [maurits] #127\n+\n+\n+## 3.1.1 (2023-05-15)\n+\n+\n+### Tests\n+\n+- Changed hardcoded test date to June instead of May to temporarily fix a testing error.\n+  See `issue 127 <https://github.com/plone/plone.app.caching/issues/127>`_.\n+  Needs a proper fix within a month.\n+  [maurits] #127\n+\n+\n+## 3.1.0 (2023-04-26)\n+\n+\n+### New features:\n+\n+- Update the resourceRegistries ETag to use the config registry modification time.\n+  This time is set since Plone 6.0.4.\n+  Fixes `issue 93 <https://github.com/plone/plone.app.caching/issues/93>`_.\n+  [maurits] #93\n+\n+\n+## 3.0.5 (2023-04-14)\n+\n+\n+### Bug fixes:\n+\n+- Fix spelling error.\n+  [gforcada] #124\n+\n+\n ## 3.0.4 (2023-03-14)\n \n \ndiff --git a/docs/changelog_template.jinja b/news/.changelog_template.jinja\nsimilarity index 100%\nrename from docs/changelog_template.jinja\nrename to news/.changelog_template.jinja\ndiff --git a/plone/app/caching/operations/default.py b/plone/app/caching/operations/default.py\nindex c129c03..2cf4f8c 100644\n--- a/plone/app/caching/operations/default.py\n+++ b/plone/app/caching/operations/default.py\n@@ -273,7 +273,7 @@ class ModerateCaching(BaseCaching):\n     description = _(\n         "Cache in browser but expire immediately (same as \'weak caching\'), "\n         "and cache in proxy (default: 24 hrs). "\n-        "Use a purgable caching reverse proxy for best results. "\n+        "Use a purgeable caching reverse proxy for best results. "\n         "Caution: If proxy cannot be purged, or cannot be configured "\n         "to remove the \'s-maxage\' token from the response, then stale "\n         "responses might be seen until the cached entry expires."\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 46921ff..f243645 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -4,11 +4,10 @@\n from plone.app.caching.operations.utils import getContext\n from plone.app.caching.operations.utils import getLastModifiedAnnotation\n from plone.base.utils import safe_hasattr\n+from plone.registry.interfaces import IRegistry\n from Products.CMFCore.interfaces import ICatalogTool\n from Products.CMFCore.interfaces import IMembershipTool\n from Products.CMFCore.utils import getToolByName\n-from Products.CMFPlone.resources.utils import get_override_directory\n-from Products.CMFPlone.resources.utils import PRODUCTION_RESOURCE_DIRECTORY\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import queryUtility\n@@ -19,6 +18,13 @@\n import time\n \n \n+try:\n+    # available since Plone 6.0.4\n+    from Products.CMFPlone.resources.browser.resource import _RESOURCE_REGISTRY_MTIME\n+except ImportError:\n+    _RESOURCE_REGISTRY_MTIME = None\n+\n+\n @implementer(IETagValue)\n @adapter(Interface, Interface)\n class UserID:\n@@ -243,22 +249,15 @@ def __init__(self, published, request):\n         self.request = request\n \n     def __call__(self):\n-        context = getContext(self.published)\n-        container = get_override_directory(context)\n-        if PRODUCTION_RESOURCE_DIRECTORY not in container:\n+        if _RESOURCE_REGISTRY_MTIME is None:\n             return ""\n-        production_folder = container[PRODUCTION_RESOURCE_DIRECTORY]\n-        filename = "timestamp.txt"\n-        if filename not in production_folder:\n+        registry = queryUtility(IRegistry)\n+        if registry is None:\n             return ""\n-        timestamp = production_folder.readFile(filename)\n-        if not timestamp:\n+        mtime = getattr(registry, _RESOURCE_REGISTRY_MTIME, None)\n+        if mtime is None:\n             return ""\n-        # timestamp is in bytes, and we must return a string.\n-        # On Python 2 this is the same, but not on Python 3.\n-        if not isinstance(timestamp, str):\n-            timestamp = timestamp.decode("utf-8")\n-        return timestamp\n+        return str(mtime)\n \n \n @implementer(IETagValue)\ndiff --git a/plone/app/caching/tests/test_integration.py b/plone/app/caching/tests/test_integration.py\nindex 7e00036..a6fd622 100644\n--- a/plone/app/caching/tests/test_integration.py\n+++ b/plone/app/caching/tests/test_integration.py\n@@ -14,7 +14,7 @@\n from plone.caching.interfaces import ICacheSettings\n from plone.namedfile.file import NamedImage\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n \ndiff --git a/plone/app/caching/tests/test_operation_default.py b/plone/app/caching/tests/test_operation_default.py\nindex 0b75a0b..7e81dbc 100644\n--- a/plone/app/caching/tests/test_operation_default.py\n+++ b/plone/app/caching/tests/test_operation_default.py\n@@ -6,7 +6,7 @@\n from plone.app.testing import TEST_USER_PASSWORD\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n \ndiff --git a/plone/app/caching/tests/test_operation_parameters.py b/plone/app/caching/tests/test_operation_parameters.py\nindex 0f5923a..ff6be35 100644\n--- a/plone/app/caching/tests/test_operation_parameters.py\n+++ b/plone/app/caching/tests/test_operation_parameters.py\n@@ -6,7 +6,7 @@\n from plone.app.textfield.value import RichTextValue\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n \ndiff --git a/plone/app/caching/tests/test_profile_with_caching_proxy.py b/plone/app/caching/tests/test_profile_with_caching_proxy.py\nindex 8df999a..e99fa42 100644\n--- a/plone/app/caching/tests/test_profile_with_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_with_caching_proxy.py\n@@ -16,7 +16,7 @@\n from plone.cachepurging.interfaces import IPurger\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.FSFile import FSFile\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n@@ -68,17 +68,17 @@ def setUp(self):\n     def tearDown(self):\n         setRequest(None)\n \n-    def test_composite_viewsxx(self):\n+    def test_composite_views(self):\n         # This is a clone of the same test for \'without-caching-proxy\'\n         # Can we just call that test from this context?\n \n         catalog = self.portal["portal_catalog"]\n-        skins_tool = self.portal["portal_skins"]\n+        default_skin = self.portal["portal_skins"].default_skin\n \n         # Add folder content\n         setRoles(self.portal, TEST_USER_ID, ("Manager",))\n         self.portal.invokeFactory("Folder", "f1")\n-        self.portal["f1"].title = "one"\n+        self.portal["f1"].title = "Folder one"\n         self.portal["f1"].description = "Folder one description"\n         self.portal["f1"].reindexObject()\n \n@@ -105,9 +105,16 @@ def test_composite_viewsxx(self):\n         # - turn on gzip?\n         # - set skin?  Maybe\n         # - leave status unlocked\n-        #\n+        # - set the mod date on the resource registries?  Probably.\n         transaction.commit()\n \n+        # Since Plone 6.0.4 we have a modification date on the registry.\n+        from Products.CMFPlone.resources.browser.resource import (\n+            _RESOURCE_REGISTRY_MTIME,\n+        )\n+\n+        mtime = str(getattr(self.registry, _RESOURCE_REGISTRY_MTIME))\n+\n         # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n@@ -124,10 +131,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Set the copy/cut cookie and then request the folder view again\n@@ -141,10 +146,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|1|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n         now = stable_now()\n@@ -163,10 +166,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"|test_user_1_|{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the authenticated page again -- to test RAM cache.\n@@ -205,7 +206,6 @@ def test_composite_viewsxx(self):\n         # Request the anonymous folder\n         now = stable_now()\n         browser = Browser(self.app)\n-        browser.handleErrors = False\n         browser.open(self.portal["f1"].absolute_url())\n         self.assertEqual("plone.content.folderView", browser.headers["X-Cache-Rule"])\n         self.assertEqual(\n@@ -215,10 +215,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page\n@@ -234,10 +232,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page again -- to test RAM cache.\n@@ -257,10 +253,8 @@ def test_composite_viewsxx(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        self.assertEqual(\n-            f\'"||{catalog.getCounter()}|en|{skins_tool.default_skin}|0|"\',\n-            normalize_etag(browser.headers["ETag"]),\n-        )\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n+        self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n         # Request the anonymous page again -- with an INM header to test 304.\ndiff --git a/plone/app/caching/tests/test_profile_without_caching_proxy.py b/plone/app/caching/tests/test_profile_without_caching_proxy.py\nindex 07a0585..49f2bf4 100644\n--- a/plone/app/caching/tests/test_profile_without_caching_proxy.py\n+++ b/plone/app/caching/tests/test_profile_without_caching_proxy.py\n@@ -12,7 +12,7 @@\n from plone.cachepurging.interfaces import ICachePurgingSettings\n from plone.caching.interfaces import ICacheSettings\n from plone.registry.interfaces import IRegistry\n-from plone.testing.z2 import Browser\n+from plone.testing.zope import Browser\n from Products.CMFCore.utils import getToolByName\n from zope.component import getUtility\n from zope.globalrequest import setRequest\n@@ -92,6 +92,13 @@ def test_composite_views(self):\n         # - set the mod date on the resource registries?  Probably.\n         transaction.commit()\n \n+        # Since Plone 6.0.4 we have a modification date on the registry.\n+        from Products.CMFPlone.resources.browser.resource import (\n+            _RESOURCE_REGISTRY_MTIME,\n+        )\n+\n+        mtime = str(getattr(self.registry, _RESOURCE_REGISTRY_MTIME))\n+\n         # Request the authenticated folder\n         now = stable_now()\n         browser = Browser(self.app)\n@@ -108,7 +115,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -123,7 +130,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|1|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n \n         # Request the authenticated page\n@@ -143,7 +150,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"|test_user_1_|{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -192,7 +199,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -209,7 +216,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \n@@ -230,7 +237,7 @@ def test_composite_views(self):\n         self.assertEqual(\n             "max-age=0, must-revalidate, private", browser.headers["Cache-Control"]\n         )\n-        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|"\'\n+        tag = f\'"||{catalog.getCounter()}|en|{default_skin}|0|{mtime}"\'\n         self.assertEqual(tag, normalize_etag(browser.headers["ETag"]))\n         self.assertGreater(now, dateutil.parser.parse(browser.headers["Expires"]))\n \ndiff --git a/plone/app/caching/tests/test_purge.py b/plone/app/caching/tests/test_purge.py\nindex a37acc6..b101758 100644\n--- a/plone/app/caching/tests/test_purge.py\n+++ b/plone/app/caching/tests/test_purge.py\n@@ -209,18 +209,22 @@ def test_parent_not_default_view(self):\n         self.assertEqual([], list(purger.getAbsolutePaths()))\n \n     def test_parent_default_view(self):\n+        from plone.app.caching.purge import HAS_RESTAPI\n+\n         context = FauxContent("default-view").__of__(FauxContent("bar"))\n         purger = ContentPurgePaths(context)\n+        expected = [\n+            "/bar/default-view/",\n+            "/bar/default-view/view",\n+            "/bar/default-view/default-view",\n+            "/bar",\n+            "/bar/",\n+            "/bar/view",\n+        ]\n+        if HAS_RESTAPI:\n+            expected.append("/bar/@comments")\n         self.assertEqual(\n-            [\n-                "/bar/default-view/",\n-                "/bar/default-view/view",\n-                "/bar/default-view/default-view",\n-                "/bar",\n-                "/bar/",\n-                "/bar/view",\n-                "/bar/@comments",\n-            ],\n+            expected,\n             list(purger.getRelativePaths()),\n         )\n         self.assertEqual([], list(purger.getAbsolutePaths()))\ndiff --git a/plone/app/caching/tests/test_utils.py b/plone/app/caching/tests/test_utils.py\nindex 2a8c003..03ebb69 100644\n--- a/plone/app/caching/tests/test_utils.py\n+++ b/plone/app/caching/tests/test_utils.py\n@@ -1,6 +1,7 @@\n from Acquisition import Explicit\n from datetime import date\n from datetime import datetime\n+from datetime import timedelta\n from plone.app.caching.interfaces import IPloneCacheSettings\n from plone.app.caching.utils import getObjectDefaultView\n from plone.app.caching.utils import isPurged\n@@ -25,9 +26,14 @@\n \n \n def stable_now():\n-    """Patch localized_now to allow stable results in tests."""\n+    """Patch localized_now to allow stable results in tests.\n+\n+    Note that a fixed date is not good enough:\n+    several tests compare this date with an Expires header,\n+    and this header may be set to ten years ago.\n+    """\n     tzinfo = pytz.timezone(TEST_TIMEZONE)\n-    now = datetime(2013, 5, 5, 10, 0, 0).replace(microsecond=0)\n+    now = datetime.now() - timedelta(days=1000)\n     now = tzinfo.localize(now)  # set tzinfo with correct DST offset\n     return now\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex ea13c1f..8ae213c 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,11 +1,12 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [tool.towncrier]\n-filename = "CHANGES.md"\n directory = "news/"\n+filename = "CHANGES.md"\n start_string = "<!-- towncrier release notes start -->\\n"\n title_format = "## {version} ({project_date})"\n-template = "docs/changelog_template.jinja"\n+template = "news/.changelog_template.jinja"\n underlines = ["", "", ""]\n \n [[tool.towncrier.type]]\n@@ -46,8 +47,95 @@ target-version = ["py38"]\n \n [tool.codespell]\n ignore-words-list = "discreet,ordner"\n+skip = "*.po,"\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  codespell_ignores = "foo,bar"\n+#  codespell_skip = "*.po,*.map,package-lock.json"\n+##\n \n [tool.dependencychecker]\n-ignore-packages = [\'zope.dublincore\']\n-Zope = [\'OFS\', \'Products.Five\', \'Products.PageTemplates\', \'ZPublisher\']\n+Zope = [\n+  # Zope own provided namespaces\n+  \'App\', \'OFS\', \'Products.Five\', \'Products.OFSP\', \'Products.PageTemplates\',\n+  \'Products.SiteAccess\', \'Shared\', \'Testing\', \'ZPublisher\', \'ZTUtils\',\n+  \'Zope2\', \'webdav\', \'zmi\',\n+  # ExtensionClass own provided namespaces\n+  \'ExtensionClass\', \'ComputedAttribute\', \'MethodObject\',\n+  # Zope dependencies\n+  \'AccessControl\', \'Acquisition\', \'AuthEncoding\', \'beautifulsoup4\', \'BTrees\',\n+  \'cffi\', \'Chameleon\', \'DateTime\', \'DocumentTemplate\',\n+  \'MultiMapping\', \'multipart\', \'PasteDeploy\', \'Persistence\', \'persistent\',\n+  \'pycparser\', \'python-gettext\', \'pytz\', \'RestrictedPython\', \'roman\',\n+  \'soupsieve\', \'transaction\', \'waitress\', \'WebOb\', \'WebTest\', \'WSGIProxy2\',\n+  \'z3c.pt\', \'zc.lockfile\', \'ZConfig\', \'zExceptions\', \'ZODB\', \'zodbpickle\',\n+  \'zope.annotation\', \'zope.browser\', \'zope.browsermenu\', \'zope.browserpage\',\n+  \'zope.browserresource\', \'zope.cachedescriptors\', \'zope.component\',\n+  \'zope.configuration\', \'zope.container\', \'zope.contentprovider\',\n+  \'zope.contenttype\', \'zope.datetime\', \'zope.deferredimport\',\n+  \'zope.deprecation\', \'zope.dottedname\', \'zope.event\', \'zope.exceptions\',\n+  \'zope.filerepresentation\', \'zope.globalrequest\', \'zope.hookable\',\n+  \'zope.i18n\', \'zope.i18nmessageid\', \'zope.interface\', \'zope.lifecycleevent\',\n+  \'zope.location\', \'zope.pagetemplate\', \'zope.processlifetime\', \'zope.proxy\',\n+  \'zope.ptresource\', \'zope.publisher\', \'zope.schema\', \'zope.security\',\n+  \'zope.sequencesort\', \'zope.site\', \'zope.size\', \'zope.structuredtext\',\n+  \'zope.tal\', \'zope.tales\', \'zope.testbrowser\', \'zope.testing\',\n+  \'zope.traversing\', \'zope.viewlet\'\n+]\n+\'Products.CMFCore\' = [\n+  \'docutils\', \'five.localsitemanager\', \'Missing\', \'Products.BTreeFolder2\',\n+  \'Products.GenericSetup\', \'Products.MailHost\', \'Products.PythonScripts\',\n+  \'Products.StandardCacheManagers\', \'Products.ZCatalog\', \'Record\',\n+  \'zope.sendmail\', \'Zope\'\n+]\n+\'plone.base\' = [\n+  \'plone.batching\', \'plone.registry\', \'plone.schema\',\'plone.z3cform\',\n+  \'Products.CMFCore\', \'Products.CMFDynamicViewFTI\',\n+]\n python-dateutil = [\'dateutil\']\n+ignore-packages = [\'zope.dublincore\']\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  dependencies_ignores = "[\'zestreleaser.towncrier\']"\n+#  dependencies_mappings = [\n+#    "gitpython = [\'git\']",\n+#    "pygithub = [\'github\']",\n+#  ]\n+#  """\n+##\n+\n+[tool.check-manifest]\n+ignore = [\n+    ".editorconfig",\n+    ".meta.toml",\n+    ".pre-commit-config.yaml",\n+    "tox.ini",\n+    ".flake8",\n+    "mx.ini",\n+    ".tox",\n+    "constraints-mxdev.txt",\n+    "instance.yaml",\n+    "Makefile",\n+    "requirements-mxdev.txt",\n+\n+]\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  check_manifest_ignores = """\n+#      "*.map.js",\n+#      "*.pyc",\n+#  """\n+##\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [pyproject]\n+#  extra_lines = """\n+#  _your own configuration lines_\n+#  """\n+##\ndiff --git a/setup.py b/setup.py\nindex d5f975d..0045087 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -3,7 +3,7 @@\n from setuptools import setup\n \n \n-version = "3.0.5.dev0"\n+version = "3.1.3.dev0"\n \n long_description = f"""\n {Path("README.md").read_text()}\\n\ndiff --git a/tox.ini b/tox.ini\nindex 02d93a9..fae7636 100644\n--- a/tox.ini\n+++ b/tox.ini\n@@ -1,14 +1,36 @@\n # Generated from:\n # https://github.com/plone/meta/tree/master/config/default\n+# See the inline comments on how to expand/tweak this configuration file\n [tox]\n+# We need 4.4.0 for constrain_package_deps.\n+min_version = 4.4.0\n envlist =\n-    format\n     lint\n     test\n+    dependencies\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  envlist_lines = """\n+#      my_other_environment\n+#  """\n+#  config_lines = """\n+#  my_extra_top_level_tox_configuration_lines\n+#  """\n+##\n \n [testenv]\n+skip_install = true\n allowlist_externals =\n-    sh\n+    echo\n+    false\n+# Make sure typos like `tox -e formaat` are caught instead of silently doing nothing.\n+# See https://github.com/tox-dev/tox/issues/2858.\n+commands =\n+    echo "Unrecognized environment name {envname}"\n+    false\n \n [testenv:format]\n description = automatically reformat code\n@@ -30,22 +52,95 @@ commands =\n     pre-commit run -a\n \n [testenv:dependencies]\n-description = check if the package defines all its dependencies and generate a graph out of them\n+description = check if the package defines all its dependencies\n+skip_install = true\n deps =\n+    build\n     z3c.dependencychecker==2.11\n+commands =\n+    python -m build --sdist --no-isolation\n+    dependencychecker\n+\n+[testenv:dependencies-graph]\n+description = generate a graph out of the dependencies of the package\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n     pipdeptree==2.5.1\n     graphviz  # optional dependency of pipdeptree\n commands =\n-    dependencychecker\n-    sh -c \'pipdeptree --exclude setuptools,pipdeptree,wheel,pipdeptree,z3c.dependencychecker,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n+    sh -c \'pipdeptree --exclude setuptools,wheel,pipdeptree,zope.interface,zope.component --graph-output svg > dependencies.svg\'\n \n [testenv:test]\n-usedevelop = true\n+description = run the distribution tests\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n deps =\n     zope.testrunner\n-    plone.restapi\n     -c https://dist.plone.org/release/6.0-dev/constraints.txt\n commands =\n-    zope-testrunner --test-path={toxinidir} -s plone.app.caching\n+    zope-testrunner --all --test-path={toxinidir} -s plone.app.caching {posargs}\n extras =\n     test\n+\n+[testenv:coverage]\n+description = get a test coverage report\n+use_develop = true\n+skip_install = false\n+constrain_package_deps = true\n+set_env = ROBOT_BROWSER=headlesschrome\n+deps =\n+    coverage\n+    zope.testrunner\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    coverage run --source plone.app.caching {envbindir}/zope-testrunner --quiet --all --test-path={toxinidir} -s plone.app.caching {posargs}\n+    coverage report -m --format markdown\n+extras =\n+    test\n+\n+[testenv:release-check]\n+description = ensure that the distribution is ready to release\n+skip_install = true\n+deps =\n+    twine\n+    build\n+    towncrier\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # fake version to not have to install the package\n+    # we build the change log as news entries might break\n+    # the README that is displayed on PyPI\n+    towncrier build --version=100.0.0 --yes\n+    python -m build --sdist --no-isolation\n+    twine check dist/*\n+\n+[testenv:circular]\n+description = ensure there are no cyclic dependencies\n+use_develop = true\n+skip_install = false\n+allowlist_externals =\n+    sh\n+deps =\n+    pipdeptree\n+    pipforester\n+    -c https://dist.plone.org/release/6.0-dev/constraints.txt\n+commands =\n+    # Generate the full dependency tree\n+    sh -c \'pipdeptree -j > forest.json\'\n+    # Generate a DOT graph with the circular dependencies, if any\n+    pipforester -i forest.json -o forest.dot --cycles\n+    # Report if there are any circular dependencies, i.e. error if there are any\n+    pipforester -i forest.json --check-cycles\n+\n+\n+##\n+# Add extra configuration options in .meta.toml:\n+#  [tox]\n+#  extra_lines = """\n+#      my_other_environment\n+#  """\n+##\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-10-19T10:12:22-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.caching/commit/779f4c4a1286d8de8807f1665f417bde3184bb5d

Update tests

Files changed:
M plone/app/caching/tests/test_etags.py

b'diff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py\nindex 83e281d..59c29c8 100644\n--- a/plone/app/caching/tests/test_etags.py\n+++ b/plone/app/caching/tests/test_etags.py\n@@ -281,14 +281,14 @@ def test_ObjectLocked_true(self):\n \n         @implementer(Interface)\n         @adapter(DummyContext, Interface)\n-        class DummyContextState:\n+        class DummyLockInfo:\n             def __init__(self, context, request):\n                 pass\n \n-            def is_locked(self):\n-                return True\n+            def lock_info(self):\n+                return {"token": "lock-token-1234"}\n \n-        provideAdapter(DummyContextState, name="plone_context_state")\n+        provideAdapter(DummyLockInfo, name="plone_lock_info")\n \n         environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n         response = HTTPResponse()\n@@ -297,21 +297,21 @@ def is_locked(self):\n \n         etag = ObjectLocked(published, request)\n \n-        self.assertEqual("1", etag())\n+        self.assertEqual("lock-token-1234", etag())\n \n     def test_ObjectLocked_false(self):\n         from plone.app.caching.operations.etags import ObjectLocked\n \n         @implementer(Interface)\n         @adapter(DummyContext, Interface)\n-        class DummyContextState:\n+        class DummyLockInfo:\n             def __init__(self, context, request):\n                 pass\n \n-            def is_locked(self):\n-                return False\n+            def lock_info(self):\n+                return None\n \n-        provideAdapter(DummyContextState, name="plone_context_state")\n+        provideAdapter(DummyLockInfo, name="plone_lock_info")\n \n         environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n         response = HTTPResponse()\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-10-19T10:15:59-07:00
Author: David Glick (davisagli) <david@glicksoftware.com>
Commit: https://github.com/plone/plone.app.caching/commit/bdcab70bad2b273d5ab7703dd5723a0f5acf4283

Changelog

Files changed:
A news/122.bugfix

b'diff --git a/news/122.bugfix b/news/122.bugfix\nnew file mode 100644\nindex 0000000..1b2c10f\n--- /dev/null\n+++ b/news/122.bugfix\n@@ -0,0 +1 @@\n+Fix `locked` component of ETag to discriminate between different locks. @JeffersonBledsoe, @davisagli\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-10-19T10:16:40-07:00
Author: David Glick (davisagli) <david.glick@plone.org>
Commit: https://github.com/plone/plone.app.caching/commit/aa716254d0ae0582760fb51b0edfae2d1c6820f2

Update plone/app/caching/operations/etags.py

Files changed:
M plone/app/caching/operations/etags.py

b'diff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex f243645..2138ba0 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -165,7 +165,7 @@ def __call__(self):\n         context = getContext(self.published)\n         lock = queryMultiAdapter((context, self.request), name="plone_lock_info")\n \n-        if not lock or not lock.lock_info():\n+        if not lock:\n             return "0"\n \n         lock_info = lock.lock_info()\n'

Repository: plone.app.caching


Branch: refs/heads/master
Date: 2023-10-23T21:01:08-07:00
Author: David Glick (davisagli) <david.glick@plone.org>
Commit: https://github.com/plone/plone.app.caching/commit/99718e84d1a6c86b83f5d144cfc2dbff2c2135a4

Merge pull request #122 from plone/locking-etag-token

can't save page with listing block and standard caching rules (due to etag not showing lock)

Files changed:
A news/122.bugfix
M plone/app/caching/operations/etags.py
M plone/app/caching/tests/test_etags.py

b'diff --git a/news/122.bugfix b/news/122.bugfix\nnew file mode 100644\nindex 0000000..1b2c10f\n--- /dev/null\n+++ b/news/122.bugfix\n@@ -0,0 +1 @@\n+Fix `locked` component of ETag to discriminate between different locks. @JeffersonBledsoe, @davisagli\ndiff --git a/plone/app/caching/operations/etags.py b/plone/app/caching/operations/etags.py\nindex 20f1783..2138ba0 100644\n--- a/plone/app/caching/operations/etags.py\n+++ b/plone/app/caching/operations/etags.py\n@@ -163,12 +163,16 @@ def __init__(self, published, request):\n \n     def __call__(self):\n         context = getContext(self.published)\n-        context_state = queryMultiAdapter(\n-            (context, self.request), name="plone_context_state"\n-        )\n-        if context_state is None:\n-            return\n-        return "1" if context_state.is_locked() else "0"\n+        lock = queryMultiAdapter((context, self.request), name="plone_lock_info")\n+\n+        if not lock:\n+            return "0"\n+\n+        lock_info = lock.lock_info()\n+        if not lock_info:\n+            return "0"\n+\n+        return lock_info["token"]\n \n \n @implementer(IETagValue)\ndiff --git a/plone/app/caching/tests/test_etags.py b/plone/app/caching/tests/test_etags.py\nindex 83e281d..59c29c8 100644\n--- a/plone/app/caching/tests/test_etags.py\n+++ b/plone/app/caching/tests/test_etags.py\n@@ -281,14 +281,14 @@ def test_ObjectLocked_true(self):\n \n         @implementer(Interface)\n         @adapter(DummyContext, Interface)\n-        class DummyContextState:\n+        class DummyLockInfo:\n             def __init__(self, context, request):\n                 pass\n \n-            def is_locked(self):\n-                return True\n+            def lock_info(self):\n+                return {"token": "lock-token-1234"}\n \n-        provideAdapter(DummyContextState, name="plone_context_state")\n+        provideAdapter(DummyLockInfo, name="plone_lock_info")\n \n         environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n         response = HTTPResponse()\n@@ -297,21 +297,21 @@ def is_locked(self):\n \n         etag = ObjectLocked(published, request)\n \n-        self.assertEqual("1", etag())\n+        self.assertEqual("lock-token-1234", etag())\n \n     def test_ObjectLocked_false(self):\n         from plone.app.caching.operations.etags import ObjectLocked\n \n         @implementer(Interface)\n         @adapter(DummyContext, Interface)\n-        class DummyContextState:\n+        class DummyLockInfo:\n             def __init__(self, context, request):\n                 pass\n \n-            def is_locked(self):\n-                return False\n+            def lock_info(self):\n+                return None\n \n-        provideAdapter(DummyContextState, name="plone_context_state")\n+        provideAdapter(DummyLockInfo, name="plone_lock_info")\n \n         environ = {"SERVER_NAME": "example.com", "SERVER_PORT": "80"}\n         response = HTTPResponse()\n'

