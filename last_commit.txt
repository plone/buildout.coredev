Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-03-05T15:28:43-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/1ff1f2b558850e3d4ae3c62f12d4dd45a6446eb6

When indexing for `getIcon`, check that the returned `image` is an instance of `plone.namedfile.interfaces.IImage`. fixes gh-3916

Files changed:
A news/3916.bugfix
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/tests/testCatalogTool.py

b'diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex af4e31610d..1b45f330a1 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -20,6 +20,7 @@\n from plone.i18n.normalizer.base import mapUnicode\n from plone.indexer import indexer\n from plone.indexer.interfaces import IIndexableObject\n+from plone.namedfile.interfaces import IImage\n from Products.CMFCore.CatalogTool import _mergedLocalRoles\n from Products.CMFCore.CatalogTool import CatalogTool as BaseTool\n from Products.CMFCore.indexing import processQueue\n@@ -234,7 +235,8 @@ def getIcon(obj):\n     when obj is an image or has a lead image\n     or has an image field with name \'image\': true else false\n     """\n-    return bool(getattr(obj.aq_base, "image", False))\n+    img_field = getattr(obj.aq_base, "image", False)\n+    return bool(IImage.providedBy(img_field))\n \n \n @indexer(Interface)\ndiff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py\nindex 9b7aa62f69..2c8e3c2772 100644\n--- a/Products/CMFPlone/tests/testCatalogTool.py\n+++ b/Products/CMFPlone/tests/testCatalogTool.py\n@@ -10,6 +10,7 @@\n from plone.indexer.wrapper import IndexableObjectWrapper\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n+from plone.namedfile.file import NamedImage\n from Products.CMFCore.indexing import processQueue\n from Products.CMFCore.permissions import AccessInactivePortalContent\n from Products.CMFPlone.CatalogTool import CatalogTool\n@@ -1414,6 +1415,21 @@ def test_uuid(self):\n         self.assertTrue(wrapped.UID)\n         self.assertTrue(uuid == wrapped.UID)\n \n+    def test_getIcon(self):\n+        from Products.CMFPlone.CatalogTool import getIcon\n+\n+        get_icon = getIcon.callable\n+        self.assertFalse(get_icon(self.folder))\n+        # Create an item inside the test folder\n+        self.folder.invokeFactory("Image", "image", title="Image")\n+        # Do not get the "image" content item\n+        self.assertFalse(get_icon(self.folder))\n+        # Return False if item doesn\'t have an image\n+        self.assertFalse(get_icon(self.folder.image))\n+        self.folder.image.image=NamedImage(dummy.Image())\n+        # Item has a proper image, return True\n+        self.assertTrue(get_icon(self.folder.image))\n+\n \n class TestObjectProvidedIndexExtender(unittest.TestCase):\n     def _index(self, object):\ndiff --git a/news/3916.bugfix b/news/3916.bugfix\nnew file mode 100644\nindex 0000000000..04a84477ea\n--- /dev/null\n+++ b/news/3916.bugfix\n@@ -0,0 +1,2 @@\n+When indexing for `getIcon`, check that the returned `image` is an instance of `plone.namedfile.interfaces.IImage`\n+[frapell]\n'

Repository: Products.CMFPlone


Branch: refs/heads/master
Date: 2024-03-05T18:17:32-03:00
Author: Franco Pellegrini (frapell) <frapell@gmail.com>
Commit: https://github.com/plone/Products.CMFPlone/commit/3601db79b02453798b35260f315eea02872c17a9

Merge pull request #3918 from plone/issue-3916-master

Bugfix for getIcon indexer and conflicting "image" id

Files changed:
A news/3916.bugfix
M Products/CMFPlone/CatalogTool.py
M Products/CMFPlone/tests/testCatalogTool.py

b'diff --git a/Products/CMFPlone/CatalogTool.py b/Products/CMFPlone/CatalogTool.py\nindex af4e31610d..1b45f330a1 100644\n--- a/Products/CMFPlone/CatalogTool.py\n+++ b/Products/CMFPlone/CatalogTool.py\n@@ -20,6 +20,7 @@\n from plone.i18n.normalizer.base import mapUnicode\n from plone.indexer import indexer\n from plone.indexer.interfaces import IIndexableObject\n+from plone.namedfile.interfaces import IImage\n from Products.CMFCore.CatalogTool import _mergedLocalRoles\n from Products.CMFCore.CatalogTool import CatalogTool as BaseTool\n from Products.CMFCore.indexing import processQueue\n@@ -234,7 +235,8 @@ def getIcon(obj):\n     when obj is an image or has a lead image\n     or has an image field with name \'image\': true else false\n     """\n-    return bool(getattr(obj.aq_base, "image", False))\n+    img_field = getattr(obj.aq_base, "image", False)\n+    return bool(IImage.providedBy(img_field))\n \n \n @indexer(Interface)\ndiff --git a/Products/CMFPlone/tests/testCatalogTool.py b/Products/CMFPlone/tests/testCatalogTool.py\nindex 9b7aa62f69..2c8e3c2772 100644\n--- a/Products/CMFPlone/tests/testCatalogTool.py\n+++ b/Products/CMFPlone/tests/testCatalogTool.py\n@@ -10,6 +10,7 @@\n from plone.indexer.wrapper import IndexableObjectWrapper\n from plone.uuid.interfaces import IAttributeUUID\n from plone.uuid.interfaces import IUUID\n+from plone.namedfile.file import NamedImage\n from Products.CMFCore.indexing import processQueue\n from Products.CMFCore.permissions import AccessInactivePortalContent\n from Products.CMFPlone.CatalogTool import CatalogTool\n@@ -1414,6 +1415,21 @@ def test_uuid(self):\n         self.assertTrue(wrapped.UID)\n         self.assertTrue(uuid == wrapped.UID)\n \n+    def test_getIcon(self):\n+        from Products.CMFPlone.CatalogTool import getIcon\n+\n+        get_icon = getIcon.callable\n+        self.assertFalse(get_icon(self.folder))\n+        # Create an item inside the test folder\n+        self.folder.invokeFactory("Image", "image", title="Image")\n+        # Do not get the "image" content item\n+        self.assertFalse(get_icon(self.folder))\n+        # Return False if item doesn\'t have an image\n+        self.assertFalse(get_icon(self.folder.image))\n+        self.folder.image.image=NamedImage(dummy.Image())\n+        # Item has a proper image, return True\n+        self.assertTrue(get_icon(self.folder.image))\n+\n \n class TestObjectProvidedIndexExtender(unittest.TestCase):\n     def _index(self, object):\ndiff --git a/news/3916.bugfix b/news/3916.bugfix\nnew file mode 100644\nindex 0000000000..04a84477ea\n--- /dev/null\n+++ b/news/3916.bugfix\n@@ -0,0 +1,2 @@\n+When indexing for `getIcon`, check that the returned `image` is an instance of `plone.namedfile.interfaces.IImage`\n+[frapell]\n'

