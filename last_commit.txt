Repository: plone.restapi


Branch: refs/heads/master
Date: 2021-01-04T22:42:41+01:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/9286cfd90d4c7bcd69266e7ee23e979cb8637cdd

Blocks transformers also on root (#1044)

* Register blocks transformers also for Site Root

* Register blocks transformers also for Site Root

* black

* add diff in black

* black

* fix method

* fix black

Files changed:
A news/1043.feature
M .github/workflows/ci.yml
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/deserializer/site.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/site.py
M src/plone/restapi/tests/test_site_deserializer.py
M src/plone/restapi/tests/test_site_serializer.py

b'diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml\nindex 6167a76a2..dc042c542 100644\n--- a/.github/workflows/ci.yml\n+++ b/.github/workflows/ci.yml\n@@ -29,7 +29,6 @@ jobs:\n             plone-version: 5.1\n \n     steps:\n-\n       # git checkout\n       - uses: actions/checkout@v2\n \n@@ -63,7 +62,7 @@ jobs:\n \n       # black\n       - name: black\n-        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then pip install black && black src/ --check; fi\n+        run: if [ "${{ matrix.plone-version }}" == "5.2" ] && [ ${{ matrix.python-version }} == \'3.7\' ]; then pip install black && black src/ --check --diff; fi\n \n       # code analysis\n       - name: black\ndiff --git a/news/1043.feature b/news/1043.feature\nnew file mode 100644\nindex 000000000..5d371fafe\n--- /dev/null\n+++ b/news/1043.feature\n@@ -0,0 +1,2 @@\n+Register blocks transformers also for Site Root\n+[cekk]\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex 7ec5e5333..71ce429a9 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -9,6 +9,7 @@\n from plone.schema import IJSONField\n from plone.uuid.interfaces import IUUID\n from plone.uuid.interfaces import IUUIDAware\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import getMultiAdapter\n from zope.component import subscribers\n@@ -38,7 +39,7 @@ def path2uid(context, link):\n             portal_path=portal_path, path=path.lstrip("/")\n         )\n     obj = portal.unrestrictedTraverse(path, None)\n-    if obj is None:\n+    if obj is None or obj == portal:\n         return link\n     segments = path.split("/")\n     suffix = ""\n@@ -58,13 +59,13 @@ def __call__(self, value):\n         value = super(BlocksJSONFieldDeserializer, self).__call__(value)\n \n         if self.field.getName() == "blocks":\n-\n             for id, block_value in value.items():\n                 block_type = block_value.get("@type", "")\n \n                 handlers = []\n                 for h in subscribers(\n-                    (self.context, self.request), IBlockFieldDeserializationTransformer\n+                    (self.context, self.request),\n+                    IBlockFieldDeserializationTransformer,\n                 ):\n                     if h.block_type == block_type or h.block_type is None:\n                         handlers.append(h)\n@@ -78,9 +79,7 @@ def __call__(self, value):\n         return value\n \n \n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class ResolveUIDDeserializer(object):\n+class ResolveUIDDeserializerBase(object):\n     """The "url" smart block field.\n \n     This is a generic handler. In all blocks, it converts any "url"\n@@ -104,9 +103,7 @@ def __call__(self, block):\n         return block\n \n \n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class TextBlockDeserializer(object):\n+class TextBlockDeserializerBase(object):\n     order = 100\n     block_type = "text"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -128,9 +125,7 @@ def __call__(self, block):\n         return block\n \n \n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class HTMLBlockDeserializer(object):\n+class HTMLBlockDeserializerBase(object):\n     order = 100\n     block_type = "html"\n     disabled = os.environ.get("disable_transform_html", False)\n@@ -152,9 +147,7 @@ def __call__(self, block):\n         return block\n \n \n-@adapter(IBlocks, IBrowserRequest)\n-@implementer(IBlockFieldDeserializationTransformer)\n-class ImageBlockDeserializer(object):\n+class ImageBlockDeserializerBase(object):\n     order = 100\n     block_type = "image"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -167,3 +160,51 @@ def __call__(self, block):\n         url = block.get("url", "")\n         block["url"] = path2uid(context=self.context, link=url)\n         return block\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class ResolveUIDDeserializer(ResolveUIDDeserializerBase):\n+    """ Deserializer for content-types that implements IBlocks behavior """\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class ResolveUIDDeserializerRoot(ResolveUIDDeserializerBase):\n+    """ Deserializer for site root """\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class TextBlockDeserializer(TextBlockDeserializerBase):\n+    """ Deserializer for content-types that implements IBlocks behavior """\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class TextBlockDeserializerRoot(TextBlockDeserializerBase):\n+    """ Deserializer for site root """\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class HTMLBlockDeserializer(HTMLBlockDeserializerBase):\n+    """ Deserializer for content-types that implements IBlocks behavior """\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class HTMLBlockDeserializerRoot(HTMLBlockDeserializerBase):\n+    """ Deserializer for site root """\n+\n+\n+@adapter(IBlocks, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class ImageBlockDeserializer(ImageBlockDeserializerBase):\n+    """ Deserializer for content-types that implements IBlocks behavior """\n+\n+\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+@implementer(IBlockFieldDeserializationTransformer)\n+class ImageBlockDeserializerRoot(ImageBlockDeserializerBase):\n+    """ Deserializer for site root """\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 6f48a5dd5..9ff560a18 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -26,7 +26,15 @@\n     provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n   <subscriber factory=".blocks.ResolveUIDDeserializer"\n     provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n-\n+  <subscriber factory=".blocks.TextBlockDeserializerRoot"\n+    provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+  <subscriber factory=".blocks.HTMLBlockDeserializerRoot"\n+    provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+  <subscriber factory=".blocks.ImageBlockDeserializerRoot"\n+    provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+  <subscriber factory=".blocks.ResolveUIDDeserializerRoot"\n+    provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n+  \n   <adapter factory=".local_roles.DeserializeFromJson"\n            name="local_roles"/>\n \ndiff --git a/src/plone/restapi/deserializer/site.py b/src/plone/restapi/deserializer/site.py\nindex 790e91fcb..9711e4dbf 100644\n--- a/src/plone/restapi/deserializer/site.py\n+++ b/src/plone/restapi/deserializer/site.py\n@@ -1,9 +1,11 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.deserializer import json_body\n from plone.restapi.deserializer.mixins import OrderingMixin\n+from plone.restapi.interfaces import IBlockFieldDeserializationTransformer\n from plone.restapi.interfaces import IDeserializeFromJson\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n+from zope.component import subscribers\n from zope.interface import implementer\n from zope.publisher.interfaces import IRequest\n \n@@ -35,14 +37,25 @@ def __call__(self, validate_all=False):\n \n         # Volto Blocks on the Plone Site root faker\n         if "blocks" in data:\n+            value = data["blocks"]\n+            for id, block_value in value.items():\n+                block_type = block_value.get("@type", "")\n+                handlers = []\n+                for h in subscribers(\n+                    (self.context, self.request),\n+                    IBlockFieldDeserializationTransformer,\n+                ):\n+                    if h.block_type == block_type or h.block_type is None:\n+                        handlers.append(h)\n+                for handler in sorted(handlers, key=lambda h: h.order):\n+                    block_value = handler(block_value)\n+                value[id] = block_value\n             if not getattr(self.context, "blocks", False):\n                 self.context.manage_addProperty(\n-                    "blocks", json.dumps(data["blocks"]), "string"\n+                    "blocks", json.dumps(value), "string"\n                 )  # noqa\n             else:\n-                self.context.manage_changeProperties(\n-                    blocks=json.dumps(data["blocks"])\n-                )  # noqa\n+                self.context.manage_changeProperties(blocks=json.dumps(value))  # noqa\n \n         if "blocks_layout" in data:\n             if not getattr(self.context, "blocks_layout", False):\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex d5653c95e..b00f35acc 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -8,6 +8,7 @@\n from plone.restapi.serializer.converters import json_compatible\n from plone.restapi.serializer.dxfields import DefaultFieldSerializer\n from plone.schema import IJSONField\n+from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import queryMultiAdapter\n from zope.component import subscribers\n@@ -71,9 +72,7 @@ def __call__(self):\n         return json_compatible(value)\n \n \n-@implementer(IBlockFieldSerializationTransformer)\n-@adapter(IBlocks, IBrowserRequest)\n-class ResolveUIDSerializer(object):\n+class ResolveUIDSerializerBase(object):\n     order = 1\n     block_type = None\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -89,9 +88,7 @@ def __call__(self, value):\n         return value\n \n \n-@implementer(IBlockFieldSerializationTransformer)\n-@adapter(IBlocks, IBrowserRequest)\n-class TextBlockSerializer(object):\n+class TextBlockSerializerBase(object):\n     order = 100\n     block_type = "text"\n     disabled = os.environ.get("disable_transform_resolveuid", False)\n@@ -111,3 +108,27 @@ def __call__(self, value):\n                 url = entity.get("data", {}).get("url", "")\n                 entity["data"]["url"] = uid_to_url(url)\n         return value\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class ResolveUIDSerializer(ResolveUIDSerializerBase):\n+    """ Serializer for content-types with IBlocks behavior """\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+class ResolveUIDSerializerRoot(ResolveUIDSerializerBase):\n+    """ Serializer for site root """\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IBlocks, IBrowserRequest)\n+class TextBlockSerializer(TextBlockSerializerBase):\n+    """ Serializer for content-types with IBlocks behavior """\n+\n+\n+@implementer(IBlockFieldSerializationTransformer)\n+@adapter(IPloneSiteRoot, IBrowserRequest)\n+class TextBlockSerializerRoot(TextBlockSerializerBase):\n+    """ Serializer for site root """\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex 956a8ed85..b3680c1af 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -30,6 +30,10 @@\n       provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"/>\n     <subscriber factory=".blocks.ResolveUIDSerializer"\n       provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"/>\n+    <subscriber factory=".blocks.TextBlockSerializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"/>\n+    <subscriber factory=".blocks.ResolveUIDSerializerRoot"\n+      provides="plone.restapi.interfaces.IBlockFieldSerializationTransformer"/>\n \n     <configure zcml:condition="installed Products.Archetypes">\n         <adapter factory=".atcontent.SerializeToJson" />\ndiff --git a/src/plone/restapi/serializer/site.py b/src/plone/restapi/serializer/site.py\nindex f308bf82d..47f9c8af0 100644\n--- a/src/plone/restapi/serializer/site.py\n+++ b/src/plone/restapi/serializer/site.py\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n from plone.restapi.batching import HypermediaBatch\n+from plone.restapi.interfaces import IBlockFieldSerializationTransformer\n from plone.restapi.interfaces import ISerializeToJson\n from plone.restapi.interfaces import ISerializeToJsonSummary\n from plone.restapi.serializer.expansion import expandable_elements\n@@ -7,6 +8,7 @@\n from Products.CMFPlone.interfaces import IPloneSiteRoot\n from zope.component import adapter\n from zope.component import getMultiAdapter\n+from zope.component import subscribers\n from zope.interface import implementer\n from zope.interface import Interface\n \n@@ -49,7 +51,7 @@ def __call__(self, version=None):\n             "parent": {},\n             "is_folderish": True,\n             "description": self.context.description,\n-            "blocks": json.loads(getattr(self.context, "blocks", "{}")),\n+            "blocks": self.serialize_blocks(),\n             "blocks_layout": json.loads(\n                 getattr(self.context, "blocks_layout", "{}")\n             ),  # noqa\n@@ -68,3 +70,23 @@ def __call__(self, version=None):\n         ]\n \n         return result\n+\n+    def serialize_blocks(self):\n+        blocks = json.loads(getattr(self.context, "blocks", "{}"))\n+        if not blocks:\n+            return blocks\n+        for id, block_value in blocks.items():\n+            block_type = block_value.get("@type", "")\n+            handlers = []\n+            for h in subscribers(\n+                (self.context, self.request), IBlockFieldSerializationTransformer\n+            ):\n+                if h.block_type == block_type or h.block_type is None:\n+                    handlers.append(h)\n+\n+            for handler in sorted(handlers, key=lambda h: h.order):\n+                if not getattr(handler, "disabled", False):\n+                    block_value = handler(block_value)\n+\n+            blocks[id] = block_value\n+        return blocks\ndiff --git a/src/plone/restapi/tests/test_site_deserializer.py b/src/plone/restapi/tests/test_site_deserializer.py\nindex 86dd36f28..d020c9ff7 100644\n--- a/src/plone/restapi/tests/test_site_deserializer.py\n+++ b/src/plone/restapi/tests/test_site_deserializer.py\n@@ -46,6 +46,11 @@ def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n \n+        self.portal.invokeFactory(\n+            "Document",\n+            id=u"doc1",\n+        )\n+\n     def deserialize(self, body="{}", validate_all=False, context=None):\n         context = context or self.portal\n         self.request["BODY"] = body\n@@ -72,3 +77,30 @@ def test_opt_in_blocks_deserializer(self):\n \n         self.assertEqual(blocks, json.loads(self.portal.blocks))\n         self.assertEqual(blocks_layout, json.loads(self.portal.blocks_layout))\n+\n+    def test_resolveuids_blocks_deserializer(self):\n+        blocks = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "foo",\n+                "url": self.portal.doc1.absolute_url(),\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+        }\n+        blocks_layout = {\n+            "items": [\n+                "07c273fc-8bfc-4e7d-a327-d513e5a945bb",\n+                "0358abe2-b4f1-463d-a279-a63ea80daf19",\n+            ]\n+        }\n+\n+        self.deserialize(\n+            body=\'{{"blocks": {}, "blocks_layout": {}}}\'.format(\n+                json.dumps(blocks), json.dumps(blocks_layout)\n+            )\n+        )\n+\n+        values = json.loads(self.portal.blocks)\n+        self.assertEqual(\n+            values["0358abe2-b4f1-463d-a279-a63ea80daf19"]["url"],\n+            "resolveuid/{}".format(self.portal.doc1.UID()),\n+        )\ndiff --git a/src/plone/restapi/tests/test_site_serializer.py b/src/plone/restapi/tests/test_site_serializer.py\nindex e941f1aa8..6a27c136b 100644\n--- a/src/plone/restapi/tests/test_site_serializer.py\n+++ b/src/plone/restapi/tests/test_site_serializer.py\n@@ -15,6 +15,11 @@ def setUp(self):\n         self.portal = self.layer["portal"]\n         self.request = self.layer["request"]\n \n+        self.portal.invokeFactory(\n+            "Document",\n+            id=u"doc1",\n+        )\n+\n     def serialize(self):\n         serializer = getMultiAdapter((self.portal, self.request), ISerializeToJson)\n         return serializer()\n@@ -32,3 +37,18 @@ def test_get_is_folderish(self):\n         obj = self.serialize()\n         self.assertIn("is_folderish", obj)\n         self.assertEqual(True, obj["is_folderish"])\n+\n+    def test_resolveuids_get_serialized_in_serializer(self):\n+        blocks = {\n+            "0358abe2-b4f1-463d-a279-a63ea80daf19": {\n+                "@type": "foo",\n+                "url": "resolveuid/{}".format(self.portal.doc1.UID()),\n+            },\n+            "07c273fc-8bfc-4e7d-a327-d513e5a945bb": {"@type": "title"},\n+        }\n+        self.portal.blocks = json.dumps(blocks)\n+        obj = self.serialize()\n+        self.assertEqual(\n+            obj["blocks"]["0358abe2-b4f1-463d-a279-a63ea80daf19"]["url"],\n+            self.portal.doc1.absolute_url(),\n+        )\n'

