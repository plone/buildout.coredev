Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2020-12-12T10:47:34+01:00
Author: ale-rt (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/7a4622b89a7761dae4991290533170ddda5bd5a8

Fix the constraint types mode calculation

Fix the constraint types mode calculation, disabling acquisition and gracefully checking for the existence of a portal type attribute in the container

Fixes #319

Files changed:
A news/319.fixed
M plone/app/dexterity/behaviors/constrains.py

b'diff --git a/news/319.fixed b/news/319.fixed\nnew file mode 100644\nindex 0000000..de4092b\n--- /dev/null\n+++ b/news/319.fixed\n@@ -0,0 +1 @@\n+Fix the constraint types mode calculation, disabling acquisition and gracefully checking for the existence of a portal type attribute in the container\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex 615e8f3..b2b7e6c 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -27,8 +27,9 @@ def getConstrainTypesMode(self):\n         parent = self.context.__parent__\n         if not parent:\n             return DISABLED\n-        if not self.context.portal_type == parent.portal_type:\n-            return DISABLED\n+        if base_hasattr(parent, "portal_type"):\n+            if self.context.portal_type != parent.portal_type:\n+                return DISABLED\n         if not ISelectableConstrainTypes(parent, None):\n             return DISABLED\n         return ACQUIRE\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2020-12-12T13:19:25+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.app.dexterity/commit/b643295cec13533612e0bf660080829fe60d49e5

Add tests for ConstrainTypesBehavior

Files changed:
A plone/app/dexterity/behaviors/tests/test_contrains.py

b'diff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nnew file mode 100644\nindex 0000000..823fed9\n--- /dev/null\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -0,0 +1,89 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.dexterity.behaviors.metadata import ICategorization\n+from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n+from plone.app.testing import login\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.app.testing import TEST_USER_NAME\n+from plone.registry.interfaces import IRegistry\n+from zope.component import getUtility\n+from zope.schema.interfaces import ConstraintNotSatisfied\n+\n+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n+from plone.app.dexterity.behaviors.constrains import (\n+    ConstrainTypesBehavior,\n+    DISABLED,\n+    ACQUIRE,\n+)\n+from zope.interface import alsoProvides\n+\n+import unittest\n+\n+\n+class Dummy:\n+    pass\n+\n+\n+class TestConstrains(unittest.TestCase):\n+    def test_parent_without_portal_type_with_constrain(self):\n+        parent = Dummy()\n+        alsoProvides(parent, ISelectableConstrainTypes)\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_without_portal_type_not_constrained(self):\n+        parent = Dummy()\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_same_portal_type_with_constrain(self):\n+        parent = Dummy()\n+        alsoProvides(parent, ISelectableConstrainTypes)\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(ACQUIRE, behavior.getConstrainTypesMode())\n+\n+    def test_parent_same_portal_type_not_constrained(self):\n+        parent = Dummy()\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_different_portal_type_with_constrain(self):\n+        parent = Dummy()\n+        alsoProvides(parent, ISelectableConstrainTypes)\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_different_portal_type_not_constrained(self):\n+        parent = Dummy()\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_constrain_types_mode(self):\n+        context = Dummy()\n+        context.constrain_types_mode = "my mode"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual("my mode", behavior.getConstrainTypesMode())\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2020-12-12T13:24:09+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.app.dexterity/commit/39bbf17d24f20fbf41a2e324e3888324e51f9e31

Add correct tests.

Files changed:
M plone/app/dexterity/behaviors/tests/test_contrains.py

b'diff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nindex 823fed9..11997ca 100644\n--- a/plone/app/dexterity/behaviors/tests/test_contrains.py\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -46,6 +46,7 @@ def test_parent_without_portal_type_not_constrained(self):\n \n     def test_parent_same_portal_type_with_constrain(self):\n         parent = Dummy()\n+        parent.portal_type = "my type"\n         alsoProvides(parent, ISelectableConstrainTypes)\n \n         context = Dummy()\n@@ -56,6 +57,7 @@ def test_parent_same_portal_type_with_constrain(self):\n \n     def test_parent_same_portal_type_not_constrained(self):\n         parent = Dummy()\n+        parent.portal_type = "my type"\n \n         context = Dummy()\n         context.__parent__ = parent\n@@ -65,6 +67,7 @@ def test_parent_same_portal_type_not_constrained(self):\n \n     def test_parent_different_portal_type_with_constrain(self):\n         parent = Dummy()\n+        parent.portal_type = "other type"\n         alsoProvides(parent, ISelectableConstrainTypes)\n \n         context = Dummy()\n@@ -75,6 +78,7 @@ def test_parent_different_portal_type_with_constrain(self):\n \n     def test_parent_different_portal_type_not_constrained(self):\n         parent = Dummy()\n+        parent.portal_type = "other type"\n \n         context = Dummy()\n         context.__parent__ = parent\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2020-12-12T13:25:11+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.app.dexterity/commit/1ed2cadda23be1e65b8e16ad0edae844cd265224

Bail out early if parent doesn't have portal_type, so we don't try to ACQUIRE

Files changed:
M plone/app/dexterity/behaviors/constrains.py

b'diff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex b2b7e6c..557125f 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -27,9 +27,10 @@ def getConstrainTypesMode(self):\n         parent = self.context.__parent__\n         if not parent:\n             return DISABLED\n-        if base_hasattr(parent, "portal_type"):\n-            if self.context.portal_type != parent.portal_type:\n-                return DISABLED\n+        if not base_hasattr(parent, "portal_type"):\n+            return DISABLED\n+        if self.context.portal_type != parent.portal_type:\n+            return DISABLED\n         if not ISelectableConstrainTypes(parent, None):\n             return DISABLED\n         return ACQUIRE\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2020-12-12T13:26:58+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.app.dexterity/commit/0c00b596066217de34add0a5b6953894624b08c4

cleanup unused imports

Files changed:
M plone/app/dexterity/behaviors/tests/test_contrains.py

b'diff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nindex 11997ca..97b623f 100644\n--- a/plone/app/dexterity/behaviors/tests/test_contrains.py\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -1,14 +1,4 @@\n # -*- coding: utf-8 -*-\n-from plone.app.dexterity.behaviors.metadata import ICategorization\n-from plone.app.dexterity.testing import DEXTERITY_INTEGRATION_TESTING\n-from plone.app.testing import login\n-from plone.app.testing import setRoles\n-from plone.app.testing import TEST_USER_ID\n-from plone.app.testing import TEST_USER_NAME\n-from plone.registry.interfaces import IRegistry\n-from zope.component import getUtility\n-from zope.schema.interfaces import ConstraintNotSatisfied\n-\n from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n from plone.app.dexterity.behaviors.constrains import (\n     ConstrainTypesBehavior,\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2020-12-12T14:21:46+01:00
Author: Roel Bruggink (jaroel) <roel@jaroel.nl>
Commit: https://github.com/plone/plone.app.dexterity/commit/bd7148e503e23aeb0b6ac2655b4d3adda6e5e53e

Rename 319.fixed to 319.bugfix

Files changed:
A news/319.bugfix
D news/319.fixed

b'diff --git a/news/319.fixed b/news/319.bugfix\nsimilarity index 100%\nrename from news/319.fixed\nrename to news/319.bugfix\n'

Repository: plone.app.dexterity


Branch: refs/heads/master
Date: 2020-12-12T15:55:36+01:00
Author: Alessandro Pisa (ale-rt) <alessandro.pisa@gmail.com>
Commit: https://github.com/plone/plone.app.dexterity/commit/0341a5b1015352fcdbcb3c12b3d1782e0038032b

Fix the constraint types mode calculation (#320)

* Fix the constraint types mode calculation

Fix the constraint types mode calculation, disabling acquisition and gracefully checking for the existence of a portal type attribute in the container
Add test coverage and cleanup unused imports

Fixes #319

Co-authored-by: Roel Bruggink &lt;roel@jaroel.nl&gt;

Files changed:
A news/319.bugfix
A plone/app/dexterity/behaviors/tests/test_contrains.py
M plone/app/dexterity/behaviors/constrains.py

b'diff --git a/news/319.bugfix b/news/319.bugfix\nnew file mode 100644\nindex 0000000..de4092b\n--- /dev/null\n+++ b/news/319.bugfix\n@@ -0,0 +1 @@\n+Fix the constraint types mode calculation, disabling acquisition and gracefully checking for the existence of a portal type attribute in the container\ndiff --git a/plone/app/dexterity/behaviors/constrains.py b/plone/app/dexterity/behaviors/constrains.py\nindex 615e8f3..557125f 100644\n--- a/plone/app/dexterity/behaviors/constrains.py\n+++ b/plone/app/dexterity/behaviors/constrains.py\n@@ -27,7 +27,9 @@ def getConstrainTypesMode(self):\n         parent = self.context.__parent__\n         if not parent:\n             return DISABLED\n-        if not self.context.portal_type == parent.portal_type:\n+        if not base_hasattr(parent, "portal_type"):\n+            return DISABLED\n+        if self.context.portal_type != parent.portal_type:\n             return DISABLED\n         if not ISelectableConstrainTypes(parent, None):\n             return DISABLED\ndiff --git a/plone/app/dexterity/behaviors/tests/test_contrains.py b/plone/app/dexterity/behaviors/tests/test_contrains.py\nnew file mode 100644\nindex 0000000..97b623f\n--- /dev/null\n+++ b/plone/app/dexterity/behaviors/tests/test_contrains.py\n@@ -0,0 +1,83 @@\n+# -*- coding: utf-8 -*-\n+from Products.CMFPlone.interfaces.constrains import ISelectableConstrainTypes\n+from plone.app.dexterity.behaviors.constrains import (\n+    ConstrainTypesBehavior,\n+    DISABLED,\n+    ACQUIRE,\n+)\n+from zope.interface import alsoProvides\n+\n+import unittest\n+\n+\n+class Dummy:\n+    pass\n+\n+\n+class TestConstrains(unittest.TestCase):\n+    def test_parent_without_portal_type_with_constrain(self):\n+        parent = Dummy()\n+        alsoProvides(parent, ISelectableConstrainTypes)\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_without_portal_type_not_constrained(self):\n+        parent = Dummy()\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_same_portal_type_with_constrain(self):\n+        parent = Dummy()\n+        parent.portal_type = "my type"\n+        alsoProvides(parent, ISelectableConstrainTypes)\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(ACQUIRE, behavior.getConstrainTypesMode())\n+\n+    def test_parent_same_portal_type_not_constrained(self):\n+        parent = Dummy()\n+        parent.portal_type = "my type"\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_different_portal_type_with_constrain(self):\n+        parent = Dummy()\n+        parent.portal_type = "other type"\n+        alsoProvides(parent, ISelectableConstrainTypes)\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_parent_different_portal_type_not_constrained(self):\n+        parent = Dummy()\n+        parent.portal_type = "other type"\n+\n+        context = Dummy()\n+        context.__parent__ = parent\n+        context.portal_type = "my type"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual(DISABLED, behavior.getConstrainTypesMode())\n+\n+    def test_constrain_types_mode(self):\n+        context = Dummy()\n+        context.constrain_types_mode = "my mode"\n+        behavior = ConstrainTypesBehavior(context)\n+        self.assertEqual("my mode", behavior.getConstrainTypesMode())\n'

