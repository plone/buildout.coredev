Repository: plone.restapi


Branch: refs/heads/7.x.x
Date: 2021-07-08T10:16:08+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.restapi/commit/2124142b1202d324c98620b3f5d1cf01b3748b0d

Fix startup on Plone 4 without plone.app.contenttypes.

plone.restapi 7.0.0b2 introduced a serializer/deserializer for remoteUrl Link's field.
This introduced an undeclared dependency on plone.app.contenttypes.
Solution: use conditional imports and use zcml:condition to register the serializer and deserializer.

Use case: collective.exportimport on Plone 4 loads `serializers/dxfields.py` and this fails without plone.app.contenttypes.

Files changed:
A news/1166.bugfix
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/dxfields.py

b'diff --git a/news/1166.bugfix b/news/1166.bugfix\nnew file mode 100644\nindex 000000000..b1b8bb775\n--- /dev/null\n+++ b/news/1166.bugfix\n@@ -0,0 +1,2 @@\n+Fix startup on Plone 4 without plone.app.contenttypes.\n+[maurits]\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 1aca6a602..997ca68cf 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -12,13 +12,16 @@\n   <adapter factory=".dxfields.CollectionFieldDeserializer" />\n   <adapter factory=".dxfields.DictFieldDeserializer" />\n   <adapter factory=".dxfields.TextLineFieldDeserializer" />\n-  <adapter factory=".dxfields.LinkTextLineFieldDeserializer" />\n   <adapter factory=".dxfields.TimeFieldDeserializer" />\n   <adapter factory=".dxfields.TimedeltaFieldDeserializer" />\n   <adapter factory=".dxfields.NamedFieldDeserializer" />\n   <adapter factory=".dxfields.RichTextFieldDeserializer" />\n   <adapter factory=".blocks.BlocksJSONFieldDeserializer" />\n \n+  <configure zcml:condition="installed plone.app.contenttypes">\n+    <adapter factory=".dxfields.LinkTextLineFieldDeserializer" />\n+  </configure>\n+\n   <subscriber factory=".blocks.TextBlockDeserializer"\n     provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n   <subscriber factory=".blocks.HTMLBlockDeserializer"\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex e166e0424..2e09e2601 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from datetime import timedelta\n-from plone.app.contenttypes.interfaces import ILink\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.interfaces import IDexterityContent\n@@ -30,6 +29,12 @@\n import dateutil\n import six\n \n+try:\n+    from plone.app.contenttypes.interfaces import ILink\n+except ImportError:\n+    # Probably Plone 4.3 with dexterity but without plone.app.contenttypes.\n+    ILink = None\n+\n if six.PY2:\n     import HTMLParser\n \n@@ -75,21 +80,23 @@ def __call__(self, value):\n         return value\n \n \n-@implementer(IFieldDeserializer)\n-@adapter(ITextLine, ILink, IBrowserRequest)\n-class LinkTextLineFieldDeserializer(TextLineFieldDeserializer):\n-    def __call__(self, value):\n-        value = super(LinkTextLineFieldDeserializer, self).__call__(value)\n-        if self.field.getName() == "remoteUrl":\n-            portal = getMultiAdapter(\n-                (self.context, self.context.REQUEST), name="plone_portal_state"\n-            ).portal()\n-            portal_url = portal.portal_url()\n-            if value.startswith(portal_url):\n-                value = "${{portal_url}}{path}".format(\n-                    path=value.replace(portal_url, "")\n-                )\n-        return value\n+if ILink is not None:\n+\n+    @implementer(IFieldDeserializer)\n+    @adapter(ITextLine, ILink, IBrowserRequest)\n+    class LinkTextLineFieldDeserializer(TextLineFieldDeserializer):\n+        def __call__(self, value):\n+            value = super(LinkTextLineFieldDeserializer, self).__call__(value)\n+            if self.field.getName() == "remoteUrl":\n+                portal = getMultiAdapter(\n+                    (self.context, self.context.REQUEST), name="plone_portal_state"\n+                ).portal()\n+                portal_url = portal.portal_url()\n+                if value.startswith(portal_url):\n+                    value = "${{portal_url}}{path}".format(\n+                        path=value.replace(portal_url, "")\n+                    )\n+            return value\n \n \n @implementer(IFieldDeserializer)\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex ecac2e48a..2d748ac4a 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -11,6 +11,7 @@\n \n     <configure zcml:condition="installed plone.app.contenttypes">\n         <adapter factory=".collection.SerializeCollectionToJson" />\n+        <adapter factory=".dxfields.TextLineFieldSerializer" />\n     </configure>\n \n     <adapter factory=".summary.DefaultJSONSummarySerializer" />\n@@ -24,7 +25,6 @@\n     <adapter factory=".dxfields.RichttextFieldSerializer" />\n     <adapter factory=".dxfields.DefaultPrimaryFieldTarget" />\n     <adapter factory=".dxfields.PrimaryFileFieldTarget" />\n-    <adapter factory=".dxfields.TextLineFieldSerializer" />\n \n     <adapter factory=".blocks.BlocksJSONFieldSerializer" />\n     <subscriber factory=".blocks.TextBlockSerializer"\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 36b0623cb..3f44f313b 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -2,8 +2,6 @@\n \n from AccessControl import getSecurityManager\n from Products.CMFCore.permissions import ModifyPortalContent\n-from plone.app.contenttypes.interfaces import ILink\n-from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.textfield.interfaces import IRichText\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n@@ -25,6 +23,13 @@\n \n import logging\n \n+try:\n+    from plone.app.contenttypes.interfaces import ILink\n+    from plone.app.contenttypes.utils import replace_link_variables_by_paths\n+except ImportError:\n+    # Probably Plone 4.3 with dexterity but without plone.app.contenttypes.\n+    ILink = None\n+\n log = logging.getLogger(__name__)\n \n \n@@ -135,20 +140,22 @@ def __call__(self):\n         return json_compatible(value, self.context)\n \n \n-@adapter(ITextLine, ILink, Interface)\n-class TextLineFieldSerializer(DefaultFieldSerializer):\n-    def __call__(self):\n-        if self.field.getName() != "remoteUrl":\n-            return super(TextLineFieldSerializer, self).__call__()\n-        value = self.get_value()\n-        path = replace_link_variables_by_paths(context=self.context, url=value)\n-        portal = getMultiAdapter(\n-            (self.context, self.context.REQUEST), name="plone_portal_state"\n-        ).portal()\n-        ref_obj = portal.restrictedTraverse(path, None)\n-        if ref_obj:\n-            value = ref_obj.absolute_url()\n-        return json_compatible(value)\n+if ILink is not None:\n+\n+    @adapter(ITextLine, ILink, Interface)\n+    class TextLineFieldSerializer(DefaultFieldSerializer):\n+        def __call__(self):\n+            if self.field.getName() != "remoteUrl":\n+                return super(TextLineFieldSerializer, self).__call__()\n+            value = self.get_value()\n+            path = replace_link_variables_by_paths(context=self.context, url=value)\n+            portal = getMultiAdapter(\n+                (self.context, self.context.REQUEST), name="plone_portal_state"\n+            ).portal()\n+            ref_obj = portal.restrictedTraverse(path, None)\n+            if ref_obj:\n+                value = ref_obj.absolute_url()\n+            return json_compatible(value)\n \n \n @adapter(IField, IDexterityContent, Interface)\n'

Repository: plone.restapi


Branch: refs/heads/7.x.x
Date: 2021-07-11T11:13:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.restapi/commit/0421d2b9827f2d39db449bea1c78ba4571b2509e

Merge pull request #1166 from plone/maurits/fix-without-plone-app-contenttypes

Fix startup on Plone 4 without plone.app.contenttypes.

Files changed:
A news/1166.bugfix
M src/plone/restapi/deserializer/configure.zcml
M src/plone/restapi/deserializer/dxfields.py
M src/plone/restapi/serializer/configure.zcml
M src/plone/restapi/serializer/dxfields.py

b'diff --git a/news/1166.bugfix b/news/1166.bugfix\nnew file mode 100644\nindex 000000000..b1b8bb775\n--- /dev/null\n+++ b/news/1166.bugfix\n@@ -0,0 +1,2 @@\n+Fix startup on Plone 4 without plone.app.contenttypes.\n+[maurits]\ndiff --git a/src/plone/restapi/deserializer/configure.zcml b/src/plone/restapi/deserializer/configure.zcml\nindex 1aca6a602..997ca68cf 100644\n--- a/src/plone/restapi/deserializer/configure.zcml\n+++ b/src/plone/restapi/deserializer/configure.zcml\n@@ -12,13 +12,16 @@\n   <adapter factory=".dxfields.CollectionFieldDeserializer" />\n   <adapter factory=".dxfields.DictFieldDeserializer" />\n   <adapter factory=".dxfields.TextLineFieldDeserializer" />\n-  <adapter factory=".dxfields.LinkTextLineFieldDeserializer" />\n   <adapter factory=".dxfields.TimeFieldDeserializer" />\n   <adapter factory=".dxfields.TimedeltaFieldDeserializer" />\n   <adapter factory=".dxfields.NamedFieldDeserializer" />\n   <adapter factory=".dxfields.RichTextFieldDeserializer" />\n   <adapter factory=".blocks.BlocksJSONFieldDeserializer" />\n \n+  <configure zcml:condition="installed plone.app.contenttypes">\n+    <adapter factory=".dxfields.LinkTextLineFieldDeserializer" />\n+  </configure>\n+\n   <subscriber factory=".blocks.TextBlockDeserializer"\n     provides="plone.restapi.interfaces.IBlockFieldDeserializationTransformer"/>\n   <subscriber factory=".blocks.HTMLBlockDeserializer"\ndiff --git a/src/plone/restapi/deserializer/dxfields.py b/src/plone/restapi/deserializer/dxfields.py\nindex e166e0424..2e09e2601 100644\n--- a/src/plone/restapi/deserializer/dxfields.py\n+++ b/src/plone/restapi/deserializer/dxfields.py\n@@ -1,6 +1,5 @@\n # -*- coding: utf-8 -*-\n from datetime import timedelta\n-from plone.app.contenttypes.interfaces import ILink\n from plone.app.textfield.interfaces import IRichText\n from plone.app.textfield.value import RichTextValue\n from plone.dexterity.interfaces import IDexterityContent\n@@ -30,6 +29,12 @@\n import dateutil\n import six\n \n+try:\n+    from plone.app.contenttypes.interfaces import ILink\n+except ImportError:\n+    # Probably Plone 4.3 with dexterity but without plone.app.contenttypes.\n+    ILink = None\n+\n if six.PY2:\n     import HTMLParser\n \n@@ -75,21 +80,23 @@ def __call__(self, value):\n         return value\n \n \n-@implementer(IFieldDeserializer)\n-@adapter(ITextLine, ILink, IBrowserRequest)\n-class LinkTextLineFieldDeserializer(TextLineFieldDeserializer):\n-    def __call__(self, value):\n-        value = super(LinkTextLineFieldDeserializer, self).__call__(value)\n-        if self.field.getName() == "remoteUrl":\n-            portal = getMultiAdapter(\n-                (self.context, self.context.REQUEST), name="plone_portal_state"\n-            ).portal()\n-            portal_url = portal.portal_url()\n-            if value.startswith(portal_url):\n-                value = "${{portal_url}}{path}".format(\n-                    path=value.replace(portal_url, "")\n-                )\n-        return value\n+if ILink is not None:\n+\n+    @implementer(IFieldDeserializer)\n+    @adapter(ITextLine, ILink, IBrowserRequest)\n+    class LinkTextLineFieldDeserializer(TextLineFieldDeserializer):\n+        def __call__(self, value):\n+            value = super(LinkTextLineFieldDeserializer, self).__call__(value)\n+            if self.field.getName() == "remoteUrl":\n+                portal = getMultiAdapter(\n+                    (self.context, self.context.REQUEST), name="plone_portal_state"\n+                ).portal()\n+                portal_url = portal.portal_url()\n+                if value.startswith(portal_url):\n+                    value = "${{portal_url}}{path}".format(\n+                        path=value.replace(portal_url, "")\n+                    )\n+            return value\n \n \n @implementer(IFieldDeserializer)\ndiff --git a/src/plone/restapi/serializer/configure.zcml b/src/plone/restapi/serializer/configure.zcml\nindex ecac2e48a..2d748ac4a 100644\n--- a/src/plone/restapi/serializer/configure.zcml\n+++ b/src/plone/restapi/serializer/configure.zcml\n@@ -11,6 +11,7 @@\n \n     <configure zcml:condition="installed plone.app.contenttypes">\n         <adapter factory=".collection.SerializeCollectionToJson" />\n+        <adapter factory=".dxfields.TextLineFieldSerializer" />\n     </configure>\n \n     <adapter factory=".summary.DefaultJSONSummarySerializer" />\n@@ -24,7 +25,6 @@\n     <adapter factory=".dxfields.RichttextFieldSerializer" />\n     <adapter factory=".dxfields.DefaultPrimaryFieldTarget" />\n     <adapter factory=".dxfields.PrimaryFileFieldTarget" />\n-    <adapter factory=".dxfields.TextLineFieldSerializer" />\n \n     <adapter factory=".blocks.BlocksJSONFieldSerializer" />\n     <subscriber factory=".blocks.TextBlockSerializer"\ndiff --git a/src/plone/restapi/serializer/dxfields.py b/src/plone/restapi/serializer/dxfields.py\nindex 36b0623cb..3f44f313b 100644\n--- a/src/plone/restapi/serializer/dxfields.py\n+++ b/src/plone/restapi/serializer/dxfields.py\n@@ -2,8 +2,6 @@\n \n from AccessControl import getSecurityManager\n from Products.CMFCore.permissions import ModifyPortalContent\n-from plone.app.contenttypes.interfaces import ILink\n-from plone.app.contenttypes.utils import replace_link_variables_by_paths\n from plone.app.textfield.interfaces import IRichText\n from plone.dexterity.interfaces import IDexterityContent\n from plone.namedfile.interfaces import INamedFileField\n@@ -25,6 +23,13 @@\n \n import logging\n \n+try:\n+    from plone.app.contenttypes.interfaces import ILink\n+    from plone.app.contenttypes.utils import replace_link_variables_by_paths\n+except ImportError:\n+    # Probably Plone 4.3 with dexterity but without plone.app.contenttypes.\n+    ILink = None\n+\n log = logging.getLogger(__name__)\n \n \n@@ -135,20 +140,22 @@ def __call__(self):\n         return json_compatible(value, self.context)\n \n \n-@adapter(ITextLine, ILink, Interface)\n-class TextLineFieldSerializer(DefaultFieldSerializer):\n-    def __call__(self):\n-        if self.field.getName() != "remoteUrl":\n-            return super(TextLineFieldSerializer, self).__call__()\n-        value = self.get_value()\n-        path = replace_link_variables_by_paths(context=self.context, url=value)\n-        portal = getMultiAdapter(\n-            (self.context, self.context.REQUEST), name="plone_portal_state"\n-        ).portal()\n-        ref_obj = portal.restrictedTraverse(path, None)\n-        if ref_obj:\n-            value = ref_obj.absolute_url()\n-        return json_compatible(value)\n+if ILink is not None:\n+\n+    @adapter(ITextLine, ILink, Interface)\n+    class TextLineFieldSerializer(DefaultFieldSerializer):\n+        def __call__(self):\n+            if self.field.getName() != "remoteUrl":\n+                return super(TextLineFieldSerializer, self).__call__()\n+            value = self.get_value()\n+            path = replace_link_variables_by_paths(context=self.context, url=value)\n+            portal = getMultiAdapter(\n+                (self.context, self.context.REQUEST), name="plone_portal_state"\n+            ).portal()\n+            ref_obj = portal.restrictedTraverse(path, None)\n+            if ref_obj:\n+                value = ref_obj.absolute_url()\n+            return json_compatible(value)\n \n \n @adapter(IField, IDexterityContent, Interface)\n'

