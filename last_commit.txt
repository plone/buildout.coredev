Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-09-16T14:34:45+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/a783df5da2e68e78ad083437b3311d56906affab

Implement `pat-contentbrowser` widget

Files changed:
A plone/app/z3cform/templates/contentbrowser_display.pt
A plone/app/z3cform/widgets/contentbrowser.py
M plone/app/z3cform/converters.py
M plone/app/z3cform/converters.zcml
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/templates/relateditems_display.pt
M plone/app/z3cform/widgets.zcml

b'diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 1e824628..1a8efedc 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -3,11 +3,11 @@\n from datetime import time\n from plone.app.z3cform import utils\n from plone.app.z3cform.interfaces import IAjaxSelectWidget\n+from plone.app.z3cform.interfaces import IContentBrowserWidget\n from plone.app.z3cform.interfaces import IDatetimeWidget\n from plone.app.z3cform.interfaces import IDateWidget\n from plone.app.z3cform.interfaces import ILinkWidget\n from plone.app.z3cform.interfaces import IQueryStringWidget\n-from plone.app.z3cform.interfaces import IRelatedItemsWidget\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n from plone.app.z3cform.interfaces import ITimeWidget\n@@ -304,9 +304,9 @@ def toFieldValue(self, value):\n         return collectionType(untokenized_value)\n \n \n-@adapter(IRelation, IRelatedItemsWidget)\n-class RelationChoiceRelatedItemsWidgetConverter(BaseDataConverter):\n-    """Data converter for RelationChoice fields using the RelatedItemsWidget."""\n+@adapter(IRelation, IContentBrowserWidget)\n+class RelationChoiceContentBrowserWidgetConverter(BaseDataConverter):\n+    """Data converter for RelationChoice fields using the ContentBrowserWidget."""\n \n     def toWidgetValue(self, value):\n         if not value:\n@@ -328,8 +328,15 @@ def toFieldValue(self, value):\n             return self.field.missing_value\n \n \n+# BBB\n+class RelationChoiceRelatedItemsWidgetConverter(\n+    RelationChoiceContentBrowserWidgetConverter\n+):\n+    """backwards compatibility"""\n+\n+\n @adapter(IRelation, ISequenceWidget)\n-class RelationChoiceSelectWidgetConverter(RelationChoiceRelatedItemsWidgetConverter):\n+class RelationChoiceSelectWidgetConverter(RelationChoiceContentBrowserWidgetConverter):\n     """Data converter for RelationChoice fields using with SequenceWidgets,\n     which expect sequence values.\n     """\n@@ -341,9 +348,9 @@ def toWidgetValue(self, value):\n         return [IUUID(value)]\n \n \n-@adapter(ICollection, IRelatedItemsWidget)\n-class RelatedItemsDataConverter(BaseDataConverter):\n-    """Data converter for ICollection fields using the RelatedItemsWidget."""\n+@adapter(ICollection, IContentBrowserWidget)\n+class ContentBrowserDataConverter(BaseDataConverter):\n+    """Data converter for ICollection fields using the ContentBrowserWidget."""\n \n     def toWidgetValue(self, value):\n         """Converts from field value to widget.\n@@ -405,8 +412,13 @@ def toFieldValue(self, value):\n             return collectionType(valueType(v) for v in value)\n \n \n+# BBB\n+class RelatedItemsDataConverter(ContentBrowserDataConverter):\n+    """backwards compatibility"""\n+\n+\n @adapter(IRelationList, ISequenceWidget)\n-class RelationListSelectWidgetDataConverter(RelatedItemsDataConverter):\n+class RelationListSelectWidgetDataConverter(ContentBrowserDataConverter):\n     """Data converter for RelationChoice fields using with SequenceWidgets,\n     which expect sequence values.\n     """\ndiff --git a/plone/app/z3cform/converters.zcml b/plone/app/z3cform/converters.zcml\nindex 5aca1fc2..eabfba73 100644\n--- a/plone/app/z3cform/converters.zcml\n+++ b/plone/app/z3cform/converters.zcml\n@@ -8,16 +8,16 @@\n   <adapter factory=".converters.SequenceSelect2WidgetConverter" />\n   <adapter factory=".converters.AjaxSelectWidgetConverter" />\n   <adapter factory=".converters.QueryStringDataConverter" />\n-  <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />\n+  <adapter factory=".converters.RelationChoiceContentBrowserWidgetConverter" />\n   <adapter\n-      factory=".converters.RelationChoiceRelatedItemsWidgetConverter"\n+      factory=".converters.RelationChoiceContentBrowserWidgetConverter"\n       for="z3c.relationfield.interfaces.IRelationChoice\n            .interfaces.ITextWidget"\n       />\n   <adapter factory=".converters.RelationChoiceSelectWidgetConverter" />\n-  <adapter factory=".converters.RelatedItemsDataConverter" />\n+  <adapter factory=".converters.ContentBrowserDataConverter" />\n   <adapter\n-      factory=".converters.RelatedItemsDataConverter"\n+      factory=".converters.ContentBrowserDataConverter"\n       for="z3c.relationfield.interfaces.IRelationList\n            .interfaces.ITextWidget"\n       />\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex 0c22c77a..9b4b065c 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -91,6 +91,10 @@ class IRelatedItemsWidget(ITextWidget):\n     """Marker interface for the RelatedItemsWidget."""\n \n \n+class IContentBrowserWidget(ITextWidget):\n+    """Marker interface for the RelatedItemsWidget."""\n+\n+\n class IRichTextWidget(patextfield_IRichTextWidget):\n     """Marker interface for the TinyMCEWidget."""\n \ndiff --git a/plone/app/z3cform/templates/contentbrowser_display.pt b/plone/app/z3cform/templates/contentbrowser_display.pt\nnew file mode 100644\nindex 00000000..972a9702\n--- /dev/null\n+++ b/plone/app/z3cform/templates/contentbrowser_display.pt\n@@ -0,0 +1,44 @@\n+<div class="contentbrowser-widget ${python:normalizeString(view.field.__class__.__name__)}-field"\n+     id="form-widgets-${python:view.__name__}"\n+     tal:define="\n+       plone_view nocall:context/@@plone;\n+       normalizeString python:plone_view.normalizeString;\n+       items python: view.items();\n+     "\n+     tal:condition="items"\n+     i18n:domain="plone"\n+>\n+  <ul>\n+    <li tal:repeat="item items">\n+      <span title="${item_type}"\n+            tal:define="\n+              item_type           python:item.portal_type;\n+              item_type_class     python:item.ContentTypeClass();\n+              item_wf_state_class python:item.ReviewStateClass();\n+              appendViewAction    python:item.appendViewAction();\n+              item_url            python:item.getURL();\n+              item_url            python:item_url+\'/view\' if appendViewAction else item_url;\n+            "\n+      >\n+\n+        <a href="${item_url}">\n+          <img class="mime-icon"\n+               src="${python:item.MimeTypeIcon()}"\n+               tal:condition="python:item_type ==\'File\'"\n+          />\n+\n+          <span class="${item_type_class} ${item_wf_state_class} url"\n+                tal:content="python:item.Title()"\n+          >\n+                    Title\n+          </span>\n+          <span class="discreet"\n+                tal:content="python:item.Description()"\n+          >\n+                    Description\n+          </span>\n+        </a>\n+      </span>\n+    </li>\n+  </ul>\n+</div>\ndiff --git a/plone/app/z3cform/templates/relateditems_display.pt b/plone/app/z3cform/templates/relateditems_display.pt\nindex b6203c2b..a3b19ea7 100644\n--- a/plone/app/z3cform/templates/relateditems_display.pt\n+++ b/plone/app/z3cform/templates/relateditems_display.pt\n@@ -1,46 +1,44 @@\n-<span class="relateditems-widget ${python:normalizeString(view.field.__class__.__name__)}-field"\n-      id="form-widgets-${python:view.__name__}"\n-      tal:define="\n-        plone_view nocall:context/@@plone;\n-        normalizeString python:plone_view.normalizeString;\n-        items python: view.items();\n-      "\n-      tal:condition="items"\n-      i18n:domain="plone"\n+<div class="relateditems-widget ${python:normalizeString(view.field.__class__.__name__)}-field"\n+     id="form-widgets-${python:view.__name__}"\n+     tal:define="\n+       plone_view nocall:context/@@plone;\n+       normalizeString python:plone_view.normalizeString;\n+       items python: view.items();\n+     "\n+     tal:condition="items"\n+     i18n:domain="plone"\n >\n-  <div>\n-    <ul>\n-      <li tal:repeat="item items">\n-        <span title="${item_type}"\n-              tal:define="\n-                item_type           python:item.portal_type;\n-                item_type_class     python:item.ContentTypeClass();\n-                item_wf_state_class python:item.ReviewStateClass();\n-                appendViewAction    python:item.appendViewAction();\n-                item_url            python:item.getURL();\n-                item_url            python:item_url+\'/view\' if appendViewAction else item_url;\n-              "\n-        >\n+  <ul>\n+    <li tal:repeat="item items">\n+      <span title="${item_type}"\n+            tal:define="\n+              item_type           python:item.portal_type;\n+              item_type_class     python:item.ContentTypeClass();\n+              item_wf_state_class python:item.ReviewStateClass();\n+              appendViewAction    python:item.appendViewAction();\n+              item_url            python:item.getURL();\n+              item_url            python:item_url+\'/view\' if appendViewAction else item_url;\n+            "\n+      >\n \n-          <a href="${item_url}">\n-            <img class="mime-icon"\n-                 src="${python:item.MimeTypeIcon()}"\n-                 tal:condition="python:item_type ==\'File\'"\n-            />\n+        <a href="${item_url}">\n+          <img class="mime-icon"\n+               src="${python:item.MimeTypeIcon()}"\n+               tal:condition="python:item_type ==\'File\'"\n+          />\n \n-            <span class="${item_type_class} ${item_wf_state_class} url"\n-                  tal:content="python:item.Title()"\n-            >\n+          <span class="${item_type_class} ${item_wf_state_class} url"\n+                tal:content="python:item.Title()"\n+          >\n                     Title\n-            </span>\n-            <span class="discreet"\n-                  tal:content="python:item.Description()"\n-            >\n+          </span>\n+          <span class="discreet"\n+                tal:content="python:item.Description()"\n+          >\n                     Description\n-            </span>\n-          </a>\n-        </span>\n-      </li>\n-    </ul>\n-  </div>\n-</span>\n+          </span>\n+        </a>\n+      </span>\n+    </li>\n+  </ul>\n+</div>\ndiff --git a/plone/app/z3cform/widgets.zcml b/plone/app/z3cform/widgets.zcml\nindex 5fd76ff2..fe65f2ca 100644\n--- a/plone/app/z3cform/widgets.zcml\n+++ b/plone/app/z3cform/widgets.zcml\n@@ -223,27 +223,36 @@\n \n   <!-- relateditems -->\n \n+  <z3c:widgetTemplate\n+      widget=".interfaces.IRelatedItemsWidget"\n+      template="templates/relateditems_display.pt"\n+      layer=".interfaces.IPloneFormLayer"\n+      mode="display"\n+      />\n+\n+  <!-- contentbrowser -->\n+\n   <adapter\n-      factory=".widgets.relateditems.RelatedItemsFieldWidget"\n+      factory=".widgets.contentbrowser.ContentBrowserFieldWidget"\n       for="z3c.relationfield.interfaces.IRelationChoice\n            plone.app.z3cform.interfaces.IPloneFormLayer"\n       />\n \n   <adapter\n-      factory=".widgets.relateditems.RelatedItemsFieldWidget"\n+      factory=".widgets.contentbrowser.ContentBrowserFieldWidget"\n       for="z3c.relationfield.interfaces.IRelationList\n            plone.app.z3cform.interfaces.IPloneFormLayer"\n       />\n \n   <adapter\n-      factory=".widgets.relateditems.RelatedItemsFieldWidget"\n+      factory=".widgets.contentbrowser.ContentBrowserFieldWidget"\n       for="zope.schema.interfaces.IChoice\n            plone.app.vocabularies.catalog.CatalogSource\n            plone.app.z3cform.interfaces.IPloneFormLayer"\n       />\n \n   <z3c:widgetTemplate\n-      widget=".interfaces.IRelatedItemsWidget"\n+      widget=".interfaces.IContentBrowserWidget"\n       template="templates/relateditems_display.pt"\n       layer=".interfaces.IPloneFormLayer"\n       mode="display"\ndiff --git a/plone/app/z3cform/widgets/contentbrowser.py b/plone/app/z3cform/widgets/contentbrowser.py\nnew file mode 100644\nindex 00000000..f97ac4df\n--- /dev/null\n+++ b/plone/app/z3cform/widgets/contentbrowser.py\n@@ -0,0 +1,231 @@\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from OFS.interfaces import IFolder\n+from OFS.interfaces import ISimpleItem\n+from plone.app.contentlisting.interfaces import IContentListing\n+from plone.app.z3cform.interfaces import IContentBrowserWidget\n+from plone.app.z3cform.utils import dict_merge\n+from plone.app.z3cform.utils import get_context_url\n+from plone.app.z3cform.utils import get_widget_form\n+from plone.app.z3cform.widgets.base import HTMLInputWidget\n+from plone.base import PloneMessageFactory as _\n+from plone.base.navigationroot import get_navigation_root_object\n+from plone.base.utils import get_top_site_from_url\n+from Products.CMFCore.utils import getToolByName\n+from z3c.form.interfaces import IEditForm\n+from z3c.form.interfaces import IFieldWidget\n+from z3c.form.interfaces import IForm\n+from z3c.form.widget import FieldWidget\n+from z3c.form.widget import Widget\n+from zope.component.hooks import getSite\n+from zope.globalrequest import getRequest\n+from zope.interface import implementer\n+from zope.interface import implementer_only\n+from zope.schema.interfaces import IChoice\n+from zope.schema.interfaces import ICollection\n+\n+\n+def get_contentbrowser_options(\n+    context,\n+    value,\n+    separator,\n+    vocabulary_name,\n+    vocabulary_view,\n+    field_name=None,\n+    include_recently_added=True,\n+):\n+    if IForm.providedBy(context):\n+        context = context.context\n+\n+    request = getRequest()\n+    site = get_top_site_from_url(context, request)\n+    options = {\n+        "separator": separator,\n+    }\n+    if not vocabulary_name:\n+        # we need a vocabulary!\n+        raise ValueError("ContentBrowser needs a vocabulary")\n+    options["vocabularyUrl"] = "{}/{}?name={}".format(\n+        get_context_url(site),\n+        vocabulary_view,\n+        vocabulary_name,\n+    )\n+    if field_name:\n+        options["vocabularyUrl"] += f"&field={field_name}"\n+    if value:\n+        options["initialValues"] = {}\n+        catalog = False\n+        if vocabulary_name == "plone.app.vocabularies.Catalog":\n+            catalog = getToolByName(getSite(), "portal_catalog")\n+        for value in value.split(separator):\n+            title = value\n+            if catalog:\n+                result = catalog(UID=value)\n+                title = result[0].Title if result else value\n+            options["initialValues"][value] = title\n+\n+    nav_root = get_navigation_root_object(context, site)\n+\n+    if not ISimpleItem.providedBy(context):\n+        context = nav_root\n+\n+    # basePath - start to search/browse in here.\n+    base_path_context = context\n+    if not IFolder.providedBy(base_path_context):\n+        base_path_context = aq_parent(aq_inner(base_path_context))\n+    if not base_path_context:\n+        base_path_context = nav_root\n+    options["basePath"] = "/".join(base_path_context.getPhysicalPath())\n+\n+    # rootPath - Only display breadcrumb elements deeper than this path.\n+    options["rootPath"] = "/".join(site.getPhysicalPath()) if site else "/"\n+\n+    # rootUrl: Visible URL up to the rootPath. This is prepended to the\n+    # currentPath to generate submission URLs.\n+    options["rootUrl"] = site.absolute_url() if site else ""\n+\n+    # contextPath - current edited object. Will not be available to select.\n+    options["contextPath"] = "/".join(context.getPhysicalPath())\n+\n+    if base_path_context != nav_root:\n+        options["favorites"] = [\n+            {\n+                "title": _("Current Content"),\n+                "path": "/".join(base_path_context.getPhysicalPath()),\n+            },\n+            {"title": _("Start Page"), "path": "/".join(nav_root.getPhysicalPath())},\n+        ]\n+\n+    if include_recently_added:\n+        # Options for recently used key\n+        tool = getToolByName(context, "portal_membership")\n+        user = tool.getAuthenticatedMember()\n+        options["recentlyUsed"] = False  # Keep that off in Plone 5.1\n+        options["recentlyUsedKey"] = "contentbrowser_recentlyused_{}_{}".format(\n+            field_name or "", user.id\n+        )  # use string substitution with %s here for automatic str casting.\n+\n+    return options\n+\n+\n+@implementer_only(IContentBrowserWidget)\n+class ContentBrowserWidget(HTMLInputWidget, Widget):\n+    """ContentBrowser widget for z3c.form."""\n+\n+    pattern = "contentbrowser"\n+    separator = ";"\n+    vocabulary = None\n+    vocabulary_override = False\n+    vocabulary_view = "@@getVocabulary"\n+    orderable = False\n+\n+    def update(self):\n+        super().update()\n+        field = getattr(self, "field", None)\n+        if ICollection.providedBy(self.field):\n+            field = self.field.value_type\n+        if (\n+            not self.vocabulary\n+            and field is not None\n+            and getattr(field, "vocabularyName", None)\n+        ):\n+            self.vocabulary = field.vocabularyName\n+            self.vocabulary_override = True\n+        else:\n+            self.vocabulary = "plone.app.vocabularies.Catalog"\n+\n+    def get_pattern_options(self):\n+        field = None\n+        pattern_options = {}\n+\n+        if IChoice.providedBy(self.field):\n+            pattern_options["maximumSelectionSize"] = 1\n+            field = self.field\n+        elif ICollection.providedBy(self.field):\n+            field = self.field.value_type\n+\n+        vocabulary_name = self.vocabulary\n+\n+        field_name = self.field and self.field.__name__ or None\n+\n+        context = self.context\n+        view_context = get_widget_form(self)\n+        # For EditForms and non-Forms (in tests), the vocabulary is looked\n+        # up on the context, otherwise on the view\n+        if IEditForm.providedBy(view_context):\n+            if self.is_subform_widget():\n+                view_context = self.form.parentForm.context\n+            elif not ISimpleItem.providedBy(context):\n+                view_context = self.form.context\n+            else:\n+                view_context = context\n+        elif not IForm.providedBy(view_context):\n+            view_context = context\n+        else:\n+            pass\n+            # view_context is defined above already\n+\n+        root_search_mode = (\n+            pattern_options.get("mode", None) and "basePath" not in pattern_options\n+        )\n+\n+        pattern_options = dict_merge(\n+            get_contentbrowser_options(\n+                view_context,\n+                self.value,\n+                self.separator,\n+                vocabulary_name,\n+                self.vocabulary_view,\n+                field_name,\n+            ),\n+            pattern_options,\n+        )\n+        if root_search_mode:\n+            # Delete default basePath option in search mode, when no basePath\n+            # was explicitly set.\n+            del pattern_options["basePath"]\n+        if (\n+            not self.vocabulary_override\n+            and field\n+            and getattr(field, "vocabulary", None)\n+        ):\n+            # widget vocab takes precedence over field\n+            form_url = self.request.getURL()\n+            source_url = "{:s}/++widget++{:s}/@@getSource".format(\n+                form_url,\n+                self.name,\n+            )\n+            pattern_options["vocabularyUrl"] = source_url\n+\n+        return pattern_options\n+\n+    def items(self):\n+        """Return item for the widget values for the display template\n+\n+        Query the catalog for the widget-value (uuids) to only display items\n+        that the user is allowed to see. Accessing the value with e.g.\n+        getattr(self.context, self.__name__) would yield the items unfiltered.\n+        Uses IContentListing for easy access to MimeTypeIcon and more.\n+        """\n+        results = []\n+        if not self.value:\n+            return results\n+        separator = getattr(self, "separator", ";")\n+        uuids = self.value.split(separator)\n+\n+        try:\n+            catalog = getToolByName(self.context, "portal_catalog")\n+        except AttributeError:\n+            catalog = getToolByName(getSite(), "portal_catalog")\n+\n+        brains = catalog(UID=uuids)\n+        # restore original order\n+        results = sorted(brains, key=lambda brain: uuids.index(brain.UID))\n+        return IContentListing(results)\n+\n+\n+@implementer(IFieldWidget)\n+def ContentBrowserFieldWidget(field, request, extra=None):\n+    if extra is not None:\n+        request = extra\n+    return FieldWidget(field, ContentBrowserWidget(request))\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-09-16T14:34:45+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/576d427408cba8c24248b2994e21113e1654586b

changenote

Files changed:
A news/197.feature

b'diff --git a/news/197.feature b/news/197.feature\nnew file mode 100644\nindex 00000000..abc8225c\n--- /dev/null\n+++ b/news/197.feature\n@@ -0,0 +1,9 @@\n+Implement new `ContentBrowserWidget` for `pat-contentbrowser` pattern.\n+\n+The deprecated `RelatedItemsWidget` and `pat-relateditems` pattern is still available\n+and imports should not break. But the default widget and converter adapter registration for\n+z3c.relationfield is changed to the new widget.\n+\n+Since `plone.app.relationfield` defines the widget with `plone.autoform` schema\n+hints nothing changes until the package is updated to the new widget.\n+[petschki]\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-09-16T14:34:45+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/3e03ac9a0c3a91a390e7592217a4a60dddf1129e

update tests

Files changed:
M plone/app/z3cform/tests/test_widgets.py

b'diff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 77438a0b..f453ba14 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -8,8 +8,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n from plone.app.z3cform.widgets.base import PatternFormElement\n+from plone.app.z3cform.widgets.contentbrowser import ContentBrowserWidget\n from plone.app.z3cform.widgets.datetime import DateWidget\n-from plone.app.z3cform.widgets.relateditems import RelatedItemsWidget\n from plone.app.z3cform.widgets.text import TextFieldWidget\n from plone.autoform.directives import widget\n from plone.autoform.form import AutoExtensibleForm\n@@ -1407,7 +1407,7 @@ class IRelationsType(Interface):\n     multiple = RelationList(title="Multiple (Relations field)", required=False)\n \n \n-class RelatedItemsWidgetTemplateIntegrationTests(unittest.TestCase):\n+class ContentBrowserWidgetTemplateIntegrationTests(unittest.TestCase):\n     layer = PAZ3CForm_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -1444,7 +1444,7 @@ def test_related_items_widget_display_template(self):\n         default_view.update()\n \n         single = default_view.w["single"]\n-        self.assertIsInstance(single, RelatedItemsWidget)\n+        self.assertIsInstance(single, ContentBrowserWidget)\n         self.assertTrue(single.value, target.UID())\n         items = single.items()\n         self.assertIsInstance(items, ContentListing)\n@@ -1463,7 +1463,7 @@ def test_related_items_widget_display_template(self):\n         )\n \n         multiple = default_view.w["multiple"]\n-        self.assertIsInstance(multiple, RelatedItemsWidget)\n+        self.assertIsInstance(multiple, ContentBrowserWidget)\n         self.assertTrue(multiple.value, ";".join([target.UID(), doc.UID()]))\n         items = multiple.items()\n         self.assertIsInstance(items, ContentListing)\n@@ -1649,6 +1649,168 @@ def test_fieldwidget(self):\n         self.assertIs(widget.request, request)\n \n \n+class ContentBrowserWidgetTests(unittest.TestCase):\n+    layer = PAZ3CForm_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+    def test_single_selection(self):\n+        """The pattern_options value for maximumSelectionSize should\n+        be 1 when the field only allows a single selection."""\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserFieldWidget\n+\n+        field = Choice(\n+            __name__="selectfield",\n+            values=["one", "two", "three"],\n+        )\n+        widget = ContentBrowserFieldWidget(field, self.request)\n+        widget.context = self.portal\n+        widget.update()\n+        pattern_options = widget.get_pattern_options()\n+        self.assertEqual(pattern_options.get("maximumSelectionSize", 0), 1)\n+\n+    def test_multiple_selection(self):\n+        """The pattern_options key maximumSelectionSize shouldn\'t be\n+        set when the field allows multiple selections"""\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserFieldWidget\n+        from Zope2.App.schema import Zope2VocabularyRegistry\n+        from zope.schema.interfaces import ISource\n+\n+        field = List(\n+            __name__="selectfield",\n+            value_type=Choice(vocabulary="foobar"),\n+        )\n+        widget = ContentBrowserFieldWidget(field, self.request)\n+        widget.context = self.portal\n+\n+        vocab = Mock()\n+        alsoProvides(vocab, ISource)\n+        with mock.patch.object(Zope2VocabularyRegistry, "get", return_value=vocab):\n+            widget.update()\n+            patterns_options = widget.get_pattern_options()\n+        self.assertFalse("maximumSelectionSize" in patterns_options)\n+        self.assertEqual(\n+            patterns_options["vocabularyUrl"],\n+            "http://nohost/plone/@@getVocabulary?name=foobar&field=selectfield",\n+        )\n+\n+    def test_converter_RelationChoice(self):\n+        from plone.app.z3cform.converters import (\n+            RelationChoiceContentBrowserWidgetConverter,\n+        )\n+\n+        brain = Mock(getObject=Mock(return_value="obj"))\n+        portal_catalog = Mock(return_value=[brain])\n+        widget = Mock()\n+        converter = RelationChoiceContentBrowserWidgetConverter(\n+            TextLine(),\n+            widget,\n+        )\n+\n+        with mock.patch(\n+            "plone.app.z3cform.converters.IUUID",\n+            return_value="id",\n+        ):\n+            self.assertEqual(converter.toWidgetValue("obj"), "id")\n+        self.assertEqual(converter.toWidgetValue(None), None)\n+\n+        with mock.patch(\n+            "plone.app.z3cform.converters.getToolByName",\n+            return_value=portal_catalog,\n+        ):\n+            self.assertEqual(converter.toFieldValue("id"), "obj")\n+        self.assertEqual(converter.toFieldValue(None), None)\n+\n+    def test_converter_RelationList(self):\n+        from plone.app.z3cform.converters import ContentBrowserDataConverter\n+        from z3c.relationfield.interfaces import IRelationList\n+\n+        field = List()\n+        alsoProvides(field, IRelationList)\n+        brain1 = Mock(getObject=Mock(return_value="obj1"), UID="id1")\n+        brain2 = Mock(getObject=Mock(return_value="obj2"), UID="id2")\n+        portal_catalog = Mock(return_value=[brain1, brain2])\n+        widget = Mock(separator=";")\n+        converter = ContentBrowserDataConverter(field, widget)\n+\n+        self.assertEqual(converter.toWidgetValue(None), None)\n+        with mock.patch(\n+            "plone.app.z3cform.converters.IUUID",\n+            side_effect=["id1", "id2"],\n+        ):\n+            self.assertEqual(\n+                converter.toWidgetValue(["obj1", "obj2"]),\n+                "id1;id2",\n+            )\n+\n+        self.assertEqual(converter.toFieldValue(None), None)\n+        with mock.patch(\n+            "plone.app.z3cform.converters.getToolByName",\n+            return_value=portal_catalog,\n+        ):\n+            self.assertEqual(\n+                converter.toFieldValue("id1;id2"),\n+                ["obj1", "obj2"],\n+            )\n+\n+    def test_converter_List_of_Choice(self):\n+        from plone.app.z3cform.converters import ContentBrowserDataConverter\n+\n+        fields = (\n+            List(),\n+            List(value_type=TextLine()),\n+            List(value_type=BytesLine()),\n+            List(value_type=Choice(values=["one", "two", "three"])),\n+        )\n+        for field in fields:\n+            expected_value_type = getattr(\n+                field.value_type,\n+                "_type",\n+                str,\n+            )\n+            if expected_value_type is None:\n+                expected_value_type = str\n+            widget = Mock(separator=";")\n+            converter = ContentBrowserDataConverter(field, widget)\n+\n+            self.assertEqual(converter.toWidgetValue(None), None)\n+            self.assertEqual(\n+                converter.toWidgetValue(["id1", "id2"]),\n+                "id1;id2",\n+            )\n+\n+            self.assertEqual(converter.toFieldValue(None), None)\n+            if expected_value_type == bytes:\n+                expected = [b"id1", b"id2"]\n+            else:\n+                expected = ["id1", "id2"]\n+            self.assertEqual(\n+                converter.toFieldValue("id1;id2"),\n+                expected,\n+            )\n+\n+            self.assertEqual(converter.toFieldValue(None), None)\n+            self.assertEqual(\n+                type(converter.toFieldValue("id1;id2")[0]),\n+                expected_value_type,\n+            )\n+\n+    def test_fieldwidget(self):\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserFieldWidget\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserWidget\n+\n+        field = Mock(__name__="field", title="", required=True)\n+        vocabulary = Mock()\n+        request = Mock()\n+        widget = ContentBrowserFieldWidget(field, vocabulary, request)\n+        self.assertTrue(isinstance(widget, ContentBrowserWidget))\n+        self.assertIs(widget.field, field)\n+        self.assertIs(widget.request, request)\n+\n+\n class RichTextWidgetTests(unittest.TestCase):\n     layer = PAZ3CForm_INTEGRATION_TESTING\n \n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-09-16T14:34:45+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/54ce09d3791396fa089c0e200eb1d0ce57bb0de7

switch `LinkWidget` to contentbrowser

Files changed:
M plone/app/z3cform/templates/link_input.pt

b'diff --git a/plone/app/z3cform/templates/link_input.pt b/plone/app/z3cform/templates/link_input.pt\nindex ff3e0f39..853760f0 100644\n--- a/plone/app/z3cform/templates/link_input.pt\n+++ b/plone/app/z3cform/templates/link_input.pt\n@@ -25,11 +25,11 @@\n         <div>\n           <div class="mb-3 main">\n             <!-- this gives the name to the "linkType" -->\n-            <input class="pat-relateditems"\n+            <input class="pat-contentbrowser"\n                    name="${view/name}.internal"\n                    type="text"\n                    value="${value}"\n-                   data-pat-relateditems="${view/pattern_data}"\n+                   data-pat-contentbrowser="${view/pattern_data}"\n             />\n           </div>\n         </div>\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-09-16T14:59:42+02:00
Author: Peter Mathis (petschki) <peter.mathis@kombinat.at>
Commit: https://github.com/plone/plone.app.z3cform/commit/bc626b59d07421997c1dd968cdefd080eaa70e2d

Add BBB adapters

Files changed:
M plone/app/z3cform/converters.py
M plone/app/z3cform/converters.zcml

b'diff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 1a8efedc..fb586c65 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -8,6 +8,7 @@\n from plone.app.z3cform.interfaces import IDateWidget\n from plone.app.z3cform.interfaces import ILinkWidget\n from plone.app.z3cform.interfaces import IQueryStringWidget\n+from plone.app.z3cform.interfaces import IRelatedItemsWidget\n from plone.app.z3cform.interfaces import ISelectWidget\n from plone.app.z3cform.interfaces import ISingleCheckBoxBoolWidget\n from plone.app.z3cform.interfaces import ITimeWidget\n@@ -329,6 +330,7 @@ def toFieldValue(self, value):\n \n \n # BBB\n+@adapter(IRelation, IRelatedItemsWidget)\n class RelationChoiceRelatedItemsWidgetConverter(\n     RelationChoiceContentBrowserWidgetConverter\n ):\n@@ -413,6 +415,7 @@ def toFieldValue(self, value):\n \n \n # BBB\n+@adapter(ICollection, IRelatedItemsWidget)\n class RelatedItemsDataConverter(ContentBrowserDataConverter):\n     """backwards compatibility"""\n \ndiff --git a/plone/app/z3cform/converters.zcml b/plone/app/z3cform/converters.zcml\nindex eabfba73..09668922 100644\n--- a/plone/app/z3cform/converters.zcml\n+++ b/plone/app/z3cform/converters.zcml\n@@ -23,4 +23,8 @@\n       />\n   <adapter factory=".converters.RelationListSelectWidgetDataConverter" />\n   <adapter factory=".converters.LinkWidgetDataConverter" />\n+\n+  <!-- BBB -->\n+  <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />\n+  <adapter factory=".converters.RelatedItemsDataConverter" />\n </configure>\n'

Repository: plone.app.z3cform


Branch: refs/heads/master
Date: 2024-09-20T08:08:41+02:00
Author: Peter Mathis (petschki) <petschki@users.noreply.github.com>
Commit: https://github.com/plone/plone.app.z3cform/commit/d38e1fab87c1d66619950fd4cdd007a5ffd8f559

Merge pull request #197 from plone/pat-contentbrowser-widget

Implement `ContentBrowserWidget` for the new `pat-contentbrowser` pattern

Files changed:
A news/197.feature
A plone/app/z3cform/templates/contentbrowser_display.pt
A plone/app/z3cform/widgets/contentbrowser.py
M plone/app/z3cform/converters.py
M plone/app/z3cform/converters.zcml
M plone/app/z3cform/interfaces.py
M plone/app/z3cform/templates/link_input.pt
M plone/app/z3cform/templates/relateditems_display.pt
M plone/app/z3cform/tests/test_widgets.py
M plone/app/z3cform/widgets.zcml

b'diff --git a/news/197.feature b/news/197.feature\nnew file mode 100644\nindex 00000000..abc8225c\n--- /dev/null\n+++ b/news/197.feature\n@@ -0,0 +1,9 @@\n+Implement new `ContentBrowserWidget` for `pat-contentbrowser` pattern.\n+\n+The deprecated `RelatedItemsWidget` and `pat-relateditems` pattern is still available\n+and imports should not break. But the default widget and converter adapter registration for\n+z3c.relationfield is changed to the new widget.\n+\n+Since `plone.app.relationfield` defines the widget with `plone.autoform` schema\n+hints nothing changes until the package is updated to the new widget.\n+[petschki]\ndiff --git a/plone/app/z3cform/converters.py b/plone/app/z3cform/converters.py\nindex 1e824628..fb586c65 100644\n--- a/plone/app/z3cform/converters.py\n+++ b/plone/app/z3cform/converters.py\n@@ -3,6 +3,7 @@\n from datetime import time\n from plone.app.z3cform import utils\n from plone.app.z3cform.interfaces import IAjaxSelectWidget\n+from plone.app.z3cform.interfaces import IContentBrowserWidget\n from plone.app.z3cform.interfaces import IDatetimeWidget\n from plone.app.z3cform.interfaces import IDateWidget\n from plone.app.z3cform.interfaces import ILinkWidget\n@@ -304,9 +305,9 @@ def toFieldValue(self, value):\n         return collectionType(untokenized_value)\n \n \n-@adapter(IRelation, IRelatedItemsWidget)\n-class RelationChoiceRelatedItemsWidgetConverter(BaseDataConverter):\n-    """Data converter for RelationChoice fields using the RelatedItemsWidget."""\n+@adapter(IRelation, IContentBrowserWidget)\n+class RelationChoiceContentBrowserWidgetConverter(BaseDataConverter):\n+    """Data converter for RelationChoice fields using the ContentBrowserWidget."""\n \n     def toWidgetValue(self, value):\n         if not value:\n@@ -328,8 +329,16 @@ def toFieldValue(self, value):\n             return self.field.missing_value\n \n \n+# BBB\n+@adapter(IRelation, IRelatedItemsWidget)\n+class RelationChoiceRelatedItemsWidgetConverter(\n+    RelationChoiceContentBrowserWidgetConverter\n+):\n+    """backwards compatibility"""\n+\n+\n @adapter(IRelation, ISequenceWidget)\n-class RelationChoiceSelectWidgetConverter(RelationChoiceRelatedItemsWidgetConverter):\n+class RelationChoiceSelectWidgetConverter(RelationChoiceContentBrowserWidgetConverter):\n     """Data converter for RelationChoice fields using with SequenceWidgets,\n     which expect sequence values.\n     """\n@@ -341,9 +350,9 @@ def toWidgetValue(self, value):\n         return [IUUID(value)]\n \n \n-@adapter(ICollection, IRelatedItemsWidget)\n-class RelatedItemsDataConverter(BaseDataConverter):\n-    """Data converter for ICollection fields using the RelatedItemsWidget."""\n+@adapter(ICollection, IContentBrowserWidget)\n+class ContentBrowserDataConverter(BaseDataConverter):\n+    """Data converter for ICollection fields using the ContentBrowserWidget."""\n \n     def toWidgetValue(self, value):\n         """Converts from field value to widget.\n@@ -405,8 +414,14 @@ def toFieldValue(self, value):\n             return collectionType(valueType(v) for v in value)\n \n \n+# BBB\n+@adapter(ICollection, IRelatedItemsWidget)\n+class RelatedItemsDataConverter(ContentBrowserDataConverter):\n+    """backwards compatibility"""\n+\n+\n @adapter(IRelationList, ISequenceWidget)\n-class RelationListSelectWidgetDataConverter(RelatedItemsDataConverter):\n+class RelationListSelectWidgetDataConverter(ContentBrowserDataConverter):\n     """Data converter for RelationChoice fields using with SequenceWidgets,\n     which expect sequence values.\n     """\ndiff --git a/plone/app/z3cform/converters.zcml b/plone/app/z3cform/converters.zcml\nindex 5aca1fc2..09668922 100644\n--- a/plone/app/z3cform/converters.zcml\n+++ b/plone/app/z3cform/converters.zcml\n@@ -8,19 +8,23 @@\n   <adapter factory=".converters.SequenceSelect2WidgetConverter" />\n   <adapter factory=".converters.AjaxSelectWidgetConverter" />\n   <adapter factory=".converters.QueryStringDataConverter" />\n-  <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />\n+  <adapter factory=".converters.RelationChoiceContentBrowserWidgetConverter" />\n   <adapter\n-      factory=".converters.RelationChoiceRelatedItemsWidgetConverter"\n+      factory=".converters.RelationChoiceContentBrowserWidgetConverter"\n       for="z3c.relationfield.interfaces.IRelationChoice\n            .interfaces.ITextWidget"\n       />\n   <adapter factory=".converters.RelationChoiceSelectWidgetConverter" />\n-  <adapter factory=".converters.RelatedItemsDataConverter" />\n+  <adapter factory=".converters.ContentBrowserDataConverter" />\n   <adapter\n-      factory=".converters.RelatedItemsDataConverter"\n+      factory=".converters.ContentBrowserDataConverter"\n       for="z3c.relationfield.interfaces.IRelationList\n            .interfaces.ITextWidget"\n       />\n   <adapter factory=".converters.RelationListSelectWidgetDataConverter" />\n   <adapter factory=".converters.LinkWidgetDataConverter" />\n+\n+  <!-- BBB -->\n+  <adapter factory=".converters.RelationChoiceRelatedItemsWidgetConverter" />\n+  <adapter factory=".converters.RelatedItemsDataConverter" />\n </configure>\ndiff --git a/plone/app/z3cform/interfaces.py b/plone/app/z3cform/interfaces.py\nindex 0c22c77a..9b4b065c 100644\n--- a/plone/app/z3cform/interfaces.py\n+++ b/plone/app/z3cform/interfaces.py\n@@ -91,6 +91,10 @@ class IRelatedItemsWidget(ITextWidget):\n     """Marker interface for the RelatedItemsWidget."""\n \n \n+class IContentBrowserWidget(ITextWidget):\n+    """Marker interface for the RelatedItemsWidget."""\n+\n+\n class IRichTextWidget(patextfield_IRichTextWidget):\n     """Marker interface for the TinyMCEWidget."""\n \ndiff --git a/plone/app/z3cform/templates/contentbrowser_display.pt b/plone/app/z3cform/templates/contentbrowser_display.pt\nnew file mode 100644\nindex 00000000..972a9702\n--- /dev/null\n+++ b/plone/app/z3cform/templates/contentbrowser_display.pt\n@@ -0,0 +1,44 @@\n+<div class="contentbrowser-widget ${python:normalizeString(view.field.__class__.__name__)}-field"\n+     id="form-widgets-${python:view.__name__}"\n+     tal:define="\n+       plone_view nocall:context/@@plone;\n+       normalizeString python:plone_view.normalizeString;\n+       items python: view.items();\n+     "\n+     tal:condition="items"\n+     i18n:domain="plone"\n+>\n+  <ul>\n+    <li tal:repeat="item items">\n+      <span title="${item_type}"\n+            tal:define="\n+              item_type           python:item.portal_type;\n+              item_type_class     python:item.ContentTypeClass();\n+              item_wf_state_class python:item.ReviewStateClass();\n+              appendViewAction    python:item.appendViewAction();\n+              item_url            python:item.getURL();\n+              item_url            python:item_url+\'/view\' if appendViewAction else item_url;\n+            "\n+      >\n+\n+        <a href="${item_url}">\n+          <img class="mime-icon"\n+               src="${python:item.MimeTypeIcon()}"\n+               tal:condition="python:item_type ==\'File\'"\n+          />\n+\n+          <span class="${item_type_class} ${item_wf_state_class} url"\n+                tal:content="python:item.Title()"\n+          >\n+                    Title\n+          </span>\n+          <span class="discreet"\n+                tal:content="python:item.Description()"\n+          >\n+                    Description\n+          </span>\n+        </a>\n+      </span>\n+    </li>\n+  </ul>\n+</div>\ndiff --git a/plone/app/z3cform/templates/link_input.pt b/plone/app/z3cform/templates/link_input.pt\nindex ff3e0f39..853760f0 100644\n--- a/plone/app/z3cform/templates/link_input.pt\n+++ b/plone/app/z3cform/templates/link_input.pt\n@@ -25,11 +25,11 @@\n         <div>\n           <div class="mb-3 main">\n             <!-- this gives the name to the "linkType" -->\n-            <input class="pat-relateditems"\n+            <input class="pat-contentbrowser"\n                    name="${view/name}.internal"\n                    type="text"\n                    value="${value}"\n-                   data-pat-relateditems="${view/pattern_data}"\n+                   data-pat-contentbrowser="${view/pattern_data}"\n             />\n           </div>\n         </div>\ndiff --git a/plone/app/z3cform/templates/relateditems_display.pt b/plone/app/z3cform/templates/relateditems_display.pt\nindex b6203c2b..a3b19ea7 100644\n--- a/plone/app/z3cform/templates/relateditems_display.pt\n+++ b/plone/app/z3cform/templates/relateditems_display.pt\n@@ -1,46 +1,44 @@\n-<span class="relateditems-widget ${python:normalizeString(view.field.__class__.__name__)}-field"\n-      id="form-widgets-${python:view.__name__}"\n-      tal:define="\n-        plone_view nocall:context/@@plone;\n-        normalizeString python:plone_view.normalizeString;\n-        items python: view.items();\n-      "\n-      tal:condition="items"\n-      i18n:domain="plone"\n+<div class="relateditems-widget ${python:normalizeString(view.field.__class__.__name__)}-field"\n+     id="form-widgets-${python:view.__name__}"\n+     tal:define="\n+       plone_view nocall:context/@@plone;\n+       normalizeString python:plone_view.normalizeString;\n+       items python: view.items();\n+     "\n+     tal:condition="items"\n+     i18n:domain="plone"\n >\n-  <div>\n-    <ul>\n-      <li tal:repeat="item items">\n-        <span title="${item_type}"\n-              tal:define="\n-                item_type           python:item.portal_type;\n-                item_type_class     python:item.ContentTypeClass();\n-                item_wf_state_class python:item.ReviewStateClass();\n-                appendViewAction    python:item.appendViewAction();\n-                item_url            python:item.getURL();\n-                item_url            python:item_url+\'/view\' if appendViewAction else item_url;\n-              "\n-        >\n+  <ul>\n+    <li tal:repeat="item items">\n+      <span title="${item_type}"\n+            tal:define="\n+              item_type           python:item.portal_type;\n+              item_type_class     python:item.ContentTypeClass();\n+              item_wf_state_class python:item.ReviewStateClass();\n+              appendViewAction    python:item.appendViewAction();\n+              item_url            python:item.getURL();\n+              item_url            python:item_url+\'/view\' if appendViewAction else item_url;\n+            "\n+      >\n \n-          <a href="${item_url}">\n-            <img class="mime-icon"\n-                 src="${python:item.MimeTypeIcon()}"\n-                 tal:condition="python:item_type ==\'File\'"\n-            />\n+        <a href="${item_url}">\n+          <img class="mime-icon"\n+               src="${python:item.MimeTypeIcon()}"\n+               tal:condition="python:item_type ==\'File\'"\n+          />\n \n-            <span class="${item_type_class} ${item_wf_state_class} url"\n-                  tal:content="python:item.Title()"\n-            >\n+          <span class="${item_type_class} ${item_wf_state_class} url"\n+                tal:content="python:item.Title()"\n+          >\n                     Title\n-            </span>\n-            <span class="discreet"\n-                  tal:content="python:item.Description()"\n-            >\n+          </span>\n+          <span class="discreet"\n+                tal:content="python:item.Description()"\n+          >\n                     Description\n-            </span>\n-          </a>\n-        </span>\n-      </li>\n-    </ul>\n-  </div>\n-</span>\n+          </span>\n+        </a>\n+      </span>\n+    </li>\n+  </ul>\n+</div>\ndiff --git a/plone/app/z3cform/tests/test_widgets.py b/plone/app/z3cform/tests/test_widgets.py\nindex 77438a0b..f453ba14 100644\n--- a/plone/app/z3cform/tests/test_widgets.py\n+++ b/plone/app/z3cform/tests/test_widgets.py\n@@ -8,8 +8,8 @@\n from plone.app.testing import TEST_USER_ID\n from plone.app.z3cform.tests.layer import PAZ3CForm_INTEGRATION_TESTING\n from plone.app.z3cform.widgets.base import PatternFormElement\n+from plone.app.z3cform.widgets.contentbrowser import ContentBrowserWidget\n from plone.app.z3cform.widgets.datetime import DateWidget\n-from plone.app.z3cform.widgets.relateditems import RelatedItemsWidget\n from plone.app.z3cform.widgets.text import TextFieldWidget\n from plone.autoform.directives import widget\n from plone.autoform.form import AutoExtensibleForm\n@@ -1407,7 +1407,7 @@ class IRelationsType(Interface):\n     multiple = RelationList(title="Multiple (Relations field)", required=False)\n \n \n-class RelatedItemsWidgetTemplateIntegrationTests(unittest.TestCase):\n+class ContentBrowserWidgetTemplateIntegrationTests(unittest.TestCase):\n     layer = PAZ3CForm_INTEGRATION_TESTING\n \n     def setUp(self):\n@@ -1444,7 +1444,7 @@ def test_related_items_widget_display_template(self):\n         default_view.update()\n \n         single = default_view.w["single"]\n-        self.assertIsInstance(single, RelatedItemsWidget)\n+        self.assertIsInstance(single, ContentBrowserWidget)\n         self.assertTrue(single.value, target.UID())\n         items = single.items()\n         self.assertIsInstance(items, ContentListing)\n@@ -1463,7 +1463,7 @@ def test_related_items_widget_display_template(self):\n         )\n \n         multiple = default_view.w["multiple"]\n-        self.assertIsInstance(multiple, RelatedItemsWidget)\n+        self.assertIsInstance(multiple, ContentBrowserWidget)\n         self.assertTrue(multiple.value, ";".join([target.UID(), doc.UID()]))\n         items = multiple.items()\n         self.assertIsInstance(items, ContentListing)\n@@ -1649,6 +1649,168 @@ def test_fieldwidget(self):\n         self.assertIs(widget.request, request)\n \n \n+class ContentBrowserWidgetTests(unittest.TestCase):\n+    layer = PAZ3CForm_INTEGRATION_TESTING\n+\n+    def setUp(self):\n+        self.portal = self.layer["portal"]\n+        self.request = self.layer["request"]\n+        setRoles(self.portal, TEST_USER_ID, ["Manager"])\n+\n+    def test_single_selection(self):\n+        """The pattern_options value for maximumSelectionSize should\n+        be 1 when the field only allows a single selection."""\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserFieldWidget\n+\n+        field = Choice(\n+            __name__="selectfield",\n+            values=["one", "two", "three"],\n+        )\n+        widget = ContentBrowserFieldWidget(field, self.request)\n+        widget.context = self.portal\n+        widget.update()\n+        pattern_options = widget.get_pattern_options()\n+        self.assertEqual(pattern_options.get("maximumSelectionSize", 0), 1)\n+\n+    def test_multiple_selection(self):\n+        """The pattern_options key maximumSelectionSize shouldn\'t be\n+        set when the field allows multiple selections"""\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserFieldWidget\n+        from Zope2.App.schema import Zope2VocabularyRegistry\n+        from zope.schema.interfaces import ISource\n+\n+        field = List(\n+            __name__="selectfield",\n+            value_type=Choice(vocabulary="foobar"),\n+        )\n+        widget = ContentBrowserFieldWidget(field, self.request)\n+        widget.context = self.portal\n+\n+        vocab = Mock()\n+        alsoProvides(vocab, ISource)\n+        with mock.patch.object(Zope2VocabularyRegistry, "get", return_value=vocab):\n+            widget.update()\n+            patterns_options = widget.get_pattern_options()\n+        self.assertFalse("maximumSelectionSize" in patterns_options)\n+        self.assertEqual(\n+            patterns_options["vocabularyUrl"],\n+            "http://nohost/plone/@@getVocabulary?name=foobar&field=selectfield",\n+        )\n+\n+    def test_converter_RelationChoice(self):\n+        from plone.app.z3cform.converters import (\n+            RelationChoiceContentBrowserWidgetConverter,\n+        )\n+\n+        brain = Mock(getObject=Mock(return_value="obj"))\n+        portal_catalog = Mock(return_value=[brain])\n+        widget = Mock()\n+        converter = RelationChoiceContentBrowserWidgetConverter(\n+            TextLine(),\n+            widget,\n+        )\n+\n+        with mock.patch(\n+            "plone.app.z3cform.converters.IUUID",\n+            return_value="id",\n+        ):\n+            self.assertEqual(converter.toWidgetValue("obj"), "id")\n+        self.assertEqual(converter.toWidgetValue(None), None)\n+\n+        with mock.patch(\n+            "plone.app.z3cform.converters.getToolByName",\n+            return_value=portal_catalog,\n+        ):\n+            self.assertEqual(converter.toFieldValue("id"), "obj")\n+        self.assertEqual(converter.toFieldValue(None), None)\n+\n+    def test_converter_RelationList(self):\n+        from plone.app.z3cform.converters import ContentBrowserDataConverter\n+        from z3c.relationfield.interfaces import IRelationList\n+\n+        field = List()\n+        alsoProvides(field, IRelationList)\n+        brain1 = Mock(getObject=Mock(return_value="obj1"), UID="id1")\n+        brain2 = Mock(getObject=Mock(return_value="obj2"), UID="id2")\n+        portal_catalog = Mock(return_value=[brain1, brain2])\n+        widget = Mock(separator=";")\n+        converter = ContentBrowserDataConverter(field, widget)\n+\n+        self.assertEqual(converter.toWidgetValue(None), None)\n+        with mock.patch(\n+            "plone.app.z3cform.converters.IUUID",\n+            side_effect=["id1", "id2"],\n+        ):\n+            self.assertEqual(\n+                converter.toWidgetValue(["obj1", "obj2"]),\n+                "id1;id2",\n+            )\n+\n+        self.assertEqual(converter.toFieldValue(None), None)\n+        with mock.patch(\n+            "plone.app.z3cform.converters.getToolByName",\n+            return_value=portal_catalog,\n+        ):\n+            self.assertEqual(\n+                converter.toFieldValue("id1;id2"),\n+                ["obj1", "obj2"],\n+            )\n+\n+    def test_converter_List_of_Choice(self):\n+        from plone.app.z3cform.converters import ContentBrowserDataConverter\n+\n+        fields = (\n+            List(),\n+            List(value_type=TextLine()),\n+            List(value_type=BytesLine()),\n+            List(value_type=Choice(values=["one", "two", "three"])),\n+        )\n+        for field in fields:\n+            expected_value_type = getattr(\n+                field.value_type,\n+                "_type",\n+                str,\n+            )\n+            if expected_value_type is None:\n+                expected_value_type = str\n+            widget = Mock(separator=";")\n+            converter = ContentBrowserDataConverter(field, widget)\n+\n+            self.assertEqual(converter.toWidgetValue(None), None)\n+            self.assertEqual(\n+                converter.toWidgetValue(["id1", "id2"]),\n+                "id1;id2",\n+            )\n+\n+            self.assertEqual(converter.toFieldValue(None), None)\n+            if expected_value_type == bytes:\n+                expected = [b"id1", b"id2"]\n+            else:\n+                expected = ["id1", "id2"]\n+            self.assertEqual(\n+                converter.toFieldValue("id1;id2"),\n+                expected,\n+            )\n+\n+            self.assertEqual(converter.toFieldValue(None), None)\n+            self.assertEqual(\n+                type(converter.toFieldValue("id1;id2")[0]),\n+                expected_value_type,\n+            )\n+\n+    def test_fieldwidget(self):\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserFieldWidget\n+        from plone.app.z3cform.widgets.contentbrowser import ContentBrowserWidget\n+\n+        field = Mock(__name__="field", title="", required=True)\n+        vocabulary = Mock()\n+        request = Mock()\n+        widget = ContentBrowserFieldWidget(field, vocabulary, request)\n+        self.assertTrue(isinstance(widget, ContentBrowserWidget))\n+        self.assertIs(widget.field, field)\n+        self.assertIs(widget.request, request)\n+\n+\n class RichTextWidgetTests(unittest.TestCase):\n     layer = PAZ3CForm_INTEGRATION_TESTING\n \ndiff --git a/plone/app/z3cform/widgets.zcml b/plone/app/z3cform/widgets.zcml\nindex 5fd76ff2..fe65f2ca 100644\n--- a/plone/app/z3cform/widgets.zcml\n+++ b/plone/app/z3cform/widgets.zcml\n@@ -223,27 +223,36 @@\n \n   <!-- relateditems -->\n \n+  <z3c:widgetTemplate\n+      widget=".interfaces.IRelatedItemsWidget"\n+      template="templates/relateditems_display.pt"\n+      layer=".interfaces.IPloneFormLayer"\n+      mode="display"\n+      />\n+\n+  <!-- contentbrowser -->\n+\n   <adapter\n-      factory=".widgets.relateditems.RelatedItemsFieldWidget"\n+      factory=".widgets.contentbrowser.ContentBrowserFieldWidget"\n       for="z3c.relationfield.interfaces.IRelationChoice\n            plone.app.z3cform.interfaces.IPloneFormLayer"\n       />\n \n   <adapter\n-      factory=".widgets.relateditems.RelatedItemsFieldWidget"\n+      factory=".widgets.contentbrowser.ContentBrowserFieldWidget"\n       for="z3c.relationfield.interfaces.IRelationList\n            plone.app.z3cform.interfaces.IPloneFormLayer"\n       />\n \n   <adapter\n-      factory=".widgets.relateditems.RelatedItemsFieldWidget"\n+      factory=".widgets.contentbrowser.ContentBrowserFieldWidget"\n       for="zope.schema.interfaces.IChoice\n            plone.app.vocabularies.catalog.CatalogSource\n            plone.app.z3cform.interfaces.IPloneFormLayer"\n       />\n \n   <z3c:widgetTemplate\n-      widget=".interfaces.IRelatedItemsWidget"\n+      widget=".interfaces.IContentBrowserWidget"\n       template="templates/relateditems_display.pt"\n       layer=".interfaces.IPloneFormLayer"\n       mode="display"\ndiff --git a/plone/app/z3cform/widgets/contentbrowser.py b/plone/app/z3cform/widgets/contentbrowser.py\nnew file mode 100644\nindex 00000000..f97ac4df\n--- /dev/null\n+++ b/plone/app/z3cform/widgets/contentbrowser.py\n@@ -0,0 +1,231 @@\n+from Acquisition import aq_inner\n+from Acquisition import aq_parent\n+from OFS.interfaces import IFolder\n+from OFS.interfaces import ISimpleItem\n+from plone.app.contentlisting.interfaces import IContentListing\n+from plone.app.z3cform.interfaces import IContentBrowserWidget\n+from plone.app.z3cform.utils import dict_merge\n+from plone.app.z3cform.utils import get_context_url\n+from plone.app.z3cform.utils import get_widget_form\n+from plone.app.z3cform.widgets.base import HTMLInputWidget\n+from plone.base import PloneMessageFactory as _\n+from plone.base.navigationroot import get_navigation_root_object\n+from plone.base.utils import get_top_site_from_url\n+from Products.CMFCore.utils import getToolByName\n+from z3c.form.interfaces import IEditForm\n+from z3c.form.interfaces import IFieldWidget\n+from z3c.form.interfaces import IForm\n+from z3c.form.widget import FieldWidget\n+from z3c.form.widget import Widget\n+from zope.component.hooks import getSite\n+from zope.globalrequest import getRequest\n+from zope.interface import implementer\n+from zope.interface import implementer_only\n+from zope.schema.interfaces import IChoice\n+from zope.schema.interfaces import ICollection\n+\n+\n+def get_contentbrowser_options(\n+    context,\n+    value,\n+    separator,\n+    vocabulary_name,\n+    vocabulary_view,\n+    field_name=None,\n+    include_recently_added=True,\n+):\n+    if IForm.providedBy(context):\n+        context = context.context\n+\n+    request = getRequest()\n+    site = get_top_site_from_url(context, request)\n+    options = {\n+        "separator": separator,\n+    }\n+    if not vocabulary_name:\n+        # we need a vocabulary!\n+        raise ValueError("ContentBrowser needs a vocabulary")\n+    options["vocabularyUrl"] = "{}/{}?name={}".format(\n+        get_context_url(site),\n+        vocabulary_view,\n+        vocabulary_name,\n+    )\n+    if field_name:\n+        options["vocabularyUrl"] += f"&field={field_name}"\n+    if value:\n+        options["initialValues"] = {}\n+        catalog = False\n+        if vocabulary_name == "plone.app.vocabularies.Catalog":\n+            catalog = getToolByName(getSite(), "portal_catalog")\n+        for value in value.split(separator):\n+            title = value\n+            if catalog:\n+                result = catalog(UID=value)\n+                title = result[0].Title if result else value\n+            options["initialValues"][value] = title\n+\n+    nav_root = get_navigation_root_object(context, site)\n+\n+    if not ISimpleItem.providedBy(context):\n+        context = nav_root\n+\n+    # basePath - start to search/browse in here.\n+    base_path_context = context\n+    if not IFolder.providedBy(base_path_context):\n+        base_path_context = aq_parent(aq_inner(base_path_context))\n+    if not base_path_context:\n+        base_path_context = nav_root\n+    options["basePath"] = "/".join(base_path_context.getPhysicalPath())\n+\n+    # rootPath - Only display breadcrumb elements deeper than this path.\n+    options["rootPath"] = "/".join(site.getPhysicalPath()) if site else "/"\n+\n+    # rootUrl: Visible URL up to the rootPath. This is prepended to the\n+    # currentPath to generate submission URLs.\n+    options["rootUrl"] = site.absolute_url() if site else ""\n+\n+    # contextPath - current edited object. Will not be available to select.\n+    options["contextPath"] = "/".join(context.getPhysicalPath())\n+\n+    if base_path_context != nav_root:\n+        options["favorites"] = [\n+            {\n+                "title": _("Current Content"),\n+                "path": "/".join(base_path_context.getPhysicalPath()),\n+            },\n+            {"title": _("Start Page"), "path": "/".join(nav_root.getPhysicalPath())},\n+        ]\n+\n+    if include_recently_added:\n+        # Options for recently used key\n+        tool = getToolByName(context, "portal_membership")\n+        user = tool.getAuthenticatedMember()\n+        options["recentlyUsed"] = False  # Keep that off in Plone 5.1\n+        options["recentlyUsedKey"] = "contentbrowser_recentlyused_{}_{}".format(\n+            field_name or "", user.id\n+        )  # use string substitution with %s here for automatic str casting.\n+\n+    return options\n+\n+\n+@implementer_only(IContentBrowserWidget)\n+class ContentBrowserWidget(HTMLInputWidget, Widget):\n+    """ContentBrowser widget for z3c.form."""\n+\n+    pattern = "contentbrowser"\n+    separator = ";"\n+    vocabulary = None\n+    vocabulary_override = False\n+    vocabulary_view = "@@getVocabulary"\n+    orderable = False\n+\n+    def update(self):\n+        super().update()\n+        field = getattr(self, "field", None)\n+        if ICollection.providedBy(self.field):\n+            field = self.field.value_type\n+        if (\n+            not self.vocabulary\n+            and field is not None\n+            and getattr(field, "vocabularyName", None)\n+        ):\n+            self.vocabulary = field.vocabularyName\n+            self.vocabulary_override = True\n+        else:\n+            self.vocabulary = "plone.app.vocabularies.Catalog"\n+\n+    def get_pattern_options(self):\n+        field = None\n+        pattern_options = {}\n+\n+        if IChoice.providedBy(self.field):\n+            pattern_options["maximumSelectionSize"] = 1\n+            field = self.field\n+        elif ICollection.providedBy(self.field):\n+            field = self.field.value_type\n+\n+        vocabulary_name = self.vocabulary\n+\n+        field_name = self.field and self.field.__name__ or None\n+\n+        context = self.context\n+        view_context = get_widget_form(self)\n+        # For EditForms and non-Forms (in tests), the vocabulary is looked\n+        # up on the context, otherwise on the view\n+        if IEditForm.providedBy(view_context):\n+            if self.is_subform_widget():\n+                view_context = self.form.parentForm.context\n+            elif not ISimpleItem.providedBy(context):\n+                view_context = self.form.context\n+            else:\n+                view_context = context\n+        elif not IForm.providedBy(view_context):\n+            view_context = context\n+        else:\n+            pass\n+            # view_context is defined above already\n+\n+        root_search_mode = (\n+            pattern_options.get("mode", None) and "basePath" not in pattern_options\n+        )\n+\n+        pattern_options = dict_merge(\n+            get_contentbrowser_options(\n+                view_context,\n+                self.value,\n+                self.separator,\n+                vocabulary_name,\n+                self.vocabulary_view,\n+                field_name,\n+            ),\n+            pattern_options,\n+        )\n+        if root_search_mode:\n+            # Delete default basePath option in search mode, when no basePath\n+            # was explicitly set.\n+            del pattern_options["basePath"]\n+        if (\n+            not self.vocabulary_override\n+            and field\n+            and getattr(field, "vocabulary", None)\n+        ):\n+            # widget vocab takes precedence over field\n+            form_url = self.request.getURL()\n+            source_url = "{:s}/++widget++{:s}/@@getSource".format(\n+                form_url,\n+                self.name,\n+            )\n+            pattern_options["vocabularyUrl"] = source_url\n+\n+        return pattern_options\n+\n+    def items(self):\n+        """Return item for the widget values for the display template\n+\n+        Query the catalog for the widget-value (uuids) to only display items\n+        that the user is allowed to see. Accessing the value with e.g.\n+        getattr(self.context, self.__name__) would yield the items unfiltered.\n+        Uses IContentListing for easy access to MimeTypeIcon and more.\n+        """\n+        results = []\n+        if not self.value:\n+            return results\n+        separator = getattr(self, "separator", ";")\n+        uuids = self.value.split(separator)\n+\n+        try:\n+            catalog = getToolByName(self.context, "portal_catalog")\n+        except AttributeError:\n+            catalog = getToolByName(getSite(), "portal_catalog")\n+\n+        brains = catalog(UID=uuids)\n+        # restore original order\n+        results = sorted(brains, key=lambda brain: uuids.index(brain.UID))\n+        return IContentListing(results)\n+\n+\n+@implementer(IFieldWidget)\n+def ContentBrowserFieldWidget(field, request, extra=None):\n+    if extra is not None:\n+        request = extra\n+    return FieldWidget(field, ContentBrowserWidget(request))\n'

