Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2020-09-09T23:19:21+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlet.static/commit/de7e19dda4138804599db459a1abc11d88abe973

Fixed invalid escape sequence

Files changed:
A news/3130.bugfix
M plone/portlet/static/static.py

b'diff --git a/news/3130.bugfix b/news/3130.bugfix\nnew file mode 100644\nindex 0000000..8c80dfd\n--- /dev/null\n+++ b/news/3130.bugfix\n@@ -0,0 +1,2 @@\n+Fixed invalid escape sequence.\n+[maurits]\ndiff --git a/plone/portlet/static/static.py b/plone/portlet/static/static.py\nindex 35ca86d..95127d3 100644\n--- a/plone/portlet/static/static.py\n+++ b/plone/portlet/static/static.py\n@@ -64,7 +64,7 @@ class IStaticPortlet(IPortletDataProvider):\n     header = schema.TextLine(\n         title=_(u"Portlet header"),\n         description=_(u"Title of the rendered portlet"),\n-        constraint=re.compile("[^\\s]").match,\n+        constraint=re.compile(r"[^\\s]").match,\n         required=False)\n \n     directives.widget(text=RichTextFieldWidget)\n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2020-09-09T23:23:16+02:00
Author: Maurits van Rees (mauritsvanrees) <maurits@vanrees.org>
Commit: https://github.com/plone/plone.portlet.static/commit/c0ca159317b4e361bbd5d766b5990559e973df26

Fixed deprecated assert functions in tests.

Files changed:
M plone/portlet/static/tests/test_portlet_static.py

b'diff --git a/plone/portlet/static/tests/test_portlet_static.py b/plone/portlet/static/tests/test_portlet_static.py\nindex 2c217ba..8a01011 100644\n--- a/plone/portlet/static/tests/test_portlet_static.py\n+++ b/plone/portlet/static/tests/test_portlet_static.py\n@@ -26,12 +26,12 @@ def setUp(self):\n \n     def testPortletTypeRegistered(self):\n         portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n-        self.assertEquals(portlet.addview, \'plone.portlet.static.Static\')\n+        self.assertEqual(portlet.addview, \'plone.portlet.static.Static\')\n \n     def testInterfaces(self):\n         portlet = static.Assignment(header=u"title", text="text")\n-        self.failUnless(IPortletAssignment.providedBy(portlet))\n-        self.failUnless(IPortletDataProvider.providedBy(portlet.data))\n+        self.assertTrue(IPortletAssignment.providedBy(portlet))\n+        self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n         portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n@@ -46,8 +46,8 @@ def testInvokeAddview(self):\n             data={\'header\': u"test title", \'text\': u"test text"}\n         )\n \n-        self.assertEquals(len(mapping), 1)\n-        self.failUnless(isinstance(list(mapping.values())[0], static.Assignment))\n+        self.assertEqual(len(mapping), 1)\n+        self.assertTrue(isinstance(list(mapping.values())[0], static.Assignment))\n \n     def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n@@ -55,7 +55,7 @@ def testInvokeEditView(self):\n \n         mapping[\'foo\'] = static.Assignment(header=u"title", text="text")\n         editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n-        self.failUnless(isinstance(editview, static.EditForm))\n+        self.assertTrue(isinstance(editview, static.EditForm))\n \n     def testRenderer(self):\n         context = self.portal\n@@ -72,9 +72,9 @@ def testRenderer(self):\n             (context, request, view, manager, assignment),\n             IPortletRenderer\n         )\n-        self.failUnless(isinstance(renderer, static.Renderer))\n+        self.assertTrue(isinstance(renderer, static.Renderer))\n \n-        self.failUnless(renderer.available,\n+        self.assertTrue(renderer.available,\n                         "Renderer should be available by default.")\n \n \n@@ -120,8 +120,8 @@ def test_render(self):\n         )\n         r.update()\n         output = r.render()\n-        self.failUnless(\'title\' in output)\n-        self.failUnless(\'<b>text</b>\' in output)\n+        self.assertTrue(\'title\' in output)\n+        self.assertTrue(\'<b>text</b>\' in output)\n \n     def test_no_header(self):\n         r = self.renderer(\n@@ -144,7 +144,7 @@ def test_css_class(self):\n                 text="<b>text</b>"\n             )\n         )\n-        self.assertEquals(\'portlet-static-welcome-text\', r.css_class())\n+        self.assertEqual(\'portlet-static-welcome-text\', r.css_class())\n \n     def test_relative_link(self):\n         r = self.renderer(\n'

Repository: plone.portlet.static


Branch: refs/heads/master
Date: 2020-09-10T10:53:05+02:00
Author: Jens W. Klein (jensens) <jk@kleinundpartner.at>
Commit: https://github.com/plone/plone.portlet.static/commit/6b09aec2ca89a17388a4af899bc388edb01513fe

Merge pull request #18 from plone/maurits/fix-warnings-2

Fixed invalid escape sequence

Files changed:
A news/3130.bugfix
M plone/portlet/static/static.py
M plone/portlet/static/tests/test_portlet_static.py

b'diff --git a/news/3130.bugfix b/news/3130.bugfix\nnew file mode 100644\nindex 0000000..8c80dfd\n--- /dev/null\n+++ b/news/3130.bugfix\n@@ -0,0 +1,2 @@\n+Fixed invalid escape sequence.\n+[maurits]\ndiff --git a/plone/portlet/static/static.py b/plone/portlet/static/static.py\nindex 35ca86d..95127d3 100644\n--- a/plone/portlet/static/static.py\n+++ b/plone/portlet/static/static.py\n@@ -64,7 +64,7 @@ class IStaticPortlet(IPortletDataProvider):\n     header = schema.TextLine(\n         title=_(u"Portlet header"),\n         description=_(u"Title of the rendered portlet"),\n-        constraint=re.compile("[^\\s]").match,\n+        constraint=re.compile(r"[^\\s]").match,\n         required=False)\n \n     directives.widget(text=RichTextFieldWidget)\ndiff --git a/plone/portlet/static/tests/test_portlet_static.py b/plone/portlet/static/tests/test_portlet_static.py\nindex 2c217ba..8a01011 100644\n--- a/plone/portlet/static/tests/test_portlet_static.py\n+++ b/plone/portlet/static/tests/test_portlet_static.py\n@@ -26,12 +26,12 @@ def setUp(self):\n \n     def testPortletTypeRegistered(self):\n         portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n-        self.assertEquals(portlet.addview, \'plone.portlet.static.Static\')\n+        self.assertEqual(portlet.addview, \'plone.portlet.static.Static\')\n \n     def testInterfaces(self):\n         portlet = static.Assignment(header=u"title", text="text")\n-        self.failUnless(IPortletAssignment.providedBy(portlet))\n-        self.failUnless(IPortletDataProvider.providedBy(portlet.data))\n+        self.assertTrue(IPortletAssignment.providedBy(portlet))\n+        self.assertTrue(IPortletDataProvider.providedBy(portlet.data))\n \n     def testInvokeAddview(self):\n         portlet = getUtility(IPortletType, name=\'plone.portlet.static.Static\')\n@@ -46,8 +46,8 @@ def testInvokeAddview(self):\n             data={\'header\': u"test title", \'text\': u"test text"}\n         )\n \n-        self.assertEquals(len(mapping), 1)\n-        self.failUnless(isinstance(list(mapping.values())[0], static.Assignment))\n+        self.assertEqual(len(mapping), 1)\n+        self.assertTrue(isinstance(list(mapping.values())[0], static.Assignment))\n \n     def testInvokeEditView(self):\n         mapping = PortletAssignmentMapping()\n@@ -55,7 +55,7 @@ def testInvokeEditView(self):\n \n         mapping[\'foo\'] = static.Assignment(header=u"title", text="text")\n         editview = getMultiAdapter((mapping[\'foo\'], request), name=\'edit\')\n-        self.failUnless(isinstance(editview, static.EditForm))\n+        self.assertTrue(isinstance(editview, static.EditForm))\n \n     def testRenderer(self):\n         context = self.portal\n@@ -72,9 +72,9 @@ def testRenderer(self):\n             (context, request, view, manager, assignment),\n             IPortletRenderer\n         )\n-        self.failUnless(isinstance(renderer, static.Renderer))\n+        self.assertTrue(isinstance(renderer, static.Renderer))\n \n-        self.failUnless(renderer.available,\n+        self.assertTrue(renderer.available,\n                         "Renderer should be available by default.")\n \n \n@@ -120,8 +120,8 @@ def test_render(self):\n         )\n         r.update()\n         output = r.render()\n-        self.failUnless(\'title\' in output)\n-        self.failUnless(\'<b>text</b>\' in output)\n+        self.assertTrue(\'title\' in output)\n+        self.assertTrue(\'<b>text</b>\' in output)\n \n     def test_no_header(self):\n         r = self.renderer(\n@@ -144,7 +144,7 @@ def test_css_class(self):\n                 text="<b>text</b>"\n             )\n         )\n-        self.assertEquals(\'portlet-static-welcome-text\', r.css_class())\n+        self.assertEqual(\'portlet-static-welcome-text\', r.css_class())\n \n     def test_relative_link(self):\n         r = self.renderer(\n'

