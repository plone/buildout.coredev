Repository: plone.locking


Branch: refs/heads/master
Date: 2021-10-08T16:51:24+02:00
Author: Ã‰rico Andrei (ericof) <ericof@gmail.com>
Commit: https://github.com/plone/plone.locking/commit/780f9b69316bf90891fd4ab8fc850f9d98969744

Register a fallback @@plone_lock_info view to allow objects without plone.locking behavior to be edited.

Files changed:
A news/3331.fix
A plone/locking/tests/test_views.py
M plone/locking/browser/locking.py
M plone/locking/configure.zcml

b'diff --git a/news/3331.fix b/news/3331.fix\nnew file mode 100644\nindex 0000000..9efab5b\n--- /dev/null\n+++ b/news/3331.fix\n@@ -0,0 +1,2 @@\n+Register a fallback @@plone_lock_info view to allow objects without plone.locking behavior to be edited.\n+[ericof]\n\\ No newline at end of file\ndiff --git a/plone/locking/browser/locking.py b/plone/locking/browser/locking.py\nindex 7f4145e..6453bdc 100644\n--- a/plone/locking/browser/locking.py\n+++ b/plone/locking/browser/locking.py\n@@ -161,3 +161,23 @@ def _getNiceTimeDifference(self, baseTime):\n             else:\n                 dateString = _(u"$d days and $h hours", mapping={\'d\': days, \'h\': hours})\n         return dateString\n+\n+\n+class LockingInformationFallback(BrowserView):\n+    """Fallback view for Lock information.\n+\n+    This view exists to return sensible defaults if a content type does\n+    not have the plone.locking behavior active.\n+    """\n+\n+    def is_locked(self):\n+        return False\n+\n+    def is_locked_for_current_user(self):\n+        return False\n+\n+    def lock_is_stealable(self):\n+        return False\n+\n+    def lock_info(self):\n+        return None\ndiff --git a/plone/locking/configure.zcml b/plone/locking/configure.zcml\nindex c4890e2..9c8ed2c 100644\n--- a/plone/locking/configure.zcml\n+++ b/plone/locking/configure.zcml\n@@ -22,4 +22,12 @@\n         allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n         />\n \n+    <browser:page\n+        for="*"\n+        name="plone_lock_info"\n+        class=".browser.locking.LockingInformationFallback"\n+        permission="zope2.View"\n+        allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n+        />\n+\n </configure>\ndiff --git a/plone/locking/tests/test_views.py b/plone/locking/tests/test_views.py\nnew file mode 100644\nindex 0000000..412c3b0\n--- /dev/null\n+++ b/plone/locking/tests/test_views.py\n@@ -0,0 +1,44 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.locking.browser.locking import LockingInformation\n+from plone.locking.browser.locking import LockingInformationFallback\n+from plone.locking.testing import PLONE_LOCKING_INTEGRATION_TESTING\n+from plone.dexterity.interfaces import IDexterityFTI\n+from zope.component import queryUtility\n+\n+import unittest\n+\n+\n+class TestLockInfoViewWithoutLocking(unittest.TestCase):\n+\n+    layer = PLONE_LOCKING_INTEGRATION_TESTING\n+\n+    view = "@@plone_lock_info"\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Site Administrator"])\n+\n+        self.portal.invokeFactory("News Item", id="news1", title="News Item 1")\n+        self.news = self.portal["news1"]\n+\n+        # Remove plone.locking from Document content type\n+        fti = queryUtility(IDexterityFTI, name="Document")\n+        behavior_list = [a for a in fti.behaviors if a != "plone.locking"]\n+        fti.behaviors = tuple(behavior_list)\n+\n+        self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n+        self.doc = self.portal["doc1"]\n+\n+    def test_browser_view_available_for_content_with_locking_behavior(self):\n+        content = self.news\n+        view = content.restrictedTraverse(self.view)\n+        self.assertIsInstance(view, LockingInformation)\n+\n+    def test_browser_view_available_for_content_without_locking_behavior(self):\n+        content = self.doc\n+        view = content.restrictedTraverse(self.view)\n+        self.assertIsInstance(view, LockingInformationFallback)\n'

Repository: plone.locking


Branch: refs/heads/master
Date: 2021-10-08T23:33:43+02:00
Author: Maurits van Rees (mauritsvanrees) <m.van.rees@zestsoftware.nl>
Commit: https://github.com/plone/plone.locking/commit/16f132198012601b9b433f346c0a81b19a26be5e

Merge pull request #18 from plone/issue-3331-removing-lock-behavior

Add fallback plone_lock_info view

Files changed:
A news/3331.fix
A plone/locking/tests/test_views.py
M plone/locking/browser/locking.py
M plone/locking/configure.zcml

b'diff --git a/news/3331.fix b/news/3331.fix\nnew file mode 100644\nindex 0000000..9efab5b\n--- /dev/null\n+++ b/news/3331.fix\n@@ -0,0 +1,2 @@\n+Register a fallback @@plone_lock_info view to allow objects without plone.locking behavior to be edited.\n+[ericof]\n\\ No newline at end of file\ndiff --git a/plone/locking/browser/locking.py b/plone/locking/browser/locking.py\nindex 7f4145e..6453bdc 100644\n--- a/plone/locking/browser/locking.py\n+++ b/plone/locking/browser/locking.py\n@@ -161,3 +161,23 @@ def _getNiceTimeDifference(self, baseTime):\n             else:\n                 dateString = _(u"$d days and $h hours", mapping={\'d\': days, \'h\': hours})\n         return dateString\n+\n+\n+class LockingInformationFallback(BrowserView):\n+    """Fallback view for Lock information.\n+\n+    This view exists to return sensible defaults if a content type does\n+    not have the plone.locking behavior active.\n+    """\n+\n+    def is_locked(self):\n+        return False\n+\n+    def is_locked_for_current_user(self):\n+        return False\n+\n+    def lock_is_stealable(self):\n+        return False\n+\n+    def lock_info(self):\n+        return None\ndiff --git a/plone/locking/configure.zcml b/plone/locking/configure.zcml\nindex c4890e2..9c8ed2c 100644\n--- a/plone/locking/configure.zcml\n+++ b/plone/locking/configure.zcml\n@@ -22,4 +22,12 @@\n         allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n         />\n \n+    <browser:page\n+        for="*"\n+        name="plone_lock_info"\n+        class=".browser.locking.LockingInformationFallback"\n+        permission="zope2.View"\n+        allowed_attributes="is_locked is_locked_for_current_user lock_is_stealable lock_info"\n+        />\n+\n </configure>\ndiff --git a/plone/locking/tests/test_views.py b/plone/locking/tests/test_views.py\nnew file mode 100644\nindex 0000000..412c3b0\n--- /dev/null\n+++ b/plone/locking/tests/test_views.py\n@@ -0,0 +1,44 @@\n+# -*- coding: utf-8 -*-\n+from plone.app.testing import setRoles\n+from plone.app.testing import TEST_USER_ID\n+from plone.locking.browser.locking import LockingInformation\n+from plone.locking.browser.locking import LockingInformationFallback\n+from plone.locking.testing import PLONE_LOCKING_INTEGRATION_TESTING\n+from plone.dexterity.interfaces import IDexterityFTI\n+from zope.component import queryUtility\n+\n+import unittest\n+\n+\n+class TestLockInfoViewWithoutLocking(unittest.TestCase):\n+\n+    layer = PLONE_LOCKING_INTEGRATION_TESTING\n+\n+    view = "@@plone_lock_info"\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+\n+        setRoles(self.portal, TEST_USER_ID, ["Manager", "Site Administrator"])\n+\n+        self.portal.invokeFactory("News Item", id="news1", title="News Item 1")\n+        self.news = self.portal["news1"]\n+\n+        # Remove plone.locking from Document content type\n+        fti = queryUtility(IDexterityFTI, name="Document")\n+        behavior_list = [a for a in fti.behaviors if a != "plone.locking"]\n+        fti.behaviors = tuple(behavior_list)\n+\n+        self.portal.invokeFactory("Document", id="doc1", title="Document 1")\n+        self.doc = self.portal["doc1"]\n+\n+    def test_browser_view_available_for_content_with_locking_behavior(self):\n+        content = self.news\n+        view = content.restrictedTraverse(self.view)\n+        self.assertIsInstance(view, LockingInformation)\n+\n+    def test_browser_view_available_for_content_without_locking_behavior(self):\n+        content = self.doc\n+        view = content.restrictedTraverse(self.view)\n+        self.assertIsInstance(view, LockingInformationFallback)\n'

