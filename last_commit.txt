Repository: plone.restapi


Branch: refs/heads/main
Date: 2024-04-03T20:47:21-07:00
Author: Andrea Cecchi (cekk) <andrea.cecchi85@gmail.com>
Commit: https://github.com/plone/plone.restapi/commit/848dff077a29cc5ceb52fc2373b3bf74d51cef49

image_scales in serializer are returned as json_compatible format (#1772)

* fix: image_scales in serializer are returned as json_compatible format

* add changelog

Files changed:
A news/1772.bugfix
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/tests/test_blocks_serializer.py

b'diff --git a/news/1772.bugfix b/news/1772.bugfix\nnew file mode 100644\nindex 000000000..2fa689fd1\n--- /dev/null\n+++ b/news/1772.bugfix\n@@ -0,0 +1 @@\n+image_scales in serializer are returned as json_compatible format. @cekk\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex e255ff744..d36d0bc0e 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -65,7 +65,9 @@ def _process_data(self, data, field=None):\n                     continue\n                 newdata[field], brain = resolve_uid(data[field])\n                 if brain is not None and "image_scales" not in newdata:\n-                    newdata["image_scales"] = getattr(brain, "image_scales", None)\n+                    newdata["image_scales"] = json_compatible(\n+                        getattr(brain, "image_scales", None)\n+                    )\n             result = {\n                 field: (\n                     newdata[field]\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex df1ee63bf..9005e2a40 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -505,3 +505,15 @@ def test_image_scales_serializer(self):\n         )\n         self.assertEqual(res["123"]["url"], self.image.absolute_url())\n         self.assertIn("image_scales", res["123"])\n+\n+    @unittest.skipUnless(\n+        HAS_PLONE_6,\n+        "image_scales were added to the catalog in Plone 6",\n+    )\n+    def test_image_scales_serializer_is_json_compatible(self):\n+        image_uid = self.image.UID()\n+        res = self.serialize(\n+            context=self.portal["doc1"],\n+            blocks={"123": {"@type": "image", "url": f"../resolveuid/{image_uid}"}},\n+        )\n+        self.assertIs(type(res["123"]["image_scales"]), dict)\n'

