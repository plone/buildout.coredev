Repository: plone.restapi


Branch: refs/heads/master
Date: 2020-12-18T14:32:40+01:00
Author: Timo Stollenwerk (tisto) <tisto@users.noreply.github.com>
Commit: https://github.com/plone/plone.restapi/commit/03148b67af8026827b69a812796b50ae273c5857

Fix resolveuid (#993)

* User url instead of href to resolveuid on blocks

* User url instead of href to resolveuid on blocks

* black

* Fix block link serializer and use url instead of href

* Fix block link serializer and use url instead of href

* black

* Fix serializer tests, remove confusing href from tests which is not part of the draftjs spec

* Better print statements (due to remove)

* add more integration tests

* Introduce feature for being able to disable transforms adapters, add disable_transform_resolveuid and disable_transform_html to opt-out these transformers

Introduce feature for being able to disable transforms adapters, add disable_transform_resolveuid and disable_transform_html to opt-out these transformers

* Add changelog

* Fix buildout

* Remove duplicated version pin

Co-authored-by: Victor Fernandez de Alba &lt;sneridagh@gmail.com&gt;

Files changed:
A news/1006.bugfix
M docs/source/conf.py
M src/plone/restapi/deserializer/blocks.py
M src/plone/restapi/interfaces.py
M src/plone/restapi/serializer/blocks.py
M src/plone/restapi/tests/test_blocks_deserializer.py
M src/plone/restapi/tests/test_blocks_serializer.py
M src/plone/restapi/tests/test_resolveuid.py

b'diff --git a/docs/source/conf.py b/docs/source/conf.py\nindex 05cf6d508..d1884e502 100644\n--- a/docs/source/conf.py\n+++ b/docs/source/conf.py\n@@ -18,18 +18,18 @@\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.insert(0, os.path.abspath(\'.\'))\n+# sys.path.insert(0, os.path.abspath(\'.\'))\n \n # -- General configuration ----------------------------------------------------\n \n # If your documentation needs a minimal Sphinx version, state it here.\n-#needs_sphinx = \'1.0\'\n+# needs_sphinx = \'1.0\'\n \n # Add any Sphinx extension module names here, as strings. They can be\n # extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\n extensions = [\n-    \'sphinxcontrib.httpdomain\',\n-    \'sphinxcontrib.httpexample\',\n+    "sphinxcontrib.httpdomain",\n+    "sphinxcontrib.httpexample",\n ]\n \n \n@@ -39,192 +39,197 @@ def patch_pygments_to_highlight_jsonschema():\n     """\n     try:\n         from pygments.lexers._mapping import LEXERS\n-        mod, lexer_name, aliases, filenames, mimetypes = LEXERS[\'JsonLexer\']\n-        mimetypes = mimetypes + (\'application/json+schema\', )\n-        LEXERS[\'JsonLexer\'] = (mod, lexer_name, aliases, filenames, mimetypes)\n+\n+        mod, lexer_name, aliases, filenames, mimetypes = LEXERS["JsonLexer"]\n+        mimetypes = mimetypes + ("application/json+schema",)\n+        LEXERS["JsonLexer"] = (mod, lexer_name, aliases, filenames, mimetypes)\n     except:\n         # Be defensive (don\'t fail a docs build if this doesn\'t work)\n         pass\n \n+\n # Add any paths that contain templates here, relative to this directory.\n-templates_path = [\'_templates\']\n+templates_path = ["_templates"]\n \n # The suffix of source filenames.\n-source_suffix = \'.rst\'\n+source_suffix = ".rst"\n \n # The encoding of source files.\n-#source_encoding = \'utf-8-sig\'\n+# source_encoding = \'utf-8-sig\'\n \n # The master toctree document.\n-master_doc = \'index\'\n+master_doc = "index"\n \n # General information about the project.\n-project = u\'plone.restapi\'\n-copyright = u\'2014, Plone Foundation\'\n+project = u"plone.restapi"\n+copyright = u"2014, Plone Foundation"\n \n # The version info for the project you\'re documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = \'1.0\'\n+version = "1.0"\n # The full version, including alpha/beta/rc tags.\n-release = \'1.0a1\'\n+release = "1.0a1"\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n-#language = None\n+# language = None\n \n # There are two options for replacing |today|: either, you set today to some\n # non-false value, then it is used:\n-#today = \'\'\n+# today = \'\'\n # Else, today_fmt is used as the format for a strftime call.\n-#today_fmt = \'%B %d, %Y\'\n+# today_fmt = \'%B %d, %Y\'\n \n # List of patterns, relative to source directory, that match files and\n # directories to ignore when looking for source files.\n-exclude_patterns = [\'*ideas/*\']\n+exclude_patterns = ["*ideas/*"]\n \n # The reST default role (used for this markup: `text`) to use for all documents.\n-#default_role = None\n+# default_role = None\n \n # If true, \'()\' will be appended to :func: etc. cross-reference text.\n-#add_function_parentheses = True\n+# add_function_parentheses = True\n \n # If true, the current module name will be prepended to all description\n # unit titles (such as .. function::).\n-#add_module_names = True\n+# add_module_names = True\n \n # If true, sectionauthor and moduleauthor directives will be shown in the\n # output. They are ignored by default.\n-#show_authors = False\n+# show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = \'sphinx\'\n+pygments_style = "sphinx"\n \n # A list of ignored prefixes for module index sorting.\n-#modindex_common_prefix = []\n+# modindex_common_prefix = []\n \n \n # -- Options for HTML output --------------------------------------------------\n \n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \'sphinx_rtd_theme\'\n+html_theme = "sphinx_rtd_theme"\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-#html_theme_options = {}\n+# html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+# html_theme_path = []\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # "<project> v<release> documentation".\n-#html_title = None\n+# html_title = None\n \n # A shorter title for the navigation bar.  Default is the same as html_title.\n-#html_short_title = None\n+# html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n # of the sidebar.\n-#html_logo = None\n+# html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n # docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n # pixels large.\n-#html_favicon = None\n+# html_favicon = None\n \n # Add any paths that contain custom static files (such as style sheets) here,\n # relative to this directory. They are copied after the builtin static files,\n # so a file named "default.css" will overwrite the builtin "default.css".\n-html_static_path = [\'_static\']\n+html_static_path = ["_static"]\n \n # If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n # using the given strftime format.\n-#html_last_updated_fmt = \'%b %d, %Y\'\n+# html_last_updated_fmt = \'%b %d, %Y\'\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-#html_use_smartypants = True\n+# html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+# html_sidebars = {}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n-#html_additional_pages = {}\n+# html_additional_pages = {}\n \n # If false, no module index is generated.\n-#html_domain_indices = True\n+# html_domain_indices = True\n \n # If false, no index is generated.\n-#html_use_index = True\n+# html_use_index = True\n \n # If true, the index is split into individual pages for each letter.\n-#html_split_index = False\n+# html_split_index = False\n \n # If true, links to the reST sources are added to the pages.\n-#html_show_sourcelink = True\n+# html_show_sourcelink = True\n \n # If true, "Created using Sphinx" is shown in the HTML footer. Default is True.\n-#html_show_sphinx = True\n+# html_show_sphinx = True\n \n # If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.\n-#html_show_copyright = True\n+# html_show_copyright = True\n \n # If true, an OpenSearch description file will be output, and all pages will\n # contain a <link> tag referring to it.  The value of this option must be the\n # base URL from which the finished HTML is served.\n-#html_use_opensearch = \'\'\n+# html_use_opensearch = \'\'\n \n # This is the file name suffix for HTML files (e.g. ".xhtml").\n-#html_file_suffix = None\n+# html_file_suffix = None\n \n # Output file base name for HTML help builder.\n-htmlhelp_basename = \'plonerestapidoc\'\n+htmlhelp_basename = "plonerestapidoc"\n \n \n # -- Options for LaTeX output --------------------------------------------------\n \n latex_elements = {\n-# The paper size (\'letterpaper\' or \'a4paper\').\n-#\'papersize\': \'letterpaper\',\n-\n-# The font size (\'10pt\', \'11pt\' or \'12pt\').\n-#\'pointsize\': \'10pt\',\n-\n-# Additional stuff for the LaTeX preamble.\n-#\'preamble\': \'\',\n+    # The paper size (\'letterpaper\' or \'a4paper\').\n+    #\'papersize\': \'letterpaper\',\n+    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n+    #\'pointsize\': \'10pt\',\n+    # Additional stuff for the LaTeX preamble.\n+    #\'preamble\': \'\',\n }\n \n # Grouping the document tree into LaTeX files. List of tuples\n # (source start file, target name, title, author, documentclass [howto/manual]).\n latex_documents = [\n-  (\'index\', \'plonerestapi.tex\', u\'plone.restapi Documentation\',\n-   u\'Plone Foundation\', \'manual\'),\n+    (\n+        "index",\n+        "plonerestapi.tex",\n+        u"plone.restapi Documentation",\n+        u"Plone Foundation",\n+        "manual",\n+    ),\n ]\n \n # The name of an image file (relative to this directory) to place at the top of\n # the title page.\n-#latex_logo = None\n+# latex_logo = None\n \n # For "manual" documents, if this is true, then toplevel headings are parts,\n # not chapters.\n-#latex_use_parts = False\n+# latex_use_parts = False\n \n # If true, show page references after internal links.\n-#latex_show_pagerefs = False\n+# latex_show_pagerefs = False\n \n # If true, show URL addresses after external links.\n-#latex_show_urls = False\n+# latex_show_urls = False\n \n # Documents to append as an appendix to all manuals.\n-#latex_appendices = []\n+# latex_appendices = []\n \n # If false, no module index is generated.\n-#latex_domain_indices = True\n+# latex_domain_indices = True\n \n \n # -- Options for manual page output --------------------------------------------\n@@ -232,12 +237,11 @@ def patch_pygments_to_highlight_jsonschema():\n # One entry per manual page. List of tuples\n # (source start file, name, description, authors, manual section).\n man_pages = [\n-    (\'index\', \'plonerestapi\', u\'plone.restapi Documentation\',\n-     [u\'Plone Foundation\'], 1)\n+    ("index", "plonerestapi", u"plone.restapi Documentation", [u"Plone Foundation"], 1)\n ]\n \n # If true, show URL addresses after external links.\n-#man_show_urls = False\n+# man_show_urls = False\n \n \n # -- Options for Texinfo output ------------------------------------------------\n@@ -246,20 +250,26 @@ def patch_pygments_to_highlight_jsonschema():\n # (source start file, target name, title, author,\n #  dir menu entry, description, category)\n texinfo_documents = [\n-  (\'index\', \'plonerestapi\', u\'plone.restapi Documentation\',\n-   u\'Plone Foundation\', \'plonerestapi\', \'One line description of project.\',\n-   \'Miscellaneous\'),\n+    (\n+        "index",\n+        "plonerestapi",\n+        u"plone.restapi Documentation",\n+        u"Plone Foundation",\n+        "plonerestapi",\n+        "One line description of project.",\n+        "Miscellaneous",\n+    ),\n ]\n \n # Documents to append as an appendix to all manuals.\n-#texinfo_appendices = []\n+# texinfo_appendices = []\n \n # If false, no module index is generated.\n-#texinfo_domain_indices = True\n+# texinfo_domain_indices = True\n \n # How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n-#texinfo_show_urls = \'footnote\'\n+# texinfo_show_urls = \'footnote\'\n \n-suppress_warnings = [\'image.nonlocal_uri\']\n+suppress_warnings = ["image.nonlocal_uri"]\n \n patch_pygments_to_highlight_jsonschema()\ndiff --git a/news/1006.bugfix b/news/1006.bugfix\nnew file mode 100644\nindex 000000000..31788fe34\n--- /dev/null\n+++ b/news/1006.bugfix\n@@ -0,0 +1,2 @@\n+- Fix resolveuid blocks transforms\n+  [tisto, sneridagh]\ndiff --git a/src/plone/restapi/deserializer/blocks.py b/src/plone/restapi/deserializer/blocks.py\nindex b6275c3c6..7ec5e5333 100644\n--- a/src/plone/restapi/deserializer/blocks.py\n+++ b/src/plone/restapi/deserializer/blocks.py\n@@ -15,6 +15,8 @@\n from zope.interface import implementer\n from zope.publisher.interfaces.browser import IBrowserRequest\n \n+import os\n+\n \n def path2uid(context, link):\n     # unrestrictedTraverse requires a string on py3. see:\n@@ -66,8 +68,10 @@ def __call__(self, value):\n                 ):\n                     if h.block_type == block_type or h.block_type is None:\n                         handlers.append(h)\n+\n                 for handler in sorted(handlers, key=lambda h: h.order):\n-                    block_value = handler(block_value)\n+                    if not getattr(handler, "disabled", False):\n+                        block_value = handler(block_value)\n \n                 value[id] = block_value\n \n@@ -85,6 +89,7 @@ class ResolveUIDDeserializer(object):\n \n     order = 1\n     block_type = None\n+    disabled = os.environ.get("disable_transform_resolveuid", False)\n \n     def __init__(self, context, request):\n         self.context = context\n@@ -104,6 +109,7 @@ def __call__(self, block):\n class TextBlockDeserializer(object):\n     order = 100\n     block_type = "text"\n+    disabled = os.environ.get("disable_transform_resolveuid", False)\n \n     def __init__(self, context, request):\n         self.context = context\n@@ -111,13 +117,14 @@ def __init__(self, context, request):\n \n     def __call__(self, block):\n         # Convert absolute links to resolveuid\n-        # Assumes in-place mutations\n-\n+        #   http://localhost:55001/plone/link-target\n+        #   ->\n+        #   ../resolveuid/023c61b44e194652804d05a15dc126f4\n         entity_map = block.get("text", {}).get("entityMap", {})\n         for entity in entity_map.values():\n             if entity.get("type") == "LINK":\n-                href = entity.get("data", {}).get("href", "")\n-                entity["data"]["href"] = path2uid(context=self.context, link=href)\n+                href = entity.get("data", {}).get("url", "")\n+                entity["data"]["url"] = path2uid(context=self.context, link=href)\n         return block\n \n \n@@ -126,6 +133,7 @@ def __call__(self, block):\n class HTMLBlockDeserializer(object):\n     order = 100\n     block_type = "html"\n+    disabled = os.environ.get("disable_transform_html", False)\n \n     def __init__(self, context, request):\n         self.context = context\n@@ -149,6 +157,7 @@ def __call__(self, block):\n class ImageBlockDeserializer(object):\n     order = 100\n     block_type = "image"\n+    disabled = os.environ.get("disable_transform_resolveuid", False)\n \n     def __init__(self, context, request):\n         self.context = context\ndiff --git a/src/plone/restapi/interfaces.py b/src/plone/restapi/interfaces.py\nindex 0efb341c3..41a73d000 100644\n--- a/src/plone/restapi/interfaces.py\n+++ b/src/plone/restapi/interfaces.py\n@@ -94,6 +94,7 @@ class IBlockFieldDeserializationTransformer(Interface):\n     order = Attribute(\n         "A number used in sorting value transformers. " "Smaller is executed first"\n     )\n+    disabled = Attribute("Boolean that disables the transformer if required")\n \n     def __init__(field, context, request):\n         """Adapts context and the request."""\n@@ -112,6 +113,7 @@ class IBlockFieldSerializationTransformer(Interface):\n         "A number used in sorting value transformers for the "\n         "same block. Smaller is executed first"\n     )\n+    disabled = Attribute("Boolean that disables the transformer if required")\n \n     def __init__(field, context, request):\n         """Adapts context and the request."""\ndiff --git a/src/plone/restapi/serializer/blocks.py b/src/plone/restapi/serializer/blocks.py\nindex bf0ac71e0..d5653c95e 100644\n--- a/src/plone/restapi/serializer/blocks.py\n+++ b/src/plone/restapi/serializer/blocks.py\n@@ -17,7 +17,7 @@\n \n import copy\n import re\n-\n+import os\n \n RESOLVEUID_RE = re.compile("^[./]*resolve[Uu]id/([^/]*)/?(.*)$")\n \n@@ -63,7 +63,8 @@ def __call__(self):\n                         handlers.append(h)\n \n                 for handler in sorted(handlers, key=lambda h: h.order):\n-                    block_value = handler(block_value)\n+                    if not getattr(handler, "disabled", False):\n+                        block_value = handler(block_value)\n \n                 value[id] = block_value\n \n@@ -75,6 +76,7 @@ def __call__(self):\n class ResolveUIDSerializer(object):\n     order = 1\n     block_type = None\n+    disabled = os.environ.get("disable_transform_resolveuid", False)\n \n     def __init__(self, context, request):\n         self.context = context\n@@ -92,17 +94,20 @@ def __call__(self, value):\n class TextBlockSerializer(object):\n     order = 100\n     block_type = "text"\n+    disabled = os.environ.get("disable_transform_resolveuid", False)\n \n     def __init__(self, context, request):\n         self.context = context\n         self.request = request\n \n     def __call__(self, value):\n-        # Resolve UID links\n+        # Resolve UID links:\n+        #   ../resolveuid/023c61b44e194652804d05a15dc126f4\n+        #   ->\n+        #   http://localhost:55001/plone/link-target\n         entity_map = value.get("text", {}).get("entityMap", {})\n         for entity in entity_map.values():\n-            if entity.get("type") != "LINK":\n-                continue\n-            href = entity.get("data", {}).get("href", "")\n-            entity["data"]["href"] = uid_to_url(href)\n+            if entity.get("type") == "LINK":\n+                url = entity.get("data", {}).get("url", "")\n+                entity["data"]["url"] = uid_to_url(url)\n         return value\ndiff --git a/src/plone/restapi/tests/test_blocks_deserializer.py b/src/plone/restapi/tests/test_blocks_deserializer.py\nindex 4c3b0b660..687b6e5f5 100644\n--- a/src/plone/restapi/tests/test_blocks_deserializer.py\n+++ b/src/plone/restapi/tests/test_blocks_deserializer.py\n@@ -76,6 +76,35 @@ def __call__(self, value):\n         assert self.portal.doc1._handler_called is True\n         assert self.portal.doc1.blocks["123"]["value"] == u"changed: text"\n \n+    def test_disabled_deserializer(self):\n+        @implementer(IBlockFieldDeserializationTransformer)\n+        @adapter(IBlocks, IBrowserRequest)\n+        class TestAdapter(object):\n+            order = 10\n+            block_type = "test"\n+            disabled = True\n+\n+            def __init__(self, context, request):\n+                self.context = context\n+                self.request = request\n+\n+            def __call__(self, value):\n+                self.context._handler_called = True\n+\n+                value["value"] = u"changed: {}".format(value["value"])\n+\n+                return value\n+\n+        provideSubscriptionAdapter(\n+            TestAdapter,\n+            (IDexterityItem, IBrowserRequest),\n+        )\n+\n+        self.deserialize(blocks={"123": {"@type": "test", "value": u"text"}})\n+\n+        assert not getattr(self.portal.doc1, "_handler_called", False)\n+        assert self.portal.doc1.blocks["123"]["value"] == u"text"\n+\n     def test_register_multiple_transform(self):\n         @implementer(IBlockFieldDeserializationTransformer)\n         @adapter(IBlocks, IBrowserRequest)\ndiff --git a/src/plone/restapi/tests/test_blocks_serializer.py b/src/plone/restapi/tests/test_blocks_serializer.py\nindex f464c0ec1..18425df3f 100644\n--- a/src/plone/restapi/tests/test_blocks_serializer.py\n+++ b/src/plone/restapi/tests/test_blocks_serializer.py\n@@ -90,3 +90,34 @@ def __call__(self, value):\n             blocks={"123": {"@type": "test_multi", "value": u"a"}},\n         )\n         self.assertEqual(value["123"]["value"], u"c")\n+\n+    def test_disabled_serializer(self):\n+        @implementer(IBlockFieldSerializationTransformer)\n+        @adapter(IBlocks, IBrowserRequest)\n+        class TestAdapter(object):\n+            order = 10\n+            block_type = "test"\n+            disabled = True\n+\n+            def __init__(self, context, request):\n+                self.context = context\n+                self.request = request\n+\n+            def __call__(self, value):\n+                self.context._handler_called = True\n+\n+                value["value"] = u"changed: {}".format(value["value"])\n+\n+                return value\n+\n+        provideSubscriptionAdapter(\n+            TestAdapter,\n+            (IDexterityItem, IBrowserRequest),\n+        )\n+        value = self.serialize(\n+            context=self.portal.doc1,\n+            blocks={"123": {"@type": "test", "value": u"text"}},\n+        )\n+\n+        assert not getattr(self.portal.doc1, "_handler_called", False)\n+        self.assertEqual(value["123"]["value"], u"text")\ndiff --git a/src/plone/restapi/tests/test_resolveuid.py b/src/plone/restapi/tests/test_resolveuid.py\nindex 1e09d9c36..bc25ca3e6 100644\n--- a/src/plone/restapi/tests/test_resolveuid.py\n+++ b/src/plone/restapi/tests/test_resolveuid.py\n@@ -1,15 +1,208 @@\n # -*- coding: utf-8 -*-\n+from plone.app.testing import login\n from plone.app.testing import logout\n+from plone.app.testing import setRoles\n+from plone.app.testing import SITE_OWNER_NAME\n+from plone.app.testing import SITE_OWNER_PASSWORD\n+from plone.app.testing import TEST_USER_ID\n from plone.dexterity.utils import iterSchemata\n+from plone.namedfile.file import NamedBlobImage\n from plone.namedfile.file import NamedFile\n from plone.restapi.interfaces import IFieldDeserializer\n from plone.restapi.interfaces import IFieldSerializer\n+from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n from plone.restapi.testing import PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n from plone.uuid.interfaces import IUUID\n+from Products.CMFCore.utils import getToolByName\n from unittest import TestCase\n from z3c.form.interfaces import IDataManager\n from zope.component import getMultiAdapter\n \n+import os\n+import requests\n+import transaction\n+\n+\n+class TestBlocksResolveUIDFunctional(TestCase):\n+\n+    layer = PLONE_RESTAPI_BLOCKS_FUNCTIONAL_TESTING\n+\n+    def setUp(self):\n+        self.app = self.layer["app"]\n+        self.portal = self.layer["portal"]\n+        self.portal_url = self.portal.absolute_url()\n+        setRoles(self.portal, TEST_USER_ID, ["Member"])\n+        login(self.portal, SITE_OWNER_NAME)\n+        self.portal.invokeFactory("Folder", id="folder1", title="My Folder")\n+        self.portal.invokeFactory("Document", id="target", title="Link Target")\n+        wftool = getToolByName(self.portal, "portal_workflow")\n+        wftool.doActionFor(self.portal.folder1, "publish")\n+        transaction.commit()\n+\n+    def test_create_document_with_link_stores_uuid(self):\n+        response = requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document",\n+                "blocks": {\n+                    "09e39ddf-a945-49f2-b609-ea427ac3430b": {\n+                        "@type": "text",\n+                        "text": {\n+                            "blocks": [\n+                                {\n+                                    "data": {},\n+                                    "depth": 0,\n+                                    "entityRanges": [\n+                                        {"key": 0, "length": 4, "offset": 0}\n+                                    ],\n+                                    "inlineStyleRanges": [],\n+                                    "key": "ark35",\n+                                    "text": "Link",\n+                                    "type": "unstyled",\n+                                }\n+                            ],\n+                            "entityMap": {\n+                                "0": {\n+                                    "data": {\n+                                        "url": "{}/target".format(self.portal_url)\n+                                    },\n+                                    "mutability": "MUTABLE",\n+                                    "type": "LINK",\n+                                }\n+                            },\n+                        },\n+                    },\n+                    "21270e22-3a61-4780-b164-d6be56d942f4": {"@type": "title"},\n+                },\n+                "blocks_layout": {\n+                    "items": [\n+                        "21270e22-3a61-4780-b164-d6be56d942f4",\n+                        "09e39ddf-a945-49f2-b609-ea427ac3430b",\n+                    ]\n+                },\n+            },\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.begin()\n+\n+        target_uuid = IUUID(self.portal.target)\n+        self.assertEqual(\n+            "../../resolveuid/{}".format(target_uuid),\n+            self.portal.folder1.mydocument.blocks.get(\n+                "09e39ddf-a945-49f2-b609-ea427ac3430b"\n+            )\n+            .get("text")\n+            .get("entityMap")\n+            .get("0")\n+            .get("data")\n+            .get("url"),\n+        )\n+\n+    def test_create_document_with_image_block_stores_uuid(self):\n+        self.portal.invokeFactory("Image", id="image", title="Image")\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n+            image_data = f.read()\n+        self.portal.image.image = NamedBlobImage(\n+            data=image_data, contentType="image/png", filename=u"image.png"\n+        )\n+        self.portal.image.image_caption = u"This is an image caption."\n+        transaction.commit()\n+\n+        target_uuid = IUUID(self.portal.image)\n+\n+        response = requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document",\n+                "blocks": {\n+                    "09e39ddf-a945-49f2-b609-ea427ac3430b": {\n+                        "@type": "image",\n+                        "url": "{}/image".format(self.portal_url),\n+                    },\n+                    "21270e22-3a61-4780-b164-d6be56d942f4": {"@type": "title"},\n+                },\n+                "blocks_layout": {\n+                    "items": [\n+                        "21270e22-3a61-4780-b164-d6be56d942f4",\n+                        "09e39ddf-a945-49f2-b609-ea427ac3430b",\n+                    ]\n+                },\n+            },\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.begin()\n+\n+        self.assertEqual(\n+            "../../resolveuid/{}".format(target_uuid),\n+            self.portal.folder1.mydocument.blocks.get(\n+                "09e39ddf-a945-49f2-b609-ea427ac3430b"\n+            ).get("url"),\n+        )\n+\n+    def test_create_document_with_image_block_and_href_stores_uuid(self):\n+        self.portal.invokeFactory("Document", id="linked_document", title="Linked Doc")\n+        self.portal.invokeFactory("Image", id="image", title="Image")\n+        image_file = os.path.join(os.path.dirname(__file__), u"image.png")\n+        with open(image_file, "rb") as f:\n+            image_data = f.read()\n+        self.portal.image.image = NamedBlobImage(\n+            data=image_data, contentType="image/png", filename=u"image.png"\n+        )\n+        self.portal.image.image_caption = u"This is an image caption."\n+        transaction.commit()\n+\n+        target_uuid = IUUID(self.portal.image)\n+        liked_doc_uuid = IUUID(self.portal.linked_document)\n+\n+        response = requests.post(\n+            self.portal.folder1.absolute_url(),\n+            headers={"Accept": "application/json"},\n+            auth=(SITE_OWNER_NAME, SITE_OWNER_PASSWORD),\n+            json={\n+                "@type": "Document",\n+                "id": "mydocument",\n+                "title": "My Document",\n+                "blocks": {\n+                    "09e39ddf-a945-49f2-b609-ea427ac3430b": {\n+                        "@type": "image",\n+                        "url": "{}/image".format(self.portal_url),\n+                        "href": "{}/linked_document".format(self.portal_url),\n+                    },\n+                    "21270e22-3a61-4780-b164-d6be56d942f4": {"@type": "title"},\n+                },\n+                "blocks_layout": {\n+                    "items": [\n+                        "21270e22-3a61-4780-b164-d6be56d942f4",\n+                        "09e39ddf-a945-49f2-b609-ea427ac3430b",\n+                    ]\n+                },\n+            },\n+        )\n+        self.assertEqual(201, response.status_code)\n+        transaction.begin()\n+\n+        self.assertEqual(\n+            "../../resolveuid/{}".format(target_uuid),\n+            self.portal.folder1.mydocument.blocks.get(\n+                "09e39ddf-a945-49f2-b609-ea427ac3430b"\n+            ).get("url"),\n+        )\n+        self.assertEqual(\n+            "../../resolveuid/{}".format(liked_doc_uuid),\n+            self.portal.folder1.mydocument.blocks.get(\n+                "09e39ddf-a945-49f2-b609-ea427ac3430b"\n+            ).get("href"),\n+        )\n+\n \n class TestBlocksResolveUID(TestCase):\n     layer = PLONE_RESTAPI_BLOCKS_INTEGRATION_TESTING\n@@ -82,7 +275,6 @@ def test_blocks_field_serialization_resolves_uids(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}".format(uid),\n                                 "rel": "nofollow",\n                                 "url": "../resolveuid/{}".format(uid),\n                             },\n@@ -97,13 +289,13 @@ def test_blocks_field_serialization_resolves_uids(self):\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc2.absolute_url(),\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc2.absolute_url(),\n         )\n \n@@ -116,7 +308,6 @@ def test_resolveuid_keeps_suffix(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}/view".format(uid),\n                                 "rel": "nofollow",\n                                 "url": "../resolveuid/{}/view".format(uid),\n                             },\n@@ -131,13 +322,13 @@ def test_resolveuid_keeps_suffix(self):\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc2.absolute_url() + "/view",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc2.absolute_url() + "/view",\n         )\n \n@@ -217,7 +408,6 @@ def test_blocks_field_serialization_doesnt_update_stored_values(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}".format(uid),\n                                 "rel": "nofollow",\n                                 "url": "../resolveuid/{}".format(uid),\n                             },\n@@ -232,18 +422,18 @@ def test_blocks_field_serialization_doesnt_update_stored_values(self):\n         self.assertNotEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             blocks["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n         )\n         self.assertNotEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             blocks["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n         )\n \n     def test_blocks_field_deserialization_resolves_paths_to_uids(self):\n@@ -267,8 +457,6 @@ def test_blocks_field_deserialization_resolves_paths_to_uids(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": self.doc2.absolute_url(),\n-                                "rel": "nofollow",\n                                 "url": self.doc2.absolute_url(),\n                             },\n                             "mutability": "MUTABLE",\n@@ -282,13 +470,13 @@ def test_blocks_field_deserialization_resolves_paths_to_uids(self):\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             "../resolveuid/{}".format(uid),\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             "../resolveuid/{}".format(uid),\n         )\n \n@@ -349,13 +537,13 @@ def test_path_keeps_suffix(self):\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             "../resolveuid/{}/view".format(uid),\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             "../resolveuid/{}/view".format(uid),\n         )\n \n@@ -381,7 +569,6 @@ def test_blocks_field_serialization_resolves_uids_with_primary_field_url(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}".format(uid),\n                                 "rel": "nofollow",\n                                 "url": "../resolveuid/{}".format(uid),\n                             },\n@@ -396,14 +583,14 @@ def test_blocks_field_serialization_resolves_uids_with_primary_field_url(self):\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc_primary_field_url.absolute_url()\n             + "/@@download/test_primary_namedfile_field",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc_primary_field_url.absolute_url()\n             + "/@@download/test_primary_namedfile_field",\n         )\n@@ -431,7 +618,6 @@ def test_blocks_field_serialization_resolves_uids_primary_url_with_edit_permissi\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}".format(uid),\n                                 "rel": "nofollow",\n                                 "url": "../resolveuid/{}".format(uid),\n                             },\n@@ -446,13 +632,13 @@ def test_blocks_field_serialization_resolves_uids_primary_url_with_edit_permissi\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc_primary_field_url.absolute_url(),\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc_primary_field_url.absolute_url(),\n         )\n \n@@ -465,7 +651,6 @@ def test_resolveuid_with_primary_field_url_keeps_suffix(self):\n                     "entityMap": {\n                         "0": {\n                             "data": {\n-                                "href": "../resolveuid/{}/view".format(uid),\n                                 "rel": "nofollow",\n                                 "url": "../resolveuid/{}/view".format(uid),\n                             },\n@@ -480,12 +665,12 @@ def test_resolveuid_with_primary_field_url_keeps_suffix(self):\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc2.absolute_url() + "/view",\n         )\n         self.assertEqual(\n             value["effbdcdc-253c-41a7-841e-5edb3b56ce32"]["text"]["entityMap"]["0"][\n                 "data"\n-            ]["href"],\n+            ]["url"],\n             self.doc2.absolute_url() + "/view",\n         )\n'

