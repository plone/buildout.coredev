===================================
PLIP 10886 event improvements notes
===================================

PLIP Url: http://dev.plone.org/plone/ticket/10886
Previous, related PLIP: http://dev.plone.org/plone/ticket/9302


Status
======

DEVELOPMENT IN PROGRESS
PARTS OF THIS DOCUMENT ARE OUTDATED

Also see https://github.com/collective/plone.app.event/blob/master/TODO.rst

For more Information contact Johannes Raggam <johannes@raggam.co.at>


Introduction
============

The purpose of PLIP10886 is to provide an improved Event content type and
calendaring infrastructure, based on ideas and developments from other
packages.  The infrastructure should be compatible with RFC5545 [1] (Internet
Calendaring and Scheduling Core Object Specification - iCalendar) as much as
possible. This includes also recurrence support with the ability to define
multiple complex recurrence rules.


Installing
==========

$ git clone git://github.com/plone/buildout.coredev.git
$ cd buildout.coredev
$ virtualenv --no-site-packages python26
$ ./python26/bin/python bootstrap.py
$ cd plips/
$ ../bin/buildout -c plip10886-event-improvements.cfg
$ cd ..

Then start your instance
$ ./bin/instance fg

Test it like so:
$ ./bin/test -s plone.app.event

To run the DateRecurringIndex Benchmark suite do:
$ ./bin/instance benchmark_DateRecurringIndex_vs_DateIndex


The PLIP buildout config file plip10886-event-improvements.cfg extends
https://raw.github.com/collective/plone.app.event/master/base.cfg
plone.app.event contains a buildout.cfg file which might be used to build and
test it outside this coredev environment.

If you need writeable checkouts and have commit access to the github repositories in question, 

Overview
========

This PLIP aims to bring following features to plone:

* Support of Recurrence Rules based on RFC2445.

* Use pytz Timezone instead of DateTime's internal implementation.

* Configurable default Timezone for the portal, per object and per user.

* Prefer pythons's datetime over Zope's DateTime. DateTime ist still used.

* Cleanup and Refactoring of calendaring related code.

* New date/time field widget with new calendar widget.

* Support of all-day events.

* ICal Export with recurrence and attendees support.

* Refactoring of the calendar portlet.

* Removed old VCAL support in favor of ICAL, which utilizes plone.rfc5545

The start and end dates of the Event content type are stored in UTC, while the
Timezone is stored seperately. This approach is much cleaner, since UTC as
reference timezone is not subject to change and timezone calculations are much
more predictable. The get accessor on the date fields returns a date with the
timezone applied where the set accessor stores a DateTime instance in the UTC
Zone. For Timezones, the pytz implementation of the Olson Database is always
used. This way, we are always up-to-date with zone information, which change
several times per year.

Recurrence Calculations are also done Timezone-naively. Zones are added
afterwards to every occurence. This approach works around problems
and specifically a bug in python-dateutil when crossing Daylight Saving
Changes (see: recurrence_dateutil.txt in plone.event).
This might be costly, especially when many
occurences are listed at once. However, (TODO: adapt name to refactored one)
recurrence_sequence_ical uses an generator.

Products.DateRecurringIndex is a Drop-In replacement for the default DateIndex.
For every occurence, an Index entry is made. This way, catalog queries for a
specific Date return every object, which occurs on this date. However, to get
all occurences of one Event, a (TODO: adapter, utility?) from plone.event has
to be used. Theoretically a catalog query would also be possible, but that
is not implemented currently (and would mean, using many private _xyz
catalog methods).

The performance of Product.DateRecurringIndex can be compared with that of
DateIndex when no recurrence rules are used. When recurrence is used, indexing
takes a lot more time - besides of more datetime instances have to be indexed,
more occurences have to be calculated.

A benchmark was created to test the performance of DateRecurringIndex. Start it
like so:
$ ./bin/instance benchmark_DateRecurringIndex_vs_DateIndex

Here are some exemplary results for indexing 365 events for hundred times:

    Running benchmark ...
    benchCache . (time: 9.12884187698)
    benchDateIndex . (time: 1.23768615723)
    benchDateRecurringIndex . (time: 37.2978610992)
    benchDateRecurringIndex_norecur . (time: 1.58427906036)

----------------------------------------------------------------------

    benchCache ... Initialization and generations of objects to be indexed.
    benchDateIndex ... Time, the DateIndex needs for indexing.
    benchDateRecurringIndex_ical ... Time, the DRI index needs with a recurrence
    rule to occure exactly 4 times.
    DateRecurringIndex_norecur ... DRI Index without recurrence.

Here we can see that DateIndex and DateIndex are almost the same, while
calculation with an recurrence rule takes significantly longer.


TODO plone.formwidget.datetimeinput provides archetypes and z3cform based
date/time widget. Using the same codebase (templates and a base class) for both
Frameworks allows that one of the widgets profits of developments of the
another. Via Javascript, the enddate and -time are set 1 hour in advance of the
start date and is updated when the start date changes.


plone.app.event
---------------
Event Integration package for plone.
Url: https://svn.plone.org/svn/plone/plone.app.event/trunk/

plone.event
-----------
Event related infrastructure. Recurrence calculation tools based on RFC2445.
ICal export adapter, timezone tools and date conversion tools.
Url: https://github.com/collective/plone.event


Products.DateRecurringIndex
---------------------------
A drop-in replacement for Zope's DateIndex.
Url: https://github.com/collective/Products.DateRecurringIndex


archetypes.datetimewidget
-------------------------
A replacement for Archetype's CalendarWidget, based on JQueryTools Dateinput.
rl: https://github.com/collective/archetypes.datetimewidget


jquery.recurrenceinput.js
-------------------------
Jquery plugin widget which support the definition of complex recurrence
rulesets.
Url: https://github.com/collective/jquery.recurrenceinput.js


plone.formwidget.recurrence
---------------------------
An archetypes based recurrence widget which makes use of
jquery.recurrenceinput.js. plone.app.event's ATEvent depends on it.
Url: https://github.com/collective/plone.formwidget.recurrence


External Dependencies
=====================

* python-dateutil
Used for calculating recurring dates from RFC2445 compatible recurrence rules.
Info: http://labix.org/python-dateutil
PyPi: http://pypi.python.org/pypi/python-dateutil

* pytz
Needed for correct timezone handling for recurring events over daylight saving
time changes. Based on the olson database and python's reference tool for
timezone handling.
Info: http://pytz.sourceforge.net/
PyPi: http://pypi.python.org/pypi/pytz



Known issues
============

* As we recently found out, there is a new iCalendar (RFC5545, [2])
specification from September 2009 which obsoletes RFC2445. RFC5545 is simpler
than RFC2445 and mostly backwards compatible. The most obvious change is that
no EXRULES (recurrence exclusion rules) are supported anymore. Python-dateutil,
on which plone.event depends on, supports only RFC2445 for now.

* There are no upgrade steps for now. Upgrade steps will be handed in after
  PLIP reviewing. Those include:
  - Reindexing the whole portal catalog for Products.DateRecurringIndex.
  - Updating IPortletAssignmentSettings for events and calendar portlets in
    plone.app.event.
  - Converting all start/end DateTime Instances to UTC and setting the Timezone
    attribute correctly.
  - Saving Settings from Calendar configlet, uninstalling it and setting
    values in Event configlet.
  - Setting default timezone for the portal.

* Whole day events are stored with the start-time 0:00:00 and end-time 23:59:59.
This is set via an event subscriber on object initialization and object editing.

* The GenericSetup registrations of start and end indexes and metadata columns
are moved out of Plone into plone.app.event for two reasons
  - This follows also the convention  "all event related code at one place".
  - DateRecurringIndexes have needs other parameters than DateIndex.

* The DateIndex property "index_naive_time_as_local", which is set to True
  isn't implemented by DateRecurringIndex for now. We always use UTC for
  storing DateTime instances. All Event types must have the timezone set, or
  (TODO) if available, explicitly set "no timezone".

* For recurring events, unlimited occurrences are prevented whether through the
  recurrence rule itself or through a MAXCOUNT ceiling constant. It is set to
  100000 occurrences of an event, which is probably enough. This should be made
  configurable somehow (without depending on the plone core, since it's
  defined in plone.event).

* Unlimited occurences are still possible with ical export, if there is no
  UNTIL or COUNT component in the recurrence rule. This case has to be handled
  by the calendaring client then.


Future plans
============

* Calendar views
* iCal import
* caldav support
* hcal microformat support
* RFC5545 support


Needed documentation changes
============================

* For the UI part, mainly the new wholeDay field and recurrence rules should be
documented.

* For an upgrade document, import changes should be documented.

* For general developer's documentation, an guide how to enable recurrence support
for custom event types could be documented.


Backwards compatibility
=======================

A complete re-index of the portal catalog and fixes to plone.app.portal
assignements should do all migration needs. Migration scripts and tests for that
have still to be written.


Credits
=======

Authors
-------
 - Vincent Fretin (vincent.fretin@gmail.com)
 - Rok Garbas (rok.garbas@gmail.com)
 - Johannes Raggam (johannes@raggam.co.at)

Sprint Participants
-------------------
 - Philip Bauer (bauer@starzel.de)
 - Tom Gross (itconsense@gmail.com)
 - Ryan Northey (ryan@3ca.org.uk)
 - Simone Orsi (simahawk@gmail.com)
 - Vitaliy Podoba (vitaliypodoba@gmail.com)
 - Mike Rhodes (mike.rhodes@gmail.com)
 - Dorneles Tremea (dorneles@tremea.com)

Build upon the work of
----------------------
  - Andreas Jung (lists@zopyx.com)
  - Jens Klein (jens@bluedynamics.com)
  - Lennart Regebro (regebro@gmail.com)

  And the Plone and Archetype Teams, who developed ATEvent and Calendaring
  functionality in Plone.

Sprints
-------
Snow Sprint 2007
Cathedral Sprint 2010
DZUG Tagung Sprint 2010
Bristol PloneConf Sprint 2011
Artsprint 2011
Buschenschanksprint 2011


References
==========
[1] http://www.ietf.org/rfc/rfc5545.txt
[3] http://www.itconsense.com/coverage-plone.event/all.html
